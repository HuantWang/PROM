-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_06_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_06_bad(){    short data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_06_bad()
CWE190_Integer_Overflow__short_max_multiply_06_bad
{    short data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,11,0)
(3,6,0)
(23,14,0)
(4,16,0)
(20,3,0)
(11,21,0)
(30,21,0)
(10,8,0)
(16,14,0)
(8,0,0)
(27,29,0)
(19,13,0)
(29,16,0)
(1,11,0)
(28,11,0)
(29,3,0)
(9,0,0)
(31,14,0)
(11,16,0)
(21,0,0)
(2,25,0)
(7,22,0)
(5,25,0)
(8,21,0)
(17,13,0)
(24,14,0)
(11,3,0)
(15,3,0)
(18,16,0)
(26,29,0)
(2,16,1)
(18,4,1)
(8,21,1)
(28,1,1)
(16,18,1)
(11,3,1)
(29,16,1)
(15,20,1)
(29,3,1)
(13,19,1)
(8,10,1)
(20,25,1)
(29,26,1)
(17,25,1)
(5,2,1)
(12,29,1)
(30,29,1)
(25,5,1)
(12,13,1)
(21,11,1)
(11,28,1)
(27,13,1)
(10,21,1)
(11,16,1)
(12,8,1)
(26,27,1)
(3,15,1)
(19,17,1)
(17,3,1)
(1,30,1)
(15,25,2)
(28,29,2)
(11,16,2)
(30,29,2)
(21,11,2)
(11,29,2)
(29,13,2)
(3,25,2)
(8,21,2)
(29,16,2)
(1,29,2)
(11,3,2)
(27,13,2)
(29,3,2)
(26,13,2)
(21,29,2)
(20,25,2)
(10,29,2)
(8,29,2)
-----------------------------------
(0,)
(1,data)
(2,STATIC_CONST_FIVE)
(3,data = SHRT_MAX)
(4,data)
(5,5)
(6,)
(7,if(data > 0)
(8,printIntLine(result)
(9,result)
(10,result)
(11,data * 2)
(12,RET)
(13,STATIC_CONST_FIVE==5)
(14,)
(15,SHRT_MAX)
(16,data = 0)
(17,STATIC_CONST_FIVE)
(18,0)
(19,5)
(20,data)
(21,result = data * 2)
(22,)
(23,if(STATIC_CONST_FIVE==5)
(24,data)
(25,STATIC_CONST_FIVE==5)
(26,0)
(27,data)
(28,2)
(29,data > 0)
(30,result)
(31,if(STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^