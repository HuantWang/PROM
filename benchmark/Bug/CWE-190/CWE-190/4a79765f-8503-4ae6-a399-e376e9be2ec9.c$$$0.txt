-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_07_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,32,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
30,31
30,32
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_07_bad(){    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_07_bad()
CWE190_Integer_Overflow__int_rand_multiply_07_bad
{    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(11,31,0)
(13,21,0)
(12,21,0)
(14,4,0)
(16,26,0)
(26,12,0)
(11,10,0)
(7,20,0)
(10,9,0)
(5,12,0)
(26,31,0)
(2,9,0)
(17,12,0)
(31,27,0)
(11,12,0)
(23,9,0)
(2,10,0)
(25,26,0)
(3,11,0)
(24,19,0)
(18,11,0)
(22,19,0)
(1,31,0)
(15,10,0)
(28,2,0)
(10,11,0)
(0,21,0)
(29,31,0)
(31,29,0)
(8,21,0)
(30,4,0)
(30,14,1)
(22,12,1)
(10,11,1)
(1,19,1)
(29,1,1)
(28,10,1)
(6,4,1)
(11,18,1)
(25,16,1)
(6,26,1)
(31,29,1)
(14,19,1)
(16,4,1)
(3,15,1)
(19,24,1)
(14,31,1)
(11,31,1)
(26,12,1)
(4,30,1)
(15,26,1)
(26,31,1)
(6,2,1)
(12,17,1)
(2,28,1)
(18,3,1)
(26,25,1)
(2,10,1)
(24,22,1)
(17,5,1)
(11,12,1)
(10,11,2)
(2,26,2)
(31,29,2)
(28,26,2)
(2,10,2)
(26,12,2)
(26,4,2)
(10,26,2)
(31,19,2)
(26,31,2)
(3,26,2)
(16,4,2)
(11,12,2)
(29,19,2)
(11,26,2)
(1,19,2)
(25,4,2)
(15,26,2)
(11,31,2)
(18,26,2)
-----------------------------------
(0,data)
(1,data)
(2,printIntLine(result)
(3,data)
(4,staticFive==5)
(5,data)
(6,RET)
(7,if(data > 0)
(8,if(staticFive==5)
(9,)
(10,result = data * 2)
(11,data * 2)
(12,data = 0)
(13,if(staticFive==5)
(14,staticFive)
(15,result)
(16,data)
(17,0)
(18,2)
(19,staticFive==5)
(20,)
(21,)
(22,staticFive)
(23,result)
(24,5)
(25,0)
(26,data > 0)
(27,)
(28,result)
(29,RAND32()
(30,5)
(31,data = RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^