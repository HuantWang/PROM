-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
        {
            short result = data * data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
67,69
70,71
72,73
72,74
73,74
73,75
76,77
76,78
77,78
79,80
79,81
80,81
80,82
83,84
85,86
85,87
86,87
87,88
87,89
89,90
89,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,53,57,59,65,68,69,71,74,75,78,81,82,84,88,90,94,96,100,102,107,108
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
62,63
62,64
92,93
92,94
-----guardedBy-----
71,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_12_bad()
CWE190_Integer_Overflow__short_fscanf_square_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))        {            short result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) <= (long)sqrt((double)SHRT_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)SHRT_MAX)
long
long

sqrt((double)SHRT_MAX)
sqrt
sqrt
(double)SHRT_MAX
double
double

SHRT_MAX
SHRT_MAX
{            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(42,19,0)
(51,0,0)
(45,32,0)
(11,34,0)
(33,24,0)
(39,42,0)
(48,34,0)
(52,42,0)
(0,18,0)
(38,25,0)
(30,24,0)
(21,32,0)
(23,41,0)
(13,45,0)
(16,51,0)
(49,25,0)
(4,32,0)
(30,20,0)
(34,11,0)
(37,20,0)
(51,25,0)
(25,51,0)
(31,51,0)
(11,29,0)
(25,42,0)
(27,0,0)
(48,41,0)
(8,41,0)
(7,10,0)
(9,29,0)
(15,34,0)
(32,44,0)
(24,39,0)
(9,53,0)
(31,0,0)
(47,14,0)
(9,28,0)
(41,48,0)
(45,53,0)
(25,53,0)
(22,39,0)
(29,9,0)
(39,53,0)
(34,15,0)
(28,9,0)
(46,31,0)
(1,9,0)
(54,50,0)
(14,26,0)
(3,53,0)
(41,23,0)
(36,30,0)
(32,45,0)
(12,39,0)
(34,48,0)
(6,53,0)
(5,42,0)
(2,10,0)
(24,20,0)
(53,10,0)
(39,24,0)
(40,10,0)
(29,11,0)
(9,42,0)
(9,28,1)
(43,32,1)
(1,43,1)
(41,23,1)
(48,41,1)
(51,25,1)
(25,49,1)
(24,39,1)
(30,36,1)
(30,24,1)
(31,51,1)
(8,29,1)
(36,24,1)
(22,12,1)
(53,6,1)
(39,22,1)
(43,42,1)
(17,31,1)
(35,53,1)
(39,53,1)
(17,30,1)
(46,51,1)
(47,11,1)
(9,42,1)
(39,42,1)
(11,29,1)
(32,45,1)
(29,9,1)
(52,5,1)
(49,38,1)
(45,53,1)
(5,35,1)
(11,34,1)
(9,53,1)
(34,48,1)
(14,47,1)
(16,43,1)
(13,21,1)
(6,3,1)
(21,4,1)
(4,35,1)
(12,33,1)
(9,1,1)
(33,11,1)
(25,42,1)
(31,46,1)
(41,8,1)
(34,15,1)
(45,13,1)
(42,52,1)
(25,53,1)
(38,16,1)
(17,14,1)
(13,35,2)
(9,53,2)
(41,43,2)
(39,42,2)
(9,42,2)
(39,53,2)
(24,11,2)
(51,43,2)
(51,25,2)
(11,34,2)
(48,41,2)
(9,28,2)
(11,29,2)
(33,11,2)
(11,43,2)
(42,35,2)
(30,24,2)
(34,48,2)
(29,9,2)
(34,43,2)
(45,53,2)
(4,35,2)
(31,43,2)
(45,35,2)
(47,11,2)
(5,35,2)
(29,43,2)
(9,43,2)
(32,35,2)
(31,51,2)
(46,43,2)
(24,39,2)
(32,45,2)
(36,11,2)
(41,23,2)
(52,35,2)
(25,43,2)
(21,35,2)
(30,11,2)
(22,11,2)
(25,42,2)
(8,43,2)
(12,11,2)
(48,43,2)
(49,43,2)
(1,43,2)
(39,11,2)
(14,11,2)
(25,53,2)
(34,15,2)
(16,43,2)
(38,43,2)
-----------------------------------
(0,)
(1,data)
(2,if(globalReturnsTrueOrFalse()
(3,data)
(4,stdin)
(5,data)
(6,0)
(7,data)
(8,SHRT_MAX)
(9,(long)
(10,)
(11,abs((long)
(12,data)
(13,data)
(14,printLine("data value is too large to perform arithmetic safely.")
(15,long)
(16,result)
(17,RET)
(18,)
(19,)
(20,)
(21,"%hd")
(22,data)
(23,double)
(24,result = data * data)
(25,data * data)
(26,)
(27,result)
(28,long)
(29,abs((long)
(30,printIntLine(result)
(31,printIntLine(result)
(32,fscanf (stdin, "%hd", &data)
(33,result)
(34,(long)
(35,globalReturnsTrueOrFalse()
(36,result)
(37,result)
(38,data)
(39,data * data)
(40,if(globalReturnsTrueOrFalse()
(41,(double)
(42,data = 2)
(43,globalReturnsTrueOrFalse()
(44,)
(45,&data)
(46,result)
(47,"data value is too large to perform arithmetic safely.")
(48,sqrt((double)
(49,data)
(50,)
(51,result = data * data)
(52,2)
(53,data = 0)
(54,if (abs((long)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^