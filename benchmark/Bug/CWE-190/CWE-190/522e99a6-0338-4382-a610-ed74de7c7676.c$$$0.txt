-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,73,77,79,83,84,88,90
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
70,71
70,72
81,82
81,83
-----guardedBy-----
72,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_32_bad()
CWE190_Integer_Overflow__char_max_multiply_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,43,0)
(31,41,0)
(17,43,0)
(16,11,0)
(43,19,0)
(47,17,0)
(42,44,0)
(40,24,0)
(37,12,0)
(39,21,0)
(20,24,0)
(41,21,0)
(32,43,0)
(3,22,0)
(35,1,0)
(45,17,0)
(42,11,0)
(27,33,0)
(14,42,0)
(36,11,0)
(24,33,0)
(38,2,0)
(0,40,0)
(12,1,0)
(34,16,0)
(8,41,0)
(9,16,0)
(13,21,0)
(1,12,0)
(18,3,0)
(43,2,0)
(44,42,0)
(18,40,0)
(28,8,0)
(23,3,0)
(33,11,0)
(25,11,0)
(46,24,0)
(12,3,0)
(30,26,0)
(19,42,0)
(29,19,0)
(40,33,0)
(1,33,0)
(41,26,0)
(8,26,0)
(3,11,0)
(4,2,0)
(19,43,0)
(2,11,0)
(5,18,0)
(10,44,0)
(21,41,0)
(7,22,0)
(22,3,0)
(6,11,0)
(21,39,1)
(5,24,1)
(12,3,1)
(28,41,1)
(10,14,1)
(37,35,1)
(45,43,1)
(18,5,1)
(34,42,1)
(21,43,1)
(31,17,1)
(0,18,1)
(40,24,1)
(18,3,1)
(12,37,1)
(15,17,1)
(8,41,1)
(42,44,1)
(44,10,1)
(14,3,1)
(9,34,1)
(39,13,1)
(40,0,1)
(22,7,1)
(24,20,1)
(46,1,1)
(8,28,1)
(16,9,1)
(15,8,1)
(13,31,1)
(47,45,1)
(32,40,1)
(3,22,1)
(35,16,1)
(43,19,1)
(17,47,1)
(19,29,1)
(29,32,1)
(41,21,1)
(17,43,1)
(1,12,1)
(20,46,1)
(7,23,1)
(19,42,1)
(3,22,2)
(18,3,2)
(1,12,2)
(13,17,2)
(8,17,2)
(43,19,2)
(42,44,2)
(40,24,2)
(41,17,2)
(31,17,2)
(8,41,2)
(41,21,2)
(19,42,2)
(28,17,2)
(21,43,2)
(21,17,2)
(12,3,2)
(17,43,2)
(39,17,2)
-----------------------------------
(0,data)
(1,data = *dataPtr1)
(2,)
(3,*dataPtr1 = &data)
(4,if(data > 0)
(5,dataPtr1)
(6,dataPtr2)
(7,data)
(8,printHexCharLine(result)
(9,' ')
(10,data)
(11,)
(12,*dataPtr1)
(13,data)
(14,dataPtr2)
(15,RET)
(16,data = ' ')
(17,data > 0)
(18,*dataPtr1)
(19,*dataPtr2)
(20,CHAR_MAX)
(21,data * 2)
(22,&data)
(23,dataPtr1)
(24,data = CHAR_MAX)
(25,data)
(26,)
(27,data)
(28,result)
(29,dataPtr2)
(30,result)
(31,result)
(32,data)
(33,)
(34,data)
(35,data)
(36,dataPtr1)
(37,dataPtr1)
(38,data)
(39,2)
(40,*dataPtr1 = data)
(41,result = data * 2)
(42,*dataPtr2 = &data)
(43,data = *dataPtr2)
(44,&data)
(45,data)
(46,data)
(47,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^