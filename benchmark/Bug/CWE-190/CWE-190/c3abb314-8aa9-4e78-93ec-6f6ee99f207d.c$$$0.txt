-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_03_bad()
CWE190_Integer_Overflow__short_fscanf_square_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,26,0)
(27,19,0)
(22,10,0)
(27,13,0)
(29,5,0)
(4,19,0)
(26,13,0)
(17,13,0)
(26,15,0)
(14,0,0)
(7,26,0)
(20,19,0)
(8,2,0)
(15,22,0)
(12,2,0)
(19,27,0)
(15,26,0)
(6,2,0)
(3,22,0)
(25,22,0)
(16,3,0)
(3,15,0)
(19,23,0)
(13,2,0)
(11,5,0)
(1,13,0)
(21,0,0)
(18,15,0)
(24,27,0)
(21,14,1)
(5,29,1)
(24,4,1)
(1,17,1)
(27,13,1)
(28,5,1)
(7,18,1)
(19,27,1)
(9,7,1)
(4,20,1)
(11,0,1)
(27,24,1)
(15,26,1)
(28,3,1)
(18,5,1)
(14,13,1)
(13,1,1)
(3,16,1)
(29,11,1)
(0,21,1)
(26,9,1)
(20,0,1)
(3,15,1)
(26,13,1)
(11,19,1)
(16,15,1)
(4,0,2)
(3,15,2)
(15,5,2)
(19,27,2)
(20,0,2)
(19,0,2)
(24,0,2)
(26,13,2)
(27,0,2)
(3,5,2)
(18,5,2)
(9,5,2)
(15,26,2)
(27,13,2)
(26,5,2)
(16,5,2)
(7,5,2)
-----------------------------------
(0,5==5)
(1,0)
(2,)
(3,printIntLine(result)
(4,"%hd")
(5,5==5)
(6,data)
(7,data)
(8,if(5==5)
(9,data)
(10,)
(11,5)
(12,if(5==5)
(13,data = 0)
(14,5)
(15,result = data * data)
(16,result)
(17,data)
(18,result)
(19,fscanf (stdin, "%hd", &data)
(20,stdin)
(21,5)
(22,)
(23,)
(24,data)
(25,result)
(26,data * data)
(27,&data)
(28,RET)
(29,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^