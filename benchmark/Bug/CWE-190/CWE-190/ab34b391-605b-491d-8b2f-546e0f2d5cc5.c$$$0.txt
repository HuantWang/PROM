-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_09_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_09_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_09_bad()
CWE190_Integer_Overflow__char_rand_add_09_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(26,13,0)
(3,11,0)
(13,19,0)
(9,5,0)
(14,16,0)
(15,17,0)
(13,26,0)
(22,6,0)
(17,16,0)
(23,17,0)
(13,16,0)
(24,5,0)
(10,6,0)
(4,21,0)
(11,23,0)
(7,17,0)
(16,2,0)
(11,21,0)
(8,23,0)
(21,25,0)
(17,5,0)
(1,6,0)
(19,13,0)
(17,23,0)
(5,6,0)
(23,21,0)
(16,13,0)
(11,3,1)
(17,7,1)
(0,11,1)
(12,16,1)
(26,14,1)
(15,8,1)
(16,13,1)
(12,20,1)
(20,5,1)
(5,9,1)
(17,16,1)
(17,5,1)
(3,23,1)
(8,12,1)
(7,15,1)
(9,24,1)
(14,20,1)
(13,19,1)
(11,23,1)
(13,26,1)
(0,12,1)
(23,17,1)
(17,5,2)
(26,20,2)
(16,20,2)
(11,23,2)
(23,12,2)
(13,20,2)
(17,16,2)
(3,12,2)
(13,26,2)
(23,17,2)
(7,12,2)
(8,12,2)
(15,12,2)
(16,13,2)
(17,12,2)
(11,12,2)
(14,20,2)
(13,19,2)
-----------------------------------
(0,RET)
(1,data)
(2,)
(3,result)
(4,result)
(5,data = \' \')
(6,)
(7,1)
(8,result)
(9,' ')
(10,if(GLOBAL_CONST_TRUE)
(11,printHexCharLine(result)
(12,GLOBAL_CONST_TRUE)
(13,(char)
(14,data)
(15,data)
(16,data = (char)
(17,data + 1)
(18,data = ' ')
(19,char)
(20,GLOBAL_CONST_TRUE)
(21,)
(22,if(GLOBAL_CONST_TRUE)
(23,result = data + 1)
(24,data)
(25,)
(26,RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^