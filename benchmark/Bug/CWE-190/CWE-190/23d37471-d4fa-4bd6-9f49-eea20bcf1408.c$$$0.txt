-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,43,48,49,52,53,56,62,64,68,70,74,76
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
39,40
39,41
46,47
46,48
50,51
50,52
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_17_bad()
CWE190_Integer_Overflow__int64_t_max_square_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(11,8,0)
(2,20,0)
(34,11,0)
(28,5,0)
(10,24,0)
(32,20,0)
(5,0,0)
(25,20,0)
(15,13,0)
(16,11,0)
(26,8,0)
(7,20,0)
(18,2,0)
(37,13,0)
(4,13,0)
(29,0,0)
(8,10,0)
(1,0,0)
(3,10,0)
(36,25,0)
(17,0,0)
(14,31,0)
(23,13,0)
(12,5,0)
(22,31,0)
(6,29,0)
(31,33,0)
(35,13,0)
(8,11,0)
(27,2,0)
(19,26,0)
(11,31,0)
(30,13,0)
(9,8,0)
(26,10,0)
(8,11,1)
(12,28,1)
(18,27,1)
(19,8,1)
(11,31,1)
(36,31,1)
(25,20,1)
(27,25,1)
(9,5,1)
(7,32,1)
(6,26,1)
(28,29,1)
(5,12,1)
(0,17,1)
(34,16,1)
(22,14,1)
(28,0,1)
(29,0,1)
(29,6,1)
(2,20,1)
(5,0,1)
(31,22,1)
(26,8,1)
(11,34,1)
(20,7,1)
(1,2,1)
(32,15,1)
(2,18,1)
(26,19,1)
(21,5,1)
(27,20,1)
(14,2,1)
(25,36,1)
(17,1,1)
(16,9,1)
(11,31,2)
(28,5,2)
(19,5,2)
(27,2,2)
(25,20,2)
(22,2,2)
(34,5,2)
(9,5,2)
(36,2,2)
(11,5,2)
(29,5,2)
(12,5,2)
(29,0,2)
(26,8,2)
(5,0,2)
(5,5,2)
(8,5,2)
(26,5,2)
(18,2,2)
(14,2,2)
(25,2,2)
(2,20,2)
(31,2,2)
(16,5,2)
(2,2,2)
(8,11,2)
(6,5,2)
-----------------------------------
(0,j = 0)
(1,j)
(2,i < 1)
(3,result)
(4,i)
(5,j < 1)
(6,j)
(7,0)
(8,result = data * data)
(9,result)
(10,)
(11,data * data)
(12,1)
(13,)
(14,data)
(15,L)
(16,data)
(17,0)
(18,1)
(19,result)
(20,i = 0)
(21,RET)
(22,LLONG_MAX)
(23,for(i = 0; i < 1; i++)
(24,)
(25,i++)
(26,printLongLongLine(result)
(27,i)
(28,j)
(29,j++)
(30,j)
(31,data = LLONG_MAX)
(32,i)
(33,)
(34,data)
(35,data)
(36,i)
(37,for(j = 0; j < 1; j++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^