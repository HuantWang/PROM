-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_postinc_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
43,46
44,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,47,50,52,55,59,61,66,68,73,76,78,81,85,87,92,93
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
64,65
64,66
-----guardedBy-----
66,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_postinc_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_postinc_12_bad()
CWE190_Integer_Overflow__unsigned_int_rand_postinc_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(27,22,0)
(26,44,0)
(44,3,0)
(36,40,0)
(39,11,0)
(17,1,0)
(17,40,0)
(44,1,0)
(0,1,0)
(2,0,0)
(18,36,0)
(12,1,0)
(14,38,0)
(35,23,0)
(33,41,0)
(12,40,0)
(30,44,0)
(44,40,0)
(0,40,0)
(4,44,0)
(37,2,0)
(9,40,0)
(8,0,0)
(1,46,0)
(2,23,0)
(36,18,0)
(0,23,0)
(43,1,0)
(42,9,0)
(40,36,0)
(5,38,0)
(10,17,0)
(23,24,0)
(9,1,0)
(17,3,0)
(20,36,0)
(11,38,0)
(19,1,0)
(6,30,0)
(12,23,0)
(25,12,0)
(40,45,0)
(16,9,0)
(13,40,0)
(15,0,0)
(36,20,0)
(22,7,0)
(21,11,0)
(31,38,0)
(30,3,0)
(28,3,0)
(17,1,1)
(40,36,1)
(19,43,1)
(29,30,1)
(20,13,1)
(1,19,1)
(9,1,1)
(44,1,1)
(29,2,1)
(27,9,1)
(32,1,1)
(8,12,1)
(4,26,1)
(22,27,1)
(21,39,1)
(37,0,1)
(25,32,1)
(0,1,1)
(13,34,1)
(34,11,1)
(10,9,1)
(17,40,1)
(26,17,1)
(43,34,1)
(42,16,1)
(16,32,1)
(44,4,1)
(12,25,1)
(0,40,1)
(2,37,1)
(2,0,1)
(12,40,1)
(11,21,1)
(17,10,1)
(30,6,1)
(36,18,1)
(15,8,1)
(29,22,1)
(32,40,1)
(12,1,1)
(6,44,1)
(44,40,1)
(0,15,1)
(36,20,1)
(9,40,1)
(30,44,1)
(9,42,1)
(2,32,2)
(40,36,2)
(17,1,2)
(17,40,2)
(36,18,2)
(36,20,2)
(0,1,2)
(9,1,2)
(27,9,2)
(25,32,2)
(1,34,2)
(30,44,2)
(15,32,2)
(4,9,2)
(44,1,2)
(16,32,2)
(8,32,2)
(40,34,2)
(2,0,2)
(43,34,2)
(12,40,2)
(0,32,2)
(9,32,2)
(30,9,2)
(20,34,2)
(44,9,2)
(9,40,2)
(22,9,2)
(10,9,2)
(36,34,2)
(37,32,2)
(12,1,2)
(12,32,2)
(0,40,2)
(19,34,2)
(44,40,2)
(13,34,2)
(42,32,2)
(26,9,2)
(6,9,2)
(17,9,2)
-----------------------------------
(0,result = data)
(1,data = 2)
(2,printUnsignedLine(result)
(3,)
(4,data)
(5,if(globalReturnsTrueOrFalse()
(6,result)
(7,)
(8,result)
(9,data < UINT_MAX)
(10,data)
(11,data = 0)
(12,data++)
(13,data)
(14,if(globalReturnsTrueOrFalse()
(15,data)
(16,data)
(17,data++)
(18,unsigned int)
(19,2)
(20,RAND32()
(21,0)
(22,printLine("data value is too large to perform arithmetic safely.")
(23,)
(24,)
(25,data)
(26,result)
(27,"data value is too large to perform arithmetic safely.")
(28,result)
(29,RET)
(30,printUnsignedLine(result)
(31,data)
(32,globalReturnsTrueOrFalse()
(33,if (data < UINT_MAX)
(34,globalReturnsTrueOrFalse()
(35,result)
(36,(unsigned int)
(37,result)
(38,)
(39,data)
(40,data = (unsigned int)
(41,)
(42,UINT_MAX)
(43,data)
(44,result = data)
(45,)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^