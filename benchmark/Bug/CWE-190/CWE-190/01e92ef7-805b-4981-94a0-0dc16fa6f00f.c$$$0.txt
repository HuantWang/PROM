-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
41,44
43,44
44,45
46,47
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
55,56
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
66,68
67,68
69,70
71,72
72,73
73,74
73,75
74,75
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
87,88
88,89
90,91
91,92
91,93
92,93
93,94
93,95
95,96
95,97
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,45,47,52,54,56,58,60,65,68,70,75,76,81,82,85,86,89,94,96,100,102,106,108
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
63,64
63,65
79,80
79,81
83,84
83,85
98,99
98,100
-----guardedBy-----
54,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_17_bad()
CWE190_Integer_Overflow__int_fgets_square_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(14,19,0)
(52,27,0)
(21,31,0)
(9,5,0)
(10,7,0)
(48,27,0)
(16,5,0)
(5,36,0)
(49,33,0)
(43,5,0)
(4,2,0)
(17,50,0)
(24,50,0)
(7,13,0)
(8,41,0)
(5,43,0)
(39,50,0)
(2,47,0)
(35,6,0)
(36,31,0)
(26,50,0)
(20,25,0)
(30,1,0)
(34,36,0)
(18,19,0)
(15,5,0)
(22,31,0)
(0,50,0)
(31,55,0)
(40,41,0)
(12,46,0)
(37,44,0)
(25,28,0)
(54,13,0)
(42,51,0)
(41,50,0)
(53,30,0)
(38,13,0)
(32,36,0)
(46,13,0)
(27,6,0)
(33,30,0)
(34,2,0)
(33,19,0)
(19,41,0)
(2,34,0)
(19,33,0)
(3,34,0)
(51,30,0)
(44,6,0)
(23,46,0)
(11,36,0)
(56,6,0)
(19,2,0)
(51,33,0)
(45,43,0)
(46,13,1)
(7,13,1)
(49,46,1)
(23,13,1)
(29,46,1)
(44,6,1)
(51,42,1)
(25,20,1)
(27,48,1)
(7,10,1)
(19,41,1)
(20,43,1)
(37,25,1)
(52,6,1)
(56,41,1)
(14,18,1)
(23,7,1)
(13,38,1)
(51,33,1)
(2,34,1)
(43,45,1)
(37,2,1)
(15,16,1)
(11,27,1)
(38,54,1)
(6,35,1)
(18,49,1)
(43,5,1)
(19,2,1)
(3,4,1)
(10,51,1)
(34,36,1)
(8,40,1)
(44,37,1)
(34,3,1)
(5,36,1)
(27,6,1)
(32,11,1)
(4,43,1)
(48,52,1)
(45,5,1)
(41,8,1)
(54,27,1)
(42,33,1)
(52,44,1)
(33,19,1)
(5,15,1)
(9,36,1)
(46,12,1)
(16,9,1)
(35,56,1)
(36,32,1)
(19,14,1)
(12,23,1)
(27,6,2)
(34,43,2)
(51,46,2)
(7,46,2)
(25,43,2)
(32,27,2)
(18,46,2)
(5,27,2)
(11,27,2)
(14,46,2)
(23,46,2)
(2,34,2)
(37,27,2)
(44,6,2)
(27,27,2)
(46,46,2)
(10,46,2)
(52,27,2)
(33,19,2)
(51,33,2)
(9,27,2)
(15,27,2)
(49,46,2)
(2,43,2)
(3,43,2)
(5,36,2)
(43,27,2)
(33,46,2)
(48,27,2)
(46,13,2)
(7,13,2)
(20,43,2)
(36,27,2)
(19,46,2)
(16,27,2)
(44,27,2)
(42,46,2)
(19,2,2)
(12,46,2)
(43,5,2)
(45,27,2)
(4,43,2)
(34,36,2)
(19,41,2)
-----------------------------------
(0,data)
(1,)
(2,data = atoi(inputBuffer)
(3,inputBuffer)
(4,data)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,i = 0)
(7,j++)
(8,0)
(9,inputBuffer)
(10,j)
(11,inputBuffer)
(12,1)
(13,j = 0)
(14,data)
(15,stdin)
(16,CHAR_ARRAY_SIZE)
(17,j)
(18,data)
(19,data * data)
(20,"fgets()
(21,inputBuffer)
(22,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,j)
(24,for(i = 0; i < 1; i++)
(25,printLine("fgets()
(26,for(j = 0; j < 1; j++)
(27,i < 1)
(28,)
(29,RET)
(30,)
(31,)
(32,"")
(33,result = data * data)
(34,atoi(inputBuffer)
(35,0)
(36,inputBuffer[CHAR_ARRAY_SIZE] = "")
(37,i)
(38,0)
(39,i)
(40,data)
(41,data = 0)
(42,result)
(43,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(44,i++)
(45,NULL)
(46,j < 1)
(47,)
(48,1)
(49,result)
(50,)
(51,printIntLine(result)
(52,i)
(53,result)
(54,j)
(55,)
(56,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^