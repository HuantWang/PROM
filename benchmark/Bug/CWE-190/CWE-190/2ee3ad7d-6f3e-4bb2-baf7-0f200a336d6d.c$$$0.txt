-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_06_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_06_bad(){    short data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_06_bad()
CWE190_Integer_Overflow__short_fscanf_square_06_bad
{    short data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,14,0)
(13,18,0)
(23,4,0)
(28,8,0)
(1,10,0)
(25,8,0)
(12,9,0)
(19,26,0)
(6,9,0)
(18,10,0)
(29,10,0)
(10,26,0)
(4,17,0)
(4,14,0)
(8,27,0)
(24,8,0)
(7,15,0)
(14,18,0)
(21,17,0)
(5,26,0)
(8,25,0)
(3,18,0)
(11,26,0)
(14,17,0)
(2,25,0)
(25,10,0)
(18,14,0)
(0,15,0)
(17,20,0)
(12,8,1)
(3,13,1)
(13,22,1)
(10,1,1)
(15,7,1)
(18,3,1)
(25,2,1)
(22,9,1)
(25,10,1)
(7,0,1)
(0,10,1)
(16,4,1)
(9,6,1)
(12,15,1)
(2,28,1)
(24,15,1)
(23,14,1)
(8,25,1)
(16,9,1)
(4,14,1)
(18,10,1)
(14,18,1)
(4,23,1)
(1,29,1)
(28,24,1)
(6,12,1)
(23,9,2)
(4,14,2)
(3,9,2)
(18,10,2)
(8,15,2)
(18,9,2)
(4,9,2)
(14,9,2)
(25,15,2)
(13,9,2)
(14,18,2)
(22,9,2)
(24,15,2)
(8,25,2)
(25,10,2)
(28,15,2)
(2,15,2)
-----------------------------------
(0,STATIC_CONST_FIVE)
(1,0)
(2,data)
(3,data)
(4,printIntLine(result)
(5,data)
(6,5)
(7,5)
(8,fscanf (stdin, "%hd", &data)
(9,STATIC_CONST_FIVE==5)
(10,data = 0)
(11,if(STATIC_CONST_FIVE==5)
(12,STATIC_CONST_FIVE)
(13,data)
(14,result = data * data)
(15,STATIC_CONST_FIVE==5)
(16,RET)
(17,)
(18,data * data)
(19,if(STATIC_CONST_FIVE==5)
(20,)
(21,result)
(22,result)
(23,result)
(24,stdin)
(25,&data)
(26,)
(27,)
(28,"%hd")
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^