-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,44,48,50
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_13_bad()
CWE190_Integer_Overflow__char_max_add_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(16,20,0)
(25,24,0)
(10,22,0)
(4,10,0)
(26,24,0)
(7,19,0)
(13,19,0)
(2,15,0)
(1,26,0)
(28,7,0)
(26,21,0)
(12,19,0)
(5,20,0)
(17,22,0)
(27,10,0)
(23,15,0)
(22,14,0)
(9,19,0)
(10,24,0)
(8,21,0)
(10,7,0)
(24,10,0)
(21,0,0)
(24,21,0)
(6,22,0)
(3,7,0)
(10,4,1)
(16,22,1)
(4,27,1)
(23,2,1)
(26,24,1)
(2,7,1)
(26,1,1)
(6,15,1)
(17,6,1)
(27,25,1)
(11,26,1)
(10,22,1)
(7,28,1)
(1,24,1)
(10,7,1)
(5,16,1)
(15,23,1)
(24,10,1)
(22,17,1)
(25,20,1)
(16,15,1)
(20,5,1)
(28,3,1)
(11,20,1)
(10,22,2)
(24,20,2)
(17,15,2)
(4,20,2)
(24,10,2)
(22,15,2)
(1,20,2)
(26,20,2)
(27,20,2)
(10,7,2)
(26,24,2)
(10,20,2)
(6,15,2)
(25,20,2)
-----------------------------------
(0,)
(1,result)
(2,GLOBAL_CONST_FIVE)
(3,data)
(4,1)
(5,5)
(6,data)
(7,data = ' ')
(8,result)
(9,if(GLOBAL_CONST_FIVE==5)
(10,data + 1)
(11,RET)
(12,data)
(13,if(GLOBAL_CONST_FIVE==5)
(14,)
(15,GLOBAL_CONST_FIVE==5)
(16,GLOBAL_CONST_FIVE)
(17,CHAR_MAX)
(18,data = \' \')
(19,)
(20,GLOBAL_CONST_FIVE==5)
(21,)
(22,data = CHAR_MAX)
(23,5)
(24,result = data + 1)
(25,result)
(26,printHexCharLine(result)
(27,data)
(28,' ')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^