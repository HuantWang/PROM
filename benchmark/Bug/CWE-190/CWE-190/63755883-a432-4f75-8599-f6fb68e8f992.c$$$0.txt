-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_14_bad()
{
    unsigned int data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_14_bad(){    unsigned int data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_14_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_14_bad
{    unsigned int data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(9,15,0)
(22,8,0)
(10,5,0)
(4,15,0)
(21,26,0)
(12,10,0)
(6,1,0)
(13,8,0)
(15,10,0)
(12,15,0)
(9,11,0)
(7,12,0)
(11,25,0)
(18,1,0)
(23,26,0)
(0,11,0)
(16,19,0)
(17,9,0)
(2,9,0)
(14,19,0)
(20,11,0)
(27,8,0)
(9,1,0)
(24,10,0)
(1,8,0)
(15,9,0)
(26,23,1)
(19,16,1)
(9,11,1)
(17,4,1)
(20,0,1)
(0,19,1)
(9,1,1)
(11,20,1)
(7,15,1)
(21,19,1)
(3,12,1)
(14,1,1)
(21,11,1)
(15,9,1)
(9,2,1)
(12,7,1)
(2,17,1)
(16,14,1)
(4,26,1)
(1,6,1)
(6,18,1)
(12,15,1)
(3,26,1)
(23,21,1)
(12,26,2)
(20,19,2)
(17,26,2)
(9,11,2)
(15,26,2)
(4,26,2)
(9,1,2)
(7,26,2)
(0,19,2)
(15,9,2)
(11,19,2)
(2,26,2)
(9,26,2)
(12,15,2)
-----------------------------------
(0,data)
(1,data = 0)
(2,data)
(3,RET)
(4,result)
(5,)
(6,0)
(7,result)
(8,)
(9,data * data)
(10,)
(11,data = UINT_MAX)
(12,printUnsignedLine(result)
(13,data)
(14,globalFive)
(15,result = data * data)
(16,5)
(17,data)
(18,data)
(19,globalFive==5)
(20,UINT_MAX)
(21,globalFive)
(22,if(globalFive==5)
(23,5)
(24,result)
(25,)
(26,globalFive==5)
(27,if(globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^