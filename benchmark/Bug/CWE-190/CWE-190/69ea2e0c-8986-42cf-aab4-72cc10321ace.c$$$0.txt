-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_add_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            int result = data + 1;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
58,60
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
-----nextToken-----
2,4,8,10,14,15,19,24,27,32,33,37,42,44,48,49,53,55,60,62,66,68,72,73,77,79,84,85
-----computeFrom-----
12,13
12,14
22,23
22,24
30,31
30,32
46,47
46,48
58,59
58,60
70,71
70,72
-----guardedBy-----
60,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_add_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_rand_add_12_bad()
CWE190_Integer_Overflow__int_rand_add_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(41,44,0)
(25,6,0)
(32,33,0)
(21,39,0)
(26,25,0)
(29,30,0)
(18,41,0)
(8,4,0)
(39,27,0)
(22,39,0)
(13,9,0)
(33,32,0)
(6,25,0)
(24,13,0)
(11,27,0)
(6,9,0)
(40,2,0)
(15,7,0)
(43,23,0)
(35,7,0)
(33,36,0)
(16,29,0)
(25,33,0)
(39,30,0)
(20,43,0)
(12,30,0)
(10,6,0)
(13,6,0)
(34,2,0)
(39,33,0)
(31,2,0)
(7,2,0)
(30,41,0)
(38,9,0)
(27,3,0)
(30,39,0)
(25,27,0)
(37,0,0)
(29,41,0)
(0,33,0)
(17,27,0)
(14,25,0)
(0,27,0)
(28,0,0)
(5,33,0)
(19,27,1)
(33,32,1)
(42,43,1)
(28,19,1)
(10,0,1)
(5,1,1)
(20,0,1)
(17,11,1)
(42,13,1)
(21,22,1)
(43,20,1)
(14,10,1)
(27,17,1)
(24,6,1)
(35,15,1)
(16,30,1)
(29,16,1)
(1,7,1)
(0,37,1)
(25,33,1)
(7,35,1)
(39,27,1)
(39,21,1)
(0,27,1)
(0,33,1)
(37,28,1)
(6,25,1)
(11,1,1)
(26,14,1)
(30,39,1)
(29,30,1)
(25,27,1)
(13,6,1)
(19,33,1)
(39,33,1)
(42,29,1)
(22,12,1)
(25,26,1)
(12,19,1)
(32,5,1)
(13,24,1)
(30,39,2)
(39,33,2)
(22,19,2)
(30,19,2)
(5,1,2)
(11,1,2)
(0,19,2)
(39,19,2)
(0,33,2)
(16,19,2)
(43,0,2)
(14,0,2)
(29,19,2)
(33,1,2)
(39,27,2)
(13,6,2)
(26,0,2)
(27,1,2)
(37,19,2)
(28,19,2)
(20,0,2)
(29,30,2)
(0,27,2)
(32,1,2)
(25,27,2)
(13,0,2)
(12,19,2)
(24,0,2)
(33,32,2)
(25,0,2)
(17,1,2)
(21,19,2)
(25,33,2)
(6,25,2)
(6,0,2)
(10,0,2)
-----------------------------------
(0,data < INT_MAX)
(1,globalReturnsTrueOrFalse()
(2,)
(3,)
(4,)
(5,data)
(6,result = data + 1)
(7,data = 0)
(8,if (data < INT_MAX)
(9,)
(10,result)
(11,data)
(12,result)
(13,printIntLine(result)
(14,data)
(15,data)
(16,result)
(17,2)
(18,result)
(19,globalReturnsTrueOrFalse()
(20,"data value is too large to perform arithmetic safely.")
(21,1)
(22,data)
(23,)
(24,result)
(25,data + 1)
(26,1)
(27,data = 2)
(28,data)
(29,printIntLine(result)
(30,result = data + 1)
(31,if(globalReturnsTrueOrFalse()
(32,RAND32()
(33,data = RAND32()
(34,if(globalReturnsTrueOrFalse()
(35,0)
(36,)
(37,INT_MAX)
(38,result)
(39,data + 1)
(40,data)
(41,)
(42,RET)
(43,printLine("data value is too large to perform arithmetic safely.")
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^