-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,49,53,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_square_15_bad()
CWE190_Integer_Overflow__int_fscanf_square_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(37,22,0)
(16,27,0)
(1,7,0)
(24,14,0)
(25,18,0)
(23,22,0)
(34,14,0)
(33,14,0)
(7,1,0)
(27,22,0)
(0,7,0)
(35,17,0)
(27,29,0)
(7,18,0)
(9,34,0)
(6,18,0)
(8,7,0)
(19,17,0)
(32,14,0)
(28,18,0)
(5,33,0)
(21,27,0)
(36,29,0)
(26,17,0)
(11,28,0)
(30,18,0)
(2,29,0)
(10,36,0)
(22,17,0)
(31,14,0)
(36,33,0)
(3,1,0)
(29,33,0)
(13,18,0)
(29,27,0)
(12,14,0)
(1,22,0)
(27,22,1)
(24,36,1)
(15,31,1)
(27,21,1)
(11,20,1)
(7,1,1)
(34,9,1)
(9,4,1)
(1,22,1)
(4,6,1)
(6,7,1)
(37,23,1)
(10,29,1)
(8,20,1)
(36,10,1)
(21,16,1)
(36,29,1)
(22,37,1)
(31,34,1)
(28,11,1)
(30,28,1)
(1,3,1)
(4,30,1)
(3,0,1)
(29,27,1)
(0,8,1)
(16,2,1)
(2,4,1)
(20,22,1)
(15,24,1)
(11,20,2)
(7,20,2)
(36,29,2)
(9,4,2)
(1,20,2)
(29,4,2)
(31,4,2)
(10,4,2)
(28,20,2)
(27,22,2)
(27,4,2)
(7,1,2)
(24,4,2)
(3,20,2)
(34,4,2)
(21,4,2)
(29,27,2)
(6,20,2)
(16,4,2)
(0,20,2)
(8,20,2)
(1,22,2)
(2,4,2)
(30,20,2)
(36,4,2)
-----------------------------------
(0,"%d")
(1,&data)
(2,result)
(3,data)
(4,7)
(5,result)
(6,break;)
(7,fscanf(stdin, "%d", &data)
(8,stdin)
(9,"Benign, fixed string")
(10,result)
(11,"Benign, fixed string")
(12,default:)
(13,default:)
(14,)
(15,RET)
(16,data)
(17,)
(18,)
(19,switch(7)
(20,6)
(21,data)
(22,data = 0)
(23,data)
(24,break;)
(25,case 6:)
(26,switch(6)
(27,data * data)
(28,printLine("Benign, fixed string")
(29,result = data * data)
(30,break;)
(31,break;)
(32,case 7:)
(33,)
(34,printLine("Benign, fixed string")
(35,data)
(36,printIntLine(result)
(37,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^