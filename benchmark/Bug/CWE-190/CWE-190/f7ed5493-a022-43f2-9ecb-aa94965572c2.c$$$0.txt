-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    char * dataPtr = (char *)dataVoidPtr;
    /* dereference dataPtr into data */
    char data = (*dataPtr);
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        char result = data + 1;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,40,44,45,49,51
-----computeFrom-----
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    char * dataPtr = (char *)dataVoidPtr;    /* dereference dataPtr into data */    char data = (*dataPtr);    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_add_64b_badSink(void * dataVoidPtr)
CWE190_Integer_Overflow__char_max_add_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    char * dataPtr = (char *)dataVoidPtr;    /* dereference dataPtr into data */    char data = (*dataPtr);    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }}
char * dataPtr = (char *)dataVoidPtr;
char * dataPtr = (char *)dataVoidPtr;
char
* dataPtr = (char *)dataVoidPtr
*
dataPtr
= (char *)dataVoidPtr
(char *)dataVoidPtr
char *
char
*
*
dataVoidPtr
dataVoidPtr
char data = (*dataPtr);
char data = (*dataPtr);
char
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,18,0)
(8,18,0)
(19,13,0)
(16,11,0)
(5,12,0)
(3,18,0)
(12,21,0)
(6,2,0)
(12,7,0)
(13,11,0)
(17,3,0)
(2,7,0)
(1,7,0)
(2,3,0)
(7,12,0)
(21,0,0)
(13,18,0)
(9,0,0)
(11,16,0)
(15,12,0)
(7,3,0)
(11,13,0)
(4,11,0)
(11,20,0)
(22,21,0)
(10,18,0)
(0,21,0)
(0,13,0)
(0,9,1)
(13,11,1)
(11,16,1)
(11,20,1)
(2,7,1)
(7,12,1)
(2,6,1)
(21,0,1)
(11,4,1)
(5,1,1)
(12,15,1)
(15,5,1)
(22,13,1)
(0,13,1)
(1,21,1)
(12,21,1)
(9,22,1)
(4,19,1)
(14,2,1)
(6,7,1)
(21,0,2)
(7,12,2)
(13,11,2)
(11,16,2)
(11,20,2)
(0,13,2)
(12,21,2)
(2,7,2)
-----------------------------------
(0,*dataPtr)
(1,result)
(2,printHexCharLine(result)
(3,)
(4,dataVoidPtr)
(5,data)
(6,result)
(7,result = data + 1)
(8,dataPtr)
(9,dataPtr)
(10,data)
(11,(char *)
(12,data + 1)
(13,* dataPtr = (char *)
(14,RET)
(15,1)
(16,char *)
(17,result)
(18,)
(19,dataPtr)
(20,void * dataVoidPtr)
(21,data = (*dataPtr)
(22,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^