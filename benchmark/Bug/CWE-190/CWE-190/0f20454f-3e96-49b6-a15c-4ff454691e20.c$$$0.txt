-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_08_bad()
{
    unsigned int data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_08_bad(){    unsigned int data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_08_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_08_bad
{    unsigned int data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(9,24,0)
(8,11,0)
(6,23,0)
(8,4,0)
(23,21,0)
(15,25,0)
(24,9,0)
(13,9,0)
(10,24,0)
(20,24,0)
(4,7,0)
(3,4,0)
(0,6,0)
(4,8,0)
(7,25,0)
(5,25,0)
(24,7,0)
(2,7,0)
(22,25,0)
(12,8,0)
(1,7,0)
(9,23,0)
(6,9,0)
(14,8,0)
(16,23,0)
(1,2,1)
(17,7,1)
(18,19,1)
(19,17,1)
(6,0,1)
(0,9,1)
(10,20,1)
(9,24,1)
(24,10,1)
(24,7,1)
(7,1,1)
(18,6,1)
(13,19,1)
(19,8,1)
(14,12,1)
(4,3,1)
(3,14,1)
(6,9,1)
(20,13,1)
(12,17,1)
(4,7,1)
(8,4,1)
(20,19,2)
(4,7,2)
(9,24,2)
(0,19,2)
(4,17,2)
(24,19,2)
(6,9,2)
(8,17,2)
(12,17,2)
(9,19,2)
(24,7,2)
(3,17,2)
(13,19,2)
(8,4,2)
(6,19,2)
(10,19,2)
(14,17,2)
-----------------------------------
(0,result)
(1,0)
(2,data)
(3,data)
(4,&data)
(5,data)
(6,printUnsignedLine(result)
(7,data = 0)
(8,fscanf (stdin, "%u", &data)
(9,result = data * data)
(10,data)
(11,)
(12,stdin)
(13,result)
(14,"%u")
(15,if(staticReturnsTrue()
(16,result)
(17,staticReturnsTrue()
(18,RET)
(19,staticReturnsTrue()
(20,data)
(21,)
(22,if(staticReturnsTrue()
(23,)
(24,data * data)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^