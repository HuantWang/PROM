-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
28,29
28,30
29,30
29,31
30,31
31,32
31,33
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,27,32,34,38,40,44,46,47
-----computeFrom-----
12,13
12,14
20,21
20,22
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_max_square_16_bad()
CWE190_Integer_Overflow__char_max_square_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(25,17,0)
(26,25,0)
(24,14,0)
(17,10,0)
(2,24,0)
(10,8,0)
(6,19,0)
(10,6,0)
(3,14,0)
(21,8,0)
(9,17,0)
(7,6,0)
(17,24,0)
(15,10,0)
(22,10,0)
(5,12,0)
(10,17,0)
(8,12,0)
(4,12,0)
(20,8,0)
(16,6,0)
(18,19,0)
(25,24,0)
(1,12,0)
(10,6,1)
(9,23,1)
(26,17,1)
(3,25,1)
(6,16,1)
(10,15,1)
(18,6,1)
(13,23,1)
(20,21,1)
(8,20,1)
(17,10,1)
(23,0,1)
(7,0,1)
(0,8,1)
(15,22,1)
(25,17,1)
(10,8,1)
(22,9,1)
(25,26,1)
(16,7,1)
(13,3,1)
(23,18,1)
(18,0,2)
(22,23,2)
(25,17,2)
(3,23,2)
(9,23,2)
(17,10,2)
(26,23,2)
(25,23,2)
(15,23,2)
(16,0,2)
(17,23,2)
(7,0,2)
(6,0,2)
(10,6,2)
(10,8,2)
(10,23,2)
-----------------------------------
(0,1)
(1,while(1)
(2,result)
(3,break;)
(4,data)
(5,while(1)
(6,data = CHAR_MAX)
(7,data)
(8,data = ' ')
(9,result)
(10,data * data)
(11,data = \' \')
(12,)
(13,RET)
(14,)
(15,data)
(16,CHAR_MAX)
(17,result = data * data)
(18,break;)
(19,)
(20,' ')
(21,data)
(22,data)
(23,1)
(24,)
(25,printHexCharLine(result)
(26,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^