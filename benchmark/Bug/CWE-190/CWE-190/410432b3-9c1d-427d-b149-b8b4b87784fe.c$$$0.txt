-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_preinc_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            ++data;
            short result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_preinc_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_max_preinc_12_bad()
CWE190_Integer_Overflow__short_max_preinc_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(1,13,0)
(33,10,0)
(28,44,0)
(11,13,0)
(33,21,0)
(6,16,0)
(10,34,0)
(5,3,0)
(4,18,0)
(20,13,0)
(39,7,0)
(32,10,0)
(18,21,0)
(16,21,0)
(16,7,0)
(36,12,0)
(25,39,0)
(29,37,0)
(44,8,0)
(38,23,0)
(22,21,0)
(16,10,0)
(12,18,0)
(15,21,0)
(39,10,0)
(42,18,0)
(39,21,0)
(40,5,0)
(21,2,0)
(41,33,0)
(19,39,0)
(24,7,0)
(17,31,0)
(37,13,0)
(12,44,0)
(32,21,0)
(30,33,0)
(23,39,0)
(27,10,0)
(35,32,0)
(32,44,0)
(23,7,0)
(14,37,0)
(18,10,0)
(18,44,0)
(26,10,0)
(4,32,1)
(36,18,1)
(5,40,1)
(27,0,1)
(32,35,1)
(18,42,1)
(39,19,1)
(16,6,1)
(0,37,1)
(9,5,1)
(18,10,1)
(33,10,1)
(15,0,1)
(33,30,1)
(37,14,1)
(35,43,1)
(32,21,1)
(16,10,1)
(38,39,1)
(9,23,1)
(18,21,1)
(10,26,1)
(22,15,1)
(12,36,1)
(30,41,1)
(40,33,1)
(9,12,1)
(26,27,1)
(25,16,1)
(14,29,1)
(21,22,1)
(42,4,1)
(23,39,1)
(33,21,1)
(23,38,1)
(39,21,1)
(43,21,1)
(32,10,1)
(43,10,1)
(39,10,1)
(19,25,1)
(12,18,1)
(6,33,1)
(41,43,1)
(16,21,1)
(19,33,2)
(32,21,2)
(15,0,2)
(16,33,2)
(35,43,2)
(5,33,2)
(39,21,2)
(12,43,2)
(16,21,2)
(41,43,2)
(23,33,2)
(21,0,2)
(26,0,2)
(4,43,2)
(16,10,2)
(6,33,2)
(27,0,2)
(30,43,2)
(10,0,2)
(22,0,2)
(18,43,2)
(32,43,2)
(33,21,2)
(42,43,2)
(40,33,2)
(25,33,2)
(39,10,2)
(12,18,2)
(23,39,2)
(36,43,2)
(18,10,2)
(33,43,2)
(39,33,2)
(33,10,2)
(38,33,2)
(32,10,2)
(18,21,2)
-----------------------------------
(0,globalReturnsTrueOrFalse()
(1,data)
(2,)
(3,)
(4,result)
(5,printLine("data value is too large to perform arithmetic safely.")
(6,data)
(7,)
(8,)
(9,RET)
(10,data = SHRT_MAX)
(11,if(globalReturnsTrueOrFalse()
(12,printIntLine(result)
(13,)
(14,0)
(15,data)
(16,++data)
(17,if (data < SHRT_MAX)
(18,result = data)
(19,data)
(20,if(globalReturnsTrueOrFalse()
(21,data = 2)
(22,2)
(23,printIntLine(result)
(24,result)
(25,result)
(26,SHRT_MAX)
(27,data)
(28,result)
(29,data)
(30,SHRT_MAX)
(31,)
(32,++data)
(33,data < SHRT_MAX)
(34,)
(35,data)
(36,result)
(37,data = 0)
(38,result)
(39,result = data)
(40,"data value is too large to perform arithmetic safely.")
(41,data)
(42,data)
(43,globalReturnsTrueOrFalse()
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^