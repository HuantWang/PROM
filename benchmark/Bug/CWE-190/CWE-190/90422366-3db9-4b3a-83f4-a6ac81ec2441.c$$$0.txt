-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
75,76
75,77
77,78
77,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,78,82,84,88,90
-----computeFrom-----
32,33
32,34
57,58
57,59
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_32_bad()
CWE190_Integer_Overflow__char_fscanf_square_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(15,4,0)
(40,42,0)
(9,27,0)
(30,17,0)
(31,42,0)
(27,6,0)
(4,34,0)
(5,18,0)
(8,36,0)
(5,7,0)
(39,10,0)
(32,24,0)
(37,34,0)
(29,10,0)
(16,22,0)
(34,42,0)
(10,39,0)
(23,6,0)
(12,4,0)
(6,27,0)
(13,10,0)
(36,15,0)
(44,22,0)
(33,12,0)
(20,7,0)
(21,42,0)
(17,24,0)
(43,16,0)
(10,42,0)
(24,7,0)
(19,7,0)
(15,36,0)
(18,10,0)
(0,5,0)
(38,15,0)
(11,24,0)
(2,4,0)
(4,12,0)
(16,36,0)
(17,5,0)
(12,27,0)
(28,18,0)
(25,21,0)
(27,42,0)
(29,20,0)
(20,5,0)
(35,39,0)
(22,34,0)
(26,21,0)
(24,17,0)
(36,22,0)
(41,15,0)
(45,29,0)
(7,42,0)
(18,5,0)
(1,42,0)
(14,20,0)
(20,14,1)
(30,32,1)
(25,26,1)
(6,23,1)
(15,4,1)
(3,16,1)
(41,38,1)
(12,27,1)
(26,27,1)
(23,9,1)
(33,2,1)
(0,21,1)
(5,18,1)
(17,30,1)
(35,13,1)
(24,17,1)
(17,5,1)
(8,4,1)
(4,12,1)
(27,6,1)
(10,39,1)
(43,36,1)
(29,45,1)
(12,33,1)
(18,28,1)
(21,25,1)
(14,29,1)
(15,41,1)
(45,24,1)
(16,43,1)
(39,35,1)
(38,8,1)
(28,0,1)
(18,10,1)
(32,11,1)
(36,15,1)
(2,20,1)
(16,36,1)
(11,5,1)
(29,10,1)
(9,10,1)
(20,5,1)
(24,17,2)
(29,10,2)
(5,18,2)
(15,4,2)
(16,36,2)
(17,5,2)
(20,5,2)
(18,10,2)
(27,6,2)
(12,27,2)
(4,12,2)
(36,15,2)
(10,39,2)
-----------------------------------
(0,data)
(1,data)
(2,data)
(3,RET)
(4,data = *dataPtr2)
(5,data = *dataPtr1)
(6,&data)
(7,)
(8,result)
(9,dataPtr2)
(10,*dataPtr1 = &data)
(11,stdin)
(12,*dataPtr2)
(13,dataPtr1)
(14,data)
(15,data * data)
(16,printHexCharLine(result)
(17,&data)
(18,*dataPtr1)
(19,data)
(20,*dataPtr1 = data)
(21,data = \\\' \\\')
(22,)
(23,data)
(24,fscanf (stdin, "%c", &data)
(25,\\\' \\\')
(26,data)
(27,*dataPtr2 = &data)
(28,dataPtr1)
(29,*dataPtr1)
(30,data)
(31,dataPtr2)
(32,"%c")
(33,dataPtr2)
(34,)
(35,data)
(36,result = data * data)
(37,data)
(38,data)
(39,&data)
(40,dataPtr1)
(41,data)
(42,)
(43,result)
(44,result)
(45,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^