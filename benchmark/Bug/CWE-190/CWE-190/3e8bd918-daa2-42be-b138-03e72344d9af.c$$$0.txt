-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,41,45,47,51,52,56,58
-----computeFrom-----
12,13
12,14
22,23
22,24
38,39
38,40
49,50
49,51
-----guardedBy-----
40,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_08_bad()
CWE190_Integer_Overflow__short_rand_multiply_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,26,0)
(27,1,0)
(16,10,0)
(3,24,0)
(28,12,0)
(4,17,0)
(29,15,0)
(12,17,0)
(17,5,0)
(29,11,0)
(11,15,0)
(18,26,0)
(26,12,0)
(8,1,0)
(6,7,0)
(19,7,0)
(7,24,0)
(14,1,0)
(26,24,0)
(21,29,0)
(17,4,0)
(24,1,0)
(25,24,0)
(12,0,0)
(11,26,0)
(5,17,0)
(23,15,0)
(17,12,0)
(26,11,0)
(7,12,0)
(22,11,0)
(17,5,1)
(9,29,1)
(29,11,1)
(25,3,1)
(26,12,1)
(26,24,1)
(24,25,1)
(9,7,1)
(20,12,1)
(26,13,1)
(9,20,1)
(7,24,1)
(13,18,1)
(21,11,1)
(7,6,1)
(17,4,1)
(11,26,1)
(22,7,1)
(20,2,1)
(29,21,1)
(5,28,1)
(18,22,1)
(7,12,1)
(6,19,1)
(28,2,1)
(19,20,1)
(2,24,1)
(12,17,1)
(17,5,2)
(26,12,2)
(7,20,2)
(29,11,2)
(28,2,2)
(11,7,2)
(12,2,2)
(26,24,2)
(5,2,2)
(17,4,2)
(6,20,2)
(13,7,2)
(18,7,2)
(12,17,2)
(21,7,2)
(29,7,2)
(26,7,2)
(7,12,2)
(19,20,2)
(22,7,2)
(11,26,2)
(17,2,2)
(7,24,2)
-----------------------------------
(0,)
(1,)
(2,staticReturnsTrue()
(3,data)
(4,short)
(5,RAND32()
(6,0)
(7,data > 0)
(8,if(staticReturnsTrue()
(9,RET)
(10,)
(11,result = data * 2)
(12,data = (short)
(13,2)
(14,data)
(15,)
(16,if(data > 0)
(17,(short)
(18,data)
(19,data)
(20,staticReturnsTrue()
(21,result)
(22,result)
(23,result)
(24,data = 0)
(25,0)
(26,data * 2)
(27,if(staticReturnsTrue()
(28,data)
(29,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^