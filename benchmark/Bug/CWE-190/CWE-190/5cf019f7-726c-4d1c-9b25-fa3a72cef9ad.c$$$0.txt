-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_18_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    goto sink;
sink:
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
62,63
62,64
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,28,30,35,37,39,41,43,48,51,53,58,59,61,63,67,69,73,75,79,81
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
71,72
71,73
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_18_bad(){    int data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_square_18_bad()
CWE190_Integer_Overflow__int_fgets_square_18_bad
{    int data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    goto sink;sink:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
goto sink;
sink
sink:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
sink
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,31,0)
(16,36,0)
(18,31,0)
(36,11,0)
(38,10,0)
(10,31,0)
(1,23,0)
(36,27,0)
(5,33,0)
(14,36,0)
(0,12,0)
(2,33,0)
(25,7,0)
(30,10,0)
(26,33,0)
(21,23,0)
(11,10,0)
(36,23,0)
(27,19,0)
(34,11,0)
(15,7,0)
(35,30,0)
(33,2,0)
(29,12,0)
(9,31,0)
(28,2,0)
(19,12,0)
(24,32,0)
(33,12,0)
(3,31,0)
(12,7,0)
(37,31,0)
(27,4,0)
(22,33,0)
(23,31,0)
(13,19,0)
(30,11,0)
(11,36,0)
(8,27,0)
(6,31,0)
(32,20,0)
(19,27,0)
(12,29,1)
(34,37,1)
(8,2,1)
(30,35,1)
(35,11,1)
(27,19,1)
(2,33,1)
(5,26,1)
(37,32,1)
(30,11,1)
(16,34,1)
(1,21,1)
(28,33,1)
(13,8,1)
(19,13,1)
(33,12,1)
(36,23,1)
(23,1,1)
(0,3,1)
(36,27,1)
(11,36,1)
(26,22,1)
(33,5,1)
(3,23,1)
(24,2,1)
(36,14,1)
(19,12,1)
(22,12,1)
(37,27,1)
(2,28,1)
(17,30,1)
(29,0,1)
(32,24,1)
(14,16,1)
(13,2,2)
(27,2,2)
(30,11,2)
(2,33,2)
(33,12,2)
(36,27,2)
(27,19,2)
(19,12,2)
(19,2,2)
(32,2,2)
(11,36,2)
(24,2,2)
(36,23,2)
(8,2,2)
-----------------------------------
(0,inputBuffer)
(1,0)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,goto source;)
(4,)
(5,stdin)
(6,sink:)
(7,)
(8,data)
(9,data)
(10,)
(11,result = data * data)
(12,inputBuffer[CHAR_ARRAY_SIZE] = "")
(13,inputBuffer)
(14,data)
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,data)
(17,RET)
(18,source:)
(19,atoi(inputBuffer)
(20,)
(21,data)
(22,inputBuffer)
(23,data = 0)
(24,"fgets()
(25,inputBuffer)
(26,CHAR_ARRAY_SIZE)
(27,data = atoi(inputBuffer)
(28,NULL)
(29,"")
(30,printIntLine(result)
(31,)
(32,printLine("fgets()
(33,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,result)
(35,result)
(36,data * data)
(37,goto sink;)
(38,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^