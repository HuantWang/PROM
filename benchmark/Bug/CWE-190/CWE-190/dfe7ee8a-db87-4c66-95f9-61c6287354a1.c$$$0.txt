-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_03_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(12,19,0)
(6,23,0)
(15,13,0)
(25,6,0)
(24,19,0)
(7,9,0)
(23,1,0)
(21,23,0)
(10,5,0)
(0,27,0)
(28,13,0)
(18,29,0)
(20,29,0)
(16,23,0)
(19,9,0)
(2,19,0)
(27,12,0)
(5,21,0)
(5,23,0)
(22,27,0)
(21,19,0)
(4,21,0)
(3,21,0)
(8,9,0)
(12,27,0)
(26,12,0)
(6,19,0)
(27,17,0)
(14,9,0)
(11,13,1)
(27,12,1)
(26,22,1)
(11,5,1)
(21,19,1)
(3,6,1)
(12,19,1)
(28,27,1)
(25,13,1)
(10,21,1)
(18,19,1)
(20,18,1)
(5,21,1)
(24,2,1)
(29,20,1)
(19,24,1)
(12,26,1)
(13,15,1)
(6,19,1)
(28,29,1)
(6,25,1)
(15,28,1)
(5,10,1)
(21,4,1)
(22,0,1)
(4,3,1)
(0,29,1)
(25,13,2)
(21,19,2)
(22,29,2)
(4,13,2)
(5,13,2)
(3,13,2)
(27,29,2)
(0,29,2)
(27,12,2)
(5,21,2)
(6,13,2)
(12,29,2)
(12,19,2)
(6,19,2)
(10,13,2)
(21,13,2)
(26,29,2)
-----------------------------------
(0,stdin)
(1,)
(2,data)
(3,result)
(4,data)
(5,printHexCharLine(result)
(6,data++)
(7,if(5==5)
(8,data)
(9,)
(10,result)
(11,RET)
(12,&data)
(13,5==5)
(14,if(5==5)
(15,5)
(16,result)
(17,)
(18,5)
(19,data = \\\' \\\')
(20,5)
(21,result = data)
(22,"%c")
(23,)
(24,\\\' \\\')
(25,data)
(26,data)
(27,fscanf (stdin, "%c", &data)
(28,5)
(29,5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^