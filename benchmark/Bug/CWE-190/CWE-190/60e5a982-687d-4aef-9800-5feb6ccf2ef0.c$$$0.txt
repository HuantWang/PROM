-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
22,23
22,24
24,25
24,26
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,29,31,35,37
-----computeFrom-----
27,28
27,29
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_63b_badSink(short * dataPtr){    short data = *dataPtr;    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_rand_square_63b_badSink(short * dataPtr)
CWE190_Integer_Overflow__short_rand_square_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(6,14,0)
(11,4,0)
(11,16,0)
(1,10,0)
(10,3,0)
(7,12,0)
(16,11,0)
(5,3,0)
(16,3,0)
(13,11,0)
(0,11,0)
(14,9,0)
(15,4,0)
(3,12,0)
(14,4,0)
(8,16,0)
(4,14,0)
(4,12,0)
(10,16,0)
(8,4,1)
(13,8,1)
(16,11,1)
(0,13,1)
(10,16,1)
(14,9,1)
(11,4,1)
(14,6,1)
(6,15,1)
(11,0,1)
(10,1,1)
(4,14,1)
(2,10,1)
(1,16,1)
(16,11,2)
(10,16,2)
(14,9,2)
(4,14,2)
(11,4,2)
-----------------------------------
(0,data)
(1,result)
(2,RET)
(3,)
(4,data = *dataPtr)
(5,result)
(6,dataPtr)
(7,data)
(8,result)
(9,short * dataPtr)
(10,printIntLine(result)
(11,data * data)
(12,)
(13,data)
(14,*dataPtr)
(15,data)
(16,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^