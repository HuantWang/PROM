-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
81,82
81,83
83,84
83,85
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,77,78,82,84,88,89,93,95
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
75,76
75,77
86,87
86,88
-----guardedBy-----
77,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_32_bad()
CWE190_Integer_Overflow__short_rand_multiply_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(28,11,0)
(2,0,0)
(49,3,0)
(1,33,0)
(11,12,0)
(27,37,0)
(24,46,0)
(42,38,0)
(43,41,0)
(15,25,0)
(37,24,0)
(23,25,0)
(33,2,0)
(19,25,0)
(19,9,0)
(3,43,0)
(44,37,0)
(47,24,0)
(4,19,0)
(6,0,0)
(20,21,0)
(47,39,0)
(5,47,0)
(3,49,0)
(10,3,0)
(46,38,0)
(0,2,0)
(14,41,0)
(7,43,0)
(45,42,0)
(3,10,0)
(9,43,0)
(25,38,0)
(29,41,0)
(32,23,0)
(8,38,0)
(23,29,0)
(39,12,0)
(9,41,0)
(21,25,0)
(29,23,0)
(36,46,0)
(43,3,0)
(24,33,0)
(40,46,0)
(48,29,0)
(26,2,0)
(33,24,0)
(41,38,0)
(2,38,0)
(25,21,0)
(17,39,0)
(31,47,0)
(16,12,0)
(34,38,0)
(22,24,0)
(18,38,0)
(30,9,0)
(11,39,0)
(13,42,0)
(39,47,0)
(45,13,1)
(22,9,1)
(37,27,1)
(23,25,1)
(47,31,1)
(4,43,1)
(9,43,1)
(32,48,1)
(37,24,1)
(44,24,1)
(26,25,1)
(43,3,1)
(10,7,1)
(30,19,1)
(20,15,1)
(17,37,1)
(47,24,1)
(11,28,1)
(29,23,1)
(31,5,1)
(35,37,1)
(9,30,1)
(2,0,1)
(1,22,1)
(7,29,1)
(33,2,1)
(48,42,1)
(33,1,1)
(19,4,1)
(3,49,1)
(28,39,1)
(21,20,1)
(23,32,1)
(6,26,1)
(39,47,1)
(19,25,1)
(35,11,1)
(25,21,1)
(0,6,1)
(5,17,1)
(3,10,1)
(24,33,1)
(27,44,1)
(42,45,1)
(11,39,1)
(13,2,1)
(3,10,2)
(39,37,2)
(11,37,2)
(39,47,2)
(9,43,2)
(47,24,2)
(5,37,2)
(31,37,2)
(33,2,2)
(3,49,2)
(23,25,2)
(28,37,2)
(29,23,2)
(24,33,2)
(2,0,2)
(47,37,2)
(43,3,2)
(17,37,2)
(37,24,2)
(25,21,2)
(11,39,2)
(19,25,2)
-----------------------------------
(0,&data)
(1,dataPtr2)
(2,*dataPtr2 = &data)
(3,(short)
(4,dataPtr1)
(5,data)
(6,data)
(7,data)
(8,dataPtr2)
(9,*dataPtr1 = data)
(10,RAND32()
(11,printIntLine(result)
(12,)
(13,data)
(14,data)
(15,dataPtr1)
(16,result)
(17,result)
(18,data)
(19,*dataPtr1)
(20,data)
(21,&data)
(22,data)
(23,*dataPtr1)
(24,data = *dataPtr2)
(25,*dataPtr1 = &data)
(26,dataPtr2)
(27,0)
(28,result)
(29,data = *dataPtr1)
(30,data)
(31,2)
(32,dataPtr1)
(33,*dataPtr2)
(34,dataPtr1)
(35,RET)
(36,if(data > 0)
(37,data > 0)
(38,)
(39,result = data * 2)
(40,data)
(41,)
(42,data = 0)
(43,data = (short)
(44,data)
(45,0)
(46,)
(47,data * 2)
(48,data)
(49,short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^