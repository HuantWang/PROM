-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_08_bad()
CWE190_Integer_Overflow__char_max_square_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,19,0)
(14,19,0)
(17,2,0)
(4,18,0)
(13,10,0)
(15,7,0)
(10,2,0)
(24,21,0)
(8,10,0)
(0,18,0)
(18,19,0)
(7,5,0)
(3,2,0)
(16,11,0)
(21,11,0)
(1,19,0)
(11,7,0)
(10,11,0)
(10,18,0)
(11,10,0)
(21,7,0)
(2,23,0)
(24,11,1)
(10,2,1)
(10,13,1)
(18,0,1)
(12,18,1)
(22,2,1)
(10,18,1)
(2,17,1)
(11,10,1)
(13,8,1)
(6,22,1)
(22,12,1)
(6,21,1)
(21,11,1)
(0,4,1)
(8,16,1)
(17,3,1)
(21,24,1)
(3,12,1)
(16,22,1)
(10,22,2)
(24,22,2)
(21,11,2)
(8,22,2)
(11,10,2)
(10,18,2)
(3,12,2)
(10,2,2)
(17,12,2)
(16,22,2)
(2,12,2)
(13,22,2)
(21,22,2)
(11,22,2)
-----------------------------------
(0,' ')
(1,if(staticReturnsTrue()
(2,data = CHAR_MAX)
(3,data)
(4,data)
(5,)
(6,RET)
(7,)
(8,data)
(9,if(staticReturnsTrue()
(10,data * data)
(11,result = data * data)
(12,staticReturnsTrue()
(13,data)
(14,data)
(15,result)
(16,result)
(17,CHAR_MAX)
(18,data = \' \')
(19,)
(20,data = ' ')
(21,printHexCharLine(result)
(22,staticReturnsTrue()
(23,)
(24,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^