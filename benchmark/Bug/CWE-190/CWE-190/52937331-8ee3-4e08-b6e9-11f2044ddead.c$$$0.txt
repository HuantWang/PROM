-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_bad()
{
    int64_t data;
    int64_t *dataPtr1 = &data;
    int64_t *dataPtr2 = &data;
    data = 0LL;
    {
        int64_t data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
        *dataPtr1 = data;
    }
    {
        int64_t data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
48,49
50,51
51,52
52,53
52,54
53,54
54,55
56,57
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,9,11,15,17,18,22,26,28,29,33,37,38,43,45,49,55,57,62,64,68,72,73,78,80,84,85,89,91
-----computeFrom-----
35,36
35,37
52,53
52,54
70,71
70,72
82,83
82,84
-----guardedBy-----
72,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ProblemStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_bad(){    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_32_bad
{    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
int64_t *dataPtr1 = &data;
int64_t *dataPtr1 = &data;
int64_t
int64_t
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int64_t *dataPtr2 = &data;
int64_t *dataPtr2 = &data;
int64_t
int64_t
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0LL;
data = 0LL
data
data
0LL
{        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        *dataPtr1 = data;    }
int64_t data = *dataPtr1;
int64_t data = *dataPtr1;
int64_t
int64_t
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%" SCNd64, &data);
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t data = *dataPtr2;
int64_t data = *dataPtr2;
int64_t
int64_t
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(33,17,0)
(24,34,0)
(39,20,0)
(30,34,0)
(3,34,0)
(4,26,0)
(1,26,0)
(11,15,0)
(36,17,0)
(40,11,0)
(18,42,0)
(22,34,0)
(8,2,0)
(26,34,0)
(31,25,0)
(39,29,0)
(41,34,0)
(16,23,0)
(26,42,0)
(23,24,0)
(1,23,0)
(23,25,0)
(2,8,0)
(25,31,0)
(15,2,0)
(13,34,0)
(27,3,0)
(35,8,0)
(19,20,0)
(5,20,0)
(28,39,0)
(14,24,0)
(6,1,0)
(10,25,0)
(9,31,0)
(15,11,0)
(20,39,0)
(7,2,0)
(32,3,0)
(38,29,0)
(2,34,0)
(42,26,0)
(31,26,0)
(12,28,0)
(11,3,0)
(0,15,0)
(21,39,0)
(20,11,0)
(28,29,0)
(17,11,0)
(25,24,0)
(9,10,1)
(37,17,1)
(28,39,1)
(35,7,1)
(23,16,1)
(42,18,1)
(12,39,1)
(23,25,1)
(26,42,1)
(17,11,1)
(28,12,1)
(8,35,1)
(15,2,1)
(20,11,1)
(2,8,1)
(18,4,1)
(40,23,1)
(1,6,1)
(6,25,1)
(33,11,1)
(36,33,1)
(37,28,1)
(39,20,1)
(1,26,1)
(7,26,1)
(16,1,1)
(15,0,1)
(13,2,1)
(5,21,1)
(20,19,1)
(17,36,1)
(21,17,1)
(19,5,1)
(31,9,1)
(11,15,1)
(0,40,1)
(31,26,1)
(10,13,1)
(25,31,1)
(20,17,2)
(28,39,2)
(21,17,2)
(26,42,2)
(39,20,2)
(25,31,2)
(5,17,2)
(20,11,2)
(2,8,2)
(39,17,2)
(1,26,2)
(28,17,2)
(11,15,2)
(12,17,2)
(19,17,2)
(31,26,2)
(17,11,2)
(15,2,2)
(23,25,2)
-----------------------------------
(0,dataPtr2)
(1,*dataPtr1)
(2,*dataPtr2 = &data)
(3,)
(4,dataPtr1)
(5,data)
(6,dataPtr1)
(7,dataPtr2)
(8,&data)
(9,dataPtr1)
(10,data)
(11,data = *dataPtr2)
(12,result)
(13,L)
(14,data)
(15,*dataPtr2)
(16,data)
(17,data > 0)
(18,data)
(19,2)
(20,data * 2)
(21,result)
(22,dataPtr1)
(23,*dataPtr1 = data)
(24,)
(25,data = *dataPtr1)
(26,*dataPtr1 = &data)
(27,data)
(28,printLongLongLine(result)
(29,)
(30,data)
(31,*dataPtr1)
(32,if(data > 0)
(33,data)
(34,)
(35,data)
(36,0)
(37,RET)
(38,result)
(39,result = data * 2)
(40,data)
(41,dataPtr2)
(42,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^