-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_09_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
35,38
36,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,39,42,44,47,51,53
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_09_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_09_bad()
CWE190_Integer_Overflow__char_rand_postinc_09_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,15,0)
(22,16,0)
(5,17,0)
(26,5,0)
(6,2,0)
(12,2,0)
(15,8,0)
(13,8,0)
(16,2,0)
(2,5,0)
(8,13,0)
(14,20,0)
(21,23,0)
(8,5,0)
(2,21,0)
(10,20,0)
(9,10,0)
(18,10,0)
(18,21,0)
(25,20,0)
(3,18,0)
(4,21,0)
(16,21,0)
(1,20,0)
(2,10,0)
(7,10,0)
(18,5,0)
(5,8,0)
(6,18,1)
(16,22,1)
(8,13,1)
(7,9,1)
(0,24,1)
(12,6,1)
(2,5,1)
(13,26,1)
(18,3,1)
(24,10,1)
(16,2,1)
(19,0,1)
(18,10,1)
(5,8,1)
(3,0,1)
(26,24,1)
(8,15,1)
(0,5,1)
(18,5,1)
(19,16,1)
(2,10,1)
(10,7,1)
(22,2,1)
(2,12,1)
(16,2,2)
(13,24,2)
(3,0,2)
(12,0,2)
(22,0,2)
(8,15,2)
(18,10,2)
(18,5,2)
(8,24,2)
(26,24,2)
(5,8,2)
(16,0,2)
(18,0,2)
(8,13,2)
(2,5,2)
(2,0,2)
(2,10,2)
(5,24,2)
(6,0,2)
-----------------------------------
(0,GLOBAL_CONST_TRUE)
(1,data)
(2,result = data)
(3,data)
(4,result)
(5,data = (char)
(6,result)
(7,' ')
(8,(char)
(9,data)
(10,data = \' \')
(11,data = ' ')
(12,data)
(13,RAND32()
(14,if(GLOBAL_CONST_TRUE)
(15,char)
(16,printHexCharLine(result)
(17,)
(18,data++)
(19,RET)
(20,)
(21,)
(22,result)
(23,)
(24,GLOBAL_CONST_TRUE)
(25,if(GLOBAL_CONST_TRUE)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^