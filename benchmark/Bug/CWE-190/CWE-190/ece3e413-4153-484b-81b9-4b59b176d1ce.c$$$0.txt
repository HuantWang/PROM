-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_03_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(22,17,0)
(26,3,0)
(4,14,0)
(0,16,0)
(7,3,0)
(14,7,0)
(12,11,0)
(23,16,0)
(3,5,0)
(14,3,0)
(7,1,0)
(20,7,0)
(10,11,0)
(18,9,0)
(6,19,0)
(25,19,0)
(1,7,0)
(1,16,0)
(17,19,0)
(27,1,0)
(24,19,0)
(1,17,0)
(13,17,0)
(15,1,0)
(2,9,0)
(16,21,0)
(11,10,1)
(8,9,1)
(18,16,1)
(8,14,1)
(4,7,1)
(2,18,1)
(20,9,1)
(18,11,1)
(1,17,1)
(17,13,1)
(16,0,1)
(10,12,1)
(12,17,1)
(27,15,1)
(0,23,1)
(14,7,1)
(23,11,1)
(14,4,1)
(13,22,1)
(1,27,1)
(15,20,1)
(7,1,1)
(1,16,1)
(9,2,1)
(20,9,2)
(4,9,2)
(14,9,2)
(7,9,2)
(0,11,2)
(1,17,2)
(1,16,2)
(16,11,2)
(7,1,2)
(15,9,2)
(1,9,2)
(14,7,2)
(23,11,2)
(27,9,2)
-----------------------------------
(0,UINT_MAX)
(1,data * data)
(2,5)
(3,)
(4,result)
(5,)
(6,if(5==5)
(7,result = data * data)
(8,RET)
(9,5==5)
(10,5)
(11,5==5)
(12,5)
(13,0)
(14,printUnsignedLine(result)
(15,data)
(16,data = UINT_MAX)
(17,data = 0)
(18,5)
(19,)
(20,result)
(21,)
(22,data)
(23,data)
(24,data)
(25,if(5==5)
(26,result)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^