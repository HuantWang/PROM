-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_03_bad()
CWE190_Integer_Overflow__char_rand_add_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,9,0)
(15,20,0)
(6,25,0)
(0,19,0)
(13,20,0)
(0,9,0)
(0,20,0)
(30,25,0)
(20,7,0)
(25,3,0)
(12,22,0)
(19,25,0)
(27,1,0)
(24,28,0)
(2,7,0)
(9,5,0)
(16,0,0)
(8,19,0)
(27,18,0)
(18,27,0)
(14,28,0)
(10,7,0)
(26,30,0)
(19,0,0)
(30,19,0)
(9,27,0)
(23,22,0)
(27,9,0)
(4,7,0)
(1,27,0)
(11,0,0)
(23,20,1)
(19,0,1)
(24,22,1)
(27,1,1)
(27,18,1)
(0,9,1)
(1,21,1)
(26,19,1)
(13,15,1)
(11,8,1)
(14,24,1)
(12,23,1)
(24,9,1)
(8,28,1)
(30,19,1)
(9,27,1)
(30,26,1)
(17,28,1)
(20,13,1)
(22,12,1)
(0,16,1)
(21,22,1)
(17,30,1)
(16,11,1)
(28,14,1)
(0,20,1)
(30,19,2)
(27,18,2)
(27,1,2)
(19,28,2)
(9,22,2)
(21,22,2)
(0,28,2)
(0,9,2)
(16,28,2)
(27,22,2)
(1,22,2)
(26,28,2)
(11,28,2)
(19,0,2)
(9,27,2)
(30,28,2)
(8,28,2)
(0,20,2)
-----------------------------------
(0,data + 1)
(1,RAND32()
(2,if(5==5)
(3,)
(4,if(5==5)
(5,)
(6,result)
(7,)
(8,result)
(9,data = (char)
(10,data)
(11,data)
(12,5)
(13,' ')
(14,5)
(15,data)
(16,1)
(17,RET)
(18,char)
(19,result = data + 1)
(20,data = \' \')
(21,data)
(22,5==5)
(23,5)
(24,5)
(25,)
(26,result)
(27,(char)
(28,5==5)
(29,data = ' ')
(30,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^