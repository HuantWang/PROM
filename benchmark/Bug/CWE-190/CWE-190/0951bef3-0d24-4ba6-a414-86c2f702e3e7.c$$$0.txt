-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_add_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        short result = data + 1;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,45,49,50,54,56,57,58,62,63,64
-----computeFrom-----
12,13
12,14
22,23
22,24
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_add_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_max_add_15_bad()
CWE190_Integer_Overflow__short_max_add_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(16,27,0)
(24,27,0)
(14,4,0)
(8,27,0)
(10,21,0)
(31,3,0)
(4,21,0)
(2,21,0)
(6,27,0)
(14,6,0)
(17,20,0)
(14,20,0)
(0,3,0)
(11,14,0)
(25,6,0)
(20,5,0)
(5,3,0)
(1,8,0)
(35,9,0)
(33,6,0)
(9,5,0)
(29,3,0)
(12,27,0)
(23,4,0)
(19,22,0)
(7,21,0)
(22,3,0)
(32,3,0)
(30,14,0)
(9,20,0)
(20,14,0)
(26,27,0)
(34,4,0)
(28,5,0)
(20,14,1)
(6,33,1)
(8,1,1)
(33,25,1)
(11,17,1)
(13,16,1)
(15,29,1)
(14,6,1)
(19,13,1)
(25,18,1)
(12,8,1)
(9,35,1)
(18,4,1)
(29,22,1)
(14,30,1)
(15,31,1)
(4,34,1)
(9,20,1)
(22,19,1)
(13,12,1)
(34,23,1)
(17,13,1)
(31,9,1)
(1,18,1)
(14,4,1)
(16,6,1)
(35,20,1)
(30,11,1)
(9,13,2)
(1,18,2)
(14,4,2)
(14,6,2)
(25,18,2)
(12,18,2)
(6,18,2)
(9,20,2)
(8,18,2)
(14,13,2)
(22,13,2)
(33,18,2)
(29,13,2)
(35,13,2)
(17,13,2)
(31,13,2)
(19,13,2)
(20,14,2)
(20,13,2)
(11,13,2)
(16,18,2)
(30,13,2)
-----------------------------------
(0,default:)
(1,"Benign, fixed string")
(2,switch(7)
(3,)
(4,data = 0)
(5,)
(6,data = SHRT_MAX)
(7,switch(6)
(8,printLine("Benign, fixed string")
(9,printIntLine(result)
(10,data)
(11,data)
(12,break;)
(13,7)
(14,data + 1)
(15,RET)
(16,break;)
(17,result)
(18,6)
(19,"Benign, fixed string")
(20,result = data + 1)
(21,)
(22,printLine("Benign, fixed string")
(23,data)
(24,case 6:)
(25,data)
(26,default:)
(27,)
(28,result)
(29,break;)
(30,1)
(31,break;)
(32,case 7:)
(33,SHRT_MAX)
(34,0)
(35,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^