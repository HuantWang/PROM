-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_42_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    data = badSource(data);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,29,33,35,39,40,44,46
-----computeFrom-----
12,13
12,14
17,18
17,19
26,27
26,28
37,38
37,39
-----guardedBy-----
28,39
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_42_bad(){    int data;    /* Initialize data */    data = 0;    data = badSource(data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_42_bad()
CWE190_Integer_Overflow__int_fgets_multiply_42_bad
{    int data;    /* Initialize data */    data = 0;    data = badSource(data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(14,4,0)
(20,21,0)
(17,20,0)
(1,21,0)
(20,19,0)
(12,21,0)
(19,14,0)
(5,18,0)
(6,14,0)
(3,14,0)
(15,12,0)
(16,4,0)
(22,18,0)
(3,9,0)
(8,19,0)
(13,3,0)
(9,4,0)
(11,9,0)
(2,4,0)
(19,20,0)
(18,14,0)
(7,9,0)
(0,19,0)
(12,20,0)
(14,3,0)
(19,0,1)
(8,17,1)
(12,20,1)
(14,3,1)
(9,7,1)
(10,18,1)
(0,8,1)
(17,18,1)
(19,14,1)
(18,14,1)
(12,15,1)
(18,22,1)
(13,6,1)
(10,12,1)
(22,5,1)
(7,11,1)
(3,9,1)
(6,9,1)
(15,20,1)
(20,19,1)
(3,13,1)
(5,14,1)
(14,3,2)
(8,18,2)
(0,18,2)
(19,18,2)
(20,18,2)
(18,14,2)
(19,14,2)
(3,9,2)
(20,19,2)
(12,18,2)
(12,20,2)
(17,18,2)
(15,18,2)
-----------------------------------
(0,2)
(1,result)
(2,data)
(3,badSource(data)
(4,)
(5,data)
(6,data)
(7,0)
(8,data)
(9,data = 0)
(10,RET)
(11,data)
(12,printIntLine(result)
(13,data)
(14,data = badSource(data)
(15,result)
(16,if(data > 0)
(17,result)
(18,data > 0)
(19,data * 2)
(20,result = data * 2)
(21,)
(22,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^