-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_preinc_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        int64_t result = data;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
30,31
31,32
31,33
32,33
36,37
36,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
41,42
41,43
41,44
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,28,29,33,34,35,37,40,45,49,51,54,58,60,61,62,66,67,68
-----computeFrom-----
13,14
13,15
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_preinc_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_max_preinc_15_bad()
CWE190_Integer_Overflow__int64_t_max_preinc_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int64_t result = data;        printLongLongLine(result);    }
++data;
++data
data
data
int64_t result = data;
int64_t result = data;
int64_t
int64_t
result = data
result
= data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(14,4,0)
(17,33,0)
(16,33,0)
(10,33,0)
(10,4,0)
(26,20,0)
(13,18,0)
(3,20,0)
(14,33,0)
(9,16,0)
(2,20,0)
(8,4,0)
(12,23,0)
(5,20,0)
(24,10,0)
(11,18,0)
(1,23,0)
(6,18,0)
(7,11,0)
(27,18,0)
(4,18,0)
(25,14,0)
(21,20,0)
(22,18,0)
(29,14,0)
(33,20,0)
(16,14,0)
(19,23,0)
(15,4,0)
(32,3,0)
(0,23,0)
(9,14,1)
(26,3,1)
(24,28,1)
(31,0,1)
(30,26,1)
(29,25,1)
(25,10,1)
(16,9,1)
(6,11,1)
(11,7,1)
(28,6,1)
(32,28,1)
(10,24,1)
(13,4,1)
(14,29,1)
(3,32,1)
(4,15,1)
(8,31,1)
(21,16,1)
(16,14,1)
(30,21,1)
(14,4,1)
(7,31,1)
(10,4,1)
(15,8,1)
(28,13,1)
(25,28,2)
(16,28,2)
(4,31,2)
(14,4,2)
(6,31,2)
(13,31,2)
(14,28,2)
(11,31,2)
(8,31,2)
(29,28,2)
(3,28,2)
(16,14,2)
(15,31,2)
(21,28,2)
(10,28,2)
(32,28,2)
(7,31,2)
(26,28,2)
(24,28,2)
(10,4,2)
(9,28,2)
-----------------------------------
(0,L)
(1,switch(7)
(2,default:)
(3,printLine("Benign, fixed string")
(4,data = LLONG_MAX)
(5,case 7:)
(6,break;)
(7,"Benign, fixed string")
(8,data)
(9,result)
(10,++data)
(11,printLine("Benign, fixed string")
(12,data)
(13,break;)
(14,result = data)
(15,LLONG_MAX)
(16,printLongLongLine(result)
(17,result)
(18,)
(19,switch(6)
(20,)
(21,break;)
(22,case 6:)
(23,)
(24,data)
(25,result)
(26,break;)
(27,default:)
(28,7)
(29,data)
(30,RET)
(31,6)
(32,"Benign, fixed string")
(33,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^