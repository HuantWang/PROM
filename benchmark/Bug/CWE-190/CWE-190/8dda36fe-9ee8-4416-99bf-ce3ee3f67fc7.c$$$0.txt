-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_03_bad()
{
    int64_t data;
    data = 0LL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
31,32
32,33
34,35
34,36
35,36
35,37
38,39
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,9,11,15,16,19,20,25,29,30,33,36,37,42,43,48,50,54,55,59,61
-----computeFrom-----
13,14
13,15
18,19
18,20
23,24
23,25
35,36
35,37
40,41
40,42
52,53
52,54
-----guardedBy-----
42,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_03_bad(){    int64_t data;    data = 0LL;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_03_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_03_bad
{    int64_t data;    data = 0LL;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(16,22,0)
(22,16,0)
(22,13,0)
(11,31,0)
(13,22,0)
(30,18,0)
(29,23,0)
(26,9,0)
(5,20,0)
(25,26,0)
(7,26,0)
(9,26,0)
(0,9,0)
(4,9,0)
(3,23,0)
(26,13,0)
(13,28,0)
(15,12,0)
(22,2,0)
(20,13,0)
(4,12,0)
(6,13,0)
(17,31,0)
(9,12,0)
(27,31,0)
(1,20,0)
(14,31,0)
(2,22,0)
(24,21,0)
(8,21,0)
(10,4,0)
(19,23,1)
(23,3,1)
(0,20,1)
(19,20,1)
(24,27,1)
(5,23,1)
(4,9,1)
(20,1,1)
(6,21,1)
(26,13,1)
(8,24,1)
(7,0,1)
(9,26,1)
(26,25,1)
(4,10,1)
(25,7,1)
(16,6,1)
(10,9,1)
(22,2,1)
(3,29,1)
(20,13,1)
(13,22,1)
(29,13,1)
(29,21,1)
(22,16,1)
(21,8,1)
(1,5,1)
(19,4,1)
(16,21,2)
(9,26,2)
(4,9,2)
(20,23,2)
(13,21,2)
(25,20,2)
(22,16,2)
(26,20,2)
(9,20,2)
(20,13,2)
(22,21,2)
(4,20,2)
(7,20,2)
(6,21,2)
(22,2,2)
(10,20,2)
(0,20,2)
(1,23,2)
(26,13,2)
(13,22,2)
(5,23,2)
-----------------------------------
(0,result)
(1,0)
(2,int64_t)
(3,5)
(4,printLongLongLine(result)
(5,data)
(6,data)
(7,data)
(8,5)
(9,result = data * 2)
(10,result)
(11,if(5==5)
(12,)
(13,data = (int64_t)
(14,if(5==5)
(15,result)
(16,RAND64()
(17,data)
(18,)
(19,RET)
(20,data > 0)
(21,5==5)
(22,(int64_t)
(23,5==5)
(24,5)
(25,2)
(26,data * 2)
(27,L)
(28,)
(29,5)
(30,if(data > 0)
(31,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^