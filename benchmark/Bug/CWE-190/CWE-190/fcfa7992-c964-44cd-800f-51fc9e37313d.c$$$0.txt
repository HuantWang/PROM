-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (UINT_MAX/2))
            {
                unsigned int result = data * 2;
                printUnsignedLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
72,73
72,74
72,75
73,74
73,75
74,75
76,77
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
85,86
85,87
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,47,51,53,57,58,62,64,69,70,75,79,80,84,86,90,91,95,97,102,103
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
44,45
44,46
55,56
55,57
67,68
67,69
73,74
73,75
77,78
77,79
88,89
88,90
-----guardedBy-----
46,57
69,90
75,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_12_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (UINT_MAX/2))            {                unsigned int result = data * 2;                printUnsignedLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (UINT_MAX/2)
data
data
(UINT_MAX/2)
UINT_MAX/2
UINT_MAX
UINT_MAX
2
{                unsigned int result = data * 2;                printUnsignedLine(result);            }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(17,36,0)
(34,29,0)
(3,36,0)
(22,29,0)
(14,50,0)
(46,17,0)
(1,24,0)
(53,27,0)
(26,24,0)
(45,27,0)
(15,54,0)
(1,26,0)
(4,36,0)
(31,21,0)
(30,54,0)
(23,51,0)
(57,54,0)
(17,50,0)
(38,43,0)
(49,3,0)
(41,43,0)
(44,17,0)
(0,47,0)
(35,26,0)
(52,12,0)
(7,24,0)
(48,15,0)
(43,36,0)
(11,51,0)
(8,27,0)
(42,19,0)
(56,50,0)
(47,50,0)
(36,28,0)
(31,9,0)
(13,40,0)
(9,31,0)
(29,4,0)
(19,20,0)
(26,17,0)
(47,36,0)
(31,36,0)
(55,30,0)
(4,50,0)
(50,6,0)
(21,31,0)
(51,27,0)
(16,4,0)
(30,43,0)
(10,47,0)
(43,30,0)
(39,1,0)
(3,50,0)
(15,30,0)
(5,3,0)
(43,50,0)
(25,32,0)
(17,26,0)
(4,29,0)
(36,31,0)
(2,36,0)
(4,36,1)
(3,49,1)
(47,0,1)
(33,3,1)
(15,48,1)
(22,34,1)
(36,31,1)
(18,36,1)
(17,46,1)
(29,22,1)
(46,44,1)
(34,16,1)
(17,36,1)
(38,55,1)
(5,18,1)
(50,14,1)
(2,37,1)
(31,21,1)
(4,50,1)
(15,30,1)
(48,30,1)
(33,47,1)
(44,35,1)
(26,17,1)
(43,50,1)
(33,1,1)
(47,50,1)
(51,11,1)
(14,56,1)
(41,38,1)
(43,36,1)
(1,39,1)
(55,4,1)
(33,19,1)
(31,9,1)
(47,36,1)
(3,50,1)
(43,41,1)
(42,4,1)
(37,51,1)
(1,26,1)
(17,50,1)
(9,2,1)
(11,23,1)
(10,18,1)
(56,37,1)
(19,42,1)
(39,26,1)
(18,50,1)
(49,5,1)
(0,10,1)
(33,15,1)
(16,3,1)
(3,36,1)
(30,43,1)
(35,47,1)
(4,29,1)
(41,4,2)
(42,4,2)
(55,4,2)
(1,47,2)
(26,17,2)
(48,4,2)
(5,18,2)
(31,9,2)
(0,18,2)
(19,4,2)
(4,29,2)
(9,37,2)
(35,47,2)
(36,31,2)
(31,37,2)
(44,47,2)
(4,3,2)
(1,26,2)
(15,30,2)
(10,18,2)
(46,47,2)
(36,37,2)
(43,4,2)
(43,50,2)
(16,3,2)
(39,47,2)
(15,4,2)
(29,3,2)
(30,43,2)
(4,36,2)
(3,50,2)
(47,50,2)
(47,18,2)
(17,36,2)
(26,47,2)
(49,18,2)
(14,37,2)
(3,36,2)
(38,4,2)
(17,47,2)
(34,3,2)
(30,4,2)
(31,21,2)
(22,3,2)
(3,18,2)
(43,36,2)
(56,37,2)
(17,50,2)
(50,37,2)
(47,36,2)
(4,50,2)
(2,37,2)
-----------------------------------
(0,0)
(1,printUnsignedLine(result)
(2,data)
(3,data > 0)
(4,data < (UINT_MAX/2)
(5,data)
(6,)
(7,result)
(8,if(globalReturnsTrueOrFalse()
(9,RAND32()
(10,data)
(11,0)
(12,)
(13,if (data < (UINT_MAX/2)
(14,2)
(15,printUnsignedLine(result)
(16,data)
(17,data * 2)
(18,globalReturnsTrueOrFalse()
(19,printLine("data value is too large to perform arithmetic safely.")
(20,)
(21,unsigned int)
(22,2)
(23,data)
(24,)
(25,if(data > 0)
(26,result = data * 2)
(27,)
(28,)
(29,UINT_MAX/2)
(30,result = data * 2)
(31,(unsigned int)
(32,)
(33,RET)
(34,UINT_MAX)
(35,result)
(36,data = (unsigned int)
(37,globalReturnsTrueOrFalse()
(38,data)
(39,result)
(40,)
(41,2)
(42,"data value is too large to perform arithmetic safely.")
(43,data * 2)
(44,data)
(45,data)
(46,2)
(47,data > 0)
(48,result)
(49,0)
(50,data = 2)
(51,data = 0)
(52,if(data > 0)
(53,if(globalReturnsTrueOrFalse()
(54,)
(55,result)
(56,data)
(57,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^