-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_rand_square_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,33,34,36,40,42,46,47,51,53,57,59,63,65
-----computeFrom-----
18,19
18,20
23,24
23,25
30,31
30,32
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_34_bad(){    int data;    CWE190_Integer_Overflow__int_rand_square_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_34_bad()
CWE190_Integer_Overflow__int_rand_square_34_bad
{    int data;    CWE190_Integer_Overflow__int_rand_square_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__int_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__int_rand_square_34_unionType
CWE190_Integer_Overflow__int_rand_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(25,5,0)
(3,18,0)
(12,16,0)
(29,16,0)
(18,1,0)
(16,30,0)
(2,25,0)
(1,24,0)
(9,1,0)
(6,16,0)
(17,23,0)
(0,5,0)
(8,17,0)
(5,30,0)
(15,23,0)
(21,18,0)
(22,12,0)
(1,23,0)
(29,12,0)
(20,30,0)
(14,17,0)
(12,22,0)
(28,22,0)
(22,5,0)
(19,12,0)
(13,3,0)
(24,1,0)
(30,23,0)
(10,3,0)
(5,25,0)
(18,23,0)
(26,25,0)
(7,22,0)
(27,23,0)
(11,29,0)
(3,10,1)
(8,14,1)
(4,29,1)
(12,22,1)
(11,12,1)
(9,17,1)
(18,21,1)
(19,5,1)
(24,9,1)
(22,5,1)
(29,12,1)
(10,13,1)
(29,11,1)
(21,3,1)
(5,25,1)
(2,26,1)
(0,18,1)
(13,1,1)
(25,2,1)
(7,28,1)
(22,7,1)
(28,19,1)
(1,24,1)
(26,0,1)
(18,1,1)
(17,8,1)
(29,12,2)
(22,5,2)
(18,1,2)
(5,25,2)
(1,24,2)
(12,22,2)
-----------------------------------
(0,data)
(1,data = RAND32()
(2,unionSecond)
(3,myUnion.unionFirst)
(4,RET)
(5,data = myUnion.unionSecond)
(6,result)
(7,data)
(8,0)
(9,data)
(10,unionFirst)
(11,result)
(12,result = data * data)
(13,myUnion)
(14,data)
(15,data)
(16,)
(17,data = 0)
(18,myUnion.unionFirst = data)
(19,result)
(20,data)
(21,data)
(22,data * data)
(23,)
(24,RAND32()
(25,myUnion.unionSecond)
(26,myUnion)
(27,myUnion)
(28,data)
(29,printIntLine(result)
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^