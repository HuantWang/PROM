-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_11_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_11_bad(){    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_11_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_11_bad
{    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(6,20,0)
(24,19,0)
(11,21,0)
(10,21,0)
(0,20,0)
(23,17,0)
(16,23,0)
(13,17,0)
(0,19,0)
(23,12,0)
(4,14,0)
(3,21,0)
(22,0,0)
(15,24,0)
(20,21,0)
(25,24,0)
(17,23,0)
(24,20,0)
(19,9,0)
(14,24,0)
(2,19,0)
(5,23,0)
(14,19,0)
(7,20,0)
(17,20,0)
(18,1,1)
(14,24,1)
(17,20,1)
(25,0,1)
(1,20,1)
(16,1,1)
(17,13,1)
(14,4,1)
(7,6,1)
(13,5,1)
(15,25,1)
(8,18,1)
(22,18,1)
(0,22,1)
(24,15,1)
(24,20,1)
(18,23,1)
(20,7,1)
(4,24,1)
(8,14,1)
(5,16,1)
(23,17,1)
(0,20,1)
(16,1,2)
(4,18,2)
(22,18,2)
(17,1,2)
(23,1,2)
(25,18,2)
(15,18,2)
(0,20,2)
(14,24,2)
(0,18,2)
(23,17,2)
(17,20,2)
(5,1,2)
(14,18,2)
(24,18,2)
(13,1,2)
(24,20,2)
-----------------------------------
(0,data++)
(1,globalReturnsTrue()
(2,result)
(3,if(globalReturnsTrue()
(4,result)
(5,"%c")
(6,data)
(7,\\\' \\\')
(8,RET)
(9,)
(10,if(globalReturnsTrue()
(11,data)
(12,)
(13,data)
(14,printHexCharLine(result)
(15,data)
(16,stdin)
(17,&data)
(18,globalReturnsTrue()
(19,)
(20,data = \\\' \\\')
(21,)
(22,data)
(23,fscanf (stdin, "%c", &data)
(24,result = data)
(25,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^