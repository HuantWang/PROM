-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_04_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,29,34,35,39,41,45,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
32,33
32,34
43,44
43,45
-----guardedBy-----
34,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_04_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_04_bad()
CWE190_Integer_Overflow__int_rand_multiply_04_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(2,0,0)
(12,3,0)
(14,19,0)
(18,27,0)
(24,9,0)
(27,21,0)
(27,23,0)
(6,15,0)
(10,4,0)
(9,0,0)
(19,1,0)
(11,10,0)
(3,19,0)
(3,27,0)
(25,1,0)
(21,27,0)
(0,9,0)
(26,4,0)
(5,1,0)
(0,19,0)
(0,27,0)
(10,9,0)
(13,1,0)
(7,19,0)
(17,0,0)
(20,3,0)
(9,4,0)
(10,9,1)
(27,21,1)
(3,12,1)
(9,0,1)
(18,16,1)
(2,24,1)
(19,7,1)
(8,10,1)
(0,27,1)
(22,27,1)
(3,27,1)
(12,20,1)
(16,19,1)
(11,9,1)
(21,18,1)
(0,17,1)
(7,14,1)
(0,19,1)
(10,11,1)
(3,19,1)
(8,22,1)
(8,3,1)
(17,2,1)
(24,3,1)
(22,16,1)
(20,22,1)
(3,22,2)
(17,3,2)
(27,21,2)
(10,3,2)
(10,9,2)
(0,19,2)
(3,19,2)
(2,3,2)
(18,16,2)
(9,0,2)
(9,3,2)
(0,27,2)
(3,27,2)
(0,3,2)
(21,16,2)
(24,3,2)
(20,22,2)
(12,22,2)
(11,3,2)
(27,16,2)
-----------------------------------
(0,data * 2)
(1,)
(2,data)
(3,data > 0)
(4,)
(5,if(STATIC_CONST_TRUE)
(6,if(data > 0)
(7,0)
(8,RET)
(9,result = data * 2)
(10,printIntLine(result)
(11,result)
(12,0)
(13,data)
(14,data)
(15,)
(16,STATIC_CONST_TRUE)
(17,2)
(18,data)
(19,data = 0)
(20,data)
(21,RAND32()
(22,STATIC_CONST_TRUE)
(23,)
(24,result)
(25,if(STATIC_CONST_TRUE)
(26,result)
(27,data = RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^