-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_14_bad()
{
    int64_t data;
    data = 0LL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,33,38,39,44,46,50,51,55,57
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
30,31
30,32
36,37
36,38
48,49
48,50
-----guardedBy-----
38,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_14_bad(){    int64_t data;    data = 0LL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_14_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_14_bad
{    int64_t data;    data = 0LL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(0,2,0)
(22,27,0)
(0,11,0)
(26,28,0)
(29,14,0)
(17,18,0)
(12,0,0)
(15,0,0)
(22,11,0)
(5,18,0)
(1,18,0)
(19,2,0)
(10,22,0)
(7,11,0)
(13,6,0)
(4,27,0)
(2,8,0)
(23,28,0)
(3,6,0)
(6,2,0)
(24,18,0)
(11,0,0)
(25,14,0)
(9,16,0)
(21,2,0)
(11,27,0)
(20,6,1)
(0,2,1)
(20,28,1)
(12,15,1)
(2,19,1)
(19,21,1)
(22,11,1)
(23,2,1)
(21,14,1)
(23,14,1)
(0,12,1)
(14,29,1)
(7,6,1)
(11,0,1)
(6,13,1)
(15,7,1)
(25,5,1)
(10,11,1)
(3,28,1)
(20,22,1)
(6,2,1)
(28,26,1)
(13,3,1)
(29,25,1)
(22,10,1)
(26,23,1)
(13,28,2)
(22,6,2)
(19,14,2)
(21,14,2)
(3,28,2)
(2,14,2)
(7,6,2)
(6,2,2)
(12,6,2)
(0,6,2)
(10,6,2)
(22,11,2)
(11,0,2)
(15,6,2)
(0,2,2)
(11,6,2)
(6,28,2)
-----------------------------------
(0,data * 2)
(1,if(globalFive==5)
(2,data = LLONG_MAX)
(3,data)
(4,result)
(5,L)
(6,data > 0)
(7,result)
(8,)
(9,if(data > 0)
(10,result)
(11,result = data * 2)
(12,2)
(13,0)
(14,globalFive==5)
(15,data)
(16,)
(17,if(globalFive==5)
(18,)
(19,LLONG_MAX)
(20,RET)
(21,data)
(22,printLongLongLine(result)
(23,globalFive)
(24,data)
(25,globalFive)
(26,5)
(27,)
(28,globalFive==5)
(29,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^