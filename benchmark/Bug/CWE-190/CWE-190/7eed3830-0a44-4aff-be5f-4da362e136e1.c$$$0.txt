-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            char result = data + 1;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
57,59
58,59
60,61
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,43,47,48,52,54,59,61,65,67,71,72,76,78,83,84
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
45,46
45,47
57,58
57,59
69,70
69,71
-----guardedBy-----
59,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_max_add_12_bad()
CWE190_Integer_Overflow__char_max_add_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(5,27,0)
(1,34,0)
(8,4,0)
(34,39,0)
(37,30,0)
(0,36,0)
(14,30,0)
(26,28,0)
(35,14,0)
(21,25,0)
(11,31,0)
(7,25,0)
(28,27,0)
(34,36,0)
(3,39,0)
(43,31,0)
(10,7,0)
(10,31,0)
(2,27,0)
(9,27,0)
(6,36,0)
(15,25,0)
(25,18,0)
(39,34,0)
(11,10,0)
(7,10,0)
(39,25,0)
(7,30,0)
(20,7,0)
(40,11,0)
(4,32,0)
(23,13,0)
(24,14,0)
(44,7,0)
(36,38,0)
(30,41,0)
(39,30,0)
(22,30,0)
(0,34,0)
(19,10,0)
(17,28,0)
(29,0,0)
(14,25,0)
(12,39,0)
(7,30,1)
(33,25,1)
(7,20,1)
(15,42,1)
(10,7,1)
(17,26,1)
(14,25,1)
(21,15,1)
(29,34,1)
(11,10,1)
(14,30,1)
(7,25,1)
(4,8,1)
(20,44,1)
(34,39,1)
(39,25,1)
(0,34,1)
(33,30,1)
(16,4,1)
(25,21,1)
(39,12,1)
(24,35,1)
(22,42,1)
(8,14,1)
(12,3,1)
(35,33,1)
(42,28,1)
(14,24,1)
(16,11,1)
(30,37,1)
(28,17,1)
(19,14,1)
(40,10,1)
(1,33,1)
(11,40,1)
(3,1,1)
(16,0,1)
(44,19,1)
(0,29,1)
(37,22,1)
(39,30,1)
(14,33,2)
(39,30,2)
(29,33,2)
(39,25,2)
(11,14,2)
(14,25,2)
(21,42,2)
(25,42,2)
(37,42,2)
(14,30,2)
(0,34,2)
(34,33,2)
(39,33,2)
(35,33,2)
(44,14,2)
(0,33,2)
(34,39,2)
(22,42,2)
(10,14,2)
(24,33,2)
(11,10,2)
(7,14,2)
(19,14,2)
(10,7,2)
(12,33,2)
(3,33,2)
(8,14,2)
(15,42,2)
(7,25,2)
(40,14,2)
(30,42,2)
(1,33,2)
(20,14,2)
(7,30,2)
(4,14,2)
-----------------------------------
(0,printHexCharLine(result)
(1,result)
(2,data)
(3,data)
(4,printLine("data value is too large to perform arithmetic safely.")
(5,if(globalReturnsTrueOrFalse()
(6,result)
(7,data + 1)
(8,"data value is too large to perform arithmetic safely.")
(9,if(globalReturnsTrueOrFalse()
(10,result = data + 1)
(11,printHexCharLine(result)
(12,1)
(13,)
(14,data < CHAR_MAX)
(15,data)
(16,RET)
(17,\\\' \\\')
(18,)
(19,result)
(20,1)
(21,CHAR_MAX)
(22,data)
(23,if (data < CHAR_MAX)
(24,CHAR_MAX)
(25,data = CHAR_MAX)
(26,data)
(27,)
(28,data = \\\' \\\')
(29,result)
(30,data = 2)
(31,)
(32,)
(33,globalReturnsTrueOrFalse()
(34,result = data + 1)
(35,data)
(36,)
(37,2)
(38,)
(39,data + 1)
(40,result)
(41,)
(42,globalReturnsTrueOrFalse()
(43,result)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^