-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_16_bad()
{
    short data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
28,29
28,30
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,27,32,33,37,39,43,44,48,50,51
-----computeFrom-----
12,13
12,14
20,21
20,22
30,31
30,32
41,42
41,43
-----guardedBy-----
32,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_16_bad(){    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__short_max_multiply_16_bad()
CWE190_Integer_Overflow__short_max_multiply_16_bad
{    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(27,21,0)
(1,15,0)
(18,1,0)
(7,18,0)
(28,1,0)
(24,12,0)
(4,0,0)
(25,11,0)
(11,21,0)
(6,21,0)
(10,15,0)
(27,19,0)
(14,19,0)
(13,0,0)
(0,20,0)
(16,1,0)
(19,1,0)
(19,27,0)
(29,15,0)
(8,27,0)
(9,18,0)
(26,12,0)
(3,15,0)
(19,0,0)
(23,20,0)
(11,27,0)
(18,0,0)
(5,19,0)
(16,28,1)
(2,23,1)
(14,8,1)
(9,7,1)
(18,9,1)
(4,22,1)
(2,22,1)
(17,2,1)
(27,19,1)
(23,0,1)
(8,18,1)
(7,2,1)
(26,18,1)
(11,25,1)
(11,27,1)
(17,26,1)
(1,16,1)
(5,14,1)
(18,1,1)
(0,13,1)
(25,27,1)
(19,5,1)
(22,1,1)
(19,0,1)
(19,1,1)
(13,4,1)
(18,0,1)
(26,11,1)
(14,18,2)
(4,22,2)
(27,19,2)
(19,1,2)
(23,22,2)
(11,27,2)
(25,18,2)
(19,18,2)
(18,0,2)
(19,0,2)
(9,2,2)
(18,1,2)
(11,18,2)
(26,2,2)
(8,18,2)
(7,2,2)
(27,18,2)
(13,22,2)
(18,2,2)
(0,22,2)
(5,18,2)
-----------------------------------
(0,data = SHRT_MAX)
(1,data = 0)
(2,1)
(3,data)
(4,data)
(5,2)
(6,result)
(7,data)
(8,result)
(9,0)
(10,while(1)
(11,printIntLine(result)
(12,)
(13,SHRT_MAX)
(14,data)
(15,)
(16,0)
(17,RET)
(18,data > 0)
(19,data * 2)
(20,)
(21,)
(22,1)
(23,break;)
(24,if(data > 0)
(25,result)
(26,break;)
(27,result = data * 2)
(28,data)
(29,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^