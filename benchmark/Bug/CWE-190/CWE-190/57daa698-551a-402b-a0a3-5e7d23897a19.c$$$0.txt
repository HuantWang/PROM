-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_13_bad()
CWE190_Integer_Overflow__char_max_multiply_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(15,20,0)
(17,2,0)
(25,17,0)
(12,28,0)
(22,2,0)
(26,15,0)
(10,19,0)
(14,2,0)
(18,29,0)
(30,0,0)
(30,8,0)
(8,21,0)
(30,2,0)
(9,0,0)
(23,28,0)
(32,20,0)
(4,17,0)
(17,8,0)
(31,30,0)
(24,29,0)
(0,20,0)
(16,3,0)
(6,8,0)
(0,30,0)
(13,8,0)
(5,30,0)
(11,29,0)
(1,3,0)
(2,29,0)
(15,0,0)
(30,31,1)
(5,9,1)
(4,25,1)
(23,12,1)
(0,30,1)
(30,2,1)
(6,13,1)
(1,8,1)
(30,8,1)
(27,15,1)
(1,28,1)
(25,3,1)
(31,5,1)
(15,26,1)
(14,22,1)
(28,23,1)
(8,6,1)
(15,0,1)
(17,4,1)
(17,8,1)
(13,28,1)
(26,0,1)
(9,17,1)
(17,2,1)
(27,17,1)
(16,1,1)
(12,2,1)
(3,16,1)
(27,3,1)
(2,14,1)
(17,3,2)
(26,17,2)
(31,17,2)
(17,8,2)
(13,28,2)
(6,28,2)
(8,28,2)
(30,17,2)
(0,30,2)
(17,2,2)
(5,17,2)
(0,17,2)
(30,8,2)
(30,2,2)
(4,3,2)
(15,0,2)
(25,3,2)
(9,17,2)
(15,17,2)
-----------------------------------
(0,result = data * 2)
(1,GLOBAL_CONST_FIVE)
(2,data = \' \')
(3,GLOBAL_CONST_FIVE==5)
(4,0)
(5,data)
(6,CHAR_MAX)
(7,data = ' ')
(8,data = CHAR_MAX)
(9,result)
(10,if(data > 0)
(11,if(GLOBAL_CONST_FIVE==5)
(12,GLOBAL_CONST_FIVE)
(13,data)
(14,' ')
(15,printHexCharLine(result)
(16,5)
(17,data > 0)
(18,if(GLOBAL_CONST_FIVE==5)
(19,)
(20,)
(21,)
(22,data)
(23,5)
(24,data)
(25,data)
(26,result)
(27,RET)
(28,GLOBAL_CONST_FIVE==5)
(29,)
(30,data * 2)
(31,2)
(32,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^