-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_06_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_06_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_06_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_06_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(11,25,0)
(13,16,0)
(6,5,0)
(0,1,0)
(22,0,0)
(17,2,0)
(10,14,0)
(13,0,0)
(11,18,0)
(5,13,0)
(0,11,0)
(29,2,0)
(19,1,0)
(25,11,0)
(12,1,0)
(16,8,0)
(1,2,0)
(27,2,0)
(25,9,0)
(7,25,0)
(28,16,0)
(9,25,0)
(5,16,0)
(0,13,0)
(4,0,0)
(15,14,0)
(24,13,0)
(21,23,0)
(20,23,0)
(25,7,0)
(26,11,0)
(20,1,1)
(11,25,1)
(23,21,1)
(3,14,1)
(4,24,1)
(26,23,1)
(21,20,1)
(25,7,1)
(10,11,1)
(14,15,1)
(5,6,1)
(0,1,1)
(19,12,1)
(24,14,1)
(10,23,1)
(0,22,1)
(7,26,1)
(13,0,1)
(5,13,1)
(1,19,1)
(6,13,1)
(0,11,1)
(15,10,1)
(22,4,1)
(25,9,1)
(3,5,1)
(0,1,2)
(6,14,2)
(7,23,2)
(22,14,2)
(13,14,2)
(5,14,2)
(25,7,2)
(25,23,2)
(4,14,2)
(11,25,2)
(26,23,2)
(0,11,2)
(25,9,2)
(5,13,2)
(13,0,2)
(24,14,2)
(11,23,2)
(0,14,2)
-----------------------------------
(0,data * data)
(1,data = 0)
(2,)
(3,RET)
(4,data)
(5,printUnsignedLine(result)
(6,result)
(7,RAND32()
(8,)
(9,unsigned int)
(10,STATIC_CONST_FIVE)
(11,data = (unsigned int)
(12,data)
(13,result = data * data)
(14,STATIC_CONST_FIVE==5)
(15,5)
(16,)
(17,if(STATIC_CONST_FIVE==5)
(18,)
(19,0)
(20,STATIC_CONST_FIVE)
(21,5)
(22,data)
(23,STATIC_CONST_FIVE==5)
(24,result)
(25,(unsigned int)
(26,data)
(27,if(STATIC_CONST_FIVE==5)
(28,result)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^