-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_add_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        int64_t result = data + 1;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
31,32
32,33
36,37
37,38
37,39
38,39
42,43
42,44
44,45
44,46
44,47
44,48
44,49
44,50
45,46
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
67,68
68,69
68,70
69,70
-----nextToken-----
2,4,9,11,15,16,18,21,25,29,30,33,34,35,39,40,41,43,46,51,53,57,58,62,64,65,66,70,71,72
-----computeFrom-----
13,14
13,15
23,24
23,25
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_add_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_rand_add_15_bad()
CWE190_Integer_Overflow__int64_t_rand_add_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }
int64_t result = data + 1;
int64_t result = data + 1;
int64_t
int64_t
result = data + 1
result
= data + 1
data + 1
data
data
1
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(33,18,0)
(10,27,0)
(8,5,0)
(23,4,0)
(15,13,0)
(13,1,0)
(8,13,0)
(34,4,0)
(13,8,0)
(3,1,0)
(14,6,0)
(31,18,0)
(12,21,0)
(6,1,0)
(20,18,0)
(25,5,0)
(25,19,0)
(25,17,0)
(2,4,0)
(19,25,0)
(17,25,0)
(7,27,0)
(0,31,0)
(6,13,0)
(24,4,0)
(32,8,0)
(5,27,0)
(26,18,0)
(21,27,0)
(9,18,0)
(35,27,0)
(5,25,0)
(11,27,0)
(30,5,0)
(1,18,0)
(29,8,0)
(22,2,1)
(16,20,1)
(28,11,1)
(6,13,1)
(10,5,1)
(33,31,1)
(5,25,1)
(29,15,1)
(11,21,1)
(14,13,1)
(21,12,1)
(0,28,1)
(6,14,1)
(13,8,1)
(30,22,1)
(15,28,1)
(25,17,1)
(25,19,1)
(8,32,1)
(8,5,1)
(28,10,1)
(32,29,1)
(12,22,1)
(17,30,1)
(31,0,1)
(20,6,1)
(16,33,1)
(13,8,2)
(6,13,2)
(30,22,2)
(12,22,2)
(6,28,2)
(32,28,2)
(25,22,2)
(17,22,2)
(33,28,2)
(5,22,2)
(10,22,2)
(14,28,2)
(5,25,2)
(29,28,2)
(31,28,2)
(0,28,2)
(21,22,2)
(20,28,2)
(13,28,2)
(8,5,2)
(25,19,2)
(15,28,2)
(11,22,2)
(8,28,2)
(25,17,2)
-----------------------------------
(0,"Benign, fixed string")
(1,)
(2,L)
(3,result)
(4,)
(5,data = (int64_t)
(6,printLongLongLine(result)
(7,case 6:)
(8,data + 1)
(9,default:)
(10,break;)
(11,break;)
(12,"Benign, fixed string")
(13,result = data + 1)
(14,result)
(15,result)
(16,RET)
(17,RAND64()
(18,)
(19,int64_t)
(20,break;)
(21,printLine("Benign, fixed string")
(22,6)
(23,data)
(24,switch(7)
(25,(int64_t)
(26,case 7:)
(27,)
(28,7)
(29,data)
(30,data)
(31,printLine("Benign, fixed string")
(32,1)
(33,break;)
(34,switch(6)
(35,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^