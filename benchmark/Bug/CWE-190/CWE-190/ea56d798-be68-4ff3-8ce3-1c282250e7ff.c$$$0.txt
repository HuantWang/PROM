-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_18_bad()
{
    int64_t data;
    data = 0LL;
    goto source;
source:
    /* POTENTIAL FLAW: Use a random value */
    data = (int64_t)RAND64();
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
        int64_t result = data * 2;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
27,28
30,31
31,32
33,34
35,36
35,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,9,11,15,16,18,20,24,28,29,32,34,36,40,41,46,48,52,53,57,59
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
50,51
50,52
-----guardedBy-----
40,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_18_bad(){    int64_t data;    data = 0LL;    goto source;source:    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_18_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_18_bad
{    int64_t data;    data = 0LL;    goto source;source:    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
goto source;
source
source:    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();
source
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(0,22,0)
(14,8,0)
(6,4,0)
(18,6,0)
(8,11,0)
(1,4,0)
(4,6,0)
(8,14,0)
(3,25,0)
(5,7,0)
(8,22,0)
(9,7,0)
(13,7,0)
(24,7,0)
(17,6,0)
(11,8,0)
(21,7,0)
(22,7,0)
(22,8,0)
(3,4,0)
(12,7,0)
(4,25,0)
(23,0,0)
(10,25,0)
(16,7,0)
(2,3,0)
(15,22,0)
(20,0,0)
(6,22,0)
(6,17,1)
(23,5,1)
(1,0,1)
(4,6,1)
(2,4,1)
(8,14,1)
(5,22,1)
(19,0,1)
(12,16,1)
(22,8,1)
(19,3,1)
(8,11,1)
(6,22,1)
(18,1,1)
(3,4,1)
(17,18,1)
(20,23,1)
(15,12,1)
(0,22,1)
(0,20,1)
(11,15,1)
(3,2,1)
(6,22,2)
(4,0,2)
(3,0,2)
(2,0,2)
(17,0,2)
(6,0,2)
(22,8,2)
(8,11,2)
(4,6,2)
(18,0,2)
(3,4,2)
(1,0,2)
(0,22,2)
(8,14,2)
-----------------------------------
(0,data > 0)
(1,result)
(2,result)
(3,printLongLongLine(result)
(4,result = data * 2)
(5,goto sink;)
(6,data * 2)
(7,)
(8,(int64_t)
(9,if(data > 0)
(10,result)
(11,RAND64()
(12,goto source;)
(13,data)
(14,int64_t)
(15,data)
(16,L)
(17,2)
(18,data)
(19,RET)
(20,0)
(21,sink:)
(22,data = (int64_t)
(23,data)
(24,source:)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^