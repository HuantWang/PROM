-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_10_bad()
{
    char data;
    data = ' ';
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
30,33
31,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,34,37,39,42,46,48
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_10_bad(){    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_10_bad()
CWE190_Integer_Overflow__char_max_preinc_10_bad
{    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(13,14,0)
(1,21,0)
(14,22,0)
(20,22,0)
(9,22,0)
(8,11,0)
(5,22,0)
(17,1,0)
(0,11,0)
(24,1,0)
(19,0,0)
(4,15,0)
(2,24,0)
(16,14,0)
(24,11,0)
(0,1,0)
(0,14,0)
(18,24,0)
(15,24,0)
(3,1,0)
(11,7,0)
(24,14,0)
(15,11,0)
(3,17,1)
(19,6,1)
(14,13,1)
(24,1,1)
(2,0,1)
(10,15,1)
(15,24,1)
(18,2,1)
(12,14,1)
(13,16,1)
(24,14,1)
(24,18,1)
(15,4,1)
(17,12,1)
(0,14,1)
(10,6,1)
(0,19,1)
(6,12,1)
(4,24,1)
(1,3,1)
(6,1,1)
(0,1,1)
(24,6,2)
(0,6,2)
(24,1,2)
(24,14,2)
(15,6,2)
(0,1,2)
(19,6,2)
(1,12,2)
(0,14,2)
(4,6,2)
(3,12,2)
(18,6,2)
(17,12,2)
(15,24,2)
(2,6,2)
-----------------------------------
(0,++data)
(1,data = CHAR_MAX)
(2,result)
(3,CHAR_MAX)
(4,result)
(5,if(globalTrue)
(6,globalTrue)
(7,)
(8,result)
(9,data)
(10,RET)
(11,)
(12,globalTrue)
(13,' ')
(14,data = ' ')
(15,printHexCharLine(result)
(16,data)
(17,data)
(18,data)
(19,data)
(20,if(globalTrue)
(21,)
(22,)
(23,data = \' \')
(24,result = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^