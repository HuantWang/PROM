-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_connect_socket_postinc_65_bad()
{
    int data;
    /* define a function pointer */
    void (*funcPtr) (int) = CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
32,34
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
54,55
54,56
56,57
57,58
59,60
59,61
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
60,69
60,70
60,71
61,62
62,63
62,64
63,64
65,66
65,67
65,68
65,69
66,67
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
87,88
90,91
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
117,119
118,119
121,122
121,123
122,123
124,125
126,127
126,128
127,128
127,129
128,129
128,130
128,131
128,132
129,130
131,132
133,134
133,135
134,135
134,136
135,136
137,138
139,140
140,141
142,143
143,144
144,145
146,147
148,149
150,151
151,152
151,153
152,153
154,155
154,156
154,157
154,158
154,159
155,156
157,158
159,160
161,162
161,163
162,163
166,167
166,168
167,168
167,169
168,169
168,170
169,170
171,172
173,174
173,175
174,175
177,178
179,180
180,181
180,182
181,182
181,183
182,183
184,185
187,188
188,189
188,190
189,190
191,192
191,193
192,193
194,195
197,198
197,199
198,199
198,200
199,200
201,202
203,204
204,205
205,206
205,207
206,207
208,209
210,211
211,212
211,213
212,213
214,215
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,35,39,41,45,47,50,53,55,58,64,67,69,71,73,77,79,81,85,88,89,93,98,99,101,107,108,109,112,114,119,120,123,125,130,132,136,138,141,145,147,149,153,156,158,160,163,164,165,170,172,175,176,178,183,185,186,190,193,195,196,200,202,207,209,213,215
-----computeFrom-----
26,27
26,28
62,63
62,64
75,76
75,77
95,96
95,97
103,104
103,105
116,117
116,118
127,128
127,129
151,152
151,153
161,162
161,163
167,168
167,169
168,169
168,170
173,174
173,175
180,181
180,182
188,189
188,190
198,199
198,200
-----guardedBy-----
200,209
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_connect_socket_postinc_65_bad(){    int data;    /* define a function pointer */    void (*funcPtr) (int) = CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE190_Integer_Overflow__int_connect_socket_postinc_65_bad()
CWE190_Integer_Overflow__int_connect_socket_postinc_65_bad
{    int data;    /* define a function pointer */    void (*funcPtr) (int) = CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
int data;
int data;
int
data
data
void (*funcPtr) (int) = CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink;
void (*funcPtr) (int) = CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink;
void
(*funcPtr) (int) = CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink
*funcPtr
*
funcPtr
int
int


= CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink
CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink
CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(89,131,0)
(74,57,0)
(0,122,0)
(1,28,0)
(97,22,0)
(39,116,0)
(119,94,0)
(11,37,0)
(124,101,0)
(27,25,0)
(65,52,0)
(90,63,0)
(64,34,0)
(117,102,0)
(128,34,0)
(26,124,0)
(117,14,0)
(124,26,0)
(71,61,0)
(124,50,0)
(12,85,0)
(101,68,0)
(43,94,0)
(123,4,0)
(47,40,0)
(102,132,0)
(113,30,0)
(28,52,0)
(31,65,0)
(91,16,0)
(69,110,0)
(14,110,0)
(79,83,0)
(103,116,0)
(101,124,0)
(99,110,0)
(131,89,0)
(77,81,0)
(87,22,0)
(67,61,0)
(104,132,0)
(81,57,0)
(50,124,0)
(94,89,0)
(52,28,0)
(57,81,0)
(25,118,0)
(108,90,0)
(44,132,0)
(109,132,0)
(56,43,0)
(17,63,0)
(3,131,0)
(98,132,0)
(41,132,0)
(23,17,0)
(114,118,0)
(107,110,0)
(55,82,0)
(122,129,0)
(4,30,0)
(132,63,0)
(45,122,0)
(9,127,0)
(107,15,0)
(22,87,0)
(54,117,0)
(78,117,0)
(35,114,0)
(70,132,0)
(101,14,0)
(83,87,0)
(6,87,0)
(46,22,0)
(8,110,0)
(24,129,0)
(28,129,0)
(65,129,0)
(80,118,0)
(14,16,0)
(84,6,0)
(59,57,0)
(32,99,0)
(57,129,0)
(129,110,0)
(17,116,0)
(125,82,0)
(121,102,0)
(16,14,0)
(57,14,0)
(42,81,0)
(87,6,0)
(118,114,0)
(7,70,0)
(19,70,0)
(68,101,0)
(30,4,0)
(88,132,0)
(92,101,0)
(101,92,0)
(118,110,0)
(20,132,0)
(34,14,0)
(53,68,0)
(36,110,0)
(93,102,0)
(62,63,0)
(66,90,0)
(75,43,0)
(126,92,0)
(87,83,0)
(82,107,0)
(100,127,0)
(52,65,0)
(112,16,0)
(33,110,0)
(73,13,0)
(72,51,0)
(95,132,0)
(86,26,0)
(93,14,0)
(15,107,0)
(118,25,0)
(122,29,0)
(38,28,0)
(106,93,0)
(29,110,0)
(2,14,0)
(49,63,0)
(129,57,0)
(76,16,0)
(61,99,0)
(105,102,0)
(30,110,0)
(96,132,0)
(111,57,0)
(10,65,0)
(116,63,0)
(17,30,0)
(18,15,0)
(89,110,0)
(127,110,0)
(48,29,0)
(94,43,0)
(93,21,0)
(5,101,0)
(38,65,1)
(11,83,1)
(106,117,1)
(102,105,1)
(42,74,1)
(78,73,1)
(118,114,1)
(100,9,1)
(28,1,1)
(83,79,1)
(87,22,1)
(15,18,1)
(129,57,1)
(23,47,1)
(22,97,1)
(57,81,1)
(83,87,1)
(1,38,1)
(78,72,1)
(78,60,1)
(18,82,1)
(93,106,1)
(55,125,1)
(125,89,1)
(3,94,1)
(131,3,1)
(127,100,1)
(67,71,1)
(108,66,1)
(73,92,1)
(46,102,1)
(97,46,1)
(61,67,1)
(122,0,1)
(75,56,1)
(68,53,1)
(14,16,1)
(64,128,1)
(94,43,1)
(48,122,1)
(32,61,1)
(80,25,1)
(105,121,1)
(89,131,1)
(39,103,1)
(60,30,1)
(10,129,1)
(124,26,1)
(59,24,1)
(119,43,1)
(107,15,1)
(24,92,1)
(117,54,1)
(121,70,1)
(17,30,1)
(92,126,1)
(118,25,1)
(52,28,1)
(6,84,1)
(71,118,1)
(101,124,1)
(34,14,1)
(52,65,1)
(4,123,1)
(28,129,1)
(92,101,1)
(79,87,1)
(78,11,1)
(25,27,1)
(76,112,1)
(82,55,1)
(128,14,1)
(93,102,1)
(101,14,1)
(91,76,1)
(7,116,1)
(57,111,1)
(122,129,1)
(58,17,1)
(9,83,1)
(65,129,1)
(74,59,1)
(57,14,1)
(30,4,1)
(65,31,1)
(19,7,1)
(34,64,1)
(126,101,1)
(46,60,1)
(56,99,1)
(23,115,1)
(81,77,1)
(124,50,1)
(2,127,1)
(0,45,1)
(78,12,1)
(90,108,1)
(12,34,1)
(93,14,1)
(16,91,1)
(115,93,1)
(87,6,1)
(27,34,1)
(43,75,1)
(72,52,1)
(47,115,1)
(53,124,1)
(5,107,1)
(103,90,1)
(111,81,1)
(101,68,1)
(86,5,1)
(113,29,1)
(114,35,1)
(94,119,1)
(35,80,1)
(123,113,1)
(26,86,1)
(84,22,1)
(54,78,1)
(117,102,1)
(45,52,1)
(77,42,1)
(117,14,1)
(17,116,1)
(70,19,1)
(116,39,1)
(17,23,1)
(115,117,1)
(29,48,1)
(99,32,1)
(112,2,1)
(31,10,1)
(45,52,2)
(52,28,2)
(124,26,2)
(93,102,2)
(94,34,2)
(43,34,2)
(57,81,2)
(118,114,2)
(77,92,2)
(74,92,2)
(101,124,2)
(89,131,2)
(131,34,2)
(14,16,2)
(129,92,2)
(65,129,2)
(64,83,2)
(87,6,2)
(14,83,2)
(83,60,2)
(4,52,2)
(129,57,2)
(61,34,2)
(89,34,2)
(123,52,2)
(125,34,2)
(119,34,2)
(65,92,2)
(30,4,2)
(83,87,2)
(117,14,2)
(48,52,2)
(86,34,2)
(34,14,2)
(6,60,2)
(106,117,2)
(47,115,2)
(73,92,2)
(11,83,2)
(3,34,2)
(60,52,2)
(113,52,2)
(118,34,2)
(107,34,2)
(124,34,2)
(111,92,2)
(18,34,2)
(107,15,2)
(34,83,2)
(35,34,2)
(28,65,2)
(93,14,2)
(0,52,2)
(92,34,2)
(46,60,2)
(87,60,2)
(117,102,2)
(81,92,2)
(79,60,2)
(24,92,2)
(10,92,2)
(17,116,2)
(80,34,2)
(97,60,2)
(30,52,2)
(92,101,2)
(122,129,2)
(128,83,2)
(32,34,2)
(57,92,2)
(12,34,2)
(28,129,2)
(122,52,2)
(42,92,2)
(57,14,2)
(118,25,2)
(52,65,2)
(25,34,2)
(76,83,2)
(53,34,2)
(101,34,2)
(94,43,2)
(38,65,2)
(15,34,2)
(93,117,2)
(27,34,2)
(75,34,2)
(82,34,2)
(68,34,2)
(101,68,2)
(72,52,2)
(5,34,2)
(31,92,2)
(87,22,2)
(114,34,2)
(112,83,2)
(71,34,2)
(1,65,2)
(17,30,2)
(124,50,2)
(126,34,2)
(99,34,2)
(16,83,2)
(100,83,2)
(52,92,2)
(55,34,2)
(56,34,2)
(84,60,2)
(67,34,2)
(29,52,2)
(9,83,2)
(91,83,2)
(101,14,2)
(127,83,2)
(22,60,2)
(2,83,2)
(59,92,2)
(26,34,2)
-----------------------------------
(0,recvResult)
(1,0)
(2,connectSocket)
(3,IP_ADDRESS)
(4,atoi(inputBuffer)
(5,connectSocket)
(6,&wsaData)
(7,wsaDataInit)
(8,if (connectSocket == INVALID_SOCKET)
(9,wsaDataInit)
(10,recvResult)
(11,break;)
(12,break;)
(13,)
(14,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(15,htons(TCP_PORT)
(16,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(17,funcPtr(data)
(18,TCP_PORT)
(19,0)
(20,if (connectSocket != INVALID_SOCKET)
(21,)
(22,MAKEWORD(2,2)
(23,data)
(24,recvResult)
(25,&service)
(26,&service)
(27,service)
(28,recvResult == 0)
(29,inputBuffer[recvResult] = '\\\\0')
(30,data = atoi(inputBuffer)
(31,SOCKET_ERROR)
(32,AF_INET)
(33,if (WSAStartup(MAKEWORD(2,2)
(34,connectSocket == INVALID_SOCKET)
(35,service)
(36,if (recvResult == SOCKET_ERROR || recvResult == 0)
(37,)
(38,recvResult)
(39,0)
(40,)
(41,if (wsaDataInit)
(42,CHAR_ARRAY_SIZE)
(43,service.sin_addr)
(44,do)
(45,inputBuffer)
(46,2)
(47,WSACleanup()
(48,'\\\\0')
(49,data)
(50,struct sockaddr*)
(51,)
(52,recvResult == SOCKET_ERROR || recvResult == 0)
(53,service)
(54,INVALID_SOCKET)
(55,sin_port)
(56,service)
(57,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(58,RET)
(59,connectSocket)
(60,0)
(61,service.sin_family)
(62,funcPtr)
(63,)
(64,INVALID_SOCKET)
(65,recvResult == SOCKET_ERROR)
(66,funcPtr)
(67,sin_family)
(68,sizeof(service)
(69,if (connect(connectSocket, (struct sockaddr*)
(70,wsaDataInit = 0)
(71,service)
(72,break;)
(73,break;)
(74,inputBuffer)
(75,sin_addr)
(76,SOCK_STREAM)
(77,1)
(78,connectSocket)
(79,NO_ERROR)
(80,0)
(81,CHAR_ARRAY_SIZE - 1)
(82,service.sin_port)
(83,WSAStartup(MAKEWORD(2,2)
(84,wsaData)
(85,)
(86,service)
(87,WSAStartup(MAKEWORD(2,2)
(88,wsaDataInit)
(89,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(90,(*funcPtr)
(91,IPPROTO_TCP)
(92,connect(connectSocket, (struct sockaddr*)
(93,CLOSE_SOCKET(connectSocket)
(94,service.sin_addr.s_addr)
(95,service)
(96,inputBuffer)
(97,2)
(98,wsaData)
(99,service.sin_family = AF_INET)
(100,1)
(101,connect(connectSocket, (struct sockaddr*)
(102,connectSocket = INVALID_SOCKET)
(103,data)
(104,recvResult)
(105,INVALID_SOCKET)
(106,connectSocket)
(107,service.sin_port = htons(TCP_PORT)
(108,CWE190_Integer_Overflow__int_connect_socket_postinc_65b_badSink)
(109,connectSocket)
(110,)
(111,0)
(112,AF_INET)
(113,data)
(114,sizeof(service)
(115,wsaDataInit)
(116,data = 0)
(117,connectSocket != INVALID_SOCKET)
(118,memset(&service, 0, sizeof(service)
(119,s_addr)
(120,inputBuffer[recvResult] = \'\\\\0\')
(121,connectSocket)
(122,inputBuffer[recvResult])
(123,inputBuffer)
(124,(struct sockaddr*)
(125,service)
(126,SOCKET_ERROR)
(127,wsaDataInit = 1)
(128,connectSocket)
(129,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(130,\'\\\\0\')
(131,inet_addr(IP_ADDRESS)
(132,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^