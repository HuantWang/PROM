-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
82,83
82,84
84,85
85,86
85,87
86,87
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,77,81,83,87,88,92,94
-----computeFrom-----
32,33
32,34
57,58
57,59
74,75
74,76
85,86
85,87
-----guardedBy-----
76,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }    {        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_32_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }    {        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,43,0)
(45,43,0)
(2,0,0)
(6,15,0)
(38,39,0)
(20,13,0)
(40,30,0)
(49,24,0)
(12,21,0)
(34,23,0)
(41,23,0)
(47,33,0)
(39,29,0)
(7,31,0)
(39,38,0)
(35,12,0)
(6,13,0)
(21,15,0)
(30,14,0)
(32,6,0)
(33,41,0)
(43,29,0)
(22,1,0)
(3,13,0)
(26,14,0)
(24,1,0)
(19,25,0)
(41,30,0)
(14,25,0)
(23,29,0)
(8,28,0)
(21,43,0)
(24,31,0)
(42,49,0)
(36,1,0)
(37,29,0)
(10,28,0)
(15,0,0)
(5,15,0)
(46,41,0)
(11,21,0)
(1,24,0)
(28,29,0)
(49,31,0)
(27,24,0)
(14,29,0)
(18,29,0)
(12,39,0)
(30,41,0)
(0,39,0)
(15,43,0)
(4,39,0)
(48,29,0)
(1,41,0)
(25,14,0)
(9,23,0)
(13,6,0)
(17,33,0)
(0,15,0)
(44,38,0)
(8,10,1)
(0,39,1)
(16,33,1)
(12,39,1)
(33,17,1)
(49,24,1)
(19,26,1)
(36,27,1)
(47,41,1)
(42,24,1)
(27,33,1)
(35,13,1)
(24,1,1)
(40,46,1)
(6,32,1)
(39,38,1)
(41,30,1)
(14,25,1)
(1,41,1)
(11,12,1)
(5,28,1)
(6,15,1)
(46,21,1)
(22,36,1)
(30,14,1)
(12,35,1)
(1,22,1)
(17,47,1)
(21,11,1)
(13,6,1)
(25,19,1)
(33,41,1)
(32,20,1)
(26,39,1)
(44,4,1)
(30,40,1)
(49,42,1)
(2,5,1)
(15,0,1)
(28,8,1)
(0,2,1)
(20,3,1)
(38,44,1)
(16,49,1)
(21,15,1)
(3,15,1)
(10,14,1)
(42,33,2)
(0,39,2)
(36,33,2)
(24,33,2)
(49,24,2)
(1,33,2)
(14,25,2)
(13,6,2)
(6,15,2)
(30,14,2)
(39,38,2)
(1,41,2)
(49,33,2)
(21,15,2)
(15,0,2)
(22,33,2)
(12,39,2)
(33,41,2)
(27,33,2)
(41,30,2)
(24,1,2)
-----------------------------------
(0,*dataPtr1)
(1,data * 2)
(2,dataPtr1)
(3,stdin)
(4,dataPtr1)
(5,data)
(6,&data)
(7,result)
(8,0)
(9,data)
(10,data)
(11,data)
(12,*dataPtr1)
(13,fscanf(stdin, "%d", &data)
(14,*dataPtr2 = &data)
(15,data = *dataPtr1)
(16,RET)
(17,0)
(18,dataPtr1)
(19,data)
(20,"%d")
(21,*dataPtr1 = data)
(22,2)
(23,)
(24,result = data * 2)
(25,&data)
(26,dataPtr2)
(27,result)
(28,data = 0)
(29,)
(30,*dataPtr2)
(31,)
(32,data)
(33,data > 0)
(34,if(data > 0)
(35,dataPtr1)
(36,data)
(37,dataPtr2)
(38,&data)
(39,*dataPtr1 = &data)
(40,dataPtr2)
(41,data = *dataPtr2)
(42,result)
(43,)
(44,data)
(45,data)
(46,data)
(47,data)
(48,data)
(49,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^