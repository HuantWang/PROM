-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
58,60
59,60
60,61
60,62
62,63
62,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,48,49,52,53,56,61,63,67,69,73,75
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
46,47
46,48
50,51
50,52
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_17_bad()
CWE190_Integer_Overflow__int_rand_square_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(6,31,0)
(20,6,0)
(8,16,0)
(12,26,0)
(5,18,0)
(9,35,0)
(33,31,0)
(19,18,0)
(37,5,0)
(15,1,0)
(29,26,0)
(9,32,0)
(10,16,0)
(17,29,0)
(27,36,0)
(7,16,0)
(13,5,0)
(21,18,0)
(2,16,0)
(39,24,0)
(25,0,0)
(26,29,0)
(0,1,0)
(6,26,0)
(24,1,0)
(3,0,0)
(36,16,0)
(32,9,0)
(4,29,0)
(29,36,0)
(38,9,0)
(26,31,0)
(29,9,0)
(31,11,0)
(22,16,0)
(14,19,0)
(28,36,0)
(30,18,0)
(34,1,0)
(37,18,1)
(3,25,1)
(24,39,1)
(30,36,1)
(25,1,1)
(38,5,1)
(15,34,1)
(29,36,1)
(0,1,1)
(29,4,1)
(18,21,1)
(29,9,1)
(5,13,1)
(0,3,1)
(37,19,1)
(32,38,1)
(12,0,1)
(21,30,1)
(26,29,1)
(1,15,1)
(39,6,1)
(19,14,1)
(25,24,1)
(13,37,1)
(20,26,1)
(23,0,1)
(34,5,1)
(6,26,1)
(4,17,1)
(24,1,1)
(9,32,1)
(36,28,1)
(6,20,1)
(19,18,1)
(28,27,1)
(17,12,1)
(14,9,1)
(5,18,1)
(0,1,2)
(19,5,2)
(20,0,2)
(17,0,2)
(6,0,2)
(12,0,2)
(9,5,2)
(6,26,2)
(25,0,2)
(24,0,2)
(3,0,2)
(29,0,2)
(26,0,2)
(5,5,2)
(38,5,2)
(32,5,2)
(39,0,2)
(13,5,2)
(26,29,2)
(14,5,2)
(5,18,2)
(4,0,2)
(24,1,2)
(37,5,2)
(9,32,2)
(19,18,2)
(0,0,2)
(29,9,2)
(29,36,2)
-----------------------------------
(0,j < 1)
(1,j = 0)
(2,for(i = 0; i < 1; i++)
(3,1)
(4,data)
(5,i < 1)
(6,printIntLine(result)
(7,for(j = 0; j < 1; j++)
(8,j)
(9,data = RAND32()
(10,data)
(11,)
(12,result)
(13,1)
(14,i)
(15,0)
(16,)
(17,data)
(18,i = 0)
(19,i++)
(20,result)
(21,0)
(22,i)
(23,RET)
(24,j++)
(25,j)
(26,result = data * data)
(27,data)
(28,0)
(29,data * data)
(30,i)
(31,)
(32,RAND32()
(33,result)
(34,j)
(35,)
(36,data = 0)
(37,i)
(38,data)
(39,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^