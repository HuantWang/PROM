-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_02_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
24,25
26,27
26,28
28,29
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,25,27,32,33,37,39,43,44,48,50
-----computeFrom-----
12,13
12,14
20,21
20,22
30,31
30,32
41,42
41,43
-----guardedBy-----
32,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_02_bad(){    int data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_02_bad()
CWE190_Integer_Overflow__int_rand_multiply_02_bad
{    int data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,4,0)
(25,22,0)
(2,8,0)
(22,1,0)
(1,22,0)
(3,8,0)
(19,26,0)
(12,17,0)
(24,2,0)
(7,8,0)
(15,17,0)
(15,26,0)
(23,2,0)
(20,26,0)
(9,18,0)
(0,15,0)
(26,22,0)
(6,18,0)
(27,17,0)
(8,18,0)
(2,22,0)
(27,15,0)
(16,18,0)
(26,15,0)
(14,27,0)
(5,13,0)
(26,8,0)
(3,7,1)
(21,2,1)
(1,25,1)
(2,8,1)
(11,10,1)
(26,19,1)
(21,27,1)
(0,2,1)
(25,10,1)
(26,8,1)
(15,26,1)
(2,24,1)
(10,8,1)
(8,3,1)
(20,0,1)
(21,11,1)
(24,23,1)
(26,22,1)
(27,14,1)
(11,22,1)
(19,20,1)
(2,22,1)
(14,15,1)
(27,15,1)
(23,11,1)
(22,1,1)
(23,11,2)
(20,2,2)
(26,8,2)
(2,22,2)
(15,2,2)
(14,2,2)
(1,10,2)
(22,1,2)
(15,26,2)
(25,10,2)
(27,15,2)
(0,2,2)
(27,2,2)
(2,8,2)
(26,2,2)
(26,22,2)
(22,10,2)
(24,11,2)
(19,2,2)
(2,11,2)
-----------------------------------
(0,result)
(1,RAND32()
(2,data > 0)
(3,0)
(4,)
(5,if(data > 0)
(6,if(1)
(7,data)
(8,data = 0)
(9,if(1)
(10,1)
(11,1)
(12,result)
(13,)
(14,result)
(15,result = data * 2)
(16,data)
(17,)
(18,)
(19,2)
(20,data)
(21,RET)
(22,data = RAND32()
(23,data)
(24,0)
(25,data)
(26,data * 2)
(27,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^