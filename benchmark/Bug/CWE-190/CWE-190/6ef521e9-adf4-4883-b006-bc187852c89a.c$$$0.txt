-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_14_bad()
{
    short data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,43,47,49,53,54,58,60
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
40,41
40,42
51,52
51,53
-----guardedBy-----
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_14_bad(){    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_14_bad()
CWE190_Integer_Overflow__short_rand_multiply_14_bad
{    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,11,0)
(8,26,0)
(8,10,0)
(23,18,0)
(9,20,0)
(4,3,0)
(14,2,0)
(3,8,0)
(32,20,0)
(11,28,0)
(28,30,0)
(30,20,0)
(29,16,0)
(15,1,0)
(27,8,0)
(5,28,0)
(25,2,0)
(10,8,0)
(30,28,0)
(28,16,0)
(10,22,0)
(6,13,0)
(22,10,0)
(3,20,0)
(30,8,0)
(21,30,0)
(0,1,0)
(11,16,0)
(24,10,0)
(33,3,0)
(31,13,0)
(20,2,0)
(10,24,0)
(17,2,0)
(19,30,0)
(10,22,1)
(3,4,1)
(33,13,1)
(30,20,1)
(31,1,1)
(11,28,1)
(5,3,1)
(22,27,1)
(13,6,1)
(10,24,1)
(21,19,1)
(1,15,1)
(11,12,1)
(7,3,1)
(6,31,1)
(3,8,1)
(0,20,1)
(4,33,1)
(30,21,1)
(20,32,1)
(30,8,1)
(19,5,1)
(7,11,1)
(12,28,1)
(15,0,1)
(28,30,1)
(32,9,1)
(27,1,1)
(8,10,1)
(7,13,1)
(3,20,1)
(31,8,1)
(30,8,2)
(22,1,2)
(10,24,2)
(30,3,2)
(11,28,2)
(3,13,2)
(28,3,2)
(30,20,2)
(8,1,2)
(27,1,2)
(5,3,2)
(4,13,2)
(3,8,2)
(10,1,2)
(19,3,2)
(10,22,2)
(11,3,2)
(8,10,2)
(3,20,2)
(21,3,2)
(33,13,2)
(28,30,2)
(12,3,2)
-----------------------------------
(0,globalFive)
(1,globalFive==5)
(2,)
(3,data > 0)
(4,0)
(5,result)
(6,5)
(7,RET)
(8,data = (short)
(9,data)
(10,(short)
(11,printIntLine(result)
(12,result)
(13,globalFive==5)
(14,data)
(15,5)
(16,)
(17,if(globalFive==5)
(18,)
(19,data)
(20,data = 0)
(21,2)
(22,RAND32()
(23,if(data > 0)
(24,short)
(25,if(globalFive==5)
(26,)
(27,data)
(28,result = data * 2)
(29,result)
(30,data * 2)
(31,globalFive)
(32,0)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^