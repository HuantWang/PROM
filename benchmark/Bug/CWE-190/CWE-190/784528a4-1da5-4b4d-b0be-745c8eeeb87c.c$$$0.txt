-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_preinc_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            ++data;
            short result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
43,46
44,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,47,50,52,55,59,61,66,68,73,76,78,81,85,87,92,93
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
64,65
64,66
-----guardedBy-----
66,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_preinc_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_rand_preinc_12_bad()
CWE190_Integer_Overflow__short_rand_preinc_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            ++data;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(43,11,0)
(43,2,0)
(33,6,0)
(23,2,0)
(27,12,0)
(27,35,0)
(34,42,0)
(29,11,0)
(7,12,0)
(32,44,0)
(24,27,0)
(41,35,0)
(3,2,0)
(19,6,0)
(26,41,0)
(39,27,0)
(10,36,0)
(42,15,0)
(39,12,0)
(41,30,0)
(30,40,0)
(18,43,0)
(16,35,0)
(15,42,0)
(3,35,0)
(42,34,0)
(46,30,0)
(7,35,0)
(45,41,0)
(7,30,0)
(5,6,0)
(38,11,0)
(11,2,0)
(11,35,0)
(28,27,0)
(21,7,0)
(42,35,0)
(12,13,0)
(20,12,0)
(36,6,0)
(11,30,0)
(37,3,0)
(27,30,0)
(8,36,0)
(0,4,0)
(35,42,0)
(14,0,0)
(35,1,0)
(22,39,0)
(3,30,0)
(17,30,0)
(0,14,1)
(27,35,1)
(25,43,1)
(41,35,1)
(42,15,1)
(30,17,1)
(36,8,1)
(16,9,1)
(7,21,1)
(27,28,1)
(43,18,1)
(22,27,1)
(37,41,1)
(39,27,1)
(27,30,1)
(8,10,1)
(11,30,1)
(42,34,1)
(14,41,1)
(28,24,1)
(25,39,1)
(46,9,1)
(3,35,1)
(3,37,1)
(38,3,1)
(11,29,1)
(24,7,1)
(7,35,1)
(18,11,1)
(3,30,1)
(7,30,1)
(45,31,1)
(15,16,1)
(35,42,1)
(21,31,1)
(25,0,1)
(31,35,1)
(43,11,1)
(39,22,1)
(41,30,1)
(11,35,1)
(17,46,1)
(41,26,1)
(31,30,1)
(9,36,1)
(26,45,1)
(29,38,1)
(37,41,2)
(3,30,2)
(15,9,2)
(43,41,2)
(43,11,2)
(41,31,2)
(7,30,2)
(39,27,2)
(35,42,2)
(14,41,2)
(41,30,2)
(26,31,2)
(35,9,2)
(30,9,2)
(17,9,2)
(0,41,2)
(16,9,2)
(21,31,2)
(27,31,2)
(45,31,2)
(39,31,2)
(29,41,2)
(7,31,2)
(42,9,2)
(22,31,2)
(42,15,2)
(7,35,2)
(18,41,2)
(3,35,2)
(11,35,2)
(46,9,2)
(42,34,2)
(38,41,2)
(41,35,2)
(11,41,2)
(28,31,2)
(3,41,2)
(11,30,2)
(24,31,2)
(27,35,2)
(27,30,2)
-----------------------------------
(0,printLine("data value is too large to perform arithmetic safely.")
(1,)
(2,)
(3,++data)
(4,)
(5,if(globalReturnsTrueOrFalse()
(6,)
(7,++data)
(8,0)
(9,globalReturnsTrueOrFalse()
(10,data)
(11,result = data)
(12,)
(13,)
(14,"data value is too large to perform arithmetic safely.")
(15,RAND32()
(16,data)
(17,2)
(18,result)
(19,if(globalReturnsTrueOrFalse()
(20,result)
(21,data)
(22,result)
(23,result)
(24,result)
(25,RET)
(26,SHRT_MAX)
(27,result = data)
(28,data)
(29,data)
(30,data = 2)
(31,globalReturnsTrueOrFalse()
(32,if (data < SHRT_MAX)
(33,data)
(34,short)
(35,data = (short)
(36,data = 0)
(37,data)
(38,result)
(39,printIntLine(result)
(40,)
(41,data < SHRT_MAX)
(42,(short)
(43,printIntLine(result)
(44,)
(45,data)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^