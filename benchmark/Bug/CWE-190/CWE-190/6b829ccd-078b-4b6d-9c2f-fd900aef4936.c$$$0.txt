-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,44,48,50,54,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
52,53
52,54
-----guardedBy-----
43,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_max_multiply_15_bad()
CWE190_Integer_Overflow__int_max_multiply_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(5,0,0)
(10,23,0)
(22,27,0)
(11,0,0)
(35,12,0)
(38,27,0)
(4,27,0)
(11,33,0)
(18,0,0)
(9,3,0)
(21,27,0)
(17,24,0)
(31,23,0)
(36,23,0)
(6,36,0)
(28,23,0)
(32,3,0)
(16,12,0)
(13,23,0)
(26,11,0)
(5,24,0)
(34,1,0)
(2,27,0)
(39,33,0)
(0,5,0)
(0,33,0)
(25,5,0)
(12,24,0)
(24,3,0)
(19,1,0)
(7,27,0)
(8,3,0)
(5,1,0)
(30,5,0)
(29,7,0)
(20,24,0)
(12,1,0)
(1,23,0)
(4,7,1)
(16,35,1)
(26,0,1)
(34,19,1)
(14,24,1)
(12,1,1)
(31,1,1)
(1,34,1)
(22,11,1)
(35,15,1)
(12,16,1)
(24,17,1)
(37,22,1)
(11,26,1)
(19,14,1)
(25,18,1)
(5,30,1)
(13,36,1)
(36,6,1)
(5,1,1)
(29,15,1)
(0,5,1)
(22,12,1)
(11,0,1)
(6,14,1)
(12,24,1)
(17,20,1)
(18,12,1)
(5,24,1)
(30,25,1)
(7,29,1)
(15,13,1)
(37,4,1)
(15,31,1)
(6,14,2)
(12,1,2)
(0,5,2)
(22,15,2)
(18,12,2)
(25,12,2)
(19,14,2)
(26,12,2)
(35,15,2)
(5,12,2)
(5,1,2)
(34,14,2)
(30,12,2)
(12,15,2)
(1,14,2)
(16,15,2)
(5,24,2)
(0,12,2)
(11,0,2)
(4,15,2)
(11,12,2)
(13,14,2)
(29,15,2)
(31,14,2)
(12,24,2)
(7,15,2)
(36,14,2)
-----------------------------------
(0,result = data * 2)
(1,data = INT_MAX)
(2,if(data > 0)
(3,)
(4,break;)
(5,data * 2)
(6,"Benign, fixed string")
(7,printLine("Benign, fixed string")
(8,data)
(9,switch(6)
(10,case 6:)
(11,printIntLine(result)
(12,data > 0)
(13,break;)
(14,6)
(15,7)
(16,0)
(17,0)
(18,result)
(19,data)
(20,data)
(21,case 7:)
(22,break;)
(23,)
(24,data = 0)
(25,data)
(26,result)
(27,)
(28,default:)
(29,"Benign, fixed string")
(30,2)
(31,break;)
(32,switch(7)
(33,)
(34,INT_MAX)
(35,data)
(36,printLine("Benign, fixed string")
(37,RET)
(38,default:)
(39,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^