-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_02_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
29,30
29,31
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_02_bad(){    int data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_02_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_02_bad
{    int data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,19,0)
(28,3,0)
(22,28,0)
(23,13,0)
(14,16,0)
(6,2,0)
(24,3,0)
(11,4,0)
(0,11,0)
(7,15,0)
(3,15,0)
(1,15,0)
(2,11,0)
(13,18,0)
(29,4,0)
(10,11,0)
(28,11,0)
(3,28,0)
(1,3,0)
(27,28,0)
(13,2,0)
(8,13,0)
(12,4,0)
(21,4,0)
(5,19,0)
(2,13,0)
(17,1,0)
(19,11,0)
(5,20,1)
(3,28,1)
(25,26,1)
(2,6,1)
(9,25,1)
(9,1,1)
(20,25,1)
(19,11,1)
(25,13,1)
(17,3,1)
(19,5,1)
(9,19,1)
(13,2,1)
(26,11,1)
(1,3,1)
(27,22,1)
(24,19,1)
(2,11,1)
(22,24,1)
(23,8,1)
(8,26,1)
(28,11,1)
(28,27,1)
(0,10,1)
(11,0,1)
(6,23,1)
(1,17,1)
(8,26,2)
(19,25,2)
(13,2,2)
(28,11,2)
(17,19,2)
(24,19,2)
(5,25,2)
(23,26,2)
(2,26,2)
(28,19,2)
(22,19,2)
(3,19,2)
(27,19,2)
(2,11,2)
(3,28,2)
(19,11,2)
(6,26,2)
(1,3,2)
(13,26,2)
(20,25,2)
(1,19,2)
-----------------------------------
(0,0)
(1,printIntLine(result)
(2,&data)
(3,result = data * 2)
(4,)
(5,0)
(6,data)
(7,result)
(8,stdin)
(9,RET)
(10,data)
(11,data = 0)
(12,if(1)
(13,fscanf(stdin, "%d", &data)
(14,if(data > 0)
(15,)
(16,)
(17,result)
(18,)
(19,data > 0)
(20,data)
(21,if(1)
(22,data)
(23,"%d")
(24,result)
(25,1)
(26,1)
(27,2)
(28,data * 2)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^