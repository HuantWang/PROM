-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_14_bad()
{
    unsigned int data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_14_bad(){    unsigned int data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_14_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_14_bad
{    unsigned int data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(5,8,0)
(23,28,0)
(28,19,0)
(8,28,0)
(2,12,0)
(20,12,0)
(17,2,0)
(19,4,0)
(25,13,0)
(27,13,0)
(9,13,0)
(6,28,0)
(18,0,0)
(22,2,0)
(7,23,0)
(12,13,0)
(24,0,0)
(23,12,0)
(15,29,0)
(3,23,0)
(14,19,0)
(1,17,0)
(10,12,0)
(21,29,0)
(26,17,0)
(17,16,0)
(28,23,0)
(2,17,0)
(8,19,0)
(11,8,1)
(2,12,1)
(21,12,1)
(17,2,1)
(24,17,1)
(8,5,1)
(20,10,1)
(28,23,1)
(15,21,1)
(18,24,1)
(22,1,1)
(6,0,1)
(12,20,1)
(3,6,1)
(8,28,1)
(0,18,1)
(11,0,1)
(29,15,1)
(5,28,1)
(23,7,1)
(23,12,1)
(26,29,1)
(24,29,1)
(7,3,1)
(1,26,1)
(2,22,1)
(23,12,2)
(6,0,2)
(8,28,2)
(26,29,2)
(22,29,2)
(2,12,2)
(5,0,2)
(8,0,2)
(17,29,2)
(3,0,2)
(7,0,2)
(2,29,2)
(17,2,2)
(28,23,2)
(28,0,2)
(23,0,2)
(1,29,2)
-----------------------------------
(0,globalFive==5)
(1,"%u")
(2,&data)
(3,data)
(4,)
(5,result)
(6,result)
(7,data)
(8,printUnsignedLine(result)
(9,if(globalFive==5)
(10,data)
(11,RET)
(12,data = 0)
(13,)
(14,result)
(15,5)
(16,)
(17,fscanf (stdin, "%u", &data)
(18,5)
(19,)
(20,0)
(21,globalFive)
(22,data)
(23,data * data)
(24,globalFive)
(25,data)
(26,stdin)
(27,if(globalFive==5)
(28,result = data * data)
(29,globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^