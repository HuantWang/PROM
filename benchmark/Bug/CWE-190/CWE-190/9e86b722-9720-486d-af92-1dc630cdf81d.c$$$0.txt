-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_08_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,15,0)
(19,10,0)
(2,15,0)
(5,16,0)
(17,11,0)
(22,17,0)
(5,10,0)
(0,10,0)
(9,14,0)
(26,21,0)
(7,21,0)
(27,11,0)
(25,16,0)
(21,26,0)
(23,15,0)
(11,15,0)
(12,5,0)
(19,5,0)
(8,17,0)
(26,11,0)
(21,29,0)
(3,26,0)
(20,21,0)
(18,11,0)
(4,16,0)
(24,19,0)
(16,11,0)
(16,5,0)
(6,19,1)
(28,11,1)
(7,20,1)
(3,7,1)
(13,21,1)
(22,13,1)
(17,11,1)
(16,4,1)
(19,24,1)
(11,27,1)
(21,26,1)
(19,5,1)
(24,5,1)
(26,11,1)
(25,12,1)
(6,17,1)
(17,8,1)
(27,18,1)
(5,16,1)
(4,25,1)
(20,28,1)
(16,11,1)
(26,3,1)
(8,22,1)
(6,13,1)
(13,28,1)
(12,17,1)
(21,26,2)
(17,11,2)
(3,28,2)
(22,13,2)
(26,11,2)
(20,28,2)
(7,28,2)
(19,5,2)
(4,17,2)
(12,17,2)
(5,17,2)
(25,17,2)
(16,17,2)
(24,17,2)
(5,16,2)
(17,13,2)
(19,17,2)
(16,11,2)
(26,28,2)
(21,28,2)
(8,13,2)
-----------------------------------
(0,result)
(1,if(staticReturnsTrue()
(2,data)
(3,data)
(4,2)
(5,result = data * 2)
(6,RET)
(7,"%c")
(8,0)
(9,if(data > 0)
(10,)
(11,data = \\\' \\\')
(12,result)
(13,staticReturnsTrue()
(14,)
(15,)
(16,data * 2)
(17,data > 0)
(18,data)
(19,printHexCharLine(result)
(20,stdin)
(21,fscanf (stdin, "%c", &data)
(22,data)
(23,if(staticReturnsTrue()
(24,result)
(25,data)
(26,&data)
(27,\\\' \\\')
(28,staticReturnsTrue()
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^