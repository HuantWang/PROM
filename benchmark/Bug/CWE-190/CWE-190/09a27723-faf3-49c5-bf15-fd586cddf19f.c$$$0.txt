-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_16_bad()
{
    short data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
28,29
28,30
29,30
29,31
30,31
31,32
31,33
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,27,32,34,38,40,44,46,47
-----computeFrom-----
12,13
12,14
20,21
20,22
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_16_bad(){    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__short_max_square_16_bad()
CWE190_Integer_Overflow__short_max_square_16_bad
{    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(4,23,0)
(12,4,0)
(7,4,0)
(17,8,0)
(5,20,0)
(24,20,0)
(4,7,0)
(2,11,0)
(11,7,0)
(1,5,0)
(25,17,0)
(6,8,0)
(7,17,0)
(4,5,0)
(18,7,0)
(23,13,0)
(10,4,0)
(3,20,0)
(14,20,0)
(16,13,0)
(9,5,0)
(11,17,0)
(15,23,0)
(21,23,0)
(19,5,1)
(6,11,1)
(10,18,1)
(4,5,1)
(7,4,1)
(1,9,1)
(11,2,1)
(4,12,1)
(4,23,1)
(18,22,1)
(2,7,1)
(0,6,1)
(0,22,1)
(11,7,1)
(21,19,1)
(5,1,1)
(23,15,1)
(22,16,1)
(15,21,1)
(16,23,1)
(12,10,1)
(22,19,1)
(2,22,2)
(23,19,2)
(4,23,2)
(4,5,2)
(4,22,2)
(18,22,2)
(15,19,2)
(11,7,2)
(10,22,2)
(12,22,2)
(16,19,2)
(6,22,2)
(11,22,2)
(7,4,2)
(7,22,2)
(21,19,2)
-----------------------------------
(0,RET)
(1,0)
(2,result)
(3,data)
(4,data * data)
(5,data = 0)
(6,break;)
(7,result = data * data)
(8,)
(9,data)
(10,data)
(11,printIntLine(result)
(12,data)
(13,)
(14,while(1)
(15,SHRT_MAX)
(16,break;)
(17,)
(18,result)
(19,1)
(20,)
(21,data)
(22,1)
(23,data = SHRT_MAX)
(24,while(1)
(25,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^