-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
27,28
27,29
29,30
29,31
31,32
32,33
32,34
33,34
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,6,8,9,13,15,19,23,24,28,30,34,35,39,41
-----computeFrom-----
21,22
21,23
32,33
32,34
-----guardedBy-----
23,34
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_63b_badSink(short * dataPtr){    short data = *dataPtr;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_rand_multiply_63b_badSink(short * dataPtr)
CWE190_Integer_Overflow__short_rand_multiply_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,6,0)
(14,5,0)
(2,0,0)
(4,16,0)
(12,1,0)
(1,16,0)
(14,15,0)
(17,16,0)
(13,12,0)
(3,12,0)
(11,5,0)
(15,18,0)
(15,5,0)
(9,18,0)
(18,15,0)
(7,15,0)
(0,1,0)
(10,1,0)
(18,1,0)
(20,14,0)
(1,0,0)
(19,18,0)
(12,1,1)
(8,14,1)
(18,9,1)
(19,7,1)
(0,2,1)
(15,18,1)
(7,12,1)
(18,1,1)
(12,3,1)
(13,1,1)
(0,6,1)
(14,15,1)
(3,13,1)
(2,10,1)
(1,0,1)
(9,19,1)
(20,15,1)
(14,20,1)
(8,12,1)
(12,1,2)
(18,1,2)
(15,18,2)
(14,12,2)
(9,12,2)
(7,12,2)
(0,6,2)
(1,0,2)
(14,15,2)
(15,12,2)
(18,12,2)
(20,12,2)
(19,12,2)
-----------------------------------
(0,*dataPtr)
(1,data = *dataPtr)
(2,dataPtr)
(3,0)
(4,if(data > 0)
(5,)
(6,short * dataPtr)
(7,result)
(8,RET)
(9,2)
(10,data)
(11,result)
(12,data > 0)
(13,data)
(14,printIntLine(result)
(15,result = data * 2)
(16,)
(17,data)
(18,data * 2)
(19,data)
(20,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^