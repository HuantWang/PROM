-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_01_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        char result = data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
40,41
40,42
41,42
43,44
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,30,33,35,38,42,44
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_01_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_01_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_01_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(3,11,0)
(16,8,0)
(18,3,0)
(4,3,0)
(14,8,0)
(13,12,0)
(1,13,0)
(8,14,0)
(8,12,0)
(2,4,0)
(9,12,0)
(5,10,0)
(12,11,0)
(13,3,0)
(6,14,0)
(10,12,0)
(14,11,0)
(19,14,0)
(7,10,0)
(10,3,0)
(0,11,0)
(4,10,0)
(17,12,0)
(14,8,1)
(10,12,1)
(4,2,1)
(12,17,1)
(15,4,1)
(6,12,1)
(17,9,1)
(13,12,1)
(8,12,1)
(7,5,1)
(13,1,1)
(16,19,1)
(4,10,1)
(8,16,1)
(5,13,1)
(19,6,1)
(1,14,1)
(2,10,1)
(10,7,1)
(14,8,2)
(4,10,2)
(13,12,2)
(10,12,2)
(8,12,2)
-----------------------------------
(0,data)
(1,data)
(2,result)
(3,)
(4,printHexCharLine(result)
(5,result)
(6,stdin)
(7,data)
(8,&data)
(9,data)
(10,result = data)
(11,)
(12,data = \\\' \\\')
(13,++data)
(14,fscanf (stdin, "%c", &data)
(15,RET)
(16,data)
(17,\\\' \\\')
(18,result)
(19,"%c")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^