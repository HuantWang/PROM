-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_16_bad()
{
    short data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,37,41,43,47,48,52,54,55
-----computeFrom-----
12,13
12,14
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_16_bad(){    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_16_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_16_bad
{    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(16,15,0)
(5,15,0)
(14,15,0)
(28,20,0)
(3,10,0)
(30,0,0)
(17,7,0)
(10,13,0)
(19,2,0)
(26,16,0)
(18,16,0)
(25,16,0)
(4,28,0)
(8,18,0)
(21,28,0)
(7,28,0)
(22,10,0)
(12,2,0)
(10,0,0)
(24,21,0)
(23,15,0)
(7,20,0)
(9,18,0)
(13,10,0)
(13,16,0)
(21,16,0)
(6,21,0)
(1,13,0)
(29,20,0)
(28,21,0)
(11,12,1)
(12,7,1)
(22,31,1)
(26,25,1)
(8,27,1)
(13,16,1)
(4,18,1)
(7,17,1)
(18,9,1)
(16,26,1)
(1,3,1)
(9,8,1)
(21,16,1)
(27,30,1)
(31,16,1)
(30,10,1)
(7,28,1)
(13,1,1)
(17,28,1)
(12,18,1)
(11,27,1)
(24,4,1)
(18,16,1)
(27,31,1)
(28,21,1)
(6,24,1)
(10,13,1)
(21,6,1)
(3,22,1)
(9,27,2)
(18,27,2)
(10,31,2)
(30,31,2)
(6,18,2)
(17,18,2)
(7,18,2)
(28,18,2)
(8,27,2)
(21,18,2)
(4,18,2)
(13,31,2)
(13,16,2)
(12,27,2)
(1,31,2)
(21,16,2)
(24,18,2)
(22,31,2)
(28,21,2)
(10,13,2)
(18,16,2)
(7,28,2)
(3,31,2)
-----------------------------------
(0,)
(1,data)
(2,)
(3,"%hd")
(4,result)
(5,while(1)
(6,2)
(7,printIntLine(result)
(8,data)
(9,0)
(10,fscanf (stdin, "%hd", &data)
(11,RET)
(12,break;)
(13,&data)
(14,data)
(15,)
(16,data = 0)
(17,result)
(18,data > 0)
(19,if(data > 0)
(20,)
(21,data * 2)
(22,stdin)
(23,while(1)
(24,data)
(25,data)
(26,0)
(27,1)
(28,result = data * 2)
(29,result)
(30,break;)
(31,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^