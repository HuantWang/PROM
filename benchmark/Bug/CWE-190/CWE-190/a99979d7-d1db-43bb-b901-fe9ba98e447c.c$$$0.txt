-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_16_bad()
{
    int64_t data;
    data = 0LL;
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
27,28
27,29
29,30
29,31
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,28,34,36,40,42,46,48,49
-----computeFrom-----
13,14
13,15
21,22
21,23
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_16_bad(){    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int64_t_max_square_16_bad()
CWE190_Integer_Overflow__int64_t_max_square_16_bad
{    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
-----joern-----
(5,9,0)
(18,17,0)
(4,18,0)
(12,4,0)
(10,2,0)
(14,13,0)
(7,18,0)
(23,2,0)
(11,4,0)
(15,12,0)
(0,2,0)
(1,4,0)
(12,13,0)
(21,17,0)
(16,12,0)
(4,12,0)
(8,13,0)
(20,1,0)
(1,18,0)
(13,9,0)
(3,2,0)
(8,14,1)
(19,21,1)
(15,11,1)
(19,22,1)
(14,6,1)
(16,15,1)
(11,22,1)
(12,16,1)
(1,20,1)
(6,10,1)
(4,12,1)
(20,4,1)
(22,5,1)
(13,8,1)
(21,1,1)
(1,4,1)
(5,13,1)
(22,6,1)
(12,13,1)
(4,12,2)
(1,4,2)
(1,22,2)
(12,13,2)
(13,6,2)
(16,22,2)
(8,6,2)
(4,22,2)
(21,22,2)
(15,22,2)
(14,6,2)
(11,22,2)
(12,22,2)
(5,6,2)
(20,22,2)
-----------------------------------
(0,data)
(1,printLongLongLine(result)
(2,)
(3,while(1)
(4,result = data * data)
(5,break;)
(6,1)
(7,result)
(8,LLONG_MAX)
(9,)
(10,L)
(11,result)
(12,data * data)
(13,data = LLONG_MAX)
(14,data)
(15,data)
(16,data)
(17,)
(18,)
(19,RET)
(20,result)
(21,break;)
(22,1)
(23,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^