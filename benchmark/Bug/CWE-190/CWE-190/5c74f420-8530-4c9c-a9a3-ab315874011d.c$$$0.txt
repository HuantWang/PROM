-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_postinc_34_bad()
{
    short data;
    CWE190_Integer_Overflow__short_fscanf_postinc_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
51,54
52,53
53,54
54,55
56,57
57,58
57,59
59,60
59,61
61,62
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,55,58,60,63,67,69
-----computeFrom-----
18,19
18,20
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_postinc_34_bad(){    short data;    CWE190_Integer_Overflow__short_fscanf_postinc_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_postinc_34_bad()
CWE190_Integer_Overflow__short_fscanf_postinc_34_bad
{    short data;    CWE190_Integer_Overflow__short_fscanf_postinc_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
CWE190_Integer_Overflow__short_fscanf_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__short_fscanf_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__short_fscanf_postinc_34_unionType
CWE190_Integer_Overflow__short_fscanf_postinc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(3,4,0)
(6,1,0)
(18,12,0)
(28,0,0)
(29,21,0)
(26,24,0)
(32,25,0)
(24,21,0)
(14,0,0)
(20,19,0)
(23,3,0)
(9,12,0)
(4,15,0)
(15,25,0)
(5,15,0)
(17,0,0)
(8,9,0)
(16,2,0)
(10,1,0)
(1,19,0)
(0,24,0)
(19,12,0)
(19,1,0)
(27,4,0)
(11,25,0)
(21,24,0)
(31,12,0)
(0,4,0)
(3,24,0)
(7,21,0)
(24,15,0)
(1,25,0)
(13,14,0)
(14,4,0)
(12,25,0)
(9,25,0)
(22,2,0)
(2,9,0)
(28,3,1)
(22,1,1)
(3,24,1)
(21,29,1)
(30,14,1)
(14,0,1)
(0,17,1)
(16,22,1)
(9,8,1)
(9,12,1)
(12,31,1)
(10,12,1)
(6,10,1)
(7,26,1)
(31,18,1)
(24,21,1)
(23,24,1)
(0,24,1)
(8,2,1)
(20,6,1)
(19,12,1)
(2,16,1)
(17,28,1)
(13,0,1)
(3,23,1)
(14,13,1)
(29,7,1)
(1,19,1)
(19,20,1)
(26,9,1)
(24,21,2)
(3,24,2)
(14,0,2)
(0,24,2)
(9,12,2)
(1,19,2)
(19,12,2)
-----------------------------------
(0,result = data)
(1,fscanf (stdin, "%hd", &data)
(2,myUnion.unionFirst)
(3,data++)
(4,)
(5,data)
(6,"%hd")
(7,myUnion)
(8,data)
(9,myUnion.unionFirst = data)
(10,stdin)
(11,myUnion)
(12,data = 0)
(13,result)
(14,printIntLine(result)
(15,)
(16,unionFirst)
(17,data)
(18,data)
(19,&data)
(20,data)
(21,myUnion.unionSecond)
(22,myUnion)
(23,data)
(24,data = myUnion.unionSecond)
(25,)
(26,data)
(27,result)
(28,result)
(29,unionSecond)
(30,RET)
(31,0)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^