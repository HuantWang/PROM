-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_06_bad()
CWE190_Integer_Overflow__char_max_square_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,13,0)
(7,13,0)
(1,2,0)
(22,5,0)
(27,5,0)
(23,22,0)
(5,17,0)
(6,15,0)
(22,8,0)
(4,11,0)
(8,22,0)
(16,22,0)
(25,8,0)
(24,8,0)
(20,15,0)
(26,2,0)
(8,3,0)
(0,3,0)
(8,13,0)
(23,5,0)
(21,11,0)
(3,10,0)
(14,3,0)
(13,2,0)
(12,2,0)
(18,23,0)
(23,18,1)
(25,24,1)
(24,16,1)
(3,14,1)
(8,13,1)
(4,21,1)
(14,0,1)
(16,11,1)
(0,15,1)
(22,8,1)
(18,22,1)
(28,11,1)
(6,20,1)
(28,23,1)
(13,7,1)
(7,9,1)
(21,15,1)
(20,13,1)
(23,22,1)
(8,25,1)
(15,6,1)
(11,4,1)
(8,3,1)
(21,3,1)
(14,15,2)
(23,11,2)
(8,13,2)
(23,22,2)
(16,11,2)
(8,3,2)
(8,11,2)
(0,15,2)
(22,11,2)
(25,11,2)
(22,8,2)
(3,15,2)
(24,11,2)
(18,11,2)
-----------------------------------
(0,data)
(1,data)
(2,)
(3,data = CHAR_MAX)
(4,5)
(5,)
(6,5)
(7,' ')
(8,data * data)
(9,data)
(10,)
(11,STATIC_CONST_FIVE==5)
(12,if(STATIC_CONST_FIVE==5)
(13,data = \' \')
(14,CHAR_MAX)
(15,STATIC_CONST_FIVE==5)
(16,result)
(17,)
(18,result)
(19,data = ' ')
(20,STATIC_CONST_FIVE)
(21,STATIC_CONST_FIVE)
(22,result = data * data)
(23,printHexCharLine(result)
(24,data)
(25,data)
(26,if(STATIC_CONST_FIVE==5)
(27,result)
(28,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^