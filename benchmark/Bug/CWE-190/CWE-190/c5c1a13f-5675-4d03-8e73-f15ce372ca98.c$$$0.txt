-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_01_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
32,33
33,34
33,35
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,30,34,36,40,41,45,47
-----computeFrom-----
12,13
12,14
27,28
27,29
38,39
38,40
-----guardedBy-----
29,40
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_01_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_01_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_01_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,16,0)
(0,7,0)
(1,16,0)
(15,19,0)
(19,16,0)
(2,7,0)
(21,1,0)
(5,7,0)
(16,7,0)
(13,0,0)
(4,20,0)
(9,18,0)
(17,20,0)
(10,4,0)
(6,16,0)
(14,20,0)
(0,19,0)
(3,18,0)
(19,0,0)
(8,3,0)
(11,0,0)
(23,1,0)
(4,18,0)
(3,4,0)
(20,4,0)
(22,16,0)
(1,16,1)
(20,14,1)
(12,1,1)
(15,11,1)
(19,16,1)
(19,15,1)
(3,8,1)
(12,3,1)
(23,21,1)
(13,16,1)
(14,17,1)
(3,4,1)
(20,16,1)
(11,13,1)
(16,6,1)
(21,0,1)
(8,4,1)
(4,20,1)
(6,22,1)
(1,23,1)
(17,10,1)
(0,19,1)
(10,1,1)
(0,19,2)
(1,16,2)
(3,1,2)
(4,20,2)
(10,1,2)
(3,4,2)
(17,1,2)
(14,1,2)
(8,1,2)
(20,16,2)
(19,16,2)
(4,1,2)
(20,1,2)
-----------------------------------
(0,fscanf (stdin, "%c", &data)
(1,data > 0)
(2,if(data > 0)
(3,printHexCharLine(result)
(4,result = data * 2)
(5,data)
(6,\\\' \\\')
(7,)
(8,result)
(9,result)
(10,result)
(11,"%c")
(12,RET)
(13,stdin)
(14,2)
(15,data)
(16,data = \\\' \\\')
(17,data)
(18,)
(19,&data)
(20,data * 2)
(21,data)
(22,data)
(23,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^