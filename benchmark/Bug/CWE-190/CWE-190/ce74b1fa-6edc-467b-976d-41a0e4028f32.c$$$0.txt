-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_add_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            int result = data + 1;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
57,59
58,59
60,61
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,43,47,48,52,54,59,61,65,67,71,72,76,78,83,84
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
45,46
45,47
57,58
57,59
69,70
69,71
-----guardedBy-----
59,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_add_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_max_add_12_bad()
CWE190_Integer_Overflow__int_max_add_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(11,10,0)
(4,2,0)
(32,25,0)
(5,3,0)
(41,27,0)
(42,0,0)
(35,6,0)
(43,22,0)
(22,25,0)
(3,10,0)
(19,25,0)
(30,34,0)
(2,6,0)
(1,22,0)
(14,10,0)
(40,34,0)
(10,44,0)
(27,14,0)
(31,6,0)
(39,14,0)
(25,22,0)
(23,38,0)
(9,1,0)
(30,27,0)
(17,2,0)
(22,0,0)
(14,27,0)
(33,26,0)
(28,26,0)
(25,10,0)
(27,34,0)
(25,26,0)
(7,16,0)
(34,29,0)
(18,10,0)
(1,0,0)
(3,26,0)
(36,23,0)
(13,6,0)
(24,3,0)
(21,30,0)
(8,14,0)
(26,37,0)
(14,26,0)
(2,17,1)
(36,3,1)
(30,27,1)
(3,26,1)
(25,10,1)
(24,5,1)
(10,11,1)
(15,1,1)
(39,8,1)
(15,30,1)
(5,20,1)
(25,19,1)
(14,39,1)
(22,25,1)
(20,10,1)
(1,9,1)
(12,2,1)
(33,28,1)
(23,36,1)
(9,22,1)
(28,12,1)
(25,26,1)
(8,41,1)
(14,26,1)
(15,23,1)
(3,10,1)
(32,43,1)
(20,26,1)
(11,18,1)
(43,3,1)
(19,32,1)
(14,10,1)
(41,20,1)
(3,24,1)
(18,12,1)
(27,14,1)
(21,27,1)
(26,33,1)
(30,21,1)
(1,22,1)
(17,4,1)
(10,12,2)
(11,12,2)
(39,20,2)
(9,3,2)
(43,3,2)
(3,20,2)
(25,26,2)
(14,26,2)
(24,20,2)
(25,3,2)
(33,12,2)
(27,20,2)
(27,14,2)
(23,3,2)
(26,12,2)
(1,22,2)
(30,20,2)
(1,3,2)
(28,12,2)
(3,10,2)
(36,3,2)
(14,10,2)
(21,20,2)
(3,26,2)
(19,3,2)
(41,20,2)
(22,25,2)
(25,10,2)
(32,3,2)
(14,20,2)
(30,27,2)
(5,20,2)
(8,20,2)
(22,3,2)
(18,12,2)
-----------------------------------
(0,)
(1,printIntLine(result)
(2,data = 0)
(3,data < INT_MAX)
(4,data)
(5,data)
(6,)
(7,if (data < INT_MAX)
(8,data)
(9,result)
(10,data = INT_MAX)
(11,INT_MAX)
(12,globalReturnsTrueOrFalse()
(13,data)
(14,data + 1)
(15,RET)
(16,)
(17,0)
(18,data)
(19,1)
(20,globalReturnsTrueOrFalse()
(21,result)
(22,result = data + 1)
(23,printLine("data value is too large to perform arithmetic safely.")
(24,INT_MAX)
(25,data + 1)
(26,data = 2)
(27,result = data + 1)
(28,data)
(29,)
(30,printIntLine(result)
(31,if(globalReturnsTrueOrFalse()
(32,data)
(33,2)
(34,)
(35,if(globalReturnsTrueOrFalse()
(36,"data value is too large to perform arithmetic safely.")
(37,)
(38,)
(39,1)
(40,result)
(41,result)
(42,result)
(43,result)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^