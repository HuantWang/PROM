-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
54,55
54,56
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,49,53,55,59,60,64,66,67,68,72,73,74
-----computeFrom-----
12,13
12,14
22,23
22,24
46,47
46,48
57,58
57,59
-----guardedBy-----
48,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_15_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(0,14,0)
(20,28,0)
(34,26,0)
(26,23,0)
(28,26,0)
(18,36,0)
(40,6,0)
(28,38,0)
(34,6,0)
(14,6,0)
(28,20,0)
(24,6,0)
(14,0,0)
(17,14,0)
(14,26,0)
(4,16,0)
(12,8,0)
(27,31,0)
(25,14,0)
(26,28,0)
(38,28,0)
(4,0,0)
(0,16,0)
(19,34,0)
(5,26,0)
(29,8,0)
(31,8,0)
(13,8,0)
(32,8,0)
(2,23,0)
(11,0,0)
(41,23,0)
(22,34,0)
(15,23,0)
(35,4,0)
(9,16,0)
(6,36,0)
(39,8,0)
(7,23,0)
(21,23,0)
(33,36,0)
(37,2,0)
(10,36,0)
(3,41,1)
(31,27,1)
(2,37,1)
(19,22,1)
(27,3,1)
(34,6,1)
(7,2,1)
(13,31,1)
(1,6,1)
(29,4,1)
(4,35,1)
(14,17,1)
(14,26,1)
(22,3,1)
(5,1,1)
(30,29,1)
(11,34,1)
(30,13,1)
(14,6,1)
(25,11,1)
(0,14,1)
(24,40,1)
(34,26,1)
(38,5,1)
(28,38,1)
(6,24,1)
(26,28,1)
(34,19,1)
(29,34,1)
(37,1,1)
(4,0,1)
(35,0,1)
(17,25,1)
(28,20,1)
(3,7,1)
(41,26,1)
(14,26,2)
(5,1,2)
(34,6,2)
(0,14,2)
(7,1,2)
(38,1,2)
(2,1,2)
(17,34,2)
(27,3,2)
(4,0,2)
(4,34,2)
(13,3,2)
(34,26,2)
(37,1,2)
(35,34,2)
(0,34,2)
(29,3,2)
(26,1,2)
(11,34,2)
(19,3,2)
(31,3,2)
(28,20,2)
(41,1,2)
(25,34,2)
(22,3,2)
(14,34,2)
(26,28,2)
(28,38,2)
(14,6,2)
(28,1,2)
(34,3,2)
-----------------------------------
(0,result = data * 2)
(1,6)
(2,printLine("Benign, fixed string")
(3,7)
(4,printUnsignedLine(result)
(5,data)
(6,data = 0)
(7,break;)
(8,)
(9,result)
(10,switch(6)
(11,result)
(12,default:)
(13,break;)
(14,data * 2)
(15,case 6:)
(16,)
(17,2)
(18,data)
(19,0)
(20,unsigned int)
(21,default:)
(22,data)
(23,)
(24,0)
(25,data)
(26,data = (unsigned int)
(27,"Benign, fixed string")
(28,(unsigned int)
(29,break;)
(30,RET)
(31,printLine("Benign, fixed string")
(32,case 7:)
(33,switch(7)
(34,data > 0)
(35,result)
(36,)
(37,"Benign, fixed string")
(38,RAND32()
(39,if(data > 0)
(40,data)
(41,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^