-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_42_bad()
{
    char data;
    data = ' ';
    data = badSource(data);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,29,33,35,39,40,44,46
-----computeFrom-----
12,13
12,14
17,18
17,19
26,27
26,28
37,38
37,39
-----guardedBy-----
28,39
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_42_bad(){    char data;    data = ' ';    data = badSource(data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_42_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_42_bad
{    char data;    data = ' ';    data = badSource(data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(11,4,0)
(18,11,0)
(1,4,0)
(6,21,0)
(2,14,0)
(3,7,0)
(17,21,0)
(10,14,0)
(7,11,0)
(13,4,0)
(19,5,0)
(16,21,0)
(6,9,0)
(11,7,0)
(0,1,0)
(5,9,0)
(5,6,0)
(21,11,0)
(7,1,0)
(23,4,0)
(22,6,0)
(12,9,0)
(20,1,0)
(21,6,0)
(14,11,0)
(18,1,1)
(7,3,1)
(2,11,1)
(3,18,1)
(5,19,1)
(8,14,1)
(16,22,1)
(1,20,1)
(22,14,1)
(8,5,1)
(17,16,1)
(14,11,1)
(21,17,1)
(10,2,1)
(19,6,1)
(7,1,1)
(11,7,1)
(14,10,1)
(20,0,1)
(21,11,1)
(5,6,1)
(6,21,1)
(11,7,2)
(7,1,2)
(21,14,2)
(6,14,2)
(22,14,2)
(5,14,2)
(19,14,2)
(16,14,2)
(17,14,2)
(21,11,2)
(14,11,2)
(5,6,2)
(6,21,2)
-----------------------------------
(0,data)
(1,data = ' ')
(2,data)
(3,data)
(4,)
(5,printHexCharLine(result)
(6,result = data * 2)
(7,badSource(data)
(8,RET)
(9,)
(10,0)
(11,data = badSource(data)
(12,result)
(13,if(data > 0)
(14,data > 0)
(15,data = \' \')
(16,data)
(17,2)
(18,data)
(19,result)
(20,' ')
(21,data * 2)
(22,result)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^