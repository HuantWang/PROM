-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,40,41,45,47,51,52,56,58
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
38,39
38,40
49,50
49,51
-----guardedBy-----
40,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_03_bad()
CWE190_Integer_Overflow__short_rand_multiply_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(26,5,0)
(29,8,0)
(16,7,0)
(31,24,0)
(13,33,0)
(27,0,0)
(20,22,0)
(13,6,0)
(11,13,0)
(17,0,0)
(32,6,0)
(23,5,0)
(1,7,0)
(25,6,0)
(18,13,0)
(8,29,0)
(14,5,0)
(6,5,0)
(29,2,0)
(33,22,0)
(33,13,0)
(19,12,0)
(29,21,0)
(4,21,0)
(21,29,0)
(9,22,0)
(3,33,0)
(0,6,0)
(9,33,0)
(30,12,0)
(0,21,0)
(21,15,0)
(13,21,0)
(28,9,0)
(2,29,0)
(9,33,1)
(13,18,1)
(19,7,1)
(28,33,1)
(16,6,1)
(13,6,1)
(18,11,1)
(9,28,1)
(7,1,1)
(19,21,1)
(1,16,1)
(10,9,1)
(6,25,1)
(30,19,1)
(25,32,1)
(12,30,1)
(0,6,1)
(29,8,1)
(29,2,1)
(0,27,1)
(0,21,1)
(13,21,1)
(4,7,1)
(33,13,1)
(17,12,1)
(10,12,1)
(27,17,1)
(21,29,1)
(3,0,1)
(10,0,1)
(11,3,1)
(8,4,1)
(29,2,2)
(29,7,2)
(9,0,2)
(28,0,2)
(13,21,2)
(0,12,2)
(33,13,2)
(21,7,2)
(4,7,2)
(0,21,2)
(18,0,2)
(9,33,2)
(27,12,2)
(17,12,2)
(13,0,2)
(8,7,2)
(33,0,2)
(3,0,2)
(0,6,2)
(13,6,2)
(11,0,2)
(29,8,2)
(21,29,2)
-----------------------------------
(0,data > 0)
(1,5)
(2,short)
(3,result)
(4,data)
(5,)
(6,data = 0)
(7,5==5)
(8,RAND32()
(9,printIntLine(result)
(10,RET)
(11,data)
(12,5==5)
(13,data * 2)
(14,if(5==5)
(15,)
(16,5)
(17,data)
(18,2)
(19,5)
(20,result)
(21,data = (short)
(22,)
(23,data)
(24,)
(25,0)
(26,if(5==5)
(27,0)
(28,result)
(29,(short)
(30,5)
(31,if(data > 0)
(32,data)
(33,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^