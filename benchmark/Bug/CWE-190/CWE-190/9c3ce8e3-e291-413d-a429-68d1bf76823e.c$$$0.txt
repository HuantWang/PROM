-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_postinc_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        unsigned int result = data;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
45,48
46,47
47,48
48,49
50,51
51,52
51,53
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
66,67
67,68
67,69
68,69
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,49,52,54,57,61,63,64,65,69,70,71
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_postinc_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_postinc_15_bad()
CWE190_Integer_Overflow__unsigned_int_rand_postinc_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        unsigned int result = data;        printUnsignedLine(result);    }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(16,37,0)
(29,4,0)
(4,33,0)
(1,11,0)
(31,11,0)
(5,4,0)
(18,34,0)
(33,34,0)
(16,0,0)
(15,16,0)
(9,24,0)
(37,26,0)
(17,11,0)
(2,16,0)
(2,33,0)
(19,11,0)
(14,0,0)
(3,0,0)
(37,27,0)
(2,12,0)
(37,16,0)
(22,34,0)
(28,4,0)
(4,16,0)
(20,5,0)
(25,12,0)
(27,37,0)
(5,12,0)
(30,11,0)
(32,0,0)
(7,0,0)
(12,11,0)
(24,0,0)
(26,37,0)
(10,33,0)
(13,2,0)
(4,12,0)
(35,33,0)
(21,17,0)
(6,34,0)
(4,33,1)
(24,9,1)
(17,21,1)
(15,36,1)
(14,16,1)
(27,15,1)
(37,27,1)
(23,7,1)
(36,33,1)
(4,28,1)
(8,30,1)
(29,2,1)
(20,4,1)
(2,13,1)
(2,33,1)
(23,14,1)
(28,29,1)
(16,37,1)
(33,35,1)
(21,23,1)
(30,17,1)
(7,24,1)
(13,23,1)
(9,36,1)
(5,20,1)
(4,16,1)
(19,5,1)
(35,10,1)
(37,26,1)
(5,4,1)
(2,16,1)
(8,19,1)
(20,23,2)
(37,36,2)
(16,37,2)
(15,36,2)
(28,23,2)
(24,36,2)
(21,23,2)
(37,26,2)
(5,23,2)
(9,36,2)
(27,36,2)
(19,23,2)
(4,23,2)
(4,16,2)
(29,23,2)
(5,4,2)
(14,36,2)
(16,36,2)
(2,33,2)
(7,36,2)
(4,33,2)
(13,23,2)
(2,23,2)
(2,16,2)
(37,27,2)
(30,23,2)
(17,23,2)
-----------------------------------
(0,)
(1,default:)
(2,data++)
(3,case 6:)
(4,result = data)
(5,printUnsignedLine(result)
(6,switch(7)
(7,break;)
(8,RET)
(9,"Benign, fixed string")
(10,data)
(11,)
(12,)
(13,data)
(14,break;)
(15,data)
(16,data = (unsigned int)
(17,printLine("Benign, fixed string")
(18,switch(6)
(19,break;)
(20,result)
(21,"Benign, fixed string")
(22,data)
(23,7)
(24,printLine("Benign, fixed string")
(25,result)
(26,unsigned int)
(27,RAND32()
(28,data)
(29,result)
(30,break;)
(31,case 7:)
(32,default:)
(33,data = 0)
(34,)
(35,0)
(36,6)
(37,(unsigned int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^