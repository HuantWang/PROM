-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_34_bad()
{
    int64_t data;
    CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType myUnion;
    data = 0LL;
    /* POTENTIAL FLAW: Use a random value */
    data = (int64_t)RAND64();
    myUnion.unionFirst = data;
    {
        int64_t data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
52,53
55,56
55,57
56,57
56,58
57,58
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,9,11,15,17,21,22,26,30,31,34,39,40,42,47,49,53,54,58,59,64,66,70,71,75,77
-----computeFrom-----
19,20
19,21
24,25
24,26
36,37
36,38
56,57
56,58
68,69
68,70
-----guardedBy-----
58,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_34_bad(){    int64_t data;    CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_34_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_34_bad
{    int64_t data;    CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType
CWE190_Integer_Overflow__int64_t_rand_multiply_34_unionType
myUnion
myUnion
data = 0LL;
data = 0LL
data
data
0LL
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t data = myUnion.unionSecond;
int64_t data = myUnion.unionSecond;
int64_t
int64_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(13,9,0)
(2,13,0)
(3,24,0)
(20,12,0)
(29,26,0)
(33,12,0)
(21,31,0)
(4,32,0)
(6,17,0)
(13,10,0)
(32,24,0)
(28,1,0)
(7,12,0)
(10,13,0)
(5,6,0)
(26,20,0)
(12,20,0)
(27,8,0)
(24,10,0)
(11,22,0)
(13,2,0)
(8,6,0)
(24,31,0)
(1,31,0)
(23,32,0)
(0,22,0)
(18,1,0)
(16,10,0)
(10,31,0)
(25,31,0)
(8,17,0)
(15,17,0)
(20,1,0)
(34,26,0)
(19,20,0)
(9,13,0)
(6,22,0)
(22,6,0)
(14,31,0)
(22,20,0)
(11,0,1)
(23,10,1)
(26,34,1)
(20,12,1)
(30,8,1)
(7,19,1)
(24,3,1)
(22,20,1)
(13,2,1)
(0,5,1)
(5,26,1)
(19,24,1)
(16,25,1)
(30,26,1)
(29,20,1)
(3,32,1)
(24,10,1)
(26,20,1)
(10,13,1)
(8,6,1)
(6,22,1)
(27,6,1)
(13,9,1)
(4,23,1)
(32,4,1)
(33,7,1)
(8,27,1)
(34,29,1)
(22,11,1)
(12,33,1)
(2,16,1)
(5,26,2)
(10,13,2)
(0,26,2)
(27,26,2)
(24,10,2)
(6,22,2)
(13,2,2)
(22,26,2)
(26,20,2)
(13,9,2)
(6,26,2)
(11,26,2)
(22,20,2)
(20,12,2)
(8,6,2)
(8,26,2)
-----------------------------------
(0,data)
(1,)
(2,RAND64()
(3,data)
(4,unionFirst)
(5,result)
(6,result = data * 2)
(7,myUnion)
(8,printLongLongLine(result)
(9,int64_t)
(10,data = (int64_t)
(11,2)
(12,myUnion.unionSecond)
(13,(int64_t)
(14,data)
(15,result)
(16,data)
(17,)
(18,if(data > 0)
(19,data)
(20,data = myUnion.unionSecond)
(21,myUnion)
(22,data * 2)
(23,myUnion)
(24,myUnion.unionFirst = data)
(25,L)
(26,data > 0)
(27,result)
(28,data)
(29,data)
(30,RET)
(31,)
(32,myUnion.unionFirst)
(33,unionSecond)
(34,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^