-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,41,45,46,50,52
-----computeFrom-----
12,13
12,14
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_add_08_bad()
CWE190_Integer_Overflow__char_fscanf_add_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(4,14,0)
(21,7,0)
(6,11,0)
(19,3,0)
(7,14,0)
(20,25,0)
(14,10,0)
(18,10,0)
(3,19,0)
(25,12,0)
(11,13,0)
(9,11,0)
(25,7,0)
(6,19,0)
(7,25,0)
(16,10,0)
(5,19,0)
(19,11,0)
(0,3,0)
(1,10,0)
(8,25,0)
(3,14,0)
(2,3,0)
(23,14,0)
(22,6,0)
(15,17,1)
(19,3,1)
(6,22,1)
(0,2,1)
(7,21,1)
(23,4,1)
(24,15,1)
(17,14,1)
(22,19,1)
(21,20,1)
(25,7,1)
(8,17,1)
(3,0,1)
(24,6,1)
(15,25,1)
(5,15,1)
(20,8,1)
(3,14,1)
(6,19,1)
(14,23,1)
(7,14,1)
(2,5,1)
(6,19,2)
(7,17,2)
(20,17,2)
(7,14,2)
(2,15,2)
(25,7,2)
(21,17,2)
(25,17,2)
(3,14,2)
(6,15,2)
(19,3,2)
(0,15,2)
(3,15,2)
(19,15,2)
(22,15,2)
(5,15,2)
(8,17,2)
-----------------------------------
(0,1)
(1,if(staticReturnsTrue()
(2,data)
(3,data + 1)
(4,data)
(5,result)
(6,printHexCharLine(result)
(7,&data)
(8,stdin)
(9,result)
(10,)
(11,)
(12,)
(13,)
(14,data = \\\' \\\')
(15,staticReturnsTrue()
(16,data)
(17,staticReturnsTrue()
(18,if(staticReturnsTrue()
(19,result = data + 1)
(20,"%c")
(21,data)
(22,result)
(23,\\\' \\\')
(24,RET)
(25,fscanf (stdin, "%c", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^