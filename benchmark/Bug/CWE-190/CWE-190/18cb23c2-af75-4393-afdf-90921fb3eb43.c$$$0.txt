-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_09_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_09_bad(){    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_09_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_09_bad
{    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(24,5,0)
(0,24,0)
(28,16,0)
(29,15,0)
(2,0,0)
(18,10,0)
(17,24,0)
(25,17,0)
(29,10,0)
(0,10,0)
(11,24,0)
(3,8,0)
(23,13,0)
(10,16,0)
(17,5,0)
(7,5,0)
(20,8,0)
(26,29,0)
(6,16,0)
(24,0,0)
(4,10,0)
(8,10,0)
(15,29,0)
(9,0,0)
(1,15,0)
(15,12,0)
(14,16,0)
(22,15,0)
(8,10,1)
(3,20,1)
(24,0,1)
(11,8,1)
(20,19,1)
(15,29,1)
(4,18,1)
(17,24,1)
(29,10,1)
(1,22,1)
(22,21,1)
(0,10,1)
(21,10,1)
(8,3,1)
(26,1,1)
(27,17,1)
(27,8,1)
(19,15,1)
(19,21,1)
(25,24,1)
(29,26,1)
(10,4,1)
(27,19,1)
(9,2,1)
(2,11,1)
(0,9,1)
(17,25,1)
(22,21,2)
(25,8,2)
(17,24,2)
(29,21,2)
(3,19,2)
(0,8,2)
(11,8,2)
(15,29,2)
(24,8,2)
(20,19,2)
(9,8,2)
(0,10,2)
(24,0,2)
(15,21,2)
(1,21,2)
(2,8,2)
(17,8,2)
(8,10,2)
(8,19,2)
(26,21,2)
(29,10,2)
-----------------------------------
(0,data * 2)
(1,"%d")
(2,data)
(3,0)
(4,0)
(5,)
(6,if(GLOBAL_CONST_TRUE)
(7,result)
(8,data > 0)
(9,2)
(10,data = 0)
(11,result)
(12,)
(13,)
(14,data)
(15,fscanf(stdin, "%d", &data)
(16,)
(17,printIntLine(result)
(18,data)
(19,GLOBAL_CONST_TRUE)
(20,data)
(21,GLOBAL_CONST_TRUE)
(22,stdin)
(23,if(data > 0)
(24,result = data * 2)
(25,result)
(26,data)
(27,RET)
(28,if(GLOBAL_CONST_TRUE)
(29,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^