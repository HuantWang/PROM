-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_preinc_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        short result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
45,48
46,47
47,48
48,49
50,51
51,52
51,53
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
66,67
67,68
67,69
68,69
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,49,52,54,57,61,63,64,65,69,70,71
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_preinc_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_rand_preinc_15_bad()
CWE190_Integer_Overflow__short_rand_preinc_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        short result = data;        printIntLine(result);    }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(14,22,0)
(14,17,0)
(12,18,0)
(0,26,0)
(27,2,0)
(31,20,0)
(25,37,0)
(26,37,0)
(36,12,0)
(33,20,0)
(16,0,0)
(37,25,0)
(17,22,0)
(22,20,0)
(0,27,0)
(24,27,0)
(19,26,0)
(9,17,0)
(32,17,0)
(37,30,0)
(28,18,0)
(35,18,0)
(6,18,0)
(17,27,0)
(0,22,0)
(23,20,0)
(7,2,0)
(29,14,0)
(10,20,0)
(3,18,0)
(4,23,0)
(17,26,0)
(15,22,0)
(30,37,0)
(8,27,0)
(21,20,0)
(1,2,0)
(34,2,0)
(37,26,0)
(26,18,0)
(37,30,1)
(11,27,1)
(0,26,1)
(16,5,1)
(21,14,1)
(29,17,1)
(36,11,1)
(9,0,1)
(17,27,1)
(5,35,1)
(31,23,1)
(0,27,1)
(8,24,1)
(4,5,1)
(13,21,1)
(26,37,1)
(25,19,1)
(19,11,1)
(32,9,1)
(3,12,1)
(37,25,1)
(17,32,1)
(35,26,1)
(14,29,1)
(0,16,1)
(23,4,1)
(17,26,1)
(12,36,1)
(14,17,1)
(27,8,1)
(5,3,1)
(13,31,1)
(17,26,2)
(32,5,2)
(17,5,2)
(3,11,2)
(26,11,2)
(31,5,2)
(0,26,2)
(29,5,2)
(21,5,2)
(19,11,2)
(0,27,2)
(16,5,2)
(35,11,2)
(36,11,2)
(37,30,2)
(23,5,2)
(25,11,2)
(12,11,2)
(37,11,2)
(14,17,2)
(0,5,2)
(26,37,2)
(14,5,2)
(9,5,2)
(17,27,2)
(4,5,2)
(37,25,2)
-----------------------------------
(0,++data)
(1,switch(6)
(2,)
(3,break;)
(4,"Benign, fixed string")
(5,7)
(6,case 6:)
(7,switch(7)
(8,0)
(9,result)
(10,case 7:)
(11,6)
(12,printLine("Benign, fixed string")
(13,RET)
(14,printIntLine(result)
(15,result)
(16,data)
(17,result = data)
(18,)
(19,data)
(20,)
(21,break;)
(22,)
(23,printLine("Benign, fixed string")
(24,data)
(25,RAND32()
(26,data = (short)
(27,data = 0)
(28,default:)
(29,result)
(30,short)
(31,break;)
(32,data)
(33,default:)
(34,data)
(35,break;)
(36,"Benign, fixed string")
(37,(short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^