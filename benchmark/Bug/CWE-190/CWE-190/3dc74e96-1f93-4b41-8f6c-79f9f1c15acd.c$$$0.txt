-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_04_bad()
{
    int64_t data;
    data = 0LL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
27,28
30,31
31,32
33,34
33,35
34,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,9,11,15,16,19,24,28,29,32,35,40,41,46,48,52,53,57,59
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
50,51
50,52
-----guardedBy-----
40,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_04_bad(){    int64_t data;    data = 0LL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_04_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_04_bad
{    int64_t data;    data = 0LL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(0,10,0)
(23,12,0)
(27,17,0)
(15,13,0)
(10,13,0)
(1,10,0)
(13,10,0)
(14,17,0)
(6,26,0)
(11,26,0)
(8,3,0)
(21,20,0)
(26,18,0)
(26,11,0)
(18,26,0)
(13,12,0)
(3,13,0)
(4,17,0)
(6,25,0)
(9,2,0)
(26,6,0)
(24,17,0)
(3,12,0)
(22,2,0)
(19,6,0)
(2,6,0)
(10,6,0)
(7,6,1)
(3,8,1)
(26,11,1)
(2,22,1)
(0,15,1)
(6,26,1)
(13,10,1)
(22,9,1)
(3,13,1)
(16,27,1)
(9,7,1)
(10,6,1)
(26,18,1)
(5,2,1)
(5,7,1)
(15,2,1)
(19,16,1)
(8,13,1)
(10,1,1)
(2,6,1)
(5,3,1)
(7,16,1)
(18,19,1)
(1,0,1)
(22,7,2)
(1,2,2)
(19,16,2)
(13,10,2)
(26,11,2)
(10,2,2)
(9,7,2)
(26,16,2)
(18,16,2)
(26,18,2)
(6,16,2)
(8,2,2)
(2,7,2)
(3,13,2)
(3,2,2)
(10,6,2)
(15,2,2)
(6,26,2)
(0,2,2)
(13,2,2)
(2,6,2)
-----------------------------------
(0,data)
(1,2)
(2,data > 0)
(3,printLongLongLine(result)
(4,data)
(5,RET)
(6,data = (int64_t)
(7,STATIC_CONST_TRUE)
(8,result)
(9,data)
(10,data * 2)
(11,int64_t)
(12,)
(13,result = data * 2)
(14,if(STATIC_CONST_TRUE)
(15,result)
(16,STATIC_CONST_TRUE)
(17,)
(18,RAND64()
(19,data)
(20,)
(21,if(data > 0)
(22,0)
(23,result)
(24,if(STATIC_CONST_TRUE)
(25,)
(26,(int64_t)
(27,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^