-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,73,76,78,81,85,87
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_32_bad()
CWE190_Integer_Overflow__char_max_postinc_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(35,11,0)
(21,35,0)
(36,20,0)
(7,43,0)
(13,0,0)
(41,24,0)
(15,13,0)
(24,11,0)
(33,35,0)
(41,31,0)
(43,8,0)
(29,42,0)
(26,23,0)
(37,0,0)
(42,35,0)
(16,42,0)
(38,22,0)
(17,5,0)
(39,11,0)
(4,11,0)
(0,11,0)
(18,16,0)
(1,21,0)
(10,8,0)
(13,42,0)
(5,11,0)
(2,16,0)
(6,31,0)
(12,21,0)
(7,24,0)
(32,8,0)
(28,31,0)
(42,13,0)
(3,24,0)
(16,21,0)
(8,11,0)
(30,12,0)
(12,42,0)
(20,8,0)
(25,7,0)
(8,20,0)
(31,24,0)
(22,16,0)
(9,11,0)
(43,7,0)
(27,5,0)
(22,21,0)
(19,10,0)
(40,43,0)
(23,0,0)
(0,23,0)
(14,41,0)
(10,41,0)
(10,8,1)
(8,20,1)
(13,15,1)
(2,12,1)
(28,6,1)
(15,29,1)
(22,16,1)
(34,22,1)
(6,7,1)
(27,17,1)
(23,26,1)
(30,42,1)
(16,18,1)
(20,36,1)
(12,30,1)
(25,5,1)
(10,19,1)
(42,13,1)
(14,10,1)
(13,0,1)
(43,8,1)
(41,31,1)
(22,38,1)
(41,14,1)
(18,2,1)
(36,32,1)
(26,37,1)
(29,41,1)
(38,16,1)
(0,23,1)
(31,28,1)
(16,42,1)
(43,40,1)
(40,25,1)
(12,42,1)
(19,31,1)
(7,43,1)
(17,0,1)
(5,27,1)
(37,8,1)
(42,13,2)
(43,8,2)
(8,20,2)
(0,23,2)
(22,16,2)
(12,42,2)
(10,8,2)
(7,43,2)
(13,0,2)
(16,42,2)
(41,31,2)
-----------------------------------
(0,*dataPtr2 = &data)
(1,result)
(2,result)
(3,data)
(4,data)
(5,data = ' ')
(6,data)
(7,data = *dataPtr1)
(8,*dataPtr1 = &data)
(9,dataPtr2)
(10,*dataPtr1)
(11,)
(12,data++)
(13,*dataPtr2)
(14,data)
(15,dataPtr2)
(16,result = data)
(17,data)
(18,data)
(19,dataPtr1)
(20,&data)
(21,)
(22,printHexCharLine(result)
(23,&data)
(24,)
(25,data)
(26,data)
(27,' ')
(28,CHAR_MAX)
(29,data)
(30,data)
(31,data = CHAR_MAX)
(32,dataPtr1)
(33,data)
(34,RET)
(35,)
(36,data)
(37,dataPtr2)
(38,result)
(39,dataPtr1)
(40,dataPtr1)
(41,*dataPtr1 = data)
(42,data = *dataPtr2)
(43,*dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^