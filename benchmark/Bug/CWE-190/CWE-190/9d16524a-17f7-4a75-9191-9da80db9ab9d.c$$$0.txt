-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_31_bad()
{
    unsigned int data;
    data = 0;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = UINT_MAX;
    {
        unsigned int dataCopy = data;
        unsigned int data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,30,33,35,38,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_31_bad(){    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    {        unsigned int dataCopy = data;        unsigned int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_31_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_31_bad
{    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    {        unsigned int dataCopy = data;        unsigned int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
{        unsigned int dataCopy = data;        unsigned int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
unsigned int dataCopy = data;
unsigned int dataCopy = data;
unsigned int
dataCopy = data
dataCopy
= data
data
data
unsigned int data = dataCopy;
unsigned int data = dataCopy;
unsigned int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(0,1,0)
(21,1,0)
(26,19,0)
(21,20,0)
(20,1,0)
(7,18,0)
(3,18,0)
(24,9,0)
(19,20,0)
(18,5,0)
(10,6,0)
(19,10,0)
(10,9,0)
(13,16,0)
(20,19,0)
(9,6,0)
(9,18,0)
(8,10,0)
(17,16,0)
(25,6,0)
(14,21,0)
(22,20,0)
(2,10,0)
(15,6,0)
(1,6,0)
(16,5,0)
(4,5,0)
(6,5,0)
(12,19,0)
(23,9,0)
(9,24,1)
(26,22,1)
(2,9,1)
(13,17,1)
(3,16,1)
(18,7,1)
(22,10,1)
(24,23,1)
(9,18,1)
(23,18,1)
(20,19,1)
(19,10,1)
(11,21,1)
(7,3,1)
(16,13,1)
(10,8,1)
(10,9,1)
(8,2,1)
(14,20,1)
(21,14,1)
(21,20,1)
(19,12,1)
(12,26,1)
(9,18,2)
(20,19,2)
(21,20,2)
(10,9,2)
(19,10,2)
-----------------------------------
(0,result)
(1,)
(2,data)
(3,data)
(4,data)
(5,)
(6,)
(7,UINT_MAX)
(8,dataCopy)
(9,dataCopy = data)
(10,data = dataCopy)
(11,RET)
(12,data)
(13,0)
(14,result)
(15,data)
(16,data = 0)
(17,data)
(18,data = UINT_MAX)
(19,data * data)
(20,result = data * data)
(21,printUnsignedLine(result)
(22,result)
(23,dataCopy)
(24,data)
(25,dataCopy)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^