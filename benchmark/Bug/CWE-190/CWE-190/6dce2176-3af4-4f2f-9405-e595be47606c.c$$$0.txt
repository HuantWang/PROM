-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * dataPtr = (int *)dataVoidPtr;
    /* dereference dataPtr into data */
    int data = (*dataPtr);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,49,50,54,56
-----computeFrom-----
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_max_multiply_64b_badSink(void * dataVoidPtr)
CWE190_Integer_Overflow__int_max_multiply_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * dataPtr = (int *)dataVoidPtr;    /* dereference dataPtr into data */    int data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int * dataPtr = (int *)dataVoidPtr;
int * dataPtr = (int *)dataVoidPtr;
int
* dataPtr = (int *)dataVoidPtr
*
dataPtr
= (int *)dataVoidPtr
(int *)dataVoidPtr
int *
int
*
*
dataVoidPtr
dataVoidPtr
int data = (*dataPtr);
int data = (*dataPtr);
int
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,19,0)
(22,5,0)
(12,5,0)
(25,3,0)
(21,25,0)
(6,7,0)
(14,25,0)
(7,19,0)
(21,19,0)
(18,14,0)
(16,12,0)
(19,21,0)
(10,3,0)
(16,19,0)
(9,3,0)
(14,17,0)
(4,16,0)
(12,16,0)
(25,14,0)
(14,13,0)
(8,5,0)
(20,3,0)
(24,22,0)
(19,3,0)
(15,16,0)
(1,7,0)
(11,21,0)
(13,14,0)
(2,25,0)
(22,12,0)
(0,12,0)
(21,25,1)
(7,19,1)
(22,12,1)
(16,4,1)
(0,7,1)
(7,1,1)
(14,18,1)
(15,0,1)
(18,2,1)
(6,19,1)
(19,21,1)
(26,7,1)
(14,17,1)
(12,16,1)
(4,15,1)
(14,13,1)
(25,14,1)
(23,25,1)
(21,11,1)
(11,23,1)
(26,22,1)
(22,24,1)
(16,19,1)
(24,12,1)
(1,6,1)
(14,17,2)
(25,14,2)
(0,7,2)
(22,12,2)
(14,13,2)
(21,25,2)
(24,7,2)
(12,16,2)
(15,7,2)
(12,7,2)
(16,7,2)
(4,7,2)
(22,7,2)
(19,21,2)
(16,19,2)
(7,19,2)
-----------------------------------
(0,result)
(1,0)
(2,dataPtr)
(3,)
(4,2)
(5,)
(6,data)
(7,data > 0)
(8,result)
(9,dataPtr)
(10,data)
(11,dataPtr)
(12,result = data * 2)
(13,int *)
(14,(int *)
(15,data)
(16,data * 2)
(17,void * dataVoidPtr)
(18,dataVoidPtr)
(19,data = (*dataPtr)
(20,if(data > 0)
(21,*dataPtr)
(22,printIntLine(result)
(23,data)
(24,result)
(25,* dataPtr = (int *)
(26,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^