-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_18_bad()
{
    unsigned int data;
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%u", &data);
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
        unsigned int result = data * 2;
        printUnsignedLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
32,33
32,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,31,33,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_18_bad(){    unsigned int data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_18_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_18_bad
{    unsigned int data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);
source
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(7,17,0)
(13,17,0)
(5,23,0)
(20,23,0)
(22,7,0)
(26,17,0)
(2,10,0)
(25,17,0)
(7,24,0)
(6,5,0)
(18,10,0)
(12,17,0)
(14,2,0)
(1,24,0)
(15,23,0)
(11,23,0)
(23,17,0)
(5,18,0)
(2,18,0)
(21,10,0)
(16,18,0)
(24,23,0)
(3,7,0)
(27,17,0)
(18,5,0)
(24,7,0)
(19,5,0)
(9,20,0)
(4,17,0)
(8,20,0)
(5,19,1)
(14,18,1)
(20,23,1)
(7,24,1)
(8,26,1)
(22,13,1)
(15,11,1)
(26,7,1)
(19,6,1)
(2,14,1)
(3,22,1)
(24,1,1)
(5,23,1)
(2,18,1)
(9,8,1)
(20,9,1)
(18,5,1)
(13,23,1)
(24,23,1)
(6,16,1)
(0,2,1)
(1,3,1)
(16,20,1)
(23,15,1)
(0,20,1)
(7,24,2)
(5,23,2)
(14,20,2)
(18,20,2)
(5,20,2)
(18,5,2)
(2,20,2)
(24,23,2)
(19,20,2)
(2,18,2)
(20,23,2)
(6,20,2)
(16,20,2)
-----------------------------------
(0,RET)
(1,data)
(2,printUnsignedLine(result)
(3,"%u")
(4,sink:)
(5,data * 2)
(6,data)
(7,fscanf (stdin, "%u", &data)
(8,data)
(9,0)
(10,)
(11,data)
(12,if(data > 0)
(13,goto source;)
(14,result)
(15,0)
(16,result)
(17,)
(18,result = data * 2)
(19,2)
(20,data > 0)
(21,result)
(22,stdin)
(23,data = 0)
(24,&data)
(25,data)
(26,goto sink;)
(27,source:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^