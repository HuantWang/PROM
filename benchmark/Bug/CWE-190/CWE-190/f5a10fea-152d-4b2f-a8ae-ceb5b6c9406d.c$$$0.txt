-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
50,53
52,53
53,54
55,56
57,58
57,59
57,60
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
89,90
91,92
93,94
93,95
94,95
95,96
95,97
97,98
97,99
99,100
100,101
101,102
103,104
103,105
104,105
104,106
105,106
108,109
108,110
109,110
110,111
110,112
112,113
112,114
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
123,124
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,54,56,61,63,65,67,69,74,77,79,84,85,90,92,96,98,102,106,107,111,113,117,118,122,124
-----computeFrom-----
32,33
32,34
58,59
58,60
72,73
72,74
87,88
87,89
104,105
104,106
115,116
115,117
-----guardedBy-----
63,79
106,117
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_32_bad()
CWE190_Integer_Overflow__int_fgets_multiply_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,38,0)
(45,9,0)
(32,29,0)
(20,17,0)
(2,57,0)
(24,27,0)
(18,27,0)
(35,18,0)
(52,53,0)
(54,53,0)
(42,57,0)
(57,47,0)
(62,13,0)
(16,27,0)
(46,16,0)
(3,20,0)
(44,52,0)
(0,18,0)
(43,27,0)
(49,40,0)
(4,25,0)
(34,24,0)
(29,53,0)
(42,40,0)
(8,42,0)
(14,53,0)
(64,0,0)
(43,39,0)
(17,0,0)
(36,27,0)
(47,25,0)
(5,24,0)
(15,27,0)
(53,24,0)
(31,20,0)
(26,0,0)
(63,62,0)
(40,27,0)
(56,29,0)
(40,60,0)
(47,18,0)
(57,18,0)
(63,17,0)
(9,29,0)
(61,47,0)
(41,17,0)
(10,9,0)
(25,40,0)
(6,30,0)
(9,48,0)
(19,17,0)
(50,54,0)
(21,39,0)
(12,43,0)
(53,52,0)
(7,63,0)
(59,16,0)
(39,43,0)
(51,20,0)
(45,48,0)
(37,54,0)
(20,38,0)
(55,45,0)
(60,40,0)
(57,62,0)
(25,47,0)
(29,9,0)
(30,28,0)
(33,62,0)
(62,63,0)
(22,48,0)
(38,20,0)
(52,43,0)
(1,60,0)
(58,27,0)
(23,20,1)
(17,41,1)
(45,55,1)
(63,7,1)
(29,56,1)
(47,25,1)
(20,3,1)
(8,30,1)
(50,53,1)
(25,4,1)
(57,2,1)
(30,6,1)
(9,29,1)
(37,50,1)
(38,23,1)
(25,40,1)
(42,40,1)
(45,9,1)
(42,8,1)
(61,16,1)
(8,62,1)
(51,17,1)
(2,42,1)
(39,21,1)
(52,44,1)
(46,43,1)
(14,57,1)
(53,52,1)
(4,61,1)
(12,40,1)
(63,17,1)
(10,54,1)
(62,63,1)
(52,43,1)
(57,62,1)
(32,10,1)
(19,47,1)
(55,9,1)
(43,39,1)
(41,19,1)
(60,1,1)
(40,60,1)
(54,53,1)
(7,33,1)
(59,46,1)
(56,32,1)
(38,20,1)
(54,37,1)
(16,59,1)
(1,49,1)
(11,54,1)
(33,38,1)
(57,47,1)
(21,12,1)
(6,38,1)
(31,51,1)
(20,17,1)
(3,31,1)
(29,53,1)
(44,14,1)
(11,45,1)
(9,29,2)
(47,25,2)
(45,9,2)
(9,54,2)
(56,54,2)
(40,60,2)
(45,54,2)
(57,47,2)
(10,54,2)
(43,39,2)
(29,53,2)
(29,54,2)
(53,52,2)
(38,20,2)
(42,40,2)
(62,63,2)
(33,38,2)
(57,62,2)
(6,38,2)
(32,54,2)
(62,38,2)
(20,17,2)
(63,17,2)
(54,53,2)
(7,38,2)
(55,54,2)
(63,38,2)
(52,43,2)
(30,38,2)
(25,40,2)
-----------------------------------
(0,)
(1,data)
(2,data)
(3,stdin)
(4,dataPtr1)
(5,if(data > 0)
(6,"fgets()
(7,inputBuffer)
(8,dataPtr1)
(9,result = data * 2)
(10,result)
(11,RET)
(12,dataPtr2)
(13,)
(14,data)
(15,data)
(16,data = 0)
(17,inputBuffer[CHAR_ARRAY_SIZE] = "")
(18,)
(19,inputBuffer)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,data)
(22,result)
(23,NULL)
(24,)
(25,*dataPtr1)
(26,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(27,)
(28,)
(29,data * 2)
(30,printLine("fgets()
(31,CHAR_ARRAY_SIZE)
(32,data)
(33,data)
(34,data)
(35,data)
(36,dataPtr2)
(37,0)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,&data)
(40,*dataPtr1 = &data)
(41,"")
(42,*dataPtr1)
(43,*dataPtr2 = &data)
(44,dataPtr2)
(45,printIntLine(result)
(46,data)
(47,data = *dataPtr1)
(48,)
(49,dataPtr1)
(50,data)
(51,inputBuffer)
(52,*dataPtr2)
(53,data = *dataPtr2)
(54,data > 0)
(55,result)
(56,2)
(57,*dataPtr1 = data)
(58,dataPtr1)
(59,0)
(60,&data)
(61,data)
(62,data = atoi(inputBuffer)
(63,atoi(inputBuffer)
(64,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^