-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_66b_badSink(char dataArray[])
{
    /* copy data out of dataArray */
    char data = dataArray[2];
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        char result = data + 1;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
23,24
23,25
25,26
25,27
27,28
28,29
28,30
29,30
32,33
33,34
33,35
34,35
36,37
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,30,31,35,37
-----computeFrom-----
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_66b_badSink(char dataArray[]){    /* copy data out of dataArray */    char data = dataArray[2];    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_add_66b_badSink(char dataArray[])
CWE190_Integer_Overflow__char_fscanf_add_66b_badSink
char dataArray[]
char
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    char data = dataArray[2];    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }}
char data = dataArray[2];
char data = dataArray[2];
char
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(16,10,0)
(6,16,0)
(13,14,0)
(1,7,0)
(8,15,0)
(12,16,0)
(9,12,0)
(15,14,0)
(9,8,0)
(2,12,0)
(12,14,0)
(5,16,0)
(16,12,0)
(11,8,0)
(0,9,0)
(3,15,0)
(7,15,0)
(7,8,0)
(17,9,0)
(8,9,0)
(1,8,1)
(17,0,1)
(0,11,1)
(9,17,1)
(7,1,1)
(16,5,1)
(7,8,1)
(6,2,1)
(8,9,1)
(5,6,1)
(9,12,1)
(11,12,1)
(12,16,1)
(4,7,1)
(16,10,1)
(12,16,2)
(8,9,2)
(16,10,2)
(9,12,2)
(7,8,2)
-----------------------------------
(0,data)
(1,result)
(2,data)
(3,result)
(4,RET)
(5,2)
(6,dataArray)
(7,printHexCharLine(result)
(8,result = data + 1)
(9,data + 1)
(10,char dataArray[])
(11,result)
(12,data = dataArray[2])
(13,data)
(14,)
(15,)
(16,dataArray[2])
(17,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^