-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_31_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    {
        short dataCopy = data;
        short data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,47,49,53,55,59,61
-----computeFrom-----
12,13
12,14
17,18
17,19
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_31_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_31_bad()
CWE190_Integer_Overflow__short_rand_square_31_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        short dataCopy = data;        short data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(18,12,0)
(15,3,0)
(2,5,0)
(3,10,0)
(16,9,0)
(21,3,0)
(9,10,0)
(17,21,0)
(13,12,0)
(4,21,0)
(20,10,0)
(5,12,0)
(14,13,0)
(16,26,0)
(0,7,0)
(27,20,0)
(21,9,0)
(17,3,0)
(26,16,0)
(12,7,0)
(22,21,0)
(28,17,0)
(24,20,0)
(8,16,0)
(9,16,0)
(7,3,0)
(25,10,0)
(6,9,0)
(1,3,0)
(13,17,0)
(12,13,0)
(19,13,0)
(16,8,0)
(5,7,0)
(23,17,0)
(20,27,1)
(5,2,1)
(13,17,1)
(17,23,1)
(9,16,1)
(22,9,1)
(21,4,1)
(26,6,1)
(16,26,1)
(4,22,1)
(27,24,1)
(28,21,1)
(17,21,1)
(18,17,1)
(11,5,1)
(23,28,1)
(6,20,1)
(5,12,1)
(12,13,1)
(16,8,1)
(13,19,1)
(21,9,1)
(2,12,1)
(19,14,1)
(14,18,1)
(9,16,2)
(21,9,2)
(12,13,2)
(5,12,2)
(16,8,2)
(13,17,2)
(16,26,2)
(17,21,2)
-----------------------------------
(0,result)
(1,data)
(2,result)
(3,)
(4,data)
(5,printIntLine(result)
(6,data)
(7,)
(8,short)
(9,data = (short)
(10,)
(11,RET)
(12,result = data * data)
(13,data * data)
(14,data)
(15,dataCopy)
(16,(short)
(17,data = dataCopy)
(18,result)
(19,data)
(20,data = 0)
(21,dataCopy = data)
(22,dataCopy)
(23,dataCopy)
(24,data)
(25,data)
(26,RAND32()
(27,0)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^