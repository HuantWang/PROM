-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,42,45,47,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_14_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(2,5,0)
(29,16,0)
(24,5,0)
(26,16,0)
(7,18,0)
(1,22,0)
(18,28,0)
(20,18,0)
(19,26,0)
(28,26,0)
(14,11,0)
(13,28,0)
(23,11,0)
(22,26,0)
(22,4,0)
(12,19,0)
(8,4,0)
(0,19,0)
(4,27,0)
(28,18,0)
(6,8,0)
(17,4,0)
(9,16,0)
(19,4,0)
(18,3,0)
(10,26,0)
(15,26,0)
(8,19,0)
(25,16,0)
(22,26,1)
(21,8,1)
(8,6,1)
(11,14,1)
(6,19,1)
(1,11,1)
(5,2,1)
(28,26,1)
(7,20,1)
(13,7,1)
(14,23,1)
(23,18,1)
(26,15,1)
(24,26,1)
(23,5,1)
(12,22,1)
(18,28,1)
(8,19,1)
(0,12,1)
(28,13,1)
(19,0,1)
(20,5,1)
(2,24,1)
(19,26,1)
(15,10,1)
(21,11,1)
(22,1,1)
(22,26,2)
(12,11,2)
(1,11,2)
(28,5,2)
(8,19,2)
(18,28,2)
(20,5,2)
(7,5,2)
(19,11,2)
(28,26,2)
(18,5,2)
(6,11,2)
(0,11,2)
(22,11,2)
(13,5,2)
(19,26,2)
(8,11,2)
-----------------------------------
(0,data)
(1,data)
(2,5)
(3,)
(4,)
(5,globalFive==5)
(6,result)
(7,"%c")
(8,printHexCharLine(result)
(9,if(globalFive==5)
(10,data)
(11,globalFive==5)
(12,result)
(13,data)
(14,5)
(15,\\\' \\\')
(16,)
(17,result)
(18,fscanf (stdin, "%c", &data)
(19,result = data)
(20,stdin)
(21,RET)
(22,++data)
(23,globalFive)
(24,globalFive)
(25,if(globalFive==5)
(26,data = \\\' \\\')
(27,)
(28,&data)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^