-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,74,78,79,83,85
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_32_bad()
CWE190_Integer_Overflow__char_max_add_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(29,4,0)
(4,18,0)
(3,40,0)
(42,0,0)
(42,35,0)
(43,40,0)
(8,40,0)
(33,43,0)
(37,18,0)
(23,38,0)
(9,36,0)
(21,19,0)
(12,19,0)
(34,33,0)
(37,0,0)
(35,42,0)
(31,37,0)
(11,14,0)
(0,43,0)
(27,42,0)
(7,36,0)
(19,38,0)
(13,35,0)
(1,36,0)
(28,40,0)
(15,28,0)
(20,34,0)
(6,18,0)
(25,8,0)
(17,21,0)
(38,19,0)
(14,9,0)
(2,0,0)
(14,19,0)
(32,43,0)
(18,4,0)
(19,40,0)
(21,25,0)
(10,25,0)
(35,33,0)
(0,37,0)
(16,28,0)
(39,33,0)
(24,9,0)
(26,42,0)
(25,21,0)
(18,40,0)
(41,40,0)
(34,35,0)
(22,8,0)
(36,8,0)
(5,40,0)
(9,8,0)
(1,25,1)
(20,35,1)
(35,42,1)
(42,27,1)
(37,18,1)
(7,1,1)
(25,21,1)
(19,38,1)
(26,13,1)
(18,4,1)
(21,19,1)
(15,18,1)
(29,6,1)
(2,9,1)
(14,19,1)
(42,0,1)
(36,7,1)
(37,31,1)
(28,16,1)
(4,29,1)
(11,36,1)
(21,17,1)
(31,2,1)
(27,26,1)
(34,20,1)
(30,34,1)
(34,35,1)
(13,0,1)
(24,14,1)
(17,10,1)
(9,24,1)
(9,36,1)
(23,12,1)
(6,19,1)
(10,28,1)
(14,11,1)
(16,15,1)
(0,37,1)
(38,23,1)
(34,35,2)
(25,21,2)
(9,36,2)
(35,42,2)
(42,0,2)
(21,19,2)
(14,19,2)
(37,18,2)
(0,37,2)
(19,38,2)
(18,4,2)
-----------------------------------
(0,data = *dataPtr2)
(1,data)
(2,data)
(3,dataPtr2)
(4,&data)
(5,dataPtr1)
(6,dataPtr2)
(7,CHAR_MAX)
(8,)
(9,*dataPtr1 = data)
(10,data)
(11,dataPtr1)
(12,dataPtr1)
(13,result)
(14,*dataPtr1)
(15,data)
(16,' ')
(17,dataPtr1)
(18,*dataPtr2 = &data)
(19,*dataPtr1 = &data)
(20,result)
(21,*dataPtr1)
(22,data)
(23,data)
(24,data)
(25,data = *dataPtr1)
(26,data)
(27,1)
(28,data = ' ')
(29,data)
(30,RET)
(31,dataPtr2)
(32,data)
(33,)
(34,printHexCharLine(result)
(35,result = data + 1)
(36,data = CHAR_MAX)
(37,*dataPtr2)
(38,&data)
(39,result)
(40,)
(41,data)
(42,data + 1)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^