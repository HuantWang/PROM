-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_add_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,65,67,71,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_add_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_add_17_bad()
CWE190_Integer_Overflow__short_rand_add_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,10,0)
(40,3,0)
(30,37,0)
(26,2,0)
(32,34,0)
(22,36,0)
(39,3,0)
(8,21,0)
(36,41,0)
(5,20,0)
(41,36,0)
(14,20,0)
(36,22,0)
(24,37,0)
(38,34,0)
(22,15,0)
(1,3,0)
(21,20,0)
(25,33,0)
(31,6,0)
(0,5,0)
(19,5,0)
(6,3,0)
(2,22,0)
(18,3,0)
(25,4,0)
(33,2,0)
(37,34,0)
(9,25,0)
(7,36,0)
(16,33,0)
(13,2,0)
(17,22,0)
(11,6,0)
(33,4,0)
(36,7,0)
(2,6,0)
(2,33,0)
(27,3,0)
(28,4,0)
(12,29,0)
(35,20,0)
(29,34,0)
(19,21,1)
(34,38,1)
(21,20,1)
(5,0,1)
(33,2,1)
(2,22,1)
(8,25,1)
(37,30,1)
(0,19,1)
(24,34,1)
(16,5,1)
(17,37,1)
(38,32,1)
(23,5,1)
(29,12,1)
(36,7,1)
(32,6,1)
(2,13,1)
(12,22,1)
(22,36,1)
(24,29,1)
(2,6,1)
(37,34,1)
(29,34,1)
(30,24,1)
(14,35,1)
(19,20,1)
(21,8,1)
(5,20,1)
(9,33,1)
(6,31,1)
(31,11,1)
(36,41,1)
(25,33,1)
(41,17,1)
(26,16,1)
(20,14,1)
(25,9,1)
(35,37,1)
(13,26,1)
(19,5,2)
(17,37,2)
(33,2,2)
(2,5,2)
(26,5,2)
(29,37,2)
(13,5,2)
(2,22,2)
(25,33,2)
(37,37,2)
(22,36,2)
(33,5,2)
(37,34,2)
(36,37,2)
(0,5,2)
(12,37,2)
(8,5,2)
(30,37,2)
(21,20,2)
(41,37,2)
(16,5,2)
(29,34,2)
(9,5,2)
(22,37,2)
(24,37,2)
(36,7,2)
(5,20,2)
(2,6,2)
(25,5,2)
(5,5,2)
(21,5,2)
(36,41,2)
-----------------------------------
(0,1)
(1,data)
(2,data + 1)
(3,)
(4,)
(5,j < 1)
(6,data = 0)
(7,short)
(8,j)
(9,result)
(10,)
(11,data)
(12,i)
(13,1)
(14,0)
(15,)
(16,result)
(17,data)
(18,for(i = 0; i < 1; i++)
(19,j)
(20,j = 0)
(21,j++)
(22,data = (short)
(23,RET)
(24,i)
(25,printIntLine(result)
(26,data)
(27,j)
(28,result)
(29,i++)
(30,1)
(31,0)
(32,i)
(33,result = data + 1)
(34,i = 0)
(35,j)
(36,(short)
(37,i < 1)
(38,0)
(39,i)
(40,for(j = 0; j < 1; j++)
(41,RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^