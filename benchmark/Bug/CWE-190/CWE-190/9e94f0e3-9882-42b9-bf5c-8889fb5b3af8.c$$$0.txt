-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_16_bad()
{
    short data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,32,37,39,43,45,49,51,52
-----computeFrom-----
12,13
12,14
20,21
20,22
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_16_bad(){    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__short_rand_square_16_bad()
CWE190_Integer_Overflow__short_rand_square_16_bad
{    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(18,7,0)
(27,25,0)
(14,0,0)
(18,19,0)
(22,27,0)
(24,22,0)
(3,17,0)
(25,13,0)
(5,17,0)
(23,10,0)
(12,27,0)
(18,10,0)
(27,23,0)
(20,5,0)
(19,18,0)
(21,10,0)
(6,17,0)
(7,18,0)
(2,5,0)
(23,5,0)
(11,23,0)
(9,13,0)
(10,18,0)
(1,23,0)
(10,0,0)
(15,25,0)
(26,17,0)
(23,27,0)
(22,25,0)
(4,9,1)
(16,8,1)
(23,10,1)
(24,27,1)
(18,7,1)
(14,10,1)
(23,5,1)
(22,24,1)
(16,14,1)
(4,16,1)
(18,19,1)
(9,22,1)
(27,23,1)
(23,11,1)
(19,21,1)
(5,20,1)
(11,1,1)
(10,18,1)
(8,5,1)
(20,2,1)
(21,8,1)
(1,12,1)
(12,16,1)
(22,27,1)
(27,16,2)
(19,8,2)
(22,16,2)
(9,16,2)
(23,16,2)
(23,5,2)
(10,8,2)
(10,18,2)
(14,8,2)
(18,19,2)
(23,10,2)
(24,16,2)
(18,7,2)
(1,16,2)
(21,8,2)
(12,16,2)
(22,27,2)
(18,8,2)
(11,16,2)
(27,23,2)
-----------------------------------
(0,)
(1,data)
(2,data)
(3,data)
(4,RET)
(5,data = 0)
(6,while(1)
(7,short)
(8,1)
(9,break;)
(10,data = (short)
(11,data)
(12,result)
(13,)
(14,break;)
(15,result)
(16,1)
(17,)
(18,(short)
(19,RAND32()
(20,0)
(21,data)
(22,printIntLine(result)
(23,data * data)
(24,result)
(25,)
(26,while(1)
(27,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^