-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,62,66,68,72,74
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_17_bad()
CWE190_Integer_Overflow__int_max_square_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,23,0)
(10,23,0)
(0,2,0)
(7,22,0)
(27,12,0)
(37,10,0)
(17,4,0)
(15,10,0)
(16,29,0)
(36,26,0)
(18,29,0)
(28,31,0)
(30,26,0)
(39,29,0)
(14,19,0)
(32,12,0)
(11,8,0)
(4,26,0)
(2,23,0)
(31,12,0)
(26,4,0)
(19,5,0)
(4,25,0)
(34,29,0)
(24,8,0)
(35,4,0)
(13,31,0)
(25,20,0)
(21,17,0)
(6,19,0)
(3,23,0)
(22,12,0)
(33,29,0)
(26,19,0)
(26,8,0)
(8,29,0)
(38,25,0)
(17,25,0)
(15,37,1)
(30,36,1)
(14,31,1)
(17,21,1)
(3,9,1)
(19,6,1)
(26,30,1)
(35,10,1)
(1,10,1)
(37,23,1)
(8,11,1)
(11,24,1)
(28,22,1)
(10,15,1)
(0,17,1)
(37,2,1)
(21,4,1)
(17,4,1)
(26,8,1)
(23,3,1)
(6,14,1)
(28,12,1)
(27,8,1)
(32,27,1)
(4,26,1)
(26,19,1)
(36,35,1)
(9,31,1)
(22,7,1)
(22,12,1)
(31,13,1)
(7,19,1)
(10,23,1)
(2,0,1)
(13,28,1)
(2,23,1)
(31,12,1)
(12,32,1)
(26,19,2)
(22,12,2)
(21,10,2)
(28,31,2)
(37,10,2)
(36,10,2)
(15,10,2)
(31,31,2)
(10,10,2)
(14,31,2)
(17,10,2)
(35,10,2)
(6,31,2)
(2,10,2)
(31,12,2)
(2,23,2)
(4,26,2)
(22,31,2)
(26,8,2)
(13,31,2)
(0,10,2)
(19,31,2)
(26,10,2)
(7,31,2)
(4,10,2)
(30,10,2)
(17,4,2)
(10,23,2)
-----------------------------------
(0,j)
(1,RET)
(2,j++)
(3,0)
(4,result = data * data)
(5,)
(6,INT_MAX)
(7,i)
(8,data = 0)
(9,j)
(10,j < 1)
(11,0)
(12,i = 0)
(13,1)
(14,data)
(15,1)
(16,data)
(17,printIntLine(result)
(18,for(i = 0; i < 1; i++)
(19,data = INT_MAX)
(20,)
(21,result)
(22,i++)
(23,j = 0)
(24,data)
(25,)
(26,data * data)
(27,i)
(28,i)
(29,)
(30,data)
(31,i < 1)
(32,0)
(33,i)
(34,j)
(35,result)
(36,data)
(37,j)
(38,result)
(39,for(j = 0; j < 1; j++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^