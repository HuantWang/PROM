-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (INT_MAX/2))
            {
                int result = data * 2;
                printIntLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
66,67
67,68
67,69
67,70
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
80,81
80,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,42,46,48,52,53,57,59,64,65,70,74,75,79,81,85,86,90,92,97,98
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
39,40
39,41
50,51
50,52
62,63
62,64
68,69
68,70
72,73
72,74
83,84
83,85
-----guardedBy-----
41,52
64,85
70,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_12_bad()
CWE190_Integer_Overflow__int_max_multiply_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (INT_MAX/2)
data
data
(INT_MAX/2)
INT_MAX/2
INT_MAX
INT_MAX
2
{                int result = data * 2;                printIntLine(result);            }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(38,29,0)
(10,34,0)
(0,5,0)
(51,23,0)
(33,29,0)
(27,54,0)
(0,4,0)
(29,4,0)
(34,54,0)
(40,22,0)
(43,15,0)
(49,4,0)
(22,48,0)
(19,18,0)
(52,53,0)
(5,55,0)
(41,53,0)
(25,0,0)
(42,0,0)
(24,32,0)
(13,50,0)
(8,9,0)
(6,49,0)
(3,50,0)
(46,9,0)
(32,12,0)
(45,36,0)
(21,20,0)
(11,51,0)
(51,5,0)
(16,53,0)
(39,5,0)
(29,5,0)
(50,53,0)
(4,47,0)
(28,48,0)
(9,4,0)
(8,48,0)
(1,4,0)
(49,5,0)
(34,18,0)
(51,4,0)
(17,5,0)
(22,8,0)
(23,51,0)
(2,49,0)
(18,29,0)
(31,23,0)
(9,8,0)
(9,5,0)
(37,23,0)
(14,4,0)
(44,8,0)
(7,9,0)
(18,54,0)
(29,18,0)
(29,5,1)
(9,5,1)
(30,5,1)
(35,49,1)
(37,31,1)
(0,4,1)
(35,34,1)
(22,8,1)
(25,42,1)
(14,1,1)
(9,7,1)
(33,38,1)
(23,37,1)
(51,5,1)
(46,44,1)
(31,11,1)
(34,18,1)
(30,4,1)
(35,0,1)
(4,14,1)
(17,26,1)
(29,4,1)
(49,4,1)
(5,39,1)
(51,4,1)
(34,10,1)
(49,5,1)
(29,33,1)
(35,32,1)
(6,2,1)
(19,51,1)
(40,8,1)
(9,4,1)
(51,23,1)
(42,30,1)
(44,0,1)
(38,19,1)
(50,13,1)
(39,17,1)
(49,6,1)
(18,29,1)
(10,18,1)
(7,46,1)
(0,25,1)
(26,50,1)
(1,26,1)
(24,51,1)
(2,30,1)
(32,24,1)
(35,22,1)
(22,40,1)
(8,9,1)
(11,49,1)
(13,3,1)
(0,5,1)
(10,51,2)
(0,30,2)
(14,26,2)
(0,4,2)
(34,51,2)
(25,30,2)
(33,51,2)
(8,0,2)
(5,26,2)
(34,18,2)
(8,9,2)
(29,51,2)
(44,0,2)
(49,30,2)
(51,5,2)
(2,30,2)
(1,26,2)
(51,4,2)
(39,26,2)
(49,5,2)
(18,51,2)
(9,5,2)
(38,51,2)
(29,4,2)
(24,51,2)
(49,4,2)
(9,0,2)
(23,49,2)
(4,26,2)
(46,0,2)
(22,0,2)
(32,51,2)
(11,49,2)
(17,26,2)
(51,23,2)
(7,0,2)
(22,8,2)
(42,30,2)
(40,0,2)
(51,49,2)
(6,30,2)
(31,49,2)
(29,5,2)
(18,29,2)
(37,49,2)
(0,5,2)
(9,4,2)
(19,51,2)
-----------------------------------
(0,data > 0)
(1,data)
(2,data)
(3,data)
(4,data = INT_MAX)
(5,data = 2)
(6,0)
(7,2)
(8,result = data * 2)
(9,data * 2)
(10,result)
(11,data)
(12,)
(13,0)
(14,INT_MAX)
(15,)
(16,if(globalReturnsTrueOrFalse()
(17,data)
(18,result = data * 2)
(19,result)
(20,)
(21,if(data > 0)
(22,printIntLine(result)
(23,INT_MAX/2)
(24,"data value is too large to perform arithmetic safely.")
(25,0)
(26,globalReturnsTrueOrFalse()
(27,result)
(28,result)
(29,data * 2)
(30,globalReturnsTrueOrFalse()
(31,INT_MAX)
(32,printLine("data value is too large to perform arithmetic safely.")
(33,2)
(34,printIntLine(result)
(35,RET)
(36,)
(37,2)
(38,data)
(39,2)
(40,result)
(41,data)
(42,data)
(43,if(data > 0)
(44,result)
(45,if (data < (INT_MAX/2)
(46,data)
(47,)
(48,)
(49,data > 0)
(50,data = 0)
(51,data < (INT_MAX/2)
(52,if(globalReturnsTrueOrFalse()
(53,)
(54,)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^