-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
        int64_t result = data * data;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
30,31
31,32
31,33
32,33
36,37
36,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
41,42
41,43
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
62,63
63,64
63,65
64,65
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,28,29,33,34,35,37,40,45,47,51,53,57,59,60,61,65,66,67
-----computeFrom-----
13,14
13,15
23,24
23,25
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_max_square_15_bad()
CWE190_Integer_Overflow__int64_t_max_square_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(3,1,0)
(29,1,0)
(28,24,0)
(21,25,0)
(8,7,0)
(14,22,0)
(26,33,0)
(25,7,0)
(9,7,0)
(10,25,0)
(13,4,0)
(6,33,0)
(7,25,0)
(7,24,0)
(16,29,0)
(25,26,0)
(22,33,0)
(23,33,0)
(24,1,0)
(12,4,0)
(32,33,0)
(15,10,0)
(30,26,0)
(19,4,0)
(0,24,0)
(18,4,0)
(27,33,0)
(17,1,0)
(10,26,0)
(20,1,0)
(2,1,0)
(22,14,1)
(27,22,1)
(24,28,1)
(5,17,1)
(9,8,1)
(29,16,1)
(10,15,1)
(7,9,1)
(16,11,1)
(5,20,1)
(6,10,1)
(15,25,1)
(31,6,1)
(21,5,1)
(7,24,1)
(25,7,1)
(0,11,1)
(28,0,1)
(14,5,1)
(11,12,1)
(17,24,1)
(20,29,1)
(31,27,1)
(8,21,1)
(10,25,1)
(24,11,2)
(7,24,2)
(14,5,2)
(17,11,2)
(8,5,2)
(16,11,2)
(28,11,2)
(9,5,2)
(0,11,2)
(25,5,2)
(29,11,2)
(27,5,2)
(15,5,2)
(7,5,2)
(10,25,2)
(20,11,2)
(6,5,2)
(25,7,2)
(10,5,2)
(21,5,2)
(22,5,2)
-----------------------------------
(0,data)
(1,)
(2,default:)
(3,case 6:)
(4,)
(5,7)
(6,break;)
(7,data * data)
(8,data)
(9,data)
(10,printLongLongLine(result)
(11,6)
(12,L)
(13,data)
(14,"Benign, fixed string")
(15,result)
(16,"Benign, fixed string")
(17,break;)
(18,switch(7)
(19,switch(6)
(20,break;)
(21,result)
(22,printLine("Benign, fixed string")
(23,case 7:)
(24,data = LLONG_MAX)
(25,result = data * data)
(26,)
(27,break;)
(28,LLONG_MAX)
(29,printLine("Benign, fixed string")
(30,result)
(31,RET)
(32,default:)
(33,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^