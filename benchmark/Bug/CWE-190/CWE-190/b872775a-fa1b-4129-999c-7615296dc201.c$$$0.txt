-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,37,41,43,47,48,52,54,55
-----computeFrom-----
12,13
12,14
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_16_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(19,11,0)
(17,11,0)
(3,8,0)
(27,5,0)
(24,12,0)
(1,21,0)
(6,29,0)
(4,29,0)
(12,17,0)
(15,12,0)
(16,0,0)
(26,31,0)
(22,26,0)
(9,31,0)
(10,19,0)
(5,26,0)
(17,12,0)
(2,17,0)
(20,0,0)
(12,8,0)
(28,11,0)
(30,21,0)
(7,21,0)
(11,21,0)
(0,26,0)
(0,11,0)
(26,0,0)
(5,31,0)
(23,19,0)
(13,11,0)
(3,12,1)
(6,19,1)
(19,10,1)
(22,19,1)
(24,18,1)
(11,28,1)
(28,13,1)
(26,0,1)
(6,5,1)
(17,11,1)
(23,14,1)
(15,24,1)
(16,20,1)
(14,3,1)
(12,17,1)
(0,16,1)
(5,27,1)
(20,22,1)
(17,2,1)
(27,26,1)
(0,11,1)
(19,11,1)
(10,23,1)
(18,11,1)
(5,26,1)
(2,15,1)
(14,18,1)
(25,14,1)
(25,6,1)
(23,14,2)
(19,11,2)
(20,19,2)
(17,11,2)
(22,19,2)
(12,17,2)
(3,18,2)
(12,18,2)
(10,14,2)
(26,19,2)
(5,19,2)
(6,14,2)
(24,18,2)
(2,18,2)
(26,0,2)
(17,18,2)
(0,11,2)
(0,19,2)
(27,19,2)
(5,26,2)
(15,18,2)
(19,14,2)
(16,19,2)
-----------------------------------
(0,data * 2)
(1,while(1)
(2,data)
(3,break;)
(4,if(data > 0)
(5,printHexCharLine(result)
(6,break;)
(7,data)
(8,)
(9,result)
(10,0)
(11,data = \\\' \\\')
(12,fscanf (stdin, "%c", &data)
(13,data)
(14,1)
(15,"%c")
(16,2)
(17,&data)
(18,1)
(19,data > 0)
(20,data)
(21,)
(22,result)
(23,data)
(24,stdin)
(25,RET)
(26,result = data * 2)
(27,result)
(28,\\\' \\\')
(29,)
(30,while(1)
(31,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^