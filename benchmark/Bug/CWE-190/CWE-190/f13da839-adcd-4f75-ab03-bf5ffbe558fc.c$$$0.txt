-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        unsigned int result = data;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,48,51,53,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_15_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_preinc_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        unsigned int result = data;        printUnsignedLine(result);    }
++data;
++data
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(4,3,0)
(1,10,0)
(29,15,0)
(20,30,0)
(34,19,0)
(31,19,0)
(30,20,0)
(23,10,0)
(22,15,0)
(36,15,0)
(13,36,0)
(24,19,0)
(21,20,0)
(11,19,0)
(10,3,0)
(30,19,0)
(12,1,0)
(20,36,0)
(26,10,0)
(35,30,0)
(2,3,0)
(23,36,0)
(37,23,0)
(27,26,0)
(17,26,0)
(25,36,0)
(0,3,0)
(28,19,0)
(33,10,0)
(8,3,0)
(7,31,0)
(1,26,0)
(5,3,0)
(26,36,0)
(32,4,0)
(14,15,0)
(16,30,0)
(9,36,1)
(16,9,1)
(34,31,1)
(0,4,1)
(21,35,1)
(23,37,1)
(18,34,1)
(6,8,1)
(1,26,1)
(8,1,1)
(36,13,1)
(35,16,1)
(26,36,1)
(31,7,1)
(7,9,1)
(37,18,1)
(13,25,1)
(26,17,1)
(4,32,1)
(18,24,1)
(1,12,1)
(24,30,1)
(23,36,1)
(20,21,1)
(20,36,1)
(12,26,1)
(27,23,1)
(32,18,1)
(17,27,1)
(6,0,1)
(30,20,1)
(20,36,2)
(31,9,2)
(32,18,2)
(30,9,2)
(30,20,2)
(1,26,2)
(37,18,2)
(0,18,2)
(4,18,2)
(21,9,2)
(27,18,2)
(35,9,2)
(24,9,2)
(23,18,2)
(17,18,2)
(8,18,2)
(26,18,2)
(20,9,2)
(34,9,2)
(1,18,2)
(12,18,2)
(7,9,2)
(26,36,2)
(16,9,2)
(23,36,2)
-----------------------------------
(0,break;)
(1,printUnsignedLine(result)
(2,case 7:)
(3,)
(4,printLine("Benign, fixed string")
(5,default:)
(6,RET)
(7,"Benign, fixed string")
(8,break;)
(9,6)
(10,)
(11,case 6:)
(12,result)
(13,0)
(14,data)
(15,)
(16,stdin)
(17,data)
(18,7)
(19,)
(20,&data)
(21,data)
(22,switch(7)
(23,++data)
(24,break;)
(25,data)
(26,result = data)
(27,result)
(28,default:)
(29,switch(6)
(30,fscanf (stdin, "%u", &data)
(31,printLine("Benign, fixed string")
(32,"Benign, fixed string")
(33,result)
(34,break;)
(35,"%u")
(36,data = 0)
(37,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^