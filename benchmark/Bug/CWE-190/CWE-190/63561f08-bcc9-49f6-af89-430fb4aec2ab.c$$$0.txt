-----label-----
1
-----code-----
static void badSink(short data)
{
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
16,17
17,18
17,19
19,20
19,21
21,22
22,23
22,24
23,24
26,27
27,28
27,29
28,29
30,31
-----nextToken-----
2,4,6,8,13,14,18,20,24,25,29,31
-----computeFrom-----
11,12
11,13
22,23
22,24
-----guardedBy-----
13,24
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(short data){    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
static void
badSink(short data)
badSink
short data
short
data
data
{    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,2,0)
(2,15,0)
(4,12,0)
(7,0,0)
(11,10,0)
(5,2,0)
(10,0,0)
(13,8,0)
(10,8,0)
(8,0,0)
(2,8,0)
(1,12,0)
(9,14,0)
(12,15,0)
(6,2,0)
(10,11,1)
(8,2,1)
(4,1,1)
(13,12,1)
(11,8,1)
(12,4,1)
(10,8,1)
(6,13,1)
(3,10,1)
(2,15,1)
(3,12,1)
(5,6,1)
(2,5,1)
(12,15,1)
(11,12,2)
(6,12,2)
(13,12,2)
(2,15,2)
(2,12,2)
(8,12,2)
(10,8,2)
(5,12,2)
(12,15,2)
(10,12,2)
(8,2,2)
-----------------------------------
(0,)
(1,data)
(2,data * 2)
(3,RET)
(4,0)
(5,2)
(6,data)
(7,result)
(8,result = data * 2)
(9,if(data > 0)
(10,printIntLine(result)
(11,result)
(12,data > 0)
(13,result)
(14,)
(15,short data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^