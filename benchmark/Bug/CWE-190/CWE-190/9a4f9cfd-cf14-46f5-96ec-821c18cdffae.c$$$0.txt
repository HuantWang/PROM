-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_42_bad()
{
    int64_t data;
    data = 0LL;
    data = badSource(data);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
        int64_t result = data * 2;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,30,35,37,41,42,46,48
-----computeFrom-----
13,14
13,15
18,19
18,20
27,28
27,29
39,40
39,41
-----guardedBy-----
29,41
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_42_bad(){    int64_t data;    data = 0LL;    data = badSource(data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_42_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_42_bad
{    int64_t data;    data = 0LL;    data = badSource(data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(1,0,0)
(19,0,0)
(17,0,0)
(18,15,0)
(16,14,0)
(3,15,0)
(10,9,0)
(14,9,0)
(8,14,0)
(15,17,0)
(9,2,0)
(13,9,0)
(17,5,0)
(7,5,0)
(4,0,0)
(5,17,0)
(9,14,0)
(20,17,0)
(11,2,0)
(6,10,0)
(14,17,0)
(10,2,0)
(12,10,1)
(15,18,1)
(10,6,1)
(6,9,1)
(12,15,1)
(15,17,1)
(14,16,1)
(9,14,1)
(8,13,1)
(14,17,1)
(16,8,1)
(5,7,1)
(3,17,1)
(7,20,1)
(17,5,1)
(13,15,1)
(10,9,1)
(20,19,1)
(18,3,1)
(14,15,2)
(6,15,2)
(10,15,2)
(9,15,2)
(9,14,2)
(8,15,2)
(10,9,2)
(14,17,2)
(16,15,2)
(13,15,2)
(17,5,2)
(15,17,2)
-----------------------------------
(0,)
(1,if(data > 0)
(2,)
(3,data)
(4,data)
(5,badSource(data)
(6,result)
(7,data)
(8,data)
(9,result = data * 2)
(10,printLongLongLine(result)
(11,result)
(12,RET)
(13,result)
(14,data * 2)
(15,data > 0)
(16,2)
(17,data = badSource(data)
(18,0)
(19,L)
(20,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^