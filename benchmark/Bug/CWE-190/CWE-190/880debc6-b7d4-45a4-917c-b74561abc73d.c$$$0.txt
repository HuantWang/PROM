-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_01_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
27,28
27,29
28,29
31,32
31,33
32,33
33,34
33,35
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,30,34,36,40,41,45,47
-----computeFrom-----
12,13
12,14
27,28
27,29
38,39
38,40
-----guardedBy-----
29,40
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_01_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_01_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_01_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,9,0)
(10,7,0)
(16,11,0)
(0,10,0)
(18,7,0)
(12,10,0)
(3,12,0)
(4,20,0)
(9,19,0)
(22,10,0)
(8,12,0)
(12,11,0)
(17,6,0)
(16,20,0)
(13,6,0)
(9,7,0)
(6,10,0)
(5,9,0)
(11,20,0)
(19,10,0)
(14,11,0)
(1,16,0)
(23,7,0)
(11,12,0)
(19,9,0)
(15,19,0)
(6,10,1)
(11,12,1)
(0,22,1)
(19,10,1)
(16,1,1)
(12,8,1)
(6,17,1)
(19,15,1)
(15,5,1)
(16,11,1)
(14,6,1)
(2,6,1)
(10,0,1)
(2,16,1)
(3,14,1)
(8,3,1)
(12,10,1)
(21,10,1)
(17,13,1)
(5,21,1)
(1,11,1)
(13,9,1)
(9,19,1)
(12,6,2)
(19,10,2)
(11,6,2)
(16,11,2)
(9,19,2)
(1,6,2)
(11,12,2)
(12,10,2)
(8,6,2)
(6,10,2)
(14,6,2)
(16,6,2)
(3,6,2)
-----------------------------------
(0,0)
(1,result)
(2,RET)
(3,data)
(4,result)
(5,"%hd")
(6,data > 0)
(7,)
(8,2)
(9,fscanf (stdin, "%hd", &data)
(10,data = 0)
(11,result = data * 2)
(12,data * 2)
(13,data)
(14,result)
(15,data)
(16,printIntLine(result)
(17,0)
(18,data)
(19,&data)
(20,)
(21,stdin)
(22,data)
(23,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^