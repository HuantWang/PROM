-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,40,41,45,47,51,52,56,58
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
38,39
38,40
49,50
49,51
-----guardedBy-----
40,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_03_bad()
CWE190_Integer_Overflow__char_rand_multiply_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(14,16,0)
(29,15,0)
(3,16,0)
(30,6,0)
(32,22,0)
(4,31,0)
(8,15,0)
(13,27,0)
(11,7,0)
(34,31,0)
(0,16,0)
(17,6,0)
(28,12,0)
(16,31,0)
(1,14,0)
(13,32,0)
(11,12,0)
(14,13,0)
(22,32,0)
(32,13,0)
(33,7,0)
(7,12,0)
(3,7,0)
(3,13,0)
(21,3,0)
(32,24,0)
(23,3,0)
(9,11,0)
(5,16,0)
(24,32,0)
(10,13,0)
(7,3,0)
(18,14,0)
(25,31,0)
(2,19,0)
(1,18,1)
(14,1,1)
(23,21,1)
(8,16,1)
(13,32,1)
(32,22,1)
(21,33,1)
(30,13,1)
(14,16,1)
(9,7,1)
(18,6,1)
(20,14,1)
(16,0,1)
(33,14,1)
(30,15,1)
(15,29,1)
(10,15,1)
(32,24,1)
(0,5,1)
(29,8,1)
(17,30,1)
(3,13,1)
(7,3,1)
(3,16,1)
(22,10,1)
(14,13,1)
(11,7,1)
(20,11,1)
(11,9,1)
(3,23,1)
(6,17,1)
(20,6,1)
(22,15,2)
(14,6,2)
(1,6,2)
(14,16,2)
(3,13,2)
(10,15,2)
(13,32,2)
(3,16,2)
(7,14,2)
(18,6,2)
(13,15,2)
(21,14,2)
(23,14,2)
(32,24,2)
(3,14,2)
(9,14,2)
(32,22,2)
(11,7,2)
(33,14,2)
(14,13,2)
(11,14,2)
(32,15,2)
(7,3,2)
-----------------------------------
(0,' ')
(1,0)
(2,if(data > 0)
(3,data * 2)
(4,data)
(5,data)
(6,5==5)
(7,result = data * 2)
(8,5)
(9,result)
(10,data)
(11,printHexCharLine(result)
(12,)
(13,data = (char)
(14,data > 0)
(15,5==5)
(16,data = \' \')
(17,5)
(18,data)
(19,)
(20,RET)
(21,data)
(22,RAND32()
(23,2)
(24,char)
(25,if(5==5)
(26,data = ' ')
(27,)
(28,result)
(29,5)
(30,5)
(31,)
(32,(char)
(33,result)
(34,if(5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^