-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_03_bad()
CWE190_Integer_Overflow__int_max_multiply_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,24,0)
(13,6,0)
(2,31,0)
(18,31,0)
(12,13,0)
(1,6,0)
(15,17,0)
(25,28,0)
(17,29,0)
(11,24,0)
(17,13,0)
(13,29,0)
(5,28,0)
(10,24,0)
(0,27,0)
(3,6,0)
(9,29,0)
(21,8,0)
(6,8,0)
(4,8,0)
(30,23,0)
(24,26,0)
(11,8,0)
(6,13,0)
(14,11,0)
(8,27,0)
(20,27,0)
(19,27,0)
(16,11,0)
(6,24,0)
(2,18,1)
(25,8,1)
(11,14,1)
(11,8,1)
(10,7,1)
(18,28,1)
(6,24,1)
(22,31,1)
(8,4,1)
(13,6,1)
(1,12,1)
(7,28,1)
(31,2,1)
(24,10,1)
(6,3,1)
(14,16,1)
(18,24,1)
(3,1,1)
(12,11,1)
(6,8,1)
(28,5,1)
(11,24,1)
(15,13,1)
(22,17,1)
(17,13,1)
(22,11,1)
(17,15,1)
(4,21,1)
(5,25,1)
(16,31,1)
(16,31,2)
(3,11,2)
(1,11,2)
(17,13,2)
(11,8,2)
(7,28,2)
(12,11,2)
(10,28,2)
(6,11,2)
(24,28,2)
(17,11,2)
(6,8,2)
(14,31,2)
(15,11,2)
(11,31,2)
(13,6,2)
(13,11,2)
(6,24,2)
(11,24,2)
-----------------------------------
(0,if(5==5)
(1,data)
(2,5)
(3,2)
(4,0)
(5,5)
(6,data * 2)
(7,data)
(8,data = 0)
(9,result)
(10,INT_MAX)
(11,data > 0)
(12,result)
(13,result = data * 2)
(14,0)
(15,result)
(16,data)
(17,printIntLine(result)
(18,5)
(19,if(5==5)
(20,data)
(21,data)
(22,RET)
(23,)
(24,data = INT_MAX)
(25,5)
(26,)
(27,)
(28,5==5)
(29,)
(30,if(data > 0)
(31,5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^