-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,37,41,43,47,48,52,54,55
-----computeFrom-----
12,13
12,14
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_16_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(25,13,0)
(11,6,0)
(18,13,0)
(12,28,0)
(7,10,0)
(29,2,0)
(19,10,0)
(22,1,0)
(5,24,0)
(28,21,0)
(9,17,0)
(16,24,0)
(13,21,0)
(24,5,0)
(17,2,0)
(9,2,0)
(30,5,0)
(26,10,0)
(23,21,0)
(3,24,0)
(8,21,0)
(20,6,0)
(13,17,0)
(24,1,0)
(5,21,0)
(15,9,0)
(0,28,0)
(21,10,0)
(17,13,0)
(27,17,0)
(8,23,1)
(4,14,1)
(28,0,1)
(20,9,1)
(25,27,1)
(31,20,1)
(9,15,1)
(13,21,1)
(16,14,1)
(14,21,1)
(31,4,1)
(20,28,1)
(27,28,1)
(3,16,1)
(30,3,1)
(21,8,1)
(9,17,1)
(18,25,1)
(15,17,1)
(13,18,1)
(5,30,1)
(28,21,1)
(4,22,1)
(17,13,1)
(5,21,1)
(0,12,1)
(24,5,1)
(12,4,1)
(22,24,1)
(25,28,2)
(5,14,2)
(28,21,2)
(20,4,2)
(15,28,2)
(12,4,2)
(17,13,2)
(24,14,2)
(18,28,2)
(17,28,2)
(22,14,2)
(9,28,2)
(5,21,2)
(0,4,2)
(3,14,2)
(13,21,2)
(13,28,2)
(30,14,2)
(27,28,2)
(9,17,2)
(28,4,2)
(16,14,2)
(24,5,2)
-----------------------------------
(0,0)
(1,)
(2,)
(3,"%d")
(4,1)
(5,&data)
(6,)
(7,while(1)
(8,0)
(9,printIntLine(result)
(10,)
(11,if(data > 0)
(12,data)
(13,data * 2)
(14,1)
(15,result)
(16,stdin)
(17,result = data * 2)
(18,2)
(19,while(1)
(20,break;)
(21,data = 0)
(22,break;)
(23,data)
(24,fscanf(stdin, "%d", &data)
(25,data)
(26,data)
(27,result)
(28,data > 0)
(29,result)
(30,data)
(31,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^