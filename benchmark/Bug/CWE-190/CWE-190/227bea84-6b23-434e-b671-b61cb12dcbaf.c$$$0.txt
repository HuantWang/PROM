-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_31_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    {
        int dataCopy = data;
        int data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
21,22
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
29,30
30,31
32,33
33,34
33,35
35,36
35,37
37,38
38,39
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,8,10,14,15,19,22,26,28,31,34,36,39,43,44,48,50,54,55,59,61
-----computeFrom-----
12,13
12,14
17,18
17,19
41,42
41,43
52,53
52,54
-----guardedBy-----
43,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_31_bad(){    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_31_bad()
CWE190_Integer_Overflow__int_rand_multiply_31_bad
{    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    {        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(2,16,0)
(25,8,0)
(24,23,0)
(15,28,0)
(12,14,0)
(12,22,0)
(23,1,0)
(23,28,0)
(8,28,0)
(27,12,0)
(16,15,0)
(11,16,0)
(18,22,0)
(14,2,0)
(7,16,0)
(14,22,0)
(10,15,0)
(29,23,0)
(4,15,0)
(6,15,0)
(16,24,0)
(30,2,0)
(1,23,0)
(0,24,0)
(21,24,0)
(13,28,0)
(19,16,0)
(26,19,0)
(20,19,0)
(9,8,0)
(17,14,0)
(3,2,0)
(2,14,0)
(24,15,0)
(19,16,1)
(1,29,1)
(3,30,1)
(5,19,1)
(26,16,1)
(21,23,1)
(29,8,1)
(24,23,1)
(0,21,1)
(7,11,1)
(8,25,1)
(16,24,1)
(11,24,1)
(12,14,1)
(17,19,1)
(12,27,1)
(19,20,1)
(2,16,1)
(23,1,1)
(27,14,1)
(16,7,1)
(5,12,1)
(30,17,1)
(25,9,1)
(20,26,1)
(2,3,1)
(24,0,1)
(14,2,1)
(14,19,2)
(12,19,2)
(3,19,2)
(16,24,2)
(2,16,2)
(30,19,2)
(23,1,2)
(12,14,2)
(14,2,2)
(19,16,2)
(24,23,2)
(27,19,2)
(2,19,2)
(17,19,2)
-----------------------------------
(0,data)
(1,RAND32()
(2,data * 2)
(3,2)
(4,dataCopy)
(5,RET)
(6,data)
(7,dataCopy)
(8,data = 0)
(9,data)
(10,if(data > 0)
(11,data)
(12,printIntLine(result)
(13,data)
(14,result = data * 2)
(15,)
(16,data = dataCopy)
(17,result)
(18,result)
(19,data > 0)
(20,0)
(21,dataCopy)
(22,)
(23,data = RAND32()
(24,dataCopy = data)
(25,0)
(26,data)
(27,result)
(28,)
(29,data)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^