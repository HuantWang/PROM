-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_17_bad()
{
    int i,j;
    unsigned int data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,62,66,68,72,74
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_17_bad(){    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_17_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_17_bad
{    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(33,8,0)
(6,18,0)
(32,14,0)
(23,26,0)
(14,3,0)
(10,18,0)
(25,11,0)
(24,14,0)
(7,16,0)
(37,38,0)
(39,38,0)
(29,4,0)
(35,5,0)
(27,4,0)
(12,8,0)
(18,8,0)
(30,26,0)
(9,5,0)
(16,26,0)
(8,4,0)
(28,14,0)
(11,38,0)
(34,4,0)
(18,20,0)
(20,2,0)
(28,18,0)
(13,39,0)
(0,11,0)
(5,26,0)
(19,32,0)
(36,4,0)
(22,20,0)
(17,20,0)
(15,38,0)
(21,4,0)
(32,28,0)
(18,28,0)
(31,28,0)
(18,20,1)
(0,39,1)
(20,17,1)
(18,8,1)
(39,38,1)
(32,28,1)
(5,9,1)
(0,38,1)
(19,28,1)
(28,18,1)
(6,31,1)
(38,15,1)
(30,11,1)
(31,5,1)
(5,26,1)
(7,32,1)
(35,16,1)
(17,22,1)
(23,30,1)
(8,12,1)
(10,6,1)
(9,35,1)
(39,13,1)
(13,20,1)
(35,26,1)
(1,5,1)
(12,33,1)
(18,10,1)
(15,37,1)
(37,8,1)
(16,26,1)
(11,38,1)
(16,7,1)
(26,23,1)
(25,0,1)
(11,25,1)
(32,19,1)
(22,11,1)
(11,11,2)
(18,5,2)
(32,5,2)
(13,11,2)
(19,5,2)
(32,28,2)
(18,20,2)
(5,26,2)
(16,26,2)
(16,5,2)
(22,11,2)
(7,5,2)
(31,5,2)
(6,5,2)
(25,11,2)
(39,38,2)
(17,11,2)
(0,11,2)
(9,5,2)
(28,18,2)
(35,5,2)
(18,8,2)
(28,5,2)
(5,5,2)
(39,11,2)
(20,11,2)
(11,38,2)
(10,5,2)
-----------------------------------
(0,i)
(1,RET)
(2,)
(3,)
(4,)
(5,j < 1)
(6,data)
(7,j)
(8,data = 0)
(9,1)
(10,data)
(11,i < 1)
(12,0)
(13,i)
(14,)
(15,0)
(16,j++)
(17,UINT_MAX)
(18,data * data)
(19,result)
(20,data = UINT_MAX)
(21,i)
(22,data)
(23,0)
(24,result)
(25,1)
(26,j = 0)
(27,j)
(28,result = data * data)
(29,for(j = 0; j < 1; j++)
(30,j)
(31,result)
(32,printUnsignedLine(result)
(33,data)
(34,for(i = 0; i < 1; i++)
(35,j)
(36,data)
(37,i)
(38,i = 0)
(39,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^