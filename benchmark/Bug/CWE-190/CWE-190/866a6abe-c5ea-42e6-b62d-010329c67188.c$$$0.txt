-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_postinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            data++;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_postinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fscanf_postinc_12_bad()
CWE190_Integer_Overflow__int_fscanf_postinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(7,3,0)
(29,31,0)
(34,42,0)
(23,5,0)
(31,44,0)
(21,28,0)
(5,14,0)
(19,26,0)
(10,45,0)
(24,22,0)
(32,27,0)
(6,28,0)
(20,32,0)
(17,15,0)
(0,31,0)
(39,26,0)
(32,15,0)
(9,3,0)
(3,26,0)
(15,27,0)
(41,35,0)
(35,26,0)
(35,14,0)
(42,13,0)
(30,15,0)
(14,38,0)
(26,45,0)
(5,35,0)
(2,36,0)
(28,21,0)
(3,31,0)
(28,33,0)
(1,4,0)
(43,21,0)
(15,31,0)
(25,35,0)
(15,26,0)
(4,14,0)
(8,45,0)
(36,27,0)
(16,45,0)
(36,26,0)
(18,27,0)
(36,31,0)
(37,28,0)
(35,31,0)
(40,14,0)
(4,26,0)
(4,31,0)
(21,26,0)
(2,3,1)
(11,32,1)
(29,12,1)
(5,35,1)
(19,39,1)
(46,31,1)
(5,23,1)
(9,7,1)
(31,0,1)
(15,30,1)
(23,35,1)
(20,15,1)
(32,15,1)
(36,2,1)
(4,1,1)
(21,26,1)
(34,3,1)
(35,41,1)
(12,26,1)
(7,46,1)
(21,43,1)
(35,31,1)
(30,17,1)
(15,26,1)
(42,34,1)
(25,4,1)
(35,26,1)
(11,5,1)
(28,21,1)
(26,19,1)
(1,46,1)
(4,31,1)
(6,12,1)
(3,9,1)
(3,26,1)
(0,29,1)
(11,42,1)
(36,31,1)
(3,31,1)
(41,25,1)
(15,31,1)
(4,26,1)
(37,6,1)
(17,36,1)
(36,26,1)
(46,28,1)
(43,37,1)
(32,20,1)
(31,12,2)
(15,3,2)
(32,15,2)
(5,46,2)
(4,31,2)
(3,26,2)
(28,12,2)
(6,12,2)
(15,26,2)
(34,3,2)
(43,12,2)
(42,3,2)
(30,3,2)
(35,46,2)
(9,46,2)
(4,46,2)
(3,31,2)
(35,26,2)
(36,31,2)
(29,12,2)
(35,31,2)
(17,3,2)
(41,46,2)
(1,46,2)
(36,3,2)
(23,46,2)
(15,31,2)
(3,46,2)
(4,26,2)
(28,21,2)
(5,35,2)
(21,26,2)
(0,12,2)
(7,46,2)
(2,3,2)
(20,3,2)
(37,12,2)
(25,46,2)
(21,12,2)
(32,3,2)
(36,26,2)
-----------------------------------
(0,2)
(1,data)
(2,data)
(3,data < INT_MAX)
(4,data++)
(5,printIntLine(result)
(6,stdin)
(7,data)
(8,data)
(9,INT_MAX)
(10,if(globalReturnsTrueOrFalse()
(11,RET)
(12,globalReturnsTrueOrFalse()
(13,)
(14,)
(15,result = data)
(16,if(globalReturnsTrueOrFalse()
(17,result)
(18,result)
(19,0)
(20,result)
(21,&data)
(22,)
(23,result)
(24,if (data < INT_MAX)
(25,result)
(26,data = 0)
(27,)
(28,fscanf(stdin, "%d", &data)
(29,data)
(30,data)
(31,data = 2)
(32,printIntLine(result)
(33,)
(34,"data value is too large to perform arithmetic safely.")
(35,result = data)
(36,data++)
(37,"%d")
(38,)
(39,data)
(40,result)
(41,data)
(42,printLine("data value is too large to perform arithmetic safely.")
(43,data)
(44,)
(45,)
(46,globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^