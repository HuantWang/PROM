-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_fscanf_multiply_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
52,54
53,54
56,57
56,58
57,58
58,59
58,60
60,61
60,62
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,55,59,61,65,66,70,72
-----computeFrom-----
18,19
18,20
33,34
33,35
52,53
52,54
63,64
63,65
-----guardedBy-----
54,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_34_bad(){    int data;    CWE190_Integer_Overflow__int_fscanf_multiply_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_34_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_34_bad
{    int data;    CWE190_Integer_Overflow__int_fscanf_multiply_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int_fscanf_multiply_34_unionType
CWE190_Integer_Overflow__int_fscanf_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(31,13,0)
(19,25,0)
(28,23,0)
(32,1,0)
(15,1,0)
(25,16,0)
(6,5,0)
(16,5,0)
(30,8,0)
(32,28,0)
(18,32,0)
(22,13,0)
(21,13,0)
(8,13,0)
(11,28,0)
(26,27,0)
(14,24,0)
(17,25,0)
(16,25,0)
(4,13,0)
(29,31,0)
(5,13,0)
(7,23,0)
(36,22,0)
(12,31,0)
(33,27,0)
(3,30,0)
(10,8,0)
(8,30,0)
(24,16,0)
(35,16,0)
(30,31,0)
(27,22,0)
(23,16,0)
(23,28,0)
(0,24,0)
(20,8,0)
(9,23,0)
(22,31,0)
(28,1,0)
(2,5,0)
(7,11,1)
(3,20,1)
(27,33,1)
(22,31,1)
(8,30,1)
(16,25,1)
(22,36,1)
(24,0,1)
(18,28,1)
(28,23,1)
(14,16,1)
(32,18,1)
(30,3,1)
(11,24,1)
(10,31,1)
(9,7,1)
(23,9,1)
(12,29,1)
(24,16,1)
(36,27,1)
(30,31,1)
(34,24,1)
(19,17,1)
(20,10,1)
(32,28,1)
(34,32,1)
(33,26,1)
(23,16,1)
(26,8,1)
(35,22,1)
(31,12,1)
(25,19,1)
(17,35,1)
(0,14,1)
(23,24,2)
(22,31,2)
(9,24,2)
(30,31,2)
(23,16,2)
(28,24,2)
(32,28,2)
(8,30,2)
(18,24,2)
(32,24,2)
(28,23,2)
(16,25,2)
(11,24,2)
(24,16,2)
(7,24,2)
-----------------------------------
(0,0)
(1,)
(2,data)
(3,data)
(4,data)
(5,)
(6,if(data > 0)
(7,data)
(8,fscanf(stdin, "%d", &data)
(9,2)
(10,stdin)
(11,result)
(12,0)
(13,)
(14,data)
(15,result)
(16,data = myUnion.unionSecond)
(17,myUnion)
(18,result)
(19,unionSecond)
(20,"%d")
(21,myUnion)
(22,myUnion.unionFirst = data)
(23,data * 2)
(24,data > 0)
(25,myUnion.unionSecond)
(26,myUnion)
(27,myUnion.unionFirst)
(28,result = data * 2)
(29,data)
(30,&data)
(31,data = 0)
(32,printIntLine(result)
(33,unionFirst)
(34,RET)
(35,data)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^