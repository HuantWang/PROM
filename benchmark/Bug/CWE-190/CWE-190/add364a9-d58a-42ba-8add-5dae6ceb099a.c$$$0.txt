-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
32,35
33,34
34,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,36,39,41,44,48,50
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_08_bad()
CWE190_Integer_Overflow__char_max_postinc_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,8,0)
(14,21,0)
(0,10,0)
(17,0,0)
(24,18,0)
(10,13,0)
(0,13,0)
(13,1,0)
(20,22,0)
(4,22,0)
(19,10,0)
(15,5,0)
(21,5,0)
(21,18,0)
(7,10,0)
(12,5,0)
(10,5,0)
(21,13,0)
(9,18,0)
(16,13,0)
(11,22,0)
(10,18,0)
(5,22,0)
(21,18,1)
(10,18,1)
(0,17,1)
(7,19,1)
(5,15,1)
(0,10,1)
(18,24,1)
(24,9,1)
(17,10,1)
(10,7,1)
(23,2,1)
(15,12,1)
(3,0,1)
(10,5,1)
(23,18,1)
(9,2,1)
(21,5,1)
(14,23,1)
(3,23,1)
(21,14,1)
(2,5,1)
(19,21,1)
(0,10,2)
(18,2,2)
(24,2,2)
(7,23,2)
(10,18,2)
(21,5,2)
(10,23,2)
(19,23,2)
(21,23,2)
(21,18,2)
(17,23,2)
(10,5,2)
(14,23,2)
(9,2,2)
(0,23,2)
-----------------------------------
(0,printHexCharLine(result)
(1,)
(2,staticReturnsTrue()
(3,RET)
(4,if(staticReturnsTrue()
(5,data = ' ')
(6,data = \' \')
(7,data)
(8,)
(9,data)
(10,result = data)
(11,if(staticReturnsTrue()
(12,data)
(13,)
(14,data)
(15,' ')
(16,result)
(17,result)
(18,data = CHAR_MAX)
(19,result)
(20,data)
(21,data++)
(22,)
(23,staticReturnsTrue()
(24,CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^