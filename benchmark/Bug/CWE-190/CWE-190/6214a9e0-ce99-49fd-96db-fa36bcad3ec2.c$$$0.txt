-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
22,23
22,24
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_08_bad()
CWE190_Integer_Overflow__short_max_multiply_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(1,24,0)
(17,13,0)
(10,14,0)
(14,18,0)
(11,22,0)
(6,11,0)
(26,14,0)
(4,12,0)
(24,18,0)
(16,22,0)
(11,13,0)
(20,18,0)
(0,13,0)
(22,15,0)
(14,10,0)
(3,10,0)
(10,13,0)
(10,22,0)
(2,27,0)
(5,27,0)
(23,22,0)
(13,27,0)
(7,10,0)
(9,27,0)
(19,11,0)
(24,14,0)
(8,11,1)
(24,1,1)
(21,13,1)
(10,13,1)
(25,21,1)
(11,22,1)
(13,17,1)
(19,6,1)
(24,14,1)
(7,26,1)
(26,11,1)
(16,21,1)
(8,25,1)
(10,3,1)
(11,13,1)
(10,22,1)
(3,7,1)
(23,16,1)
(6,25,1)
(17,0,1)
(14,10,1)
(22,23,1)
(11,19,1)
(25,22,1)
(8,24,1)
(1,14,1)
(1,11,2)
(14,11,2)
(26,11,2)
(10,22,2)
(11,22,2)
(7,11,2)
(10,11,2)
(24,11,2)
(19,25,2)
(6,25,2)
(16,21,2)
(14,10,2)
(23,21,2)
(11,13,2)
(10,13,2)
(22,21,2)
(11,25,2)
(3,11,2)
(24,14,2)
-----------------------------------
(0,data)
(1,result)
(2,if(staticReturnsTrue()
(3,2)
(4,if(data > 0)
(5,data)
(6,data)
(7,data)
(8,RET)
(9,if(staticReturnsTrue()
(10,data * 2)
(11,data > 0)
(12,)
(13,data = 0)
(14,result = data * 2)
(15,)
(16,data)
(17,0)
(18,)
(19,0)
(20,result)
(21,staticReturnsTrue()
(22,data = SHRT_MAX)
(23,SHRT_MAX)
(24,printIntLine(result)
(25,staticReturnsTrue()
(26,result)
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^