-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_14_bad()
CWE190_Integer_Overflow__char_rand_square_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(3,4,0)
(4,3,0)
(11,3,0)
(4,27,0)
(8,22,0)
(7,13,0)
(1,13,0)
(12,27,0)
(26,22,0)
(17,13,0)
(16,4,0)
(21,20,0)
(24,13,0)
(27,12,0)
(9,17,0)
(28,19,0)
(29,27,0)
(19,18,0)
(11,19,0)
(3,19,0)
(6,12,0)
(10,11,0)
(12,15,0)
(27,14,0)
(0,20,0)
(2,4,0)
(5,3,0)
(25,17,0)
(4,17,0)
(15,12,0)
(12,6,0)
(2,16,1)
(11,3,1)
(15,29,1)
(4,17,1)
(12,15,1)
(20,0,1)
(0,21,1)
(8,20,1)
(4,27,1)
(23,22,1)
(4,2,1)
(29,20,1)
(26,8,1)
(3,4,1)
(5,22,1)
(17,25,1)
(11,10,1)
(23,11,1)
(22,26,1)
(16,5,1)
(25,9,1)
(12,6,1)
(8,27,1)
(21,17,1)
(27,12,1)
(10,3,1)
(12,15,2)
(10,22,2)
(27,20,2)
(12,20,2)
(2,22,2)
(11,22,2)
(15,20,2)
(4,17,2)
(3,4,2)
(29,20,2)
(12,6,2)
(3,22,2)
(27,12,2)
(4,22,2)
(16,22,2)
(4,27,2)
(5,22,2)
(11,3,2)
-----------------------------------
(0,5)
(1,if(globalFive==5)
(2,data)
(3,result = data * data)
(4,data * data)
(5,result)
(6,char)
(7,if(globalFive==5)
(8,globalFive)
(9,data)
(10,result)
(11,printHexCharLine(result)
(12,(char)
(13,)
(14,)
(15,RAND32()
(16,data)
(17,data = \' \')
(18,)
(19,)
(20,globalFive==5)
(21,globalFive)
(22,globalFive==5)
(23,RET)
(24,data)
(25,' ')
(26,5)
(27,data = (char)
(28,result)
(29,data)
(30,data = ' ')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^