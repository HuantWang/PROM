-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_34_bad()
{
    short data;
    CWE190_Integer_Overflow__short_fscanf_multiply_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
52,54
53,54
56,57
56,58
57,58
58,59
58,60
60,61
60,62
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,55,59,61,65,66,70,72
-----computeFrom-----
18,19
18,20
33,34
33,35
52,53
52,54
63,64
63,65
-----guardedBy-----
54,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_34_bad(){    short data;    CWE190_Integer_Overflow__short_fscanf_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_34_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_34_bad
{    short data;    CWE190_Integer_Overflow__short_fscanf_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
CWE190_Integer_Overflow__short_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__short_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__short_fscanf_multiply_34_unionType
CWE190_Integer_Overflow__short_fscanf_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(11,13,0)
(30,13,0)
(31,25,0)
(3,16,0)
(12,28,0)
(10,12,0)
(14,16,0)
(27,13,0)
(33,30,0)
(24,36,0)
(15,28,0)
(22,4,0)
(7,4,0)
(36,4,0)
(25,12,0)
(19,11,0)
(34,2,0)
(9,24,0)
(20,2,0)
(1,10,0)
(27,20,0)
(12,25,0)
(20,27,0)
(2,13,0)
(23,2,0)
(5,24,0)
(25,36,0)
(17,27,0)
(8,20,0)
(10,28,0)
(11,2,0)
(26,13,0)
(4,36,0)
(32,27,0)
(21,13,0)
(29,30,0)
(0,36,0)
(6,25,0)
(16,11,0)
(36,30,0)
(35,12,0)
(35,24,1)
(36,4,1)
(5,9,1)
(18,24,1)
(25,36,1)
(27,20,1)
(6,35,1)
(20,2,1)
(18,10,1)
(4,7,1)
(7,22,1)
(2,34,1)
(22,0,1)
(16,3,1)
(11,19,1)
(34,23,1)
(17,2,1)
(14,27,1)
(12,25,1)
(9,36,1)
(3,14,1)
(10,12,1)
(20,8,1)
(24,36,1)
(19,16,1)
(25,31,1)
(32,17,1)
(11,2,1)
(10,1,1)
(0,11,1)
(24,5,1)
(1,12,1)
(8,32,1)
(31,6,1)
(25,36,2)
(12,24,2)
(11,2,2)
(6,24,2)
(20,2,2)
(31,24,2)
(35,24,2)
(12,25,2)
(27,20,2)
(36,4,2)
(25,24,2)
(1,24,2)
(24,36,2)
(10,24,2)
(10,12,2)
-----------------------------------
(0,data)
(1,result)
(2,data = 0)
(3,unionFirst)
(4,myUnion.unionSecond)
(5,0)
(6,data)
(7,unionSecond)
(8,data)
(9,data)
(10,printIntLine(result)
(11,myUnion.unionFirst = data)
(12,result = data * 2)
(13,)
(14,myUnion)
(15,result)
(16,myUnion.unionFirst)
(17,stdin)
(18,RET)
(19,data)
(20,&data)
(21,data)
(22,myUnion)
(23,data)
(24,data > 0)
(25,data * 2)
(26,myUnion)
(27,fscanf (stdin, "%hd", &data)
(28,)
(29,data)
(30,)
(31,2)
(32,"%hd")
(33,if(data > 0)
(34,0)
(35,result)
(36,data = myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^