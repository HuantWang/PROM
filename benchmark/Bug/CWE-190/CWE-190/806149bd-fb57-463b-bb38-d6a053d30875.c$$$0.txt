-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,71,75,77
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_add_17_bad()
CWE190_Integer_Overflow__char_fscanf_add_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(33,5,0)
(25,20,0)
(29,12,0)
(12,39,0)
(5,2,0)
(27,20,0)
(6,27,0)
(2,0,0)
(9,41,0)
(17,0,0)
(24,30,0)
(37,12,0)
(41,2,0)
(26,30,0)
(9,40,0)
(21,0,0)
(1,41,0)
(16,0,0)
(36,39,0)
(34,20,0)
(19,34,0)
(7,4,0)
(8,9,0)
(10,24,0)
(5,24,0)
(13,20,0)
(11,34,0)
(4,39,0)
(38,30,0)
(23,5,0)
(24,5,0)
(18,0,0)
(15,9,0)
(31,0,0)
(28,2,0)
(22,2,0)
(38,24,0)
(35,38,0)
(32,39,0)
(41,9,0)
(30,14,0)
(36,34,1)
(34,20,1)
(39,32,1)
(22,28,1)
(7,38,1)
(5,23,1)
(5,2,1)
(4,39,1)
(24,5,1)
(27,20,1)
(27,6,1)
(15,8,1)
(1,15,1)
(19,11,1)
(23,33,1)
(12,37,1)
(25,2,1)
(35,24,1)
(38,35,1)
(38,24,1)
(20,13,1)
(32,36,1)
(41,1,1)
(6,9,1)
(4,7,1)
(9,41,1)
(29,39,1)
(12,39,1)
(2,22,1)
(13,25,1)
(8,34,1)
(3,12,1)
(41,2,1)
(11,27,1)
(34,19,1)
(11,20,1)
(29,4,1)
(37,29,1)
(33,10,1)
(10,12,1)
(10,12,2)
(7,12,2)
(24,5,2)
(12,12,2)
(41,2,2)
(38,24,2)
(6,34,2)
(29,12,2)
(38,12,2)
(4,12,2)
(9,34,2)
(12,39,2)
(8,34,2)
(35,12,2)
(15,34,2)
(24,12,2)
(4,39,2)
(33,12,2)
(5,2,2)
(5,12,2)
(11,34,2)
(34,34,2)
(41,34,2)
(23,12,2)
(27,34,2)
(9,41,2)
(1,34,2)
(27,20,2)
(37,12,2)
(19,34,2)
(34,20,2)
-----------------------------------
(0,)
(1,data)
(2,data = \\\' \\\')
(3,RET)
(4,j++)
(5,data + 1)
(6,i)
(7,j)
(8,stdin)
(9,fscanf (stdin, "%c", &data)
(10,result)
(11,i)
(12,j < 1)
(13,0)
(14,)
(15,"%c")
(16,j)
(17,for(j = 0; j < 1; j++)
(18,i)
(19,1)
(20,i = 0)
(21,for(i = 0; i < 1; i++)
(22,\\\' \\\')
(23,1)
(24,result = data + 1)
(25,i)
(26,result)
(27,i++)
(28,data)
(29,j)
(30,)
(31,data)
(32,0)
(33,data)
(34,i < 1)
(35,result)
(36,j)
(37,1)
(38,printHexCharLine(result)
(39,j = 0)
(40,)
(41,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^