-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            char result = data + 1;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
65,66
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,48,52,53,57,59,64,66,70,72,76,77,81,83,88,89
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
50,51
50,52
62,63
62,64
74,75
74,76
-----guardedBy-----
64,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_rand_add_12_bad()
CWE190_Integer_Overflow__char_rand_add_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            char result = data + 1;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(21,41,0)
(43,19,0)
(23,12,0)
(33,21,0)
(3,43,0)
(12,23,0)
(7,23,0)
(36,31,0)
(10,40,0)
(23,4,0)
(46,12,0)
(8,45,0)
(34,42,0)
(15,19,0)
(38,12,0)
(22,44,0)
(25,21,0)
(40,34,0)
(43,21,0)
(15,14,0)
(12,21,0)
(30,4,0)
(35,26,0)
(19,43,0)
(2,31,0)
(11,19,0)
(0,26,0)
(13,23,0)
(5,15,0)
(16,7,0)
(39,22,0)
(24,43,0)
(34,40,0)
(4,18,0)
(26,31,0)
(17,14,0)
(32,25,0)
(43,34,0)
(1,21,0)
(40,20,0)
(40,10,0)
(27,25,0)
(12,34,0)
(28,31,0)
(25,34,0)
(20,40,0)
(37,34,0)
(7,4,0)
(19,14,0)
(9,15,1)
(7,16,1)
(10,37,1)
(9,22,1)
(26,35,1)
(5,19,1)
(12,21,1)
(6,21,1)
(15,5,1)
(24,3,1)
(1,29,1)
(15,19,1)
(7,23,1)
(12,34,1)
(37,29,1)
(19,43,1)
(40,20,1)
(43,34,1)
(40,10,1)
(46,13,1)
(21,33,1)
(43,21,1)
(43,24,1)
(3,11,1)
(13,6,1)
(25,27,1)
(34,40,1)
(16,23,1)
(38,46,1)
(11,25,1)
(27,32,1)
(6,34,1)
(32,6,1)
(23,12,1)
(22,39,1)
(35,0,1)
(25,21,1)
(25,34,1)
(29,26,1)
(9,7,1)
(33,1,1)
(39,25,1)
(12,38,1)
(21,29,2)
(25,6,2)
(3,25,2)
(1,29,2)
(34,40,2)
(12,6,2)
(32,6,2)
(23,12,2)
(43,34,2)
(25,21,2)
(24,25,2)
(19,43,2)
(33,29,2)
(40,10,2)
(27,6,2)
(23,6,2)
(37,29,2)
(40,29,2)
(16,6,2)
(43,21,2)
(13,6,2)
(7,6,2)
(11,25,2)
(40,20,2)
(46,6,2)
(39,25,2)
(25,34,2)
(43,25,2)
(12,21,2)
(38,6,2)
(15,19,2)
(5,25,2)
(12,34,2)
(10,29,2)
(15,25,2)
(19,25,2)
(7,23,2)
(34,29,2)
(22,25,2)
-----------------------------------
(0,data)
(1,data)
(2,if(globalReturnsTrueOrFalse()
(3,data)
(4,)
(5,result)
(6,globalReturnsTrueOrFalse()
(7,printHexCharLine(result)
(8,if (data < CHAR_MAX)
(9,RET)
(10,RAND32()
(11,result)
(12,data + 1)
(13,result)
(14,)
(15,printHexCharLine(result)
(16,result)
(17,result)
(18,)
(19,result = data + 1)
(20,char)
(21,data = 2)
(22,printLine("data value is too large to perform arithmetic safely.")
(23,result = data + 1)
(24,1)
(25,data < CHAR_MAX)
(26,data = \\\' \\\')
(27,CHAR_MAX)
(28,if(globalReturnsTrueOrFalse()
(29,globalReturnsTrueOrFalse()
(30,result)
(31,)
(32,data)
(33,2)
(34,data = (char)
(35,\\\' \\\')
(36,data)
(37,data)
(38,1)
(39,"data value is too large to perform arithmetic safely.")
(40,(char)
(41,)
(42,)
(43,data + 1)
(44,)
(45,)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^