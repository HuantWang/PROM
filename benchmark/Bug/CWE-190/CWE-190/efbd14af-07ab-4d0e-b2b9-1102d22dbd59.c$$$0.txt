-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        char result = data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,48,51,53,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_15_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(14,7,0)
(32,37,0)
(1,7,0)
(25,19,0)
(26,14,0)
(9,12,0)
(27,31,0)
(19,16,0)
(4,23,0)
(36,23,0)
(2,0,0)
(3,29,0)
(12,0,0)
(24,27,0)
(22,31,0)
(34,29,0)
(30,23,0)
(37,14,0)
(20,31,0)
(28,23,0)
(35,14,0)
(5,16,0)
(15,10,0)
(7,29,0)
(18,12,0)
(16,31,0)
(6,7,0)
(19,7,0)
(12,23,0)
(37,16,0)
(33,29,0)
(21,31,0)
(17,31,0)
(0,12,0)
(0,7,0)
(14,16,0)
(10,23,0)
(15,13,1)
(8,20,1)
(14,35,1)
(20,37,1)
(25,11,1)
(32,14,1)
(9,18,1)
(37,32,1)
(10,15,1)
(12,0,1)
(35,26,1)
(8,22,1)
(37,14,1)
(14,7,1)
(27,24,1)
(19,25,1)
(0,7,1)
(18,13,1)
(0,2,1)
(2,9,1)
(13,7,1)
(36,12,1)
(19,7,1)
(24,11,1)
(1,6,1)
(22,27,1)
(11,36,1)
(7,1,1)
(26,19,1)
(11,28,1)
(28,10,1)
(26,11,2)
(37,14,2)
(12,13,2)
(10,13,2)
(9,13,2)
(0,13,2)
(2,13,2)
(24,11,2)
(25,11,2)
(0,7,2)
(35,11,2)
(12,0,2)
(14,11,2)
(19,11,2)
(18,13,2)
(37,11,2)
(27,11,2)
(19,7,2)
(32,11,2)
(22,11,2)
(36,13,2)
(20,11,2)
(15,13,2)
(28,13,2)
(14,7,2)
-----------------------------------
(0,&data)
(1,\\\' \\\')
(2,data)
(3,switch(6)
(4,default:)
(5,result)
(6,data)
(7,data = \\\' \\\')
(8,RET)
(9,"%c")
(10,printLine("Benign, fixed string")
(11,7)
(12,fscanf (stdin, "%c", &data)
(13,6)
(14,result = data)
(15,"Benign, fixed string")
(16,)
(17,default:)
(18,stdin)
(19,++data)
(20,break;)
(21,case 7:)
(22,break;)
(23,)
(24,"Benign, fixed string")
(25,data)
(26,result)
(27,printLine("Benign, fixed string")
(28,break;)
(29,)
(30,case 6:)
(31,)
(32,result)
(33,switch(7)
(34,data)
(35,data)
(36,break;)
(37,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^