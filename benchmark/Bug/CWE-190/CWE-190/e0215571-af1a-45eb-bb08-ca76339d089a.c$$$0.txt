-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_add_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            unsigned int result = data + 1;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            unsigned int result = data + 1;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,52,56,58,63,65,69,71,75,76,80,82,87,88
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
61,62
61,63
73,74
73,75
-----guardedBy-----
63,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_add_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_add_12_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_add_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            unsigned int result = data + 1;            printUnsignedLine(result);        }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(40,3,0)
(5,22,0)
(11,3,0)
(44,0,0)
(38,24,0)
(22,46,0)
(10,40,0)
(7,19,0)
(42,24,0)
(35,40,0)
(37,8,0)
(17,11,0)
(29,23,0)
(18,22,0)
(2,37,0)
(24,11,0)
(15,0,0)
(0,22,0)
(9,3,0)
(42,43,0)
(1,23,0)
(45,37,0)
(34,15,0)
(37,12,0)
(11,24,0)
(0,15,0)
(14,43,0)
(27,7,0)
(4,42,0)
(0,3,0)
(30,0,0)
(25,26,0)
(40,22,0)
(3,23,0)
(11,22,0)
(28,36,0)
(12,3,0)
(6,12,0)
(36,15,0)
(20,3,0)
(43,21,0)
(15,39,0)
(24,43,0)
(16,11,0)
(41,23,0)
(36,39,0)
(12,37,0)
(32,39,0)
(13,3,1)
(4,24,1)
(0,22,1)
(6,2,1)
(11,3,1)
(7,27,1)
(37,12,1)
(0,44,1)
(17,38,1)
(40,10,1)
(27,40,1)
(20,9,1)
(38,31,1)
(15,0,1)
(34,40,1)
(44,30,1)
(5,13,1)
(36,15,1)
(33,7,1)
(36,28,1)
(31,37,1)
(31,22,1)
(40,3,1)
(10,35,1)
(22,18,1)
(28,15,1)
(45,13,1)
(11,16,1)
(12,3,1)
(24,11,1)
(12,6,1)
(30,34,1)
(42,4,1)
(35,31,1)
(11,22,1)
(18,5,1)
(33,42,1)
(40,22,1)
(0,3,1)
(33,36,1)
(2,45,1)
(3,20,1)
(42,24,1)
(16,17,1)
(11,3,2)
(37,12,2)
(5,13,2)
(40,3,2)
(2,13,2)
(0,3,2)
(40,31,2)
(27,40,2)
(34,40,2)
(45,13,2)
(38,31,2)
(42,31,2)
(24,31,2)
(11,22,2)
(12,13,2)
(0,22,2)
(12,3,2)
(4,31,2)
(16,31,2)
(30,40,2)
(36,15,2)
(42,24,2)
(7,40,2)
(10,31,2)
(17,31,2)
(44,40,2)
(24,11,2)
(15,40,2)
(40,22,2)
(35,31,2)
(36,40,2)
(22,13,2)
(11,31,2)
(18,13,2)
(15,0,2)
(0,40,2)
(6,13,2)
(37,13,2)
(28,40,2)
-----------------------------------
(0,data + 1)
(1,data)
(2,"%u")
(3,data = 0)
(4,result)
(5,data)
(6,data)
(7,printLine("data value is too large to perform arithmetic safely.")
(8,)
(9,data)
(10,UINT_MAX)
(11,data + 1)
(12,&data)
(13,globalReturnsTrueOrFalse()
(14,result)
(15,result = data + 1)
(16,1)
(17,data)
(18,2)
(19,)
(20,0)
(21,)
(22,data = 2)
(23,)
(24,result = data + 1)
(25,if (data < UINT_MAX)
(26,)
(27,"data value is too large to perform arithmetic safely.")
(28,result)
(29,if(globalReturnsTrueOrFalse()
(30,data)
(31,globalReturnsTrueOrFalse()
(32,result)
(33,RET)
(34,result)
(35,data)
(36,printUnsignedLine(result)
(37,fscanf (stdin, "%u", &data)
(38,result)
(39,)
(40,data < UINT_MAX)
(41,if(globalReturnsTrueOrFalse()
(42,printUnsignedLine(result)
(43,)
(44,1)
(45,stdin)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^