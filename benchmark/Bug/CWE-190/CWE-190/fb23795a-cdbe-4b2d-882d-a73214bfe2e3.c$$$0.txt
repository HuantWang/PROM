-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_listen_socket_multiply_07_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
60,62
61,62
61,63
61,64
61,65
61,66
61,67
61,68
61,69
61,70
61,71
61,72
61,73
61,74
61,75
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
88,89
91,92
92,93
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
122,123
124,125
124,126
125,126
125,127
126,127
126,128
126,129
126,130
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
138,139
140,141
141,142
142,143
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
150,153
151,152
153,154
155,156
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
170,171
172,173
174,175
174,176
175,176
175,177
176,177
178,179
180,181
182,183
183,184
183,185
184,185
186,187
186,188
186,189
186,190
186,191
187,188
189,190
191,192
193,194
193,195
194,195
198,199
198,200
199,200
199,201
200,201
200,202
201,202
203,204
205,206
205,207
206,207
209,210
211,212
212,213
212,214
213,214
213,215
214,215
216,217
219,220
220,221
220,222
221,222
223,224
223,225
224,225
226,227
229,230
229,231
230,231
230,232
231,232
233,234
235,236
236,237
237,238
237,239
238,239
240,241
242,243
242,244
243,244
243,245
244,245
246,247
248,249
249,250
250,251
250,252
251,252
253,254
255,256
255,257
256,257
256,258
257,258
260,261
261,262
261,263
262,263
262,264
263,264
266,267
266,268
267,268
268,269
268,270
270,271
270,272
272,273
273,274
273,275
274,275
277,278
278,279
278,280
279,280
281,282
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,33,37,39,42,46,48,51,54,56,59,65,68,70,72,74,78,80,82,86,89,90,94,99,100,102,108,109,110,112,117,118,121,123,128,130,134,136,139,143,145,147,152,154,156,158,160,164,167,169,171,173,177,179,181,185,188,190,192,195,196,197,202,204,207,208,210,215,217,218,222,225,227,228,232,234,239,241,245,247,252,254,258,259,264,265,269,271,275,276,280,282
-----computeFrom-----
12,13
12,14
17,18
17,19
63,64
63,65
76,77
76,78
96,97
96,98
104,105
104,106
114,115
114,116
125,126
125,127
149,150
149,151
162,163
162,164
175,176
175,177
183,184
183,185
193,194
193,195
199,200
199,201
200,201
200,202
205,206
205,207
212,213
212,214
220,221
220,222
230,231
230,232
243,244
243,245
256,257
256,258
262,263
262,264
273,274
273,275
-----guardedBy-----
232,241
245,254
264,275
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_listen_socket_multiply_07_bad(){    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_listen_socket_multiply_07_bad()
CWE190_Integer_Overflow__int_listen_socket_multiply_07_bad
{    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
staticFive==5
staticFive
staticFive
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(93,162,0)
(163,158,0)
(154,19,0)
(86,31,0)
(30,31,0)
(158,163,0)
(119,17,0)
(177,122,0)
(129,135,0)
(146,133,0)
(20,15,0)
(149,36,0)
(59,56,0)
(179,86,0)
(81,34,0)
(1,144,0)
(105,109,0)
(56,59,0)
(95,171,0)
(116,36,0)
(66,68,0)
(112,26,0)
(55,144,0)
(48,67,0)
(143,144,0)
(12,144,0)
(164,86,0)
(164,120,0)
(71,169,0)
(3,120,0)
(50,123,0)
(89,36,0)
(172,138,0)
(54,88,0)
(147,146,0)
(47,41,0)
(115,67,0)
(139,36,0)
(44,118,0)
(41,25,0)
(38,36,0)
(15,163,0)
(146,62,0)
(86,36,0)
(41,38,0)
(84,38,0)
(18,138,0)
(122,140,0)
(75,144,0)
(46,75,0)
(138,103,0)
(141,60,0)
(57,31,0)
(51,82,0)
(140,36,0)
(129,60,0)
(91,149,0)
(165,144,0)
(106,164,0)
(175,103,0)
(131,4,0)
(114,132,0)
(25,41,0)
(27,79,0)
(152,21,0)
(100,127,0)
(13,8,0)
(31,140,0)
(121,135,0)
(78,165,0)
(91,4,0)
(7,52,0)
(124,79,0)
(140,122,0)
(173,56,0)
(174,96,0)
(127,140,0)
(122,112,0)
(167,122,0)
(145,179,0)
(98,144,0)
(111,129,0)
(43,62,0)
(32,144,0)
(2,75,0)
(89,118,0)
(19,67,0)
(123,112,0)
(129,111,0)
(132,39,0)
(73,38,0)
(19,38,0)
(21,125,0)
(107,144,0)
(23,149,0)
(99,179,0)
(37,4,0)
(9,31,0)
(159,41,0)
(157,64,0)
(58,164,0)
(79,89,0)
(125,21,0)
(4,91,0)
(92,80,0)
(62,144,0)
(150,96,0)
(85,24,0)
(142,59,0)
(118,89,0)
(69,155,0)
(74,176,0)
(151,111,0)
(25,39,0)
(97,88,0)
(28,21,0)
(24,36,0)
(104,19,0)
(163,59,0)
(70,127,0)
(163,15,0)
(120,36,0)
(138,112,0)
(6,26,0)
(68,75,0)
(94,26,0)
(68,140,0)
(155,59,0)
(87,144,0)
(135,129,0)
(60,129,0)
(113,144,0)
(40,36,0)
(112,36,0)
(11,165,0)
(102,125,0)
(162,75,0)
(5,169,0)
(8,36,0)
(0,110,0)
(29,80,0)
(162,140,0)
(117,36,0)
(59,155,0)
(63,169,0)
(168,109,0)
(45,25,0)
(26,112,0)
(145,17,0)
(130,111,0)
(179,145,0)
(42,34,0)
(178,170,0)
(72,68,0)
(61,62,0)
(16,39,0)
(103,138,0)
(76,84,0)
(136,140,0)
(77,112,0)
(17,86,0)
(31,86,0)
(146,112,0)
(34,112,0)
(14,36,0)
(41,67,0)
(88,8,0)
(132,25,0)
(137,179,0)
(108,123,0)
(160,17,0)
(101,24,0)
(109,31,0)
(10,26,0)
(67,169,0)
(59,112,0)
(53,144,0)
(17,145,0)
(22,28,0)
(38,84,0)
(123,62,0)
(144,134,0)
(166,33,0)
(83,91,0)
(148,86,0)
(126,144,0)
(21,36,0)
(59,163,0)
(31,109,0)
(21,28,0)
(128,36,0)
(162,90,0)
(156,122,0)
(103,175,1)
(121,111,1)
(42,112,1)
(34,81,1)
(79,27,1)
(123,112,1)
(41,67,1)
(54,21,1)
(108,50,1)
(83,4,1)
(15,20,1)
(68,140,1)
(157,35,1)
(140,122,1)
(88,97,1)
(105,57,1)
(60,141,1)
(25,41,1)
(123,62,1)
(11,78,1)
(2,62,1)
(160,86,1)
(17,86,1)
(146,112,1)
(69,59,1)
(48,115,1)
(34,112,1)
(155,69,1)
(175,138,1)
(132,25,1)
(148,127,1)
(45,19,1)
(9,148,1)
(127,100,1)
(86,31,1)
(50,0,1)
(164,106,1)
(164,86,1)
(66,123,1)
(50,7,1)
(21,28,1)
(104,80,1)
(166,34,1)
(50,95,1)
(41,47,1)
(38,84,1)
(50,166,1)
(135,121,1)
(145,179,1)
(10,77,1)
(145,17,1)
(119,160,1)
(146,62,1)
(162,75,1)
(130,49,1)
(106,58,1)
(23,91,1)
(141,129,1)
(60,129,1)
(149,23,1)
(31,140,1)
(80,92,1)
(155,59,1)
(161,132,1)
(162,93,1)
(30,109,1)
(18,155,1)
(56,173,1)
(13,88,1)
(129,135,1)
(178,145,1)
(101,85,1)
(3,164,1)
(19,67,1)
(29,157,1)
(122,167,1)
(137,17,1)
(136,103,1)
(130,75,1)
(156,177,1)
(95,103,1)
(154,104,1)
(120,3,1)
(124,149,1)
(132,114,1)
(94,6,1)
(29,35,1)
(173,163,1)
(58,145,1)
(91,4,1)
(66,146,1)
(152,125,1)
(67,48,1)
(4,131,1)
(161,80,1)
(31,109,1)
(109,168,1)
(112,26,1)
(161,19,1)
(122,112,1)
(22,152,1)
(74,127,1)
(167,156,1)
(7,60,1)
(159,45,1)
(8,13,1)
(70,140,1)
(165,11,1)
(76,73,1)
(47,159,1)
(146,147,1)
(59,56,1)
(0,155,1)
(111,151,1)
(129,111,1)
(6,10,1)
(29,96,1)
(61,43,1)
(127,140,1)
(72,66,1)
(59,112,1)
(91,83,1)
(78,96,1)
(19,38,1)
(44,79,1)
(100,70,1)
(84,76,1)
(147,123,1)
(131,37,1)
(151,130,1)
(103,138,1)
(57,9,1)
(20,142,1)
(142,89,1)
(77,24,1)
(21,125,1)
(150,67,1)
(28,22,1)
(172,18,1)
(50,178,1)
(37,8,1)
(43,165,1)
(162,140,1)
(46,2,1)
(179,99,1)
(81,42,1)
(102,34,1)
(92,29,1)
(163,158,1)
(96,174,1)
(62,61,1)
(50,74,1)
(35,162,1)
(50,49,1)
(118,44,1)
(168,105,1)
(59,163,1)
(68,75,1)
(179,86,1)
(41,38,1)
(138,112,1)
(73,120,1)
(17,119,1)
(35,68,1)
(27,124,1)
(24,101,1)
(19,154,1)
(125,102,1)
(89,118,1)
(93,68,1)
(123,108,1)
(68,72,1)
(85,60,1)
(49,38,1)
(99,137,1)
(138,172,1)
(174,150,1)
(26,94,1)
(97,54,1)
(31,30,1)
(163,15,1)
(177,136,1)
(75,46,1)
(114,25,1)
(129,111,2)
(56,34,2)
(129,96,2)
(26,60,2)
(164,145,2)
(129,49,2)
(89,118,2)
(13,34,2)
(21,34,2)
(31,127,2)
(168,127,2)
(123,96,2)
(37,34,2)
(120,145,2)
(114,19,2)
(0,155,2)
(103,138,2)
(136,103,2)
(119,127,2)
(135,49,2)
(86,31,2)
(155,34,2)
(121,49,2)
(147,123,2)
(47,19,2)
(83,34,2)
(159,19,2)
(131,34,2)
(91,34,2)
(59,56,2)
(145,17,2)
(105,127,2)
(2,96,2)
(54,34,2)
(103,155,2)
(23,34,2)
(68,140,2)
(148,127,2)
(41,67,2)
(44,34,2)
(141,96,2)
(59,163,2)
(93,68,2)
(38,145,2)
(89,34,2)
(15,34,2)
(137,17,2)
(151,96,2)
(101,60,2)
(97,34,2)
(73,145,2)
(41,38,2)
(69,34,2)
(60,49,2)
(95,103,2)
(140,103,2)
(78,96,2)
(111,96,2)
(163,158,2)
(132,19,2)
(108,96,2)
(163,34,2)
(79,34,2)
(91,4,2)
(152,34,2)
(157,35,2)
(173,34,2)
(162,68,2)
(111,49,2)
(127,103,2)
(178,145,2)
(172,155,2)
(72,96,2)
(21,125,2)
(167,103,2)
(100,103,2)
(135,96,2)
(45,19,2)
(84,145,2)
(25,41,2)
(59,34,2)
(19,67,2)
(41,19,2)
(127,140,2)
(62,96,2)
(102,34,2)
(109,127,2)
(68,75,2)
(151,49,2)
(146,123,2)
(70,103,2)
(42,60,2)
(122,112,2)
(58,145,2)
(46,96,2)
(11,96,2)
(81,60,2)
(38,84,2)
(18,155,2)
(177,103,2)
(175,155,2)
(22,34,2)
(8,34,2)
(112,26,2)
(106,145,2)
(50,96,2)
(165,96,2)
(27,34,2)
(112,60,2)
(85,60,2)
(146,112,2)
(146,62,2)
(86,127,2)
(7,60,2)
(31,109,2)
(74,127,2)
(61,96,2)
(77,60,2)
(19,80,2)
(132,25,2)
(25,19,2)
(145,179,2)
(57,127,2)
(162,140,2)
(104,80,2)
(35,96,2)
(129,135,2)
(30,127,2)
(31,140,2)
(20,34,2)
(21,28,2)
(179,17,2)
(59,112,2)
(6,60,2)
(24,60,2)
(149,34,2)
(156,103,2)
(43,96,2)
(60,129,2)
(163,15,2)
(145,127,2)
(140,122,2)
(94,60,2)
(124,34,2)
(138,155,2)
(3,145,2)
(66,96,2)
(130,49,2)
(88,34,2)
(49,145,2)
(34,60,2)
(10,60,2)
(19,38,2)
(17,86,2)
(9,127,2)
(17,127,2)
(123,112,2)
(121,96,2)
(166,34,2)
(28,34,2)
(123,62,2)
(125,34,2)
(60,96,2)
(142,34,2)
(118,34,2)
(34,112,2)
(68,96,2)
(179,86,2)
(160,127,2)
(155,59,2)
(99,17,2)
(4,34,2)
(138,112,2)
(76,145,2)
(154,80,2)
(75,96,2)
(122,103,2)
(162,75,2)
(141,49,2)
(164,86,2)
(130,96,2)
-----------------------------------
(0,break;)
(1,recvResult)
(2,acceptSocket)
(3,'\\\\0')
(4,service.sin_addr)
(5,if(staticFive==5)
(6,SOCK_STREAM)
(7,break;)
(8,service.sin_family = AF_INET)
(9,acceptSocket)
(10,AF_INET)
(11,0)
(12,if (wsaDataInit)
(13,AF_INET)
(14,if (listen(listenSocket, LISTEN_BACKLOG)
(15,&service)
(16,result)
(17,recvResult == SOCKET_ERROR)
(18,listenSocket)
(19,data > 0)
(20,service)
(21,memset(&service, 0, sizeof(service)
(22,service)
(23,INADDR_ANY)
(24,wsaDataInit = 1)
(25,result = data * 2)
(26,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(27,sin_port)
(28,sizeof(service)
(29,staticFive)
(30,0)
(31,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(32,if (listenSocket != INVALID_SOCKET)
(33,)
(34,listenSocket == INVALID_SOCKET)
(35,wsaDataInit)
(36,)
(37,service)
(38,data = atoi(inputBuffer)
(39,)
(40,if (bind(listenSocket, (struct sockaddr*)
(41,data * 2)
(42,listenSocket)
(43,listenSocket)
(44,TCP_PORT)
(45,result)
(46,INVALID_SOCKET)
(47,2)
(48,0)
(49,0)
(50,listenSocket)
(51,if(data > 0)
(52,)
(53,service)
(54,service)
(55,inputBuffer)
(56,sizeof(service)
(57,inputBuffer)
(58,inputBuffer)
(59,bind(listenSocket, (struct sockaddr*)
(60,WSAStartup(MAKEWORD(2,2)
(61,INVALID_SOCKET)
(62,listenSocket = INVALID_SOCKET)
(63,data)
(64,)
(65,\'\\\\0\')
(66,acceptSocket)
(67,data = 0)
(68,acceptSocket != INVALID_SOCKET)
(69,SOCKET_ERROR)
(70,acceptSocket)
(71,if(staticFive==5)
(72,INVALID_SOCKET)
(73,data)
(74,break;)
(75,acceptSocket = INVALID_SOCKET)
(76,inputBuffer)
(77,listenSocket)
(78,wsaDataInit)
(79,service.sin_port)
(80,staticFive==5)
(81,INVALID_SOCKET)
(82,)
(83,s_addr)
(84,atoi(inputBuffer)
(85,wsaDataInit)
(86,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(87,do)
(88,service.sin_family)
(89,service.sin_port = htons(TCP_PORT)
(90,)
(91,service.sin_addr.s_addr)
(92,5)
(93,acceptSocket)
(94,IPPROTO_TCP)
(95,break;)
(96,staticFive==5)
(97,sin_family)
(98,listenSocket)
(99,0)
(100,SOCKET_ERROR)
(101,1)
(102,service)
(103,listen(listenSocket, LISTEN_BACKLOG)
(104,data)
(105,CHAR_ARRAY_SIZE)
(106,recvResult)
(107,wsaData)
(108,INVALID_SOCKET)
(109,CHAR_ARRAY_SIZE - 1)
(110,)
(111,MAKEWORD(2,2)
(112,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(113,if (acceptSocket != INVALID_SOCKET)
(114,result)
(115,data)
(116,if (listenSocket == INVALID_SOCKET)
(117,if (WSAStartup(MAKEWORD(2,2)
(118,htons(TCP_PORT)
(119,SOCKET_ERROR)
(120,inputBuffer[recvResult] = \'\\\\0\')
(121,wsaData)
(122,accept(listenSocket, NULL, NULL)
(123,listenSocket != INVALID_SOCKET)
(124,service)
(125,&service)
(126,wsaDataInit)
(127,acceptSocket == SOCKET_ERROR)
(128,if (recvResult == SOCKET_ERROR || recvResult == 0)
(129,WSAStartup(MAKEWORD(2,2)
(130,2)
(131,sin_addr)
(132,printIntLine(result)
(133,)
(134,)
(135,&wsaData)
(136,acceptSocket)
(137,recvResult)
(138,listen(listenSocket, LISTEN_BACKLOG)
(139,if (acceptSocket == SOCKET_ERROR)
(140,acceptSocket = accept(listenSocket, NULL, NULL)
(141,NO_ERROR)
(142,listenSocket)
(143,acceptSocket)
(144,)
(145,recvResult == SOCKET_ERROR || recvResult == 0)
(146,CLOSE_SOCKET(listenSocket)
(147,listenSocket)
(148,recvResult)
(149,service.sin_addr.s_addr = INADDR_ANY)
(150,staticFive)
(151,2)
(152,0)
(153,inputBuffer[recvResult] = '\\\\0')
(154,0)
(155,bind(listenSocket, (struct sockaddr*)
(156,NULL)
(157,WSACleanup()
(158,struct sockaddr*)
(159,data)
(160,recvResult)
(161,RET)
(162,CLOSE_SOCKET(acceptSocket)
(163,(struct sockaddr*)
(164,inputBuffer[recvResult])
(165,wsaDataInit = 0)
(166,break;)
(167,NULL)
(168,1)
(169,)
(170,)
(171,)
(172,LISTEN_BACKLOG)
(173,service)
(174,5)
(175,SOCKET_ERROR)
(176,)
(177,listenSocket)
(178,break;)
(179,recvResult == 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^