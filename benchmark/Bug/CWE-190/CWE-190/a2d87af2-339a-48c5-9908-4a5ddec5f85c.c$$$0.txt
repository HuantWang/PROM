-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_18_bad()
{
    short data;
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = SHRT_MAX;
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
26,27
28,29
28,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,27,29,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_18_bad(){    short data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_max_multiply_18_bad()
CWE190_Integer_Overflow__short_max_multiply_18_bad
{    short data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;
source
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,16,0)
(11,3,0)
(18,13,0)
(5,3,0)
(4,11,0)
(21,1,0)
(0,1,0)
(17,3,0)
(7,0,0)
(22,3,0)
(2,3,0)
(15,0,0)
(25,11,0)
(10,3,0)
(14,16,0)
(13,3,0)
(8,3,0)
(0,16,0)
(1,0,0)
(12,7,0)
(20,13,0)
(1,13,0)
(6,23,0)
(23,13,0)
(9,1,0)
(24,23,0)
(15,23,1)
(1,13,1)
(13,18,1)
(11,4,1)
(6,24,1)
(19,23,1)
(10,11,1)
(7,12,1)
(7,0,1)
(18,20,1)
(2,13,1)
(21,15,1)
(9,21,1)
(1,9,1)
(19,7,1)
(4,25,1)
(24,2,1)
(20,10,1)
(0,1,1)
(12,0,1)
(23,13,1)
(23,6,1)
(7,23,2)
(0,1,2)
(9,23,2)
(21,23,2)
(7,0,2)
(0,23,2)
(15,23,2)
(23,13,2)
(1,23,2)
(1,13,2)
(12,23,2)
-----------------------------------
(0,result = data * 2)
(1,data * 2)
(2,goto sink;)
(3,)
(4,0)
(5,source:)
(6,0)
(7,printIntLine(result)
(8,data)
(9,2)
(10,goto source;)
(11,data = 0)
(12,result)
(13,data = SHRT_MAX)
(14,result)
(15,result)
(16,)
(17,sink:)
(18,SHRT_MAX)
(19,RET)
(20,data)
(21,data)
(22,if(data > 0)
(23,data > 0)
(24,data)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^