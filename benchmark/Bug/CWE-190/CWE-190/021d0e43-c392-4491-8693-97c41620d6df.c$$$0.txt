-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_add_17_bad()
{
    int i,j;
    unsigned int data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            unsigned int result = data + 1;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,71,75,77
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_add_17_bad(){    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_add_17_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_add_17_bad
{    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(13,14,0)
(24,25,0)
(34,8,0)
(6,31,0)
(13,24,0)
(37,22,0)
(7,6,0)
(28,40,0)
(14,10,0)
(39,33,0)
(17,40,0)
(9,13,0)
(23,31,0)
(8,32,0)
(32,29,0)
(3,25,0)
(12,24,0)
(40,32,0)
(15,35,0)
(41,33,0)
(1,29,0)
(19,14,0)
(0,25,0)
(21,24,0)
(35,31,0)
(16,14,0)
(36,25,0)
(26,22,0)
(29,18,0)
(5,32,0)
(38,25,0)
(40,24,0)
(8,29,0)
(20,22,0)
(2,6,0)
(32,40,0)
(30,31,0)
(4,25,0)
(14,13,0)
(11,20,0)
(33,22,0)
(2,35,1)
(40,28,1)
(30,33,1)
(15,8,1)
(9,16,1)
(2,31,1)
(23,30,1)
(21,12,1)
(6,31,1)
(8,34,1)
(41,22,1)
(41,20,1)
(6,7,1)
(14,13,1)
(39,41,1)
(33,22,1)
(31,23,1)
(8,32,1)
(35,31,1)
(35,15,1)
(34,32,1)
(7,2,1)
(32,40,1)
(17,5,1)
(5,6,1)
(19,33,1)
(40,24,1)
(13,24,1)
(22,26,1)
(11,14,1)
(24,21,1)
(26,37,1)
(27,6,1)
(16,19,1)
(20,11,1)
(13,9,1)
(20,22,1)
(33,39,1)
(28,17,1)
(37,24,1)
(35,6,2)
(8,32,2)
(16,33,2)
(9,33,2)
(35,31,2)
(5,6,2)
(32,6,2)
(40,24,2)
(20,33,2)
(34,6,2)
(2,6,2)
(14,13,2)
(6,31,2)
(39,33,2)
(11,33,2)
(32,40,2)
(33,22,2)
(13,24,2)
(33,33,2)
(20,22,2)
(28,6,2)
(17,6,2)
(41,33,2)
(19,33,2)
(7,6,2)
(40,6,2)
(6,6,2)
(15,6,2)
(14,33,2)
(8,6,2)
(13,33,2)
-----------------------------------
(0,data)
(1,result)
(2,j)
(3,i)
(4,for(i = 0; i < 1; i++)
(5,result)
(6,j < 1)
(7,1)
(8,printUnsignedLine(result)
(9,data)
(10,)
(11,i)
(12,data)
(13,&data)
(14,fscanf (stdin, "%u", &data)
(15,j)
(16,"%u")
(17,data)
(18,)
(19,stdin)
(20,i++)
(21,0)
(22,i = 0)
(23,0)
(24,data = 0)
(25,)
(26,0)
(27,RET)
(28,1)
(29,)
(30,j)
(31,j = 0)
(32,result = data + 1)
(33,i < 1)
(34,result)
(35,j++)
(36,for(j = 0; j < 1; j++)
(37,i)
(38,j)
(39,1)
(40,data + 1)
(41,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^