-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_10_bad()
{
    int64_t data;
    data = 0LL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,9,11,15,16,19,24,26,29,35,37,41,43,47,49
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_10_bad(){    int64_t data;    data = 0LL;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_10_bad()
CWE190_Integer_Overflow__int64_t_max_square_10_bad
{    int64_t data;    data = 0LL;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(21,0,0)
(10,20,0)
(3,0,0)
(18,4,0)
(20,19,0)
(2,15,0)
(1,20,0)
(18,15,0)
(17,18,0)
(8,1,0)
(1,15,0)
(4,6,0)
(15,4,0)
(7,1,0)
(11,0,0)
(14,0,0)
(15,1,0)
(5,20,0)
(9,4,0)
(18,15,1)
(18,17,1)
(5,10,1)
(20,5,1)
(13,20,1)
(13,16,1)
(7,2,1)
(1,8,1)
(17,15,1)
(1,20,1)
(2,13,1)
(12,18,1)
(15,1,1)
(8,7,1)
(12,13,1)
(10,16,1)
(16,3,1)
(2,13,2)
(7,13,2)
(17,13,2)
(1,13,2)
(18,15,2)
(15,13,2)
(18,13,2)
(8,13,2)
(5,16,2)
(20,16,2)
(10,16,2)
(15,1,2)
(1,20,2)
-----------------------------------
(0,)
(1,data * data)
(2,result)
(3,L)
(4,)
(5,LLONG_MAX)
(6,)
(7,data)
(8,data)
(9,result)
(10,data)
(11,if(globalTrue)
(12,RET)
(13,globalTrue)
(14,if(globalTrue)
(15,result = data * data)
(16,globalTrue)
(17,result)
(18,printLongLongLine(result)
(19,)
(20,data = LLONG_MAX)
(21,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^