-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_listen_socket_add_65_bad()
{
    int data;
    /* define a function pointer */
    void (*funcPtr) (int) = CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
31,32
32,33
32,34
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
57,58
58,59
60,61
61,62
61,63
63,64
63,65
65,66
66,67
68,69
68,70
69,70
69,71
69,72
69,73
69,74
69,75
69,76
69,77
69,78
69,79
69,80
69,81
69,82
69,83
70,71
71,72
71,73
72,73
74,75
74,76
74,77
74,78
75,76
77,78
79,80
81,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
91,92
92,93
92,94
92,95
92,96
93,94
95,96
96,97
99,100
100,101
101,102
103,104
104,105
104,106
105,106
105,107
106,107
109,110
111,112
112,113
112,114
113,114
113,115
114,115
114,116
115,116
119,120
121,122
122,123
122,124
123,124
123,125
124,125
127,128
127,129
128,129
130,131
132,133
132,134
133,134
133,135
134,135
134,136
134,137
134,138
135,136
137,138
139,140
139,141
140,141
140,142
141,142
143,144
145,146
146,147
148,149
149,150
150,151
152,153
154,155
156,157
156,158
157,158
157,159
158,159
158,160
158,161
159,160
161,162
163,164
165,166
167,168
169,170
170,171
170,172
171,172
173,174
173,175
173,176
173,177
174,175
176,177
178,179
180,181
182,183
182,184
183,184
183,185
184,185
186,187
188,189
190,191
191,192
191,193
192,193
194,195
194,196
194,197
194,198
194,199
195,196
197,198
199,200
201,202
201,203
202,203
206,207
206,208
207,208
207,209
208,209
208,210
209,210
211,212
213,214
213,215
214,215
217,218
219,220
220,221
220,222
221,222
221,223
222,223
224,225
227,228
228,229
228,230
229,230
231,232
231,233
232,233
234,235
237,238
237,239
238,239
238,240
239,240
241,242
243,244
244,245
245,246
245,247
246,247
248,249
250,251
250,252
251,252
251,253
252,253
254,255
256,257
257,258
258,259
258,260
259,260
261,262
263,264
264,265
264,266
265,266
267,268
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,35,39,41,45,47,50,54,56,59,62,64,67,73,76,78,80,82,86,88,90,94,97,98,102,107,108,110,116,117,118,120,125,126,129,131,136,138,142,144,147,151,153,155,160,162,164,166,168,172,175,177,179,181,185,187,189,193,196,198,200,203,204,205,210,212,215,216,218,223,225,226,230,233,235,236,240,242,247,249,253,255,260,262,266,268
-----computeFrom-----
26,27
26,28
71,72
71,73
84,85
84,86
104,105
104,106
112,113
112,114
122,123
122,124
133,134
133,135
157,158
157,159
170,171
170,172
183,184
183,185
191,192
191,193
201,202
201,203
207,208
207,209
208,209
208,210
213,214
213,215
220,221
220,222
228,229
228,230
238,239
238,240
251,252
251,253
-----guardedBy-----
240,249
253,262
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_listen_socket_add_65_bad(){    int data;    /* define a function pointer */    void (*funcPtr) (int) = CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE190_Integer_Overflow__int_listen_socket_add_65_bad()
CWE190_Integer_Overflow__int_listen_socket_add_65_bad
{    int data;    /* define a function pointer */    void (*funcPtr) (int) = CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
int data;
int data;
int
data
data
void (*funcPtr) (int) = CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink;
void (*funcPtr) (int) = CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink;
void
(*funcPtr) (int) = CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink
*funcPtr
*
funcPtr
int
int


= CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink
CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink
CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(161,62,0)
(61,89,0)
(72,83,0)
(23,99,0)
(154,36,0)
(49,10,0)
(75,64,0)
(99,36,0)
(141,79,0)
(89,79,0)
(123,15,0)
(102,156,0)
(76,125,0)
(83,125,0)
(107,100,0)
(99,83,0)
(159,36,0)
(70,39,0)
(27,90,0)
(126,125,0)
(32,52,0)
(159,85,0)
(144,87,0)
(84,159,0)
(28,83,0)
(20,70,0)
(132,128,0)
(90,39,0)
(142,139,0)
(24,125,0)
(111,61,0)
(136,22,0)
(104,91,0)
(120,124,0)
(45,70,0)
(16,124,0)
(122,85,0)
(93,89,0)
(13,99,0)
(121,52,0)
(1,28,0)
(157,70,0)
(19,60,0)
(63,70,0)
(83,28,0)
(146,39,0)
(5,79,0)
(78,70,0)
(56,36,0)
(92,103,0)
(158,0,0)
(2,115,0)
(2,99,0)
(93,20,0)
(8,145,0)
(108,89,0)
(95,2,0)
(6,88,0)
(0,36,0)
(43,11,0)
(65,108,0)
(7,18,0)
(128,132,0)
(140,87,0)
(23,56,0)
(67,128,0)
(26,23,0)
(94,39,0)
(124,16,0)
(11,87,0)
(8,125,0)
(66,36,0)
(81,70,0)
(138,38,0)
(108,101,0)
(85,159,0)
(4,36,0)
(113,83,0)
(55,36,0)
(61,20,0)
(41,56,0)
(147,110,0)
(69,2,0)
(14,24,0)
(90,94,0)
(30,10,0)
(97,108,0)
(16,36,0)
(114,8,0)
(162,103,0)
(15,140,0)
(17,16,0)
(90,159,0)
(57,93,0)
(60,12,0)
(74,28,0)
(71,70,0)
(91,60,0)
(127,144,0)
(130,63,0)
(4,153,0)
(46,76,0)
(35,24,0)
(3,70,0)
(34,70,0)
(80,63,0)
(153,4,0)
(25,22,0)
(119,101,0)
(103,39,0)
(47,140,0)
(149,59,0)
(51,76,0)
(98,82,0)
(132,100,0)
(44,76,0)
(21,20,0)
(140,15,0)
(54,118,0)
(52,99,0)
(77,0,0)
(64,4,0)
(96,87,0)
(87,11,0)
(115,52,0)
(37,153,0)
(76,89,0)
(42,19,0)
(29,64,0)
(148,77,0)
(48,39,0)
(9,94,0)
(135,128,0)
(125,76,0)
(58,70,0)
(87,140,0)
(33,83,0)
(150,132,0)
(60,19,0)
(50,23,0)
(60,91,0)
(115,2,0)
(101,108,0)
(68,94,0)
(133,89,0)
(155,70,0)
(106,77,0)
(12,60,0)
(10,89,0)
(117,36,0)
(62,125,0)
(109,36,0)
(87,144,0)
(151,70,0)
(53,62,0)
(116,12,0)
(140,47,0)
(86,20,0)
(160,110,0)
(73,91,0)
(52,115,0)
(79,89,0)
(110,70,0)
(8,63,0)
(125,36,0)
(152,70,0)
(143,93,0)
(105,36,0)
(61,134,0)
(100,36,0)
(24,63,0)
(16,38,0)
(38,16,0)
(87,89,0)
(22,36,0)
(83,99,0)
(89,36,0)
(131,79,0)
(90,27,1)
(136,25,1)
(31,159,1)
(62,161,1)
(99,83,1)
(38,138,1)
(111,93,1)
(35,61,1)
(17,38,1)
(24,125,1)
(27,112,1)
(80,130,1)
(86,110,1)
(116,91,1)
(87,140,1)
(49,89,1)
(153,37,1)
(6,10,1)
(106,148,1)
(150,128,1)
(15,123,1)
(1,74,1)
(10,30,1)
(144,127,1)
(0,158,1)
(131,141,1)
(67,0,1)
(63,80,1)
(51,126,1)
(95,52,1)
(107,132,1)
(112,24,1)
(32,99,1)
(30,49,1)
(133,22,1)
(19,60,1)
(130,20,1)
(69,95,1)
(90,94,1)
(148,16,1)
(41,23,1)
(8,114,1)
(25,19,1)
(8,63,1)
(85,122,1)
(16,124,1)
(115,52,1)
(16,38,1)
(4,153,1)
(83,125,1)
(84,56,1)
(53,125,1)
(160,147,1)
(27,102,1)
(33,72,1)
(104,31,1)
(46,51,1)
(2,99,1)
(100,107,1)
(121,32,1)
(126,101,1)
(2,69,1)
(97,11,1)
(20,21,1)
(65,97,1)
(57,143,1)
(56,41,1)
(62,125,1)
(26,115,1)
(110,160,1)
(113,28,1)
(162,92,1)
(29,100,1)
(161,53,1)
(61,20,1)
(68,103,1)
(23,50,1)
(141,133,1)
(108,65,1)
(19,42,1)
(77,106,1)
(127,140,1)
(94,9,1)
(9,68,1)
(61,89,1)
(8,125,1)
(35,93,1)
(149,101,1)
(23,99,1)
(140,15,1)
(74,33,1)
(64,75,1)
(79,5,1)
(76,89,1)
(114,24,1)
(119,108,1)
(50,26,1)
(24,63,1)
(83,28,1)
(143,31,1)
(7,62,1)
(158,77,1)
(96,4,1)
(54,19,1)
(143,6,1)
(132,128,1)
(52,121,1)
(37,64,1)
(61,111,1)
(123,96,1)
(14,35,1)
(60,12,1)
(143,149,1)
(147,94,1)
(10,89,1)
(87,89,1)
(42,60,1)
(135,67,1)
(125,76,1)
(11,43,1)
(101,119,1)
(93,20,1)
(122,84,1)
(24,14,1)
(83,113,1)
(112,8,1)
(120,17,1)
(104,63,1)
(93,57,1)
(115,2,1)
(143,7,1)
(87,144,1)
(101,108,1)
(102,112,1)
(103,162,1)
(72,13,1)
(43,87,1)
(108,89,1)
(76,44,1)
(13,62,1)
(89,79,1)
(75,29,1)
(21,86,1)
(93,89,1)
(12,116,1)
(73,104,1)
(44,46,1)
(143,54,1)
(28,1,1)
(159,85,1)
(128,135,1)
(5,131,1)
(143,142,1)
(138,10,1)
(90,159,1)
(143,98,1)
(98,115,1)
(11,87,1)
(52,99,1)
(132,150,1)
(60,91,1)
(140,47,1)
(40,90,1)
(142,11,1)
(124,120,1)
(91,73,1)
(22,136,1)
(31,115,2)
(29,10,2)
(89,19,2)
(120,10,2)
(140,10,2)
(99,62,2)
(85,115,2)
(5,19,2)
(52,62,2)
(108,89,2)
(132,10,2)
(76,89,2)
(89,79,2)
(87,144,2)
(131,19,2)
(90,94,2)
(77,10,2)
(65,11,2)
(96,10,2)
(4,10,2)
(124,10,2)
(10,89,2)
(74,62,2)
(121,62,2)
(4,153,2)
(12,31,2)
(8,63,2)
(72,62,2)
(140,47,2)
(87,10,2)
(6,10,2)
(144,10,2)
(98,115,2)
(91,31,2)
(67,10,2)
(33,62,2)
(111,93,2)
(17,10,2)
(125,76,2)
(83,28,2)
(23,99,2)
(102,112,2)
(100,10,2)
(53,101,2)
(106,10,2)
(87,140,2)
(16,124,2)
(26,115,2)
(158,10,2)
(38,10,2)
(16,38,2)
(62,101,2)
(0,10,2)
(30,19,2)
(76,101,2)
(140,15,2)
(16,10,2)
(46,101,2)
(99,83,2)
(84,115,2)
(61,89,2)
(113,62,2)
(125,101,2)
(61,93,2)
(149,101,2)
(114,24,2)
(159,85,2)
(142,11,2)
(44,101,2)
(148,10,2)
(19,60,2)
(23,115,2)
(1,62,2)
(122,115,2)
(104,31,2)
(25,19,2)
(2,52,2)
(93,20,2)
(13,62,2)
(150,10,2)
(60,91,2)
(87,89,2)
(8,125,2)
(56,115,2)
(135,10,2)
(42,31,2)
(7,62,2)
(108,11,2)
(138,10,2)
(61,20,2)
(69,52,2)
(119,11,2)
(126,101,2)
(43,10,2)
(24,63,2)
(54,19,2)
(19,31,2)
(115,62,2)
(83,125,2)
(52,99,2)
(116,31,2)
(97,11,2)
(127,10,2)
(22,19,2)
(159,115,2)
(90,159,2)
(2,99,2)
(141,19,2)
(115,52,2)
(133,19,2)
(10,19,2)
(79,19,2)
(37,10,2)
(51,101,2)
(95,52,2)
(60,31,2)
(8,24,2)
(161,101,2)
(11,10,2)
(132,128,2)
(101,108,2)
(62,125,2)
(101,11,2)
(15,10,2)
(11,87,2)
(49,19,2)
(123,10,2)
(128,10,2)
(115,2,2)
(32,62,2)
(64,10,2)
(73,31,2)
(75,10,2)
(136,19,2)
(83,62,2)
(107,10,2)
(60,12,2)
(28,62,2)
(24,125,2)
(93,89,2)
(41,115,2)
(50,115,2)
(153,10,2)
-----------------------------------
(0,service.sin_family = AF_INET)
(1,1)
(2,recvResult == 0)
(3,if (listenSocket != INVALID_SOCKET)
(4,service.sin_port = htons(TCP_PORT)
(5,IPPROTO_TCP)
(6,break;)
(7,break;)
(8,CLOSE_SOCKET(acceptSocket)
(9,0)
(10,listenSocket == INVALID_SOCKET)
(11,bind(listenSocket, (struct sockaddr*)
(12,&wsaData)
(13,recvResult)
(14,INVALID_SOCKET)
(15,&service)
(16,memset(&service, 0, sizeof(service)
(17,0)
(18,)
(19,WSAStartup(MAKEWORD(2,2)
(20,listenSocket = INVALID_SOCKET)
(21,INVALID_SOCKET)
(22,wsaDataInit = 1)
(23,inputBuffer[recvResult])
(24,acceptSocket != INVALID_SOCKET)
(25,wsaDataInit)
(26,inputBuffer)
(27,data)
(28,CHAR_ARRAY_SIZE - 1)
(29,service)
(30,INVALID_SOCKET)
(31,0)
(32,recvResult)
(33,inputBuffer)
(34,wsaDataInit)
(35,acceptSocket)
(36,)
(37,TCP_PORT)
(38,&service)
(39,)
(40,RET)
(41,\'\\\\0\')
(42,NO_ERROR)
(43,SOCKET_ERROR)
(44,NULL)
(45,listenSocket)
(46,NULL)
(47,struct sockaddr*)
(48,data)
(49,listenSocket)
(50,recvResult)
(51,listenSocket)
(52,recvResult == SOCKET_ERROR)
(53,acceptSocket)
(54,break;)
(55,if (recvResult == SOCKET_ERROR || recvResult == 0)
(56,inputBuffer[recvResult] = '\\\\0')
(57,INVALID_SOCKET)
(58,if (wsaDataInit)
(59,)
(60,WSAStartup(MAKEWORD(2,2)
(61,CLOSE_SOCKET(listenSocket)
(62,acceptSocket == SOCKET_ERROR)
(63,acceptSocket = INVALID_SOCKET)
(64,service.sin_port)
(65,LISTEN_BACKLOG)
(66,if (WSAStartup(MAKEWORD(2,2)
(67,service)
(68,data)
(69,0)
(70,)
(71,service)
(72,acceptSocket)
(73,2)
(74,CHAR_ARRAY_SIZE)
(75,sin_port)
(76,accept(listenSocket, NULL, NULL)
(77,service.sin_family)
(78,do)
(79,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(80,INVALID_SOCKET)
(81,recvResult)
(82,)
(83,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(84,data)
(85,atoi(inputBuffer)
(86,listenSocket)
(87,bind(listenSocket, (struct sockaddr*)
(88,)
(89,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(90,funcPtr(data)
(91,MAKEWORD(2,2)
(92,funcPtr)
(93,listenSocket != INVALID_SOCKET)
(94,data = 0)
(95,recvResult)
(96,listenSocket)
(97,listenSocket)
(98,break;)
(99,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(100,service.sin_addr.s_addr = INADDR_ANY)
(101,listen(listenSocket, LISTEN_BACKLOG)
(102,WSACleanup()
(103,(*funcPtr)
(104,2)
(105,if (listenSocket == INVALID_SOCKET)
(106,sin_family)
(107,INADDR_ANY)
(108,listen(listenSocket, LISTEN_BACKLOG)
(109,if (bind(listenSocket, (struct sockaddr*)
(110,wsaDataInit = 0)
(111,listenSocket)
(112,wsaDataInit)
(113,0)
(114,acceptSocket)
(115,recvResult == SOCKET_ERROR || recvResult == 0)
(116,wsaData)
(117,if (listen(listenSocket, LISTEN_BACKLOG)
(118,)
(119,SOCKET_ERROR)
(120,service)
(121,SOCKET_ERROR)
(122,inputBuffer)
(123,service)
(124,sizeof(service)
(125,acceptSocket = accept(listenSocket, NULL, NULL)
(126,acceptSocket)
(127,service)
(128,service.sin_addr)
(129,inputBuffer[recvResult] = \'\\\\0\')
(130,acceptSocket)
(131,SOCK_STREAM)
(132,service.sin_addr.s_addr)
(133,listenSocket)
(134,)
(135,sin_addr)
(136,1)
(137,'\\\\0')
(138,service)
(139,)
(140,(struct sockaddr*)
(141,AF_INET)
(142,break;)
(143,listenSocket)
(144,sizeof(service)
(145,)
(146,funcPtr)
(147,wsaDataInit)
(148,service)
(149,break;)
(150,s_addr)
(151,acceptSocket)
(152,wsaData)
(153,htons(TCP_PORT)
(154,if (acceptSocket == SOCKET_ERROR)
(155,inputBuffer)
(156,)
(157,if (acceptSocket != INVALID_SOCKET)
(158,AF_INET)
(159,data = atoi(inputBuffer)
(160,0)
(161,SOCKET_ERROR)
(162,CWE190_Integer_Overflow__int_listen_socket_add_65b_badSink)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^