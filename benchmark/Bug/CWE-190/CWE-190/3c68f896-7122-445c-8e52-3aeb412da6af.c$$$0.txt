-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_add_34_bad()
{
    int64_t data;
    CWE190_Integer_Overflow__int64_t_fscanf_add_34_unionType myUnion;
    data = 0LL;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%" SCNd64, &data);
    myUnion.unionFirst = data;
    {
        int64_t data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int64_t result = data + 1;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
25,26
25,27
26,27
26,28
27,28
30,31
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,9,11,15,17,21,22,28,29,31,36,38,42,43,48,50,54,55,59,61
-----computeFrom-----
19,20
19,21
25,26
25,27
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_add_34_bad(){    int64_t data;    CWE190_Integer_Overflow__int64_t_fscanf_add_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_add_34_bad()
CWE190_Integer_Overflow__int64_t_fscanf_add_34_bad
{    int64_t data;    CWE190_Integer_Overflow__int64_t_fscanf_add_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
CWE190_Integer_Overflow__int64_t_fscanf_add_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_fscanf_add_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_fscanf_add_34_unionType
CWE190_Integer_Overflow__int64_t_fscanf_add_34_unionType
myUnion
myUnion
data = 0LL;
data = 0LL
data
data
0LL
fscanf (stdin, "%" SCNd64, &data);
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }
int64_t data = myUnion.unionSecond;
int64_t data = myUnion.unionSecond;
int64_t
int64_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }
int64_t result = data + 1;
int64_t result = data + 1;
int64_t
int64_t
result = data + 1
result
= data + 1
data + 1
data
data
1
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(0,7,0)
(23,0,0)
(25,20,0)
(14,9,0)
(20,7,0)
(4,7,0)
(24,20,0)
(21,14,0)
(9,14,0)
(6,15,0)
(17,23,0)
(9,25,0)
(1,25,0)
(11,0,0)
(16,20,0)
(18,24,0)
(14,24,0)
(2,21,0)
(10,15,0)
(15,25,0)
(3,9,0)
(5,14,0)
(12,7,0)
(19,9,0)
(22,7,0)
(8,23,0)
(25,15,0)
(21,24,0)
(8,22,1)
(1,0,1)
(6,10,1)
(14,9,1)
(3,5,1)
(11,23,1)
(10,1,1)
(0,11,1)
(9,19,1)
(21,14,1)
(5,25,1)
(2,14,1)
(25,15,1)
(15,6,1)
(9,25,1)
(23,17,1)
(21,2,1)
(13,21,1)
(17,8,1)
(19,3,1)
(9,25,2)
(14,9,2)
(25,15,2)
(21,14,2)
-----------------------------------
(0,myUnion.unionFirst = data)
(1,data)
(2,result)
(3,data)
(4,myUnion)
(5,result)
(6,unionSecond)
(7,)
(8,myUnion)
(9,data + 1)
(10,myUnion)
(11,data)
(12,data)
(13,RET)
(14,result = data + 1)
(15,myUnion.unionSecond)
(16,data)
(17,unionFirst)
(18,result)
(19,1)
(20,)
(21,printLongLongLine(result)
(22,L)
(23,myUnion.unionFirst)
(24,)
(25,data = myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^