-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_07_bad()
CWE190_Integer_Overflow__char_rand_square_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(27,29,0)
(4,21,0)
(2,13,0)
(2,27,0)
(0,5,0)
(9,8,0)
(20,18,0)
(18,21,0)
(14,1,0)
(7,1,0)
(19,13,0)
(13,25,0)
(1,8,0)
(22,2,0)
(16,5,0)
(25,1,0)
(11,27,0)
(3,12,0)
(21,24,0)
(15,25,0)
(25,13,0)
(25,21,0)
(18,6,0)
(13,27,0)
(17,8,0)
(18,20,0)
(26,8,0)
(10,12,0)
(23,25,0)
(21,18,0)
(6,18,0)
(30,5,1)
(15,23,1)
(25,1,1)
(2,22,1)
(22,13,1)
(6,4,1)
(1,14,1)
(25,15,1)
(16,21,1)
(12,3,1)
(16,12,1)
(3,10,1)
(5,0,1)
(13,25,1)
(23,19,1)
(14,7,1)
(2,13,1)
(10,1,1)
(25,21,1)
(0,16,1)
(30,2,1)
(21,18,1)
(18,6,1)
(4,12,1)
(18,20,1)
(19,5,1)
(25,21,2)
(25,1,2)
(18,20,2)
(25,5,2)
(23,5,2)
(19,5,2)
(21,18,2)
(18,12,2)
(6,12,2)
(22,5,2)
(2,13,2)
(13,25,2)
(15,5,2)
(13,5,2)
(2,5,2)
(21,12,2)
(18,6,2)
(4,12,2)
-----------------------------------
(0,5)
(1,data = ' ')
(2,printHexCharLine(result)
(3,5)
(4,data)
(5,staticFive==5)
(6,RAND32()
(7,data)
(8,)
(9,if(staticFive==5)
(10,staticFive)
(11,result)
(12,staticFive==5)
(13,result = data * data)
(14,' ')
(15,data)
(16,staticFive)
(17,if(staticFive==5)
(18,(char)
(19,result)
(20,char)
(21,data = (char)
(22,result)
(23,data)
(24,)
(25,data * data)
(26,data)
(27,)
(28,data = \' \')
(29,)
(30,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^