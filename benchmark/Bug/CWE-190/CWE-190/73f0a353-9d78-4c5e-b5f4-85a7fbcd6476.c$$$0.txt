-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_08_bad()
{
    unsigned int data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_08_bad(){    unsigned int data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_08_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_08_bad
{    unsigned int data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(21,11,0)
(2,6,0)
(24,21,0)
(29,2,0)
(28,2,0)
(27,25,0)
(3,10,0)
(26,6,0)
(10,25,0)
(6,25,0)
(21,24,0)
(19,16,0)
(5,21,0)
(25,22,0)
(20,6,0)
(12,22,0)
(17,10,0)
(7,24,0)
(2,16,0)
(18,22,0)
(14,22,0)
(9,21,0)
(15,1,0)
(23,25,0)
(28,16,0)
(24,25,0)
(13,28,0)
(6,2,0)
(24,7,1)
(23,27,1)
(25,23,1)
(3,0,1)
(10,17,1)
(4,28,1)
(10,25,1)
(8,25,1)
(6,26,1)
(24,25,1)
(29,10,1)
(26,20,1)
(4,0,1)
(9,5,1)
(0,8,1)
(17,3,1)
(28,2,1)
(4,10,1)
(28,13,1)
(13,2,1)
(7,9,1)
(5,8,1)
(6,25,1)
(2,6,1)
(20,29,1)
(0,21,1)
(21,24,1)
(21,8,2)
(17,0,2)
(9,8,2)
(28,10,2)
(2,10,2)
(6,10,2)
(28,2,2)
(6,25,2)
(7,8,2)
(10,25,2)
(13,10,2)
(5,8,2)
(2,6,2)
(10,0,2)
(24,8,2)
(29,10,2)
(26,10,2)
(20,10,2)
(24,25,2)
(3,0,2)
(21,24,2)
-----------------------------------
(0,staticReturnsTrue()
(1,)
(2,result = data * 2)
(3,data)
(4,RET)
(5,stdin)
(6,data * 2)
(7,data)
(8,staticReturnsTrue()
(9,"%u")
(10,data > 0)
(11,)
(12,if(staticReturnsTrue()
(13,result)
(14,data)
(15,if(data > 0)
(16,)
(17,0)
(18,if(staticReturnsTrue()
(19,result)
(20,data)
(21,fscanf (stdin, "%u", &data)
(22,)
(23,0)
(24,&data)
(25,data = 0)
(26,2)
(27,data)
(28,printUnsignedLine(result)
(29,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^