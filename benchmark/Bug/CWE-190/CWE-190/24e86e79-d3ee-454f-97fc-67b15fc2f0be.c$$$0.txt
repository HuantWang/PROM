-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_03_bad()
{
    int64_t data;
    data = 0LL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,9,11,15,16,19,20,25,27,30,31,36,37,42,44,48,49,53,55
-----computeFrom-----
13,14
13,15
18,19
18,20
23,24
23,25
29,30
29,31
34,35
34,36
46,47
46,48
-----guardedBy-----
36,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_03_bad(){    int64_t data;    data = 0LL;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_03_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_03_bad
{    int64_t data;    data = 0LL;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(27,9,0)
(1,9,0)
(12,13,0)
(2,24,0)
(10,27,0)
(16,6,0)
(9,1,0)
(9,14,0)
(18,13,0)
(24,25,0)
(27,14,0)
(21,26,0)
(28,1,0)
(23,1,0)
(5,19,0)
(20,19,0)
(1,24,0)
(4,3,0)
(17,9,0)
(0,26,0)
(7,14,0)
(22,19,0)
(26,24,0)
(29,19,0)
(15,24,0)
(11,6,0)
(28,23,1)
(1,24,1)
(16,13,1)
(17,26,1)
(16,24,1)
(1,28,1)
(10,9,1)
(6,11,1)
(8,6,1)
(21,0,1)
(0,6,1)
(24,15,1)
(2,13,1)
(26,21,1)
(11,16,1)
(12,5,1)
(13,18,1)
(27,9,1)
(27,10,1)
(23,17,1)
(26,24,1)
(18,12,1)
(8,27,1)
(9,1,1)
(8,26,1)
(15,2,1)
(27,9,2)
(0,6,2)
(26,24,2)
(10,26,2)
(1,24,2)
(17,26,2)
(26,6,2)
(24,13,2)
(15,13,2)
(21,6,2)
(2,13,2)
(9,26,2)
(27,26,2)
(9,1,2)
(1,26,2)
(28,26,2)
(23,26,2)
-----------------------------------
(0,data)
(1,data * 2)
(2,data)
(3,)
(4,if(data > 0)
(5,L)
(6,5==5)
(7,result)
(8,RET)
(9,result = data * 2)
(10,result)
(11,5)
(12,5)
(13,5==5)
(14,)
(15,LLONG_MAX)
(16,5)
(17,result)
(18,5)
(19,)
(20,if(5==5)
(21,0)
(22,data)
(23,data)
(24,data = LLONG_MAX)
(25,)
(26,data > 0)
(27,printLongLongLine(result)
(28,2)
(29,if(5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^