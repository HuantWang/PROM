-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_32_bad()
{
    int64_t data;
    int64_t *dataPtr1 = &data;
    int64_t *dataPtr2 = &data;
    data = 0LL;
    {
        int64_t data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
        *dataPtr1 = data;
    }
    {
        int64_t data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
66,67
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,9,11,15,17,18,22,26,28,29,33,37,38,43,45,49,53,55,60,62,67,69,73,78,80,84,86,90,92
-----computeFrom-----
35,36
35,37
51,52
51,53
57,58
57,59
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_32_bad(){    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_32_bad()
CWE190_Integer_Overflow__int64_t_max_square_32_bad
{    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
int64_t *dataPtr1 = &data;
int64_t *dataPtr1 = &data;
int64_t
int64_t
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int64_t *dataPtr2 = &data;
int64_t *dataPtr2 = &data;
int64_t
int64_t
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0LL;
data = 0LL
data
data
0LL
{        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        *dataPtr1 = data;    }
int64_t data = *dataPtr1;
int64_t data = *dataPtr1;
int64_t
int64_t
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
int64_t data = *dataPtr2;
int64_t data = *dataPtr2;
int64_t
int64_t
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(21,17,0)
(24,38,0)
(8,38,0)
(23,5,0)
(9,11,0)
(41,25,0)
(4,38,0)
(7,21,0)
(18,12,0)
(35,5,0)
(36,14,0)
(37,17,0)
(10,24,0)
(28,21,0)
(19,30,0)
(2,30,0)
(1,0,0)
(38,24,0)
(3,5,0)
(26,10,0)
(21,12,0)
(39,3,0)
(38,39,0)
(1,39,0)
(22,3,0)
(14,0,0)
(17,12,0)
(39,1,0)
(20,1,0)
(30,19,0)
(0,14,0)
(40,5,0)
(10,11,0)
(41,19,0)
(31,7,0)
(27,41,0)
(6,5,0)
(29,39,0)
(24,11,0)
(19,5,0)
(25,12,0)
(11,3,0)
(33,19,0)
(16,0,0)
(15,24,0)
(25,41,0)
(12,5,0)
(0,5,0)
(7,19,0)
(32,17,0)
(13,25,0)
(37,32,1)
(2,33,1)
(1,0,1)
(41,27,1)
(7,31,1)
(10,26,1)
(21,17,1)
(8,15,1)
(17,37,1)
(38,4,1)
(41,19,1)
(25,41,1)
(15,39,1)
(31,17,1)
(14,36,1)
(34,10,1)
(16,19,1)
(20,29,1)
(40,0,1)
(10,24,1)
(29,21,1)
(0,14,1)
(13,40,1)
(24,38,1)
(26,24,1)
(7,19,1)
(4,8,1)
(21,28,1)
(36,16,1)
(1,20,1)
(27,13,1)
(32,25,1)
(19,30,1)
(30,2,1)
(28,7,1)
(38,39,1)
(39,1,1)
(21,17,2)
(24,38,2)
(38,39,2)
(10,24,2)
(39,1,2)
(19,30,2)
(0,14,2)
(41,19,2)
(25,41,2)
(1,0,2)
(7,19,2)
-----------------------------------
(0,*dataPtr2 = &data)
(1,*dataPtr2)
(2,data)
(3,)
(4,data)
(5,)
(6,data)
(7,*dataPtr1)
(8,data)
(9,result)
(10,printLongLongLine(result)
(11,)
(12,)
(13,data)
(14,&data)
(15,result)
(16,dataPtr2)
(17,data = LLONG_MAX)
(18,data)
(19,*dataPtr1 = &data)
(20,dataPtr2)
(21,*dataPtr1 = data)
(22,data)
(23,dataPtr1)
(24,result = data * data)
(25,data = *dataPtr1)
(26,result)
(27,dataPtr1)
(28,data)
(29,data)
(30,&data)
(31,dataPtr1)
(32,data)
(33,dataPtr1)
(34,RET)
(35,dataPtr2)
(36,data)
(37,LLONG_MAX)
(38,data * data)
(39,data = *dataPtr2)
(40,L)
(41,*dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^