-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,65,69,71,75,76,80,82
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
62,63
62,64
73,74
73,75
-----guardedBy-----
64,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_17_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(28,19,0)
(1,15,0)
(22,26,0)
(42,15,0)
(2,21,0)
(12,38,0)
(34,25,0)
(37,21,0)
(6,35,0)
(19,31,0)
(22,7,0)
(11,40,0)
(13,19,0)
(4,12,0)
(33,38,0)
(45,22,0)
(28,31,0)
(20,25,0)
(40,21,0)
(27,2,0)
(43,15,0)
(26,22,0)
(19,13,0)
(17,13,0)
(0,18,0)
(32,2,0)
(36,22,0)
(10,35,0)
(13,38,0)
(24,25,0)
(8,12,0)
(16,34,0)
(41,26,0)
(39,13,0)
(9,38,0)
(5,31,0)
(3,19,0)
(26,38,0)
(14,21,0)
(38,15,0)
(30,15,0)
(35,25,0)
(44,15,0)
(23,28,0)
(33,9,1)
(24,20,1)
(40,21,1)
(39,3,1)
(19,13,1)
(12,38,1)
(37,35,1)
(35,25,1)
(10,25,1)
(41,45,1)
(14,37,1)
(10,34,1)
(2,32,1)
(27,21,1)
(34,25,1)
(17,39,1)
(13,17,1)
(45,36,1)
(11,12,1)
(36,35,1)
(26,38,1)
(38,33,1)
(16,22,1)
(2,21,1)
(29,2,1)
(13,38,1)
(28,19,1)
(40,11,1)
(12,4,1)
(28,23,1)
(25,24,1)
(21,14,1)
(26,41,1)
(8,2,1)
(34,16,1)
(32,27,1)
(4,8,1)
(22,26,1)
(11,28,1)
(23,19,1)
(6,10,1)
(35,6,1)
(20,38,1)
(27,40,1)
(3,12,1)
(10,35,2)
(22,35,2)
(23,12,2)
(27,2,2)
(28,19,2)
(8,2,2)
(39,12,2)
(36,35,2)
(17,12,2)
(26,38,2)
(26,35,2)
(4,2,2)
(13,38,2)
(45,35,2)
(11,2,2)
(35,25,2)
(40,21,2)
(12,38,2)
(32,2,2)
(40,2,2)
(6,35,2)
(16,35,2)
(34,35,2)
(13,12,2)
(12,2,2)
(19,12,2)
(22,26,2)
(35,35,2)
(2,21,2)
(28,12,2)
(41,35,2)
(34,25,2)
(2,2,2)
(19,13,2)
(3,12,2)
-----------------------------------
(0,if(data > 0)
(1,j)
(2,j < 1)
(3,result)
(4,0)
(5,result)
(6,1)
(7,)
(8,data)
(9,data)
(10,i)
(11,j)
(12,data > 0)
(13,data * 2)
(14,0)
(15,)
(16,i)
(17,2)
(18,)
(19,result = data * 2)
(20,i)
(21,j = 0)
(22,fscanf(stdin, "%d", &data)
(23,result)
(24,0)
(25,i = 0)
(26,&data)
(27,j)
(28,printIntLine(result)
(29,RET)
(30,data)
(31,)
(32,1)
(33,0)
(34,i++)
(35,i < 1)
(36,stdin)
(37,j)
(38,data = 0)
(39,data)
(40,j++)
(41,data)
(42,i)
(43,for(j = 0; j < 1; j++)
(44,for(i = 0; i < 1; i++)
(45,"%d")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^