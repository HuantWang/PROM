-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_16_bad()
{
    short data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,32,37,38,42,44,48,49,53,55,56
-----computeFrom-----
12,13
12,14
20,21
20,22
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_16_bad(){    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__short_rand_multiply_16_bad()
CWE190_Integer_Overflow__short_rand_multiply_16_bad
{    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(4,3,0)
(14,0,0)
(21,7,0)
(26,1,0)
(25,4,0)
(13,23,0)
(8,4,0)
(23,11,0)
(23,7,0)
(2,3,0)
(15,4,0)
(25,7,0)
(6,3,0)
(23,13,0)
(17,9,0)
(11,23,0)
(29,25,0)
(12,15,0)
(30,1,0)
(10,30,0)
(19,0,0)
(7,23,0)
(9,25,0)
(20,3,0)
(25,9,0)
(31,15,0)
(30,9,0)
(7,5,0)
(28,5,0)
(22,25,0)
(9,1,0)
(15,7,0)
(27,4,0)
(23,13,1)
(16,14,1)
(23,11,1)
(15,4,1)
(30,10,1)
(30,9,1)
(17,15,1)
(24,28,1)
(7,23,1)
(27,8,1)
(29,17,1)
(24,18,1)
(25,22,1)
(28,7,1)
(13,21,1)
(25,7,1)
(14,30,1)
(15,7,1)
(9,25,1)
(25,4,1)
(12,24,1)
(15,31,1)
(4,27,1)
(18,4,1)
(31,12,1)
(22,29,1)
(10,9,1)
(16,24,1)
(14,15,1)
(21,18,1)
(17,15,2)
(9,15,2)
(7,23,2)
(9,25,2)
(14,24,2)
(7,18,2)
(25,7,2)
(25,4,2)
(21,18,2)
(25,15,2)
(23,13,2)
(23,11,2)
(22,15,2)
(29,15,2)
(15,4,2)
(30,9,2)
(31,24,2)
(10,15,2)
(15,7,2)
(13,18,2)
(23,18,2)
(12,24,2)
(15,24,2)
(28,18,2)
(30,15,2)
-----------------------------------
(0,)
(1,)
(2,while(1)
(3,)
(4,data = 0)
(5,)
(6,data)
(7,data = (short)
(8,data)
(9,result = data * 2)
(10,result)
(11,short)
(12,data)
(13,RAND32()
(14,break;)
(15,data > 0)
(16,RET)
(17,result)
(18,1)
(19,if(data > 0)
(20,while(1)
(21,data)
(22,2)
(23,(short)
(24,1)
(25,data * 2)
(26,result)
(27,0)
(28,break;)
(29,data)
(30,printIntLine(result)
(31,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^