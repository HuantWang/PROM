-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_postinc_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_postinc_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_postinc_17_bad()
CWE190_Integer_Overflow__short_fscanf_postinc_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(26,23,0)
(20,23,0)
(1,26,0)
(14,9,0)
(26,16,0)
(35,6,0)
(40,18,0)
(10,26,0)
(11,5,0)
(5,27,0)
(6,9,0)
(6,2,0)
(21,1,0)
(32,16,0)
(25,6,0)
(23,31,0)
(33,31,0)
(12,26,0)
(38,31,0)
(22,27,0)
(8,16,0)
(18,30,0)
(1,16,0)
(4,27,0)
(17,23,0)
(9,23,0)
(7,27,0)
(37,3,0)
(28,31,0)
(36,31,0)
(32,23,0)
(41,30,0)
(3,30,0)
(29,3,0)
(0,7,0)
(13,5,0)
(19,31,0)
(34,32,0)
(24,30,0)
(9,6,0)
(16,39,0)
(35,25,1)
(17,20,1)
(1,21,1)
(6,9,1)
(0,1,1)
(15,5,1)
(26,10,1)
(29,30,1)
(10,12,1)
(11,13,1)
(21,26,1)
(24,41,1)
(1,26,1)
(4,3,1)
(9,23,1)
(5,27,1)
(9,14,1)
(23,17,1)
(30,24,1)
(7,27,1)
(18,40,1)
(32,34,1)
(22,4,1)
(32,23,1)
(7,0,1)
(3,30,1)
(5,11,1)
(41,23,1)
(26,23,1)
(18,30,1)
(13,27,1)
(29,18,1)
(14,35,1)
(12,32,1)
(3,37,1)
(27,22,1)
(37,29,1)
(25,3,1)
(13,7,1)
(40,6,1)
(34,5,1)
(10,5,2)
(21,5,2)
(1,26,2)
(18,30,2)
(37,3,2)
(5,27,2)
(34,5,2)
(13,5,2)
(26,5,2)
(7,5,2)
(11,5,2)
(3,30,2)
(1,5,2)
(40,3,2)
(12,5,2)
(14,3,2)
(5,5,2)
(3,3,2)
(9,23,2)
(9,3,2)
(0,5,2)
(18,3,2)
(7,27,2)
(26,23,2)
(29,3,2)
(32,23,2)
(32,5,2)
(6,9,2)
(6,3,2)
(35,3,2)
(25,3,2)
-----------------------------------
(0,j)
(1,printIntLine(result)
(2,)
(3,i < 1)
(4,j)
(5,j < 1)
(6,fscanf (stdin, "%hd", &data)
(7,j++)
(8,result)
(9,&data)
(10,data)
(11,1)
(12,result)
(13,j)
(14,data)
(15,RET)
(16,)
(17,0)
(18,i++)
(19,j)
(20,data)
(21,result)
(22,0)
(23,data = 0)
(24,0)
(25,stdin)
(26,result = data)
(27,j = 0)
(28,for(j = 0; j < 1; j++)
(29,i)
(30,i = 0)
(31,)
(32,data++)
(33,i)
(34,data)
(35,"%hd")
(36,data)
(37,1)
(38,for(i = 0; i < 1; i++)
(39,)
(40,i)
(41,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^