-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_preinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            ++data;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
67,68
68,69
70,71
71,72
71,73
73,74
73,75
75,76
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,14,15,19,24,27,32,33,37,43,46,48,51,55,57,62,64,69,72,74,77,81,83,88,89
-----computeFrom-----
12,13
12,14
22,23
22,24
30,31
30,32
60,61
60,62
-----guardedBy-----
62,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_preinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_rand_preinc_12_bad()
CWE190_Integer_Overflow__int_rand_preinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(32,44,0)
(33,41,0)
(36,33,0)
(24,1,0)
(0,8,0)
(10,41,0)
(13,44,0)
(14,1,0)
(20,9,0)
(24,44,0)
(12,1,0)
(20,24,0)
(38,35,0)
(18,33,0)
(44,37,0)
(6,43,0)
(11,31,0)
(19,12,0)
(40,32,0)
(2,20,0)
(13,1,0)
(9,28,0)
(42,0,0)
(22,41,0)
(5,24,0)
(12,44,0)
(24,9,0)
(17,8,0)
(4,24,0)
(3,6,0)
(34,44,0)
(1,15,0)
(23,44,0)
(29,9,0)
(35,1,0)
(0,35,0)
(26,1,0)
(35,44,0)
(25,35,0)
(44,34,0)
(32,8,0)
(27,13,0)
(12,9,0)
(32,1,0)
(7,41,0)
(21,13,0)
(35,8,0)
(30,6,1)
(2,24,1)
(14,26,1)
(35,1,1)
(39,1,1)
(0,35,1)
(20,24,1)
(42,35,1)
(4,12,1)
(6,3,1)
(23,16,1)
(5,4,1)
(19,39,1)
(33,36,1)
(32,40,1)
(13,27,1)
(1,14,1)
(24,5,1)
(13,1,1)
(35,25,1)
(30,20,1)
(35,44,1)
(21,39,1)
(30,0,1)
(26,16,1)
(13,44,1)
(0,42,1)
(12,1,1)
(24,1,1)
(20,2,1)
(44,34,1)
(27,21,1)
(25,38,1)
(24,44,1)
(12,44,1)
(12,19,1)
(39,44,1)
(3,13,1)
(38,32,1)
(32,1,1)
(36,18,1)
(32,44,1)
(40,13,1)
(34,23,1)
(16,33,1)
(32,13,2)
(32,1,2)
(21,39,2)
(14,16,2)
(23,16,2)
(0,13,2)
(13,39,2)
(3,13,2)
(5,39,2)
(24,44,2)
(20,39,2)
(13,44,2)
(35,1,2)
(19,39,2)
(12,1,2)
(32,44,2)
(34,16,2)
(2,39,2)
(6,13,2)
(4,39,2)
(1,16,2)
(27,39,2)
(13,1,2)
(25,13,2)
(35,13,2)
(12,39,2)
(40,13,2)
(42,13,2)
(44,16,2)
(35,44,2)
(38,13,2)
(24,1,2)
(26,16,2)
(44,34,2)
(24,39,2)
(12,44,2)
(0,35,2)
(20,24,2)
-----------------------------------
(0,printIntLine(result)
(1,data = 2)
(2,result)
(3,"data value is too large to perform arithmetic safely.")
(4,result)
(5,data)
(6,printLine("data value is too large to perform arithmetic safely.")
(7,if(globalReturnsTrueOrFalse()
(8,)
(9,)
(10,if(globalReturnsTrueOrFalse()
(11,if (data < INT_MAX)
(12,++data)
(13,data < INT_MAX)
(14,2)
(15,)
(16,globalReturnsTrueOrFalse()
(17,result)
(18,data)
(19,data)
(20,printIntLine(result)
(21,data)
(22,data)
(23,data)
(24,result = data)
(25,data)
(26,data)
(27,INT_MAX)
(28,)
(29,result)
(30,RET)
(31,)
(32,++data)
(33,data = 0)
(34,RAND32()
(35,result = data)
(36,0)
(37,)
(38,result)
(39,globalReturnsTrueOrFalse()
(40,data)
(41,)
(42,result)
(43,)
(44,data = RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^