-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_32_bad()
{
    unsigned int data;
    unsigned int *dataPtr1 = &data;
    unsigned int *dataPtr2 = &data;
    data = 0;
    {
        unsigned int data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
        *dataPtr1 = data;
    }
    {
        unsigned int data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,73,77,79,83,84,88,90
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
70,71
70,72
81,82
81,83
-----guardedBy-----
72,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_32_bad(){    unsigned int data;    unsigned int *dataPtr1 = &data;    unsigned int *dataPtr2 = &data;    data = 0;    {        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        *dataPtr1 = data;    }    {        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_32_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_32_bad
{    unsigned int data;    unsigned int *dataPtr1 = &data;    unsigned int *dataPtr2 = &data;    data = 0;    {        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        *dataPtr1 = data;    }    {        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
unsigned int *dataPtr1 = &data;
unsigned int *dataPtr1 = &data;
unsigned int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
unsigned int *dataPtr2 = &data;
unsigned int *dataPtr2 = &data;
unsigned int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        unsigned int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        *dataPtr1 = data;    }
unsigned int data = *dataPtr1;
unsigned int data = *dataPtr1;
unsigned int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        unsigned int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int data = *dataPtr2;
unsigned int data = *dataPtr2;
unsigned int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(41,10,0)
(25,10,0)
(27,10,0)
(38,26,0)
(7,10,0)
(28,45,0)
(23,20,0)
(16,35,0)
(39,43,0)
(29,23,0)
(35,40,0)
(24,9,0)
(5,40,0)
(42,45,0)
(32,8,0)
(1,30,0)
(12,40,0)
(35,16,0)
(8,20,0)
(45,15,0)
(11,40,0)
(1,10,0)
(22,1,0)
(13,35,0)
(16,27,0)
(0,27,0)
(0,9,0)
(4,0,0)
(18,26,0)
(40,10,0)
(40,11,0)
(21,43,0)
(8,1,0)
(9,27,0)
(20,8,0)
(26,10,0)
(36,27,0)
(3,42,0)
(12,0,0)
(34,20,0)
(30,1,0)
(14,10,0)
(23,45,0)
(43,20,0)
(44,7,0)
(37,7,0)
(31,30,0)
(2,16,0)
(6,23,0)
(20,7,0)
(45,23,0)
(17,12,0)
(46,9,0)
(19,15,0)
(42,15,0)
(47,11,0)
(24,46,1)
(33,42,1)
(0,9,1)
(26,18,1)
(8,32,1)
(29,28,1)
(45,23,1)
(21,20,1)
(20,8,1)
(12,40,1)
(17,9,1)
(46,16,1)
(11,47,1)
(4,12,1)
(9,24,1)
(13,2,1)
(28,43,1)
(47,5,1)
(38,1,1)
(12,17,1)
(1,30,1)
(42,45,1)
(33,43,1)
(43,20,1)
(35,13,1)
(34,0,1)
(30,31,1)
(6,29,1)
(42,3,1)
(31,22,1)
(22,40,1)
(18,38,1)
(40,11,1)
(32,34,1)
(2,26,1)
(0,4,1)
(23,20,1)
(35,40,1)
(39,21,1)
(43,39,1)
(3,45,1)
(16,35,1)
(23,6,1)
(8,1,1)
(42,43,2)
(16,35,2)
(6,43,2)
(23,20,2)
(23,43,2)
(20,8,2)
(40,11,2)
(1,30,2)
(3,43,2)
(42,45,2)
(35,40,2)
(8,1,2)
(45,23,2)
(29,43,2)
(12,40,2)
(45,43,2)
(28,43,2)
(0,9,2)
(43,20,2)
-----------------------------------
(0,*dataPtr1 = data)
(1,*dataPtr2 = &data)
(2,data)
(3,result)
(4,data)
(5,dataPtr1)
(6,2)
(7,)
(8,*dataPtr2)
(9,data = UINT_MAX)
(10,)
(11,&data)
(12,*dataPtr1)
(13,dataPtr1)
(14,data)
(15,)
(16,data = *dataPtr1)
(17,dataPtr1)
(18,0)
(19,result)
(20,data = *dataPtr2)
(21,data)
(22,dataPtr2)
(23,data * 2)
(24,UINT_MAX)
(25,dataPtr1)
(26,data = 0)
(27,)
(28,result)
(29,data)
(30,&data)
(31,data)
(32,dataPtr2)
(33,RET)
(34,data)
(35,*dataPtr1)
(36,data)
(37,data)
(38,data)
(39,0)
(40,*dataPtr1 = &data)
(41,dataPtr2)
(42,printUnsignedLine(result)
(43,data > 0)
(44,if(data > 0)
(45,result = data * 2)
(46,data)
(47,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^