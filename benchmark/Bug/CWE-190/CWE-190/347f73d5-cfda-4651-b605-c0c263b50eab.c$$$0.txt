-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_18_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
62,63
62,64
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,28,30,35,37,39,41,43,48,51,53,58,59,61,63,67,68,72,74,78,79,83,85
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
76,77
76,78
-----guardedBy-----
37,53
67,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_18_bad(){    int data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_18_bad()
CWE190_Integer_Overflow__int_fgets_multiply_18_bad
{    int data;    /* Initialize data */    data = 0;    goto source;source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
source
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,20,0)
(18,33,0)
(9,23,0)
(16,26,0)
(8,41,0)
(38,5,0)
(2,20,0)
(1,15,0)
(1,13,0)
(26,5,0)
(23,12,0)
(19,18,0)
(27,23,0)
(29,15,0)
(15,5,0)
(21,5,0)
(17,14,0)
(4,5,0)
(20,0,0)
(6,1,0)
(9,15,0)
(40,1,0)
(28,15,0)
(1,23,0)
(25,13,0)
(7,5,0)
(37,33,0)
(39,25,0)
(31,9,0)
(20,33,0)
(23,18,0)
(18,23,0)
(10,20,0)
(30,20,0)
(41,42,0)
(22,9,0)
(24,0,0)
(33,26,0)
(3,26,0)
(35,13,0)
(13,1,0)
(13,14,0)
(34,5,0)
(36,5,0)
(11,33,0)
(25,14,0)
(0,20,1)
(4,23,1)
(1,23,1)
(15,29,1)
(0,24,1)
(21,15,1)
(25,39,1)
(9,15,1)
(20,2,1)
(23,18,1)
(18,19,1)
(41,8,1)
(20,33,1)
(32,25,1)
(32,9,1)
(40,6,1)
(1,40,1)
(35,9,1)
(25,13,1)
(1,15,1)
(27,0,1)
(24,20,1)
(2,30,1)
(6,35,1)
(22,31,1)
(37,11,1)
(4,41,1)
(29,28,1)
(11,21,1)
(39,13,1)
(19,27,1)
(9,22,1)
(33,37,1)
(30,10,1)
(10,33,1)
(13,1,1)
(18,33,1)
(8,0,1)
(9,23,1)
(31,4,1)
(1,15,2)
(1,9,2)
(18,33,2)
(13,1,2)
(41,0,2)
(23,0,2)
(25,13,2)
(1,23,2)
(20,33,2)
(39,9,2)
(40,9,2)
(23,18,2)
(13,9,2)
(35,9,2)
(25,9,2)
(9,23,2)
(8,0,2)
(9,15,2)
(6,9,2)
(27,0,2)
(18,0,2)
(19,0,2)
(0,20,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,data * 2)
(2,stdin)
(3,inputBuffer)
(4,goto sink;)
(5,)
(6,data)
(7,data)
(8,"fgets()
(9,data > 0)
(10,inputBuffer)
(11,inputBuffer)
(12,)
(13,result = data * 2)
(14,)
(15,data = 0)
(16,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,result)
(18,atoi(inputBuffer)
(19,inputBuffer)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,goto source;)
(22,0)
(23,data = atoi(inputBuffer)
(24,NULL)
(25,printIntLine(result)
(26,)
(27,data)
(28,data)
(29,0)
(30,CHAR_ARRAY_SIZE)
(31,data)
(32,RET)
(33,inputBuffer[CHAR_ARRAY_SIZE] = "")
(34,if(data > 0)
(35,result)
(36,sink:)
(37,"")
(38,source:)
(39,result)
(40,2)
(41,printLine("fgets()
(42,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^