-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_04_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_04_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_04_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_04_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(19,6,0)
(8,23,0)
(15,3,0)
(10,9,0)
(22,7,0)
(16,23,0)
(18,2,0)
(21,14,0)
(6,3,0)
(5,18,0)
(2,21,0)
(9,10,0)
(6,23,0)
(11,2,0)
(10,12,0)
(2,6,0)
(25,7,0)
(23,7,0)
(10,3,0)
(3,10,0)
(6,2,0)
(13,7,0)
(18,21,0)
(17,6,0)
(3,24,0)
(12,10,0)
(0,21,0)
(8,16,1)
(20,4,1)
(23,8,1)
(10,12,1)
(6,17,1)
(18,2,1)
(9,15,1)
(6,23,1)
(5,2,1)
(4,1,1)
(2,6,1)
(19,11,1)
(17,19,1)
(18,5,1)
(4,3,1)
(10,9,1)
(1,23,1)
(6,3,1)
(15,1,1)
(3,10,1)
(20,18,1)
(11,4,1)
(5,4,2)
(9,1,2)
(10,9,2)
(3,1,2)
(19,4,2)
(10,12,2)
(18,2,2)
(3,10,2)
(2,4,2)
(18,4,2)
(6,3,2)
(15,1,2)
(11,4,2)
(6,23,2)
(17,4,2)
(6,4,2)
(2,6,2)
(10,1,2)
-----------------------------------
(0,result)
(1,STATIC_CONST_TRUE)
(2,result = data * data)
(3,data = (unsigned int)
(4,STATIC_CONST_TRUE)
(5,result)
(6,data * data)
(7,)
(8,0)
(9,RAND32()
(10,(unsigned int)
(11,result)
(12,unsigned int)
(13,if(STATIC_CONST_TRUE)
(14,)
(15,data)
(16,data)
(17,data)
(18,printUnsignedLine(result)
(19,data)
(20,RET)
(21,)
(22,data)
(23,data = 0)
(24,)
(25,if(STATIC_CONST_TRUE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^