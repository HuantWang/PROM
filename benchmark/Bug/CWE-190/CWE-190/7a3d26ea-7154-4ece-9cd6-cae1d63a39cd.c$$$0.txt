-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_07_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
67,68
68,69
68,70
69,70
69,71
70,71
73,74
73,75
74,75
75,76
75,77
77,78
77,79
79,80
80,81
80,82
81,82
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,66,71,72,76,78,82,83,87,89
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
63,64
63,65
69,70
69,71
80,81
80,82
-----guardedBy-----
39,55
71,82
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_07_bad(){    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_07_bad()
CWE190_Integer_Overflow__int_fgets_multiply_07_bad
{    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(46,31,0)
(45,31,0)
(40,1,0)
(25,8,0)
(38,29,0)
(2,43,0)
(36,37,0)
(45,38,0)
(31,1,0)
(43,7,0)
(15,38,0)
(11,8,0)
(8,33,0)
(26,1,0)
(5,4,0)
(40,31,0)
(29,38,0)
(11,38,0)
(39,45,0)
(47,4,0)
(19,33,0)
(35,10,0)
(34,33,0)
(13,11,0)
(14,29,0)
(31,45,0)
(22,7,0)
(21,30,0)
(38,9,0)
(20,11,0)
(27,4,0)
(32,44,0)
(7,3,0)
(12,43,0)
(23,37,0)
(17,8,0)
(6,45,0)
(18,40,0)
(29,43,0)
(28,33,0)
(24,5,0)
(44,16,0)
(41,4,0)
(48,30,0)
(42,7,0)
(4,5,0)
(45,8,0)
(4,43,0)
(13,20,1)
(32,5,1)
(0,30,1)
(29,14,1)
(4,43,1)
(24,4,1)
(40,31,1)
(45,6,1)
(8,25,1)
(45,8,1)
(18,31,1)
(27,47,1)
(6,39,1)
(11,38,1)
(44,32,1)
(45,38,1)
(4,27,1)
(21,37,1)
(46,11,1)
(15,5,1)
(0,40,1)
(5,4,1)
(37,36,1)
(0,11,1)
(40,18,1)
(31,45,1)
(20,30,1)
(43,2,1)
(21,38,1)
(39,46,1)
(12,37,1)
(11,13,1)
(47,41,1)
(23,8,1)
(36,23,1)
(29,43,1)
(14,15,1)
(41,43,1)
(38,29,1)
(48,21,1)
(11,8,1)
(5,24,1)
(30,48,1)
(2,12,1)
(21,44,1)
(25,17,1)
(38,5,2)
(27,37,2)
(18,11,2)
(11,30,2)
(20,30,2)
(32,5,2)
(29,5,2)
(4,37,2)
(38,29,2)
(39,11,2)
(11,38,2)
(31,45,2)
(41,37,2)
(45,8,2)
(40,11,2)
(5,37,2)
(4,43,2)
(31,11,2)
(5,4,2)
(40,31,2)
(46,11,2)
(24,37,2)
(14,5,2)
(45,11,2)
(11,8,2)
(47,37,2)
(15,5,2)
(13,30,2)
(43,37,2)
(44,5,2)
(2,37,2)
(12,37,2)
(29,43,2)
(6,11,2)
(45,38,2)
-----------------------------------
(0,RET)
(1,)
(2,"")
(3,)
(4,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,2)
(7,)
(8,data = 0)
(9,)
(10,)
(11,data > 0)
(12,inputBuffer)
(13,0)
(14,inputBuffer)
(15,data)
(16,)
(17,data)
(18,result)
(19,data)
(20,data)
(21,staticFive)
(22,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,staticFive)
(24,NULL)
(25,0)
(26,result)
(27,stdin)
(28,if(staticFive==5)
(29,atoi(inputBuffer)
(30,staticFive==5)
(31,result = data * 2)
(32,"fgets()
(33,)
(34,if(staticFive==5)
(35,if(data > 0)
(36,5)
(37,staticFive==5)
(38,data = atoi(inputBuffer)
(39,data)
(40,printIntLine(result)
(41,inputBuffer)
(42,inputBuffer)
(43,inputBuffer[CHAR_ARRAY_SIZE] = "")
(44,printLine("fgets()
(45,data * 2)
(46,result)
(47,CHAR_ARRAY_SIZE)
(48,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^