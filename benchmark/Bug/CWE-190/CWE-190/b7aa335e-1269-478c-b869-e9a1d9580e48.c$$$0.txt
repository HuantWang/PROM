-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,36,37,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
20,21
20,22
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_02_bad()
CWE190_Integer_Overflow__char_rand_multiply_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(15,17,0)
(28,25,0)
(19,1,0)
(2,1,0)
(16,15,0)
(25,1,0)
(25,21,0)
(5,25,0)
(2,21,0)
(22,30,0)
(26,2,0)
(18,21,0)
(15,25,0)
(24,11,0)
(16,17,0)
(0,21,0)
(23,18,0)
(18,8,0)
(4,15,0)
(14,1,0)
(27,30,0)
(1,30,0)
(12,2,0)
(25,15,0)
(21,7,0)
(21,18,0)
(10,16,0)
(8,18,0)
(6,17,0)
(3,30,0)
(18,23,0)
(25,1,1)
(20,2,1)
(12,26,1)
(9,29,1)
(29,1,1)
(28,4,1)
(16,10,1)
(2,1,1)
(10,15,1)
(15,25,1)
(5,28,1)
(18,23,1)
(2,12,1)
(19,14,1)
(26,9,1)
(4,2,1)
(8,0,1)
(1,19,1)
(0,29,1)
(18,8,1)
(9,21,1)
(25,21,1)
(20,16,1)
(2,21,1)
(20,9,1)
(25,5,1)
(21,18,1)
(16,15,1)
(0,29,2)
(10,2,2)
(16,15,2)
(4,2,2)
(28,2,2)
(15,25,2)
(18,8,2)
(5,2,2)
(26,9,2)
(21,18,2)
(16,2,2)
(15,2,2)
(18,29,2)
(8,29,2)
(2,21,2)
(18,23,2)
(2,9,2)
(25,21,2)
(25,1,2)
(21,29,2)
(2,1,2)
(12,9,2)
(25,2,2)
-----------------------------------
(0,data)
(1,data = ' ')
(2,data > 0)
(3,if(1)
(4,result)
(5,2)
(6,result)
(7,)
(8,RAND32()
(9,1)
(10,result)
(11,)
(12,0)
(13,data = \' \')
(14,data)
(15,result = data * 2)
(16,printHexCharLine(result)
(17,)
(18,(char)
(19,' ')
(20,RET)
(21,data = (char)
(22,if(1)
(23,char)
(24,if(data > 0)
(25,data * 2)
(26,data)
(27,data)
(28,data)
(29,1)
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^