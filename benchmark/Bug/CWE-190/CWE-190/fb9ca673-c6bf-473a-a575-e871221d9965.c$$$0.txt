-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_04_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,35,39,41,45,47
-----computeFrom-----
12,13
12,14
21,22
21,23
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_04_bad(){    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_04_bad()
CWE190_Integer_Overflow__short_max_square_04_bad
{    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(14,2,0)
(23,20,0)
(22,5,0)
(11,5,0)
(5,2,0)
(5,12,0)
(2,20,0)
(4,18,0)
(11,16,0)
(16,6,0)
(5,11,0)
(12,7,0)
(13,16,0)
(0,12,0)
(19,2,0)
(21,11,0)
(15,5,0)
(8,12,0)
(9,20,0)
(17,20,0)
(18,11,0)
(18,16,0)
(14,19,1)
(10,1,1)
(5,12,1)
(12,8,1)
(18,11,1)
(8,0,1)
(18,4,1)
(22,15,1)
(11,5,1)
(3,2,1)
(1,3,1)
(5,2,1)
(10,18,1)
(2,14,1)
(21,1,1)
(4,11,1)
(1,12,1)
(0,3,1)
(5,22,1)
(15,21,1)
(4,1,2)
(18,11,2)
(11,1,2)
(5,2,2)
(12,3,2)
(11,5,2)
(0,3,2)
(18,1,2)
(21,1,2)
(5,12,2)
(8,3,2)
(5,1,2)
(22,1,2)
(15,1,2)
-----------------------------------
(0,data)
(1,STATIC_CONST_TRUE)
(2,data = 0)
(3,STATIC_CONST_TRUE)
(4,result)
(5,data * data)
(6,)
(7,)
(8,SHRT_MAX)
(9,if(STATIC_CONST_TRUE)
(10,RET)
(11,result = data * data)
(12,data = SHRT_MAX)
(13,result)
(14,0)
(15,data)
(16,)
(17,data)
(18,printIntLine(result)
(19,data)
(20,)
(21,result)
(22,data)
(23,if(STATIC_CONST_TRUE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^