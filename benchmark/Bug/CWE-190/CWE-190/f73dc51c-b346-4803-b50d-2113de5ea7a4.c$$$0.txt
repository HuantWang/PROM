-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_add_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,71,75,77
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_add_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_add_17_bad()
CWE190_Integer_Overflow__int_fscanf_add_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(31,24,0)
(22,24,0)
(18,25,0)
(30,26,0)
(8,18,0)
(37,15,0)
(27,9,0)
(13,26,0)
(14,21,0)
(9,18,0)
(1,6,0)
(19,9,0)
(29,25,0)
(0,25,0)
(10,18,0)
(15,5,0)
(21,14,0)
(14,40,0)
(4,31,0)
(41,24,0)
(6,5,0)
(26,32,0)
(21,18,0)
(36,5,0)
(7,31,0)
(30,19,0)
(28,25,0)
(39,19,0)
(17,9,0)
(23,24,0)
(19,26,0)
(3,25,0)
(16,6,0)
(35,14,0)
(33,23,0)
(9,19,0)
(11,25,0)
(12,14,0)
(38,5,0)
(2,30,0)
(34,21,0)
(4,23,1)
(31,24,1)
(21,34,1)
(22,6,1)
(20,31,1)
(39,31,1)
(16,5,1)
(7,4,1)
(23,24,1)
(34,12,1)
(9,17,1)
(41,22,1)
(27,39,1)
(6,5,1)
(2,19,1)
(15,5,1)
(38,18,1)
(14,21,1)
(9,18,1)
(1,16,1)
(17,27,1)
(16,15,1)
(21,18,1)
(5,36,1)
(23,33,1)
(6,1,1)
(37,14,1)
(35,6,1)
(4,24,1)
(30,2,1)
(31,7,1)
(12,35,1)
(15,37,1)
(24,41,1)
(33,30,1)
(30,19,1)
(36,38,1)
(18,8,1)
(8,10,1)
(19,9,1)
(27,31,2)
(16,6,2)
(30,19,2)
(2,31,2)
(14,21,2)
(7,31,2)
(1,6,2)
(21,6,2)
(39,31,2)
(34,6,2)
(30,31,2)
(17,31,2)
(15,6,2)
(31,31,2)
(9,31,2)
(23,31,2)
(33,31,2)
(12,6,2)
(35,6,2)
(6,5,2)
(31,24,2)
(23,24,2)
(37,6,2)
(9,18,2)
(19,9,2)
(6,6,2)
(4,31,2)
(14,6,2)
(15,5,2)
(21,18,2)
(19,31,2)
-----------------------------------
(0,data)
(1,1)
(2,result)
(3,j)
(4,j)
(5,i = 0)
(6,i < 1)
(7,1)
(8,0)
(9,data + 1)
(10,data)
(11,for(j = 0; j < 1; j++)
(12,"%d")
(13,result)
(14,fscanf(stdin, "%d", &data)
(15,i++)
(16,i)
(17,1)
(18,data = 0)
(19,result = data + 1)
(20,RET)
(21,&data)
(22,j)
(23,j++)
(24,j = 0)
(25,)
(26,)
(27,data)
(28,for(i = 0; i < 1; i++)
(29,i)
(30,printIntLine(result)
(31,j < 1)
(32,)
(33,j)
(34,data)
(35,stdin)
(36,0)
(37,i)
(38,i)
(39,result)
(40,)
(41,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^