-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_08_bad()
{
    unsigned int data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
22,23
22,24
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_08_bad(){    unsigned int data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_08_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_08_bad
{    unsigned int data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(0,21,0)
(2,21,0)
(0,23,0)
(13,3,0)
(12,11,0)
(0,11,0)
(7,9,0)
(5,24,0)
(20,3,0)
(23,3,0)
(11,5,0)
(12,5,0)
(7,8,0)
(10,5,0)
(14,3,0)
(4,0,0)
(7,21,0)
(8,7,0)
(21,22,0)
(18,0,0)
(16,12,0)
(11,0,0)
(19,11,0)
(21,7,0)
(1,23,0)
(17,23,0)
(9,7,0)
(0,4,1)
(7,9,1)
(0,21,1)
(17,1,1)
(18,19,1)
(11,0,1)
(12,16,1)
(2,25,1)
(4,18,1)
(8,2,1)
(15,6,1)
(15,12,1)
(6,25,1)
(16,11,1)
(25,23,1)
(23,17,1)
(0,23,1)
(19,6,1)
(7,8,1)
(6,21,1)
(12,11,1)
(21,7,1)
(4,6,2)
(7,25,2)
(8,25,2)
(7,8,2)
(11,6,2)
(18,6,2)
(19,6,2)
(2,25,2)
(21,25,2)
(16,6,2)
(0,23,2)
(7,9,2)
(21,7,2)
(11,0,2)
(12,6,2)
(0,21,2)
(12,11,2)
(0,6,2)
-----------------------------------
(0,data * data)
(1,data)
(2,data)
(3,)
(4,data)
(5,)
(6,staticReturnsTrue()
(7,(unsigned int)
(8,RAND32()
(9,unsigned int)
(10,result)
(11,result = data * data)
(12,printUnsignedLine(result)
(13,data)
(14,if(staticReturnsTrue()
(15,RET)
(16,result)
(17,0)
(18,data)
(19,result)
(20,if(staticReturnsTrue()
(21,data = (unsigned int)
(22,)
(23,data = 0)
(24,)
(25,staticReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^