-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_03_bad()
CWE190_Integer_Overflow__char_max_square_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(5,27,0)
(13,19,0)
(4,15,0)
(9,6,0)
(23,14,0)
(19,22,0)
(26,12,0)
(17,19,0)
(28,18,0)
(27,18,0)
(18,0,0)
(24,18,0)
(2,28,0)
(22,12,0)
(6,16,0)
(19,27,0)
(8,14,0)
(21,12,0)
(19,6,0)
(20,15,0)
(27,19,0)
(11,12,0)
(1,22,0)
(28,27,0)
(3,6,0)
(7,22,0)
(3,9,1)
(7,1,1)
(28,27,1)
(23,8,1)
(27,19,1)
(9,14,1)
(28,2,1)
(19,6,1)
(19,22,1)
(10,28,1)
(10,15,1)
(20,4,1)
(19,13,1)
(4,14,1)
(6,3,1)
(13,17,1)
(17,5,1)
(14,23,1)
(8,22,1)
(4,6,1)
(15,20,1)
(2,27,1)
(22,7,1)
(5,15,1)
(2,15,2)
(27,19,2)
(13,15,2)
(27,15,2)
(6,14,2)
(3,14,2)
(17,15,2)
(19,15,2)
(5,15,2)
(9,14,2)
(28,27,2)
(28,15,2)
(19,6,2)
(19,22,2)
-----------------------------------
(0,)
(1,data)
(2,result)
(3,CHAR_MAX)
(4,5)
(5,result)
(6,data = CHAR_MAX)
(7,' ')
(8,5)
(9,data)
(10,RET)
(11,data)
(12,)
(13,data)
(14,5==5)
(15,5==5)
(16,)
(17,data)
(18,)
(19,data * data)
(20,5)
(21,if(5==5)
(22,data = ' ')
(23,5)
(24,result)
(25,data = \' \')
(26,if(5==5)
(27,result = data * data)
(28,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^