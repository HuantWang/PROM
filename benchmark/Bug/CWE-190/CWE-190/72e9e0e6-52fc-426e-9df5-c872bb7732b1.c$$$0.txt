-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_16_bad()
{
    short data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,38,42,44,48,50,51
-----computeFrom-----
12,13
12,14
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_16_bad(){    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__short_fscanf_square_16_bad()
CWE190_Integer_Overflow__short_fscanf_square_16_bad
{    short data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(8,26,0)
(21,9,0)
(14,10,0)
(1,4,0)
(0,16,0)
(12,16,0)
(23,6,0)
(5,4,0)
(9,0,0)
(20,6,0)
(4,13,0)
(15,23,0)
(21,6,0)
(6,26,0)
(23,4,0)
(2,9,0)
(3,26,0)
(4,23,0)
(10,9,0)
(18,26,0)
(17,21,0)
(10,0,0)
(24,6,0)
(9,21,0)
(25,0,0)
(27,21,0)
(19,13,0)
(12,10,1)
(24,20,1)
(15,5,1)
(2,11,1)
(27,2,1)
(1,22,1)
(10,9,1)
(19,4,1)
(4,23,1)
(23,15,1)
(6,24,1)
(14,9,1)
(7,11,1)
(5,1,1)
(10,14,1)
(21,17,1)
(17,27,1)
(7,12,1)
(23,6,1)
(22,6,1)
(11,22,1)
(11,19,1)
(9,21,1)
(21,6,1)
(4,23,2)
(2,11,2)
(23,6,2)
(19,22,2)
(21,6,2)
(9,11,2)
(17,11,2)
(23,22,2)
(5,22,2)
(10,11,2)
(14,11,2)
(10,9,2)
(4,22,2)
(9,21,2)
(12,11,2)
(15,22,2)
(21,11,2)
(27,11,2)
(1,22,2)
-----------------------------------
(0,)
(1,stdin)
(2,result)
(3,data)
(4,fscanf (stdin, "%hd", &data)
(5,"%hd")
(6,data = 0)
(7,RET)
(8,while(1)
(9,result = data * data)
(10,printIntLine(result)
(11,1)
(12,break;)
(13,)
(14,result)
(15,data)
(16,)
(17,data)
(18,while(1)
(19,break;)
(20,data)
(21,data * data)
(22,1)
(23,&data)
(24,0)
(25,result)
(26,)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^