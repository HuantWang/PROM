-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_17_bad()
{
    int i,j;
    unsigned int data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,61,65,67,71,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
58,59
58,60
69,70
69,71
-----guardedBy-----
60,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_17_bad(){    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_17_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_17_bad
{    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(5,16,0)
(10,27,0)
(19,37,0)
(32,9,0)
(12,22,0)
(29,7,0)
(42,37,0)
(9,16,0)
(34,26,0)
(33,29,0)
(23,39,0)
(38,21,0)
(22,29,0)
(26,21,0)
(3,37,0)
(13,41,0)
(27,16,0)
(25,23,0)
(22,26,0)
(35,27,0)
(41,26,0)
(11,42,0)
(8,29,0)
(30,21,0)
(14,26,0)
(18,24,0)
(28,23,0)
(17,7,0)
(29,22,0)
(43,21,0)
(22,23,0)
(36,21,0)
(4,41,0)
(6,40,0)
(31,42,0)
(1,21,0)
(40,37,0)
(33,7,0)
(41,23,0)
(2,16,0)
(20,33,0)
(15,22,0)
(22,15,1)
(4,42,1)
(26,14,1)
(5,26,1)
(9,32,1)
(9,16,1)
(14,34,1)
(32,23,1)
(37,3,1)
(6,41,1)
(35,16,1)
(40,37,1)
(41,13,1)
(15,12,1)
(42,11,1)
(29,22,1)
(31,37,1)
(12,8,1)
(25,27,1)
(8,41,1)
(20,29,1)
(42,37,1)
(3,19,1)
(41,26,1)
(31,40,1)
(6,33,1)
(23,28,1)
(35,9,1)
(0,42,1)
(27,16,1)
(33,29,1)
(41,23,1)
(11,31,1)
(27,10,1)
(40,6,1)
(33,20,1)
(22,26,1)
(28,25,1)
(13,4,1)
(2,5,1)
(16,2,1)
(22,23,1)
(19,27,1)
(10,35,1)
(10,27,2)
(41,42,2)
(29,22,2)
(27,27,2)
(23,27,2)
(42,42,2)
(4,42,2)
(8,41,2)
(29,41,2)
(42,37,2)
(27,16,2)
(22,41,2)
(22,23,2)
(13,42,2)
(32,27,2)
(12,41,2)
(28,27,2)
(22,26,2)
(9,27,2)
(6,42,2)
(40,37,2)
(31,42,2)
(15,41,2)
(41,23,2)
(25,27,2)
(35,27,2)
(33,41,2)
(33,29,2)
(9,16,2)
(20,41,2)
(41,26,2)
(40,42,2)
(11,42,2)
-----------------------------------
(0,RET)
(1,for(j = 0; j < 1; j++)
(2,0)
(3,0)
(4,data)
(5,i)
(6,j)
(7,)
(8,result)
(9,i++)
(10,1)
(11,1)
(12,data)
(13,0)
(14,0)
(15,2)
(16,i = 0)
(17,result)
(18,if(data > 0)
(19,j)
(20,result)
(21,)
(22,data * 2)
(23,data = UINT_MAX)
(24,)
(25,data)
(26,data = 0)
(27,i < 1)
(28,UINT_MAX)
(29,result = data * 2)
(30,i)
(31,j)
(32,i)
(33,printUnsignedLine(result)
(34,data)
(35,i)
(36,j)
(37,j = 0)
(38,data)
(39,)
(40,j++)
(41,data > 0)
(42,j < 1)
(43,for(i = 0; i < 1; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^