-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_02_bad()
{
    short data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,17,22,24,26,31,32,36,38,42,43,47,49
-----computeFrom-----
12,13
12,14
20,21
20,22
29,30
29,31
40,41
40,42
-----guardedBy-----
31,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_02_bad(){    short data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_02_bad()
CWE190_Integer_Overflow__short_max_multiply_02_bad
{    short data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(11,14,0)
(19,13,0)
(8,1,0)
(23,21,0)
(10,3,0)
(13,7,0)
(20,23,0)
(15,1,0)
(17,8,0)
(25,17,0)
(16,8,0)
(2,5,0)
(5,21,0)
(22,14,0)
(6,1,0)
(14,8,0)
(4,17,0)
(17,13,0)
(14,13,0)
(17,5,0)
(18,13,0)
(12,21,0)
(0,1,0)
(23,5,0)
(5,17,0)
(9,8,0)
(27,14,1)
(11,22,1)
(26,24,1)
(27,26,1)
(4,2,1)
(19,24,1)
(20,5,1)
(24,8,1)
(2,14,1)
(23,20,1)
(14,8,1)
(27,23,1)
(8,16,1)
(14,13,1)
(25,4,1)
(18,19,1)
(23,5,1)
(17,13,1)
(17,8,1)
(26,13,1)
(22,26,1)
(16,9,1)
(17,25,1)
(14,11,1)
(13,18,1)
(5,17,1)
(14,13,2)
(14,8,2)
(2,14,2)
(13,24,2)
(25,14,2)
(17,13,2)
(23,14,2)
(20,14,2)
(23,5,2)
(4,14,2)
(14,26,2)
(5,14,2)
(18,24,2)
(22,26,2)
(19,24,2)
(17,14,2)
(17,8,2)
(11,26,2)
(5,17,2)
-----------------------------------
(0,if(1)
(1,)
(2,result)
(3,)
(4,data)
(5,result = data * 2)
(6,if(1)
(7,)
(8,data = 0)
(9,data)
(10,if(data > 0)
(11,0)
(12,result)
(13,data = SHRT_MAX)
(14,data > 0)
(15,data)
(16,0)
(17,data * 2)
(18,SHRT_MAX)
(19,data)
(20,result)
(21,)
(22,data)
(23,printIntLine(result)
(24,1)
(25,2)
(26,1)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^