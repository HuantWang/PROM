-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_18_bad()
{
    char data;
    data = ' ';
    goto source;
source:
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
33,34
33,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,17,19,23,26,27,30,32,34,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_18_bad(){    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_multiply_18_bad()
CWE190_Integer_Overflow__char_rand_multiply_18_bad
{    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
goto source;
source
source:    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();
source
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(15,19,0)
(23,12,0)
(1,19,0)
(0,19,0)
(16,19,0)
(18,13,0)
(14,13,0)
(26,19,0)
(13,16,0)
(4,17,0)
(9,19,0)
(8,12,0)
(6,9,0)
(20,3,0)
(21,3,0)
(2,13,0)
(12,16,0)
(24,2,0)
(11,16,0)
(3,20,0)
(22,9,0)
(3,21,0)
(27,17,0)
(3,16,0)
(16,3,0)
(25,19,0)
(2,17,0)
(27,2,0)
(13,2,0)
(10,27,0)
(5,19,0)
(3,20,1)
(0,16,1)
(20,11,1)
(18,14,1)
(12,16,1)
(7,27,1)
(16,3,1)
(10,2,1)
(7,12,1)
(27,2,1)
(12,23,1)
(3,21,1)
(9,22,1)
(11,1,1)
(13,18,1)
(14,24,1)
(22,6,1)
(27,10,1)
(2,13,1)
(23,8,1)
(13,16,1)
(1,9,1)
(8,0,1)
(24,12,1)
(3,20,2)
(27,2,2)
(14,12,2)
(13,16,2)
(24,12,2)
(27,12,2)
(12,16,2)
(18,12,2)
(2,12,2)
(13,12,2)
(16,3,2)
(3,21,2)
(10,12,2)
(2,13,2)
-----------------------------------
(0,goto sink;)
(1,goto source;)
(2,result = data * 2)
(3,(char)
(4,result)
(5,source:)
(6,data)
(7,RET)
(8,data)
(9,data = ' ')
(10,result)
(11,data)
(12,data > 0)
(13,data * 2)
(14,data)
(15,sink:)
(16,data = (char)
(17,)
(18,2)
(19,)
(20,RAND32()
(21,char)
(22,' ')
(23,0)
(24,result)
(25,if(data > 0)
(26,data)
(27,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^