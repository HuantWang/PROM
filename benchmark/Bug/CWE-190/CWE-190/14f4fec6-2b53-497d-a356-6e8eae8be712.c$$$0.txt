-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,74,78,80,84,86
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_32_bad()
CWE190_Integer_Overflow__short_max_square_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,9,0)
(20,12,0)
(18,10,0)
(38,32,0)
(1,32,0)
(32,29,0)
(16,21,0)
(8,1,0)
(4,12,0)
(39,9,0)
(23,0,0)
(12,0,0)
(42,11,0)
(12,4,0)
(10,26,0)
(27,23,0)
(32,17,0)
(7,8,0)
(35,1,0)
(1,8,0)
(30,0,0)
(0,30,0)
(39,11,0)
(41,40,0)
(36,8,0)
(17,40,0)
(13,36,0)
(0,40,0)
(26,10,0)
(36,21,0)
(33,1,0)
(14,9,0)
(11,9,0)
(29,10,0)
(5,26,0)
(9,40,0)
(3,0,0)
(10,40,0)
(29,32,0)
(15,43,0)
(23,39,0)
(31,43,0)
(2,40,0)
(28,29,0)
(21,17,0)
(25,4,0)
(8,21,0)
(22,40,0)
(6,11,0)
(43,40,0)
(24,30,0)
(37,39,0)
(34,17,0)
(23,0,1)
(7,32,1)
(19,36,1)
(27,11,1)
(30,24,1)
(29,28,1)
(23,27,1)
(24,3,1)
(36,8,1)
(0,30,1)
(18,0,1)
(13,8,1)
(28,38,1)
(36,13,1)
(26,5,1)
(8,1,1)
(15,10,1)
(11,42,1)
(31,15,1)
(43,31,1)
(1,33,1)
(42,6,1)
(39,37,1)
(12,0,1)
(10,26,1)
(1,32,1)
(37,23,1)
(4,12,1)
(6,4,1)
(29,10,1)
(35,7,1)
(25,43,1)
(39,11,1)
(20,25,1)
(5,18,1)
(12,20,1)
(32,29,1)
(38,39,1)
(33,35,1)
(29,10,2)
(0,30,2)
(8,1,2)
(1,32,2)
(23,0,2)
(32,29,2)
(12,0,2)
(4,12,2)
(10,26,2)
(36,8,2)
(39,11,2)
-----------------------------------
(0,*dataPtr1 = &data)
(1,data * data)
(2,dataPtr2)
(3,dataPtr1)
(4,data = *dataPtr1)
(5,data)
(6,data)
(7,result)
(8,result = data * data)
(9,)
(10,*dataPtr2 = &data)
(11,data = SHRT_MAX)
(12,*dataPtr1)
(13,result)
(14,data)
(15,data)
(16,result)
(17,)
(18,dataPtr2)
(19,RET)
(20,dataPtr1)
(21,)
(22,data)
(23,*dataPtr1)
(24,data)
(25,data)
(26,&data)
(27,dataPtr1)
(28,dataPtr2)
(29,*dataPtr2)
(30,&data)
(31,0)
(32,data = *dataPtr2)
(33,data)
(34,data)
(35,data)
(36,printIntLine(result)
(37,data)
(38,data)
(39,*dataPtr1 = data)
(40,)
(41,dataPtr1)
(42,SHRT_MAX)
(43,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^