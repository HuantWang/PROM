-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_10_bad()
{
    int64_t data;
    data = 0LL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
27,28
30,31
31,32
33,34
33,35
34,35
36,37
37,38
37,39
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,9,11,15,16,19,24,28,29,32,35,41,43,47,49,53,55
-----computeFrom-----
13,14
13,15
22,23
22,24
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_10_bad(){    int64_t data;    data = 0LL;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_10_bad()
CWE190_Integer_Overflow__int64_t_rand_square_10_bad
{    int64_t data;    data = 0LL;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(8,21,0)
(13,2,0)
(22,9,0)
(21,8,0)
(7,4,0)
(6,2,0)
(3,20,0)
(20,18,0)
(20,19,0)
(21,7,0)
(10,21,0)
(20,3,0)
(8,3,0)
(15,2,0)
(0,8,0)
(16,8,0)
(9,7,0)
(18,20,0)
(5,3,0)
(3,1,0)
(19,20,0)
(12,7,0)
(14,2,0)
(9,21,0)
(22,21,1)
(9,21,1)
(0,10,1)
(23,3,1)
(11,9,1)
(10,23,1)
(20,19,1)
(20,18,1)
(8,3,1)
(23,17,1)
(11,23,1)
(8,16,1)
(16,0,1)
(9,22,1)
(17,15,1)
(19,5,1)
(3,20,1)
(5,17,1)
(21,8,1)
(9,21,2)
(19,17,2)
(5,17,2)
(20,18,2)
(22,23,2)
(0,23,2)
(3,17,2)
(16,23,2)
(9,23,2)
(20,19,2)
(3,20,2)
(21,8,2)
(8,23,2)
(20,17,2)
(10,23,2)
(8,3,2)
(21,23,2)
-----------------------------------
(0,data)
(1,)
(2,)
(3,data = (int64_t)
(4,)
(5,data)
(6,if(globalTrue)
(7,)
(8,data * data)
(9,printLongLongLine(result)
(10,result)
(11,RET)
(12,result)
(13,if(globalTrue)
(14,data)
(15,L)
(16,data)
(17,globalTrue)
(18,int64_t)
(19,RAND64()
(20,(int64_t)
(21,result = data * data)
(22,result)
(23,globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^