-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_12_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            data++;            unsigned int result = data;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(28,37,0)
(15,9,0)
(23,24,0)
(4,40,0)
(16,14,0)
(25,39,0)
(20,5,0)
(11,36,0)
(24,19,0)
(36,33,0)
(41,28,0)
(1,22,0)
(45,28,0)
(29,40,0)
(39,9,0)
(27,3,0)
(46,5,0)
(19,14,0)
(24,36,0)
(3,5,0)
(28,3,0)
(10,16,0)
(30,19,0)
(44,34,0)
(32,16,0)
(46,14,0)
(8,7,0)
(35,46,0)
(5,40,0)
(21,5,0)
(34,38,0)
(19,5,0)
(42,22,0)
(0,19,0)
(22,14,0)
(2,14,0)
(16,5,0)
(6,14,0)
(31,40,0)
(22,5,0)
(39,16,0)
(26,14,0)
(26,36,0)
(26,5,0)
(16,9,0)
(17,26,0)
(46,9,0)
(3,28,0)
(19,36,0)
(14,13,0)
(3,5,1)
(26,5,1)
(22,42,1)
(22,14,1)
(26,14,1)
(34,44,1)
(44,22,1)
(19,14,1)
(12,28,1)
(32,46,1)
(43,39,1)
(30,0,1)
(25,16,1)
(46,14,1)
(3,27,1)
(24,23,1)
(28,3,1)
(26,17,1)
(42,1,1)
(16,5,1)
(39,16,1)
(27,41,1)
(17,12,1)
(10,32,1)
(16,10,1)
(16,14,1)
(5,21,1)
(12,14,1)
(0,26,1)
(46,5,1)
(21,20,1)
(14,2,1)
(23,19,1)
(39,25,1)
(6,18,1)
(35,22,1)
(1,12,1)
(43,34,1)
(19,5,1)
(18,5,1)
(46,35,1)
(19,30,1)
(45,18,1)
(41,45,1)
(24,19,1)
(22,5,1)
(2,6,1)
(43,24,1)
(24,12,2)
(19,12,2)
(16,22,2)
(30,12,2)
(14,18,2)
(3,18,2)
(42,12,2)
(39,22,2)
(24,19,2)
(22,14,2)
(28,18,2)
(41,18,2)
(19,5,2)
(10,22,2)
(16,5,2)
(17,12,2)
(22,5,2)
(26,5,2)
(6,18,2)
(46,22,2)
(23,12,2)
(16,14,2)
(34,22,2)
(25,22,2)
(22,12,2)
(0,12,2)
(28,3,2)
(39,16,2)
(27,18,2)
(1,12,2)
(19,14,2)
(26,14,2)
(44,22,2)
(46,14,2)
(45,18,2)
(46,5,2)
(32,22,2)
(35,22,2)
(26,12,2)
(3,5,2)
(2,18,2)
-----------------------------------
(0,result)
(1,data)
(2,2)
(3,&data)
(4,if(globalReturnsTrueOrFalse()
(5,data = 0)
(6,data)
(7,)
(8,if (data < UINT_MAX)
(9,)
(10,data)
(11,result)
(12,globalReturnsTrueOrFalse()
(13,)
(14,data = 2)
(15,result)
(16,result = data)
(17,data)
(18,globalReturnsTrueOrFalse()
(19,result = data)
(20,data)
(21,0)
(22,data < UINT_MAX)
(23,result)
(24,printUnsignedLine(result)
(25,result)
(26,data++)
(27,data)
(28,fscanf (stdin, "%u", &data)
(29,if(globalReturnsTrueOrFalse()
(30,data)
(31,data)
(32,result)
(33,)
(34,printLine("data value is too large to perform arithmetic safely.")
(35,data)
(36,)
(37,)
(38,)
(39,printUnsignedLine(result)
(40,)
(41,"%u")
(42,UINT_MAX)
(43,RET)
(44,"data value is too large to perform arithmetic safely.")
(45,stdin)
(46,data++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^