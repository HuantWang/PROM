-----label-----
1
-----code-----
static void badSink()
{
    char data = CWE190_Integer_Overflow__char_max_multiply_45_badData;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
20,21
21,22
21,23
23,24
23,25
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,8,10,13,17,18,22,24,28,29,33,35
-----computeFrom-----
15,16
15,17
26,27
26,28
-----guardedBy-----
17,28
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    char data = CWE190_Integer_Overflow__char_max_multiply_45_badData;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
static void
badSink()
badSink
{    char data = CWE190_Integer_Overflow__char_max_multiply_45_badData;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data = CWE190_Integer_Overflow__char_max_multiply_45_badData;
char data = CWE190_Integer_Overflow__char_max_multiply_45_badData;
char
data = CWE190_Integer_Overflow__char_max_multiply_45_badData
data
= CWE190_Integer_Overflow__char_max_multiply_45_badData
CWE190_Integer_Overflow__char_max_multiply_45_badData
CWE190_Integer_Overflow__char_max_multiply_45_badData
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(3,8,0)
(14,6,0)
(17,13,0)
(12,18,0)
(10,9,0)
(4,18,0)
(7,12,0)
(13,12,0)
(5,18,0)
(6,8,0)
(11,9,0)
(15,11,0)
(1,6,0)
(8,9,0)
(8,6,0)
(6,12,0)
(11,8,0)
(16,13,0)
(0,12,0)
(2,11,1)
(8,6,1)
(13,12,1)
(11,15,1)
(15,8,1)
(17,16,1)
(16,12,1)
(6,1,1)
(12,0,1)
(0,7,1)
(13,17,1)
(1,14,1)
(2,13,1)
(3,13,1)
(14,3,1)
(6,12,1)
(11,8,1)
(14,13,2)
(11,13,2)
(8,6,2)
(6,13,2)
(15,13,2)
(13,12,2)
(1,13,2)
(6,12,2)
(8,13,2)
(3,13,2)
(11,8,2)
-----------------------------------
(0,CWE190_Integer_Overflow__char_max_multiply_45_badData)
(1,2)
(2,RET)
(3,result)
(4,if(data > 0)
(5,data)
(6,data * 2)
(7,data)
(8,result = data * 2)
(9,)
(10,result)
(11,printHexCharLine(result)
(12,data = CWE190_Integer_Overflow__char_max_multiply_45_badData)
(13,data > 0)
(14,data)
(15,result)
(16,data)
(17,0)
(18,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^