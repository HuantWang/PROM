-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_11_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,41,44,46,49,53,55
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_11_bad(){    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_11_bad()
CWE190_Integer_Overflow__char_rand_postinc_11_bad
{    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,17,0)
(7,19,0)
(13,11,0)
(4,19,0)
(21,12,0)
(3,6,0)
(14,5,0)
(11,21,0)
(17,21,0)
(9,13,0)
(5,19,0)
(1,6,0)
(15,4,0)
(13,19,0)
(26,10,0)
(21,11,0)
(12,21,0)
(20,6,0)
(23,11,0)
(10,6,0)
(13,10,0)
(4,5,0)
(8,5,0)
(5,11,0)
(5,10,0)
(11,24,0)
(19,22,0)
(25,10,0)
(5,11,1)
(13,10,1)
(25,26,1)
(12,23,1)
(14,8,1)
(10,25,1)
(21,12,1)
(9,16,1)
(11,21,1)
(5,14,1)
(16,11,1)
(16,2,1)
(23,2,1)
(8,13,1)
(4,5,1)
(5,10,1)
(4,15,1)
(21,17,1)
(0,4,1)
(13,9,1)
(15,5,1)
(2,10,1)
(13,11,1)
(0,16,1)
(9,16,2)
(21,2,2)
(23,2,2)
(13,11,2)
(11,2,2)
(13,16,2)
(5,11,2)
(15,16,2)
(5,16,2)
(8,16,2)
(5,10,2)
(4,16,2)
(21,12,2)
(11,21,2)
(21,17,2)
(14,16,2)
(4,5,2)
(12,2,2)
(13,10,2)
-----------------------------------
(0,RET)
(1,if(globalReturnsTrue()
(2,globalReturnsTrue()
(3,data)
(4,printHexCharLine(result)
(5,result = data)
(6,)
(7,result)
(8,result)
(9,data)
(10,data = ' ')
(11,data = (char)
(12,RAND32()
(13,data++)
(14,data)
(15,result)
(16,globalReturnsTrue()
(17,char)
(18,data = \' \')
(19,)
(20,if(globalReturnsTrue()
(21,(char)
(22,)
(23,data)
(24,)
(25,' ')
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^