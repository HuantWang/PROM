-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_13_bad()
{
    short data;
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_13_bad(){    short data;    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_13_bad()
CWE190_Integer_Overflow__short_max_multiply_13_bad
{    short data;    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(15,24,0)
(4,21,0)
(17,18,0)
(20,29,0)
(27,14,0)
(8,3,0)
(16,17,0)
(2,29,0)
(28,0,0)
(30,5,0)
(17,0,0)
(6,0,0)
(31,3,0)
(24,18,0)
(19,5,0)
(12,23,0)
(18,21,0)
(24,21,0)
(0,9,0)
(22,29,0)
(7,25,0)
(3,0,0)
(26,18,0)
(3,23,0)
(13,23,0)
(11,25,0)
(23,29,0)
(1,17,0)
(18,17,0)
(17,23,0)
(18,17,1)
(17,0,1)
(3,31,1)
(17,23,1)
(19,30,1)
(28,25,1)
(0,6,1)
(30,0,1)
(10,24,1)
(1,26,1)
(24,18,1)
(26,3,1)
(16,1,1)
(3,23,1)
(10,3,1)
(7,11,1)
(3,0,1)
(10,5,1)
(25,7,1)
(15,18,1)
(30,25,1)
(23,13,1)
(13,12,1)
(8,5,1)
(31,8,1)
(17,16,1)
(11,23,1)
(5,19,1)
(6,28,1)
(24,15,1)
(24,18,2)
(17,3,2)
(1,3,2)
(3,5,2)
(18,3,2)
(3,23,2)
(28,25,2)
(6,25,2)
(17,0,2)
(31,5,2)
(3,0,2)
(0,25,2)
(15,3,2)
(17,23,2)
(16,3,2)
(24,3,2)
(26,3,2)
(18,17,2)
(8,5,2)
-----------------------------------
(0,data = SHRT_MAX)
(1,data)
(2,if(GLOBAL_CONST_FIVE==5)
(3,data > 0)
(4,result)
(5,GLOBAL_CONST_FIVE==5)
(6,SHRT_MAX)
(7,5)
(8,data)
(9,)
(10,RET)
(11,GLOBAL_CONST_FIVE)
(12,data)
(13,0)
(14,)
(15,result)
(16,2)
(17,data * 2)
(18,result = data * 2)
(19,5)
(20,if(GLOBAL_CONST_FIVE==5)
(21,)
(22,data)
(23,data = 0)
(24,printIntLine(result)
(25,GLOBAL_CONST_FIVE==5)
(26,result)
(27,if(data > 0)
(28,data)
(29,)
(30,GLOBAL_CONST_FIVE)
(31,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^