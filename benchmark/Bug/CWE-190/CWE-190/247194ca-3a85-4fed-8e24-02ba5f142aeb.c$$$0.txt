-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_09_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,29,34,35,39,41,45,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
32,33
32,34
43,44
43,45
-----guardedBy-----
34,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_09_bad(){    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_09_bad()
CWE190_Integer_Overflow__int_rand_multiply_09_bad
{    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(27,26,0)
(25,16,0)
(16,13,0)
(7,10,0)
(12,11,0)
(20,10,0)
(5,13,0)
(2,23,0)
(15,19,0)
(10,23,0)
(23,27,0)
(16,27,0)
(21,20,0)
(13,9,0)
(0,9,0)
(10,19,0)
(20,19,0)
(4,9,0)
(24,27,0)
(8,9,0)
(27,3,0)
(18,13,0)
(17,16,0)
(14,23,0)
(23,13,0)
(23,10,0)
(26,27,0)
(2,7,1)
(7,16,1)
(21,10,1)
(20,21,1)
(10,23,1)
(1,16,1)
(1,20,1)
(25,6,1)
(6,27,1)
(16,13,1)
(16,17,1)
(18,5,1)
(14,2,1)
(27,26,1)
(23,14,1)
(24,22,1)
(16,27,1)
(6,22,1)
(17,25,1)
(22,13,1)
(20,10,1)
(23,13,1)
(1,6,1)
(23,27,1)
(26,24,1)
(13,18,1)
(14,16,2)
(27,22,2)
(23,16,2)
(7,16,2)
(16,13,2)
(23,27,2)
(16,6,2)
(25,6,2)
(27,26,2)
(20,16,2)
(21,16,2)
(10,16,2)
(17,6,2)
(16,27,2)
(20,10,2)
(24,22,2)
(10,23,2)
(23,13,2)
(2,16,2)
(26,22,2)
-----------------------------------
(0,if(GLOBAL_CONST_TRUE)
(1,RET)
(2,data)
(3,)
(4,if(GLOBAL_CONST_TRUE)
(5,data)
(6,GLOBAL_CONST_TRUE)
(7,result)
(8,data)
(9,)
(10,result = data * 2)
(11,)
(12,if(data > 0)
(13,data = 0)
(14,2)
(15,result)
(16,data > 0)
(17,0)
(18,0)
(19,)
(20,printIntLine(result)
(21,result)
(22,GLOBAL_CONST_TRUE)
(23,data * 2)
(24,data)
(25,data)
(26,RAND32()
(27,data = RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^