-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_add_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        int result = data + 1;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,45,49,50,54,56,57,58,62,63,64
-----computeFrom-----
12,13
12,14
22,23
22,24
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_add_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_max_add_15_bad()
CWE190_Integer_Overflow__int_max_add_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(24,11,0)
(19,20,0)
(13,10,0)
(25,30,0)
(6,10,0)
(31,35,0)
(5,35,0)
(23,19,0)
(29,1,0)
(18,20,0)
(12,5,0)
(7,28,0)
(35,1,0)
(5,19,0)
(21,10,0)
(26,1,0)
(16,24,0)
(14,20,0)
(34,19,0)
(0,1,0)
(15,11,0)
(32,5,0)
(24,30,0)
(2,10,0)
(33,35,0)
(11,5,0)
(28,1,0)
(5,11,0)
(9,1,0)
(27,20,0)
(11,30,0)
(8,17,0)
(17,10,0)
(30,10,0)
(7,4,1)
(34,23,1)
(24,11,1)
(5,19,1)
(4,19,1)
(22,2,1)
(3,29,1)
(16,11,1)
(24,16,1)
(3,9,1)
(31,4,1)
(15,3,1)
(35,33,1)
(12,32,1)
(5,35,1)
(8,3,1)
(29,28,1)
(9,35,1)
(32,15,1)
(11,5,1)
(21,24,1)
(5,12,1)
(19,34,1)
(28,7,1)
(33,31,1)
(2,17,1)
(17,8,1)
(22,21,1)
(28,4,2)
(2,3,2)
(24,3,2)
(11,3,2)
(21,3,2)
(33,4,2)
(5,3,2)
(32,3,2)
(5,19,2)
(16,3,2)
(12,3,2)
(15,3,2)
(31,4,2)
(17,3,2)
(29,4,2)
(5,35,2)
(24,11,2)
(35,4,2)
(11,5,2)
(7,4,2)
(9,4,2)
(8,3,2)
-----------------------------------
(0,case 6:)
(1,)
(2,break;)
(3,7)
(4,6)
(5,data + 1)
(6,case 7:)
(7,"Benign, fixed string")
(8,"Benign, fixed string")
(9,break;)
(10,)
(11,result = data + 1)
(12,1)
(13,default:)
(14,switch(6)
(15,result)
(16,result)
(17,printLine("Benign, fixed string")
(18,switch(7)
(19,data = 0)
(20,)
(21,break;)
(22,RET)
(23,data)
(24,printIntLine(result)
(25,result)
(26,default:)
(27,data)
(28,printLine("Benign, fixed string")
(29,break;)
(30,)
(31,data)
(32,data)
(33,INT_MAX)
(34,0)
(35,data = INT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^