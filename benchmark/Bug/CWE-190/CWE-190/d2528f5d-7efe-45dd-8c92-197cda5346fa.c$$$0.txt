-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_17_bad()
{
    int i,j;
    unsigned int data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,65,67,71,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_17_bad(){    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_17_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_17_bad
{    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(37,6,0)
(11,31,0)
(27,33,0)
(41,14,0)
(10,39,0)
(18,10,0)
(0,6,0)
(23,33,0)
(4,14,0)
(13,25,0)
(25,10,0)
(1,35,0)
(34,6,0)
(20,15,0)
(32,6,0)
(21,29,0)
(25,29,0)
(22,33,0)
(10,18,0)
(16,31,0)
(17,16,0)
(26,31,0)
(3,18,0)
(15,35,0)
(14,33,0)
(36,6,0)
(38,10,0)
(19,31,0)
(7,29,0)
(25,35,0)
(15,24,0)
(2,18,0)
(5,24,0)
(29,6,0)
(30,23,0)
(35,24,0)
(28,11,0)
(12,16,0)
(35,25,0)
(18,3,0)
(18,2,0)
(24,40,0)
(8,25,0)
(3,38,1)
(14,33,1)
(18,2,1)
(25,29,1)
(14,41,1)
(18,3,1)
(30,10,1)
(9,16,1)
(27,29,1)
(26,14,1)
(16,31,1)
(22,27,1)
(38,14,1)
(23,30,1)
(12,31,1)
(13,8,1)
(15,20,1)
(31,19,1)
(29,21,1)
(25,13,1)
(35,25,1)
(4,33,1)
(23,33,1)
(15,35,1)
(12,11,1)
(16,17,1)
(33,22,1)
(21,7,1)
(41,4,1)
(1,16,1)
(4,23,1)
(19,26,1)
(10,18,1)
(20,35,1)
(28,15,1)
(11,31,1)
(8,1,1)
(11,28,1)
(17,12,1)
(25,10,1)
(11,31,2)
(10,14,2)
(25,16,2)
(3,14,2)
(15,16,2)
(12,16,2)
(1,16,2)
(18,3,2)
(23,33,2)
(13,16,2)
(11,16,2)
(15,35,2)
(35,16,2)
(16,16,2)
(38,14,2)
(23,14,2)
(4,14,2)
(18,14,2)
(14,14,2)
(8,16,2)
(18,2,2)
(10,18,2)
(30,14,2)
(14,33,2)
(20,16,2)
(16,31,2)
(25,10,2)
(25,29,2)
(17,16,2)
(35,25,2)
(41,14,2)
(28,16,2)
-----------------------------------
(0,for(i = 0; i < 1; i++)
(1,result)
(2,unsigned int)
(3,RAND32()
(4,i)
(5,result)
(6,)
(7,data)
(8,data)
(9,RET)
(10,data = (unsigned int)
(11,j++)
(12,j)
(13,data)
(14,i < 1)
(15,printUnsignedLine(result)
(16,j < 1)
(17,1)
(18,(unsigned int)
(19,0)
(20,result)
(21,0)
(22,0)
(23,i++)
(24,)
(25,data * data)
(26,j)
(27,i)
(28,j)
(29,data = 0)
(30,i)
(31,j = 0)
(32,data)
(33,i = 0)
(34,j)
(35,result = data * data)
(36,i)
(37,for(j = 0; j < 1; j++)
(38,data)
(39,)
(40,)
(41,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^