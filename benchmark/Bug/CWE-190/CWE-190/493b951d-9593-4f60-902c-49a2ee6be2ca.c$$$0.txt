-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,41,44,46,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_03_bad()
CWE190_Integer_Overflow__char_rand_postinc_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,13,0)
(22,23,0)
(13,4,0)
(21,26,0)
(9,7,0)
(14,8,0)
(19,17,0)
(7,14,0)
(0,16,0)
(14,16,0)
(4,13,0)
(13,1,0)
(29,8,0)
(27,20,0)
(24,16,0)
(14,21,0)
(2,14,0)
(11,17,0)
(16,17,0)
(6,14,0)
(30,21,0)
(8,28,0)
(10,23,0)
(7,8,0)
(18,17,0)
(29,16,0)
(3,8,0)
(1,13,0)
(5,29,0)
(29,21,0)
(13,21,0)
(12,20,0)
(23,22,1)
(13,4,1)
(13,1,1)
(16,0,1)
(30,20,1)
(14,2,1)
(29,5,1)
(29,21,1)
(7,9,1)
(27,12,1)
(7,14,1)
(10,20,1)
(9,14,1)
(2,6,1)
(14,16,1)
(10,21,1)
(4,30,1)
(15,23,1)
(22,10,1)
(6,29,1)
(29,16,1)
(12,16,1)
(0,24,1)
(5,23,1)
(14,21,1)
(20,27,1)
(15,7,1)
(21,13,1)
(5,23,2)
(14,16,2)
(14,23,2)
(29,23,2)
(4,20,2)
(6,23,2)
(30,20,2)
(13,4,2)
(2,23,2)
(13,1,2)
(21,13,2)
(7,23,2)
(29,16,2)
(9,23,2)
(7,14,2)
(14,21,2)
(29,21,2)
(21,20,2)
(13,20,2)
-----------------------------------
(0,' ')
(1,char)
(2,data)
(3,result)
(4,RAND32()
(5,data)
(6,result)
(7,printHexCharLine(result)
(8,)
(9,result)
(10,5)
(11,if(5==5)
(12,5)
(13,(char)
(14,result = data)
(15,RET)
(16,data = \' \')
(17,)
(18,data)
(19,if(5==5)
(20,5==5)
(21,data = (char)
(22,5)
(23,5==5)
(24,data)
(25,data = ' ')
(26,)
(27,5)
(28,)
(29,data++)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^