-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_02_bad()
{
    int64_t data;
    data = 0LL;
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
26,27
29,30
30,31
32,33
32,34
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,9,11,15,16,18,23,27,28,31,33,38,39,44,46,50,51,55,57
-----computeFrom-----
13,14
13,15
21,22
21,23
36,37
36,38
48,49
48,50
-----guardedBy-----
38,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_02_bad(){    int64_t data;    data = 0LL;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_02_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_02_bad
{    int64_t data;    data = 0LL;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(10,26,0)
(10,7,0)
(0,14,0)
(18,9,0)
(5,9,0)
(19,7,0)
(1,18,0)
(20,10,0)
(1,10,0)
(18,1,0)
(13,10,0)
(15,16,0)
(22,20,0)
(17,7,0)
(7,19,0)
(11,27,0)
(12,18,0)
(6,14,0)
(3,14,0)
(4,14,0)
(16,18,0)
(7,10,0)
(24,1,0)
(16,9,0)
(21,20,0)
(2,1,0)
(7,17,0)
(25,10,1)
(16,15,1)
(22,21,1)
(2,12,1)
(7,19,1)
(18,1,1)
(10,7,1)
(23,16,1)
(25,8,1)
(1,24,1)
(8,3,1)
(12,20,1)
(16,18,1)
(19,13,1)
(21,25,1)
(15,18,1)
(7,17,1)
(24,2,1)
(1,10,1)
(23,20,1)
(23,25,1)
(20,10,1)
(13,8,1)
(20,22,1)
(22,25,2)
(1,20,2)
(24,20,2)
(20,10,2)
(21,25,2)
(10,8,2)
(18,1,2)
(16,20,2)
(7,19,2)
(1,10,2)
(7,17,2)
(7,8,2)
(10,7,2)
(19,8,2)
(2,20,2)
(15,20,2)
(20,25,2)
(16,18,2)
(12,20,2)
(18,20,2)
(13,8,2)
-----------------------------------
(0,data)
(1,data * 2)
(2,data)
(3,L)
(4,if(1)
(5,result)
(6,if(1)
(7,(int64_t)
(8,1)
(9,)
(10,data = (int64_t)
(11,if(data > 0)
(12,result)
(13,data)
(14,)
(15,result)
(16,printLongLongLine(result)
(17,int64_t)
(18,result = data * 2)
(19,RAND64()
(20,data > 0)
(21,data)
(22,0)
(23,RET)
(24,2)
(25,1)
(26,)
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^