-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_11_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_11_bad(){    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_11_bad()
CWE190_Integer_Overflow__short_fscanf_square_11_bad
{    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,21,0)
(8,0,0)
(6,1,0)
(23,0,0)
(2,22,0)
(10,8,0)
(21,22,0)
(3,22,0)
(1,9,0)
(12,21,0)
(7,22,0)
(24,21,0)
(4,24,0)
(18,0,0)
(17,20,0)
(16,17,0)
(0,8,0)
(23,1,0)
(11,23,0)
(15,21,0)
(17,24,0)
(25,17,0)
(24,17,0)
(14,8,0)
(0,1,0)
(16,5,1)
(14,10,1)
(19,13,1)
(0,8,1)
(4,25,1)
(13,17,1)
(17,24,1)
(5,21,1)
(15,12,1)
(23,0,1)
(25,16,1)
(24,4,1)
(23,11,1)
(13,5,1)
(21,15,1)
(10,18,1)
(24,21,1)
(11,0,1)
(19,23,1)
(8,21,1)
(8,14,1)
(18,13,1)
(23,13,2)
(14,13,2)
(11,13,2)
(4,5,2)
(8,21,2)
(23,0,2)
(17,24,2)
(17,5,2)
(0,13,2)
(16,5,2)
(24,5,2)
(8,13,2)
(25,5,2)
(18,13,2)
(24,21,2)
(10,13,2)
(0,8,2)
-----------------------------------
(0,result = data * data)
(1,)
(2,if(globalReturnsTrue()
(3,data)
(4,data)
(5,globalReturnsTrue()
(6,result)
(7,if(globalReturnsTrue()
(8,data * data)
(9,)
(10,data)
(11,result)
(12,data)
(13,globalReturnsTrue()
(14,data)
(15,0)
(16,stdin)
(17,fscanf (stdin, "%hd", &data)
(18,result)
(19,RET)
(20,)
(21,data = 0)
(22,)
(23,printIntLine(result)
(24,&data)
(25,"%hd")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^