-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_rand_square_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,57,61,63,67,69
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_34_bad(){    char data;    CWE190_Integer_Overflow__char_rand_square_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_34_bad()
CWE190_Integer_Overflow__char_rand_square_34_bad
{    char data;    CWE190_Integer_Overflow__char_rand_square_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__char_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__char_rand_square_34_unionType
CWE190_Integer_Overflow__char_rand_square_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,31,0)
(5,0,0)
(24,21,0)
(25,3,0)
(18,5,0)
(2,31,0)
(1,3,0)
(24,14,0)
(32,15,0)
(21,24,0)
(9,25,0)
(19,1,0)
(15,11,0)
(14,24,0)
(13,21,0)
(30,25,0)
(23,3,0)
(25,27,0)
(3,31,0)
(22,30,0)
(4,11,0)
(10,31,0)
(30,11,0)
(11,30,0)
(6,10,0)
(0,21,0)
(26,5,0)
(11,1,0)
(7,27,0)
(0,31,0)
(15,1,0)
(17,24,0)
(16,0,0)
(29,30,0)
(28,27,0)
(24,17,0)
(27,25,0)
(21,31,0)
(12,10,0)
(22,4,1)
(15,32,1)
(26,21,1)
(25,27,1)
(11,30,1)
(4,25,1)
(30,25,1)
(14,13,1)
(21,24,1)
(24,17,1)
(12,6,1)
(28,9,1)
(0,21,1)
(24,14,1)
(0,16,1)
(5,18,1)
(30,29,1)
(9,0,1)
(27,7,1)
(29,22,1)
(10,12,1)
(7,28,1)
(32,11,1)
(18,26,1)
(8,15,1)
(16,5,1)
(13,10,1)
(15,11,1)
(15,11,2)
(24,14,2)
(11,30,2)
(21,24,2)
(24,17,2)
(25,27,2)
(0,21,2)
(30,25,2)
-----------------------------------
(0,myUnion.unionFirst = data)
(1,)
(2,myUnion)
(3,)
(4,result)
(5,myUnion.unionFirst)
(6,data)
(7,unionSecond)
(8,RET)
(9,data)
(10,data = ' ')
(11,result = data * data)
(12,' ')
(13,data)
(14,RAND32()
(15,printHexCharLine(result)
(16,data)
(17,char)
(18,unionFirst)
(19,result)
(20,data)
(21,data = (char)
(22,data)
(23,data)
(24,(char)
(25,data = myUnion.unionSecond)
(26,myUnion)
(27,myUnion.unionSecond)
(28,myUnion)
(29,data)
(30,data * data)
(31,)
(32,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^