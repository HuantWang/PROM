-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_63b_badSink(char * dataPtr)
{
    char data = *dataPtr;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
27,28
27,29
29,30
29,31
31,32
32,33
32,34
33,34
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,6,8,9,13,15,19,23,24,28,30,34,35,39,41
-----computeFrom-----
21,22
21,23
32,33
32,34
-----guardedBy-----
23,34
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_63b_badSink(char * dataPtr){    char data = *dataPtr;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_multiply_63b_badSink(char * dataPtr)
CWE190_Integer_Overflow__char_rand_multiply_63b_badSink
char * dataPtr
char
* dataPtr
*
dataPtr
{    char data = *dataPtr;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data = *dataPtr;
char data = *dataPtr;
char
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,20,0)
(6,1,0)
(7,14,0)
(4,10,0)
(14,7,0)
(7,10,0)
(16,5,0)
(5,7,0)
(5,20,0)
(11,5,0)
(19,13,0)
(12,14,0)
(13,20,0)
(20,1,0)
(13,1,0)
(15,10,0)
(20,5,0)
(17,7,0)
(9,7,0)
(14,2,0)
(3,9,0)
(8,9,0)
(16,11,1)
(9,8,1)
(20,5,1)
(12,17,1)
(14,2,1)
(13,19,1)
(14,12,1)
(7,14,1)
(19,20,1)
(13,20,1)
(9,7,1)
(8,3,1)
(0,9,1)
(3,7,1)
(18,9,1)
(0,13,1)
(5,16,1)
(5,7,1)
(11,18,1)
(13,20,2)
(11,9,2)
(5,7,2)
(9,7,2)
(14,2,2)
(13,9,2)
(16,9,2)
(5,9,2)
(20,5,2)
(20,9,2)
(7,14,2)
(18,9,2)
(19,9,2)
-----------------------------------
(0,RET)
(1,)
(2,char * dataPtr)
(3,data)
(4,if(data > 0)
(5,data * 2)
(6,result)
(7,data = *dataPtr)
(8,0)
(9,data > 0)
(10,)
(11,data)
(12,dataPtr)
(13,printHexCharLine(result)
(14,*dataPtr)
(15,data)
(16,2)
(17,data)
(18,result)
(19,result)
(20,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^