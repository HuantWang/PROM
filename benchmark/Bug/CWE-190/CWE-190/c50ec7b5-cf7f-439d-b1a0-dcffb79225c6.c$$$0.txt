-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
22,23
22,24
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_08_bad()
CWE190_Integer_Overflow__char_rand_square_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,3,0)
(14,24,0)
(3,9,0)
(22,15,0)
(8,4,0)
(13,12,0)
(12,15,0)
(7,4,0)
(7,2,0)
(20,24,0)
(3,16,0)
(0,12,0)
(1,20,0)
(2,26,0)
(4,2,0)
(5,2,0)
(23,7,0)
(9,3,0)
(16,3,0)
(20,4,0)
(17,20,0)
(20,12,0)
(10,15,0)
(24,21,0)
(18,15,0)
(4,20,0)
(3,24,0)
(7,23,1)
(3,9,1)
(20,1,1)
(23,4,1)
(20,24,1)
(20,12,1)
(8,25,1)
(1,17,1)
(3,16,1)
(14,6,1)
(12,0,1)
(0,13,1)
(7,4,1)
(4,20,1)
(16,14,1)
(11,25,1)
(6,12,1)
(17,8,1)
(24,3,1)
(25,6,1)
(11,7,1)
(25,24,1)
(14,6,2)
(3,6,2)
(24,6,2)
(3,9,2)
(24,3,2)
(8,25,2)
(4,25,2)
(16,6,2)
(20,24,2)
(20,12,2)
(23,25,2)
(1,25,2)
(3,16,2)
(7,4,2)
(7,25,2)
(4,20,2)
(20,25,2)
(17,25,2)
-----------------------------------
(0,' ')
(1,data)
(2,)
(3,(char)
(4,result = data * data)
(5,result)
(6,staticReturnsTrue()
(7,printHexCharLine(result)
(8,result)
(9,char)
(10,if(staticReturnsTrue()
(11,RET)
(12,data = ' ')
(13,data)
(14,data)
(15,)
(16,RAND32()
(17,data)
(18,if(staticReturnsTrue()
(19,data = \' \')
(20,data * data)
(21,)
(22,data)
(23,result)
(24,data = (char)
(25,staticReturnsTrue()
(26,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^