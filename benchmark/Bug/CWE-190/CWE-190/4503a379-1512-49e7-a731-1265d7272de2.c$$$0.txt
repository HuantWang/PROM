-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_preinc_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
57,60
58,59
59,60
60,61
62,63
63,64
63,65
65,66
65,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,61,64,66,69,73,75
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_preinc_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_preinc_17_bad()
CWE190_Integer_Overflow__int_max_preinc_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,13,0)
(7,1,0)
(35,13,0)
(2,35,0)
(34,12,0)
(22,16,0)
(18,33,0)
(36,39,0)
(16,34,0)
(6,23,0)
(15,34,0)
(6,14,0)
(23,9,0)
(25,39,0)
(29,32,0)
(8,23,0)
(20,12,0)
(27,13,0)
(38,13,0)
(37,6,0)
(14,21,0)
(34,23,0)
(3,0,0)
(30,34,0)
(28,12,0)
(19,33,0)
(16,23,0)
(32,39,0)
(31,33,0)
(10,33,0)
(12,33,0)
(5,1,0)
(11,35,0)
(1,39,0)
(34,14,0)
(6,12,0)
(24,14,0)
(17,14,0)
(4,33,0)
(35,13,1)
(32,29,1)
(17,1,1)
(3,16,1)
(29,14,1)
(2,13,1)
(16,22,1)
(22,34,1)
(6,37,1)
(20,28,1)
(16,34,1)
(25,36,1)
(27,1,1)
(34,12,1)
(24,17,1)
(6,14,1)
(12,20,1)
(38,27,1)
(36,12,1)
(30,6,1)
(0,3,1)
(15,30,1)
(2,0,1)
(5,7,1)
(34,15,1)
(6,12,1)
(13,38,1)
(37,35,1)
(1,39,1)
(26,35,1)
(1,5,1)
(39,25,1)
(7,32,1)
(7,39,1)
(14,24,1)
(34,14,1)
(11,2,1)
(0,13,1)
(35,11,1)
(32,39,1)
(7,1,2)
(15,35,2)
(14,1,2)
(35,13,2)
(0,13,2)
(1,39,2)
(1,1,2)
(6,14,2)
(30,35,2)
(35,35,2)
(34,35,2)
(5,1,2)
(22,35,2)
(11,35,2)
(34,12,2)
(32,1,2)
(34,14,2)
(16,34,2)
(0,35,2)
(3,35,2)
(29,1,2)
(2,35,2)
(24,1,2)
(16,35,2)
(17,1,2)
(6,12,2)
(32,39,2)
(37,35,2)
(6,35,2)
-----------------------------------
(0,j++)
(1,i < 1)
(2,j)
(3,j)
(4,for(j = 0; j < 1; j++)
(5,1)
(6,++data)
(7,i)
(8,result)
(9,)
(10,i)
(11,1)
(12,data = 0)
(13,j = 0)
(14,data = INT_MAX)
(15,data)
(16,printIntLine(result)
(17,data)
(18,j)
(19,for(i = 0; i < 1; i++)
(20,0)
(21,)
(22,result)
(23,)
(24,INT_MAX)
(25,0)
(26,RET)
(27,j)
(28,data)
(29,i)
(30,result)
(31,data)
(32,i++)
(33,)
(34,result = data)
(35,j < 1)
(36,i)
(37,data)
(38,0)
(39,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^