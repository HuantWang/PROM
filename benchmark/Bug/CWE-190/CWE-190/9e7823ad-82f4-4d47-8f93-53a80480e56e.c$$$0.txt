-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_add_07_bad()
CWE190_Integer_Overflow__char_fscanf_add_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(staticFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,21,0)
(0,29,0)
(28,19,0)
(0,25,0)
(1,14,0)
(29,0,0)
(16,1,0)
(25,26,0)
(29,15,0)
(7,12,0)
(20,29,0)
(3,15,0)
(9,12,0)
(11,12,0)
(23,25,0)
(1,5,0)
(15,12,0)
(13,19,0)
(18,0,0)
(14,1,0)
(27,18,0)
(6,21,0)
(18,25,0)
(24,1,0)
(17,0,0)
(2,15,0)
(22,29,0)
(4,14,0)
(14,15,0)
(1,14,1)
(18,0,1)
(22,20,1)
(29,15,1)
(17,19,1)
(14,4,1)
(13,21,1)
(14,15,1)
(6,15,1)
(16,24,1)
(3,2,1)
(13,1,1)
(29,22,1)
(20,17,1)
(10,18,1)
(19,28,1)
(15,3,1)
(0,29,1)
(27,0,1)
(28,13,1)
(4,16,1)
(24,21,1)
(21,8,1)
(18,27,1)
(8,6,1)
(10,19,1)
(0,29,2)
(4,21,2)
(17,19,2)
(29,19,2)
(16,21,2)
(1,14,2)
(24,21,2)
(27,19,2)
(0,19,2)
(22,19,2)
(29,15,2)
(20,19,2)
(14,21,2)
(18,19,2)
(18,0,2)
(14,15,2)
(1,21,2)
-----------------------------------
(0,result = data + 1)
(1,fscanf (stdin, "%c", &data)
(2,data)
(3,\\\' \\\')
(4,data)
(5,)
(6,staticFive)
(7,if(staticFive==5)
(8,5)
(9,if(staticFive==5)
(10,RET)
(11,data)
(12,)
(13,staticFive)
(14,&data)
(15,data = \\\' \\\')
(16,"%c")
(17,result)
(18,printHexCharLine(result)
(19,staticFive==5)
(20,data)
(21,staticFive==5)
(22,1)
(23,result)
(24,stdin)
(25,)
(26,)
(27,result)
(28,5)
(29,data + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^