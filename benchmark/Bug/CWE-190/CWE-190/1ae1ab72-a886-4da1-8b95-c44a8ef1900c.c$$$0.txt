-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_postinc_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
73,76
74,75
75,76
76,77
78,79
79,80
79,81
81,82
81,83
83,84
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,77,80,82,85,89,91
-----computeFrom-----
32,33
32,34
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_postinc_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_postinc_32_bad()
CWE190_Integer_Overflow__short_fscanf_postinc_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,42,0)
(28,22,0)
(0,24,0)
(11,16,0)
(16,22,0)
(7,43,0)
(36,16,0)
(12,39,0)
(27,39,0)
(39,4,0)
(45,13,0)
(37,8,0)
(39,27,0)
(44,30,0)
(6,4,0)
(15,27,0)
(9,32,0)
(16,13,0)
(6,16,0)
(32,41,0)
(17,6,0)
(3,34,0)
(23,24,0)
(38,21,0)
(29,22,0)
(31,4,0)
(25,22,0)
(43,34,0)
(4,42,0)
(34,43,0)
(1,32,0)
(5,42,0)
(34,41,0)
(43,0,0)
(33,0,0)
(21,4,0)
(27,42,0)
(40,32,0)
(36,21,0)
(13,16,0)
(0,22,0)
(40,8,0)
(10,1,0)
(35,30,0)
(24,0,0)
(2,40,0)
(8,32,0)
(42,22,0)
(8,34,0)
(1,34,0)
(19,41,0)
(26,36,0)
(30,22,0)
(14,8,0)
(20,27,0)
(4,6,0)
(41,22,0)
(13,45,1)
(35,44,1)
(37,14,1)
(21,4,1)
(40,8,1)
(0,24,1)
(6,16,1)
(20,4,1)
(39,4,1)
(8,34,1)
(2,8,1)
(27,39,1)
(34,43,1)
(1,34,1)
(36,26,1)
(7,3,1)
(21,38,1)
(23,33,1)
(18,40,1)
(10,34,1)
(8,37,1)
(17,31,1)
(39,12,1)
(14,1,1)
(36,16,1)
(33,16,1)
(12,15,1)
(15,20,1)
(16,13,1)
(44,0,1)
(24,23,1)
(45,11,1)
(38,36,1)
(26,27,1)
(4,6,1)
(43,7,1)
(1,10,1)
(3,21,1)
(30,35,1)
(43,0,1)
(40,2,1)
(31,30,1)
(6,17,1)
(36,16,2)
(34,43,2)
(40,8,2)
(1,34,2)
(4,6,2)
(16,13,2)
(27,39,2)
(21,4,2)
(43,0,2)
(8,34,2)
(0,24,2)
(6,16,2)
(39,4,2)
-----------------------------------
(0,*dataPtr2 = &data)
(1,data++)
(2,result)
(3,data)
(4,data = *dataPtr1)
(5,data)
(6,*dataPtr1)
(7,dataPtr2)
(8,result = data)
(9,result)
(10,data)
(11,dataPtr1)
(12,data)
(13,&data)
(14,result)
(15,"%hd")
(16,*dataPtr1 = &data)
(17,dataPtr1)
(18,RET)
(19,data)
(20,stdin)
(21,*dataPtr1 = data)
(22,)
(23,data)
(24,&data)
(25,dataPtr1)
(26,dataPtr1)
(27,fscanf (stdin, "%hd", &data)
(28,dataPtr2)
(29,data)
(30,data = 0)
(31,data)
(32,)
(33,dataPtr2)
(34,data = *dataPtr2)
(35,0)
(36,*dataPtr1)
(37,data)
(38,data)
(39,&data)
(40,printIntLine(result)
(41,)
(42,)
(43,*dataPtr2)
(44,data)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^