-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,61,65,67,71,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
58,59
58,60
69,70
69,71
-----guardedBy-----
60,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_17_bad()
CWE190_Integer_Overflow__char_max_multiply_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(42,23,0)
(2,19,0)
(18,15,0)
(26,9,0)
(28,17,0)
(20,0,0)
(36,40,0)
(14,33,0)
(7,23,0)
(37,11,0)
(19,23,0)
(24,36,0)
(25,41,0)
(4,40,0)
(34,3,0)
(16,36,0)
(23,19,0)
(15,17,0)
(10,3,0)
(39,15,0)
(44,17,0)
(38,43,0)
(3,11,0)
(23,3,0)
(21,11,0)
(35,11,0)
(13,19,0)
(6,9,0)
(12,11,0)
(13,41,0)
(29,11,0)
(30,40,0)
(17,1,0)
(43,9,0)
(33,40,0)
(27,0,0)
(32,8,0)
(0,9,0)
(31,13,0)
(19,41,0)
(15,3,0)
(23,17,0)
(15,17,1)
(10,34,1)
(6,26,1)
(0,9,1)
(40,30,1)
(42,7,1)
(31,19,1)
(43,9,1)
(33,14,1)
(16,33,1)
(13,19,1)
(3,10,1)
(0,20,1)
(36,24,1)
(14,17,1)
(24,16,1)
(5,0,1)
(19,23,1)
(23,3,1)
(4,3,1)
(39,18,1)
(33,40,1)
(13,31,1)
(26,36,1)
(38,15,1)
(17,44,1)
(23,42,1)
(15,39,1)
(16,40,1)
(44,28,1)
(2,15,1)
(28,36,1)
(38,13,1)
(30,4,1)
(23,17,1)
(27,43,1)
(9,6,1)
(18,0,1)
(43,38,1)
(7,2,1)
(15,3,1)
(36,40,1)
(20,27,1)
(27,9,1)
(43,9,2)
(43,0,2)
(23,15,2)
(0,9,2)
(15,17,2)
(42,15,2)
(15,0,2)
(15,3,2)
(19,15,2)
(33,36,2)
(36,36,2)
(13,15,2)
(0,0,2)
(19,23,2)
(23,3,2)
(31,15,2)
(20,0,2)
(13,19,2)
(39,0,2)
(17,36,2)
(28,36,2)
(2,15,2)
(18,0,2)
(36,40,2)
(24,36,2)
(7,15,2)
(33,40,2)
(38,0,2)
(27,0,2)
(23,17,2)
(16,36,2)
(44,36,2)
(14,36,2)
-----------------------------------
(0,j < 1)
(1,)
(2,result)
(3,data = ' ')
(4,i)
(5,RET)
(6,0)
(7,data)
(8,)
(9,j = 0)
(10,' ')
(11,)
(12,for(j = 0; j < 1; j++)
(13,printHexCharLine(result)
(14,i)
(15,data > 0)
(16,i)
(17,data = CHAR_MAX)
(18,data)
(19,result = data * 2)
(20,1)
(21,i)
(22,data = \' \')
(23,data * 2)
(24,1)
(25,result)
(26,j)
(27,j)
(28,data)
(29,j)
(30,0)
(31,result)
(32,if(data > 0)
(33,i++)
(34,data)
(35,for(i = 0; i < 1; i++)
(36,i < 1)
(37,data)
(38,j)
(39,0)
(40,i = 0)
(41,)
(42,2)
(43,j++)
(44,CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^