-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            ++data;
            char result = data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_12_bad()
CWE190_Integer_Overflow__char_max_preinc_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(4,2,0)
(31,2,0)
(32,38,0)
(14,38,0)
(33,38,0)
(33,23,0)
(38,8,0)
(31,38,0)
(36,0,0)
(19,31,0)
(25,40,0)
(29,38,0)
(26,23,0)
(28,5,0)
(6,33,0)
(16,0,0)
(40,38,0)
(9,33,0)
(18,2,0)
(12,23,0)
(33,17,0)
(10,17,0)
(5,0,0)
(35,0,0)
(23,42,0)
(1,41,0)
(18,31,0)
(40,2,0)
(32,23,0)
(43,17,0)
(34,12,0)
(20,5,0)
(7,32,0)
(37,23,0)
(40,23,0)
(3,30,0)
(31,23,0)
(21,18,0)
(15,32,0)
(43,33,0)
(11,1,0)
(12,17,0)
(39,43,0)
(17,44,0)
(22,31,0)
(12,38,0)
(23,26,1)
(43,39,1)
(24,5,1)
(34,27,1)
(39,33,1)
(26,37,1)
(13,18,1)
(27,23,1)
(37,24,1)
(31,19,1)
(14,29,1)
(33,6,1)
(32,15,1)
(18,31,1)
(13,1,1)
(19,22,1)
(12,34,1)
(38,14,1)
(22,40,1)
(29,24,1)
(32,23,1)
(40,25,1)
(40,38,1)
(33,38,1)
(6,9,1)
(32,38,1)
(13,43,1)
(9,12,1)
(12,23,1)
(18,21,1)
(1,11,1)
(31,23,1)
(21,31,1)
(27,38,1)
(31,38,1)
(28,20,1)
(5,28,1)
(12,38,1)
(40,23,1)
(7,27,1)
(25,32,1)
(43,33,1)
(33,23,1)
(15,7,1)
(11,32,1)
(33,27,2)
(22,32,2)
(9,27,2)
(39,27,2)
(33,38,2)
(32,38,2)
(12,38,2)
(32,27,2)
(29,24,2)
(26,24,2)
(12,23,2)
(1,32,2)
(40,32,2)
(38,24,2)
(23,24,2)
(6,27,2)
(32,23,2)
(19,32,2)
(25,32,2)
(43,33,2)
(33,23,2)
(43,27,2)
(37,24,2)
(21,32,2)
(40,38,2)
(18,32,2)
(31,38,2)
(12,27,2)
(18,31,2)
(34,27,2)
(40,23,2)
(11,32,2)
(14,24,2)
(31,23,2)
(15,27,2)
(7,27,2)
(31,32,2)
-----------------------------------
(0,)
(1,printLine("data value is too large to perform arithmetic safely.")
(2,)
(3,if (data < CHAR_MAX)
(4,result)
(5,data = \\\' \\\')
(6,data)
(7,data)
(8,)
(9,result)
(10,result)
(11,"data value is too large to perform arithmetic safely.")
(12,++data)
(13,RET)
(14,2)
(15,CHAR_MAX)
(16,if(globalReturnsTrueOrFalse()
(17,)
(18,printHexCharLine(result)
(19,data)
(20,data)
(21,result)
(22,result)
(23,data = CHAR_MAX)
(24,globalReturnsTrueOrFalse()
(25,data)
(26,CHAR_MAX)
(27,globalReturnsTrueOrFalse()
(28,\\\' \\\')
(29,data)
(30,)
(31,result = data)
(32,data < CHAR_MAX)
(33,result = data)
(34,data)
(35,data)
(36,if(globalReturnsTrueOrFalse()
(37,data)
(38,data = 2)
(39,result)
(40,++data)
(41,)
(42,)
(43,printHexCharLine(result)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^