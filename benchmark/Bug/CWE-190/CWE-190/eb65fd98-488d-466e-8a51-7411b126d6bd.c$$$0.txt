-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_10_bad()
{
    char data;
    data = ' ';
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_10_bad(){    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_10_bad()
CWE190_Integer_Overflow__char_fscanf_square_10_bad
{    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,22,0)
(21,7,0)
(24,10,0)
(8,6,0)
(15,8,0)
(11,12,0)
(12,24,0)
(8,5,0)
(6,8,0)
(19,8,0)
(3,7,0)
(2,24,0)
(1,7,0)
(21,12,0)
(0,10,0)
(14,24,0)
(9,1,0)
(17,10,0)
(18,12,0)
(6,24,0)
(23,21,0)
(4,10,0)
(16,6,0)
(12,21,0)
(1,21,0)
(1,9,1)
(8,6,1)
(21,12,1)
(14,2,1)
(11,23,1)
(15,20,1)
(1,21,1)
(16,19,1)
(9,21,1)
(25,20,1)
(6,24,1)
(25,8,1)
(6,16,1)
(13,1,1)
(18,11,1)
(12,18,1)
(19,15,1)
(20,24,1)
(24,14,1)
(23,25,1)
(12,24,1)
(13,25,1)
(12,24,2)
(16,20,2)
(21,25,2)
(11,25,2)
(6,20,2)
(6,24,2)
(1,25,2)
(21,12,2)
(23,25,2)
(9,25,2)
(8,6,2)
(15,20,2)
(18,25,2)
(1,21,2)
(12,25,2)
(19,20,2)
(8,20,2)
-----------------------------------
(0,if(globalTrue)
(1,printHexCharLine(result)
(2,data)
(3,result)
(4,data)
(5,)
(6,&data)
(7,)
(8,fscanf (stdin, "%c", &data)
(9,result)
(10,)
(11,data)
(12,data * data)
(13,RET)
(14,\\\' \\\')
(15,stdin)
(16,data)
(17,if(globalTrue)
(18,data)
(19,"%c")
(20,globalTrue)
(21,result = data * data)
(22,)
(23,result)
(24,data = \\\' \\\')
(25,globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^