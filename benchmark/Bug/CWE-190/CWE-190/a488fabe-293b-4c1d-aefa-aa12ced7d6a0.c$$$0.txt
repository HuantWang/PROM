-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,73,77,79,83,84,88,90
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
70,71
70,72
81,82
81,83
-----guardedBy-----
72,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        *dataPtr1 = data;    }    {        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_32_bad()
CWE190_Integer_Overflow__int_max_multiply_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        *dataPtr1 = data;    }    {        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(27,24,0)
(16,33,0)
(2,27,0)
(42,19,0)
(24,10,0)
(0,18,0)
(36,22,0)
(26,19,0)
(34,28,0)
(30,26,0)
(47,24,0)
(33,18,0)
(25,14,0)
(40,15,0)
(14,31,0)
(22,19,0)
(27,10,0)
(18,33,0)
(45,1,0)
(38,15,0)
(44,8,0)
(19,6,0)
(15,8,0)
(2,15,0)
(22,6,0)
(18,8,0)
(10,8,0)
(12,28,0)
(21,8,0)
(13,6,0)
(9,2,0)
(46,3,0)
(28,8,0)
(1,8,0)
(3,23,0)
(26,31,0)
(39,24,0)
(31,0,0)
(23,15,0)
(23,3,0)
(0,31,0)
(7,23,0)
(17,1,0)
(5,27,0)
(31,28,0)
(20,14,0)
(43,10,0)
(29,0,0)
(3,10,0)
(4,8,0)
(41,26,0)
(19,26,0)
(32,40,0)
(11,31,0)
(15,40,0)
(35,18,0)
(18,33,1)
(33,16,1)
(19,26,1)
(26,31,1)
(42,14,1)
(2,15,1)
(22,19,1)
(14,25,1)
(23,7,1)
(27,5,1)
(2,9,1)
(39,3,1)
(47,39,1)
(20,31,1)
(0,29,1)
(25,20,1)
(32,38,1)
(23,15,1)
(15,40,1)
(36,19,1)
(46,1,1)
(11,27,1)
(1,17,1)
(22,36,1)
(26,30,1)
(5,2,1)
(29,11,1)
(24,47,1)
(27,24,1)
(37,14,1)
(9,24,1)
(14,31,1)
(0,18,1)
(30,41,1)
(40,32,1)
(41,42,1)
(17,45,1)
(45,18,1)
(7,46,1)
(37,22,1)
(16,35,1)
(3,23,1)
(35,15,1)
(31,0,1)
(18,33,2)
(27,24,2)
(31,0,2)
(0,18,2)
(19,14,2)
(41,14,2)
(36,14,2)
(42,14,2)
(23,15,2)
(14,31,2)
(22,14,2)
(30,14,2)
(19,26,2)
(26,31,2)
(2,15,2)
(22,19,2)
(3,23,2)
(26,14,2)
(15,40,2)
-----------------------------------
(0,*dataPtr2)
(1,data = 0)
(2,*dataPtr1)
(3,data = *dataPtr1)
(4,data)
(5,data)
(6,)
(7,dataPtr1)
(8,)
(9,dataPtr1)
(10,)
(11,data)
(12,if(data > 0)
(13,result)
(14,data > 0)
(15,*dataPtr1 = &data)
(16,data)
(17,0)
(18,*dataPtr2 = &data)
(19,result = data * 2)
(20,data)
(21,dataPtr2)
(22,printIntLine(result)
(23,*dataPtr1)
(24,data = INT_MAX)
(25,0)
(26,data * 2)
(27,*dataPtr1 = data)
(28,)
(29,dataPtr2)
(30,2)
(31,data = *dataPtr2)
(32,data)
(33,&data)
(34,data)
(35,dataPtr2)
(36,result)
(37,RET)
(38,dataPtr1)
(39,data)
(40,&data)
(41,data)
(42,result)
(43,data)
(44,dataPtr1)
(45,data)
(46,data)
(47,INT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^