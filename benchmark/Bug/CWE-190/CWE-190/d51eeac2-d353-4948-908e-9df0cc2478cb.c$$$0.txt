-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_08_bad()
{
    unsigned int data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
22,23
22,24
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_08_bad(){    unsigned int data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_08_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_08_bad
{    unsigned int data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(17,14,0)
(12,17,0)
(9,5,0)
(7,3,0)
(21,17,0)
(19,3,0)
(19,0,0)
(2,19,0)
(10,0,0)
(20,5,0)
(24,26,0)
(13,10,0)
(1,14,0)
(17,3,0)
(22,19,0)
(25,14,0)
(0,19,0)
(4,5,0)
(23,8,0)
(14,16,0)
(0,26,0)
(15,0,0)
(19,14,0)
(10,26,0)
(18,3,0)
(3,5,0)
(10,13,1)
(27,17,1)
(17,14,1)
(15,17,1)
(22,2,1)
(11,3,1)
(17,3,1)
(19,3,1)
(21,12,1)
(12,6,1)
(0,19,1)
(2,15,1)
(6,11,1)
(19,14,1)
(7,18,1)
(17,21,1)
(14,25,1)
(19,22,1)
(27,6,1)
(27,10,1)
(6,14,1)
(3,7,1)
(13,0,1)
(25,1,1)
(1,11,1)
(10,0,1)
(10,0,2)
(10,17,2)
(14,11,2)
(13,17,2)
(1,11,2)
(17,3,2)
(17,6,2)
(19,17,2)
(19,3,2)
(25,11,2)
(21,6,2)
(12,6,2)
(2,17,2)
(19,14,2)
(22,17,2)
(0,19,2)
(0,17,2)
(17,14,2)
(15,17,2)
-----------------------------------
(0,result = data * 2)
(1,data)
(2,data)
(3,data = 0)
(4,if(staticReturnsTrue()
(5,)
(6,staticReturnsTrue()
(7,0)
(8,)
(9,if(staticReturnsTrue()
(10,printUnsignedLine(result)
(11,staticReturnsTrue()
(12,data)
(13,result)
(14,data = UINT_MAX)
(15,result)
(16,)
(17,data > 0)
(18,data)
(19,data * 2)
(20,data)
(21,0)
(22,2)
(23,if(data > 0)
(24,result)
(25,UINT_MAX)
(26,)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^