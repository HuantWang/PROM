-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_10_bad()
{
    int64_t data;
    data = 0LL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,9,11,15,16,19,24,26,29,34,35,40,42,46,47,51,53
-----computeFrom-----
13,14
13,15
22,23
22,24
32,33
32,34
44,45
44,46
-----guardedBy-----
34,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_10_bad(){    int64_t data;    data = 0LL;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_10_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_10_bad
{    int64_t data;    data = 0LL;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(0,23,0)
(13,22,0)
(17,0,0)
(15,11,0)
(8,0,0)
(4,1,0)
(5,14,0)
(12,25,0)
(14,17,0)
(2,0,0)
(9,17,0)
(3,5,0)
(10,25,0)
(17,14,0)
(11,0,0)
(14,22,0)
(5,22,0)
(19,11,0)
(21,25,0)
(6,14,0)
(18,25,0)
(20,17,0)
(5,3,1)
(5,14,1)
(15,19,1)
(9,20,1)
(17,9,1)
(11,0,1)
(20,6,1)
(16,11,1)
(7,10,1)
(2,7,1)
(16,24,1)
(24,7,1)
(17,0,1)
(8,2,1)
(24,0,1)
(3,14,1)
(11,15,1)
(0,8,1)
(16,5,1)
(19,24,1)
(6,11,1)
(14,17,1)
(5,14,2)
(15,24,2)
(20,11,2)
(2,7,2)
(14,11,2)
(8,7,2)
(6,11,2)
(19,24,2)
(5,11,2)
(11,24,2)
(3,11,2)
(17,11,2)
(11,0,2)
(9,11,2)
(14,17,2)
(17,0,2)
(0,7,2)
-----------------------------------
(0,data = LLONG_MAX)
(1,)
(2,data)
(3,result)
(4,if(data > 0)
(5,printLongLongLine(result)
(6,result)
(7,globalTrue)
(8,LLONG_MAX)
(9,2)
(10,L)
(11,data > 0)
(12,data)
(13,result)
(14,result = data * 2)
(15,0)
(16,RET)
(17,data * 2)
(18,if(globalTrue)
(19,data)
(20,data)
(21,if(globalTrue)
(22,)
(23,)
(24,globalTrue)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^