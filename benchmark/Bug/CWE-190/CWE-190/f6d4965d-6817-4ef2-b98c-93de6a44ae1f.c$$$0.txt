-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_04_bad()
CWE190_Integer_Overflow__char_max_multiply_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(17,5,0)
(10,1,0)
(3,14,0)
(4,24,0)
(9,4,0)
(3,4,0)
(5,13,0)
(2,25,0)
(24,5,0)
(16,25,0)
(12,28,0)
(21,5,0)
(18,1,0)
(7,14,0)
(23,25,0)
(21,1,0)
(6,24,0)
(24,1,0)
(8,3,0)
(1,25,0)
(26,24,0)
(22,5,0)
(20,21,0)
(4,14,0)
(0,21,0)
(24,4,0)
(15,11,1)
(11,1,1)
(5,17,1)
(8,4,1)
(3,4,1)
(4,24,1)
(21,1,1)
(18,10,1)
(21,5,1)
(21,0,1)
(3,8,1)
(15,5,1)
(24,1,1)
(19,21,1)
(26,9,1)
(24,6,1)
(19,15,1)
(22,11,1)
(0,20,1)
(1,18,1)
(9,21,1)
(20,15,1)
(19,3,1)
(17,22,1)
(24,5,1)
(6,26,1)
(0,15,2)
(3,4,2)
(21,5,2)
(26,21,2)
(17,11,2)
(20,15,2)
(24,1,2)
(21,15,2)
(24,5,2)
(8,21,2)
(9,21,2)
(4,24,2)
(4,21,2)
(6,21,2)
(21,1,2)
(3,21,2)
(22,11,2)
(5,11,2)
(24,21,2)
-----------------------------------
(0,0)
(1,data = \' \')
(2,if(STATIC_CONST_TRUE)
(3,printHexCharLine(result)
(4,result = data * 2)
(5,data = CHAR_MAX)
(6,2)
(7,result)
(8,result)
(9,result)
(10,data)
(11,STATIC_CONST_TRUE)
(12,if(data > 0)
(13,)
(14,)
(15,STATIC_CONST_TRUE)
(16,if(STATIC_CONST_TRUE)
(17,CHAR_MAX)
(18,' ')
(19,RET)
(20,data)
(21,data > 0)
(22,data)
(23,data)
(24,data * 2)
(25,)
(26,data)
(27,data = ' ')
(28,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^