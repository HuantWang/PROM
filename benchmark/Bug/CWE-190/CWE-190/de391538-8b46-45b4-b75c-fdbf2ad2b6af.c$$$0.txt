-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,65,67,71,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_17_bad()
CWE190_Integer_Overflow__char_rand_square_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(31,1,0)
(8,7,0)
(41,26,0)
(21,37,0)
(23,20,0)
(40,38,0)
(26,38,0)
(6,5,0)
(29,1,0)
(20,37,0)
(39,34,0)
(11,5,0)
(16,38,0)
(30,39,0)
(0,30,0)
(34,39,0)
(22,21,0)
(4,37,0)
(27,25,0)
(10,29,0)
(21,20,0)
(2,29,0)
(25,7,0)
(30,42,0)
(13,7,0)
(18,39,0)
(1,5,0)
(20,29,0)
(39,18,0)
(9,38,0)
(32,7,0)
(33,5,0)
(29,30,0)
(15,16,0)
(12,5,0)
(3,25,0)
(37,36,0)
(39,30,0)
(29,20,0)
(14,1,0)
(28,26,0)
(19,5,0)
(24,13,0)
(15,21,1)
(41,28,1)
(28,38,1)
(13,24,1)
(18,0,1)
(23,26,1)
(28,16,1)
(30,39,1)
(35,26,1)
(13,7,1)
(0,25,1)
(9,25,1)
(31,14,1)
(40,9,1)
(32,1,1)
(39,34,1)
(27,7,1)
(16,15,1)
(25,3,1)
(29,1,1)
(29,30,1)
(16,38,1)
(24,30,1)
(27,13,1)
(20,29,1)
(8,32,1)
(21,22,1)
(38,40,1)
(29,10,1)
(21,20,1)
(22,20,1)
(7,8,1)
(26,38,1)
(10,2,1)
(2,23,1)
(25,7,1)
(3,27,1)
(39,18,1)
(26,41,1)
(1,31,1)
(13,25,2)
(24,25,2)
(21,26,2)
(25,25,2)
(30,39,2)
(20,29,2)
(18,25,2)
(30,25,2)
(28,26,2)
(22,26,2)
(15,26,2)
(29,1,2)
(10,26,2)
(26,38,2)
(0,25,2)
(39,18,2)
(2,26,2)
(23,26,2)
(27,25,2)
(39,25,2)
(29,26,2)
(39,34,2)
(26,26,2)
(13,7,2)
(3,25,2)
(29,30,2)
(16,38,2)
(16,26,2)
(21,20,2)
(20,26,2)
(41,26,2)
(25,7,2)
-----------------------------------
(0,data)
(1,data = \' \')
(2,data)
(3,1)
(4,result)
(5,)
(6,i)
(7,i = 0)
(8,0)
(9,j)
(10,data)
(11,for(i = 0; i < 1; i++)
(12,j)
(13,i++)
(14,data)
(15,j)
(16,j++)
(17,data = ' ')
(18,RAND32()
(19,for(j = 0; j < 1; j++)
(20,result = data * data)
(21,printHexCharLine(result)
(22,result)
(23,result)
(24,i)
(25,i < 1)
(26,j < 1)
(27,i)
(28,j)
(29,data * data)
(30,data = (char)
(31,' ')
(32,i)
(33,data)
(34,char)
(35,RET)
(36,)
(37,)
(38,j = 0)
(39,(char)
(40,0)
(41,1)
(42,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^