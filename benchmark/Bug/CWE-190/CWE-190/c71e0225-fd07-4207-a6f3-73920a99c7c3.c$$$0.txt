-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_17_bad()
CWE190_Integer_Overflow__int_fscanf_square_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,17,0)
(34,41,0)
(6,26,0)
(4,26,0)
(23,10,0)
(37,34,0)
(39,16,0)
(20,40,0)
(38,19,0)
(3,14,0)
(27,5,0)
(10,5,0)
(9,24,0)
(13,24,0)
(21,16,0)
(36,14,0)
(7,26,0)
(36,34,0)
(1,19,0)
(0,10,0)
(8,25,0)
(14,25,0)
(17,16,0)
(32,26,0)
(29,25,0)
(40,24,0)
(11,2,0)
(30,17,0)
(5,19,0)
(33,36,0)
(28,26,0)
(25,19,0)
(31,24,0)
(25,14,0)
(19,26,0)
(2,16,0)
(22,40,0)
(10,18,0)
(35,13,0)
(14,34,0)
(5,10,0)
(23,17,1)
(22,24,1)
(0,23,1)
(24,9,1)
(8,29,1)
(36,14,1)
(40,24,1)
(35,36,1)
(3,40,1)
(11,10,1)
(30,16,1)
(13,35,1)
(25,19,1)
(9,31,1)
(30,2,1)
(29,3,1)
(39,21,1)
(5,27,1)
(20,22,1)
(27,0,1)
(17,12,1)
(19,1,1)
(33,14,1)
(12,30,1)
(16,39,1)
(25,8,1)
(15,40,1)
(21,19,1)
(5,19,1)
(31,17,1)
(17,16,1)
(36,33,1)
(2,11,1)
(10,5,1)
(13,24,1)
(14,25,1)
(40,20,1)
(2,16,1)
(1,38,1)
(22,13,1)
(29,40,2)
(8,40,2)
(5,17,2)
(10,17,2)
(12,17,2)
(5,19,2)
(2,17,2)
(25,19,2)
(13,40,2)
(17,17,2)
(30,17,2)
(27,17,2)
(14,25,2)
(33,40,2)
(36,14,2)
(10,5,2)
(14,40,2)
(40,24,2)
(13,24,2)
(20,40,2)
(23,17,2)
(3,40,2)
(17,16,2)
(22,40,2)
(2,16,2)
(35,40,2)
(40,40,2)
(36,40,2)
(25,40,2)
(11,17,2)
(0,17,2)
-----------------------------------
(0,"%d")
(1,0)
(2,i++)
(3,result)
(4,data)
(5,&data)
(6,j)
(7,for(i = 0; i < 1; i++)
(8,data)
(9,0)
(10,fscanf(stdin, "%d", &data)
(11,i)
(12,1)
(13,j++)
(14,result = data * data)
(15,RET)
(16,i = 0)
(17,i < 1)
(18,)
(19,data = 0)
(20,1)
(21,i)
(22,j)
(23,stdin)
(24,j = 0)
(25,data * data)
(26,)
(27,data)
(28,for(j = 0; j < 1; j++)
(29,data)
(30,i)
(31,j)
(32,i)
(33,result)
(34,)
(35,j)
(36,printIntLine(result)
(37,result)
(38,data)
(39,0)
(40,j < 1)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^