-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_11_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(globalReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,27,31,36,37,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_11_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_11_bad()
CWE190_Integer_Overflow__int_rand_multiply_11_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,10,0)
(8,15,0)
(20,8,0)
(24,10,0)
(16,10,0)
(1,8,0)
(17,25,0)
(16,15,0)
(26,15,0)
(11,16,0)
(12,25,0)
(8,18,0)
(6,10,0)
(10,19,0)
(18,25,0)
(12,18,0)
(23,19,0)
(14,19,0)
(7,18,0)
(2,16,0)
(4,19,0)
(27,15,0)
(18,8,0)
(5,12,0)
(15,0,0)
(15,27,0)
(22,21,0)
(3,16,1)
(8,15,1)
(10,24,1)
(5,18,1)
(12,18,1)
(16,2,1)
(3,9,1)
(11,9,1)
(2,11,1)
(26,13,1)
(20,7,1)
(18,8,1)
(8,10,1)
(16,15,1)
(9,13,1)
(8,1,1)
(13,10,1)
(7,16,1)
(27,26,1)
(15,27,1)
(24,6,1)
(12,5,1)
(16,10,1)
(3,12,1)
(9,15,1)
(1,20,1)
(16,10,2)
(5,16,2)
(8,16,2)
(1,16,2)
(2,9,2)
(26,13,2)
(8,15,2)
(15,13,2)
(16,9,2)
(12,16,2)
(18,16,2)
(8,10,2)
(15,27,2)
(12,18,2)
(11,9,2)
(16,15,2)
(18,8,2)
(27,13,2)
(7,16,2)
(20,16,2)
-----------------------------------
(0,)
(1,2)
(2,0)
(3,RET)
(4,if(globalReturnsTrue()
(5,result)
(6,data)
(7,result)
(8,data * 2)
(9,globalReturnsTrue()
(10,data = 0)
(11,data)
(12,printIntLine(result)
(13,globalReturnsTrue()
(14,data)
(15,data = RAND32()
(16,data > 0)
(17,result)
(18,result = data * 2)
(19,)
(20,data)
(21,)
(22,if(data > 0)
(23,if(globalReturnsTrue()
(24,0)
(25,)
(26,data)
(27,RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^