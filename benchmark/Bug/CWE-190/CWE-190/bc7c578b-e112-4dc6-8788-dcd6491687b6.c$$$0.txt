-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_04_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,62,67,69,73,75,79,81
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
71,72
71,73
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_04_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_04_bad()
CWE190_Integer_Overflow__int_fgets_square_04_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(32,18,0)
(28,7,0)
(40,32,0)
(7,13,0)
(29,23,0)
(13,2,0)
(15,32,0)
(40,25,0)
(36,1,0)
(35,6,0)
(0,12,0)
(9,13,0)
(31,39,0)
(21,40,0)
(34,1,0)
(1,6,0)
(3,32,0)
(27,23,0)
(25,31,0)
(12,23,0)
(33,7,0)
(22,38,0)
(19,3,0)
(31,28,0)
(25,40,0)
(3,40,0)
(20,7,0)
(10,31,0)
(24,28,0)
(1,7,0)
(5,25,0)
(8,23,0)
(17,25,0)
(4,12,0)
(28,31,0)
(25,12,0)
(16,22,0)
(26,1,0)
(14,13,0)
(6,1,0)
(17,21,1)
(30,37,1)
(4,0,1)
(10,6,1)
(34,7,1)
(3,40,1)
(28,24,1)
(26,34,1)
(6,1,1)
(1,36,1)
(12,4,1)
(37,11,1)
(5,17,1)
(21,37,1)
(11,12,1)
(36,26,1)
(25,12,1)
(24,10,1)
(25,5,1)
(6,35,1)
(28,7,1)
(1,7,1)
(16,6,1)
(37,22,1)
(3,19,1)
(20,33,1)
(19,40,1)
(35,1,1)
(30,3,1)
(37,31,1)
(25,31,1)
(31,28,1)
(7,20,1)
(22,16,1)
(33,11,1)
(40,25,1)
(10,6,2)
(35,11,2)
(19,37,2)
(36,11,2)
(34,11,2)
(1,7,2)
(6,1,2)
(25,12,2)
(7,11,2)
(5,37,2)
(21,37,2)
(17,37,2)
(3,37,2)
(31,6,2)
(6,11,2)
(40,37,2)
(22,6,2)
(25,31,2)
(24,6,2)
(28,6,2)
(3,40,2)
(28,7,2)
(40,25,2)
(33,11,2)
(20,11,2)
(16,6,2)
(26,11,2)
(1,11,2)
(25,37,2)
(31,28,2)
-----------------------------------
(0,data)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,)
(3,printIntLine(result)
(4,0)
(5,data)
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,inputBuffer[CHAR_ARRAY_SIZE] = "")
(8,if(STATIC_CONST_TRUE)
(9,inputBuffer)
(10,data)
(11,STATIC_CONST_TRUE)
(12,data = 0)
(13,)
(14,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,result)
(16,"fgets()
(17,data)
(18,)
(19,result)
(20,"")
(21,result)
(22,printLine("fgets()
(23,)
(24,inputBuffer)
(25,data * data)
(26,CHAR_ARRAY_SIZE)
(27,if(STATIC_CONST_TRUE)
(28,atoi(inputBuffer)
(29,data)
(30,RET)
(31,data = atoi(inputBuffer)
(32,)
(33,inputBuffer)
(34,inputBuffer)
(35,NULL)
(36,stdin)
(37,STATIC_CONST_TRUE)
(38,)
(39,)
(40,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^