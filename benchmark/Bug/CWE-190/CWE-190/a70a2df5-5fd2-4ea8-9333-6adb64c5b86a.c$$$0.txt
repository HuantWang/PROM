-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_add_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        unsigned int result = data + 1;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,50,54,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
22,23
22,24
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_add_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_add_15_bad()
CWE190_Integer_Overflow__unsigned_int_rand_add_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(12,0,0)
(26,36,0)
(9,18,0)
(5,0,0)
(15,36,0)
(18,2,0)
(21,36,0)
(18,9,0)
(19,2,0)
(28,29,0)
(18,31,0)
(29,32,0)
(30,29,0)
(31,18,0)
(37,30,0)
(6,2,0)
(19,0,0)
(3,29,0)
(24,19,0)
(11,16,0)
(2,18,0)
(7,36,0)
(30,3,0)
(2,36,0)
(3,19,0)
(10,32,0)
(1,33,0)
(20,32,0)
(0,33,0)
(27,14,0)
(19,3,0)
(16,32,0)
(25,3,0)
(13,33,0)
(8,19,0)
(22,32,0)
(14,36,0)
(23,32,0)
(34,33,0)
(19,0,1)
(2,18,1)
(19,2,1)
(4,0,1)
(37,3,1)
(26,2,1)
(35,21,1)
(11,35,1)
(18,9,1)
(6,4,1)
(17,10,1)
(22,16,1)
(21,14,1)
(19,8,1)
(17,22,1)
(0,12,1)
(18,31,1)
(35,26,1)
(27,4,1)
(30,37,1)
(3,19,1)
(14,27,1)
(31,6,1)
(8,24,1)
(12,5,1)
(30,3,1)
(25,35,1)
(24,25,1)
(10,30,1)
(16,11,1)
(24,35,2)
(37,35,2)
(22,35,2)
(21,4,2)
(30,35,2)
(27,4,2)
(16,35,2)
(14,4,2)
(10,35,2)
(3,35,2)
(2,18,2)
(18,9,2)
(31,4,2)
(26,4,2)
(19,0,2)
(6,4,2)
(25,35,2)
(30,3,2)
(18,4,2)
(19,35,2)
(3,19,2)
(18,31,2)
(11,35,2)
(2,4,2)
(19,2,2)
(8,35,2)
-----------------------------------
(0,data = 0)
(1,switch(6)
(2,data = (unsigned int)
(3,result = data + 1)
(4,6)
(5,data)
(6,data)
(7,case 6:)
(8,1)
(9,unsigned int)
(10,break;)
(11,"Benign, fixed string")
(12,0)
(13,data)
(14,printLine("Benign, fixed string")
(15,default:)
(16,printLine("Benign, fixed string")
(17,RET)
(18,(unsigned int)
(19,data + 1)
(20,case 7:)
(21,break;)
(22,break;)
(23,default:)
(24,data)
(25,result)
(26,break;)
(27,"Benign, fixed string")
(28,result)
(29,)
(30,printUnsignedLine(result)
(31,RAND32()
(32,)
(33,)
(34,switch(7)
(35,7)
(36,)
(37,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^