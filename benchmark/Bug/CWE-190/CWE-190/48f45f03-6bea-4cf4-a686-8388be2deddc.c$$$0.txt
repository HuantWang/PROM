-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_preinc_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        int result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,48,51,53,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_preinc_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_preinc_15_bad()
CWE190_Integer_Overflow__int_fscanf_preinc_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(18,20,0)
(23,31,0)
(17,21,0)
(7,20,0)
(22,17,0)
(31,18,0)
(25,20,0)
(33,22,0)
(3,26,0)
(31,17,0)
(28,17,0)
(32,24,0)
(4,17,0)
(34,26,0)
(11,21,0)
(36,21,0)
(12,26,0)
(24,35,0)
(13,26,0)
(8,20,0)
(2,34,0)
(22,35,0)
(14,18,0)
(9,35,0)
(29,21,0)
(24,17,0)
(18,31,0)
(1,24,0)
(10,20,0)
(30,26,0)
(37,18,0)
(19,1,0)
(1,35,0)
(5,25,0)
(35,26,0)
(6,24,0)
(0,20,0)
(15,8,1)
(6,32,1)
(34,2,1)
(0,25,1)
(22,33,1)
(16,13,1)
(31,23,1)
(32,22,1)
(1,24,1)
(2,15,1)
(27,17,1)
(24,6,1)
(15,0,1)
(23,37,1)
(16,12,1)
(18,31,1)
(8,18,1)
(13,34,1)
(5,27,1)
(12,1,1)
(14,27,1)
(19,24,1)
(22,17,1)
(31,17,1)
(1,19,1)
(17,4,1)
(37,14,1)
(25,5,1)
(24,17,1)
(33,15,1)
(4,28,1)
(31,17,2)
(1,15,2)
(22,17,2)
(24,15,2)
(2,15,2)
(22,15,2)
(23,27,2)
(31,27,2)
(1,24,2)
(33,15,2)
(18,27,2)
(19,15,2)
(24,17,2)
(18,31,2)
(12,15,2)
(25,27,2)
(13,15,2)
(14,27,2)
(0,27,2)
(34,15,2)
(8,27,2)
(6,15,2)
(32,15,2)
(37,27,2)
(5,27,2)
-----------------------------------
(0,break;)
(1,printIntLine(result)
(2,"Benign, fixed string")
(3,case 7:)
(4,0)
(5,"Benign, fixed string")
(6,data)
(7,case 6:)
(8,break;)
(9,result)
(10,default:)
(11,data)
(12,break;)
(13,break;)
(14,stdin)
(15,7)
(16,RET)
(17,data = 0)
(18,fscanf(stdin, "%d", &data)
(19,result)
(20,)
(21,)
(22,++data)
(23,data)
(24,result = data)
(25,printLine("Benign, fixed string")
(26,)
(27,6)
(28,data)
(29,switch(7)
(30,default:)
(31,&data)
(32,result)
(33,data)
(34,printLine("Benign, fixed string")
(35,)
(36,switch(6)
(37,"%d")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^