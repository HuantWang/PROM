-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_34_bad()
{
    int64_t data;
    CWE190_Integer_Overflow__int64_t_fscanf_square_34_unionType myUnion;
    data = 0LL;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%" SCNd64, &data);
    myUnion.unionFirst = data;
    {
        int64_t data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
25,26
25,27
26,27
26,28
27,28
30,31
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,9,11,15,17,21,22,28,29,31,36,38,42,43,48,50,54,56,60,62
-----computeFrom-----
19,20
19,21
25,26
25,27
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_34_bad(){    int64_t data;    CWE190_Integer_Overflow__int64_t_fscanf_square_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_square_34_bad()
CWE190_Integer_Overflow__int64_t_fscanf_square_34_bad
{    int64_t data;    CWE190_Integer_Overflow__int64_t_fscanf_square_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
CWE190_Integer_Overflow__int64_t_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_fscanf_square_34_unionType
CWE190_Integer_Overflow__int64_t_fscanf_square_34_unionType
myUnion
myUnion
data = 0LL;
data = 0LL
data
data
0LL
fscanf (stdin, "%" SCNd64, &data);
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
int64_t data = myUnion.unionSecond;
int64_t data = myUnion.unionSecond;
int64_t
int64_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(6,15,0)
(11,20,0)
(21,23,0)
(14,23,0)
(0,3,0)
(18,1,0)
(8,6,0)
(3,22,0)
(20,2,0)
(7,6,0)
(25,2,0)
(16,1,0)
(19,1,0)
(12,22,0)
(9,20,0)
(22,23,0)
(10,7,0)
(15,1,0)
(6,7,0)
(3,6,0)
(22,3,0)
(13,7,0)
(4,3,0)
(24,15,0)
(23,15,0)
(17,21,0)
(2,1,0)
(21,22,0)
(21,22,1)
(10,8,1)
(13,10,1)
(5,21,1)
(3,0,1)
(22,3,1)
(0,4,1)
(21,17,1)
(4,12,1)
(11,18,1)
(7,13,1)
(20,9,1)
(17,22,1)
(12,6,1)
(25,20,1)
(2,25,1)
(6,7,1)
(3,6,1)
(8,2,1)
(9,11,1)
(22,3,2)
(3,6,2)
(21,22,2)
(6,7,2)
-----------------------------------
(0,data)
(1,)
(2,myUnion.unionFirst = data)
(3,data * data)
(4,data)
(5,RET)
(6,data = myUnion.unionSecond)
(7,myUnion.unionSecond)
(8,data)
(9,unionFirst)
(10,myUnion)
(11,myUnion)
(12,result)
(13,unionSecond)
(14,result)
(15,)
(16,data)
(17,result)
(18,L)
(19,myUnion)
(20,myUnion.unionFirst)
(21,printLongLongLine(result)
(22,result = data * data)
(23,)
(24,data)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^