-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_14_bad()
{
    short data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,42,46,48,52,53,57,59
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
39,40
39,41
50,51
50,52
-----guardedBy-----
41,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_14_bad(){    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_14_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_14_bad
{    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,30,0)
(19,16,0)
(21,14,0)
(12,2,0)
(6,0,0)
(17,33,0)
(24,0,0)
(27,32,0)
(27,6,0)
(11,32,0)
(18,0,0)
(31,32,0)
(10,30,0)
(6,27,0)
(4,31,0)
(14,21,0)
(5,31,0)
(20,32,0)
(24,6,0)
(26,27,0)
(15,2,0)
(3,6,0)
(14,32,0)
(8,14,0)
(29,21,0)
(28,30,0)
(1,16,0)
(13,24,0)
(9,27,0)
(21,25,0)
(32,30,0)
(7,21,0)
(19,1,1)
(5,4,1)
(31,5,1)
(2,12,1)
(32,20,1)
(8,29,1)
(14,32,1)
(31,32,1)
(21,14,1)
(22,24,1)
(1,21,1)
(4,16,1)
(26,9,1)
(27,32,1)
(29,7,1)
(16,19,1)
(24,6,1)
(22,31,1)
(27,26,1)
(7,2,1)
(15,32,1)
(6,27,1)
(12,15,1)
(24,13,1)
(14,8,1)
(3,31,1)
(20,11,1)
(13,6,1)
(9,3,1)
(22,16,1)
(1,2,1)
(27,32,2)
(6,31,2)
(8,2,2)
(14,32,2)
(24,31,2)
(9,31,2)
(24,6,2)
(31,32,2)
(5,16,2)
(29,2,2)
(27,31,2)
(31,16,2)
(21,2,2)
(3,31,2)
(13,31,2)
(7,2,2)
(21,14,2)
(6,27,2)
(26,31,2)
(14,2,2)
(4,16,2)
-----------------------------------
(0,)
(1,globalFive)
(2,globalFive==5)
(3,result)
(4,data)
(5,0)
(6,result = data * 2)
(7,stdin)
(8,data)
(9,data)
(10,if(globalFive==5)
(11,data)
(12,5)
(13,result)
(14,&data)
(15,globalFive)
(16,globalFive==5)
(17,if(data > 0)
(18,result)
(19,5)
(20,0)
(21,fscanf (stdin, "%hd", &data)
(22,RET)
(23,if(globalFive==5)
(24,printIntLine(result)
(25,)
(26,2)
(27,data * 2)
(28,data)
(29,"%hd")
(30,)
(31,data > 0)
(32,data = 0)
(33,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^