-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_05_bad()
{
    int64_t data;
    data = 0LL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    if(staticTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
27,28
30,31
31,32
33,34
33,35
34,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,9,11,15,16,19,24,28,29,32,35,40,41,46,48,52,53,57,59
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
50,51
50,52
-----guardedBy-----
40,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_05_bad(){    int64_t data;    data = 0LL;    if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_05_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_05_bad
{    int64_t data;    data = 0LL;    if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
staticTrue
staticTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(8,21,0)
(12,9,0)
(16,11,0)
(7,9,0)
(12,22,0)
(15,20,0)
(22,13,0)
(26,21,0)
(14,9,0)
(27,11,0)
(6,24,0)
(9,21,0)
(24,22,0)
(21,26,0)
(23,14,0)
(21,9,0)
(2,11,0)
(24,13,0)
(21,8,0)
(18,22,0)
(9,3,0)
(0,13,0)
(5,12,0)
(19,14,0)
(1,11,0)
(17,12,0)
(22,12,0)
(10,4,1)
(19,4,1)
(21,8,1)
(7,25,1)
(14,9,1)
(17,18,1)
(25,1,1)
(23,19,1)
(5,17,1)
(12,9,1)
(9,21,1)
(10,24,1)
(24,6,1)
(10,14,1)
(21,26,1)
(18,14,1)
(12,5,1)
(24,22,1)
(4,25,1)
(26,7,1)
(4,9,1)
(6,22,1)
(14,23,1)
(22,12,1)
(6,14,2)
(12,14,2)
(17,14,2)
(14,4,2)
(7,25,2)
(24,14,2)
(14,9,2)
(18,14,2)
(22,12,2)
(12,9,2)
(21,8,2)
(21,25,2)
(5,14,2)
(24,22,2)
(22,14,2)
(19,4,2)
(9,25,2)
(21,26,2)
(26,25,2)
(23,4,2)
(9,21,2)
-----------------------------------
(0,result)
(1,L)
(2,if(staticTrue)
(3,)
(4,staticTrue)
(5,2)
(6,result)
(7,data)
(8,int64_t)
(9,data = (int64_t)
(10,RET)
(11,)
(12,data * 2)
(13,)
(14,data > 0)
(15,if(data > 0)
(16,if(staticTrue)
(17,data)
(18,result)
(19,data)
(20,)
(21,(int64_t)
(22,result = data * 2)
(23,0)
(24,printLongLongLine(result)
(25,staticTrue)
(26,RAND64()
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^