-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_13_bad()
CWE190_Integer_Overflow__char_fscanf_square_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,12,0)
(20,24,0)
(2,12,0)
(2,11,0)
(26,19,0)
(17,11,0)
(12,2,0)
(5,22,0)
(8,24,0)
(28,13,0)
(15,11,0)
(7,5,0)
(3,24,0)
(17,2,0)
(6,5,0)
(29,21,0)
(10,5,0)
(4,12,0)
(16,17,0)
(5,10,0)
(9,19,0)
(25,21,0)
(18,13,0)
(10,19,0)
(12,19,0)
(19,24,0)
(14,10,0)
(1,2,0)
(11,27,0)
(23,17,1)
(17,2,1)
(10,19,1)
(4,1,1)
(19,26,1)
(2,12,1)
(23,13,1)
(5,10,1)
(0,4,1)
(12,0,1)
(21,29,1)
(7,6,1)
(12,19,1)
(18,28,1)
(25,19,1)
(6,21,1)
(28,5,1)
(17,16,1)
(16,2,1)
(26,9,1)
(29,25,1)
(13,18,1)
(14,7,1)
(10,14,1)
(28,21,1)
(1,13,1)
(5,10,2)
(14,21,2)
(6,21,2)
(17,2,2)
(12,19,2)
(2,12,2)
(1,13,2)
(10,19,2)
(4,13,2)
(2,13,2)
(7,21,2)
(10,21,2)
(17,13,2)
(12,13,2)
(5,21,2)
(0,13,2)
(16,13,2)
-----------------------------------
(0,data)
(1,result)
(2,result = data * data)
(3,data)
(4,data)
(5,fscanf (stdin, "%c", &data)
(6,stdin)
(7,"%c")
(8,if(GLOBAL_CONST_FIVE==5)
(9,data)
(10,&data)
(11,)
(12,data * data)
(13,GLOBAL_CONST_FIVE==5)
(14,data)
(15,result)
(16,result)
(17,printHexCharLine(result)
(18,5)
(19,data = \\\' \\\')
(20,if(GLOBAL_CONST_FIVE==5)
(21,GLOBAL_CONST_FIVE==5)
(22,)
(23,RET)
(24,)
(25,GLOBAL_CONST_FIVE)
(26,\\\' \\\')
(27,)
(28,GLOBAL_CONST_FIVE)
(29,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^