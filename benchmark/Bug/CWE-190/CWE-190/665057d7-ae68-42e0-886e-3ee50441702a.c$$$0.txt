-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,62,66,68,72,74
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_17_bad()
CWE190_Integer_Overflow__char_max_square_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(34,11,0)
(36,10,0)
(33,22,0)
(10,34,0)
(20,9,0)
(40,19,0)
(18,25,0)
(31,38,0)
(17,16,0)
(15,19,0)
(14,7,0)
(32,22,0)
(2,19,0)
(5,34,0)
(10,26,0)
(25,11,0)
(8,7,0)
(1,38,0)
(4,10,0)
(26,19,0)
(34,10,0)
(28,19,0)
(30,19,0)
(12,26,0)
(25,34,0)
(38,7,0)
(37,14,0)
(35,20,0)
(11,23,0)
(24,26,0)
(27,7,0)
(39,11,0)
(10,20,0)
(13,16,0)
(3,22,0)
(21,33,0)
(16,22,0)
(6,20,0)
(37,20,1)
(3,38,1)
(33,22,1)
(36,4,1)
(17,33,1)
(10,20,1)
(0,16,1)
(10,26,1)
(25,18,1)
(20,35,1)
(17,22,1)
(33,21,1)
(31,14,1)
(32,3,1)
(6,38,1)
(38,7,1)
(22,32,1)
(35,6,1)
(31,7,1)
(14,7,1)
(7,8,1)
(26,24,1)
(38,1,1)
(8,27,1)
(13,17,1)
(21,25,1)
(1,31,1)
(10,36,1)
(16,22,1)
(18,34,1)
(34,10,1)
(5,16,1)
(16,13,1)
(25,34,1)
(4,5,1)
(14,37,1)
(27,26,1)
(24,12,1)
(17,16,2)
(6,38,2)
(18,16,2)
(1,38,2)
(31,38,2)
(5,16,2)
(37,38,2)
(13,16,2)
(38,38,2)
(16,22,2)
(33,22,2)
(36,16,2)
(4,16,2)
(10,26,2)
(25,34,2)
(10,20,2)
(35,38,2)
(16,16,2)
(21,16,2)
(34,10,2)
(33,16,2)
(38,7,2)
(14,7,2)
(10,16,2)
(20,38,2)
(25,16,2)
(14,38,2)
(34,16,2)
-----------------------------------
(0,RET)
(1,1)
(2,for(j = 0; j < 1; j++)
(3,j)
(4,data)
(5,result)
(6,data)
(7,i = 0)
(8,0)
(9,)
(10,data * data)
(11,)
(12,data)
(13,1)
(14,i++)
(15,for(i = 0; i < 1; i++)
(16,j < 1)
(17,j)
(18,result)
(19,)
(20,data = CHAR_MAX)
(21,j)
(22,j = 0)
(23,)
(24,' ')
(25,printHexCharLine(result)
(26,data = ' ')
(27,i)
(28,i)
(29,data = \' \')
(30,j)
(31,i)
(32,0)
(33,j++)
(34,result = data * data)
(35,CHAR_MAX)
(36,data)
(37,i)
(38,i < 1)
(39,result)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^