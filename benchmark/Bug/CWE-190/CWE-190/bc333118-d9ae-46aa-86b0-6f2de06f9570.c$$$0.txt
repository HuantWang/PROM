-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
        int64_t result = data * data;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
31,32
32,33
36,37
37,38
37,39
38,39
42,43
42,44
44,45
44,46
44,47
44,48
44,49
44,50
45,46
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,9,11,15,16,18,21,25,29,30,33,34,35,39,40,41,43,46,51,53,57,59,63,65,66,67,71,72,73
-----computeFrom-----
13,14
13,15
23,24
23,25
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_15_bad()
CWE190_Integer_Overflow__int64_t_rand_square_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(6,9,0)
(16,8,0)
(3,2,0)
(22,1,0)
(17,2,0)
(5,2,0)
(34,35,0)
(35,32,0)
(14,8,0)
(13,21,0)
(4,32,0)
(19,9,0)
(1,9,0)
(27,8,0)
(20,13,0)
(18,1,0)
(7,2,0)
(33,16,0)
(13,25,0)
(12,8,0)
(25,13,0)
(9,1,0)
(31,32,0)
(1,31,0)
(9,21,0)
(13,20,0)
(10,32,0)
(0,8,0)
(23,21,0)
(21,8,0)
(18,31,0)
(26,31,0)
(21,13,0)
(30,32,0)
(28,32,0)
(29,18,0)
(19,6,1)
(24,0,1)
(29,1,1)
(18,1,1)
(18,29,1)
(35,34,1)
(0,16,1)
(20,23,1)
(6,22,1)
(11,28,1)
(9,19,1)
(22,24,1)
(21,13,1)
(11,10,1)
(16,33,1)
(24,12,1)
(13,20,1)
(34,24,1)
(28,35,1)
(9,21,1)
(12,21,1)
(13,25,1)
(33,15,1)
(15,5,1)
(23,15,1)
(1,9,1)
(10,18,1)
(10,24,2)
(6,24,2)
(12,15,2)
(35,24,2)
(9,24,2)
(9,21,2)
(13,25,2)
(0,15,2)
(29,24,2)
(1,24,2)
(22,24,2)
(16,15,2)
(23,15,2)
(18,1,2)
(13,20,2)
(21,13,2)
(20,15,2)
(33,15,2)
(13,15,2)
(34,24,2)
(21,15,2)
(1,9,2)
(19,24,2)
(28,24,2)
(18,24,2)
-----------------------------------
(0,break;)
(1,result = data * data)
(2,)
(3,switch(7)
(4,default:)
(5,L)
(6,data)
(7,switch(6)
(8,)
(9,data * data)
(10,break;)
(11,RET)
(12,break;)
(13,(int64_t)
(14,case 6:)
(15,6)
(16,printLine("Benign, fixed string")
(17,data)
(18,printLongLongLine(result)
(19,data)
(20,RAND64()
(21,data = (int64_t)
(22,result)
(23,data)
(24,7)
(25,int64_t)
(26,result)
(27,default:)
(28,break;)
(29,result)
(30,case 7:)
(31,)
(32,)
(33,"Benign, fixed string")
(34,"Benign, fixed string")
(35,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^