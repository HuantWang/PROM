-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_06_bad()
CWE190_Integer_Overflow__char_max_preinc_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,24,0)
(16,6,0)
(2,18,0)
(5,6,0)
(12,6,0)
(26,21,0)
(25,27,0)
(1,17,0)
(0,5,0)
(19,27,0)
(23,11,0)
(24,2,0)
(11,5,0)
(24,5,0)
(3,26,0)
(9,2,0)
(22,26,0)
(14,17,0)
(22,11,0)
(11,26,0)
(11,2,0)
(10,2,0)
(24,26,0)
(13,6,0)
(15,11,0)
(8,5,0)
(28,22,0)
(10,9,1)
(9,17,1)
(14,1,1)
(24,20,1)
(19,17,1)
(5,8,1)
(11,23,1)
(15,24,1)
(22,11,1)
(28,11,1)
(24,2,1)
(1,5,1)
(20,27,1)
(11,2,1)
(11,5,1)
(22,28,1)
(23,15,1)
(25,19,1)
(27,25,1)
(4,22,1)
(4,27,1)
(2,10,1)
(8,0,1)
(19,2,1)
(24,5,1)
(17,14,1)
(28,27,2)
(24,27,2)
(2,17,2)
(24,2,2)
(22,27,2)
(24,5,2)
(23,27,2)
(22,11,2)
(11,27,2)
(15,27,2)
(11,5,2)
(9,17,2)
(11,2,2)
(10,17,2)
(20,27,2)
-----------------------------------
(0,data)
(1,STATIC_CONST_FIVE)
(2,data = CHAR_MAX)
(3,result)
(4,RET)
(5,data = ' ')
(6,)
(7,data = \' \')
(8,' ')
(9,data)
(10,CHAR_MAX)
(11,result = data)
(12,if(STATIC_CONST_FIVE==5)
(13,if(STATIC_CONST_FIVE==5)
(14,5)
(15,result)
(16,data)
(17,STATIC_CONST_FIVE==5)
(18,)
(19,STATIC_CONST_FIVE)
(20,data)
(21,)
(22,printHexCharLine(result)
(23,data)
(24,++data)
(25,5)
(26,)
(27,STATIC_CONST_FIVE==5)
(28,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^