-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
        {
            char result = data * data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
58,60
59,60
59,61
60,61
62,63
62,64
63,64
63,65
66,67
68,69
68,70
69,70
69,71
72,73
72,74
73,74
75,76
75,77
76,77
76,78
79,80
81,82
81,83
82,83
83,84
83,85
85,86
85,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,43,47,49,53,55,61,64,65,67,70,71,74,77,78,80,84,86,90,92,96,98,103,104
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
45,46
45,47
58,59
58,60
88,89
88,90
-----guardedBy-----
67,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_max_square_12_bad()
CWE190_Integer_Overflow__char_max_square_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) <= (long)sqrt((double)CHAR_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)CHAR_MAX)
long
long

sqrt((double)CHAR_MAX)
sqrt
sqrt
(double)CHAR_MAX
double
double

CHAR_MAX
CHAR_MAX
{            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(32,33,0)
(42,35,0)
(33,45,0)
(32,23,0)
(39,24,0)
(35,1,0)
(50,14,0)
(29,47,0)
(49,35,0)
(6,52,0)
(34,25,0)
(31,52,0)
(42,12,0)
(25,24,0)
(51,42,0)
(32,13,0)
(41,9,0)
(7,24,0)
(15,0,0)
(19,0,0)
(35,42,0)
(9,36,0)
(0,19,0)
(40,50,0)
(11,25,0)
(13,32,0)
(3,14,0)
(17,50,0)
(50,1,0)
(5,12,0)
(5,42,0)
(16,50,0)
(4,1,0)
(1,18,0)
(45,0,0)
(30,2,0)
(45,33,0)
(44,5,0)
(38,14,0)
(52,31,0)
(50,40,0)
(52,13,0)
(14,27,0)
(23,32,0)
(13,52,0)
(22,26,0)
(40,29,0)
(0,45,0)
(26,40,0)
(33,32,0)
(0,14,0)
(46,29,0)
(35,14,0)
(8,24,0)
(28,35,0)
(0,1,0)
(26,29,0)
(20,1,0)
(10,40,0)
(21,12,0)
(35,14,1)
(0,19,1)
(35,1,1)
(50,14,1)
(3,48,1)
(5,44,1)
(48,25,1)
(40,50,1)
(0,15,1)
(50,1,1)
(45,0,1)
(42,35,1)
(14,38,1)
(32,13,1)
(22,40,1)
(6,45,1)
(20,4,1)
(52,6,1)
(10,37,1)
(41,33,1)
(49,51,1)
(9,41,1)
(51,33,1)
(26,40,1)
(5,42,1)
(25,11,1)
(32,23,1)
(16,10,1)
(17,16,1)
(37,14,1)
(44,42,1)
(50,17,1)
(43,9,1)
(33,45,1)
(35,28,1)
(0,14,1)
(26,22,1)
(33,32,1)
(38,3,1)
(4,48,1)
(28,49,1)
(11,34,1)
(1,20,1)
(43,5,1)
(13,52,1)
(43,26,1)
(52,31,1)
(37,1,1)
(15,37,1)
(0,1,1)
(41,33,2)
(33,45,2)
(5,33,2)
(49,33,2)
(35,14,2)
(0,1,2)
(40,50,2)
(52,37,2)
(35,1,2)
(15,37,2)
(9,33,2)
(38,48,2)
(28,33,2)
(32,23,2)
(42,35,2)
(10,37,2)
(13,52,2)
(32,37,2)
(50,14,2)
(17,37,2)
(6,37,2)
(45,0,2)
(45,37,2)
(4,48,2)
(20,48,2)
(5,42,2)
(0,14,2)
(33,37,2)
(40,37,2)
(32,13,2)
(26,40,2)
(26,37,2)
(0,37,2)
(13,37,2)
(16,37,2)
(14,48,2)
(44,33,2)
(42,33,2)
(33,32,2)
(50,37,2)
(52,31,2)
(35,33,2)
(1,48,2)
(0,19,2)
(50,1,2)
(22,37,2)
(51,33,2)
(3,48,2)
-----------------------------------
(0,(long)
(1,data = 2)
(2,)
(3,data)
(4,data)
(5,printHexCharLine(result)
(6,CHAR_MAX)
(7,if(globalReturnsTrueOrFalse()
(8,data)
(9,printLine("data value is too large to perform arithmetic safely.")
(10,result)
(11,\\\' \\\')
(12,)
(13,sqrt((double)
(14,data = CHAR_MAX)
(15,data)
(16,data)
(17,data)
(18,)
(19,long)
(20,2)
(21,result)
(22,result)
(23,long)
(24,)
(25,data = \\\' \\\')
(26,printHexCharLine(result)
(27,)
(28,data)
(29,)
(30,if (abs((long)
(31,double)
(32,(long)
(33,abs((long)
(34,data)
(35,data * data)
(36,)
(37,globalReturnsTrueOrFalse()
(38,CHAR_MAX)
(39,if(globalReturnsTrueOrFalse()
(40,result = data * data)
(41,"data value is too large to perform arithmetic safely.")
(42,result = data * data)
(43,RET)
(44,result)
(45,abs((long)
(46,result)
(47,)
(48,globalReturnsTrueOrFalse()
(49,data)
(50,data * data)
(51,result)
(52,(double)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^