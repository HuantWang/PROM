-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,74,78,80,84,86
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_32_bad()
CWE190_Integer_Overflow__char_max_square_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(16,7,0)
(33,1,0)
(3,29,0)
(20,33,0)
(6,22,0)
(18,29,0)
(2,31,0)
(41,0,0)
(0,11,0)
(7,43,0)
(6,31,0)
(27,43,0)
(38,1,0)
(42,12,0)
(36,11,0)
(14,29,0)
(24,39,0)
(37,13,0)
(12,13,0)
(0,13,0)
(17,3,0)
(22,6,0)
(15,31,0)
(21,43,0)
(23,28,0)
(40,28,0)
(1,29,0)
(31,15,0)
(39,1,0)
(35,27,0)
(5,22,0)
(19,15,0)
(10,7,0)
(7,22,0)
(4,3,0)
(43,4,0)
(11,1,0)
(13,29,0)
(43,7,0)
(28,29,0)
(26,6,0)
(27,4,0)
(9,33,0)
(22,3,0)
(8,29,0)
(25,4,0)
(13,37,0)
(12,39,0)
(34,37,0)
(31,29,0)
(30,13,0)
(39,33,0)
(11,0,0)
(28,40,1)
(10,16,1)
(39,33,1)
(11,0,1)
(2,13,1)
(7,22,1)
(5,39,1)
(43,7,1)
(23,31,1)
(0,41,1)
(31,15,1)
(13,37,1)
(37,34,1)
(35,43,1)
(15,19,1)
(27,43,1)
(34,30,1)
(26,5,1)
(22,6,1)
(40,23,1)
(33,20,1)
(41,36,1)
(6,26,1)
(27,35,1)
(32,27,1)
(36,28,1)
(16,21,1)
(21,22,1)
(39,24,1)
(20,9,1)
(19,2,1)
(12,13,1)
(9,11,1)
(24,12,1)
(0,13,1)
(6,31,1)
(42,33,1)
(12,42,1)
(7,10,1)
(27,43,2)
(31,15,2)
(7,22,2)
(39,33,2)
(43,7,2)
(12,13,2)
(6,31,2)
(22,6,2)
(0,13,2)
(13,37,2)
(11,0,2)
-----------------------------------
(0,*dataPtr1)
(1,)
(2,dataPtr2)
(3,)
(4,)
(5,data)
(6,*dataPtr2)
(7,data * data)
(8,dataPtr2)
(9,data)
(10,data)
(11,data = *dataPtr1)
(12,*dataPtr1)
(13,*dataPtr1 = &data)
(14,data)
(15,&data)
(16,data)
(17,data)
(18,dataPtr1)
(19,data)
(20,CHAR_MAX)
(21,result)
(22,data = *dataPtr2)
(23,data)
(24,data)
(25,result)
(26,dataPtr2)
(27,printHexCharLine(result)
(28,data = ' ')
(29,)
(30,dataPtr1)
(31,*dataPtr2 = &data)
(32,RET)
(33,data = CHAR_MAX)
(34,data)
(35,result)
(36,data)
(37,&data)
(38,data)
(39,*dataPtr1 = data)
(40,' ')
(41,dataPtr1)
(42,dataPtr1)
(43,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^