-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
24,25
27,28
27,29
29,30
29,31
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,28,33,34,38,40,44,45,49,51,52
-----computeFrom-----
12,13
12,14
20,21
20,22
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_rand_multiply_16_bad()
CWE190_Integer_Overflow__int_rand_multiply_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(4,12,0)
(22,18,0)
(23,18,0)
(9,12,0)
(17,10,0)
(11,0,0)
(27,24,0)
(10,12,0)
(20,0,0)
(6,7,0)
(3,26,0)
(10,26,0)
(25,5,0)
(24,0,0)
(8,26,0)
(26,5,0)
(19,3,0)
(26,16,0)
(1,20,0)
(28,7,0)
(2,3,0)
(3,12,0)
(20,24,0)
(14,10,0)
(12,7,0)
(24,3,0)
(29,7,0)
(16,26,0)
(3,24,0)
(23,20,1)
(24,3,1)
(2,19,1)
(15,23,1)
(1,24,1)
(3,26,1)
(15,13,1)
(27,10,1)
(26,16,1)
(16,8,1)
(19,27,1)
(23,10,1)
(10,12,1)
(8,21,1)
(12,9,1)
(20,24,1)
(3,12,1)
(13,21,1)
(10,26,1)
(13,25,1)
(25,26,1)
(20,1,1)
(9,4,1)
(10,17,1)
(14,13,1)
(3,2,1)
(21,12,1)
(17,14,1)
(10,26,2)
(24,3,2)
(25,21,2)
(3,10,2)
(8,21,2)
(16,21,2)
(14,13,2)
(26,21,2)
(17,13,2)
(1,10,2)
(2,10,2)
(23,13,2)
(20,24,2)
(19,10,2)
(3,26,2)
(26,16,2)
(20,10,2)
(27,10,2)
(3,12,2)
(10,12,2)
(10,13,2)
(24,10,2)
-----------------------------------
(0,)
(1,result)
(2,2)
(3,data * 2)
(4,data)
(5,)
(6,data)
(7,)
(8,data)
(9,0)
(10,data > 0)
(11,result)
(12,data = 0)
(13,1)
(14,data)
(15,RET)
(16,RAND32()
(17,0)
(18,)
(19,data)
(20,printIntLine(result)
(21,1)
(22,if(data > 0)
(23,break;)
(24,result = data * 2)
(25,break;)
(26,data = RAND32()
(27,result)
(28,while(1)
(29,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^