-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_max_postinc_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
47,50
48,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,51,54,56,59,63,65
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_34_bad(){    char data;    CWE190_Integer_Overflow__char_max_postinc_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_34_bad()
CWE190_Integer_Overflow__char_max_postinc_34_bad
{    char data;    CWE190_Integer_Overflow__char_max_postinc_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_max_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__char_max_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__char_max_postinc_34_unionType
CWE190_Integer_Overflow__char_max_postinc_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(19,22,0)
(30,27,0)
(25,21,0)
(8,16,0)
(23,9,0)
(7,4,0)
(21,22,0)
(12,19,0)
(27,21,0)
(18,28,0)
(16,28,0)
(17,4,0)
(5,19,0)
(21,27,0)
(11,24,0)
(24,28,0)
(14,12,0)
(9,19,0)
(3,10,0)
(6,27,0)
(29,24,0)
(24,16,0)
(13,10,0)
(10,21,0)
(12,21,0)
(2,29,0)
(4,28,0)
(9,10,0)
(10,19,0)
(15,16,0)
(20,22,0)
(0,28,0)
(22,28,0)
(1,29,0)
(7,17,1)
(10,13,1)
(25,24,1)
(12,14,1)
(24,16,1)
(30,25,1)
(10,21,1)
(3,12,1)
(6,30,1)
(16,15,1)
(14,21,1)
(27,6,1)
(26,9,1)
(15,8,1)
(9,10,1)
(9,23,1)
(13,3,1)
(4,7,1)
(29,1,1)
(8,4,1)
(23,10,1)
(21,27,1)
(1,2,1)
(2,16,1)
(24,11,1)
(12,21,1)
(11,29,1)
(21,27,2)
(12,21,2)
(24,16,2)
(9,10,2)
(10,21,2)
-----------------------------------
(0,data)
(1,unionFirst)
(2,myUnion)
(3,result)
(4,data = ' ')
(5,result)
(6,unionSecond)
(7,' ')
(8,data)
(9,printHexCharLine(result)
(10,result = data)
(11,data)
(12,data++)
(13,data)
(14,data)
(15,CHAR_MAX)
(16,data = CHAR_MAX)
(17,data)
(18,myUnion)
(19,)
(20,data)
(21,data = myUnion.unionSecond)
(22,)
(23,result)
(24,myUnion.unionFirst = data)
(25,data)
(26,RET)
(27,myUnion.unionSecond)
(28,)
(29,myUnion.unionFirst)
(30,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^