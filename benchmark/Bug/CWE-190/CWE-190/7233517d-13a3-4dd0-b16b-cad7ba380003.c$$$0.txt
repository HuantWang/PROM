-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
        {
            char result = data * data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
63,65
64,65
66,67
66,68
67,68
67,69
70,71
72,73
72,74
73,74
73,75
76,77
76,78
77,78
79,80
79,81
80,81
80,82
83,84
85,86
85,87
86,87
87,88
87,89
89,90
89,91
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,53,57,59,65,68,69,71,74,75,78,81,82,84,88,90,94,96,100,102,107,108
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
62,63
62,64
92,93
92,94
-----guardedBy-----
71,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_12_bad()
CWE190_Integer_Overflow__char_fscanf_square_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))        {            char result = data * data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
abs((long)data) <= (long)sqrt((double)CHAR_MAX)
abs((long)data)
abs
abs
(long)data
long
long

data
data
(long)sqrt((double)CHAR_MAX)
long
long

sqrt((double)CHAR_MAX)
sqrt
sqrt
(double)CHAR_MAX
double
double

CHAR_MAX
CHAR_MAX
{            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(27,40,0)
(15,23,0)
(10,53,0)
(15,40,0)
(9,40,0)
(21,40,0)
(28,24,0)
(11,38,0)
(30,23,0)
(12,32,0)
(31,37,0)
(52,33,0)
(45,36,0)
(13,41,0)
(50,32,0)
(6,11,0)
(27,14,0)
(12,27,0)
(33,40,0)
(23,30,0)
(44,27,0)
(47,15,0)
(34,12,0)
(18,32,0)
(0,53,0)
(4,19,0)
(35,6,0)
(27,12,0)
(46,33,0)
(25,36,0)
(30,19,0)
(41,11,0)
(40,29,0)
(53,3,0)
(39,3,0)
(36,45,0)
(20,15,0)
(33,6,0)
(53,22,0)
(19,30,0)
(15,14,0)
(19,4,0)
(8,27,0)
(45,19,0)
(7,14,0)
(26,16,0)
(43,24,0)
(42,50,0)
(6,33,0)
(14,24,0)
(17,11,0)
(41,6,0)
(33,14,0)
(15,47,0)
(3,14,0)
(19,45,0)
(3,53,0)
(23,15,0)
(36,48,0)
(1,24,0)
(2,14,0)
(48,36,0)
(50,12,0)
(5,31,0)
(51,53,1)
(33,14,1)
(54,31,1)
(13,6,1)
(36,48,1)
(54,41,1)
(12,27,1)
(51,40,1)
(53,3,1)
(25,23,1)
(50,12,1)
(15,47,1)
(27,44,1)
(36,25,1)
(5,30,1)
(52,35,1)
(41,6,1)
(33,40,1)
(50,42,1)
(49,14,1)
(41,13,1)
(27,14,1)
(6,33,1)
(44,8,1)
(20,51,1)
(35,51,1)
(30,19,1)
(31,5,1)
(3,39,1)
(40,9,1)
(54,50,1)
(8,34,1)
(33,46,1)
(23,15,1)
(27,40,1)
(42,12,1)
(7,2,1)
(15,14,1)
(19,4,1)
(45,36,1)
(0,49,1)
(34,30,1)
(46,52,1)
(21,49,1)
(3,14,1)
(10,0,1)
(30,23,1)
(39,10,1)
(19,45,1)
(14,7,1)
(15,40,1)
(15,20,1)
(9,21,1)
(40,49,2)
(15,51,2)
(19,45,2)
(53,49,2)
(27,40,2)
(6,51,2)
(30,23,2)
(42,30,2)
(27,30,2)
(52,51,2)
(20,51,2)
(45,51,2)
(50,30,2)
(33,40,2)
(19,51,2)
(3,14,2)
(34,30,2)
(30,51,2)
(46,51,2)
(15,47,2)
(23,15,2)
(19,4,2)
(8,30,2)
(31,30,2)
(13,51,2)
(41,51,2)
(36,48,2)
(36,51,2)
(30,19,2)
(27,14,2)
(53,3,2)
(10,49,2)
(5,30,2)
(6,33,2)
(12,27,2)
(50,12,2)
(39,49,2)
(15,14,2)
(44,30,2)
(45,36,2)
(25,51,2)
(3,49,2)
(21,49,2)
(0,49,2)
(12,30,2)
(33,51,2)
(35,51,2)
(9,49,2)
(41,6,2)
(33,14,2)
(15,40,2)
(23,51,2)
-----------------------------------
(0,stdin)
(1,if(globalReturnsTrueOrFalse()
(2,data)
(3,&data)
(4,long)
(5,"data value is too large to perform arithmetic safely.")
(6,result = data * data)
(7,\\\' \\\')
(8,data)
(9,2)
(10,"%c")
(11,)
(12,result = data * data)
(13,result)
(14,data = \\\' \\\')
(15,(long)
(16,)
(17,result)
(18,result)
(19,(long)
(20,data)
(21,data)
(22,)
(23,abs((long)
(24,)
(25,CHAR_MAX)
(26,if (abs((long)
(27,data * data)
(28,if(globalReturnsTrueOrFalse()
(29,)
(30,abs((long)
(31,printLine("data value is too large to perform arithmetic safely.")
(32,)
(33,data * data)
(34,result)
(35,result)
(36,(double)
(37,)
(38,)
(39,data)
(40,data = 2)
(41,printHexCharLine(result)
(42,result)
(43,data)
(44,data)
(45,sqrt((double)
(46,data)
(47,long)
(48,double)
(49,globalReturnsTrueOrFalse()
(50,printHexCharLine(result)
(51,globalReturnsTrueOrFalse()
(52,data)
(53,fscanf (stdin, "%c", &data)
(54,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^