-----label-----
1
-----code-----
static void badSink(char data)
{
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
-----nextToken-----
2,4,6,8,13,15,19,21,25,27
-----computeFrom-----
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char data){    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
static void
badSink(char data)
badSink
char data
char
data
data
{    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(5,3,0)
(7,3,0)
(1,10,0)
(3,11,0)
(2,8,0)
(8,11,0)
(11,10,0)
(11,3,0)
(8,10,0)
(9,11,0)
(3,0,0)
(10,4,0)
(3,0,1)
(7,9,1)
(2,11,1)
(8,11,1)
(11,3,1)
(6,8,1)
(5,7,1)
(3,5,1)
(8,2,1)
(8,11,2)
(3,0,2)
(11,3,2)
-----------------------------------
(0,char data)
(1,result)
(2,result)
(3,data * data)
(4,)
(5,data)
(6,RET)
(7,data)
(8,printHexCharLine(result)
(9,result)
(10,)
(11,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^