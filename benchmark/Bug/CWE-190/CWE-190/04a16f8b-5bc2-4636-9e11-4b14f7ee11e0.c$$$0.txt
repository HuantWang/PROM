-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_add_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            int result = data + 1;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,52,56,58,63,65,69,71,75,76,80,82,87,88
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
61,62
61,63
73,74
73,75
-----guardedBy-----
63,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_add_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fscanf_add_12_bad()
CWE190_Integer_Overflow__int_fscanf_add_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            int result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(10,13,0)
(18,9,0)
(3,40,0)
(23,7,0)
(25,0,0)
(40,36,0)
(31,20,0)
(26,38,0)
(1,13,0)
(9,40,0)
(6,17,0)
(41,1,0)
(28,38,0)
(7,35,0)
(24,12,0)
(43,22,0)
(11,0,0)
(8,40,0)
(30,32,0)
(32,7,0)
(27,12,0)
(46,13,0)
(29,7,0)
(1,40,0)
(16,9,0)
(32,13,0)
(13,0,0)
(15,37,0)
(37,39,0)
(24,17,0)
(9,38,0)
(21,17,0)
(38,9,0)
(44,1,0)
(2,27,0)
(17,40,0)
(7,32,0)
(20,5,0)
(28,37,0)
(17,13,0)
(27,24,0)
(38,37,0)
(17,24,0)
(45,0,0)
(33,24,0)
(9,13,0)
(34,28,0)
(4,12,0)
(1,41,1)
(21,6,1)
(27,2,1)
(8,14,1)
(31,1,1)
(28,34,1)
(28,38,1)
(9,16,1)
(34,38,1)
(17,13,1)
(30,29,1)
(10,46,1)
(40,3,1)
(1,40,1)
(20,31,1)
(32,13,1)
(32,30,1)
(17,40,1)
(9,13,1)
(23,14,1)
(9,40,1)
(19,20,1)
(41,44,1)
(1,13,1)
(26,42,1)
(33,1,1)
(29,23,1)
(13,10,1)
(38,9,1)
(16,18,1)
(19,27,1)
(42,40,1)
(18,26,1)
(2,24,1)
(17,21,1)
(24,17,1)
(19,28,1)
(44,42,1)
(14,13,1)
(7,32,1)
(6,33,1)
(42,7,1)
(3,8,1)
(27,24,1)
(31,1,2)
(27,1,2)
(7,32,2)
(28,42,2)
(44,42,2)
(1,40,2)
(9,13,2)
(9,40,2)
(33,1,2)
(7,14,2)
(28,38,2)
(38,9,2)
(16,42,2)
(29,14,2)
(23,14,2)
(32,13,2)
(21,1,2)
(24,1,2)
(38,42,2)
(17,13,2)
(34,42,2)
(17,40,2)
(20,1,2)
(1,42,2)
(17,1,2)
(26,42,2)
(2,1,2)
(30,14,2)
(9,42,2)
(8,14,2)
(40,14,2)
(1,13,2)
(32,14,2)
(6,1,2)
(3,14,2)
(18,42,2)
(41,42,2)
(24,17,2)
(27,24,2)
-----------------------------------
(0,)
(1,data < INT_MAX)
(2,result)
(3,2)
(4,result)
(5,)
(6,data)
(7,fscanf(stdin, "%d", &data)
(8,data)
(9,data + 1)
(10,0)
(11,if(globalReturnsTrueOrFalse()
(12,)
(13,data = 0)
(14,globalReturnsTrueOrFalse()
(15,result)
(16,1)
(17,data + 1)
(18,data)
(19,RET)
(20,printLine("data value is too large to perform arithmetic safely.")
(21,1)
(22,)
(23,stdin)
(24,result = data + 1)
(25,data)
(26,result)
(27,printIntLine(result)
(28,printIntLine(result)
(29,"%d")
(30,data)
(31,"data value is too large to perform arithmetic safely.")
(32,&data)
(33,result)
(34,result)
(35,)
(36,)
(37,)
(38,result = data + 1)
(39,)
(40,data = 2)
(41,INT_MAX)
(42,globalReturnsTrueOrFalse()
(43,if (data < INT_MAX)
(44,data)
(45,if(globalReturnsTrueOrFalse()
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^