-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_10_bad()
{
    char data;
    data = ' ';
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,35,39,41,45,47
-----computeFrom-----
12,13
12,14
21,22
21,23
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_10_bad(){    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_10_bad()
CWE190_Integer_Overflow__char_max_square_10_bad
{    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,5,0)
(3,6,0)
(14,6,0)
(21,15,0)
(21,5,0)
(1,15,0)
(22,11,0)
(13,15,0)
(5,11,0)
(19,1,0)
(5,6,0)
(6,20,0)
(1,21,0)
(15,9,0)
(24,10,0)
(12,10,0)
(17,11,0)
(11,10,0)
(7,10,0)
(8,21,0)
(16,5,0)
(5,21,0)
(18,6,1)
(1,19,1)
(3,14,1)
(21,5,1)
(19,21,1)
(14,4,1)
(22,17,1)
(5,6,1)
(8,18,1)
(18,4,1)
(6,3,1)
(11,22,1)
(16,8,1)
(2,18,1)
(2,1,1)
(0,16,1)
(4,11,1)
(1,21,1)
(5,0,1)
(5,11,1)
(16,18,2)
(5,6,2)
(1,18,2)
(1,21,2)
(19,18,2)
(14,4,2)
(8,18,2)
(6,4,2)
(0,18,2)
(21,18,2)
(5,11,2)
(3,4,2)
(21,5,2)
(5,18,2)
-----------------------------------
(0,data)
(1,printHexCharLine(result)
(2,RET)
(3,CHAR_MAX)
(4,globalTrue)
(5,data * data)
(6,data = CHAR_MAX)
(7,if(globalTrue)
(8,result)
(9,)
(10,)
(11,data = ' ')
(12,data)
(13,result)
(14,data)
(15,)
(16,data)
(17,data)
(18,globalTrue)
(19,result)
(20,)
(21,result = data * data)
(22,' ')
(23,data = \' \')
(24,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^