-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,61,65,67,71,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
58,59
58,60
69,70
69,71
-----guardedBy-----
60,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_17_bad()
CWE190_Integer_Overflow__short_max_multiply_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,4,0)
(12,22,0)
(34,17,0)
(12,4,0)
(19,10,0)
(20,31,0)
(5,6,0)
(37,13,0)
(41,12,0)
(13,30,0)
(32,10,0)
(30,13,0)
(30,22,0)
(40,22,0)
(1,31,0)
(26,16,0)
(14,13,0)
(33,22,0)
(36,17,0)
(27,10,0)
(43,30,0)
(3,11,0)
(9,4,0)
(22,18,0)
(42,12,0)
(37,16,0)
(4,31,0)
(30,4,0)
(0,15,0)
(13,16,0)
(29,11,0)
(25,34,0)
(11,17,0)
(2,31,0)
(7,31,0)
(35,31,0)
(24,17,0)
(21,27,0)
(23,37,0)
(39,30,0)
(6,10,0)
(38,6,0)
(38,10,1)
(19,32,1)
(12,41,1)
(4,9,1)
(43,39,1)
(32,11,1)
(29,17,1)
(38,27,1)
(25,22,1)
(33,40,1)
(6,5,1)
(34,17,1)
(28,6,1)
(27,10,1)
(22,33,1)
(41,42,1)
(12,4,1)
(12,22,1)
(40,11,1)
(39,14,1)
(14,12,1)
(9,8,1)
(23,13,1)
(24,36,1)
(29,34,1)
(27,21,1)
(37,13,1)
(3,29,1)
(17,24,1)
(30,4,1)
(13,30,1)
(10,19,1)
(21,12,1)
(6,10,1)
(37,23,1)
(11,3,1)
(34,25,1)
(30,22,1)
(21,37,1)
(30,43,1)
(42,6,1)
(36,4,1)
(11,17,1)
(5,38,1)
(13,12,2)
(25,11,2)
(41,6,2)
(27,10,2)
(21,6,2)
(39,12,2)
(37,13,2)
(40,11,2)
(11,11,2)
(22,11,2)
(37,12,2)
(38,6,2)
(34,17,2)
(23,12,2)
(30,4,2)
(12,6,2)
(6,10,2)
(14,12,2)
(30,22,2)
(42,6,2)
(12,4,2)
(6,6,2)
(34,11,2)
(30,12,2)
(43,12,2)
(12,22,2)
(11,17,2)
(29,11,2)
(3,11,2)
(13,30,2)
(27,6,2)
(33,11,2)
(5,6,2)
-----------------------------------
(0,if(data > 0)
(1,data)
(2,i)
(3,1)
(4,data = 0)
(5,1)
(6,j < 1)
(7,for(i = 0; i < 1; i++)
(8,data)
(9,0)
(10,j = 0)
(11,i < 1)
(12,data > 0)
(13,result = data * 2)
(14,result)
(15,)
(16,)
(17,i = 0)
(18,)
(19,0)
(20,for(j = 0; j < 1; j++)
(21,j)
(22,data = SHRT_MAX)
(23,result)
(24,0)
(25,i)
(26,result)
(27,j++)
(28,RET)
(29,i)
(30,data * 2)
(31,)
(32,j)
(33,SHRT_MAX)
(34,i++)
(35,j)
(36,i)
(37,printIntLine(result)
(38,j)
(39,data)
(40,data)
(41,0)
(42,data)
(43,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^