-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
26,27
30,31
31,32
31,33
32,33
36,37
36,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
41,42
41,43
42,43
42,44
43,44
46,47
46,48
47,48
48,49
48,50
50,51
50,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,29,33,34,35,37,40,44,45,49,51,55,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
22,23
22,24
42,43
42,44
53,54
53,55
-----guardedBy-----
44,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_rand_multiply_15_bad()
CWE190_Integer_Overflow__int_rand_multiply_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(8,6,0)
(3,0,0)
(34,20,0)
(5,25,0)
(23,6,0)
(24,32,0)
(10,6,0)
(37,6,0)
(38,0,0)
(30,25,0)
(25,30,0)
(26,18,0)
(4,7,0)
(22,6,0)
(30,7,0)
(39,3,0)
(31,6,0)
(32,18,0)
(29,35,0)
(13,32,0)
(27,0,0)
(36,10,0)
(14,35,0)
(25,18,0)
(25,3,0)
(1,3,0)
(20,7,0)
(32,3,0)
(3,39,0)
(9,27,0)
(28,35,0)
(21,25,0)
(18,35,0)
(17,18,0)
(20,30,0)
(12,0,0)
(16,0,0)
(11,30,0)
(15,0,0)
(3,39,1)
(38,3,1)
(8,10,1)
(9,33,1)
(32,3,1)
(30,25,1)
(31,20,1)
(25,21,1)
(12,27,1)
(10,36,1)
(32,18,1)
(33,18,1)
(26,17,1)
(34,30,1)
(27,9,1)
(25,3,1)
(19,8,1)
(2,38,1)
(5,11,1)
(39,1,1)
(20,30,1)
(2,12,1)
(1,33,1)
(18,26,1)
(31,32,1)
(32,13,1)
(20,34,1)
(36,2,1)
(19,31,1)
(24,2,1)
(25,18,1)
(13,24,1)
(21,5,1)
(11,32,1)
(20,30,2)
(32,18,2)
(32,3,2)
(27,33,2)
(20,32,2)
(25,32,2)
(1,33,2)
(31,2,2)
(39,33,2)
(11,32,2)
(25,18,2)
(3,33,2)
(9,33,2)
(38,33,2)
(32,2,2)
(21,32,2)
(12,33,2)
(24,2,2)
(30,25,2)
(30,32,2)
(13,2,2)
(25,3,2)
(8,2,2)
(34,32,2)
(3,39,2)
(10,2,2)
(36,2,2)
(5,32,2)
-----------------------------------
(0,)
(1,data)
(2,7)
(3,data = RAND32()
(4,result)
(5,data)
(6,)
(7,)
(8,break;)
(9,"Benign, fixed string")
(10,printLine("Benign, fixed string")
(11,result)
(12,break;)
(13,0)
(14,switch(6)
(15,default:)
(16,case 6:)
(17,data)
(18,data = 0)
(19,RET)
(20,printIntLine(result)
(21,2)
(22,default:)
(23,case 7:)
(24,data)
(25,data * 2)
(26,0)
(27,printLine("Benign, fixed string")
(28,switch(7)
(29,data)
(30,result = data * 2)
(31,break;)
(32,data > 0)
(33,6)
(34,result)
(35,)
(36,"Benign, fixed string")
(37,if(data > 0)
(38,break;)
(39,RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^