-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_09_bad()
{
    int64_t data;
    data = 0LL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    if(GLOBAL_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
27,28
30,31
31,32
33,34
33,35
34,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,9,11,15,16,19,24,28,29,32,35,40,41,46,48,52,53,57,59
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
50,51
50,52
-----guardedBy-----
40,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_09_bad(){    int64_t data;    data = 0LL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_09_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_09_bad
{    int64_t data;    data = 0LL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(8,23,0)
(14,24,0)
(19,22,0)
(24,14,0)
(22,24,0)
(1,16,0)
(24,22,0)
(26,16,0)
(22,9,0)
(6,12,0)
(27,20,0)
(11,24,0)
(16,7,0)
(2,16,0)
(5,23,0)
(21,1,0)
(24,11,0)
(1,22,0)
(12,22,0)
(16,1,0)
(15,23,0)
(13,1,0)
(26,7,0)
(0,7,0)
(25,23,0)
(4,12,0)
(18,26,0)
(26,16,1)
(1,22,1)
(24,14,1)
(26,18,1)
(10,26,1)
(24,11,1)
(2,12,1)
(6,3,1)
(3,17,1)
(12,22,1)
(14,19,1)
(4,6,1)
(13,21,1)
(10,3,1)
(1,13,1)
(3,22,1)
(21,2,1)
(10,12,1)
(22,24,1)
(16,1,1)
(17,25,1)
(19,17,1)
(12,4,1)
(18,16,1)
(21,12,2)
(24,17,2)
(24,14,2)
(26,16,2)
(12,3,2)
(22,17,2)
(26,12,2)
(16,12,2)
(6,3,2)
(12,22,2)
(22,24,2)
(24,11,2)
(18,12,2)
(2,12,2)
(14,17,2)
(16,1,2)
(1,12,2)
(4,3,2)
(13,12,2)
(19,17,2)
(1,22,2)
-----------------------------------
(0,result)
(1,data * 2)
(2,result)
(3,GLOBAL_CONST_TRUE)
(4,0)
(5,if(GLOBAL_CONST_TRUE)
(6,data)
(7,)
(8,if(GLOBAL_CONST_TRUE)
(9,)
(10,RET)
(11,int64_t)
(12,data > 0)
(13,2)
(14,RAND64()
(15,data)
(16,result = data * 2)
(17,GLOBAL_CONST_TRUE)
(18,result)
(19,data)
(20,)
(21,data)
(22,data = (int64_t)
(23,)
(24,(int64_t)
(25,L)
(26,printLongLongLine(result)
(27,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^