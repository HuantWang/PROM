-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_add_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
60,61
60,62
62,63
62,64
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,52,57,58,59,61,66,68,72,73,77,79,80
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
70,71
70,72
-----guardedBy-----
36,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_add_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_fgets_add_16_bad()
CWE190_Integer_Overflow__int_fgets_add_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
while(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(9,35,0)
(38,35,0)
(25,33,0)
(40,22,0)
(26,22,0)
(30,11,0)
(41,25,0)
(23,31,0)
(2,33,0)
(3,35,0)
(5,0,0)
(5,11,0)
(14,0,0)
(25,34,0)
(17,31,0)
(12,39,0)
(32,26,0)
(5,34,0)
(0,31,0)
(27,31,0)
(35,3,0)
(34,33,0)
(20,34,0)
(35,32,0)
(6,5,0)
(18,26,0)
(15,32,0)
(13,30,0)
(10,12,0)
(4,11,0)
(33,28,0)
(8,5,0)
(34,5,0)
(36,3,0)
(29,0,0)
(42,28,0)
(11,30,0)
(7,32,0)
(30,32,0)
(37,26,0)
(21,35,0)
(11,1,0)
(20,19,1)
(35,32,1)
(10,3,1)
(19,40,1)
(40,11,1)
(21,32,1)
(34,5,1)
(13,4,1)
(30,13,1)
(8,6,1)
(15,16,1)
(25,34,1)
(30,32,1)
(3,36,1)
(11,30,1)
(16,0,1)
(19,16,1)
(4,3,1)
(42,25,1)
(24,42,1)
(38,9,1)
(5,0,1)
(41,34,1)
(25,41,1)
(35,38,1)
(6,20,1)
(5,11,1)
(32,7,1)
(0,14,1)
(3,35,1)
(12,10,1)
(9,21,1)
(40,12,1)
(24,19,1)
(5,8,1)
(7,15,1)
(36,35,1)
(14,29,1)
(9,16,2)
(12,3,2)
(25,34,2)
(25,19,2)
(5,19,2)
(3,16,2)
(4,3,2)
(15,16,2)
(35,16,2)
(11,30,2)
(42,19,2)
(35,32,2)
(30,32,2)
(5,0,2)
(30,3,2)
(3,35,2)
(34,5,2)
(11,3,2)
(41,19,2)
(8,19,2)
(36,16,2)
(21,16,2)
(40,16,2)
(32,16,2)
(13,3,2)
(20,19,2)
(5,11,2)
(38,16,2)
(10,3,2)
(7,16,2)
(34,19,2)
(6,19,2)
-----------------------------------
(0,data = 0)
(1,)
(2,result)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,data)
(5,data + 1)
(6,data)
(7,"")
(8,1)
(9,CHAR_ARRAY_SIZE)
(10,"fgets()
(11,data = atoi(inputBuffer)
(12,printLine("fgets()
(13,inputBuffer)
(14,0)
(15,inputBuffer)
(16,1)
(17,while(1)
(18,inputBuffer)
(19,1)
(20,result)
(21,inputBuffer)
(22,)
(23,data)
(24,RET)
(25,printIntLine(result)
(26,)
(27,while(1)
(28,)
(29,data)
(30,atoi(inputBuffer)
(31,)
(32,inputBuffer[CHAR_ARRAY_SIZE] = "")
(33,)
(34,result = data + 1)
(35,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,NULL)
(37,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(38,stdin)
(39,)
(40,break;)
(41,result)
(42,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^