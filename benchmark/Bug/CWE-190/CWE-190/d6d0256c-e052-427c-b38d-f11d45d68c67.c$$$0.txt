-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_01_bad()
{
    unsigned int data;
    data = 0;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = UINT_MAX;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
        unsigned int result = data * 2;
        printUnsignedLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
23,24
23,25
24,25
27,28
27,29
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
35,36
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,8,10,14,15,19,21,25,26,30,32,36,37,41,43
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
25,36
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_01_bad(){    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_01_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_01_bad
{    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(17,4,0)
(4,19,0)
(13,5,0)
(18,8,0)
(8,2,0)
(20,5,0)
(19,2,0)
(20,11,0)
(3,20,0)
(1,2,0)
(11,20,0)
(7,11,0)
(12,2,0)
(14,4,0)
(10,11,0)
(15,19,0)
(16,5,0)
(0,16,0)
(21,8,0)
(9,19,0)
(11,19,0)
(16,20,0)
(7,3,1)
(17,14,1)
(9,8,1)
(6,4,1)
(16,0,1)
(0,20,1)
(11,19,1)
(14,19,1)
(8,21,1)
(4,19,1)
(4,17,1)
(15,9,1)
(11,10,1)
(21,18,1)
(3,4,1)
(10,7,1)
(20,11,1)
(6,16,1)
(16,20,1)
(19,15,1)
(20,11,2)
(10,4,2)
(4,19,2)
(11,19,2)
(11,4,2)
(3,4,2)
(16,4,2)
(20,4,2)
(7,4,2)
(0,4,2)
(16,20,2)
-----------------------------------
(0,result)
(1,if(data > 0)
(2,)
(3,result)
(4,data > 0)
(5,)
(6,RET)
(7,data)
(8,data = 0)
(9,data)
(10,2)
(11,data * 2)
(12,data)
(13,result)
(14,data)
(15,UINT_MAX)
(16,printUnsignedLine(result)
(17,0)
(18,data)
(19,data = UINT_MAX)
(20,result = data * 2)
(21,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^