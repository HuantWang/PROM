-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_postinc_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            data++;
            short result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_postinc_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_fscanf_postinc_12_bad()
CWE190_Integer_Overflow__short_fscanf_postinc_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(38,24,0)
(5,11,0)
(34,42,0)
(45,7,0)
(2,39,0)
(46,41,0)
(31,32,0)
(35,7,0)
(33,2,0)
(9,14,0)
(27,14,0)
(44,27,0)
(27,39,0)
(36,41,0)
(18,39,0)
(11,39,0)
(22,36,0)
(9,7,0)
(8,35,0)
(42,43,0)
(26,39,0)
(2,14,0)
(1,9,0)
(41,3,0)
(23,12,0)
(21,9,0)
(28,11,0)
(2,41,0)
(10,14,0)
(27,41,0)
(11,14,0)
(6,4,0)
(15,2,0)
(32,19,0)
(25,12,0)
(32,4,0)
(13,40,0)
(14,20,0)
(36,2,0)
(0,12,0)
(4,39,0)
(35,14,0)
(30,32,0)
(35,39,0)
(24,9,0)
(9,39,0)
(4,32,0)
(39,12,0)
(24,7,0)
(16,14,0)
(14,10,1)
(38,9,1)
(4,39,1)
(11,39,1)
(27,14,1)
(11,5,1)
(24,38,1)
(33,15,1)
(34,11,1)
(31,17,1)
(29,32,1)
(4,6,1)
(18,26,1)
(36,2,1)
(21,35,1)
(1,21,1)
(27,39,1)
(16,17,1)
(2,39,1)
(30,31,1)
(15,27,1)
(29,14,1)
(39,18,1)
(36,22,1)
(2,14,1)
(35,14,1)
(8,11,1)
(5,28,1)
(27,44,1)
(11,14,1)
(6,30,1)
(35,39,1)
(9,39,1)
(44,29,1)
(24,9,1)
(35,8,1)
(10,16,1)
(28,29,1)
(42,34,1)
(22,2,1)
(17,39,1)
(9,14,1)
(9,1,1)
(37,36,1)
(32,4,1)
(37,42,1)
(2,33,1)
(37,24,1)
(2,14,2)
(10,17,2)
(28,29,2)
(31,17,2)
(9,11,2)
(38,11,2)
(24,9,2)
(35,11,2)
(6,17,2)
(32,4,2)
(4,17,2)
(32,17,2)
(34,11,2)
(11,39,2)
(14,17,2)
(33,29,2)
(5,29,2)
(1,11,2)
(44,29,2)
(36,2,2)
(27,39,2)
(42,11,2)
(30,17,2)
(21,11,2)
(15,29,2)
(11,29,2)
(16,17,2)
(9,14,2)
(24,11,2)
(22,29,2)
(35,39,2)
(8,11,2)
(36,29,2)
(4,39,2)
(11,14,2)
(35,14,2)
(2,29,2)
(27,29,2)
(27,14,2)
(2,39,2)
(9,39,2)
-----------------------------------
(0,data)
(1,data)
(2,result = data)
(3,)
(4,&data)
(5,SHRT_MAX)
(6,data)
(7,)
(8,data)
(9,result = data)
(10,2)
(11,data < SHRT_MAX)
(12,)
(13,if (data < SHRT_MAX)
(14,data = 2)
(15,result)
(16,data)
(17,globalReturnsTrueOrFalse()
(18,0)
(19,)
(20,)
(21,result)
(22,result)
(23,if(globalReturnsTrueOrFalse()
(24,printIntLine(result)
(25,if(globalReturnsTrueOrFalse()
(26,data)
(27,data++)
(28,data)
(29,globalReturnsTrueOrFalse()
(30,"%hd")
(31,stdin)
(32,fscanf (stdin, "%hd", &data)
(33,data)
(34,"data value is too large to perform arithmetic safely.")
(35,data++)
(36,printIntLine(result)
(37,RET)
(38,result)
(39,data = 0)
(40,)
(41,)
(42,printLine("data value is too large to perform arithmetic safely.")
(43,)
(44,data)
(45,result)
(46,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^