-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_add_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
75,76
75,77
77,78
77,79
79,80
80,81
80,82
81,82
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,78,82,83,87,89
-----computeFrom-----
32,33
32,34
57,58
57,59
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_add_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_add_32_bad()
CWE190_Integer_Overflow__short_fscanf_add_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(2,1,0)
(34,28,0)
(29,3,0)
(19,22,0)
(11,17,0)
(44,12,0)
(32,41,0)
(20,30,0)
(15,33,0)
(43,36,0)
(13,40,0)
(6,30,0)
(39,17,0)
(22,17,0)
(25,41,0)
(26,34,0)
(31,34,0)
(35,32,0)
(12,33,0)
(3,28,0)
(31,41,0)
(24,38,0)
(8,17,0)
(23,14,0)
(40,36,0)
(10,14,0)
(14,8,0)
(1,38,0)
(33,17,0)
(3,1,0)
(42,13,0)
(45,33,0)
(1,17,0)
(18,40,0)
(13,8,0)
(40,13,0)
(34,31,0)
(12,36,0)
(28,3,0)
(38,1,0)
(33,45,0)
(14,36,0)
(5,10,0)
(41,22,0)
(4,45,0)
(28,22,0)
(36,12,0)
(7,13,0)
(37,34,0)
(27,31,0)
(0,28,0)
(32,31,0)
(10,33,0)
(9,8,0)
(30,17,0)
(36,8,0)
(16,17,0)
(12,44,1)
(3,1,1)
(10,33,1)
(12,33,1)
(0,14,1)
(20,1,1)
(37,27,1)
(14,23,1)
(24,2,1)
(23,10,1)
(35,31,1)
(7,36,1)
(14,36,1)
(26,37,1)
(1,38,1)
(34,26,1)
(32,31,1)
(32,35,1)
(45,4,1)
(28,3,1)
(40,36,1)
(18,42,1)
(2,33,1)
(30,6,1)
(27,28,1)
(34,28,1)
(29,0,1)
(43,30,1)
(36,12,1)
(40,18,1)
(13,40,1)
(10,5,1)
(31,34,1)
(5,13,1)
(38,24,1)
(33,45,1)
(21,32,1)
(3,29,1)
(42,7,1)
(4,15,1)
(44,43,1)
(6,20,1)
(40,36,2)
(1,38,2)
(10,33,2)
(33,45,2)
(32,31,2)
(34,28,2)
(12,33,2)
(28,3,2)
(13,40,2)
(36,12,2)
(31,34,2)
(3,1,2)
(14,36,2)
-----------------------------------
(0,data)
(1,*dataPtr2 = &data)
(2,dataPtr2)
(3,*dataPtr2)
(4,data)
(5,dataPtr1)
(6,0)
(7,stdin)
(8,)
(9,data)
(10,*dataPtr1)
(11,dataPtr2)
(12,*dataPtr1)
(13,fscanf (stdin, "%hd", &data)
(14,*dataPtr1 = data)
(15,dataPtr1)
(16,data)
(17,)
(18,data)
(19,data)
(20,data)
(21,RET)
(22,)
(23,data)
(24,data)
(25,result)
(26,1)
(27,result)
(28,data = *dataPtr2)
(29,dataPtr2)
(30,data = 0)
(31,result = data + 1)
(32,printIntLine(result)
(33,*dataPtr1 = &data)
(34,data + 1)
(35,result)
(36,data = *dataPtr1)
(37,data)
(38,&data)
(39,dataPtr1)
(40,&data)
(41,)
(42,"%hd")
(43,data)
(44,dataPtr1)
(45,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^