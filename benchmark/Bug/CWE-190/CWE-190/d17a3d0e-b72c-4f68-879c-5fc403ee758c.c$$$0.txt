-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_14_bad()
{
    short data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_14_bad(){    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_14_bad()
CWE190_Integer_Overflow__short_max_square_14_bad
{    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(11,25,0)
(12,15,0)
(21,0,0)
(1,3,0)
(26,25,0)
(5,10,0)
(27,3,0)
(18,5,0)
(10,4,0)
(5,0,0)
(7,8,0)
(2,5,0)
(19,16,0)
(8,25,0)
(0,5,0)
(0,8,0)
(23,25,0)
(15,17,0)
(24,0,0)
(9,10,0)
(2,10,0)
(20,15,0)
(0,15,0)
(14,2,0)
(6,16,0)
(13,8,0)
(6,15,1)
(22,2,1)
(1,27,1)
(5,0,1)
(13,7,1)
(21,18,1)
(3,1,1)
(6,3,1)
(22,16,1)
(16,19,1)
(12,3,1)
(19,6,1)
(2,14,1)
(24,21,1)
(0,8,1)
(20,12,1)
(2,5,1)
(0,24,1)
(18,16,1)
(14,5,1)
(15,20,1)
(0,15,1)
(8,13,1)
(27,8,1)
(0,15,2)
(20,3,2)
(15,3,2)
(5,0,2)
(2,16,2)
(21,16,2)
(18,16,2)
(2,5,2)
(0,16,2)
(5,16,2)
(24,16,2)
(0,8,2)
(14,16,2)
(12,3,2)
-----------------------------------
(0,data * data)
(1,5)
(2,printIntLine(result)
(3,globalFive==5)
(4,)
(5,result = data * data)
(6,globalFive)
(7,data)
(8,data = 0)
(9,result)
(10,)
(11,data)
(12,data)
(13,0)
(14,result)
(15,data = SHRT_MAX)
(16,globalFive==5)
(17,)
(18,result)
(19,5)
(20,SHRT_MAX)
(21,data)
(22,RET)
(23,if(globalFive==5)
(24,data)
(25,)
(26,if(globalFive==5)
(27,globalFive)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^