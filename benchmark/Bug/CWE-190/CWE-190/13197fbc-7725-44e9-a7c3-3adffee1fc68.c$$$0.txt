-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_postinc_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
57,60
58,59
59,60
60,61
62,63
63,64
63,65
65,66
65,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,61,64,66,69,73,75
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_postinc_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_postinc_17_bad()
CWE190_Integer_Overflow__short_max_postinc_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(29,11,0)
(18,12,0)
(18,1,0)
(7,37,0)
(37,23,0)
(4,30,0)
(25,23,0)
(39,12,0)
(24,39,0)
(3,22,0)
(38,28,0)
(0,30,0)
(8,22,0)
(15,28,0)
(21,30,0)
(11,23,0)
(18,30,0)
(16,8,0)
(26,3,0)
(5,1,0)
(31,28,0)
(13,18,0)
(14,1,0)
(21,1,0)
(12,36,0)
(33,28,0)
(39,18,0)
(17,3,0)
(2,37,0)
(21,12,0)
(19,23,0)
(9,21,0)
(6,22,0)
(34,12,0)
(35,22,0)
(20,18,0)
(10,28,0)
(30,28,0)
(1,32,0)
(39,18,1)
(21,30,1)
(13,20,1)
(30,4,1)
(7,23,1)
(1,14,1)
(37,23,1)
(21,9,1)
(25,3,1)
(5,3,1)
(9,37,1)
(11,23,1)
(8,22,1)
(19,25,1)
(39,24,1)
(6,35,1)
(22,6,1)
(17,22,1)
(17,8,1)
(7,11,1)
(27,37,1)
(23,19,1)
(35,30,1)
(20,21,1)
(11,29,1)
(16,1,1)
(4,0,1)
(26,17,1)
(29,39,1)
(14,5,1)
(18,1,1)
(2,7,1)
(18,30,1)
(21,1,1)
(3,22,1)
(8,16,1)
(24,18,1)
(37,2,1)
(18,13,1)
(3,26,1)
(8,22,2)
(17,3,2)
(9,37,2)
(37,23,2)
(39,18,2)
(7,37,2)
(18,37,2)
(24,37,2)
(21,37,2)
(18,1,2)
(13,37,2)
(21,30,2)
(18,30,2)
(3,3,2)
(26,3,2)
(16,3,2)
(3,22,2)
(39,37,2)
(29,37,2)
(11,23,2)
(14,3,2)
(21,1,2)
(1,3,2)
(11,37,2)
(2,37,2)
(5,3,2)
(37,37,2)
(20,37,2)
(8,3,2)
-----------------------------------
(0,data)
(1,data = SHRT_MAX)
(2,1)
(3,i < 1)
(4,0)
(5,data)
(6,0)
(7,j)
(8,i++)
(9,data)
(10,j)
(11,j++)
(12,)
(13,data)
(14,SHRT_MAX)
(15,data)
(16,i)
(17,i)
(18,result = data)
(19,0)
(20,result)
(21,data++)
(22,i = 0)
(23,j = 0)
(24,result)
(25,j)
(26,1)
(27,RET)
(28,)
(29,j)
(30,data = 0)
(31,i)
(32,)
(33,for(i = 0; i < 1; i++)
(34,result)
(35,i)
(36,)
(37,j < 1)
(38,for(j = 0; j < 1; j++)
(39,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^