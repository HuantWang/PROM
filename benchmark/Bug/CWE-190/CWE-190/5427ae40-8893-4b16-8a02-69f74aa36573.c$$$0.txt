-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_add_63b_badSink(short * dataPtr)
{
    short data = *dataPtr;
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        short result = data + 1;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
22,23
22,24
24,25
24,26
26,27
27,28
27,29
28,29
31,32
32,33
32,34
33,34
35,36
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,29,30,34,36
-----computeFrom-----
27,28
27,29
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_add_63b_badSink(short * dataPtr){    short data = *dataPtr;    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_max_add_63b_badSink(short * dataPtr)
CWE190_Integer_Overflow__short_max_add_63b_badSink
short * dataPtr
short
* dataPtr
*
dataPtr
{    short data = *dataPtr;    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }}
short data = *dataPtr;
short data = *dataPtr;
short
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,14,0)
(9,16,0)
(15,11,0)
(0,15,0)
(8,15,0)
(6,2,0)
(10,2,0)
(16,7,0)
(11,16,0)
(1,6,0)
(14,12,0)
(5,12,0)
(15,2,0)
(3,11,0)
(2,14,0)
(2,15,0)
(6,14,0)
(16,11,0)
(11,12,0)
(9,3,1)
(1,2,1)
(8,10,1)
(4,6,1)
(16,7,1)
(6,1,1)
(15,11,1)
(10,11,1)
(11,16,1)
(2,15,1)
(15,0,1)
(0,8,1)
(16,9,1)
(6,2,1)
(2,15,2)
(6,2,2)
(16,7,2)
(11,16,2)
(15,11,2)
-----------------------------------
(0,1)
(1,result)
(2,result = data + 1)
(3,data)
(4,RET)
(5,data)
(6,printIntLine(result)
(7,short * dataPtr)
(8,data)
(9,dataPtr)
(10,result)
(11,data = *dataPtr)
(12,)
(13,result)
(14,)
(15,data + 1)
(16,*dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^