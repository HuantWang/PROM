-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_preinc_44_bad()
{
    int data;
    /* define a function pointer */
    void (*funcPtr) (int) = badSink;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
34,35
34,36
34,37
36,37
37,38
39,40
41,42
41,43
41,44
42,43
42,44
43,44
43,45
43,46
43,47
44,45
46,47
48,49
50,51
52,53
54,55
55,56
56,57
56,58
57,58
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,35,38,40,45,47,49,51,53,58,61,63,68,69,73,75
-----computeFrom-----
26,27
26,28
42,43
42,44
56,57
56,58
-----guardedBy-----
47,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_preinc_44_bad(){    int data;    /* define a function pointer */    void (*funcPtr) (int) = badSink;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* use the function pointer */    funcPtr(data);}
void
CWE190_Integer_Overflow__int_fgets_preinc_44_bad()
CWE190_Integer_Overflow__int_fgets_preinc_44_bad
{    int data;    /* define a function pointer */    void (*funcPtr) (int) = badSink;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* use the function pointer */    funcPtr(data);}
int data;
int data;
int
data
data
void (*funcPtr) (int) = badSink;
void (*funcPtr) (int) = badSink;
void
(*funcPtr) (int) = badSink
*funcPtr
*
funcPtr
int
int


= badSink
badSink
badSink
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(17,8,0)
(22,8,0)
(31,20,0)
(11,7,0)
(3,26,0)
(4,22,0)
(27,15,0)
(23,27,0)
(1,12,0)
(15,20,0)
(30,18,0)
(18,22,0)
(18,8,0)
(2,8,0)
(12,6,0)
(18,27,0)
(6,12,0)
(19,8,0)
(20,17,0)
(5,26,0)
(26,8,0)
(28,22,0)
(29,17,0)
(12,20,0)
(15,27,0)
(25,15,0)
(24,12,0)
(16,11,0)
(27,21,0)
(9,6,0)
(13,20,0)
(10,17,0)
(14,12,0)
(12,20,1)
(6,9,1)
(27,15,1)
(18,22,1)
(24,14,1)
(11,16,1)
(31,22,1)
(26,3,1)
(14,20,1)
(1,24,1)
(25,23,1)
(16,6,1)
(12,1,1)
(4,28,1)
(6,12,1)
(13,31,1)
(30,11,1)
(20,13,1)
(18,30,1)
(0,18,1)
(15,25,1)
(9,12,1)
(30,27,1)
(3,5,1)
(22,4,1)
(18,27,1)
(15,20,1)
(23,6,1)
(28,26,1)
(11,6,2)
(23,6,2)
(16,6,2)
(6,12,2)
(27,6,2)
(18,27,2)
(25,6,2)
(12,20,2)
(18,22,2)
(15,6,2)
(15,20,2)
(27,15,2)
-----------------------------------
(0,RET)
(1,stdin)
(2,funcPtr)
(3,badSink)
(4,0)
(5,funcPtr)
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,)
(8,)
(9,NULL)
(10,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,printLine("fgets()
(12,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,"")
(14,inputBuffer)
(15,atoi(inputBuffer)
(16,"fgets()
(17,)
(18,funcPtr(data)
(19,data)
(20,inputBuffer[CHAR_ARRAY_SIZE] = "")
(21,)
(22,data = 0)
(23,data)
(24,CHAR_ARRAY_SIZE)
(25,inputBuffer)
(26,(*funcPtr)
(27,data = atoi(inputBuffer)
(28,data)
(29,inputBuffer)
(30,data)
(31,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^