-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_42_bad()
{
    char data;
    data = ' ';
    data = badSource(data);
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
27,28
27,29
29,30
29,31
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,30,34,36,40,42
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_42_bad(){    char data;    data = ' ';    data = badSource(data);    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_square_42_bad()
CWE190_Integer_Overflow__char_max_square_42_bad
{    char data;    data = ' ';    data = badSource(data);    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(10,2,0)
(1,11,0)
(2,11,0)
(3,10,0)
(7,19,0)
(5,19,0)
(7,10,0)
(12,7,0)
(14,2,0)
(18,14,0)
(19,6,0)
(4,1,0)
(6,19,0)
(14,10,0)
(6,1,0)
(15,6,0)
(10,7,0)
(19,11,0)
(13,1,0)
(8,11,0)
(9,2,0)
(16,7,0)
(14,18,1)
(19,6,1)
(15,5,1)
(4,13,1)
(5,1,1)
(0,14,1)
(14,10,1)
(12,3,1)
(10,7,1)
(7,19,1)
(3,19,1)
(18,10,1)
(6,15,1)
(7,16,1)
(6,1,1)
(1,4,1)
(16,12,1)
(7,19,2)
(14,10,2)
(10,7,2)
(19,6,2)
(6,1,2)
-----------------------------------
(0,RET)
(1,data = ' ')
(2,)
(3,result)
(4,' ')
(5,data)
(6,badSource(data)
(7,data * data)
(8,data)
(9,result)
(10,result = data * data)
(11,)
(12,data)
(13,data)
(14,printHexCharLine(result)
(15,data)
(16,data)
(17,data = \' \')
(18,result)
(19,data = badSource(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^