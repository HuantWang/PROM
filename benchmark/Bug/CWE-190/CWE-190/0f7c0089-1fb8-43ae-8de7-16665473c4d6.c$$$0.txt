-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
30,31
31,32
31,33
32,33
36,37
36,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
41,42
41,43
42,43
42,44
43,44
46,47
46,48
47,48
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
66,67
67,68
67,69
68,69
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,28,29,33,34,35,37,40,44,45,50,52,56,57,61,63,64,65,69,70,71
-----computeFrom-----
13,14
13,15
23,24
23,25
42,43
42,44
54,55
54,56
-----guardedBy-----
44,56
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_15_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(25,4,0)
(17,16,0)
(9,26,0)
(13,5,0)
(3,5,0)
(8,23,0)
(33,1,0)
(31,5,0)
(23,5,0)
(32,37,0)
(29,27,0)
(24,1,0)
(37,16,0)
(34,17,0)
(7,5,0)
(2,37,0)
(37,2,0)
(22,2,0)
(36,16,0)
(2,4,0)
(11,2,0)
(1,4,0)
(21,27,0)
(17,37,0)
(30,5,0)
(18,27,0)
(6,26,0)
(0,27,0)
(35,0,0)
(15,26,0)
(12,4,0)
(4,27,0)
(19,26,0)
(14,27,0)
(17,34,1)
(3,23,1)
(28,14,1)
(12,25,1)
(1,4,1)
(33,28,1)
(35,10,1)
(11,32,1)
(24,33,1)
(20,3,1)
(2,22,1)
(2,4,1)
(20,31,1)
(31,1,1)
(28,21,1)
(34,37,1)
(1,24,1)
(31,17,1)
(37,2,1)
(8,28,1)
(17,37,1)
(4,12,1)
(21,0,1)
(0,35,1)
(10,15,1)
(14,4,1)
(32,1,1)
(23,8,1)
(22,11,1)
(25,10,1)
(4,10,2)
(24,28,2)
(2,4,2)
(17,1,2)
(1,28,2)
(11,1,2)
(31,28,2)
(0,10,2)
(14,10,2)
(35,10,2)
(17,37,2)
(21,10,2)
(2,1,2)
(34,1,2)
(1,4,2)
(25,10,2)
(37,1,2)
(32,1,2)
(22,1,2)
(37,2,2)
(33,28,2)
(8,28,2)
(3,28,2)
(12,10,2)
(23,28,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,data > 0)
(2,data * 2)
(3,break;)
(4,data = LLONG_MAX)
(5,)
(6,data)
(7,if(data > 0)
(8,"Benign, fixed string")
(9,switch(7)
(10,6)
(11,data)
(12,LLONG_MAX)
(13,default:)
(14,break;)
(15,L)
(16,)
(17,printLongLongLine(result)
(18,case 6:)
(19,switch(6)
(20,RET)
(21,break;)
(22,2)
(23,printLine("Benign, fixed string")
(24,0)
(25,data)
(26,)
(27,)
(28,7)
(29,default:)
(30,case 7:)
(31,break;)
(32,result)
(33,data)
(34,result)
(35,"Benign, fixed string")
(36,result)
(37,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^