-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_09_bad()
{
    short data;
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(GLOBAL_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_09_bad(){    short data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_09_bad()
CWE190_Integer_Overflow__short_max_multiply_09_bad
{    short data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,7,0)
(7,10,0)
(18,7,0)
(27,25,0)
(17,25,0)
(13,17,0)
(7,18,0)
(26,17,0)
(1,18,0)
(18,24,0)
(2,25,0)
(14,10,0)
(16,13,0)
(5,13,0)
(19,18,0)
(0,1,0)
(15,17,0)
(10,4,0)
(7,17,0)
(1,24,0)
(13,10,0)
(3,25,0)
(23,24,0)
(22,7,0)
(9,10,0)
(20,11,0)
(6,1,1)
(13,17,1)
(6,21,1)
(26,15,1)
(14,9,1)
(22,19,1)
(7,17,1)
(0,18,1)
(5,21,1)
(21,8,1)
(17,26,1)
(18,7,1)
(19,13,1)
(1,0,1)
(13,10,1)
(13,16,1)
(7,10,1)
(1,18,1)
(6,13,1)
(7,12,1)
(21,10,1)
(8,17,1)
(12,22,1)
(10,14,1)
(16,5,1)
(9,8,1)
(22,13,2)
(13,21,2)
(18,7,2)
(0,13,2)
(12,13,2)
(13,17,2)
(1,18,2)
(10,8,2)
(5,21,2)
(9,8,2)
(19,13,2)
(7,17,2)
(16,21,2)
(14,8,2)
(13,10,2)
(18,13,2)
(7,13,2)
(7,10,2)
(1,13,2)
-----------------------------------
(0,result)
(1,printIntLine(result)
(2,if(GLOBAL_CONST_TRUE)
(3,data)
(4,)
(5,data)
(6,RET)
(7,data * 2)
(8,GLOBAL_CONST_TRUE)
(9,data)
(10,data = SHRT_MAX)
(11,)
(12,2)
(13,data > 0)
(14,SHRT_MAX)
(15,data)
(16,0)
(17,data = 0)
(18,result = data * 2)
(19,result)
(20,if(data > 0)
(21,GLOBAL_CONST_TRUE)
(22,data)
(23,result)
(24,)
(25,)
(26,0)
(27,if(GLOBAL_CONST_TRUE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^