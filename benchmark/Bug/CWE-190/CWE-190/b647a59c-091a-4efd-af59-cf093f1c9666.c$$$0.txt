-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))
        {
            int result = data * data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
71,73
72,73
72,74
75,76
75,77
76,77
78,79
78,80
79,80
79,81
82,83
84,85
84,86
85,86
86,87
86,88
88,89
88,90
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
-----nextToken-----
2,4,8,10,14,15,19,24,27,32,33,37,42,44,48,50,54,56,62,64,68,70,73,74,77,80,81,83,87,89,93,95,99,101,106,107
-----computeFrom-----
12,13
12,14
22,23
22,24
30,31
30,32
46,47
46,48
59,60
59,61
60,61
60,62
65,66
65,67
91,92
91,93
-----guardedBy-----
70,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_rand_square_12_bad()
CWE190_Integer_Overflow__int_rand_square_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX)
data > INT_MIN
data
data
INT_MIN
INT_MIN
abs(data) < (long)sqrt((double)INT_MAX)
abs(data)
abs
abs
data
data
(long)sqrt((double)INT_MAX)
long
long

sqrt((double)INT_MAX)
sqrt
sqrt
(double)INT_MAX
double
double

INT_MAX
INT_MAX
{            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(51,32,0)
(40,47,0)
(37,1,0)
(17,36,0)
(14,34,0)
(30,17,0)
(45,36,0)
(52,49,0)
(48,47,0)
(19,28,0)
(17,49,0)
(36,46,0)
(44,26,0)
(41,39,0)
(33,2,0)
(22,49,0)
(13,35,0)
(47,40,0)
(38,17,0)
(31,36,0)
(0,1,0)
(4,2,0)
(14,27,0)
(40,34,0)
(18,28,0)
(42,20,0)
(7,33,0)
(17,39,0)
(47,22,0)
(1,36,0)
(45,49,0)
(44,39,0)
(39,26,0)
(25,11,0)
(1,48,0)
(45,33,0)
(33,45,0)
(23,22,0)
(16,28,0)
(34,14,0)
(22,47,0)
(12,45,0)
(20,28,0)
(36,31,0)
(53,26,0)
(21,45,0)
(49,43,0)
(47,48,0)
(29,20,0)
(40,50,0)
(24,36,0)
(35,2,0)
(2,5,0)
(22,36,0)
(8,25,0)
(1,49,0)
(39,17,0)
(34,40,0)
(35,33,0)
(3,44,0)
(48,1,0)
(15,14,0)
(50,40,0)
(27,14,0)
(9,49,0)
(48,1,1)
(14,27,1)
(1,36,1)
(17,49,1)
(9,52,1)
(54,35,1)
(8,48,1)
(52,6,1)
(3,39,1)
(23,1,1)
(37,0,1)
(38,41,1)
(24,6,1)
(17,36,1)
(47,40,1)
(6,20,1)
(34,14,1)
(22,49,1)
(30,38,1)
(54,25,1)
(17,30,1)
(10,49,1)
(14,15,1)
(36,31,1)
(25,8,1)
(39,17,1)
(35,13,1)
(40,34,1)
(45,21,1)
(42,29,1)
(0,10,1)
(7,10,1)
(21,12,1)
(45,36,1)
(44,39,1)
(10,36,1)
(41,48,1)
(47,22,1)
(48,47,1)
(49,9,1)
(22,23,1)
(45,49,1)
(15,22,1)
(31,24,1)
(40,50,1)
(1,37,1)
(13,33,1)
(35,33,1)
(12,7,1)
(54,44,1)
(33,45,1)
(1,49,1)
(44,3,1)
(20,42,1)
(22,36,1)
(24,6,2)
(22,36,2)
(30,48,2)
(17,49,2)
(1,49,2)
(45,10,2)
(0,10,2)
(17,36,2)
(36,6,2)
(7,10,2)
(49,6,2)
(48,10,2)
(22,1,2)
(9,6,2)
(36,31,2)
(39,17,2)
(47,22,2)
(35,33,2)
(3,48,2)
(33,45,2)
(40,50,2)
(52,6,2)
(41,48,2)
(47,1,2)
(15,1,2)
(25,48,2)
(45,36,2)
(13,10,2)
(44,39,2)
(14,1,2)
(38,48,2)
(21,10,2)
(48,1,2)
(47,40,2)
(34,14,2)
(39,48,2)
(1,36,2)
(44,48,2)
(8,48,2)
(22,49,2)
(12,10,2)
(1,10,2)
(40,34,2)
(48,47,2)
(23,1,2)
(31,6,2)
(34,1,2)
(37,10,2)
(40,1,2)
(45,49,2)
(14,27,2)
(33,10,2)
(17,48,2)
(35,10,2)
-----------------------------------
(0,data)
(1,data > INT_MIN)
(2,)
(3,result)
(4,result)
(5,)
(6,globalReturnsTrueOrFalse()
(7,result)
(8,"data value is too large to perform arithmetic safely.")
(9,2)
(10,globalReturnsTrueOrFalse()
(11,)
(12,data)
(13,result)
(14,(double)
(15,INT_MAX)
(16,if(globalReturnsTrueOrFalse()
(17,data * data)
(18,if(globalReturnsTrueOrFalse()
(19,data)
(20,data = 0)
(21,data)
(22,abs(data)
(23,data)
(24,data)
(25,printLine("data value is too large to perform arithmetic safely.")
(26,)
(27,double)
(28,)
(29,data)
(30,data)
(31,RAND32()
(32,)
(33,result = data * data)
(34,sqrt((double)
(35,printIntLine(result)
(36,data = RAND32()
(37,INT_MIN)
(38,data)
(39,result = data * data)
(40,(long)
(41,result)
(42,0)
(43,)
(44,printIntLine(result)
(45,data * data)
(46,)
(47,abs(data)
(48,data > INT_MIN && abs(data)
(49,data = 2)
(50,long)
(51,if (data > INT_MIN && abs(data)
(52,data)
(53,result)
(54,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^