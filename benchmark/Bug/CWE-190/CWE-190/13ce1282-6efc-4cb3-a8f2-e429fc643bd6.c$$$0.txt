-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
30,33
31,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,34,37,39,42,46,48
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_04_bad()
CWE190_Integer_Overflow__char_max_postinc_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(16,21,0)
(2,10,0)
(2,3,0)
(2,21,0)
(24,21,0)
(8,10,0)
(3,12,0)
(7,2,0)
(8,21,0)
(11,10,0)
(16,2,0)
(1,12,0)
(5,10,0)
(9,3,0)
(21,14,0)
(6,2,0)
(8,3,0)
(18,12,0)
(10,23,0)
(13,12,0)
(0,8,0)
(15,16,0)
(20,3,0)
(11,4,1)
(17,10,1)
(8,3,1)
(16,2,1)
(10,5,1)
(6,8,1)
(19,17,1)
(4,3,1)
(0,17,1)
(2,3,1)
(19,16,1)
(8,0,1)
(3,20,1)
(20,9,1)
(7,6,1)
(5,11,1)
(8,10,1)
(2,7,1)
(17,4,1)
(16,15,1)
(2,10,1)
(15,2,1)
(2,3,2)
(2,17,2)
(16,2,2)
(15,17,2)
(16,17,2)
(8,10,2)
(10,4,2)
(5,4,2)
(2,10,2)
(8,17,2)
(6,17,2)
(8,3,2)
(11,4,2)
(0,17,2)
(7,17,2)
-----------------------------------
(0,data)
(1,data)
(2,result = data)
(3,data = \' \')
(4,STATIC_CONST_TRUE)
(5,CHAR_MAX)
(6,result)
(7,data)
(8,data++)
(9,data)
(10,data = CHAR_MAX)
(11,data)
(12,)
(13,if(STATIC_CONST_TRUE)
(14,)
(15,result)
(16,printHexCharLine(result)
(17,STATIC_CONST_TRUE)
(18,if(STATIC_CONST_TRUE)
(19,RET)
(20,' ')
(21,)
(22,data = ' ')
(23,)
(24,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^