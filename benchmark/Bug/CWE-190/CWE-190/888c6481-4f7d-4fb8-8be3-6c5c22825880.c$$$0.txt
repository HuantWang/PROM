-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_01_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,36,38,42,44
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_01_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_rand_square_01_bad()
CWE190_Integer_Overflow__short_rand_square_01_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(15,18,0)
(18,15,0)
(2,16,0)
(11,18,0)
(1,16,0)
(9,10,0)
(19,18,0)
(5,15,0)
(15,8,0)
(16,2,0)
(10,16,0)
(6,12,0)
(0,7,0)
(10,12,0)
(8,12,0)
(18,10,0)
(16,10,0)
(14,17,0)
(4,8,0)
(16,1,0)
(3,7,0)
(17,15,0)
(7,12,0)
(17,8,0)
(0,3,1)
(17,14,1)
(14,15,1)
(7,0,1)
(9,7,1)
(18,10,1)
(19,11,1)
(16,1,1)
(16,2,1)
(10,16,1)
(2,9,1)
(11,5,1)
(5,10,1)
(18,19,1)
(17,15,1)
(13,17,1)
(15,18,1)
(10,16,2)
(17,15,2)
(16,2,2)
(15,18,2)
(16,1,2)
(18,10,2)
-----------------------------------
(0,0)
(1,short)
(2,RAND32()
(3,data)
(4,result)
(5,result)
(6,data)
(7,data = 0)
(8,)
(9,data)
(10,data = (short)
(11,data)
(12,)
(13,RET)
(14,result)
(15,result = data * data)
(16,(short)
(17,printIntLine(result)
(18,data * data)
(19,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^