-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_13_bad()
CWE190_Integer_Overflow__char_max_preinc_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(5,12,0)
(25,13,0)
(5,2,0)
(1,12,0)
(15,27,0)
(27,3,0)
(11,26,0)
(28,26,0)
(2,16,0)
(8,15,0)
(0,20,0)
(4,12,0)
(24,2,0)
(15,5,0)
(5,27,0)
(13,2,0)
(12,26,0)
(13,27,0)
(21,5,0)
(7,26,0)
(10,17,0)
(18,17,0)
(9,27,0)
(13,12,0)
(23,20,0)
(6,5,0)
(14,2,0)
(10,18,1)
(0,23,1)
(6,21,1)
(23,12,1)
(5,6,1)
(17,10,1)
(15,5,1)
(18,20,1)
(18,2,1)
(15,8,1)
(1,4,1)
(13,12,1)
(14,20,1)
(25,17,1)
(2,24,1)
(22,17,1)
(5,2,1)
(20,0,1)
(5,12,1)
(13,25,1)
(24,14,1)
(13,2,1)
(8,5,1)
(12,1,1)
(21,13,1)
(22,15,1)
(6,17,2)
(13,2,2)
(13,12,2)
(5,12,2)
(21,17,2)
(8,17,2)
(15,17,2)
(15,5,2)
(5,2,2)
(25,17,2)
(5,17,2)
(24,20,2)
(14,20,2)
(13,17,2)
(2,20,2)
-----------------------------------
(0,5)
(1,' ')
(2,data = CHAR_MAX)
(3,)
(4,data)
(5,result = data)
(6,data)
(7,if(GLOBAL_CONST_FIVE==5)
(8,result)
(9,result)
(10,5)
(11,data)
(12,data = \' \')
(13,++data)
(14,data)
(15,printHexCharLine(result)
(16,)
(17,GLOBAL_CONST_FIVE==5)
(18,GLOBAL_CONST_FIVE)
(19,data = ' ')
(20,GLOBAL_CONST_FIVE==5)
(21,result)
(22,RET)
(23,GLOBAL_CONST_FIVE)
(24,CHAR_MAX)
(25,data)
(26,)
(27,)
(28,if(GLOBAL_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^