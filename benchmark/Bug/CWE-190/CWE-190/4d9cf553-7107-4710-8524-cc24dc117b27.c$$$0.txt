-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_06_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,42,46,48,52,53,57,59
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
39,40
39,41
50,51
50,52
-----guardedBy-----
41,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_06_bad(){    short data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_06_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_06_bad
{    short data;    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(32,16,0)
(18,8,0)
(0,7,0)
(26,0,0)
(9,17,0)
(21,7,0)
(25,1,0)
(31,0,0)
(24,18,0)
(3,18,0)
(29,6,0)
(32,0,0)
(16,32,0)
(19,8,0)
(14,16,0)
(11,6,0)
(10,4,0)
(18,3,0)
(17,8,0)
(12,0,0)
(20,32,0)
(17,18,0)
(28,31,0)
(2,3,0)
(13,1,0)
(23,7,0)
(33,31,0)
(3,0,0)
(22,3,0)
(5,7,0)
(16,30,0)
(15,16,0)
(6,29,1)
(9,18,1)
(33,28,1)
(18,3,1)
(15,1,1)
(13,0,1)
(27,31,1)
(20,14,1)
(2,22,1)
(16,32,1)
(14,15,1)
(17,9,1)
(31,0,1)
(11,16,1)
(29,11,1)
(25,13,1)
(17,18,1)
(3,2,1)
(12,26,1)
(32,0,1)
(22,24,1)
(27,6,1)
(28,6,1)
(31,33,1)
(3,0,1)
(0,12,1)
(32,20,1)
(27,17,1)
(1,25,1)
(24,31,1)
(11,1,1)
(32,0,2)
(18,31,2)
(17,31,2)
(17,18,2)
(31,0,2)
(16,1,2)
(14,1,2)
(22,31,2)
(24,31,2)
(3,31,2)
(33,6,2)
(16,32,2)
(9,31,2)
(18,3,2)
(32,1,2)
(28,6,2)
(15,1,2)
(2,31,2)
(3,0,2)
(20,1,2)
(31,6,2)
-----------------------------------
(0,data = 0)
(1,STATIC_CONST_FIVE==5)
(2,2)
(3,data * 2)
(4,)
(5,if(STATIC_CONST_FIVE==5)
(6,STATIC_CONST_FIVE==5)
(7,)
(8,)
(9,result)
(10,if(data > 0)
(11,STATIC_CONST_FIVE)
(12,0)
(13,STATIC_CONST_FIVE)
(14,"%hd")
(15,stdin)
(16,fscanf (stdin, "%hd", &data)
(17,printIntLine(result)
(18,result = data * 2)
(19,result)
(20,data)
(21,if(STATIC_CONST_FIVE==5)
(22,data)
(23,data)
(24,result)
(25,5)
(26,data)
(27,RET)
(28,data)
(29,5)
(30,)
(31,data > 0)
(32,&data)
(33,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^