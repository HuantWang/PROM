-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_12_bad()
{
    int64_t data;
    data = 0LL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))
        {
            int64_t result = data * data;
            printLongLongLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
60,61
60,62
61,62
61,63
62,63
64,65
64,66
65,66
65,67
66,67
69,70
71,72
71,73
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
97,98
97,99
98,99
-----nextToken-----
2,4,9,11,15,16,20,25,27,32,33,37,43,45,49,51,55,57,63,67,68,70,73,75,80,82,86,88,92,94,99,100
-----computeFrom-----
13,14
13,15
23,24
23,25
30,31
30,32
47,48
47,49
60,61
60,62
84,85
84,86
-----guardedBy-----
70,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_12_bad(){    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_12_bad()
CWE190_Integer_Overflow__int64_t_max_square_12_bad
{    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX)
imaxabs((intmax_t)data)
imaxabs
imaxabs
(intmax_t)data
intmax_t
intmax_t
intmax_t

data
data
sqrtl(LLONG_MAX)
sqrtl
sqrtl
LLONG_MAX
LLONG_MAX
{            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(40,39,0)
(21,28,0)
(33,25,0)
(21,32,0)
(9,39,0)
(32,25,0)
(32,7,0)
(32,16,0)
(3,11,0)
(15,8,0)
(31,32,0)
(16,32,0)
(8,35,0)
(25,45,0)
(28,11,0)
(0,33,0)
(36,42,0)
(5,35,0)
(11,28,0)
(23,35,0)
(32,21,0)
(12,10,0)
(39,20,0)
(15,42,0)
(41,7,0)
(35,8,0)
(8,42,0)
(44,43,0)
(22,7,0)
(1,18,0)
(14,12,0)
(33,39,0)
(35,25,0)
(4,33,0)
(24,25,0)
(38,15,0)
(39,33,0)
(33,7,0)
(7,37,0)
(26,43,0)
(20,27,0)
(34,40,0)
(28,21,0)
(46,8,0)
(35,7,0)
(40,20,0)
(2,20,0)
(19,43,0)
(13,43,0)
(6,25,0)
(35,25,1)
(28,21,1)
(8,35,1)
(34,39,1)
(6,24,1)
(25,6,1)
(35,23,1)
(30,15,1)
(14,28,1)
(40,39,1)
(15,8,1)
(28,11,1)
(31,17,1)
(41,22,1)
(32,31,1)
(46,28,1)
(29,44,1)
(38,8,1)
(32,7,1)
(3,21,1)
(22,29,1)
(15,38,1)
(33,25,1)
(4,0,1)
(40,34,1)
(30,40,1)
(33,4,1)
(12,14,1)
(11,3,1)
(32,16,1)
(35,7,1)
(7,41,1)
(9,17,1)
(39,33,1)
(30,12,1)
(21,32,1)
(33,7,1)
(24,29,1)
(0,9,1)
(17,7,1)
(23,5,1)
(32,25,1)
(17,25,1)
(5,46,1)
(21,17,2)
(7,29,2)
(41,29,2)
(3,17,2)
(31,17,2)
(15,28,2)
(22,29,2)
(5,28,2)
(11,17,2)
(39,33,2)
(35,7,2)
(6,29,2)
(28,21,2)
(14,28,2)
(33,7,2)
(40,17,2)
(28,11,2)
(32,17,2)
(35,28,2)
(25,29,2)
(9,17,2)
(34,17,2)
(21,32,2)
(23,28,2)
(12,28,2)
(46,28,2)
(39,17,2)
(32,25,2)
(8,35,2)
(28,17,2)
(8,28,2)
(32,7,2)
(4,17,2)
(38,28,2)
(24,29,2)
(32,16,2)
(40,39,2)
(0,17,2)
(15,8,2)
(35,25,2)
(33,25,2)
(33,17,2)
-----------------------------------
(0,data)
(1,if (imaxabs((intmax_t)
(2,result)
(3,LLONG_MAX)
(4,data)
(5,data)
(6,LLONG_MAX)
(7,data = 2)
(8,result = data * data)
(9,result)
(10,)
(11,sqrtl(LLONG_MAX)
(12,printLine("data value is too large to perform arithmetic safely.")
(13,data)
(14,"data value is too large to perform arithmetic safely.")
(15,printLongLongLine(result)
(16,intmax_t)
(17,globalReturnsTrueOrFalse()
(18,)
(19,if(globalReturnsTrueOrFalse()
(20,)
(21,imaxabs((intmax_t)
(22,data)
(23,data)
(24,data)
(25,data = LLONG_MAX)
(26,if(globalReturnsTrueOrFalse()
(27,)
(28,imaxabs((intmax_t)
(29,globalReturnsTrueOrFalse()
(30,RET)
(31,data)
(32,(intmax_t)
(33,data * data)
(34,result)
(35,data * data)
(36,result)
(37,)
(38,result)
(39,result = data * data)
(40,printLongLongLine(result)
(41,2)
(42,)
(43,)
(44,L)
(45,)
(46,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^