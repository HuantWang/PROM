-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_add_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int64_t result = data + 1;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
49,50
50,51
52,53
53,54
53,55
54,55
55,56
55,57
56,57
58,59
58,60
60,61
61,62
61,63
62,63
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,43,44,47,48,51,57,59,63,64,68,70
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
41,42
41,43
45,46
45,47
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ProblemStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_add_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_add_17_bad()
CWE190_Integer_Overflow__int64_t_fscanf_add_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }
int64_t result = data + 1;
int64_t result = data + 1;
int64_t
int64_t
result = data + 1
result
= data + 1
data + 1
data
data
1
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(14,31,0)
(7,2,0)
(19,13,0)
(15,7,0)
(16,28,0)
(12,13,0)
(31,27,0)
(10,18,0)
(3,28,0)
(29,18,0)
(6,31,0)
(23,26,0)
(28,21,0)
(9,27,0)
(11,33,0)
(25,33,0)
(27,2,0)
(0,21,0)
(26,21,0)
(4,11,0)
(27,31,0)
(2,30,0)
(13,33,0)
(5,33,0)
(22,18,0)
(32,18,0)
(1,2,0)
(8,21,0)
(17,18,0)
(20,18,0)
(7,27,0)
(0,22,1)
(6,14,1)
(4,7,1)
(13,19,1)
(7,27,1)
(11,4,1)
(27,31,1)
(23,28,1)
(19,12,1)
(28,21,1)
(16,26,1)
(16,21,1)
(28,3,1)
(8,0,1)
(12,33,1)
(7,15,1)
(15,27,1)
(21,8,1)
(25,28,1)
(9,13,1)
(24,13,1)
(33,5,1)
(12,11,1)
(14,9,1)
(26,23,1)
(13,33,1)
(3,16,1)
(26,21,1)
(5,25,1)
(31,6,1)
(11,33,1)
(28,21,2)
(13,33,2)
(6,13,2)
(26,21,2)
(11,13,2)
(7,13,2)
(14,13,2)
(23,28,2)
(13,13,2)
(26,28,2)
(4,13,2)
(15,13,2)
(3,28,2)
(31,13,2)
(27,13,2)
(28,28,2)
(12,13,2)
(16,28,2)
(27,31,2)
(11,33,2)
(7,27,2)
(19,13,2)
(9,13,2)
-----------------------------------
(0,i)
(1,result)
(2,)
(3,1)
(4,j)
(5,0)
(6,1)
(7,printLongLongLine(result)
(8,0)
(9,result)
(10,for(i = 0; i < 1; i++)
(11,j++)
(12,j)
(13,j < 1)
(14,data)
(15,result)
(16,i)
(17,data)
(18,)
(19,1)
(20,i)
(21,i = 0)
(22,L)
(23,i)
(24,RET)
(25,j)
(26,i++)
(27,result = data + 1)
(28,i < 1)
(29,j)
(30,)
(31,data + 1)
(32,for(j = 0; j < 1; j++)
(33,j = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^