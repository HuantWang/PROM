-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_04_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_04_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_04_bad()
CWE190_Integer_Overflow__int_fscanf_square_04_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,2,0)
(16,2,0)
(23,0,0)
(8,20,0)
(14,2,0)
(11,8,0)
(19,21,0)
(3,25,0)
(24,8,0)
(18,23,0)
(25,8,0)
(25,24,0)
(23,19,0)
(13,24,0)
(24,13,0)
(17,24,0)
(6,21,0)
(4,21,0)
(21,2,0)
(7,23,0)
(1,13,0)
(19,23,0)
(22,19,0)
(13,21,0)
(12,13,0)
(19,22,1)
(10,21,1)
(6,4,1)
(12,17,1)
(7,18,1)
(1,12,1)
(13,1,1)
(25,24,1)
(22,7,1)
(21,6,1)
(3,24,1)
(24,13,1)
(5,25,1)
(5,15,1)
(13,21,1)
(17,15,1)
(23,19,1)
(19,21,1)
(25,3,1)
(15,23,1)
(15,10,1)
(18,10,1)
(23,19,2)
(23,10,2)
(1,15,2)
(25,15,2)
(24,13,2)
(12,15,2)
(18,10,2)
(7,10,2)
(24,15,2)
(19,10,2)
(13,21,2)
(3,15,2)
(13,15,2)
(22,10,2)
(25,24,2)
(19,21,2)
(17,15,2)
-----------------------------------
(0,)
(1,data)
(2,)
(3,result)
(4,data)
(5,RET)
(6,0)
(7,"%d")
(8,)
(9,data)
(10,STATIC_CONST_TRUE)
(11,result)
(12,data)
(13,data * data)
(14,if(STATIC_CONST_TRUE)
(15,STATIC_CONST_TRUE)
(16,if(STATIC_CONST_TRUE)
(17,result)
(18,stdin)
(19,&data)
(20,)
(21,data = 0)
(22,data)
(23,fscanf(stdin, "%d", &data)
(24,result = data * data)
(25,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^