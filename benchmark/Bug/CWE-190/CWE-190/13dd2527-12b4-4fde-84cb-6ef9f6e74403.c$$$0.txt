-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_08_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_08_bad(){    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_08_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_08_bad
{    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,20,0)
(22,9,0)
(29,9,0)
(25,29,0)
(21,1,0)
(1,29,0)
(18,8,0)
(20,4,0)
(4,29,0)
(23,21,0)
(2,29,0)
(17,9,0)
(21,8,0)
(1,21,0)
(12,14,0)
(6,8,0)
(24,1,0)
(6,21,0)
(13,4,0)
(4,20,0)
(16,20,0)
(15,6,0)
(19,14,0)
(11,9,0)
(27,5,0)
(26,1,0)
(20,28,0)
(14,29,0)
(10,29,1)
(23,14,1)
(26,24,1)
(29,25,1)
(6,21,1)
(14,29,1)
(7,10,1)
(1,29,1)
(3,14,1)
(14,19,1)
(6,15,1)
(16,0,1)
(3,7,1)
(4,13,1)
(25,2,1)
(13,16,1)
(4,29,1)
(21,1,1)
(19,12,1)
(24,23,1)
(1,26,1)
(20,4,1)
(3,6,1)
(12,7,1)
(0,10,1)
(7,20,1)
(15,21,1)
(13,10,2)
(0,10,2)
(4,10,2)
(15,14,2)
(6,14,2)
(20,4,2)
(1,29,2)
(21,1,2)
(4,29,2)
(23,14,2)
(20,10,2)
(26,14,2)
(14,7,2)
(14,29,2)
(24,14,2)
(19,7,2)
(12,7,2)
(16,10,2)
(21,14,2)
(6,21,2)
(1,14,2)
-----------------------------------
(0,stdin)
(1,data * 2)
(2,data)
(3,RET)
(4,&data)
(5,)
(6,printIntLine(result)
(7,staticReturnsTrue()
(8,)
(9,)
(10,staticReturnsTrue()
(11,if(staticReturnsTrue()
(12,data)
(13,data)
(14,data > 0)
(15,result)
(16,"%d")
(17,if(staticReturnsTrue()
(18,result)
(19,0)
(20,fscanf(stdin, "%d", &data)
(21,result = data * 2)
(22,data)
(23,result)
(24,data)
(25,0)
(26,2)
(27,if(data > 0)
(28,)
(29,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^