-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_31_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    {
        char dataCopy = data;
        char data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,47,48,52,54,58,59,63,65
-----computeFrom-----
12,13
12,14
17,18
17,19
45,46
45,47
56,57
56,58
-----guardedBy-----
47,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_31_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_31_bad()
CWE190_Integer_Overflow__char_rand_multiply_31_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char dataCopy = data;
char dataCopy = data;
char
dataCopy = data
dataCopy
= data
data
data
char data = dataCopy;
char data = dataCopy;
char
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,27,0)
(2,0,0)
(24,15,0)
(10,17,0)
(19,3,0)
(29,20,0)
(6,15,0)
(4,5,0)
(31,6,0)
(27,17,0)
(5,15,0)
(12,24,0)
(17,0,0)
(20,17,0)
(11,6,0)
(25,0,0)
(3,19,0)
(1,3,0)
(0,5,0)
(13,30,0)
(27,30,0)
(24,3,0)
(0,24,0)
(30,16,0)
(3,24,0)
(26,15,0)
(7,17,0)
(14,27,0)
(23,5,0)
(9,16,0)
(17,5,0)
(3,1,0)
(28,20,0)
(22,5,0)
(8,13,0)
(32,30,0)
(13,16,0)
(30,27,0)
(20,28,1)
(17,10,1)
(8,30,1)
(25,24,1)
(30,27,1)
(7,0,1)
(3,19,1)
(32,20,1)
(17,0,1)
(27,14,1)
(0,2,1)
(12,6,1)
(29,17,1)
(18,20,1)
(2,25,1)
(21,32,1)
(1,12,1)
(14,21,1)
(10,7,1)
(31,11,1)
(18,13,1)
(24,3,1)
(28,29,1)
(13,8,1)
(6,31,1)
(0,24,1)
(3,1,1)
(20,17,1)
(27,17,1)
(13,30,1)
(3,19,2)
(0,24,2)
(27,17,2)
(21,20,2)
(30,20,2)
(24,3,2)
(3,1,2)
(13,30,2)
(30,27,2)
(27,20,2)
(32,20,2)
(14,20,2)
(20,17,2)
(13,20,2)
(17,0,2)
(8,20,2)
-----------------------------------
(0,dataCopy = data)
(1,RAND32()
(2,data)
(3,(char)
(4,data)
(5,)
(6,data = ' ')
(7,data)
(8,result)
(9,result)
(10,dataCopy)
(11,data)
(12,data)
(13,printHexCharLine(result)
(14,2)
(15,)
(16,)
(17,data = dataCopy)
(18,RET)
(19,char)
(20,data > 0)
(21,data)
(22,dataCopy)
(23,if(data > 0)
(24,data = (char)
(25,dataCopy)
(26,data)
(27,data * 2)
(28,0)
(29,data)
(30,result = data * 2)
(31,' ')
(32,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^