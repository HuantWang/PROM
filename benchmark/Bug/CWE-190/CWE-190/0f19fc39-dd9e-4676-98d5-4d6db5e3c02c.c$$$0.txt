-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_11_bad()
{
    int64_t data;
    data = 0LL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    if(globalReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
31,32
32,33
34,35
34,36
35,36
36,37
38,39
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,9,11,15,16,20,25,29,30,33,37,42,43,48,50,54,55,59,61
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
52,53
52,54
-----guardedBy-----
42,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_11_bad(){    int64_t data;    data = 0LL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_11_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_11_bad
{    int64_t data;    data = 0LL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(14,7,0)
(7,13,0)
(15,4,0)
(25,11,0)
(21,11,0)
(21,17,0)
(18,11,0)
(15,7,0)
(19,13,0)
(24,25,0)
(9,15,0)
(23,4,0)
(20,13,0)
(0,5,0)
(13,7,0)
(17,21,0)
(6,2,0)
(7,4,0)
(8,25,0)
(21,22,0)
(13,11,0)
(16,5,0)
(22,21,0)
(3,5,0)
(11,21,0)
(11,27,0)
(10,5,0)
(22,18,1)
(20,14,1)
(18,1,1)
(11,21,1)
(12,1,1)
(19,20,1)
(26,12,1)
(26,25,1)
(25,11,1)
(15,7,1)
(7,13,1)
(13,19,1)
(24,12,1)
(14,25,1)
(21,22,1)
(25,8,1)
(26,15,1)
(21,17,1)
(1,16,1)
(9,7,1)
(12,11,1)
(13,11,1)
(15,9,1)
(8,24,1)
(13,25,2)
(21,1,2)
(14,25,2)
(22,1,2)
(20,25,2)
(19,25,2)
(8,12,2)
(24,12,2)
(9,25,2)
(11,1,2)
(13,11,2)
(25,12,2)
(18,1,2)
(11,21,2)
(25,11,2)
(21,22,2)
(15,7,2)
(7,25,2)
(7,13,2)
(15,25,2)
(21,17,2)
-----------------------------------
(0,if(globalReturnsTrue()
(1,globalReturnsTrue()
(2,)
(3,data)
(4,)
(5,)
(6,if(data > 0)
(7,result = data * 2)
(8,0)
(9,result)
(10,if(globalReturnsTrue()
(11,data = (int64_t)
(12,globalReturnsTrue()
(13,data * 2)
(14,result)
(15,printLongLongLine(result)
(16,L)
(17,int64_t)
(18,data)
(19,2)
(20,data)
(21,(int64_t)
(22,RAND64()
(23,result)
(24,data)
(25,data > 0)
(26,RET)
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^