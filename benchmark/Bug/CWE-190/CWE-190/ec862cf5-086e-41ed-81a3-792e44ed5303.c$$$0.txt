-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_66b_badSink(char dataArray[])
{
    /* copy data out of dataArray */
    char data = dataArray[2];
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
27,28
28,29
28,30
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,35,36,40,42
-----computeFrom-----
22,23
22,24
33,34
33,35
-----guardedBy-----
24,35
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_66b_badSink(char dataArray[]){    /* copy data out of dataArray */    char data = dataArray[2];    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_multiply_66b_badSink(char dataArray[])
CWE190_Integer_Overflow__char_max_multiply_66b_badSink
char dataArray[]
char
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    char data = dataArray[2];    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data = dataArray[2];
char data = dataArray[2];
char
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(0,7,0)
(17,2,0)
(11,2,0)
(20,6,0)
(10,16,0)
(14,20,0)
(1,0,0)
(5,16,0)
(4,7,0)
(21,15,0)
(0,15,0)
(4,8,0)
(3,4,0)
(19,4,0)
(18,6,0)
(20,15,0)
(15,0,0)
(2,7,0)
(9,7,0)
(7,16,0)
(12,0,0)
(7,4,0)
(15,6,0)
(21,2,1)
(19,9,1)
(3,19,1)
(2,11,1)
(4,8,1)
(0,1,1)
(17,7,1)
(1,12,1)
(11,17,1)
(20,14,1)
(4,3,1)
(20,15,1)
(2,7,1)
(13,20,1)
(7,4,1)
(13,2,1)
(0,7,1)
(15,0,1)
(12,21,1)
(14,15,1)
(15,2,2)
(20,15,2)
(21,2,2)
(14,2,2)
(15,0,2)
(0,7,2)
(20,2,2)
(4,8,2)
(12,2,2)
(0,2,2)
(2,7,2)
(7,4,2)
(1,2,2)
-----------------------------------
(0,data * 2)
(1,2)
(2,data > 0)
(3,2)
(4,dataArray[2])
(5,data)
(6,)
(7,data = dataArray[2])
(8,char dataArray[])
(9,data)
(10,if(data > 0)
(11,0)
(12,data)
(13,RET)
(14,result)
(15,result = data * 2)
(16,)
(17,data)
(18,result)
(19,dataArray)
(20,printHexCharLine(result)
(21,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^