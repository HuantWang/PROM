-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_postinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            data++;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
59,62
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
67,68
68,69
70,71
71,72
71,73
73,74
73,75
75,76
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,14,15,19,24,27,32,33,37,43,46,48,51,55,57,62,64,69,72,74,77,81,83,88,89
-----computeFrom-----
12,13
12,14
22,23
22,24
30,31
30,32
60,61
60,62
-----guardedBy-----
62,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_postinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_rand_postinc_12_bad()
CWE190_Integer_Overflow__int_rand_postinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            data++;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(44,43,0)
(41,33,0)
(12,13,0)
(16,44,0)
(42,43,0)
(13,25,0)
(17,15,0)
(27,30,0)
(4,1,0)
(44,33,0)
(33,34,0)
(33,32,0)
(9,0,0)
(21,31,0)
(28,17,0)
(12,33,0)
(20,1,0)
(23,6,0)
(41,43,0)
(29,6,0)
(14,12,0)
(0,30,0)
(26,35,0)
(5,31,0)
(11,42,0)
(36,39,0)
(0,33,0)
(32,33,0)
(7,1,0)
(44,13,0)
(0,13,0)
(6,33,0)
(39,30,0)
(2,43,0)
(22,33,0)
(40,13,0)
(3,0,0)
(6,13,0)
(37,44,0)
(31,1,0)
(41,13,0)
(43,19,0)
(18,13,0)
(10,41,0)
(12,30,0)
(39,0,0)
(42,44,0)
(16,37,1)
(28,6,1)
(11,44,1)
(32,22,1)
(38,39,1)
(44,13,1)
(41,13,1)
(12,14,1)
(38,42,1)
(13,18,1)
(42,44,1)
(0,33,1)
(44,16,1)
(0,13,1)
(12,33,1)
(41,10,1)
(23,29,1)
(12,13,1)
(37,41,1)
(8,31,1)
(38,17,1)
(24,13,1)
(17,28,1)
(39,0,1)
(3,12,1)
(5,21,1)
(39,36,1)
(6,13,1)
(18,40,1)
(22,8,1)
(44,33,1)
(40,8,1)
(42,11,1)
(24,33,1)
(33,32,1)
(6,23,1)
(10,24,1)
(31,5,1)
(29,24,1)
(0,9,1)
(6,33,1)
(41,33,1)
(14,6,1)
(36,0,1)
(9,3,1)
(12,33,2)
(42,24,2)
(44,33,2)
(12,6,2)
(16,24,2)
(41,33,2)
(37,24,2)
(13,8,2)
(32,8,2)
(23,24,2)
(28,6,2)
(41,13,2)
(12,13,2)
(39,0,2)
(33,32,2)
(22,8,2)
(3,6,2)
(18,8,2)
(11,24,2)
(0,33,2)
(6,24,2)
(9,6,2)
(44,24,2)
(14,6,2)
(40,8,2)
(6,13,2)
(42,44,2)
(0,6,2)
(36,6,2)
(39,6,2)
(29,24,2)
(0,13,2)
(33,8,2)
(6,33,2)
(41,24,2)
(10,24,2)
(17,6,2)
(44,13,2)
-----------------------------------
(0,result = data)
(1,)
(2,result)
(3,result)
(4,data)
(5,0)
(6,data < INT_MAX)
(7,if(globalReturnsTrueOrFalse()
(8,globalReturnsTrueOrFalse()
(9,data)
(10,data)
(11,result)
(12,data++)
(13,data = 2)
(14,data)
(15,)
(16,data)
(17,printLine("data value is too large to perform arithmetic safely.")
(18,2)
(19,)
(20,if(globalReturnsTrueOrFalse()
(21,data)
(22,data)
(23,INT_MAX)
(24,globalReturnsTrueOrFalse()
(25,)
(26,if (data < INT_MAX)
(27,result)
(28,"data value is too large to perform arithmetic safely.")
(29,data)
(30,)
(31,data = 0)
(32,RAND32()
(33,data = RAND32()
(34,)
(35,)
(36,result)
(37,result)
(38,RET)
(39,printIntLine(result)
(40,data)
(41,data++)
(42,printIntLine(result)
(43,)
(44,result = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^