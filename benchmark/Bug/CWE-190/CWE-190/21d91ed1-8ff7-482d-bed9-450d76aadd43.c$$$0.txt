-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
28,29
28,30
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
43,44
-----nextToken-----
2,4,8,10,14,15,17,22,24,26,31,33,37,38,42,44
-----computeFrom-----
12,13
12,14
20,21
20,22
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_02_bad()
CWE190_Integer_Overflow__char_max_add_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,5,0)
(12,8,0)
(21,22,0)
(5,12,0)
(10,5,0)
(11,10,0)
(10,22,0)
(16,14,0)
(14,5,0)
(5,10,0)
(17,12,0)
(1,0,0)
(14,12,0)
(15,0,0)
(9,0,0)
(19,1,0)
(22,6,0)
(18,22,0)
(10,1,0)
(23,1,0)
(13,10,0)
(24,0,0)
(4,1,1)
(1,23,1)
(14,16,1)
(10,11,1)
(5,10,1)
(10,1,1)
(3,20,1)
(18,4,1)
(20,4,1)
(10,22,1)
(22,21,1)
(7,20,1)
(23,19,1)
(14,5,1)
(20,22,1)
(16,5,1)
(13,7,1)
(21,18,1)
(3,14,1)
(11,13,1)
(14,20,2)
(11,20,2)
(5,20,2)
(14,5,2)
(5,10,2)
(10,20,2)
(10,22,2)
(18,4,2)
(7,20,2)
(10,1,2)
(22,4,2)
(13,20,2)
(16,20,2)
(21,4,2)
-----------------------------------
(0,)
(1,data = \' \')
(2,data = ' ')
(3,RET)
(4,1)
(5,result = data + 1)
(6,)
(7,result)
(8,)
(9,if(1)
(10,data + 1)
(11,1)
(12,)
(13,data)
(14,printHexCharLine(result)
(15,data)
(16,result)
(17,result)
(18,data)
(19,data)
(20,1)
(21,CHAR_MAX)
(22,data = CHAR_MAX)
(23,' ')
(24,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^