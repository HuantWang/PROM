-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_11_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_11_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_11_bad()
CWE190_Integer_Overflow__int_max_square_11_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,3,0)
(8,2,0)
(20,21,0)
(21,23,0)
(21,1,0)
(1,21,0)
(9,1,0)
(16,23,0)
(21,3,0)
(5,3,0)
(22,8,0)
(0,21,0)
(1,8,0)
(4,12,0)
(15,12,0)
(18,23,0)
(23,12,0)
(6,8,0)
(10,22,0)
(17,12,0)
(3,19,0)
(22,1,0)
(20,0,1)
(9,11,1)
(0,9,1)
(14,23,1)
(11,14,1)
(3,5,1)
(21,3,1)
(13,14,1)
(10,1,1)
(7,11,1)
(22,1,1)
(7,22,1)
(23,18,1)
(22,10,1)
(5,13,1)
(11,3,1)
(21,23,1)
(1,21,1)
(21,20,1)
(18,16,1)
(21,3,2)
(13,14,2)
(1,21,2)
(10,11,2)
(1,11,2)
(22,1,2)
(0,11,2)
(9,11,2)
(21,11,2)
(20,11,2)
(3,14,2)
(22,11,2)
(21,23,2)
(5,14,2)
-----------------------------------
(0,data)
(1,result = data * data)
(2,)
(3,data = INT_MAX)
(4,data)
(5,INT_MAX)
(6,result)
(7,RET)
(8,)
(9,result)
(10,result)
(11,globalReturnsTrue()
(12,)
(13,data)
(14,globalReturnsTrue()
(15,if(globalReturnsTrue()
(16,data)
(17,if(globalReturnsTrue()
(18,0)
(19,)
(20,data)
(21,data * data)
(22,printIntLine(result)
(23,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^