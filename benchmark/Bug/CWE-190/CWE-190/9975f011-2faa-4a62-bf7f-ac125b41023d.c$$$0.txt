-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_09_bad()
{
    short data;
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_09_bad(){    short data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_09_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_09_bad
{    short data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,20,0)
(16,26,0)
(27,11,0)
(20,21,0)
(21,7,0)
(7,26,0)
(17,26,0)
(14,7,0)
(1,26,0)
(23,3,0)
(20,28,0)
(8,3,0)
(6,11,0)
(12,6,0)
(25,1,0)
(19,28,0)
(6,13,0)
(18,6,0)
(26,3,0)
(5,7,0)
(29,1,0)
(7,21,0)
(24,21,0)
(11,6,0)
(11,26,0)
(0,2,0)
(21,28,0)
(10,3,0)
(14,5,1)
(11,27,1)
(25,15,1)
(11,26,1)
(5,24,1)
(7,26,1)
(21,7,1)
(22,15,1)
(15,9,1)
(4,21,1)
(15,6,1)
(16,17,1)
(22,20,1)
(22,1,1)
(9,26,1)
(1,29,1)
(29,25,1)
(18,12,1)
(7,14,1)
(27,18,1)
(12,9,1)
(6,11,1)
(20,21,1)
(26,16,1)
(1,26,1)
(20,4,1)
(24,1,1)
(14,1,2)
(4,1,2)
(1,26,2)
(21,7,2)
(7,1,2)
(6,9,2)
(25,15,2)
(29,15,2)
(6,11,2)
(1,15,2)
(27,9,2)
(11,9,2)
(7,26,2)
(11,26,2)
(20,21,2)
(18,9,2)
(21,1,2)
(12,9,2)
(5,1,2)
(20,1,2)
(24,1,2)
-----------------------------------
(0,if(data > 0)
(1,data > 0)
(2,)
(3,)
(4,result)
(5,data)
(6,fscanf (stdin, "%hd", &data)
(7,data * 2)
(8,if(GLOBAL_CONST_TRUE)
(9,GLOBAL_CONST_TRUE)
(10,if(GLOBAL_CONST_TRUE)
(11,&data)
(12,stdin)
(13,)
(14,2)
(15,GLOBAL_CONST_TRUE)
(16,0)
(17,data)
(18,"%hd")
(19,result)
(20,printIntLine(result)
(21,result = data * 2)
(22,RET)
(23,data)
(24,result)
(25,data)
(26,data = 0)
(27,data)
(28,)
(29,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^