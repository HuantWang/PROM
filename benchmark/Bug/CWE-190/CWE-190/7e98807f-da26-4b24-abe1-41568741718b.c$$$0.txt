-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_connect_socket_square_41_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
16,20
16,21
16,22
17,18
18,19
18,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
43,44
45,46
45,47
46,47
46,48
46,49
46,50
46,51
46,52
46,53
46,54
46,55
46,56
46,57
47,48
48,49
48,50
49,50
51,52
51,53
51,54
51,55
52,53
54,55
56,57
58,59
60,61
60,62
61,62
61,63
62,63
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
73,74
76,77
77,78
78,79
80,81
81,82
81,83
82,83
82,84
83,84
86,87
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
110,111
112,113
112,114
113,114
113,115
114,115
114,116
114,117
114,118
115,116
117,118
119,120
119,121
120,121
120,122
121,122
123,124
125,126
126,127
128,129
129,130
130,131
132,133
134,135
136,137
137,138
137,139
138,139
140,141
140,142
140,143
140,144
140,145
141,142
143,144
145,146
147,148
147,149
148,149
152,153
152,154
153,154
153,155
154,155
154,156
155,156
157,158
159,160
159,161
160,161
163,164
165,166
166,167
166,168
167,168
167,169
168,169
170,171
173,174
174,175
174,176
175,176
177,178
177,179
178,179
180,181
183,184
183,185
184,185
184,186
185,186
187,188
189,190
190,191
191,192
191,193
192,193
194,195
196,197
197,198
197,199
198,199
200,201
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,31,33,36,39,41,44,50,53,55,57,59,63,65,67,71,74,75,79,84,85,87,93,94,95,98,100,105,106,109,111,116,118,122,124,127,131,133,135,139,142,144,146,149,150,151,156,158,161,162,164,169,171,172,176,179,181,182,186,188,193,195,199,201
-----computeFrom-----
12,13
12,14
48,49
48,50
61,62
61,63
81,82
81,83
89,90
89,91
102,103
102,104
113,114
113,115
137,138
137,139
147,148
147,149
153,154
153,155
154,155
154,156
159,160
159,161
166,167
166,168
174,175
174,176
184,185
184,186
-----guardedBy-----
186,195
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_connect_socket_square_41_bad(){    int data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    badSink(data);}
void
CWE190_Integer_Overflow__int_connect_socket_square_41_bad()
CWE190_Integer_Overflow__int_connect_socket_square_41_bad
{    int data;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    badSink(data);}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            data = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
badSink(data);
badSink(data)
badSink
badSink
data
data
-----joern-----
(60,74,0)
(121,66,0)
(30,14,0)
(110,128,0)
(91,54,0)
(24,16,0)
(47,16,0)
(118,23,0)
(61,14,0)
(104,76,0)
(14,19,0)
(69,80,0)
(83,19,0)
(74,20,0)
(2,19,0)
(67,75,0)
(6,121,0)
(98,114,0)
(35,52,0)
(123,65,0)
(62,49,0)
(54,42,0)
(12,87,0)
(107,14,0)
(74,60,0)
(122,61,0)
(57,69,0)
(35,1,0)
(11,66,0)
(1,35,0)
(41,14,0)
(71,27,0)
(114,19,0)
(91,110,0)
(25,88,0)
(115,48,0)
(68,61,0)
(18,73,0)
(38,128,0)
(108,109,0)
(10,60,0)
(0,87,0)
(68,70,0)
(113,79,0)
(9,91,0)
(52,35,0)
(116,63,0)
(16,24,0)
(103,106,0)
(7,2,0)
(88,21,0)
(109,127,0)
(15,14,0)
(101,46,0)
(21,88,0)
(46,21,0)
(69,119,0)
(58,14,0)
(20,74,0)
(31,68,0)
(28,66,0)
(54,91,0)
(86,13,0)
(92,80,0)
(99,128,0)
(11,120,0)
(40,61,0)
(81,66,0)
(87,66,0)
(128,110,0)
(119,69,0)
(46,79,0)
(26,121,0)
(114,2,0)
(117,61,0)
(124,127,0)
(21,66,0)
(100,42,0)
(23,110,0)
(105,49,0)
(34,66,0)
(128,99,0)
(73,66,0)
(112,14,0)
(85,110,0)
(68,127,0)
(13,14,0)
(32,6,0)
(24,75,0)
(44,42,0)
(3,35,0)
(69,57,0)
(33,24,0)
(127,66,0)
(72,13,0)
(74,24,0)
(63,102,0)
(51,127,0)
(94,117,0)
(49,11,0)
(78,23,0)
(84,79,0)
(24,127,0)
(23,73,0)
(80,69,0)
(42,54,0)
(125,80,0)
(59,1,0)
(82,99,0)
(64,102,0)
(17,51,0)
(120,11,0)
(95,120,0)
(29,119,0)
(114,102,0)
(39,14,0)
(97,66,0)
(90,128,0)
(35,66,0)
(102,66,0)
(5,52,0)
(89,57,0)
(111,91,0)
(36,109,0)
(75,24,0)
(102,63,0)
(128,127,0)
(53,51,0)
(55,109,0)
(22,117,0)
(42,110,0)
(127,109,0)
(96,6,0)
(79,46,0)
(4,2,0)
(110,66,0)
(56,14,0)
(24,74,0)
(50,128,0)
(117,127,0)
(8,99,0)
(45,14,0)
(10,33,1)
(123,75,1)
(37,68,1)
(64,73,1)
(23,110,1)
(18,23,1)
(61,40,1)
(57,69,1)
(128,99,1)
(121,26,1)
(23,78,1)
(103,54,1)
(78,118,1)
(98,37,1)
(55,124,1)
(125,61,1)
(24,74,1)
(100,110,1)
(69,80,1)
(21,88,1)
(24,127,1)
(87,0,1)
(95,49,1)
(51,127,1)
(68,127,1)
(72,86,1)
(74,60,1)
(59,3,1)
(84,121,1)
(118,54,1)
(40,122,1)
(46,101,1)
(89,69,1)
(111,9,1)
(91,111,1)
(122,13,1)
(68,31,1)
(94,71,1)
(125,43,1)
(104,37,1)
(52,5,1)
(74,20,1)
(8,82,1)
(98,104,1)
(94,123,1)
(68,61,1)
(127,109,1)
(35,52,1)
(33,11,1)
(126,114,1)
(25,46,1)
(94,43,1)
(42,110,1)
(114,102,1)
(16,47,1)
(12,57,1)
(92,125,1)
(9,42,1)
(2,4,1)
(101,79,1)
(94,103,1)
(71,51,1)
(4,7,1)
(115,57,1)
(80,92,1)
(35,1,1)
(102,63,1)
(67,24,1)
(42,44,1)
(37,117,1)
(120,95,1)
(6,96,1)
(108,55,1)
(82,38,1)
(105,62,1)
(128,127,1)
(53,17,1)
(114,2,1)
(88,25,1)
(29,80,1)
(32,35,1)
(24,16,1)
(90,85,1)
(46,79,1)
(36,108,1)
(3,52,1)
(117,61,1)
(63,116,1)
(117,127,1)
(60,10,1)
(119,29,1)
(17,127,1)
(26,6,1)
(54,42,1)
(75,67,1)
(5,51,1)
(117,22,1)
(0,12,1)
(62,21,1)
(99,8,1)
(50,99,1)
(94,115,1)
(86,2,1)
(79,113,1)
(128,50,1)
(114,98,1)
(113,84,1)
(38,90,1)
(69,119,1)
(96,32,1)
(1,59,1)
(91,110,1)
(22,94,1)
(13,72,1)
(124,87,1)
(43,102,1)
(31,117,1)
(109,36,1)
(44,100,1)
(85,75,1)
(11,120,1)
(49,105,1)
(47,74,1)
(54,91,1)
(116,64,1)
(73,18,1)
(57,89,1)
(110,128,1)
(75,24,1)
(51,53,1)
(6,51,2)
(104,37,2)
(103,54,2)
(114,2,2)
(111,42,2)
(95,51,2)
(21,88,2)
(99,75,2)
(50,75,2)
(5,51,2)
(51,57,2)
(105,51,2)
(69,119,2)
(78,54,2)
(118,54,2)
(43,54,2)
(31,117,2)
(33,51,2)
(128,99,2)
(80,43,2)
(0,57,2)
(115,57,2)
(55,57,2)
(125,43,2)
(60,51,2)
(16,51,2)
(69,80,2)
(24,51,2)
(75,51,2)
(32,51,2)
(79,51,2)
(89,43,2)
(54,42,2)
(74,60,2)
(119,43,2)
(49,51,2)
(64,54,2)
(113,51,2)
(100,75,2)
(102,54,2)
(110,75,2)
(87,57,2)
(127,57,2)
(114,102,2)
(91,110,2)
(3,51,2)
(69,43,2)
(67,51,2)
(57,43,2)
(24,16,2)
(73,54,2)
(108,57,2)
(26,51,2)
(11,51,2)
(59,51,2)
(8,75,2)
(102,63,2)
(44,75,2)
(128,75,2)
(117,61,2)
(68,61,2)
(101,51,2)
(9,42,2)
(23,110,2)
(35,51,2)
(42,75,2)
(46,79,2)
(88,51,2)
(53,57,2)
(121,51,2)
(54,91,2)
(23,54,2)
(21,51,2)
(116,54,2)
(123,75,2)
(57,69,2)
(1,51,2)
(18,54,2)
(25,51,2)
(11,120,2)
(120,51,2)
(10,51,2)
(71,51,2)
(91,42,2)
(52,51,2)
(124,57,2)
(62,51,2)
(68,127,2)
(42,110,2)
(96,51,2)
(54,75,2)
(51,127,2)
(84,51,2)
(110,128,2)
(75,24,2)
(17,57,2)
(36,57,2)
(24,127,2)
(35,1,2)
(12,57,2)
(63,54,2)
(92,43,2)
(82,75,2)
(38,75,2)
(29,43,2)
(74,20,2)
(127,109,2)
(68,117,2)
(24,74,2)
(85,75,2)
(128,127,2)
(46,51,2)
(90,75,2)
(117,127,2)
(109,57,2)
(47,51,2)
(74,51,2)
(35,52,2)
-----------------------------------
(0,1)
(1,sizeof(service)
(2,data = 0)
(3,0)
(4,0)
(5,service)
(6,service.sin_family)
(7,data)
(8,1)
(9,recvResult)
(10,service)
(11,service.sin_port = htons(TCP_PORT)
(12,wsaDataInit)
(13,wsaDataInit = 0)
(14,)
(15,wsaDataInit)
(16,sizeof(service)
(17,connectSocket)
(18,\'\\\\0\')
(19,)
(20,struct sockaddr*)
(21,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(22,INVALID_SOCKET)
(23,inputBuffer[recvResult])
(24,connect(connectSocket, (struct sockaddr*)
(25,IP_ADDRESS)
(26,AF_INET)
(27,)
(28,if (recvResult == SOCKET_ERROR || recvResult == 0)
(29,wsaData)
(30,if (connectSocket != INVALID_SOCKET)
(31,connectSocket)
(32,service)
(33,connectSocket)
(34,if (connectSocket == INVALID_SOCKET)
(35,memset(&service, 0, sizeof(service)
(36,IPPROTO_TCP)
(37,wsaDataInit)
(38,inputBuffer)
(39,do)
(40,INVALID_SOCKET)
(41,connectSocket)
(42,recvResult == SOCKET_ERROR)
(43,0)
(44,SOCKET_ERROR)
(45,service)
(46,service.sin_addr.s_addr)
(47,service)
(48,)
(49,service.sin_port)
(50,0)
(51,connectSocket == INVALID_SOCKET)
(52,&service)
(53,INVALID_SOCKET)
(54,recvResult == SOCKET_ERROR || recvResult == 0)
(55,AF_INET)
(56,wsaData)
(57,WSAStartup(MAKEWORD(2,2)
(58,recvResult)
(59,service)
(60,&service)
(61,connectSocket = INVALID_SOCKET)
(62,service)
(63,atoi(inputBuffer)
(64,data)
(65,)
(66,)
(67,SOCKET_ERROR)
(68,CLOSE_SOCKET(connectSocket)
(69,WSAStartup(MAKEWORD(2,2)
(70,)
(71,break;)
(72,0)
(73,inputBuffer[recvResult] = \'\\\\0\')
(74,(struct sockaddr*)
(75,connect(connectSocket, (struct sockaddr*)
(76,)
(77,inputBuffer[recvResult] = '\\\\0')
(78,recvResult)
(79,service.sin_addr)
(80,MAKEWORD(2,2)
(81,if (connect(connectSocket, (struct sockaddr*)
(82,CHAR_ARRAY_SIZE)
(83,data)
(84,service)
(85,recvResult)
(86,wsaDataInit)
(87,wsaDataInit = 1)
(88,inet_addr(IP_ADDRESS)
(89,NO_ERROR)
(90,connectSocket)
(91,recvResult == 0)
(92,2)
(93,'\\\\0')
(94,connectSocket)
(95,TCP_PORT)
(96,sin_family)
(97,if (WSAStartup(MAKEWORD(2,2)
(98,data)
(99,CHAR_ARRAY_SIZE - 1)
(100,recvResult)
(101,s_addr)
(102,data = atoi(inputBuffer)
(103,break;)
(104,WSACleanup()
(105,sin_port)
(106,)
(107,if (wsaDataInit)
(108,SOCK_STREAM)
(109,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(110,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(111,0)
(112,inputBuffer)
(113,sin_addr)
(114,badSink(data)
(115,break;)
(116,inputBuffer)
(117,connectSocket != INVALID_SOCKET)
(118,inputBuffer)
(119,&wsaData)
(120,htons(TCP_PORT)
(121,service.sin_family = AF_INET)
(122,connectSocket)
(123,break;)
(124,connectSocket)
(125,2)
(126,RET)
(127,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(128,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^