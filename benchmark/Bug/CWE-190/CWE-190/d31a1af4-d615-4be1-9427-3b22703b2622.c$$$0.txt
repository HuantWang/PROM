-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_11_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,19,24,27,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
22,23
22,24
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_11_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_11_bad()
CWE190_Integer_Overflow__int_rand_square_11_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(15,6,0)
(19,23,0)
(7,19,0)
(14,20,0)
(19,7,0)
(19,21,0)
(17,19,0)
(1,4,0)
(23,22,0)
(9,4,0)
(18,7,0)
(13,19,0)
(21,4,0)
(6,3,0)
(5,4,0)
(12,23,0)
(10,21,0)
(7,6,0)
(20,7,0)
(0,23,0)
(23,12,0)
(20,6,0)
(16,21,0)
(0,11,1)
(23,12,1)
(19,21,1)
(21,10,1)
(8,2,1)
(2,23,1)
(10,16,1)
(17,18,1)
(14,7,1)
(20,7,1)
(20,14,1)
(19,13,1)
(12,0,1)
(2,11,1)
(7,19,1)
(18,2,1)
(13,17,1)
(8,20,1)
(11,21,1)
(19,23,1)
(18,2,2)
(19,2,2)
(7,19,2)
(7,2,2)
(12,11,2)
(20,7,2)
(13,2,2)
(20,2,2)
(19,21,2)
(23,12,2)
(17,2,2)
(0,11,2)
(19,23,2)
(14,2,2)
(23,11,2)
-----------------------------------
(0,data)
(1,if(globalReturnsTrue()
(2,globalReturnsTrue()
(3,)
(4,)
(5,data)
(6,)
(7,result = data * data)
(8,RET)
(9,if(globalReturnsTrue()
(10,0)
(11,globalReturnsTrue()
(12,RAND32()
(13,data)
(14,result)
(15,result)
(16,data)
(17,data)
(18,result)
(19,data * data)
(20,printIntLine(result)
(21,data = 0)
(22,)
(23,data = RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^