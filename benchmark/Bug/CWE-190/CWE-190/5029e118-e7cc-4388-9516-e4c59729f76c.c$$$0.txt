-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,43,46,48,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_14_bad()
CWE190_Integer_Overflow__char_rand_preinc_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(6,22,0)
(18,7,0)
(4,27,0)
(18,10,0)
(19,18,0)
(26,7,0)
(28,25,0)
(28,10,0)
(3,1,0)
(5,23,0)
(0,7,0)
(29,28,0)
(10,28,0)
(14,26,0)
(12,6,0)
(10,16,0)
(6,18,0)
(18,22,0)
(9,23,0)
(26,22,0)
(21,7,0)
(25,28,0)
(7,27,0)
(28,29,0)
(30,27,0)
(2,18,0)
(15,10,0)
(17,1,0)
(20,27,0)
(22,11,0)
(26,10,0)
(8,22,0)
(28,25,1)
(13,6,1)
(2,19,1)
(0,21,1)
(26,10,1)
(18,10,1)
(23,9,1)
(25,15,1)
(7,0,1)
(13,1,1)
(17,3,1)
(6,18,1)
(3,23,1)
(5,7,1)
(18,2,1)
(10,28,1)
(18,7,1)
(6,12,1)
(9,5,1)
(26,14,1)
(1,17,1)
(26,7,1)
(14,1,1)
(28,29,1)
(19,26,1)
(3,10,1)
(12,18,1)
(15,23,1)
(6,18,2)
(18,10,2)
(10,28,2)
(28,25,2)
(12,1,2)
(6,1,2)
(2,1,2)
(26,7,2)
(25,23,2)
(19,1,2)
(28,23,2)
(26,10,2)
(15,23,2)
(26,1,2)
(14,1,2)
(28,29,2)
(10,23,2)
(18,7,2)
(18,1,2)
-----------------------------------
(0,' ')
(1,globalFive==5)
(2,data)
(3,globalFive)
(4,if(globalFive==5)
(5,globalFive)
(6,printHexCharLine(result)
(7,data = ' ')
(8,result)
(9,5)
(10,data = (char)
(11,)
(12,result)
(13,RET)
(14,data)
(15,data)
(16,)
(17,5)
(18,result = data)
(19,result)
(20,data)
(21,data)
(22,)
(23,globalFive==5)
(24,data = \' \')
(25,RAND32()
(26,++data)
(27,)
(28,(char)
(29,char)
(30,if(globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^