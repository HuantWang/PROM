-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_09_bad()
{
    short data;
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
35,38
36,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,39,42,44,47,51,53
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_09_bad(){    short data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_09_bad()
CWE190_Integer_Overflow__short_rand_postinc_09_bad
{    short data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,22,0)
(16,14,0)
(22,6,0)
(1,5,0)
(6,4,0)
(10,8,0)
(25,6,0)
(6,22,0)
(8,7,0)
(13,14,0)
(0,7,0)
(16,7,0)
(24,9,0)
(7,12,0)
(2,5,0)
(21,16,0)
(14,5,0)
(22,15,0)
(9,16,0)
(20,16,0)
(9,7,0)
(3,5,0)
(6,25,0)
(18,14,0)
(16,22,0)
(19,22,0)
(4,6,0)
(8,14,0)
(23,11,1)
(18,13,1)
(24,16,1)
(16,22,1)
(22,6,1)
(23,22,1)
(8,22,1)
(14,18,1)
(8,10,1)
(21,8,1)
(6,25,1)
(19,11,1)
(9,24,1)
(20,21,1)
(4,19,1)
(10,23,1)
(16,14,1)
(16,20,1)
(11,14,1)
(9,16,1)
(8,14,1)
(6,4,1)
(17,23,1)
(17,9,1)
(22,11,2)
(10,23,2)
(16,23,2)
(4,11,2)
(21,23,2)
(8,14,2)
(9,23,2)
(9,16,2)
(24,23,2)
(6,25,2)
(8,23,2)
(16,22,2)
(6,4,2)
(8,22,2)
(16,14,2)
(19,11,2)
(22,6,2)
(6,11,2)
(20,23,2)
-----------------------------------
(0,result)
(1,if(GLOBAL_CONST_TRUE)
(2,if(GLOBAL_CONST_TRUE)
(3,data)
(4,RAND32()
(5,)
(6,(short)
(7,)
(8,data++)
(9,printIntLine(result)
(10,data)
(11,GLOBAL_CONST_TRUE)
(12,)
(13,data)
(14,data = 0)
(15,)
(16,result = data)
(17,RET)
(18,0)
(19,data)
(20,data)
(21,result)
(22,data = (short)
(23,GLOBAL_CONST_TRUE)
(24,result)
(25,short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^