-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_34_bad()
{
    short data;
    CWE190_Integer_Overflow__short_max_square_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = SHRT_MAX;
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,52,56,58,62,64
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_34_bad(){    short data;    CWE190_Integer_Overflow__short_max_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_34_bad()
CWE190_Integer_Overflow__short_max_square_34_bad
{    short data;    CWE190_Integer_Overflow__short_max_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
CWE190_Integer_Overflow__short_max_square_34_unionType myUnion;
CWE190_Integer_Overflow__short_max_square_34_unionType myUnion;
CWE190_Integer_Overflow__short_max_square_34_unionType
CWE190_Integer_Overflow__short_max_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(3,5,0)
(7,24,0)
(23,12,0)
(2,18,0)
(6,5,0)
(30,6,0)
(12,14,0)
(20,9,0)
(4,11,0)
(8,13,0)
(16,24,0)
(9,13,0)
(6,24,0)
(22,15,0)
(25,5,0)
(14,18,0)
(0,9,0)
(15,6,0)
(13,9,0)
(13,11,0)
(21,15,0)
(12,13,0)
(19,5,0)
(18,11,0)
(24,5,0)
(27,2,0)
(26,14,0)
(1,25,0)
(29,18,0)
(14,12,0)
(28,25,0)
(2,14,0)
(10,12,0)
(11,5,0)
(30,15,1)
(23,26,1)
(12,10,1)
(8,6,1)
(12,13,1)
(15,22,1)
(6,24,1)
(10,23,1)
(21,24,1)
(16,25,1)
(14,12,1)
(17,2,1)
(26,13,1)
(22,21,1)
(2,27,1)
(0,8,1)
(7,16,1)
(1,28,1)
(6,30,1)
(13,9,1)
(2,14,1)
(9,20,1)
(20,0,1)
(25,1,1)
(24,7,1)
(27,14,1)
(12,13,2)
(2,14,2)
(14,12,2)
(6,24,2)
(13,9,2)
-----------------------------------
(0,myUnion)
(1,0)
(2,printIntLine(result)
(3,data)
(4,data)
(5,)
(6,myUnion.unionFirst = data)
(7,SHRT_MAX)
(8,data)
(9,myUnion.unionSecond)
(10,data)
(11,)
(12,data * data)
(13,data = myUnion.unionSecond)
(14,result = data * data)
(15,myUnion.unionFirst)
(16,data)
(17,RET)
(18,)
(19,myUnion)
(20,unionSecond)
(21,myUnion)
(22,unionFirst)
(23,data)
(24,data = SHRT_MAX)
(25,data = 0)
(26,result)
(27,result)
(28,data)
(29,result)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^