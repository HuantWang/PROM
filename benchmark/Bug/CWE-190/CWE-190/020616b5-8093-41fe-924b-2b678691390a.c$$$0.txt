-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_11_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
22,23
22,24
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_11_bad(){    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_11_bad()
CWE190_Integer_Overflow__short_rand_square_11_bad
{    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,20,0)
(6,25,0)
(1,12,0)
(22,0,0)
(2,14,0)
(5,14,0)
(19,0,0)
(0,7,0)
(0,20,0)
(8,6,0)
(11,7,0)
(14,7,0)
(22,6,0)
(23,12,0)
(18,22,0)
(18,6,0)
(14,2,0)
(21,22,0)
(24,20,0)
(13,12,0)
(20,12,0)
(9,18,0)
(3,0,0)
(7,14,0)
(7,17,0)
(0,22,0)
(14,5,0)
(20,4,1)
(0,20,1)
(3,19,1)
(21,16,1)
(22,0,1)
(19,21,1)
(7,14,1)
(16,7,1)
(0,7,1)
(9,22,1)
(2,11,1)
(11,10,1)
(15,16,1)
(4,24,1)
(14,2,1)
(10,20,1)
(16,10,1)
(0,3,1)
(15,18,1)
(18,9,1)
(14,5,1)
(18,22,1)
(22,16,2)
(0,16,2)
(18,22,2)
(18,16,2)
(14,5,2)
(14,2,2)
(19,16,2)
(11,10,2)
(7,14,2)
(21,16,2)
(0,20,2)
(2,10,2)
(22,0,2)
(0,7,2)
(3,16,2)
(9,16,2)
(14,10,2)
(7,10,2)
-----------------------------------
(0,data * data)
(1,if(globalReturnsTrue()
(2,RAND32()
(3,data)
(4,0)
(5,short)
(6,)
(7,data = (short)
(8,result)
(9,result)
(10,globalReturnsTrue()
(11,data)
(12,)
(13,data)
(14,(short)
(15,RET)
(16,globalReturnsTrue()
(17,)
(18,printIntLine(result)
(19,data)
(20,data = 0)
(21,result)
(22,result = data * data)
(23,if(globalReturnsTrue()
(24,data)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^