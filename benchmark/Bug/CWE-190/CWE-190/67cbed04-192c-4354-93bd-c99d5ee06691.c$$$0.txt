-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_add_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,71,75,77
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_add_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_add_17_bad()
CWE190_Integer_Overflow__short_fscanf_add_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,2,0)
(15,26,0)
(11,13,0)
(9,18,0)
(5,1,0)
(4,18,0)
(18,1,0)
(23,14,0)
(34,1,0)
(38,23,0)
(20,3,0)
(21,17,0)
(31,34,0)
(12,3,0)
(26,13,0)
(7,3,0)
(24,13,0)
(8,10,0)
(29,23,0)
(22,2,0)
(10,25,0)
(33,22,0)
(28,38,0)
(0,23,0)
(29,22,0)
(30,17,0)
(36,29,0)
(19,22,0)
(35,10,0)
(17,13,0)
(38,29,0)
(39,10,0)
(32,2,0)
(35,2,0)
(27,3,0)
(41,3,0)
(10,35,0)
(37,1,0)
(2,3,0)
(6,35,0)
(22,29,0)
(18,1,1)
(9,34,1)
(9,1,1)
(2,32,1)
(11,24,1)
(38,28,1)
(34,31,1)
(33,19,1)
(17,13,1)
(26,13,1)
(4,9,1)
(39,17,1)
(26,15,1)
(24,2,1)
(38,29,1)
(19,36,1)
(8,39,1)
(17,30,1)
(29,22,1)
(28,29,1)
(21,26,1)
(40,18,1)
(37,17,1)
(22,33,1)
(21,13,1)
(1,5,1)
(35,6,1)
(34,1,1)
(35,2,1)
(6,8,1)
(36,18,1)
(18,4,1)
(31,38,1)
(22,2,1)
(5,37,1)
(30,21,1)
(10,35,1)
(32,16,1)
(13,11,1)
(15,10,1)
(19,18,2)
(29,18,2)
(18,1,2)
(30,17,2)
(38,18,2)
(35,17,2)
(34,1,2)
(34,18,2)
(39,17,2)
(9,18,2)
(36,18,2)
(22,2,2)
(29,22,2)
(33,18,2)
(4,18,2)
(18,18,2)
(31,18,2)
(8,17,2)
(22,18,2)
(21,17,2)
(6,17,2)
(38,29,2)
(28,18,2)
(10,35,2)
(26,17,2)
(10,17,2)
(35,2,2)
(17,17,2)
(26,13,2)
(15,17,2)
(17,13,2)
-----------------------------------
(0,result)
(1,j = 0)
(2,data = 0)
(3,)
(4,1)
(5,0)
(6,data)
(7,for(j = 0; j < 1; j++)
(8,"%hd")
(9,j)
(10,fscanf (stdin, "%hd", &data)
(11,0)
(12,data)
(13,i = 0)
(14,)
(15,i)
(16,data)
(17,i < 1)
(18,j < 1)
(19,data)
(20,j)
(21,i)
(22,data + 1)
(23,)
(24,i)
(25,)
(26,i++)
(27,for(i = 0; i < 1; i++)
(28,result)
(29,result = data + 1)
(30,1)
(31,j)
(32,0)
(33,1)
(34,j++)
(35,&data)
(36,result)
(37,j)
(38,printIntLine(result)
(39,stdin)
(40,RET)
(41,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^