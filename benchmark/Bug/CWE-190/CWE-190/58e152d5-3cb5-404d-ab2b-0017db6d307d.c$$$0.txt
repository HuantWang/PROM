-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_31_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        int dataCopy = data;
        int data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
56,58
56,59
57,58
58,59
58,60
60,61
60,62
62,63
63,64
65,66
66,67
66,68
68,69
68,70
70,71
71,72
73,74
73,75
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
82,83
82,84
84,85
85,86
85,87
86,87
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,49,54,55,59,61,64,67,69,72,76,77,81,83,87,88,92,94
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
74,75
74,76
85,86
85,87
-----guardedBy-----
33,49
76,87
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_31_bad(){    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_31_bad()
CWE190_Integer_Overflow__int_fgets_multiply_31_bad
{    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(35,39,0)
(4,13,0)
(40,9,0)
(37,13,0)
(41,11,0)
(2,16,0)
(13,4,0)
(10,29,0)
(11,37,0)
(19,3,0)
(16,2,0)
(37,39,0)
(22,13,0)
(20,9,0)
(38,20,0)
(32,46,0)
(31,11,0)
(9,32,0)
(42,39,0)
(17,46,0)
(2,11,0)
(44,34,0)
(8,46,0)
(46,30,0)
(9,20,0)
(47,2,0)
(12,9,0)
(14,3,0)
(39,30,0)
(28,30,0)
(25,30,0)
(34,16,0)
(11,28,0)
(3,11,0)
(1,7,0)
(15,28,0)
(23,16,0)
(37,28,0)
(0,28,0)
(26,32,0)
(34,7,0)
(18,9,0)
(13,36,0)
(6,32,0)
(21,28,0)
(27,37,0)
(43,4,0)
(45,2,0)
(16,7,0)
(4,32,0)
(24,37,0)
(33,10,0)
(10,33,1)
(43,22,1)
(39,42,1)
(26,6,1)
(4,43,1)
(4,32,1)
(37,24,1)
(3,11,1)
(31,41,1)
(3,19,1)
(45,47,1)
(32,26,1)
(34,16,1)
(11,37,1)
(44,16,1)
(18,12,1)
(20,38,1)
(47,23,1)
(41,37,1)
(24,27,1)
(14,11,1)
(37,13,1)
(5,34,1)
(6,39,1)
(23,3,1)
(33,20,1)
(40,18,1)
(11,31,1)
(37,39,1)
(9,40,1)
(12,32,1)
(22,20,1)
(27,10,1)
(5,3,1)
(42,35,1)
(13,4,1)
(27,13,1)
(34,44,1)
(20,9,1)
(19,14,1)
(38,9,1)
(9,32,1)
(2,45,1)
(2,11,1)
(16,2,1)
(16,3,2)
(4,20,2)
(37,39,2)
(2,11,2)
(16,2,2)
(3,11,2)
(22,20,2)
(20,9,2)
(34,16,2)
(13,20,2)
(33,20,2)
(10,20,2)
(9,32,2)
(13,4,2)
(23,3,2)
(37,13,2)
(2,3,2)
(45,3,2)
(34,3,2)
(47,3,2)
(4,32,2)
(44,3,2)
(11,37,2)
(43,20,2)
-----------------------------------
(0,if(data > 0)
(1,result)
(2,data * 2)
(3,data > 0)
(4,atoi(inputBuffer)
(5,RET)
(6,inputBuffer)
(7,)
(8,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,printLine("fgets()
(11,data = dataCopy)
(12,inputBuffer)
(13,data = atoi(inputBuffer)
(14,data)
(15,data)
(16,result = data * 2)
(17,inputBuffer)
(18,CHAR_ARRAY_SIZE)
(19,0)
(20,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,dataCopy)
(22,data)
(23,result)
(24,data)
(25,data)
(26,"")
(27,dataCopy)
(28,)
(29,)
(30,)
(31,dataCopy)
(32,inputBuffer[CHAR_ARRAY_SIZE] = "")
(33,"fgets()
(34,printIntLine(result)
(35,data)
(36,)
(37,dataCopy = data)
(38,NULL)
(39,data = 0)
(40,stdin)
(41,data)
(42,0)
(43,inputBuffer)
(44,result)
(45,2)
(46,)
(47,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^