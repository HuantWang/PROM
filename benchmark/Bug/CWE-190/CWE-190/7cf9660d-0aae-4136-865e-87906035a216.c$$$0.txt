-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
62,65
63,64
64,65
65,66
67,68
68,69
68,70
70,71
70,72
72,73
73,74
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,66,69,71,74,78,80
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_17_bad()
CWE190_Integer_Overflow__short_rand_postinc_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,26,0)
(2,32,0)
(33,3,0)
(34,23,0)
(14,40,0)
(22,37,0)
(24,40,0)
(19,23,0)
(22,16,0)
(4,20,0)
(27,23,0)
(6,10,0)
(9,32,0)
(20,3,0)
(17,8,0)
(12,38,0)
(5,15,0)
(37,22,0)
(37,35,0)
(7,37,0)
(26,22,0)
(8,3,0)
(25,38,0)
(20,37,0)
(10,40,0)
(8,15,0)
(20,15,0)
(30,38,0)
(33,8,0)
(36,23,0)
(39,30,0)
(31,38,0)
(32,40,0)
(3,29,0)
(0,23,0)
(16,22,0)
(8,37,0)
(1,30,0)
(13,15,0)
(15,23,0)
(18,33,0)
(11,3,0)
(41,12,0)
(28,8,0)
(1,39,1)
(41,33,1)
(6,37,1)
(39,38,1)
(15,5,1)
(30,1,1)
(30,38,1)
(12,41,1)
(22,16,1)
(32,40,1)
(17,28,1)
(25,32,1)
(33,8,1)
(14,15,1)
(28,20,1)
(40,24,1)
(32,2,1)
(4,30,1)
(21,30,1)
(18,8,1)
(2,9,1)
(9,40,1)
(9,10,1)
(8,17,1)
(5,13,1)
(20,15,1)
(39,12,1)
(24,14,1)
(16,7,1)
(20,4,1)
(7,32,1)
(8,37,1)
(22,26,1)
(38,31,1)
(20,37,1)
(10,6,1)
(8,15,1)
(12,38,1)
(37,22,1)
(31,25,1)
(10,40,1)
(33,18,1)
(8,15,2)
(20,15,2)
(8,30,2)
(20,30,2)
(22,26,2)
(32,40,2)
(8,37,2)
(2,32,2)
(10,32,2)
(4,30,2)
(6,32,2)
(9,32,2)
(22,16,2)
(7,32,2)
(33,8,2)
(1,30,2)
(28,30,2)
(10,40,2)
(37,22,2)
(16,32,2)
(33,30,2)
(30,38,2)
(39,30,2)
(30,30,2)
(32,32,2)
(41,30,2)
(37,32,2)
(12,30,2)
(12,38,2)
(18,30,2)
(20,37,2)
(17,30,2)
(22,32,2)
-----------------------------------
(0,j)
(1,1)
(2,1)
(3,)
(4,data)
(5,0)
(6,i)
(7,data)
(8,result = data)
(9,i)
(10,i++)
(11,result)
(12,j++)
(13,data)
(14,i)
(15,data = 0)
(16,RAND32()
(17,data)
(18,result)
(19,i)
(20,data++)
(21,RET)
(22,(short)
(23,)
(24,0)
(25,j)
(26,short)
(27,data)
(28,result)
(29,)
(30,j < 1)
(31,0)
(32,i < 1)
(33,printIntLine(result)
(34,for(i = 0; i < 1; i++)
(35,)
(36,for(j = 0; j < 1; j++)
(37,data = (short)
(38,j = 0)
(39,j)
(40,i = 0)
(41,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^