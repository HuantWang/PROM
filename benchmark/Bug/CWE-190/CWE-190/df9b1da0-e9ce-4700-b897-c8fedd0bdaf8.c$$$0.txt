-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_preinc_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_preinc_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_preinc_03_bad()
CWE190_Integer_Overflow__short_fscanf_preinc_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(2,13,0)
(8,6,0)
(23,25,0)
(18,20,0)
(15,24,0)
(28,3,0)
(28,24,0)
(1,25,0)
(18,24,0)
(26,28,0)
(19,6,0)
(23,20,0)
(24,0,0)
(3,10,0)
(25,24,0)
(14,0,0)
(20,12,0)
(25,20,0)
(4,25,0)
(27,20,0)
(3,28,0)
(16,18,0)
(21,3,0)
(5,0,0)
(9,3,0)
(7,0,0)
(22,24,0)
(11,23,0)
(29,13,0)
(1,18,1)
(18,16,1)
(9,6,1)
(11,25,1)
(22,15,1)
(23,11,1)
(19,24,1)
(28,24,1)
(25,4,1)
(13,2,1)
(24,22,1)
(6,8,1)
(4,1,1)
(17,13,1)
(26,21,1)
(25,24,1)
(29,3,1)
(23,25,1)
(8,19,1)
(2,29,1)
(18,24,1)
(16,13,1)
(3,28,1)
(21,9,1)
(17,23,1)
(28,26,1)
(29,6,1)
(9,6,2)
(28,6,2)
(25,13,2)
(26,6,2)
(18,24,2)
(3,6,2)
(16,13,2)
(3,28,2)
(23,13,2)
(1,13,2)
(21,6,2)
(18,13,2)
(11,13,2)
(28,24,2)
(23,25,2)
(25,24,2)
(4,13,2)
-----------------------------------
(0,)
(1,result)
(2,5)
(3,fscanf (stdin, "%hd", &data)
(4,data)
(5,if(5==5)
(6,5==5)
(7,data)
(8,5)
(9,stdin)
(10,)
(11,result)
(12,)
(13,5==5)
(14,if(5==5)
(15,data)
(16,data)
(17,RET)
(18,++data)
(19,5)
(20,)
(21,"%hd")
(22,0)
(23,printIntLine(result)
(24,data = 0)
(25,result = data)
(26,data)
(27,result)
(28,&data)
(29,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^