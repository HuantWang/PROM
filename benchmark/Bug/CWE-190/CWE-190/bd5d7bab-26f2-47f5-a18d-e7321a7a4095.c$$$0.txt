-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_add_34_bad()
{
    int64_t data;
    CWE190_Integer_Overflow__int64_t_rand_add_34_unionType myUnion;
    data = 0LL;
    /* POTENTIAL FLAW: Use a random value */
    data = (int64_t)RAND64();
    myUnion.unionFirst = data;
    {
        int64_t data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int64_t result = data + 1;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,9,11,15,17,21,22,26,30,31,34,39,40,42,47,49,53,54,59,61,65,66,70,72
-----computeFrom-----
19,20
19,21
24,25
24,26
36,37
36,38
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_add_34_bad(){    int64_t data;    CWE190_Integer_Overflow__int64_t_rand_add_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_add_34_bad()
CWE190_Integer_Overflow__int64_t_rand_add_34_bad
{    int64_t data;    CWE190_Integer_Overflow__int64_t_rand_add_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
CWE190_Integer_Overflow__int64_t_rand_add_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_rand_add_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_rand_add_34_unionType
CWE190_Integer_Overflow__int64_t_rand_add_34_unionType
myUnion
myUnion
data = 0LL;
data = 0LL
data
data
0LL
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }
int64_t data = myUnion.unionSecond;
int64_t data = myUnion.unionSecond;
int64_t
int64_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }
int64_t result = data + 1;
int64_t result = data + 1;
int64_t
int64_t
result = data + 1
result
= data + 1
data + 1
data
data
1
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(5,2,0)
(12,23,0)
(21,27,0)
(13,8,0)
(15,19,0)
(7,3,0)
(1,23,0)
(2,23,0)
(8,5,0)
(5,8,0)
(30,23,0)
(19,21,0)
(0,22,0)
(27,5,0)
(17,10,0)
(28,0,0)
(0,1,0)
(0,28,0)
(3,1,0)
(18,2,0)
(22,0,0)
(16,5,0)
(6,1,0)
(4,27,0)
(25,23,0)
(3,23,0)
(10,3,0)
(11,8,0)
(14,18,0)
(27,21,0)
(20,2,0)
(24,10,0)
(1,0,0)
(21,18,0)
(29,21,0)
(9,27,0)
(19,18,0)
(29,5,1)
(27,5,1)
(26,19,1)
(5,8,1)
(0,28,1)
(13,16,1)
(4,29,1)
(15,21,1)
(10,17,1)
(6,25,1)
(3,1,1)
(24,1,1)
(27,9,1)
(1,0,1)
(0,22,1)
(7,10,1)
(21,27,1)
(8,11,1)
(19,21,1)
(19,15,1)
(17,24,1)
(28,6,1)
(9,4,1)
(3,7,1)
(16,3,1)
(11,13,1)
(0,22,2)
(19,21,2)
(27,5,2)
(21,27,2)
(1,0,2)
(3,1,2)
(0,28,2)
(5,8,2)
-----------------------------------
(0,(int64_t)
(1,data = (int64_t)
(2,)
(3,myUnion.unionFirst = data)
(4,data)
(5,data = myUnion.unionSecond)
(6,data)
(7,data)
(8,myUnion.unionSecond)
(9,1)
(10,myUnion.unionFirst)
(11,unionSecond)
(12,data)
(13,myUnion)
(14,result)
(15,result)
(16,data)
(17,unionFirst)
(18,)
(19,printLongLongLine(result)
(20,data)
(21,result = data + 1)
(22,int64_t)
(23,)
(24,myUnion)
(25,L)
(26,RET)
(27,data + 1)
(28,RAND64()
(29,result)
(30,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^