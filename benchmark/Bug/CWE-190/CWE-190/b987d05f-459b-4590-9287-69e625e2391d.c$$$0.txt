-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
75,76
75,77
77,78
77,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,78,82,84,88,90
-----computeFrom-----
32,33
32,34
57,58
57,59
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_32_bad()
CWE190_Integer_Overflow__short_fscanf_square_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(43,2,0)
(42,15,0)
(9,36,0)
(32,15,0)
(41,12,0)
(1,36,0)
(44,1,0)
(0,6,0)
(11,43,0)
(18,10,0)
(38,20,0)
(17,18,0)
(45,7,0)
(5,2,0)
(15,7,0)
(29,3,0)
(30,36,0)
(10,36,0)
(13,39,0)
(15,4,0)
(14,25,0)
(44,7,0)
(27,21,0)
(35,18,0)
(39,8,0)
(2,36,0)
(4,15,0)
(7,44,0)
(33,1,0)
(22,39,0)
(4,18,0)
(28,21,0)
(8,39,0)
(8,43,0)
(7,10,0)
(40,35,0)
(35,4,0)
(34,4,0)
(39,2,0)
(19,44,0)
(6,36,0)
(12,25,0)
(28,43,0)
(21,36,0)
(37,28,0)
(25,2,0)
(25,43,0)
(31,6,0)
(16,36,0)
(12,21,0)
(1,3,0)
(24,10,0)
(43,28,0)
(20,21,0)
(3,1,0)
(21,20,0)
(26,8,0)
(19,45,1)
(23,35,1)
(31,1,1)
(6,0,1)
(15,32,1)
(25,14,1)
(43,28,1)
(3,29,1)
(12,41,1)
(35,40,1)
(28,21,1)
(40,4,1)
(45,25,1)
(42,34,1)
(7,44,1)
(33,21,1)
(13,43,1)
(4,15,1)
(25,43,1)
(44,1,1)
(20,38,1)
(12,21,1)
(15,7,1)
(1,3,1)
(0,31,1)
(35,4,1)
(39,8,1)
(29,33,1)
(44,19,1)
(8,26,1)
(21,20,1)
(22,13,1)
(41,39,1)
(34,7,1)
(14,12,1)
(38,27,1)
(32,42,1)
(26,22,1)
(37,11,1)
(8,43,1)
(28,37,1)
(11,6,1)
(15,7,2)
(35,4,2)
(7,44,2)
(43,28,2)
(39,8,2)
(8,43,2)
(21,20,2)
(25,43,2)
(12,21,2)
(28,21,2)
(1,3,2)
(44,1,2)
(4,15,2)
-----------------------------------
(0,0)
(1,*dataPtr2 = &data)
(2,)
(3,&data)
(4,result = data * data)
(5,data)
(6,data = 0)
(7,data = *dataPtr2)
(8,&data)
(9,data)
(10,)
(11,data)
(12,*dataPtr1)
(13,stdin)
(14,data)
(15,data * data)
(16,dataPtr2)
(17,result)
(18,)
(19,dataPtr2)
(20,&data)
(21,*dataPtr1 = &data)
(22,"%hd")
(23,RET)
(24,data)
(25,*dataPtr1 = data)
(26,data)
(27,dataPtr1)
(28,*dataPtr1)
(29,data)
(30,dataPtr1)
(31,data)
(32,data)
(33,dataPtr2)
(34,result)
(35,printIntLine(result)
(36,)
(37,dataPtr1)
(38,data)
(39,fscanf (stdin, "%hd", &data)
(40,result)
(41,dataPtr1)
(42,data)
(43,data = *dataPtr1)
(44,*dataPtr2)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^