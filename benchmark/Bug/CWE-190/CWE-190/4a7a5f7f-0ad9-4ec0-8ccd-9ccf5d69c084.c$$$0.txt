-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,42,46,48,52,53,57,59
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
39,40
39,41
50,51
50,52
-----guardedBy-----
41,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_14_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,18,0)
(25,14,0)
(27,15,0)
(31,6,0)
(19,14,0)
(30,21,0)
(15,21,0)
(4,12,0)
(22,15,0)
(33,30,0)
(2,18,0)
(11,18,0)
(7,21,0)
(28,23,0)
(17,7,0)
(10,21,0)
(32,21,0)
(18,26,0)
(20,24,0)
(9,6,0)
(31,5,0)
(13,30,0)
(18,7,0)
(3,24,0)
(6,5,0)
(29,5,0)
(6,15,0)
(21,24,0)
(15,6,0)
(0,12,0)
(16,24,0)
(1,31,0)
(1,6,1)
(25,19,1)
(27,22,1)
(12,4,1)
(8,31,1)
(11,2,1)
(30,21,1)
(30,33,1)
(14,25,1)
(15,27,1)
(7,17,1)
(13,14,1)
(18,7,1)
(9,30,1)
(2,12,1)
(15,21,1)
(17,11,1)
(6,15,1)
(33,13,1)
(4,0,1)
(31,6,1)
(8,14,1)
(22,9,1)
(10,32,1)
(8,30,1)
(19,18,1)
(7,21,1)
(0,21,1)
(21,10,1)
(19,12,1)
(31,1,1)
(6,15,2)
(30,21,2)
(31,30,2)
(2,12,2)
(6,30,2)
(30,14,2)
(9,30,2)
(1,30,2)
(7,12,2)
(17,12,2)
(7,21,2)
(27,30,2)
(18,12,2)
(11,12,2)
(22,30,2)
(15,30,2)
(33,14,2)
(13,14,2)
(15,21,2)
(31,6,2)
(18,7,2)
-----------------------------------
(0,globalFive)
(1,result)
(2,stdin)
(3,if(globalFive==5)
(4,5)
(5,)
(6,result = data * 2)
(7,&data)
(8,RET)
(9,result)
(10,0)
(11,"%d")
(12,globalFive==5)
(13,data)
(14,globalFive==5)
(15,data * 2)
(16,if(globalFive==5)
(17,data)
(18,fscanf(stdin, "%d", &data)
(19,globalFive)
(20,data)
(21,data = 0)
(22,data)
(23,)
(24,)
(25,5)
(26,)
(27,2)
(28,if(data > 0)
(29,result)
(30,data > 0)
(31,printIntLine(result)
(32,data)
(33,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^