-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_13_bad()
CWE190_Integer_Overflow__char_rand_square_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,12,0)
(17,15,0)
(28,1,0)
(27,20,0)
(22,12,0)
(30,8,0)
(14,27,0)
(6,25,0)
(26,25,0)
(5,25,0)
(3,8,0)
(4,14,0)
(23,16,0)
(22,9,0)
(14,22,0)
(10,12,0)
(12,22,0)
(14,1,0)
(7,1,0)
(11,14,0)
(0,22,0)
(19,27,0)
(12,10,0)
(12,21,0)
(27,14,0)
(20,24,0)
(15,27,0)
(18,20,0)
(29,16,0)
(15,20,0)
(1,25,0)
(0,8,1)
(14,22,1)
(1,7,1)
(19,16,1)
(7,28,1)
(29,22,1)
(14,4,1)
(2,15,1)
(30,3,1)
(23,29,1)
(22,12,1)
(15,17,1)
(14,1,1)
(2,16,1)
(17,27,1)
(3,1,1)
(10,0,1)
(11,19,1)
(27,14,1)
(15,27,1)
(8,30,1)
(12,10,1)
(4,11,1)
(29,8,1)
(16,23,1)
(12,21,1)
(22,8,2)
(27,14,2)
(4,16,2)
(19,16,2)
(15,16,2)
(17,16,2)
(10,8,2)
(12,8,2)
(12,21,2)
(22,12,2)
(14,22,2)
(14,1,2)
(11,16,2)
(27,16,2)
(0,8,2)
(14,16,2)
(15,27,2)
(12,10,2)
-----------------------------------
(0,data)
(1,data = ' ')
(2,RET)
(3,GLOBAL_CONST_FIVE)
(4,data)
(5,if(GLOBAL_CONST_FIVE==5)
(6,if(GLOBAL_CONST_FIVE==5)
(7,' ')
(8,GLOBAL_CONST_FIVE==5)
(9,)
(10,RAND32()
(11,data)
(12,(char)
(13,data = \' \')
(14,data * data)
(15,printHexCharLine(result)
(16,GLOBAL_CONST_FIVE==5)
(17,result)
(18,result)
(19,result)
(20,)
(21,char)
(22,data = (char)
(23,5)
(24,)
(25,)
(26,data)
(27,result = data * data)
(28,data)
(29,GLOBAL_CONST_FIVE)
(30,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^