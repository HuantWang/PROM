-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,42,46,48,52,53,57,59
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
39,40
39,41
50,51
50,52
-----guardedBy-----
41,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_13_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(25,21,0)
(33,8,0)
(31,18,0)
(10,7,0)
(32,8,0)
(12,26,0)
(24,17,0)
(8,14,0)
(14,3,0)
(1,14,0)
(11,31,0)
(6,28,0)
(18,19,0)
(9,21,0)
(15,3,0)
(27,18,0)
(26,14,0)
(20,19,0)
(31,5,0)
(22,13,0)
(18,31,0)
(19,17,0)
(29,17,0)
(30,28,0)
(26,3,0)
(8,19,0)
(21,19,0)
(2,19,0)
(16,31,0)
(0,13,0)
(23,17,0)
(14,8,0)
(30,13,1)
(20,2,1)
(16,11,1)
(18,27,1)
(1,21,1)
(4,28,1)
(32,33,1)
(26,12,1)
(26,14,1)
(4,21,1)
(25,9,1)
(18,19,1)
(12,14,1)
(4,26,1)
(21,19,1)
(8,32,1)
(0,22,1)
(21,25,1)
(31,18,1)
(30,31,1)
(6,30,1)
(8,19,1)
(19,20,1)
(14,8,1)
(9,28,1)
(22,19,1)
(28,6,1)
(13,0,1)
(27,16,1)
(11,13,1)
(33,1,1)
(18,19,2)
(1,21,2)
(9,28,2)
(14,8,2)
(11,13,2)
(14,21,2)
(31,13,2)
(21,28,2)
(8,21,2)
(33,21,2)
(18,13,2)
(25,28,2)
(12,21,2)
(26,21,2)
(16,13,2)
(26,14,2)
(21,19,2)
(8,19,2)
(32,21,2)
(31,18,2)
(27,13,2)
-----------------------------------
(0,5)
(1,result)
(2,data)
(3,)
(4,RET)
(5,)
(6,5)
(7,)
(8,data * 2)
(9,data)
(10,if(data > 0)
(11,stdin)
(12,result)
(13,GLOBAL_CONST_FIVE==5)
(14,result = data * 2)
(15,result)
(16,"%c")
(17,)
(18,&data)
(19,data = \\\' \\\')
(20,\\\' \\\')
(21,data > 0)
(22,GLOBAL_CONST_FIVE)
(23,if(GLOBAL_CONST_FIVE==5)
(24,data)
(25,0)
(26,printHexCharLine(result)
(27,data)
(28,GLOBAL_CONST_FIVE==5)
(29,if(GLOBAL_CONST_FIVE==5)
(30,GLOBAL_CONST_FIVE)
(31,fscanf (stdin, "%c", &data)
(32,2)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^