-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_02_bad()
{
    unsigned int data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
29,30
29,31
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_02_bad(){    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_02_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_02_bad
{    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(9,16,0)
(0,24,0)
(19,16,0)
(3,17,0)
(11,3,0)
(21,3,0)
(8,26,0)
(28,19,0)
(27,17,0)
(13,17,0)
(21,8,0)
(5,8,0)
(6,16,0)
(9,19,0)
(10,29,0)
(15,28,0)
(19,28,0)
(14,28,0)
(7,21,0)
(23,8,0)
(24,3,0)
(8,21,0)
(22,24,0)
(25,3,0)
(18,9,0)
(20,19,0)
(2,17,0)
(28,3,0)
(14,20,1)
(21,3,1)
(1,8,1)
(15,14,1)
(22,0,1)
(12,9,1)
(3,25,1)
(24,3,1)
(21,7,1)
(7,23,1)
(9,18,1)
(28,15,1)
(20,24,1)
(9,19,1)
(12,24,1)
(19,28,1)
(5,4,1)
(12,1,1)
(28,3,1)
(18,19,1)
(0,1,1)
(25,11,1)
(1,4,1)
(4,3,1)
(23,5,1)
(24,22,1)
(8,21,1)
(28,3,2)
(19,28,2)
(19,24,2)
(18,24,2)
(23,4,2)
(24,1,2)
(28,24,2)
(5,4,2)
(22,1,2)
(15,24,2)
(21,3,2)
(21,4,2)
(20,24,2)
(8,4,2)
(7,4,2)
(8,21,2)
(0,1,2)
(9,24,2)
(14,24,2)
(24,3,2)
(9,19,2)
-----------------------------------
(0,data)
(1,1)
(2,if(1)
(3,data = 0)
(4,1)
(5,stdin)
(6,result)
(7,data)
(8,fscanf (stdin, "%u", &data)
(9,printUnsignedLine(result)
(10,if(data > 0)
(11,data)
(12,RET)
(13,if(1)
(14,data)
(15,2)
(16,)
(17,)
(18,result)
(19,result = data * 2)
(20,result)
(21,&data)
(22,0)
(23,"%u")
(24,data > 0)
(25,0)
(26,)
(27,data)
(28,data * 2)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^