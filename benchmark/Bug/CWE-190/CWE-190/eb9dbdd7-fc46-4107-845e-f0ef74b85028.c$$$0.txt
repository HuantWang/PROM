-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
60,61
60,62
62,63
62,64
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,52,57,58,59,61,66,68,72,74,78,80,81
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
70,71
70,72
-----guardedBy-----
36,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_fgets_square_16_bad()
CWE190_Integer_Overflow__int_fgets_square_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(32,17,0)
(21,26,0)
(1,41,0)
(26,11,0)
(9,30,0)
(25,32,0)
(9,5,0)
(4,12,0)
(21,29,0)
(0,5,0)
(37,15,0)
(31,26,0)
(28,9,0)
(36,30,0)
(33,15,0)
(7,12,0)
(27,30,0)
(29,21,0)
(13,40,0)
(19,9,0)
(41,29,0)
(30,4,0)
(35,29,0)
(22,27,0)
(5,9,0)
(16,4,0)
(10,21,0)
(2,38,0)
(18,30,0)
(26,27,0)
(29,32,0)
(41,32,0)
(20,4,0)
(24,38,0)
(27,26,0)
(21,38,0)
(6,9,0)
(38,15,0)
(42,17,0)
(23,21,0)
(40,14,0)
(3,15,0)
(21,26,1)
(39,8,1)
(9,6,1)
(36,8,1)
(31,5,1)
(18,36,1)
(1,29,1)
(41,29,1)
(21,38,1)
(7,40,1)
(22,31,1)
(28,30,1)
(8,38,1)
(9,30,1)
(27,22,1)
(26,27,1)
(0,9,1)
(13,5,1)
(23,10,1)
(29,21,1)
(42,41,1)
(10,35,1)
(21,23,1)
(39,7,1)
(19,28,1)
(40,13,1)
(34,42,1)
(38,24,1)
(27,30,1)
(35,39,1)
(6,19,1)
(34,39,1)
(5,0,1)
(30,18,1)
(24,2,1)
(7,26,1)
(41,1,1)
(5,9,1)
(28,8,2)
(31,5,2)
(23,39,2)
(6,8,2)
(9,30,2)
(27,30,2)
(41,39,2)
(21,26,2)
(21,38,2)
(40,5,2)
(19,8,2)
(5,9,2)
(36,8,2)
(7,8,2)
(41,29,2)
(26,5,2)
(5,8,2)
(13,5,2)
(1,39,2)
(27,5,2)
(29,39,2)
(30,8,2)
(10,39,2)
(42,39,2)
(18,8,2)
(0,8,2)
(21,39,2)
(35,39,2)
(29,21,2)
(22,5,2)
(26,27,2)
(9,8,2)
-----------------------------------
(0,NULL)
(1,result)
(2,data)
(3,data)
(4,)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,stdin)
(7,break;)
(8,1)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,data)
(11,)
(12,)
(13,"fgets()
(14,)
(15,)
(16,inputBuffer)
(17,)
(18,"")
(19,CHAR_ARRAY_SIZE)
(20,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,data * data)
(22,inputBuffer)
(23,data)
(24,0)
(25,result)
(26,data = atoi(inputBuffer)
(27,atoi(inputBuffer)
(28,inputBuffer)
(29,result = data * data)
(30,inputBuffer[CHAR_ARRAY_SIZE] = "")
(31,data)
(32,)
(33,while(1)
(34,RET)
(35,result)
(36,inputBuffer)
(37,while(1)
(38,data = 0)
(39,1)
(40,printLine("fgets()
(41,printIntLine(result)
(42,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^