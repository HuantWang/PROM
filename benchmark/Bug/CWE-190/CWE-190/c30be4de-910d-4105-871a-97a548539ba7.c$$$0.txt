-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_add_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_rand_add_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,33,34,36,40,42,46,47,51,53,57,58,62,64
-----computeFrom-----
18,19
18,20
23,24
23,25
30,31
30,32
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_add_34_bad(){    int data;    CWE190_Integer_Overflow__int_rand_add_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_add_34_bad()
CWE190_Integer_Overflow__int_rand_add_34_bad
{    int data;    CWE190_Integer_Overflow__int_rand_add_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_rand_add_34_unionType myUnion;
CWE190_Integer_Overflow__int_rand_add_34_unionType myUnion;
CWE190_Integer_Overflow__int_rand_add_34_unionType
CWE190_Integer_Overflow__int_rand_add_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,22,0)
(7,6,0)
(12,16,0)
(30,22,0)
(15,20,0)
(26,20,0)
(13,26,0)
(19,16,0)
(16,19,0)
(8,20,0)
(17,2,0)
(24,19,0)
(16,23,0)
(2,20,0)
(18,2,0)
(23,6,0)
(28,20,0)
(24,25,0)
(18,20,0)
(5,19,0)
(25,15,0)
(11,6,0)
(23,15,0)
(3,15,0)
(22,18,0)
(6,23,0)
(27,18,0)
(10,26,0)
(4,2,0)
(9,25,0)
(1,24,0)
(14,23,0)
(0,16,0)
(2,4,0)
(19,25,0)
(24,1,1)
(17,26,1)
(19,16,1)
(30,2,1)
(16,0,1)
(16,23,1)
(12,5,1)
(2,4,1)
(27,22,1)
(0,12,1)
(21,30,1)
(22,21,1)
(29,24,1)
(7,11,1)
(5,23,1)
(14,18,1)
(26,13,1)
(11,14,1)
(6,7,1)
(24,19,1)
(13,10,1)
(1,19,1)
(18,27,1)
(23,6,1)
(18,2,1)
(4,17,1)
(18,2,2)
(19,16,2)
(2,4,2)
(16,23,2)
(24,19,2)
(23,6,2)
-----------------------------------
(0,1)
(1,result)
(2,data = RAND32()
(3,data)
(4,RAND32()
(5,result)
(6,myUnion.unionSecond)
(7,unionSecond)
(8,myUnion)
(9,result)
(10,data)
(11,myUnion)
(12,data)
(13,0)
(14,data)
(15,)
(16,data + 1)
(17,data)
(18,myUnion.unionFirst = data)
(19,result = data + 1)
(20,)
(21,unionFirst)
(22,myUnion.unionFirst)
(23,data = myUnion.unionSecond)
(24,printIntLine(result)
(25,)
(26,data = 0)
(27,data)
(28,data)
(29,RET)
(30,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^