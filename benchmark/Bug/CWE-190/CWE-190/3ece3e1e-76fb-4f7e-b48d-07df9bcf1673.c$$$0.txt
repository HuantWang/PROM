-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_08_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,9,0)
(10,15,0)
(24,25,0)
(21,3,0)
(10,3,0)
(1,3,0)
(13,5,0)
(20,5,0)
(19,25,0)
(12,9,0)
(12,15,0)
(0,24,0)
(8,12,0)
(3,4,0)
(16,15,0)
(18,5,0)
(22,10,0)
(15,5,0)
(6,15,0)
(9,11,0)
(3,10,0)
(14,25,0)
(7,9,0)
(25,9,0)
(25,15,0)
(22,1,1)
(2,23,1)
(8,2,1)
(25,14,1)
(12,15,1)
(19,12,1)
(25,15,1)
(0,25,1)
(10,22,1)
(10,15,1)
(17,24,1)
(1,21,1)
(17,2,1)
(23,15,1)
(15,6,1)
(6,16,1)
(24,25,1)
(2,3,1)
(24,0,1)
(14,19,1)
(12,8,1)
(21,23,1)
(3,10,1)
(3,23,2)
(14,2,2)
(25,2,2)
(8,2,2)
(25,15,2)
(24,2,2)
(10,23,2)
(21,23,2)
(3,10,2)
(10,15,2)
(22,23,2)
(12,2,2)
(12,15,2)
(0,2,2)
(19,2,2)
(1,23,2)
(24,25,2)
-----------------------------------
(0,result)
(1,"%c")
(2,staticReturnsTrue()
(3,fscanf (stdin, "%c", &data)
(4,)
(5,)
(6,\\\' \\\')
(7,result)
(8,data)
(9,)
(10,&data)
(11,)
(12,data++)
(13,if(staticReturnsTrue()
(14,data)
(15,data = \\\' \\\')
(16,data)
(17,RET)
(18,if(staticReturnsTrue()
(19,result)
(20,data)
(21,stdin)
(22,data)
(23,staticReturnsTrue()
(24,printHexCharLine(result)
(25,result = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^