-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_11_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
22,23
22,24
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_11_bad(){    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_11_bad()
CWE190_Integer_Overflow__char_rand_add_11_bad
{    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(17,15,0)
(24,1,0)
(3,18,0)
(16,2,0)
(3,26,0)
(26,24,0)
(24,6,0)
(12,2,0)
(26,5,0)
(8,1,0)
(0,18,0)
(15,18,0)
(21,26,0)
(5,2,0)
(1,24,0)
(18,23,0)
(7,3,0)
(26,3,0)
(22,26,0)
(1,8,0)
(20,5,0)
(1,19,0)
(19,1,0)
(11,5,0)
(15,3,0)
(14,24,0)
(25,2,0)
(17,3,1)
(9,5,1)
(4,24,1)
(20,11,1)
(24,1,1)
(3,26,1)
(5,20,1)
(8,14,1)
(1,19,1)
(15,17,1)
(1,8,1)
(26,24,1)
(22,7,1)
(4,9,1)
(26,21,1)
(14,9,1)
(15,3,1)
(21,22,1)
(26,5,1)
(13,15,1)
(7,4,1)
(13,4,1)
(17,4,2)
(15,4,2)
(3,26,2)
(1,8,2)
(14,9,2)
(7,4,2)
(8,9,2)
(24,9,2)
(22,4,2)
(26,24,2)
(26,5,2)
(1,9,2)
(1,19,2)
(3,4,2)
(21,4,2)
(26,4,2)
(15,3,2)
(24,1,2)
-----------------------------------
(0,result)
(1,(char)
(2,)
(3,result = data + 1)
(4,globalReturnsTrue()
(5,data = \' \')
(6,)
(7,result)
(8,RAND32()
(9,globalReturnsTrue()
(10,data = ' ')
(11,data)
(12,if(globalReturnsTrue()
(13,RET)
(14,data)
(15,printHexCharLine(result)
(16,data)
(17,result)
(18,)
(19,char)
(20,' ')
(21,1)
(22,data)
(23,)
(24,data = (char)
(25,if(globalReturnsTrue()
(26,data + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^