-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_31_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    {
        short dataCopy = data;
        short data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,47,51,53,57,58,62,64
-----computeFrom-----
12,13
12,14
44,45
44,46
55,56
55,57
-----guardedBy-----
46,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_31_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_31_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_31_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    {        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,24,0)
(29,5,0)
(23,15,0)
(5,25,0)
(15,25,0)
(24,18,0)
(0,18,0)
(8,29,0)
(12,18,0)
(24,7,0)
(13,12,0)
(31,28,0)
(27,6,0)
(7,24,0)
(17,25,0)
(30,8,0)
(6,5,0)
(32,5,0)
(28,14,0)
(4,15,0)
(28,15,0)
(16,14,0)
(6,14,0)
(11,7,0)
(22,7,0)
(21,8,0)
(3,5,0)
(10,6,0)
(15,28,0)
(26,29,0)
(14,25,0)
(19,14,0)
(7,29,0)
(20,24,0)
(2,29,0)
(29,6,0)
(9,5,0)
(8,30,1)
(6,14,1)
(31,4,1)
(24,7,1)
(29,6,1)
(23,14,1)
(7,29,1)
(30,21,1)
(6,10,1)
(2,26,1)
(29,2,1)
(10,27,1)
(4,23,1)
(15,28,1)
(11,20,1)
(12,13,1)
(20,8,1)
(1,12,1)
(12,24,1)
(21,29,1)
(13,24,1)
(28,31,1)
(22,11,1)
(27,15,1)
(28,14,1)
(16,19,1)
(8,29,1)
(7,22,1)
(1,8,1)
(26,6,1)
(14,16,1)
(22,8,2)
(24,8,2)
(6,14,2)
(20,8,2)
(12,24,2)
(7,29,2)
(11,8,2)
(7,8,2)
(13,8,2)
(28,14,2)
(8,29,2)
(29,6,2)
(15,28,2)
(24,7,2)
(12,8,2)
-----------------------------------
(0,result)
(1,RET)
(2,dataCopy)
(3,dataCopy)
(4,"%hd")
(5,)
(6,dataCopy = data)
(7,data * 2)
(8,data > 0)
(9,data)
(10,data)
(11,data)
(12,printIntLine(result)
(13,result)
(14,data = 0)
(15,fscanf (stdin, "%hd", &data)
(16,0)
(17,data)
(18,)
(19,data)
(20,result)
(21,data)
(22,2)
(23,stdin)
(24,result = data * 2)
(25,)
(26,data)
(27,dataCopy)
(28,&data)
(29,data = dataCopy)
(30,0)
(31,data)
(32,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^