-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,38,42,44,48,50,51
-----computeFrom-----
12,13
12,14
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_fscanf_square_16_bad()
CWE190_Integer_Overflow__char_fscanf_square_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(17,5,0)
(16,6,0)
(3,6,0)
(27,9,0)
(8,0,0)
(23,20,0)
(6,11,0)
(6,22,0)
(2,5,0)
(15,18,0)
(0,9,0)
(24,11,0)
(9,0,0)
(11,6,0)
(13,14,0)
(20,9,0)
(11,2,0)
(7,5,0)
(0,2,0)
(4,0,0)
(9,18,0)
(18,14,0)
(19,2,0)
(25,2,0)
(12,5,0)
(21,22,0)
(20,18,0)
(0,2,1)
(1,21,1)
(13,20,1)
(0,8,1)
(4,27,1)
(20,9,1)
(10,13,1)
(20,23,1)
(25,19,1)
(2,25,1)
(27,1,1)
(11,24,1)
(26,2,1)
(11,2,1)
(6,11,1)
(3,26,1)
(9,0,1)
(23,9,1)
(1,26,1)
(21,6,1)
(10,1,1)
(8,4,1)
(24,16,1)
(16,3,1)
(23,1,2)
(27,1,2)
(3,26,2)
(4,1,2)
(13,1,2)
(20,1,2)
(6,26,2)
(20,9,2)
(6,11,2)
(0,1,2)
(21,26,2)
(16,26,2)
(11,2,2)
(9,0,2)
(9,1,2)
(11,26,2)
(24,26,2)
(8,1,2)
(0,2,2)
-----------------------------------
(0,data * data)
(1,1)
(2,data = \\\' \\\')
(3,stdin)
(4,data)
(5,)
(6,fscanf (stdin, "%c", &data)
(7,while(1)
(8,data)
(9,result = data * data)
(10,RET)
(11,&data)
(12,while(1)
(13,break;)
(14,)
(15,result)
(16,"%c")
(17,data)
(18,)
(19,data)
(20,printHexCharLine(result)
(21,break;)
(22,)
(23,result)
(24,data)
(25,\\\' \\\')
(26,1)
(27,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^