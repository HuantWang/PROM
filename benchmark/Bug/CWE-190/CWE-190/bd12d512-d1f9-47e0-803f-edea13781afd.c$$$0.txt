-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_16_bad()
{
    unsigned int data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,37,41,43,47,48,52,54,55
-----computeFrom-----
12,13
12,14
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_16_bad(){    unsigned int data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_16_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_16_bad
{    unsigned int data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
-----joern-----
(18,8,0)
(3,31,0)
(13,29,0)
(15,8,0)
(7,17,0)
(23,31,0)
(22,3,0)
(26,23,0)
(10,31,0)
(0,1,0)
(9,8,0)
(23,1,0)
(27,6,0)
(29,1,0)
(19,6,0)
(11,20,0)
(2,14,0)
(25,17,0)
(31,8,0)
(30,31,0)
(24,28,0)
(6,3,0)
(21,23,0)
(1,20,0)
(16,14,0)
(6,28,0)
(3,6,0)
(17,31,0)
(29,20,0)
(1,23,0)
(23,21,1)
(10,30,1)
(31,10,1)
(19,12,1)
(13,1,1)
(4,16,1)
(29,13,1)
(16,17,1)
(24,6,1)
(4,5,1)
(27,19,1)
(5,12,1)
(29,1,1)
(12,31,1)
(17,31,1)
(5,24,1)
(3,22,1)
(3,31,1)
(23,31,1)
(21,26,1)
(1,23,1)
(16,29,1)
(22,27,1)
(7,5,1)
(26,0,1)
(6,3,1)
(0,17,1)
(25,7,1)
(17,25,1)
(7,5,2)
(0,17,2)
(6,3,2)
(13,17,2)
(3,12,2)
(23,31,2)
(17,5,2)
(16,5,2)
(1,17,2)
(6,12,2)
(22,12,2)
(1,23,2)
(26,17,2)
(24,12,2)
(27,12,2)
(29,1,2)
(21,17,2)
(3,31,2)
(29,17,2)
(23,17,2)
(25,5,2)
(17,31,2)
(19,12,2)
-----------------------------------
(0,result)
(1,result = data * 2)
(2,if(data > 0)
(3,&data)
(4,RET)
(5,1)
(6,fscanf (stdin, "%u", &data)
(7,data)
(8,)
(9,data)
(10,0)
(11,result)
(12,1)
(13,result)
(14,)
(15,while(1)
(16,break;)
(17,data > 0)
(18,while(1)
(19,stdin)
(20,)
(21,2)
(22,data)
(23,data * 2)
(24,break;)
(25,0)
(26,data)
(27,"%u")
(28,)
(29,printUnsignedLine(result)
(30,data)
(31,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^