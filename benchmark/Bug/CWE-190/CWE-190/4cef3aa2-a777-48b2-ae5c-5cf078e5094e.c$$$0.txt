-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            data++;
            short result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
43,46
44,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,47,50,52,55,59,61,66,68,73,76,78,81,85,87,92,93
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
64,65
64,66
-----guardedBy-----
66,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_12_bad()
CWE190_Integer_Overflow__short_rand_postinc_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(21,5,0)
(22,20,0)
(24,22,0)
(34,21,0)
(19,29,0)
(37,43,0)
(19,7,0)
(29,19,0)
(4,30,0)
(32,7,0)
(36,14,0)
(41,28,0)
(27,6,0)
(28,7,0)
(35,19,0)
(15,6,0)
(30,6,0)
(13,32,0)
(19,35,0)
(34,7,0)
(3,34,0)
(28,20,0)
(1,40,0)
(42,28,0)
(8,7,0)
(32,43,0)
(31,38,0)
(9,28,0)
(44,7,0)
(32,20,0)
(17,20,0)
(23,30,0)
(39,6,0)
(7,19,0)
(22,43,0)
(34,20,0)
(8,20,0)
(12,8,0)
(11,21,0)
(25,31,0)
(10,22,0)
(7,46,0)
(45,8,0)
(28,21,0)
(40,43,0)
(40,22,0)
(16,42,0)
(22,7,0)
(42,21,0)
(0,20,0)
(20,26,0)
(25,8,1)
(18,7,1)
(3,18,1)
(34,7,1)
(4,23,1)
(0,2,1)
(19,29,1)
(1,22,1)
(44,2,1)
(33,42,1)
(18,20,1)
(16,28,1)
(10,32,1)
(17,0,1)
(29,44,1)
(41,9,1)
(28,41,1)
(8,12,1)
(28,7,1)
(32,13,1)
(40,22,1)
(24,10,1)
(42,16,1)
(28,20,1)
(8,7,1)
(40,1,1)
(22,20,1)
(33,31,1)
(32,20,1)
(34,3,1)
(20,17,1)
(22,24,1)
(30,4,1)
(33,40,1)
(13,8,1)
(22,7,1)
(9,34,1)
(32,7,1)
(7,19,1)
(45,18,1)
(19,35,1)
(42,28,1)
(31,25,1)
(12,45,1)
(2,30,1)
(34,20,1)
(8,20,1)
(32,7,2)
(0,2,2)
(44,2,2)
(22,20,2)
(40,8,2)
(22,8,2)
(28,7,2)
(12,18,2)
(7,2,2)
(19,29,2)
(40,22,2)
(24,8,2)
(32,8,2)
(34,18,2)
(32,20,2)
(13,8,2)
(19,2,2)
(42,28,2)
(19,35,2)
(28,20,2)
(31,8,2)
(9,18,2)
(20,2,2)
(8,7,2)
(29,2,2)
(34,20,2)
(25,8,2)
(1,8,2)
(17,2,2)
(42,18,2)
(28,18,2)
(41,18,2)
(22,7,2)
(16,18,2)
(45,18,2)
(34,7,2)
(3,18,2)
(7,19,2)
(8,20,2)
(8,18,2)
(10,8,2)
-----------------------------------
(0,data)
(1,result)
(2,globalReturnsTrueOrFalse()
(3,data)
(4,0)
(5,)
(6,)
(7,data = (short)
(8,data < SHRT_MAX)
(9,result)
(10,result)
(11,result)
(12,SHRT_MAX)
(13,data)
(14,)
(15,if(globalReturnsTrueOrFalse()
(16,result)
(17,2)
(18,globalReturnsTrueOrFalse()
(19,(short)
(20,data = 2)
(21,)
(22,result = data)
(23,data)
(24,data)
(25,"data value is too large to perform arithmetic safely.")
(26,)
(27,if(globalReturnsTrueOrFalse()
(28,result = data)
(29,RAND32()
(30,data = 0)
(31,printLine("data value is too large to perform arithmetic safely.")
(32,data++)
(33,RET)
(34,data++)
(35,short)
(36,if (data < SHRT_MAX)
(37,result)
(38,)
(39,data)
(40,printIntLine(result)
(41,data)
(42,printIntLine(result)
(43,)
(44,data)
(45,data)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^