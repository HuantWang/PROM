-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_preinc_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_rand_preinc_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
48,50
48,51
49,50
50,51
51,52
53,54
54,55
54,56
56,57
56,58
58,59
59,60
61,62
62,63
62,64
63,64
65,66
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,33,34,36,40,42,46,47,52,55,57,60,64,66
-----computeFrom-----
18,19
18,20
23,24
23,25
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_preinc_34_bad(){    int data;    CWE190_Integer_Overflow__int_rand_preinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_preinc_34_bad()
CWE190_Integer_Overflow__int_rand_preinc_34_bad
{    int data;    CWE190_Integer_Overflow__int_rand_preinc_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_rand_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_rand_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__int_rand_preinc_34_unionType
CWE190_Integer_Overflow__int_rand_preinc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,12,0)
(1,28,0)
(18,10,0)
(2,28,0)
(14,29,0)
(11,23,0)
(27,11,0)
(23,10,0)
(6,18,0)
(19,7,0)
(24,20,0)
(12,29,0)
(26,10,0)
(20,1,0)
(7,10,0)
(8,28,0)
(3,23,0)
(1,18,0)
(16,11,0)
(15,26,0)
(7,19,0)
(23,7,0)
(12,14,0)
(28,1,0)
(0,7,0)
(25,10,0)
(22,14,0)
(20,29,0)
(14,1,0)
(30,1,0)
(9,29,0)
(21,14,0)
(17,10,0)
(29,18,0)
(13,26,0)
(1,28,1)
(27,7,1)
(22,20,1)
(2,30,1)
(28,8,1)
(21,22,1)
(16,27,1)
(14,1,1)
(11,16,1)
(14,21,1)
(19,0,1)
(26,15,1)
(30,23,1)
(24,1,1)
(8,2,1)
(15,13,1)
(20,24,1)
(3,11,1)
(23,7,1)
(4,14,1)
(0,26,1)
(5,12,1)
(20,1,1)
(12,14,1)
(23,3,1)
(12,4,1)
(7,19,1)
(14,1,2)
(7,19,2)
(1,28,2)
(23,7,2)
(12,14,2)
(20,1,2)
-----------------------------------
(0,data)
(1,data = myUnion.unionSecond)
(2,myUnion)
(3,data)
(4,result)
(5,RET)
(6,data)
(7,data = RAND32()
(8,unionSecond)
(9,result)
(10,)
(11,myUnion.unionFirst)
(12,printIntLine(result)
(13,data)
(14,result = data)
(15,0)
(16,unionFirst)
(17,myUnion)
(18,)
(19,RAND32()
(20,++data)
(21,data)
(22,result)
(23,myUnion.unionFirst = data)
(24,data)
(25,data)
(26,data = 0)
(27,myUnion)
(28,myUnion.unionSecond)
(29,)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^