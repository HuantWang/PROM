-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_postinc_01_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        int result = data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
56,58
56,59
57,58
58,59
59,60
61,62
62,63
62,64
64,65
64,66
66,67
67,68
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,49,54,55,60,63,65,68,72,74
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_postinc_01_bad(){    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_postinc_01_bad()
CWE190_Integer_Overflow__int_fgets_postinc_01_bad
{    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int result = data;        printIntLine(result);    }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(26,12,0)
(21,12,0)
(33,12,0)
(6,24,0)
(14,32,0)
(11,29,0)
(20,3,0)
(8,34,0)
(28,26,0)
(9,24,0)
(14,24,0)
(29,3,0)
(3,31,0)
(4,14,0)
(12,27,0)
(24,34,0)
(32,14,0)
(0,3,0)
(26,23,0)
(19,31,0)
(10,22,0)
(2,15,0)
(15,24,0)
(15,31,0)
(34,27,0)
(1,23,0)
(23,27,0)
(18,14,0)
(26,31,0)
(3,12,0)
(7,14,0)
(13,27,0)
(3,23,0)
(31,15,0)
(30,34,0)
(16,10,0)
(29,23,0)
(31,25,0)
(17,32,0)
(3,12,1)
(14,24,1)
(33,21,1)
(24,9,1)
(32,17,1)
(20,0,1)
(0,26,1)
(31,15,1)
(5,29,1)
(2,19,1)
(32,14,1)
(16,32,1)
(12,33,1)
(28,10,1)
(15,24,1)
(19,32,1)
(29,11,1)
(3,20,1)
(7,24,1)
(14,4,1)
(18,7,1)
(4,18,1)
(3,31,1)
(9,6,1)
(10,16,1)
(6,12,1)
(26,31,1)
(29,3,1)
(28,31,1)
(26,28,1)
(26,12,1)
(15,2,1)
(17,14,1)
(11,3,1)
(2,32,2)
(3,31,2)
(19,32,2)
(14,24,2)
(31,15,2)
(31,32,2)
(26,12,2)
(15,24,2)
(29,3,2)
(10,32,2)
(3,12,2)
(26,31,2)
(15,32,2)
(16,32,2)
(32,14,2)
-----------------------------------
(0,result)
(1,result)
(2,inputBuffer)
(3,result = data)
(4,stdin)
(5,RET)
(6,inputBuffer)
(7,inputBuffer)
(8,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,"")
(10,printLine("fgets()
(11,result)
(12,data = 0)
(13,data)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,atoi(inputBuffer)
(16,"fgets()
(17,NULL)
(18,CHAR_ARRAY_SIZE)
(19,data)
(20,data)
(21,data)
(22,)
(23,)
(24,inputBuffer[CHAR_ARRAY_SIZE] = "")
(25,)
(26,data++)
(27,)
(28,data)
(29,printIntLine(result)
(30,inputBuffer)
(31,data = atoi(inputBuffer)
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,0)
(34,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^