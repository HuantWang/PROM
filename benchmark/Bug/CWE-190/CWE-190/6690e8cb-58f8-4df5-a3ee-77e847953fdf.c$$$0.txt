-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_postinc_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_postinc_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_postinc_03_bad()
CWE190_Integer_Overflow__short_fscanf_postinc_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,24,0)
(18,23,0)
(26,23,0)
(9,25,0)
(8,5,0)
(10,12,0)
(25,23,0)
(19,12,0)
(4,12,0)
(11,23,0)
(16,13,0)
(2,28,0)
(17,25,0)
(6,29,0)
(15,5,0)
(13,25,0)
(5,12,0)
(1,19,0)
(21,13,0)
(22,16,0)
(13,16,0)
(0,10,0)
(12,3,0)
(20,28,0)
(14,16,0)
(27,29,0)
(19,5,0)
(5,25,0)
(10,25,0)
(25,17,1)
(27,6,1)
(10,25,1)
(8,15,1)
(19,5,1)
(28,20,1)
(29,27,1)
(2,29,1)
(13,21,1)
(7,19,1)
(1,5,1)
(21,22,1)
(17,9,1)
(0,28,1)
(7,28,1)
(10,0,1)
(5,8,1)
(22,14,1)
(16,13,1)
(20,2,1)
(13,25,1)
(6,25,1)
(15,10,1)
(19,1,1)
(5,25,1)
(14,29,1)
(2,16,1)
(16,29,2)
(10,25,2)
(14,29,2)
(19,28,2)
(8,28,2)
(16,13,2)
(19,5,2)
(21,29,2)
(1,28,2)
(0,28,2)
(22,29,2)
(5,28,2)
(5,25,2)
(13,29,2)
(10,28,2)
(15,28,2)
(13,25,2)
-----------------------------------
(0,data)
(1,result)
(2,5)
(3,)
(4,result)
(5,result = data)
(6,5)
(7,RET)
(8,data)
(9,data)
(10,data++)
(11,if(5==5)
(12,)
(13,&data)
(14,stdin)
(15,result)
(16,fscanf (stdin, "%hd", &data)
(17,0)
(18,data)
(19,printIntLine(result)
(20,5)
(21,data)
(22,"%hd")
(23,)
(24,)
(25,data = 0)
(26,if(5==5)
(27,5)
(28,5==5)
(29,5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^