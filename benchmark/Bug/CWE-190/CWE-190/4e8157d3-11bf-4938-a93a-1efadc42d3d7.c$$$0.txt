-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_08_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_08_bad(){    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_08_bad()
CWE190_Integer_Overflow__int_max_square_08_bad
{    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,8,0)
(21,19,0)
(20,11,0)
(7,16,0)
(10,22,0)
(22,13,0)
(14,19,0)
(9,21,0)
(1,16,0)
(0,8,0)
(11,6,0)
(17,11,0)
(8,13,0)
(23,19,0)
(13,4,0)
(19,16,0)
(2,13,0)
(12,16,0)
(8,21,0)
(21,8,0)
(15,21,0)
(21,11,0)
(11,20,1)
(17,5,1)
(15,9,1)
(10,8,1)
(22,10,1)
(20,17,1)
(22,8,1)
(18,22,1)
(19,14,1)
(21,19,1)
(14,23,1)
(18,3,1)
(3,5,1)
(0,3,1)
(9,0,1)
(8,21,1)
(3,11,1)
(21,15,1)
(5,19,1)
(21,11,1)
(15,3,2)
(22,3,2)
(10,3,2)
(21,11,2)
(22,8,2)
(8,21,2)
(20,5,2)
(0,3,2)
(21,3,2)
(17,5,2)
(21,19,2)
(9,3,2)
(11,5,2)
(8,3,2)
-----------------------------------
(0,result)
(1,if(staticReturnsTrue()
(2,result)
(3,staticReturnsTrue()
(4,)
(5,staticReturnsTrue()
(6,)
(7,data)
(8,result = data * data)
(9,data)
(10,result)
(11,data = INT_MAX)
(12,if(staticReturnsTrue()
(13,)
(14,0)
(15,data)
(16,)
(17,data)
(18,RET)
(19,data = 0)
(20,INT_MAX)
(21,data * data)
(22,printIntLine(result)
(23,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^