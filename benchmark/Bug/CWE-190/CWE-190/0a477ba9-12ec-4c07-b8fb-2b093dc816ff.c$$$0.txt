-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_03_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(27,10,0)
(6,2,0)
(16,10,0)
(26,21,0)
(2,14,0)
(25,15,0)
(16,7,0)
(9,2,0)
(8,10,0)
(21,2,0)
(18,10,0)
(24,29,0)
(4,29,0)
(28,7,0)
(0,18,0)
(10,17,0)
(13,27,0)
(7,29,0)
(27,16,0)
(18,7,0)
(11,19,0)
(5,19,0)
(21,7,0)
(1,16,0)
(2,21,0)
(23,16,0)
(20,29,0)
(3,7,0)
(22,15,0)
(13,16,1)
(2,21,1)
(6,19,1)
(22,25,1)
(16,7,1)
(21,7,1)
(15,22,1)
(27,13,1)
(25,19,1)
(0,15,1)
(9,6,1)
(19,11,1)
(5,7,1)
(21,26,1)
(11,5,1)
(12,15,1)
(7,28,1)
(16,1,1)
(28,3,1)
(25,2,1)
(12,27,1)
(27,16,1)
(23,18,1)
(26,9,1)
(1,23,1)
(18,0,1)
(18,7,1)
(26,19,2)
(18,15,2)
(9,19,2)
(23,15,2)
(21,19,2)
(27,16,2)
(27,15,2)
(0,15,2)
(21,7,2)
(16,15,2)
(16,7,2)
(2,21,2)
(2,19,2)
(1,15,2)
(18,7,2)
(6,19,2)
(13,15,2)
-----------------------------------
(0,data)
(1,data)
(2,fscanf (stdin, "%c", &data)
(3,data)
(4,data)
(5,5)
(6,stdin)
(7,data = \\\' \\\')
(8,result)
(9,"%c")
(10,)
(11,5)
(12,RET)
(13,result)
(14,)
(15,5==5)
(16,result = data)
(17,)
(18,++data)
(19,5==5)
(20,if(5==5)
(21,&data)
(22,5)
(23,result)
(24,if(5==5)
(25,5)
(26,data)
(27,printHexCharLine(result)
(28,\\\' \\\')
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^