-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_14_bad()
CWE190_Integer_Overflow__char_max_square_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,25,0)
(4,24,0)
(12,19,0)
(21,3,0)
(7,19,0)
(25,10,0)
(9,3,0)
(24,25,0)
(23,7,0)
(24,7,0)
(28,9,0)
(14,19,0)
(26,6,0)
(13,9,0)
(0,3,0)
(6,16,0)
(11,17,0)
(19,7,0)
(19,6,0)
(19,9,0)
(15,8,0)
(27,3,0)
(2,25,0)
(18,17,0)
(1,6,0)
(22,8,0)
(19,9,1)
(11,18,1)
(7,19,1)
(18,8,1)
(26,1,1)
(12,23,1)
(23,17,1)
(8,22,1)
(18,6,1)
(4,7,1)
(19,14,1)
(13,28,1)
(6,26,1)
(24,7,1)
(5,24,1)
(17,11,1)
(24,4,1)
(15,9,1)
(5,17,1)
(1,8,1)
(22,15,1)
(19,6,1)
(9,13,1)
(14,12,1)
(24,7,2)
(19,17,2)
(1,8,2)
(23,17,2)
(7,19,2)
(7,17,2)
(12,17,2)
(4,17,2)
(19,9,2)
(19,6,2)
(14,17,2)
(26,8,2)
(6,8,2)
(24,17,2)
-----------------------------------
(0,if(globalFive==5)
(1,data)
(2,result)
(3,)
(4,result)
(5,RET)
(6,data = CHAR_MAX)
(7,result = data * data)
(8,globalFive==5)
(9,data = \' \')
(10,)
(11,5)
(12,data)
(13,' ')
(14,data)
(15,globalFive)
(16,)
(17,globalFive==5)
(18,globalFive)
(19,data * data)
(20,data = ' ')
(21,data)
(22,5)
(23,result)
(24,printHexCharLine(result)
(25,)
(26,CHAR_MAX)
(27,if(globalFive==5)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^