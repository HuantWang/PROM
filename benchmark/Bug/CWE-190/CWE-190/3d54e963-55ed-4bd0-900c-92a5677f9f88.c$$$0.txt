-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_14_bad()
{
    short data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_14_bad(){    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_14_bad()
CWE190_Integer_Overflow__short_max_multiply_14_bad
{    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(6,10,0)
(15,0,0)
(18,22,0)
(8,11,0)
(30,4,0)
(31,1,0)
(9,22,0)
(12,13,0)
(22,1,0)
(23,11,0)
(0,4,0)
(24,0,0)
(25,13,0)
(0,1,0)
(3,20,0)
(0,10,0)
(7,29,0)
(1,28,0)
(2,5,0)
(26,10,0)
(22,10,0)
(2,4,0)
(21,1,0)
(14,5,0)
(19,20,0)
(4,5,0)
(4,0,0)
(10,20,0)
(17,20,0)
(16,2,0)
(27,13,1)
(9,13,1)
(22,10,1)
(13,12,1)
(0,1,1)
(24,15,1)
(30,22,1)
(25,1,1)
(22,1,1)
(0,24,1)
(10,6,1)
(4,0,1)
(22,18,1)
(16,4,1)
(27,22,1)
(2,4,1)
(1,31,1)
(23,8,1)
(18,9,1)
(11,23,1)
(12,25,1)
(15,30,1)
(2,16,1)
(8,10,1)
(25,11,1)
(6,26,1)
(21,11,1)
(0,10,1)
(27,2,1)
(31,21,1)
(2,4,2)
(22,1,2)
(15,22,2)
(4,0,2)
(0,1,2)
(0,22,2)
(31,11,2)
(2,22,2)
(9,13,2)
(21,11,2)
(22,10,2)
(16,22,2)
(0,10,2)
(24,22,2)
(22,13,2)
(1,11,2)
(30,22,2)
(4,22,2)
(18,13,2)
-----------------------------------
(0,data * 2)
(1,data = SHRT_MAX)
(2,printIntLine(result)
(3,if(globalFive==5)
(4,result = data * 2)
(5,)
(6,0)
(7,if(data > 0)
(8,globalFive)
(9,data)
(10,data = 0)
(11,globalFive==5)
(12,5)
(13,globalFive==5)
(14,result)
(15,data)
(16,result)
(17,data)
(18,0)
(19,if(globalFive==5)
(20,)
(21,data)
(22,data > 0)
(23,5)
(24,2)
(25,globalFive)
(26,data)
(27,RET)
(28,)
(29,)
(30,result)
(31,SHRT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^