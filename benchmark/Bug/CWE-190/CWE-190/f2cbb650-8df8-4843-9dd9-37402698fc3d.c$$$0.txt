-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,44,48,50
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_14_bad()
CWE190_Integer_Overflow__char_max_add_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(15,24,0)
(16,19,0)
(7,20,0)
(19,16,0)
(11,24,0)
(22,24,0)
(8,24,0)
(9,16,0)
(1,23,0)
(28,16,0)
(18,10,0)
(16,18,0)
(17,15,0)
(0,19,0)
(12,6,0)
(20,2,0)
(5,18,0)
(4,15,0)
(13,23,0)
(14,20,0)
(19,20,0)
(26,6,0)
(25,28,0)
(28,18,0)
(21,19,0)
(19,15,0)
(19,15,1)
(0,9,1)
(15,4,1)
(3,28,1)
(12,23,1)
(16,19,1)
(19,21,1)
(14,23,1)
(3,6,1)
(20,7,1)
(25,16,1)
(19,20,1)
(1,15,1)
(28,25,1)
(7,14,1)
(4,17,1)
(9,6,1)
(6,26,1)
(12,20,1)
(23,13,1)
(21,0,1)
(26,12,1)
(28,16,1)
(13,1,1)
(19,6,2)
(28,6,2)
(16,19,2)
(9,6,2)
(19,15,2)
(21,6,2)
(25,6,2)
(28,16,2)
(7,23,2)
(14,23,2)
(19,20,2)
(16,6,2)
(20,23,2)
(0,6,2)
-----------------------------------
(0,data)
(1,globalFive)
(2,)
(3,RET)
(4,' ')
(5,result)
(6,globalFive==5)
(7,CHAR_MAX)
(8,data)
(9,result)
(10,)
(11,if(globalFive==5)
(12,globalFive)
(13,5)
(14,data)
(15,data = ' ')
(16,result = data + 1)
(17,data)
(18,)
(19,data + 1)
(20,data = CHAR_MAX)
(21,1)
(22,if(globalFive==5)
(23,globalFive==5)
(24,)
(25,result)
(26,5)
(27,data = \' \')
(28,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^