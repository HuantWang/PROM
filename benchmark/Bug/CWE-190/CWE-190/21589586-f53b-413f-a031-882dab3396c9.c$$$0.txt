-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,77,79,83,85,89,91
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_32_bad()
CWE190_Integer_Overflow__short_rand_square_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(35,22,0)
(41,17,0)
(4,12,0)
(45,28,0)
(24,23,0)
(15,6,0)
(14,13,0)
(27,44,0)
(17,45,0)
(33,22,0)
(3,28,0)
(8,40,0)
(4,5,0)
(17,27,0)
(19,44,0)
(6,31,0)
(13,0,0)
(25,0,0)
(0,22,0)
(27,22,0)
(39,36,0)
(28,22,0)
(1,28,0)
(21,32,0)
(26,23,0)
(5,4,0)
(12,4,0)
(9,5,0)
(34,25,0)
(43,23,0)
(11,0,0)
(2,24,0)
(10,45,0)
(23,26,0)
(40,3,0)
(37,4,0)
(20,27,0)
(32,23,0)
(36,22,0)
(4,37,0)
(44,27,0)
(42,22,0)
(32,13,0)
(23,22,0)
(5,0,0)
(7,26,0)
(13,32,0)
(25,5,0)
(31,45,0)
(16,31,0)
(40,6,0)
(24,25,0)
(31,6,0)
(45,17,0)
(6,3,0)
(18,36,0)
(30,31,0)
(38,3,0)
(23,26,1)
(4,12,1)
(30,16,1)
(27,44,1)
(32,23,1)
(19,20,1)
(44,19,1)
(25,5,1)
(8,6,1)
(29,40,1)
(17,41,1)
(20,23,1)
(36,18,1)
(45,17,1)
(26,7,1)
(2,5,1)
(24,23,1)
(10,25,1)
(41,10,1)
(9,13,1)
(17,27,1)
(25,34,1)
(34,24,1)
(18,39,1)
(31,45,1)
(4,37,1)
(13,32,1)
(21,14,1)
(15,45,1)
(31,30,1)
(16,15,1)
(39,27,1)
(7,43,1)
(5,4,1)
(32,21,1)
(14,36,1)
(40,8,1)
(40,6,1)
(37,9,1)
(24,2,1)
(6,31,1)
(25,5,2)
(24,23,2)
(40,6,2)
(13,32,2)
(4,12,2)
(32,23,2)
(17,27,2)
(5,4,2)
(31,45,2)
(27,44,2)
(6,31,2)
(4,37,2)
(23,26,2)
(45,17,2)
-----------------------------------
(0,)
(1,data)
(2,dataPtr1)
(3,)
(4,(short)
(5,data = (short)
(6,result = data * data)
(7,data)
(8,result)
(9,data)
(10,data)
(11,data)
(12,short)
(13,data = *dataPtr1)
(14,data)
(15,result)
(16,data)
(17,*dataPtr2)
(18,0)
(19,data)
(20,dataPtr2)
(21,dataPtr1)
(22,)
(23,*dataPtr1 = &data)
(24,*dataPtr1)
(25,*dataPtr1 = data)
(26,&data)
(27,*dataPtr2 = &data)
(28,)
(29,RET)
(30,data)
(31,data * data)
(32,*dataPtr1)
(33,dataPtr1)
(34,data)
(35,dataPtr2)
(36,data = 0)
(37,RAND32()
(38,result)
(39,data)
(40,printIntLine(result)
(41,dataPtr2)
(42,data)
(43,dataPtr1)
(44,&data)
(45,data = *dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^