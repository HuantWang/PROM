-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
        unsigned int result = data * data;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,45,49,51,55,57,58,59,63,64,65
-----computeFrom-----
12,13
12,14
22,23
22,24
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_15_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */        unsigned int result = data * data;        printUnsignedLine(result);    }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(13,10,0)
(26,9,0)
(6,23,0)
(19,23,0)
(16,15,0)
(29,4,0)
(31,7,0)
(5,10,0)
(15,7,0)
(18,13,0)
(32,7,0)
(27,4,0)
(12,9,0)
(14,10,0)
(35,7,0)
(0,15,0)
(22,13,0)
(21,29,0)
(1,9,0)
(23,9,0)
(30,7,0)
(17,30,0)
(2,9,0)
(8,12,0)
(25,4,0)
(33,7,0)
(29,15,0)
(20,9,0)
(4,23,0)
(11,16,0)
(4,29,0)
(4,13,0)
(16,29,0)
(34,10,0)
(3,35,1)
(26,23,1)
(13,22,1)
(21,24,1)
(3,31,1)
(6,19,1)
(23,6,1)
(30,17,1)
(24,26,1)
(22,18,1)
(17,24,1)
(16,11,1)
(4,25,1)
(8,28,1)
(16,29,1)
(28,13,1)
(35,30,1)
(31,16,1)
(12,8,1)
(2,12,1)
(19,28,1)
(24,2,1)
(11,29,1)
(4,23,1)
(25,27,1)
(29,4,1)
(27,21,1)
(4,13,1)
(29,4,2)
(23,28,2)
(35,24,2)
(2,28,2)
(21,24,2)
(12,28,2)
(8,28,2)
(26,28,2)
(25,24,2)
(4,13,2)
(29,24,2)
(30,24,2)
(4,23,2)
(31,24,2)
(6,28,2)
(16,24,2)
(16,29,2)
(4,24,2)
(17,24,2)
(11,24,2)
(19,28,2)
(27,24,2)
-----------------------------------
(0,result)
(1,case 6:)
(2,break;)
(3,RET)
(4,data * data)
(5,switch(6)
(6,UINT_MAX)
(7,)
(8,"Benign, fixed string")
(9,)
(10,)
(11,result)
(12,printLine("Benign, fixed string")
(13,data = 0)
(14,data)
(15,)
(16,printUnsignedLine(result)
(17,"Benign, fixed string")
(18,data)
(19,data)
(20,default:)
(21,result)
(22,0)
(23,data = UINT_MAX)
(24,7)
(25,data)
(26,break;)
(27,data)
(28,6)
(29,result = data * data)
(30,printLine("Benign, fixed string")
(31,break;)
(32,default:)
(33,case 7:)
(34,switch(7)
(35,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^