-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_09_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_09_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_09_bad()
CWE190_Integer_Overflow__char_rand_square_09_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(23,17,0)
(12,5,0)
(1,5,0)
(17,10,0)
(20,21,0)
(26,14,0)
(8,23,0)
(23,20,0)
(4,12,0)
(25,0,0)
(15,17,0)
(20,25,0)
(23,12,0)
(25,22,0)
(10,11,0)
(3,12,0)
(17,23,0)
(22,25,0)
(0,25,0)
(24,5,0)
(25,20,0)
(14,17,0)
(14,10,0)
(6,23,0)
(9,10,0)
(13,20,0)
(16,5,0)
(8,15,1)
(15,2,1)
(23,12,1)
(17,23,1)
(26,17,1)
(23,6,1)
(14,17,1)
(14,26,1)
(18,12,1)
(7,14,1)
(25,0,1)
(4,3,1)
(7,2,1)
(6,8,1)
(13,18,1)
(20,25,1)
(12,4,1)
(22,13,1)
(23,20,1)
(25,22,1)
(2,18,1)
(2,20,1)
(22,18,2)
(17,2,2)
(23,12,2)
(8,2,2)
(14,2,2)
(20,18,2)
(23,2,2)
(15,2,2)
(25,18,2)
(6,2,2)
(26,2,2)
(25,0,2)
(14,17,2)
(17,23,2)
(13,18,2)
(20,25,2)
(25,22,2)
(23,20,2)
-----------------------------------
(0,char)
(1,data)
(2,GLOBAL_CONST_TRUE)
(3,data)
(4,' ')
(5,)
(6,data)
(7,RET)
(8,data)
(9,result)
(10,)
(11,)
(12,data = ' ')
(13,data)
(14,printHexCharLine(result)
(15,result)
(16,if(GLOBAL_CONST_TRUE)
(17,result = data * data)
(18,GLOBAL_CONST_TRUE)
(19,data = \' \')
(20,data = (char)
(21,)
(22,RAND32()
(23,data * data)
(24,if(GLOBAL_CONST_TRUE)
(25,(char)
(26,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^