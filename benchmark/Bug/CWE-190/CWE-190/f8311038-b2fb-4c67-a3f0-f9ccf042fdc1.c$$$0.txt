-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
75,76
75,77
77,78
77,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,76,78,82,84,88,90
-----computeFrom-----
32,33
32,34
57,58
57,59
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_32_bad()
CWE190_Integer_Overflow__int_fscanf_square_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(31,42,0)
(1,8,0)
(33,8,0)
(14,32,0)
(45,8,0)
(14,24,0)
(6,3,0)
(35,42,0)
(30,33,0)
(28,26,0)
(20,8,0)
(5,8,0)
(32,14,0)
(15,1,0)
(29,8,0)
(39,32,0)
(27,1,0)
(32,29,0)
(43,32,0)
(0,8,0)
(17,20,0)
(16,24,0)
(26,44,0)
(9,33,0)
(38,27,0)
(44,26,0)
(26,3,0)
(12,24,0)
(40,31,0)
(4,2,0)
(22,38,0)
(34,16,0)
(16,42,0)
(24,29,0)
(12,29,0)
(38,44,0)
(13,6,0)
(7,26,0)
(42,31,0)
(41,29,0)
(24,16,0)
(2,42,0)
(25,27,0)
(44,27,0)
(37,9,0)
(6,33,0)
(11,24,0)
(23,14,0)
(42,8,0)
(33,9,0)
(2,12,0)
(10,3,0)
(21,44,0)
(3,6,0)
(3,1,0)
(19,20,0)
(18,12,0)
(28,21,1)
(7,28,1)
(14,24,1)
(38,44,1)
(43,39,1)
(20,19,1)
(37,30,1)
(16,42,1)
(30,42,1)
(18,2,1)
(26,3,1)
(26,7,1)
(13,10,1)
(17,33,1)
(2,4,1)
(10,12,1)
(12,24,1)
(39,24,1)
(42,31,1)
(33,9,1)
(38,22,1)
(2,42,1)
(19,17,1)
(23,43,1)
(31,40,1)
(6,13,1)
(11,20,1)
(22,44,1)
(16,34,1)
(9,37,1)
(44,26,1)
(12,18,1)
(36,38,1)
(3,6,1)
(24,16,1)
(14,23,1)
(40,35,1)
(4,32,1)
(34,11,1)
(21,3,1)
(32,14,1)
(6,33,1)
(24,16,2)
(33,9,2)
(14,24,2)
(32,14,2)
(26,3,2)
(42,31,2)
(44,26,2)
(6,33,2)
(12,24,2)
(2,42,2)
(38,44,2)
(3,6,2)
(16,42,2)
-----------------------------------
(0,dataPtr1)
(1,)
(2,*dataPtr1)
(3,data = *dataPtr2)
(4,dataPtr1)
(5,dataPtr2)
(6,*dataPtr2)
(7,data)
(8,)
(9,&data)
(10,data)
(11,data)
(12,*dataPtr1 = data)
(13,dataPtr2)
(14,&data)
(15,data)
(16,*dataPtr1)
(17,data)
(18,data)
(19,0)
(20,data = 0)
(21,result)
(22,result)
(23,data)
(24,data = *dataPtr1)
(25,result)
(26,data * data)
(27,)
(28,data)
(29,)
(30,dataPtr2)
(31,&data)
(32,fscanf(stdin, "%d", &data)
(33,*dataPtr2 = &data)
(34,dataPtr1)
(35,dataPtr1)
(36,RET)
(37,data)
(38,printIntLine(result)
(39,stdin)
(40,data)
(41,data)
(42,*dataPtr1 = &data)
(43,"%d")
(44,result = data * data)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^