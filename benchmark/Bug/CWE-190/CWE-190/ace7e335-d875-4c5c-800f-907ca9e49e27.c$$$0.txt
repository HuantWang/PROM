-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_34_bad()
{
    unsigned int data;
    CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (unsigned int)RAND32();
    myUnion.unionFirst = data;
    {
        unsigned int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,57,61,63,67,69
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_34_bad(){    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_34_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_34_bad
{    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType
CWE190_Integer_Overflow__unsigned_int_rand_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        unsigned int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
unsigned int data = myUnion.unionSecond;
unsigned int data = myUnion.unionSecond;
unsigned int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(17,11,0)
(24,12,0)
(25,9,0)
(26,28,0)
(15,20,0)
(27,4,0)
(23,12,0)
(5,22,0)
(31,22,0)
(0,9,0)
(19,5,0)
(16,4,0)
(18,12,0)
(20,4,0)
(9,3,0)
(4,20,0)
(32,28,0)
(14,26,0)
(11,12,0)
(25,12,0)
(5,29,0)
(1,22,0)
(22,5,0)
(2,25,0)
(9,0,0)
(20,23,0)
(9,25,0)
(6,29,0)
(10,23,0)
(29,23,0)
(30,11,0)
(22,20,0)
(8,26,0)
(7,5,0)
(3,9,0)
(21,19,0)
(28,12,0)
(19,29,0)
(28,25,0)
(15,28,1)
(8,14,1)
(25,9,1)
(28,25,1)
(2,11,1)
(5,22,1)
(22,20,1)
(19,21,1)
(20,4,1)
(21,5,1)
(16,15,1)
(32,26,1)
(7,20,1)
(4,27,1)
(28,32,1)
(19,5,1)
(9,3,1)
(14,25,1)
(9,0,1)
(13,19,1)
(26,8,1)
(11,30,1)
(27,16,1)
(1,7,1)
(22,31,1)
(30,17,1)
(31,1,1)
(3,2,1)
(22,20,2)
(5,22,2)
(19,5,2)
(9,3,2)
(9,0,2)
(28,25,2)
(20,4,2)
(25,9,2)
-----------------------------------
(0,unsigned int)
(1,data)
(2,data)
(3,RAND32()
(4,myUnion.unionSecond)
(5,result = data * data)
(6,result)
(7,result)
(8,unionFirst)
(9,(unsigned int)
(10,data)
(11,data = 0)
(12,)
(13,RET)
(14,myUnion)
(15,data)
(16,myUnion)
(17,data)
(18,myUnion)
(19,printUnsignedLine(result)
(20,data = myUnion.unionSecond)
(21,result)
(22,data * data)
(23,)
(24,data)
(25,data = (unsigned int)
(26,myUnion.unionFirst)
(27,unionSecond)
(28,myUnion.unionFirst = data)
(29,)
(30,0)
(31,data)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^