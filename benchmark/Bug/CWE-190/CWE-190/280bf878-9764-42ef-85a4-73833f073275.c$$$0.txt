-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_add_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,77,79,83,84,88,90
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_add_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_add_32_bad()
CWE190_Integer_Overflow__short_rand_add_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,38,0)
(28,45,0)
(21,45,0)
(1,34,0)
(0,25,0)
(30,44,0)
(22,17,0)
(17,24,0)
(5,21,0)
(4,36,0)
(21,18,0)
(44,18,0)
(8,18,0)
(38,27,0)
(13,15,0)
(9,8,0)
(36,4,0)
(22,25,0)
(11,38,0)
(35,8,0)
(4,8,0)
(15,24,0)
(23,15,0)
(14,17,0)
(27,26,0)
(1,18,0)
(16,23,0)
(39,1,0)
(24,18,0)
(20,18,0)
(37,4,0)
(23,21,0)
(27,38,0)
(15,23,0)
(43,13,0)
(2,18,0)
(25,13,0)
(19,9,0)
(45,21,0)
(29,41,0)
(38,8,0)
(31,18,0)
(34,1,0)
(41,1,0)
(32,15,0)
(27,42,0)
(40,34,0)
(7,36,0)
(33,13,0)
(42,27,0)
(36,1,0)
(3,22,0)
(12,24,0)
(25,17,0)
(41,9,0)
(10,44,0)
(26,27,0)
(13,25,0)
(22,25,1)
(41,1,1)
(0,15,1)
(11,4,1)
(13,15,1)
(23,21,1)
(29,38,1)
(15,23,1)
(41,29,1)
(13,43,1)
(6,22,1)
(36,7,1)
(27,42,1)
(44,10,1)
(9,38,1)
(30,21,1)
(36,1,1)
(45,28,1)
(33,0,1)
(3,25,1)
(23,16,1)
(43,33,1)
(38,27,1)
(19,41,1)
(21,45,1)
(16,32,1)
(28,5,1)
(5,1,1)
(27,26,1)
(34,40,1)
(37,44,1)
(22,3,1)
(7,37,1)
(25,13,1)
(9,19,1)
(32,9,1)
(40,39,1)
(26,11,1)
(10,30,1)
(4,36,1)
(1,34,1)
(27,42,2)
(27,26,2)
(9,38,2)
(13,15,2)
(38,27,2)
(4,36,2)
(25,13,2)
(1,34,2)
(15,23,2)
(21,45,2)
(41,1,2)
(36,1,2)
(22,25,2)
(23,21,2)
-----------------------------------
(0,result)
(1,*dataPtr1 = &data)
(2,data)
(3,result)
(4,data = *dataPtr1)
(5,dataPtr2)
(6,RET)
(7,dataPtr1)
(8,)
(9,*dataPtr1 = data)
(10,0)
(11,data)
(12,data)
(13,data + 1)
(14,result)
(15,data = *dataPtr2)
(16,dataPtr2)
(17,)
(18,)
(19,data)
(20,dataPtr2)
(21,*dataPtr2 = &data)
(22,printIntLine(result)
(23,*dataPtr2)
(24,)
(25,result = data + 1)
(26,RAND32()
(27,(short)
(28,data)
(29,dataPtr1)
(30,data)
(31,dataPtr1)
(32,data)
(33,data)
(34,&data)
(35,data)
(36,*dataPtr1)
(37,data)
(38,data = (short)
(39,dataPtr1)
(40,data)
(41,*dataPtr1)
(42,short)
(43,1)
(44,data = 0)
(45,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^