-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_16_bad()
{
    unsigned int data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,32,37,39,43,45,49,51,52
-----computeFrom-----
12,13
12,14
20,21
20,22
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_16_bad(){    unsigned int data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_16_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_16_bad
{    unsigned int data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();        break;    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
-----joern-----
(14,2,0)
(6,9,0)
(6,0,0)
(13,7,0)
(14,24,0)
(19,14,0)
(6,2,0)
(7,10,0)
(11,23,0)
(14,8,0)
(20,2,0)
(2,21,0)
(22,4,0)
(24,7,0)
(0,6,0)
(25,23,0)
(24,14,0)
(4,7,0)
(4,24,0)
(26,8,0)
(5,23,0)
(8,23,0)
(2,6,0)
(3,24,0)
(27,14,0)
(15,10,0)
(12,21,0)
(9,6,0)
(18,8,0)
(6,9,1)
(1,16,1)
(16,8,1)
(2,6,1)
(24,14,1)
(20,16,1)
(0,20,1)
(19,3,1)
(14,8,1)
(8,18,1)
(4,22,1)
(17,15,1)
(18,26,1)
(14,27,1)
(17,1,1)
(22,24,1)
(1,12,1)
(15,4,1)
(27,19,1)
(4,24,1)
(3,1,1)
(6,0,1)
(14,2,1)
(12,2,1)
(14,1,2)
(24,14,2)
(6,0,2)
(4,24,2)
(14,8,2)
(22,1,2)
(0,16,2)
(3,1,2)
(14,2,2)
(15,1,2)
(2,16,2)
(19,1,2)
(24,1,2)
(6,9,2)
(6,16,2)
(12,16,2)
(4,1,2)
(20,16,2)
(2,6,2)
(27,1,2)
-----------------------------------
(0,RAND32()
(1,1)
(2,data = (unsigned int)
(3,result)
(4,printUnsignedLine(result)
(5,while(1)
(6,(unsigned int)
(7,)
(8,data = 0)
(9,unsigned int)
(10,)
(11,while(1)
(12,break;)
(13,result)
(14,data * data)
(15,break;)
(16,1)
(17,RET)
(18,0)
(19,data)
(20,data)
(21,)
(22,result)
(23,)
(24,result = data * data)
(25,data)
(26,data)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^