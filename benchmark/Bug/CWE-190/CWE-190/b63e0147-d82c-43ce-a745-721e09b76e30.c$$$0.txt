-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_32_bad()
{
    int64_t data;
    int64_t *dataPtr1 = &data;
    int64_t *dataPtr2 = &data;
    data = 0LL;
    {
        int64_t data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
        *dataPtr1 = data;
    }
    {
        int64_t data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
59,60
60,61
62,63
63,64
63,65
64,65
65,66
67,68
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
78,79
80,81
80,82
81,82
81,83
82,83
85,86
85,87
86,87
87,88
87,89
88,89
90,91
90,92
92,93
93,94
93,95
94,95
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,9,11,15,17,18,22,26,28,29,33,37,38,43,45,49,53,57,58,61,66,68,73,75,79,83,84,89,91,95,96,100,102
-----computeFrom-----
35,36
35,37
51,52
51,53
63,64
63,65
81,82
81,83
93,94
93,95
-----guardedBy-----
83,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_32_bad(){    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_32_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_32_bad
{    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
int64_t *dataPtr1 = &data;
int64_t *dataPtr1 = &data;
int64_t
int64_t
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int64_t *dataPtr2 = &data;
int64_t *dataPtr2 = &data;
int64_t
int64_t
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0LL;
data = 0LL
data
data
0LL
{        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        *dataPtr1 = data;    }
int64_t data = *dataPtr1;
int64_t data = *dataPtr1;
int64_t
int64_t
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t data = *dataPtr2;
int64_t data = *dataPtr2;
int64_t
int64_t
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(11,10,0)
(18,21,0)
(4,7,0)
(37,16,0)
(3,2,0)
(6,19,0)
(37,21,0)
(23,35,0)
(40,14,0)
(28,16,0)
(46,44,0)
(22,38,0)
(43,21,0)
(19,29,0)
(42,44,0)
(32,37,0)
(2,30,0)
(47,30,0)
(16,37,0)
(0,42,0)
(5,11,0)
(42,0,0)
(29,2,0)
(19,34,0)
(39,21,0)
(13,35,0)
(10,11,0)
(11,35,0)
(7,20,0)
(41,0,0)
(0,37,0)
(2,29,0)
(25,30,0)
(29,34,0)
(24,21,0)
(14,13,0)
(35,44,0)
(12,2,0)
(8,34,0)
(26,29,0)
(35,11,0)
(9,18,0)
(1,47,0)
(27,13,0)
(11,5,0)
(44,21,0)
(31,21,0)
(20,38,0)
(20,21,0)
(45,42,0)
(33,20,0)
(30,7,0)
(30,18,0)
(17,47,0)
(7,30,0)
(14,37,0)
(38,20,0)
(15,18,0)
(13,44,0)
(27,14,1)
(41,45,1)
(14,40,1)
(37,16,1)
(19,6,1)
(30,7,1)
(36,47,1)
(7,20,1)
(42,0,1)
(23,42,1)
(2,12,1)
(7,4,1)
(40,35,1)
(11,5,1)
(4,25,1)
(5,23,1)
(13,27,1)
(0,41,1)
(36,19,1)
(35,11,1)
(47,30,1)
(28,32,1)
(2,30,1)
(25,13,1)
(33,37,1)
(19,29,1)
(1,17,1)
(11,10,1)
(3,26,1)
(22,33,1)
(0,37,1)
(6,29,1)
(38,22,1)
(12,3,1)
(16,28,1)
(13,35,1)
(45,31,1)
(20,38,1)
(17,30,1)
(14,37,1)
(31,20,1)
(26,47,1)
(29,2,1)
(47,1,1)
(19,47,2)
(13,35,2)
(6,47,2)
(14,37,2)
(20,38,2)
(0,37,2)
(30,7,2)
(35,11,2)
(29,2,2)
(7,20,2)
(26,47,2)
(12,47,2)
(11,5,2)
(2,30,2)
(19,29,2)
(47,30,2)
(3,47,2)
(37,16,2)
(29,47,2)
(2,47,2)
(11,10,2)
(42,0,2)
-----------------------------------
(0,*dataPtr1)
(1,0)
(2,data * 2)
(3,data)
(4,dataPtr2)
(5,RAND64()
(6,result)
(7,*dataPtr2)
(8,result)
(9,data)
(10,int64_t)
(11,(int64_t)
(12,2)
(13,*dataPtr1 = data)
(14,*dataPtr1)
(15,if(data > 0)
(16,&data)
(17,data)
(18,)
(19,printLongLongLine(result)
(20,*dataPtr2 = &data)
(21,)
(22,data)
(23,data)
(24,dataPtr2)
(25,data)
(26,result)
(27,data)
(28,data)
(29,result = data * 2)
(30,data = *dataPtr2)
(31,L)
(32,dataPtr1)
(33,dataPtr2)
(34,)
(35,data = (int64_t)
(36,RET)
(37,*dataPtr1 = &data)
(38,&data)
(39,dataPtr1)
(40,dataPtr1)
(41,dataPtr1)
(42,data = *dataPtr1)
(43,data)
(44,)
(45,data)
(46,data)
(47,data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^