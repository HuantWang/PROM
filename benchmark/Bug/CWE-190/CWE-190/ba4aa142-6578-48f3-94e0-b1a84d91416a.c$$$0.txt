-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,32,38,41,43,46,50,52,53
-----computeFrom-----
12,13
12,14
20,21
20,22
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_rand_postinc_16_bad()
CWE190_Integer_Overflow__char_rand_postinc_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(0,26,0)
(15,12,0)
(20,22,0)
(16,26,0)
(28,20,0)
(23,22,0)
(3,16,0)
(22,15,0)
(13,21,0)
(11,22,0)
(26,8,0)
(24,1,0)
(8,26,0)
(16,15,0)
(8,17,0)
(9,8,0)
(8,9,0)
(17,8,0)
(19,25,0)
(16,1,0)
(27,25,0)
(4,1,0)
(18,25,0)
(14,15,0)
(2,12,0)
(22,26,0)
(20,15,0)
(22,1,0)
(26,21,0)
(1,25,0)
(5,6,1)
(24,4,1)
(7,1,1)
(20,22,1)
(28,22,1)
(0,7,1)
(2,20,1)
(16,1,1)
(3,6,1)
(26,8,1)
(5,2,1)
(22,1,1)
(11,16,1)
(17,0,1)
(13,26,1)
(16,3,1)
(6,13,1)
(22,23,1)
(6,7,1)
(16,26,1)
(20,28,1)
(23,11,1)
(8,9,1)
(8,17,1)
(22,26,1)
(1,24,1)
(26,7,2)
(16,6,2)
(20,22,2)
(8,17,2)
(22,1,2)
(28,6,2)
(11,6,2)
(8,7,2)
(23,6,2)
(16,1,2)
(3,6,2)
(16,26,2)
(0,7,2)
(17,7,2)
(22,26,2)
(20,6,2)
(13,7,2)
(2,6,2)
(26,8,2)
(22,6,2)
(8,9,2)
-----------------------------------
(0,data)
(1,data = ' ')
(2,break;)
(3,data)
(4,data)
(5,RET)
(6,1)
(7,1)
(8,(char)
(9,char)
(10,data = \' \')
(11,result)
(12,)
(13,break;)
(14,result)
(15,)
(16,data++)
(17,RAND32()
(18,while(1)
(19,data)
(20,printHexCharLine(result)
(21,)
(22,result = data)
(23,data)
(24,' ')
(25,)
(26,data = (char)
(27,while(1)
(28,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^