-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_14_bad()
CWE190_Integer_Overflow__int_fscanf_square_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(29,8,0)
(14,15,0)
(28,14,0)
(21,14,0)
(20,8,0)
(13,24,0)
(1,4,0)
(26,0,0)
(6,10,0)
(11,0,0)
(25,26,0)
(18,4,0)
(0,6,0)
(14,28,0)
(19,28,0)
(5,12,0)
(7,9,0)
(4,24,0)
(24,12,0)
(16,6,0)
(2,24,0)
(17,12,0)
(22,12,0)
(28,24,0)
(27,14,0)
(4,0,0)
(0,4,0)
(3,9,0)
(26,6,0)
(19,21,1)
(21,27,1)
(14,28,1)
(28,19,1)
(24,13,1)
(20,29,1)
(3,7,1)
(1,18,1)
(8,20,1)
(4,24,1)
(29,24,1)
(18,11,1)
(26,25,1)
(0,4,1)
(9,3,1)
(26,0,1)
(28,24,1)
(25,0,1)
(7,14,1)
(13,2,1)
(23,9,1)
(23,26,1)
(11,9,1)
(4,1,1)
(27,8,1)
(7,8,1)
(27,8,2)
(11,9,2)
(18,9,2)
(19,8,2)
(28,24,2)
(14,28,2)
(1,9,2)
(0,4,2)
(25,9,2)
(4,9,2)
(26,9,2)
(28,8,2)
(0,9,2)
(21,8,2)
(4,24,2)
(26,0,2)
(14,8,2)
-----------------------------------
(0,result = data * data)
(1,data)
(2,data)
(3,5)
(4,data * data)
(5,if(globalFive==5)
(6,)
(7,globalFive)
(8,globalFive==5)
(9,globalFive==5)
(10,)
(11,result)
(12,)
(13,0)
(14,fscanf(stdin, "%d", &data)
(15,)
(16,result)
(17,if(globalFive==5)
(18,data)
(19,data)
(20,5)
(21,"%d")
(22,data)
(23,RET)
(24,data = 0)
(25,result)
(26,printIntLine(result)
(27,stdin)
(28,&data)
(29,globalFive)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^