-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_07_bad()
{
    short data;
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,43,47,49,53,54,58,60
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
40,41
40,42
51,52
51,53
-----guardedBy-----
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_07_bad(){    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_07_bad()
CWE190_Integer_Overflow__short_rand_multiply_07_bad
{    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,26,0)
(15,16,0)
(19,0,0)
(10,19,0)
(13,10,0)
(4,19,0)
(30,19,0)
(22,19,0)
(12,31,0)
(17,4,0)
(4,25,0)
(32,8,0)
(14,22,0)
(25,16,0)
(21,3,0)
(6,16,0)
(9,3,0)
(33,8,0)
(20,4,0)
(21,22,0)
(24,25,0)
(28,29,0)
(27,21,0)
(5,1,0)
(18,25,0)
(31,21,0)
(19,10,0)
(10,13,0)
(22,21,0)
(2,16,0)
(7,1,0)
(31,3,0)
(23,22,0)
(22,25,0)
(26,10,0)
(17,1,1)
(20,17,1)
(31,21,1)
(8,33,1)
(4,19,1)
(13,30,1)
(27,4,1)
(22,19,1)
(10,13,1)
(31,12,1)
(33,32,1)
(7,8,1)
(24,18,1)
(10,26,1)
(11,1,1)
(11,31,1)
(5,7,1)
(4,25,1)
(22,25,1)
(11,4,1)
(25,24,1)
(22,14,1)
(23,27,1)
(4,20,1)
(1,5,1)
(32,25,1)
(30,8,1)
(21,22,1)
(19,10,1)
(7,19,1)
(14,23,1)
(12,21,1)
(12,4,2)
(31,4,2)
(4,1,2)
(17,1,2)
(23,4,2)
(21,4,2)
(10,8,2)
(22,4,2)
(14,4,2)
(19,10,2)
(20,1,2)
(19,8,2)
(22,25,2)
(30,8,2)
(22,19,2)
(10,26,2)
(27,4,2)
(31,21,2)
(21,22,2)
(13,8,2)
(4,19,2)
(4,25,2)
(10,13,2)
-----------------------------------
(0,)
(1,staticFive==5)
(2,if(staticFive==5)
(3,)
(4,data > 0)
(5,5)
(6,if(staticFive==5)
(7,staticFive)
(8,staticFive==5)
(9,result)
(10,(short)
(11,RET)
(12,result)
(13,RAND32()
(14,2)
(15,data)
(16,)
(17,data)
(18,data)
(19,data = (short)
(20,0)
(21,result = data * 2)
(22,data * 2)
(23,data)
(24,0)
(25,data = 0)
(26,short)
(27,result)
(28,if(data > 0)
(29,)
(30,data)
(31,printIntLine(result)
(32,staticFive)
(33,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^