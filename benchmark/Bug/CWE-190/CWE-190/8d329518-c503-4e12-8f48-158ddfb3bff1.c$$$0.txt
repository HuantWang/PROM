-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (SHRT_MAX/2))
            {
                short result = data * 2;
                printIntLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
72,73
72,74
72,75
73,74
73,75
74,75
76,77
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
85,86
85,87
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,47,51,53,57,58,62,64,69,70,75,79,80,84,86,90,91,95,97,102,103
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
44,45
44,46
55,56
55,57
67,68
67,69
73,74
73,75
77,78
77,79
88,89
88,90
-----guardedBy-----
46,57
69,90
75,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_12_bad()
CWE190_Integer_Overflow__short_rand_multiply_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (SHRT_MAX/2)
data
data
(SHRT_MAX/2)
SHRT_MAX/2
SHRT_MAX
SHRT_MAX
2
{                short result = data * 2;                printIntLine(result);            }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(24,41,0)
(14,30,0)
(7,52,0)
(6,10,0)
(55,10,0)
(55,24,0)
(10,40,0)
(0,24,0)
(32,52,0)
(16,36,0)
(55,15,0)
(15,11,0)
(30,24,0)
(31,44,0)
(23,6,0)
(25,24,0)
(49,6,0)
(15,55,0)
(2,15,0)
(8,2,0)
(34,10,0)
(42,27,0)
(52,32,0)
(5,14,0)
(6,24,0)
(30,14,0)
(44,31,0)
(32,24,0)
(48,0,0)
(52,27,0)
(57,33,0)
(28,29,0)
(44,24,0)
(53,11,0)
(54,1,0)
(24,44,0)
(4,27,0)
(13,33,0)
(35,44,0)
(19,33,0)
(18,30,0)
(51,15,0)
(56,33,0)
(43,14,0)
(50,32,0)
(30,10,0)
(20,13,0)
(12,22,0)
(46,13,0)
(37,55,0)
(44,35,0)
(26,55,0)
(3,0,0)
(39,10,0)
(2,11,0)
(9,4,0)
(4,52,0)
(17,32,0)
(32,10,0)
(21,16,0)
(0,10,0)
(32,10,1)
(44,35,1)
(38,6,1)
(26,37,1)
(15,55,1)
(4,52,1)
(32,24,1)
(39,45,1)
(21,30,1)
(8,15,1)
(4,9,1)
(48,3,1)
(47,24,1)
(49,23,1)
(24,44,1)
(5,18,1)
(6,24,1)
(0,48,1)
(23,47,1)
(30,14,1)
(2,15,1)
(52,32,1)
(25,45,1)
(16,21,1)
(18,0,1)
(47,10,1)
(0,10,1)
(30,10,1)
(7,30,1)
(2,8,1)
(38,16,1)
(55,24,1)
(50,7,1)
(37,51,1)
(38,0,1)
(38,4,1)
(45,13,1)
(14,43,1)
(44,31,1)
(31,25,1)
(34,39,1)
(17,50,1)
(6,10,1)
(6,49,1)
(13,20,1)
(30,24,1)
(10,34,1)
(0,24,1)
(38,2,1)
(55,10,1)
(3,47,1)
(55,26,1)
(51,6,1)
(43,5,1)
(32,17,1)
(20,46,1)
(9,52,1)
(32,24,2)
(4,30,2)
(15,6,2)
(30,24,2)
(44,45,2)
(52,32,2)
(9,30,2)
(23,47,2)
(55,10,2)
(30,10,2)
(32,10,2)
(14,0,2)
(5,0,2)
(48,47,2)
(30,14,2)
(6,10,2)
(26,6,2)
(16,30,2)
(10,45,2)
(30,0,2)
(37,6,2)
(0,47,2)
(43,0,2)
(50,30,2)
(17,30,2)
(0,24,2)
(52,30,2)
(7,30,2)
(18,0,2)
(21,30,2)
(3,47,2)
(15,55,2)
(24,45,2)
(24,44,2)
(2,15,2)
(25,45,2)
(6,47,2)
(55,24,2)
(34,45,2)
(4,52,2)
(51,6,2)
(6,24,2)
(44,35,2)
(31,45,2)
(39,45,2)
(8,6,2)
(55,6,2)
(49,47,2)
(32,30,2)
(0,10,2)
(44,31,2)
(2,6,2)
-----------------------------------
(0,data > 0)
(1,)
(2,printIntLine(result)
(3,data)
(4,printIntLine(result)
(5,SHRT_MAX)
(6,data > 0)
(7,result)
(8,result)
(9,result)
(10,data = 2)
(11,)
(12,if (data < (SHRT_MAX/2)
(13,data = 0)
(14,SHRT_MAX/2)
(15,result = data * 2)
(16,printLine("data value is too large to perform arithmetic safely.")
(17,2)
(18,data)
(19,data)
(20,0)
(21,"data value is too large to perform arithmetic safely.")
(22,)
(23,data)
(24,data = (short)
(25,data)
(26,2)
(27,)
(28,if(data > 0)
(29,)
(30,data < (SHRT_MAX/2)
(31,RAND32()
(32,data * 2)
(33,)
(34,2)
(35,short)
(36,)
(37,data)
(38,RET)
(39,data)
(40,)
(41,)
(42,result)
(43,2)
(44,(short)
(45,globalReturnsTrueOrFalse()
(46,data)
(47,globalReturnsTrueOrFalse()
(48,0)
(49,0)
(50,data)
(51,result)
(52,result = data * 2)
(53,result)
(54,if(data > 0)
(55,data * 2)
(56,if(globalReturnsTrueOrFalse()
(57,if(globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^