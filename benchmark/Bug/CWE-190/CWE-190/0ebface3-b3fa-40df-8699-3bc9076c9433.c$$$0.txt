-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_add_01_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        int result = data + 1;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
56,58
57,58
58,59
58,60
60,61
60,62
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,49,54,55,59,61,65,66,70,72
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
63,64
63,65
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_add_01_bad(){    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_add_01_bad()
CWE190_Integer_Overflow__int_fgets_add_01_bad
{    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(6,0,0)
(16,32,0)
(28,22,0)
(33,10,0)
(23,13,0)
(13,10,0)
(18,8,0)
(7,13,0)
(21,34,0)
(34,14,0)
(33,8,0)
(11,5,0)
(8,33,0)
(15,25,0)
(32,0,0)
(5,13,0)
(31,33,0)
(4,32,0)
(2,13,0)
(22,0,0)
(17,27,0)
(28,34,0)
(12,34,0)
(29,14,0)
(8,19,0)
(27,22,0)
(24,22,0)
(9,15,0)
(13,5,0)
(27,28,0)
(1,14,0)
(26,10,0)
(20,28,0)
(10,32,0)
(34,8,0)
(14,0,0)
(30,10,0)
(34,28,0)
(33,10,1)
(34,8,1)
(26,14,1)
(20,8,1)
(15,9,1)
(33,31,1)
(7,2,1)
(5,13,1)
(17,28,1)
(18,5,1)
(2,10,1)
(27,17,1)
(5,11,1)
(30,26,1)
(34,14,1)
(11,13,1)
(31,18,1)
(12,20,1)
(13,23,1)
(14,29,1)
(13,10,1)
(23,7,1)
(27,28,1)
(21,12,1)
(34,21,1)
(10,30,1)
(29,1,1)
(20,15,1)
(28,34,1)
(9,5,1)
(3,27,1)
(8,33,1)
(33,10,2)
(5,13,2)
(15,5,2)
(34,8,2)
(34,14,2)
(31,5,2)
(27,28,2)
(33,5,2)
(13,10,2)
(28,34,2)
(8,33,2)
(18,5,2)
(8,5,2)
(9,5,2)
-----------------------------------
(0,)
(1,data)
(2,inputBuffer)
(3,RET)
(4,inputBuffer)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,data)
(7,CHAR_ARRAY_SIZE)
(8,data = atoi(inputBuffer)
(9,"fgets()
(10,inputBuffer[CHAR_ARRAY_SIZE] = "")
(11,NULL)
(12,data)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,data = 0)
(15,printLine("fgets()
(16,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,result)
(18,data)
(19,)
(20,result)
(21,1)
(22,)
(23,stdin)
(24,result)
(25,)
(26,inputBuffer)
(27,printIntLine(result)
(28,result = data + 1)
(29,0)
(30,"")
(31,inputBuffer)
(32,)
(33,atoi(inputBuffer)
(34,data + 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^