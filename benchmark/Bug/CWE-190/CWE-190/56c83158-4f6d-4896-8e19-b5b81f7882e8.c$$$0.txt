-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_add_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        short result = data + 1;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,50,54,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
22,23
22,24
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_add_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_rand_add_15_bad()
CWE190_Integer_Overflow__short_rand_add_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        short result = data + 1;        printIntLine(result);    }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(5,30,0)
(6,34,0)
(20,34,0)
(15,2,0)
(7,9,0)
(16,27,0)
(10,27,0)
(25,17,0)
(26,16,0)
(14,18,0)
(15,1,0)
(32,34,0)
(36,15,0)
(11,5,0)
(8,32,0)
(5,1,0)
(4,9,0)
(12,18,0)
(27,5,0)
(37,1,0)
(16,17,0)
(28,34,0)
(35,30,0)
(27,17,0)
(5,27,0)
(15,36,0)
(17,34,0)
(23,34,0)
(29,9,0)
(22,5,0)
(2,15,0)
(19,9,0)
(30,18,0)
(1,15,0)
(33,30,0)
(13,4,0)
(3,9,0)
(1,9,0)
(0,18,0)
(7,1,1)
(31,19,1)
(15,36,1)
(8,31,1)
(26,27,1)
(21,30,1)
(11,22,1)
(22,10,1)
(23,32,1)
(19,4,1)
(27,5,1)
(15,2,1)
(30,35,1)
(24,23,1)
(31,7,1)
(16,26,1)
(1,15,1)
(5,1,1)
(37,21,1)
(10,31,1)
(5,11,1)
(24,6,1)
(16,27,1)
(4,13,1)
(5,30,1)
(6,16,1)
(35,33,1)
(2,37,1)
(13,21,1)
(32,8,1)
(27,31,2)
(32,31,2)
(10,31,2)
(23,31,2)
(4,21,2)
(19,21,2)
(22,31,2)
(8,31,2)
(26,31,2)
(6,31,2)
(27,5,2)
(13,21,2)
(16,27,2)
(1,15,2)
(15,36,2)
(1,21,2)
(16,31,2)
(2,21,2)
(15,21,2)
(37,21,2)
(11,31,2)
(5,31,2)
(5,1,2)
(7,21,2)
(5,30,2)
(15,2,2)
-----------------------------------
(0,data)
(1,data = (short)
(2,RAND32()
(3,default:)
(4,printLine("Benign, fixed string")
(5,data + 1)
(6,break;)
(7,break;)
(8,"Benign, fixed string")
(9,)
(10,result)
(11,1)
(12,switch(6)
(13,"Benign, fixed string")
(14,switch(7)
(15,(short)
(16,printIntLine(result)
(17,)
(18,)
(19,break;)
(20,case 7:)
(21,6)
(22,data)
(23,break;)
(24,RET)
(25,result)
(26,result)
(27,result = data + 1)
(28,default:)
(29,case 6:)
(30,data = 0)
(31,7)
(32,printLine("Benign, fixed string")
(33,data)
(34,)
(35,0)
(36,short)
(37,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^