-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_add_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
58,60
59,60
60,61
60,62
62,63
62,64
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,48,49,52,53,56,61,63,67,68,72,74
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
46,47
46,48
50,51
50,52
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_add_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_add_17_bad()
CWE190_Integer_Overflow__int_rand_add_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,14,0)
(13,34,0)
(9,10,0)
(12,37,0)
(31,35,0)
(22,30,0)
(30,22,0)
(27,7,0)
(20,32,0)
(24,20,0)
(20,14,0)
(18,32,0)
(23,20,0)
(1,2,0)
(19,14,0)
(11,7,0)
(28,37,0)
(38,15,0)
(15,33,0)
(4,35,0)
(26,15,0)
(14,37,0)
(0,37,0)
(39,34,0)
(16,37,0)
(32,20,0)
(25,38,0)
(38,32,0)
(5,39,0)
(30,8,0)
(2,34,0)
(20,30,0)
(10,7,0)
(29,37,0)
(17,2,0)
(32,15,0)
(6,30,0)
(35,7,0)
(36,34,0)
(4,10,1)
(10,9,1)
(27,11,1)
(20,14,1)
(7,27,1)
(2,34,1)
(22,6,1)
(35,7,1)
(19,21,1)
(23,18,1)
(20,24,1)
(20,30,1)
(17,1,1)
(13,36,1)
(1,39,1)
(32,20,1)
(11,14,1)
(34,13,1)
(31,4,1)
(39,34,1)
(25,32,1)
(24,23,1)
(18,2,1)
(38,25,1)
(3,2,1)
(35,31,1)
(1,34,1)
(4,7,1)
(9,30,1)
(39,5,1)
(6,35,1)
(36,35,1)
(38,32,1)
(30,22,1)
(14,19,1)
(2,17,1)
(10,7,1)
(5,38,1)
(31,35,2)
(18,2,2)
(2,34,2)
(30,35,2)
(1,2,2)
(4,35,2)
(20,14,2)
(30,22,2)
(10,35,2)
(32,20,2)
(20,30,2)
(22,35,2)
(23,2,2)
(10,7,2)
(9,35,2)
(35,35,2)
(39,2,2)
(17,2,2)
(2,2,2)
(39,34,2)
(25,2,2)
(38,32,2)
(38,2,2)
(35,7,2)
(6,35,2)
(5,2,2)
(20,2,2)
(32,2,2)
(24,2,2)
-----------------------------------
(0,for(j = 0; j < 1; j++)
(1,j)
(2,j < 1)
(3,RET)
(4,i)
(5,j)
(6,data)
(7,i = 0)
(8,)
(9,i)
(10,i++)
(11,i)
(12,j)
(13,0)
(14,data = 0)
(15,)
(16,data)
(17,1)
(18,result)
(19,0)
(20,data + 1)
(21,data)
(22,RAND32()
(23,data)
(24,1)
(25,result)
(26,result)
(27,0)
(28,i)
(29,for(i = 0; i < 1; i++)
(30,data = RAND32()
(31,1)
(32,result = data + 1)
(33,)
(34,j = 0)
(35,i < 1)
(36,j)
(37,)
(38,printIntLine(result)
(39,j++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^