-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_12_bad()
{
    int64_t data;
    data = 0LL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))
        {
            int64_t result = data * data;
            printLongLongLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
30,31
31,32
33,34
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
64,65
66,67
66,68
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
92,93
92,94
93,94
-----nextToken-----
2,4,9,11,15,16,20,27,28,32,38,40,44,46,50,52,58,62,63,65,68,70,75,77,81,83,87,89,94,95
-----computeFrom-----
13,14
13,15
25,26
25,27
42,43
42,44
55,56
55,57
79,80
79,81
-----guardedBy-----
65,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_12_bad(){    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_square_12_bad()
CWE190_Integer_Overflow__int64_t_fscanf_square_12_bad
{    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX)
imaxabs((intmax_t)data)
imaxabs
imaxabs
(intmax_t)data
intmax_t
intmax_t
intmax_t

data
data
sqrtl(LLONG_MAX)
sqrtl
sqrtl
LLONG_MAX
LLONG_MAX
{            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(10,5,0)
(36,14,0)
(28,7,0)
(34,33,0)
(3,15,0)
(15,37,0)
(7,21,0)
(20,35,0)
(40,38,0)
(11,23,0)
(32,34,0)
(8,23,0)
(30,7,0)
(9,2,0)
(1,23,0)
(14,5,0)
(38,35,0)
(13,21,0)
(7,5,0)
(34,39,0)
(2,35,0)
(38,5,0)
(31,23,0)
(21,7,0)
(25,39,0)
(2,41,0)
(33,39,0)
(19,38,0)
(16,5,0)
(21,13,0)
(13,6,0)
(35,41,0)
(6,13,0)
(33,14,0)
(39,27,0)
(35,38,0)
(24,33,0)
(5,17,0)
(29,0,0)
(7,30,0)
(14,33,0)
(22,41,0)
(4,6,0)
(42,14,0)
(33,14,1)
(24,18,1)
(15,3,1)
(10,26,1)
(26,1,1)
(7,30,1)
(28,18,1)
(21,7,1)
(7,28,1)
(5,16,1)
(6,4,1)
(34,33,1)
(9,35,1)
(13,21,1)
(20,13,1)
(34,32,1)
(12,15,1)
(18,26,1)
(36,24,1)
(35,38,1)
(32,33,1)
(2,9,1)
(12,34,1)
(12,2,1)
(13,6,1)
(19,20,1)
(40,19,1)
(16,10,1)
(38,40,1)
(7,5,1)
(2,35,1)
(42,36,1)
(18,5,1)
(14,42,1)
(14,5,1)
(3,13,1)
(4,21,1)
(38,5,1)
(21,7,2)
(21,18,2)
(10,26,2)
(33,14,2)
(16,26,2)
(7,30,2)
(4,18,2)
(36,18,2)
(40,13,2)
(13,18,2)
(6,18,2)
(15,13,2)
(14,5,2)
(13,6,2)
(35,38,2)
(28,18,2)
(7,18,2)
(13,21,2)
(35,13,2)
(7,5,2)
(14,18,2)
(3,13,2)
(38,13,2)
(34,33,2)
(32,18,2)
(2,13,2)
(42,18,2)
(19,13,2)
(20,13,2)
(38,5,2)
(9,13,2)
(33,18,2)
(2,35,2)
(5,26,2)
(24,18,2)
(34,18,2)
-----------------------------------
(0,)
(1,L)
(2,printLongLongLine(result)
(3,"data value is too large to perform arithmetic safely.")
(4,LLONG_MAX)
(5,data = 2)
(6,sqrtl(LLONG_MAX)
(7,(intmax_t)
(8,if(globalReturnsTrueOrFalse()
(9,result)
(10,data)
(11,data)
(12,RET)
(13,imaxabs((intmax_t)
(14,data * data)
(15,printLine("data value is too large to perform arithmetic safely.")
(16,2)
(17,)
(18,globalReturnsTrueOrFalse()
(19,data)
(20,result)
(21,imaxabs((intmax_t)
(22,result)
(23,)
(24,result)
(25,result)
(26,globalReturnsTrueOrFalse()
(27,)
(28,data)
(29,if (imaxabs((intmax_t)
(30,intmax_t)
(31,if(globalReturnsTrueOrFalse()
(32,result)
(33,result = data * data)
(34,printLongLongLine(result)
(35,result = data * data)
(36,data)
(37,)
(38,data * data)
(39,)
(40,data)
(41,)
(42,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^