-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
25,26
26,27
26,28
27,28
31,32
31,33
33,34
33,35
33,36
33,37
33,38
33,39
34,35
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,9,11,15,16,18,21,23,24,28,29,30,32,35,39,40,45,47,51,52,56,58,59,60,64,65,66
-----computeFrom-----
13,14
13,15
37,38
37,39
49,50
49,51
-----guardedBy-----
39,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ProblemStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%" SCNd64, &data);
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(21,0,0)
(18,1,0)
(31,14,0)
(7,19,0)
(34,0,0)
(9,17,0)
(33,25,0)
(13,1,0)
(23,17,0)
(2,17,0)
(19,17,0)
(30,0,0)
(12,0,0)
(1,27,0)
(25,14,0)
(5,27,0)
(8,18,0)
(10,16,0)
(15,17,0)
(24,13,0)
(1,18,0)
(3,1,0)
(4,14,0)
(32,14,0)
(22,16,0)
(28,14,0)
(26,18,0)
(20,14,0)
(13,27,0)
(33,6,1)
(6,9,1)
(15,11,1)
(18,26,1)
(24,1,1)
(22,10,1)
(29,32,1)
(20,25,1)
(19,7,1)
(32,16,1)
(11,21,1)
(26,8,1)
(7,11,1)
(10,6,1)
(25,33,1)
(9,19,1)
(32,13,1)
(29,20,1)
(13,1,1)
(1,18,1)
(3,16,1)
(13,24,1)
(8,3,1)
(16,22,1)
(6,15,1)
(8,16,2)
(16,6,2)
(10,6,2)
(19,11,2)
(9,11,2)
(15,11,2)
(1,18,2)
(1,16,2)
(33,6,2)
(22,6,2)
(25,6,2)
(13,1,2)
(18,16,2)
(13,16,2)
(24,16,2)
(3,16,2)
(26,16,2)
(7,11,2)
(32,6,2)
(20,6,2)
-----------------------------------
(0,)
(1,result = data * 2)
(2,case 6:)
(3,result)
(4,if(data > 0)
(5,result)
(6,7)
(7,"Benign, fixed string")
(8,data)
(9,break;)
(10,data)
(11,6)
(12,switch(7)
(13,printLongLongLine(result)
(14,)
(15,break;)
(16,data > 0)
(17,)
(18,data * 2)
(19,printLine("Benign, fixed string")
(20,break;)
(21,L)
(22,0)
(23,default:)
(24,result)
(25,printLine("Benign, fixed string")
(26,2)
(27,)
(28,case 7:)
(29,RET)
(30,data)
(31,default:)
(32,break;)
(33,"Benign, fixed string")
(34,switch(6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^