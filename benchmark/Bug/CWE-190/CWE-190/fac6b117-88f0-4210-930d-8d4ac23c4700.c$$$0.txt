-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
49,50
50,51
52,53
53,54
53,55
54,55
54,56
55,56
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,43,44,47,48,51,56,57,62,64,68,69,73,75
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
41,42
41,43
45,46
45,47
54,55
54,56
66,67
66,68
-----guardedBy-----
56,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ProblemStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(2,16,0)
(12,4,0)
(11,20,0)
(9,3,0)
(21,2,0)
(31,27,0)
(30,26,0)
(19,26,0)
(13,12,0)
(7,4,0)
(14,12,0)
(10,20,0)
(0,2,0)
(33,16,0)
(17,28,0)
(4,12,0)
(27,3,0)
(8,20,0)
(19,4,0)
(1,27,0)
(25,3,0)
(22,16,0)
(6,34,0)
(5,36,0)
(4,26,0)
(37,3,0)
(29,19,0)
(18,20,0)
(15,20,0)
(28,16,0)
(32,36,0)
(35,20,0)
(23,25,0)
(32,5,1)
(1,3,1)
(27,3,1)
(17,19,1)
(2,16,1)
(5,2,1)
(27,31,1)
(12,14,1)
(16,22,1)
(19,29,1)
(13,7,1)
(19,4,1)
(9,37,1)
(0,28,1)
(23,27,1)
(21,0,1)
(0,16,1)
(29,4,1)
(36,32,1)
(33,27,1)
(22,33,1)
(3,9,1)
(28,17,1)
(25,23,1)
(17,36,1)
(2,21,1)
(25,3,1)
(28,16,1)
(14,13,1)
(37,8,1)
(4,12,1)
(7,36,1)
(31,1,1)
(1,25,1)
(24,2,1)
(28,16,2)
(2,2,2)
(27,3,2)
(19,4,2)
(25,27,2)
(36,2,2)
(2,16,2)
(0,2,2)
(27,27,2)
(17,2,2)
(29,36,2)
(7,36,2)
(5,2,2)
(4,12,2)
(4,36,2)
(23,27,2)
(19,36,2)
(32,2,2)
(25,3,2)
(28,2,2)
(31,27,2)
(1,27,2)
(14,36,2)
(21,2,2)
(13,36,2)
(12,36,2)
-----------------------------------
(0,j)
(1,i)
(2,j < 1)
(3,i = 0)
(4,result = data * 2)
(5,data)
(6,if(data > 0)
(7,result)
(8,L)
(9,0)
(10,j)
(11,for(i = 0; i < 1; i++)
(12,data * 2)
(13,data)
(14,2)
(15,for(j = 0; j < 1; j++)
(16,j = 0)
(17,j)
(18,data)
(19,printLongLongLine(result)
(20,)
(21,1)
(22,0)
(23,i)
(24,RET)
(25,i++)
(26,)
(27,i < 1)
(28,j++)
(29,result)
(30,result)
(31,1)
(32,0)
(33,j)
(34,)
(35,i)
(36,data > 0)
(37,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^