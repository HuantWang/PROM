-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_18_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
32,33
32,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,31,33,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_18_bad(){    int data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_18_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_18_bad
{    int data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);
source
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,14,0)
(16,5,0)
(1,4,0)
(18,24,0)
(10,14,0)
(23,16,0)
(22,24,0)
(4,6,0)
(21,14,0)
(25,14,0)
(15,27,0)
(6,14,0)
(0,22,0)
(7,4,0)
(13,14,0)
(9,16,0)
(22,27,0)
(19,6,0)
(8,6,0)
(17,15,0)
(27,24,0)
(3,5,0)
(2,27,0)
(27,15,0)
(5,6,0)
(5,16,0)
(20,15,0)
(15,6,0)
(11,14,0)
(26,14,0)
(15,6,1)
(8,19,1)
(5,6,1)
(15,17,1)
(20,2,1)
(12,4,1)
(22,27,1)
(9,23,1)
(2,4,1)
(21,6,1)
(1,10,1)
(17,20,1)
(5,3,1)
(0,27,1)
(4,7,1)
(7,1,1)
(3,9,1)
(10,16,1)
(4,6,1)
(27,15,1)
(12,22,1)
(6,8,1)
(22,0,1)
(16,5,1)
(23,21,1)
(17,4,2)
(5,6,2)
(2,4,2)
(22,27,2)
(15,4,2)
(27,4,2)
(27,15,2)
(20,4,2)
(16,5,2)
(4,6,2)
(15,6,2)
(22,4,2)
(0,4,2)
-----------------------------------
(0,result)
(1,data)
(2,result)
(3,data)
(4,data > 0)
(5,&data)
(6,data = 0)
(7,0)
(8,0)
(9,"%d")
(10,goto sink;)
(11,sink:)
(12,RET)
(13,source:)
(14,)
(15,data * 2)
(16,fscanf(stdin, "%d", &data)
(17,2)
(18,result)
(19,data)
(20,data)
(21,goto source;)
(22,printIntLine(result)
(23,stdin)
(24,)
(25,data)
(26,if(data > 0)
(27,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^