-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_postinc_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_postinc_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_postinc_17_bad()
CWE190_Integer_Overflow__int_fscanf_postinc_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(2,22,0)
(22,13,0)
(15,13,0)
(11,23,0)
(16,7,0)
(25,22,0)
(27,39,0)
(34,36,0)
(1,13,0)
(7,17,0)
(19,23,0)
(37,32,0)
(32,7,0)
(28,31,0)
(30,13,0)
(33,39,0)
(18,20,0)
(12,13,0)
(37,7,0)
(20,22,0)
(3,18,0)
(0,18,0)
(10,32,0)
(36,23,0)
(29,32,0)
(8,39,0)
(32,22,0)
(41,33,0)
(35,33,0)
(2,7,0)
(21,22,0)
(20,18,0)
(14,37,0)
(9,31,0)
(31,23,0)
(4,39,0)
(6,8,0)
(40,20,0)
(18,5,0)
(24,2,0)
(26,13,0)
(28,23,1)
(8,6,1)
(41,8,1)
(32,22,1)
(18,20,1)
(41,39,1)
(11,19,1)
(38,33,1)
(31,9,1)
(27,31,1)
(24,33,1)
(33,35,1)
(39,4,1)
(10,2,1)
(33,39,1)
(3,0,1)
(0,31,1)
(23,11,1)
(36,23,1)
(36,34,1)
(20,40,1)
(2,22,1)
(37,32,1)
(34,18,1)
(4,27,1)
(37,14,1)
(19,22,1)
(9,28,1)
(8,39,1)
(28,36,1)
(32,29,1)
(14,32,1)
(6,37,1)
(40,3,1)
(29,10,1)
(21,25,1)
(22,21,1)
(20,22,1)
(31,23,1)
(2,24,1)
(35,41,1)
(40,31,2)
(24,33,2)
(37,32,2)
(36,31,2)
(35,33,2)
(32,22,2)
(6,33,2)
(10,33,2)
(8,39,2)
(3,31,2)
(9,31,2)
(29,33,2)
(20,22,2)
(14,33,2)
(31,23,2)
(37,33,2)
(20,31,2)
(33,33,2)
(18,31,2)
(2,33,2)
(34,31,2)
(41,33,2)
(36,23,2)
(33,39,2)
(31,31,2)
(0,31,2)
(32,33,2)
(18,20,2)
(8,33,2)
(2,22,2)
(28,31,2)
-----------------------------------
(0,stdin)
(1,for(j = 0; j < 1; j++)
(2,data++)
(3,"%d")
(4,0)
(5,)
(6,j)
(7,)
(8,j++)
(9,1)
(10,result)
(11,0)
(12,for(i = 0; i < 1; i++)
(13,)
(14,result)
(15,data)
(16,result)
(17,)
(18,fscanf(stdin, "%d", &data)
(19,i)
(20,&data)
(21,0)
(22,data = 0)
(23,i = 0)
(24,data)
(25,data)
(26,i)
(27,j)
(28,i)
(29,data)
(30,j)
(31,i < 1)
(32,result = data)
(33,j < 1)
(34,i)
(35,1)
(36,i++)
(37,printIntLine(result)
(38,RET)
(39,j = 0)
(40,data)
(41,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^