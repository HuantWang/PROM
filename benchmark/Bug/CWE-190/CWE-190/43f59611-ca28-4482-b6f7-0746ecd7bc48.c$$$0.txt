-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_04_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_04_bad(){    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_04_bad()
CWE190_Integer_Overflow__short_rand_square_04_bad
{    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(11,10,0)
(7,10,0)
(16,7,0)
(15,4,0)
(0,22,0)
(5,18,0)
(7,17,0)
(20,8,0)
(0,24,0)
(22,0,0)
(25,0,0)
(8,4,0)
(14,8,0)
(10,17,0)
(18,10,0)
(13,18,0)
(25,3,0)
(18,8,0)
(10,18,0)
(18,25,0)
(24,0,0)
(1,4,0)
(0,25,0)
(23,17,0)
(17,9,0)
(12,4,0)
(19,25,0)
(19,6,1)
(2,21,1)
(13,11,1)
(11,21,1)
(22,19,1)
(18,8,1)
(0,22,1)
(7,10,1)
(7,16,1)
(21,6,1)
(8,14,1)
(18,5,1)
(6,8,1)
(16,10,1)
(2,7,1)
(0,24,1)
(18,25,1)
(14,20,1)
(10,18,1)
(21,25,1)
(25,0,1)
(5,13,1)
(13,21,2)
(10,18,2)
(11,21,2)
(0,24,2)
(16,21,2)
(0,22,2)
(25,0,2)
(18,25,2)
(7,21,2)
(19,6,2)
(0,6,2)
(10,21,2)
(7,10,2)
(25,6,2)
(18,8,2)
(18,21,2)
(22,6,2)
(5,21,2)
-----------------------------------
(0,(short)
(1,if(STATIC_CONST_TRUE)
(2,RET)
(3,)
(4,)
(5,data)
(6,STATIC_CONST_TRUE)
(7,printIntLine(result)
(8,data = 0)
(9,)
(10,result = data * data)
(11,result)
(12,data)
(13,data)
(14,0)
(15,if(STATIC_CONST_TRUE)
(16,result)
(17,)
(18,data * data)
(19,data)
(20,data)
(21,STATIC_CONST_TRUE)
(22,RAND32()
(23,result)
(24,short)
(25,data = (short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^