-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_01_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
21,22
23,24
23,25
24,25
24,26
25,26
28,29
28,30
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
43,44
-----nextToken-----
2,4,8,10,14,15,19,22,26,27,31,33,37,38,42,44
-----computeFrom-----
12,13
12,14
17,18
17,19
24,25
24,26
35,36
35,37
-----guardedBy-----
26,37
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_01_bad(){    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_rand_multiply_01_bad()
CWE190_Integer_Overflow__int_rand_multiply_01_bad
{    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,2,0)
(20,21,0)
(2,6,0)
(6,2,0)
(0,7,0)
(8,1,0)
(6,7,0)
(12,17,0)
(9,1,0)
(17,1,0)
(1,21,0)
(19,20,0)
(11,17,0)
(4,7,0)
(4,6,0)
(2,1,0)
(18,21,0)
(1,8,0)
(15,4,0)
(3,6,0)
(13,2,0)
(5,20,0)
(14,21,0)
(17,11,1)
(9,20,1)
(16,3,1)
(1,8,1)
(4,6,1)
(13,16,1)
(11,12,1)
(2,1,1)
(8,9,1)
(6,2,1)
(19,5,1)
(10,4,1)
(4,15,1)
(12,1,1)
(17,1,1)
(2,13,1)
(15,6,1)
(3,17,1)
(20,19,1)
(10,17,1)
(3,17,2)
(4,6,2)
(17,1,2)
(15,17,2)
(2,17,2)
(2,1,2)
(6,17,2)
(1,8,2)
(13,17,2)
(6,2,2)
(16,17,2)
(4,17,2)
-----------------------------------
(0,result)
(1,data = RAND32()
(2,data * 2)
(3,result)
(4,printIntLine(result)
(5,data)
(6,result = data * 2)
(7,)
(8,RAND32()
(9,data)
(10,RET)
(11,0)
(12,data)
(13,2)
(14,if(data > 0)
(15,result)
(16,data)
(17,data > 0)
(18,data)
(19,0)
(20,data = 0)
(21,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^