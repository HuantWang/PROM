-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_preinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            ++data;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_preinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_max_preinc_12_bad()
CWE190_Integer_Overflow__int_max_preinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(7,21,0)
(43,14,0)
(21,39,0)
(4,5,0)
(5,27,0)
(44,21,0)
(17,35,0)
(28,41,0)
(25,7,0)
(30,5,0)
(22,26,0)
(35,27,0)
(35,21,0)
(15,44,0)
(2,11,0)
(11,5,0)
(33,23,0)
(10,8,0)
(24,44,0)
(5,20,0)
(23,14,0)
(26,41,0)
(8,27,0)
(19,21,0)
(6,20,0)
(16,27,0)
(1,26,0)
(3,35,0)
(5,21,0)
(7,27,0)
(31,18,0)
(38,41,0)
(8,20,0)
(27,13,0)
(44,14,0)
(14,37,0)
(44,27,0)
(36,21,0)
(9,41,0)
(40,31,0)
(7,14,0)
(12,0,0)
(11,20,0)
(23,44,0)
(8,21,0)
(42,27,0)
(44,27,1)
(36,34,1)
(3,32,1)
(25,32,1)
(27,42,1)
(8,27,1)
(33,44,1)
(29,23,1)
(24,15,1)
(29,31,1)
(7,25,1)
(21,19,1)
(17,3,1)
(5,4,1)
(42,16,1)
(40,35,1)
(32,27,1)
(35,21,1)
(23,33,1)
(11,5,1)
(34,26,1)
(16,34,1)
(35,17,1)
(4,30,1)
(19,36,1)
(35,27,1)
(2,5,1)
(5,21,1)
(32,21,1)
(5,27,1)
(31,40,1)
(30,8,1)
(44,24,1)
(11,2,1)
(29,11,1)
(23,44,1)
(15,7,1)
(10,35,1)
(7,21,1)
(26,22,1)
(22,1,1)
(7,27,1)
(8,21,1)
(44,21,1)
(8,10,1)
(24,32,2)
(7,21,2)
(8,35,2)
(5,21,2)
(44,21,2)
(5,35,2)
(19,34,2)
(2,35,2)
(31,35,2)
(3,32,2)
(8,27,2)
(44,27,2)
(40,35,2)
(36,34,2)
(42,34,2)
(15,32,2)
(23,32,2)
(4,35,2)
(35,27,2)
(30,35,2)
(5,27,2)
(7,32,2)
(27,34,2)
(44,32,2)
(16,34,2)
(17,32,2)
(35,32,2)
(11,5,2)
(11,35,2)
(25,32,2)
(8,21,2)
(35,21,2)
(33,32,2)
(7,27,2)
(21,34,2)
(10,35,2)
(23,44,2)
-----------------------------------
(0,)
(1,data)
(2,result)
(3,data)
(4,data)
(5,result = data)
(6,result)
(7,++data)
(8,++data)
(9,if(globalReturnsTrueOrFalse()
(10,data)
(11,printIntLine(result)
(12,if (data < INT_MAX)
(13,)
(14,)
(15,result)
(16,data)
(17,INT_MAX)
(18,)
(19,INT_MAX)
(20,)
(21,data = INT_MAX)
(22,0)
(23,printIntLine(result)
(24,data)
(25,data)
(26,data = 0)
(27,data = 2)
(28,if(globalReturnsTrueOrFalse()
(29,RET)
(30,result)
(31,printLine("data value is too large to perform arithmetic safely.")
(32,globalReturnsTrueOrFalse()
(33,result)
(34,globalReturnsTrueOrFalse()
(35,data < INT_MAX)
(36,data)
(37,)
(38,data)
(39,)
(40,"data value is too large to perform arithmetic safely.")
(41,)
(42,2)
(43,result)
(44,result = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^