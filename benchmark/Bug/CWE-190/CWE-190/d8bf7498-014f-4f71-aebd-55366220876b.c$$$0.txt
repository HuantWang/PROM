-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_fgets_square_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
72,73
72,74
74,75
74,76
76,77
77,78
77,79
78,79
81,82
81,83
82,83
83,84
83,85
85,86
85,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,66,67,69,73,75,79,80,84,86,90,92,96,98
-----computeFrom-----
18,19
18,20
34,35
34,36
48,49
48,50
63,64
63,65
88,89
88,90
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_34_bad(){    int data;    CWE190_Integer_Overflow__int_fgets_square_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_34_bad()
CWE190_Integer_Overflow__int_fgets_square_34_bad
{    int data;    CWE190_Integer_Overflow__int_fgets_square_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_fgets_square_34_unionType myUnion;
CWE190_Integer_Overflow__int_fgets_square_34_unionType myUnion;
CWE190_Integer_Overflow__int_fgets_square_34_unionType
CWE190_Integer_Overflow__int_fgets_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(28,15,0)
(46,9,0)
(33,5,0)
(31,37,0)
(21,15,0)
(29,37,0)
(15,28,0)
(16,30,0)
(22,26,0)
(14,41,0)
(40,9,0)
(16,32,0)
(34,46,0)
(25,12,0)
(24,16,0)
(4,14,0)
(32,16,0)
(3,28,0)
(5,8,0)
(27,34,0)
(14,26,0)
(14,15,0)
(5,40,0)
(2,25,0)
(18,30,0)
(28,30,0)
(30,43,0)
(40,37,0)
(15,38,0)
(10,14,0)
(17,41,0)
(34,8,0)
(42,30,0)
(41,26,0)
(7,4,0)
(13,43,0)
(19,32,0)
(1,8,0)
(44,46,0)
(8,46,0)
(47,16,0)
(37,40,0)
(43,26,0)
(39,16,0)
(9,26,0)
(45,9,0)
(8,5,0)
(35,4,0)
(20,26,0)
(23,5,0)
(11,40,0)
(0,43,0)
(6,41,0)
(31,11,1)
(28,30,1)
(15,28,1)
(41,17,1)
(16,30,1)
(29,31,1)
(37,29,1)
(42,18,1)
(11,14,1)
(19,16,1)
(14,10,1)
(35,25,1)
(28,3,1)
(34,8,1)
(25,2,1)
(14,15,1)
(32,19,1)
(33,23,1)
(3,21,1)
(18,41,1)
(32,16,1)
(7,35,1)
(1,40,1)
(17,6,1)
(40,37,1)
(21,32,1)
(14,41,1)
(35,15,1)
(30,42,1)
(8,5,1)
(24,47,1)
(34,27,1)
(27,8,1)
(23,1,1)
(5,33,1)
(16,39,1)
(39,24,1)
(4,7,1)
(2,32,1)
(10,4,1)
(47,30,1)
(5,40,1)
(36,34,1)
(25,32,2)
(28,30,2)
(21,32,2)
(34,8,2)
(8,5,2)
(2,32,2)
(15,28,2)
(5,40,2)
(32,16,2)
(3,32,2)
(16,30,2)
(14,15,2)
(40,37,2)
(14,41,2)
(28,32,2)
(15,32,2)
-----------------------------------
(0,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,result)
(2,"fgets()
(3,inputBuffer)
(4,myUnion.unionFirst)
(5,data * data)
(6,data)
(7,unionFirst)
(8,result = data * data)
(9,)
(10,data)
(11,data)
(12,)
(13,inputBuffer)
(14,myUnion.unionFirst = data)
(15,data = atoi(inputBuffer)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,0)
(18,inputBuffer)
(19,NULL)
(20,data)
(21,data)
(22,myUnion)
(23,data)
(24,CHAR_ARRAY_SIZE)
(25,printLine("fgets()
(26,)
(27,result)
(28,atoi(inputBuffer)
(29,unionSecond)
(30,inputBuffer[CHAR_ARRAY_SIZE] = "")
(31,myUnion)
(32,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,data)
(34,printIntLine(result)
(35,myUnion)
(36,RET)
(37,myUnion.unionSecond)
(38,)
(39,stdin)
(40,data = myUnion.unionSecond)
(41,data = 0)
(42,"")
(43,)
(44,result)
(45,data)
(46,)
(47,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^