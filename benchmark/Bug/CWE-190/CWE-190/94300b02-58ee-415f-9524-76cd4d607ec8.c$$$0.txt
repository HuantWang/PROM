-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_11_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,69,70,74,76,80,81,85,87
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
67,68
67,69
78,79
78,80
-----guardedBy-----
38,54
69,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_11_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_11_bad()
CWE190_Integer_Overflow__int_fgets_multiply_11_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(1,13,0)
(2,29,0)
(34,17,0)
(39,20,0)
(42,4,0)
(26,27,0)
(28,12,0)
(22,6,0)
(11,18,0)
(21,39,0)
(36,18,0)
(28,18,0)
(25,38,0)
(33,35,0)
(9,12,0)
(43,15,0)
(18,28,0)
(38,6,0)
(44,29,0)
(38,34,0)
(5,28,0)
(19,35,0)
(44,6,0)
(7,11,0)
(37,44,0)
(29,44,0)
(40,34,0)
(28,34,0)
(31,26,0)
(11,15,0)
(23,6,0)
(18,15,0)
(30,44,0)
(13,12,0)
(12,35,0)
(10,28,0)
(41,44,0)
(24,13,0)
(3,12,0)
(34,38,0)
(8,26,0)
(16,35,0)
(13,34,0)
(6,26,0)
(29,2,1)
(14,39,1)
(30,41,1)
(41,37,1)
(18,28,1)
(22,23,1)
(28,12,1)
(1,14,1)
(7,18,1)
(14,0,1)
(0,12,1)
(34,38,1)
(44,30,1)
(13,12,1)
(5,36,1)
(37,6,1)
(23,0,1)
(29,44,1)
(28,34,1)
(32,13,1)
(21,29,1)
(13,24,1)
(44,6,1)
(11,18,1)
(38,25,1)
(14,34,1)
(3,9,1)
(24,1,1)
(6,22,1)
(40,29,1)
(25,40,1)
(32,11,1)
(11,7,1)
(13,34,1)
(2,44,1)
(39,21,1)
(10,5,1)
(32,14,1)
(38,6,1)
(28,10,1)
(12,3,1)
(36,13,1)
(44,0,2)
(28,34,2)
(18,13,2)
(28,12,2)
(34,38,2)
(24,14,2)
(1,14,2)
(18,28,2)
(13,12,2)
(37,0,2)
(29,0,2)
(38,29,2)
(6,0,2)
(25,29,2)
(21,29,2)
(13,34,2)
(29,44,2)
(38,6,2)
(36,13,2)
(23,0,2)
(10,13,2)
(41,0,2)
(39,29,2)
(5,13,2)
(30,0,2)
(7,13,2)
(40,29,2)
(44,6,2)
(34,29,2)
(22,0,2)
(11,18,2)
(13,14,2)
(28,13,2)
(2,0,2)
(11,13,2)
-----------------------------------
(0,globalReturnsTrue()
(1,data)
(2,NULL)
(3,0)
(4,)
(5,data)
(6,inputBuffer[CHAR_ARRAY_SIZE] = "")
(7,result)
(8,inputBuffer)
(9,data)
(10,2)
(11,printIntLine(result)
(12,data = 0)
(13,data > 0)
(14,globalReturnsTrue()
(15,)
(16,if(globalReturnsTrue()
(17,)
(18,result = data * 2)
(19,if(globalReturnsTrue()
(20,)
(21,"fgets()
(22,"")
(23,inputBuffer)
(24,0)
(25,inputBuffer)
(26,)
(27,)
(28,data * 2)
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,stdin)
(31,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,RET)
(33,data)
(34,data = atoi(inputBuffer)
(35,)
(36,result)
(37,inputBuffer)
(38,atoi(inputBuffer)
(39,printLine("fgets()
(40,data)
(41,CHAR_ARRAY_SIZE)
(42,if(data > 0)
(43,result)
(44,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^