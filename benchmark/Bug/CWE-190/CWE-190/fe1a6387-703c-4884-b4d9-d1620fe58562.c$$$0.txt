-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,41,44,46,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_03_bad()
CWE190_Integer_Overflow__char_rand_preinc_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(4,12,0)
(6,7,0)
(17,18,0)
(24,6,0)
(30,9,0)
(8,7,0)
(9,17,0)
(15,4,0)
(15,17,0)
(22,17,0)
(19,3,0)
(13,15,0)
(2,22,0)
(20,7,0)
(15,6,0)
(3,4,0)
(9,6,0)
(26,5,0)
(23,7,0)
(27,5,0)
(21,3,0)
(25,10,0)
(29,9,0)
(0,10,0)
(3,21,0)
(16,6,0)
(22,9,0)
(14,4,0)
(9,4,0)
(3,19,0)
(4,3,0)
(1,17,0)
(9,29,1)
(22,2,1)
(30,15,1)
(15,6,1)
(26,6,1)
(4,3,1)
(16,24,1)
(3,19,1)
(29,30,1)
(3,21,1)
(10,25,1)
(9,4,1)
(27,26,1)
(5,27,1)
(0,5,1)
(22,9,1)
(13,10,1)
(19,14,1)
(9,6,1)
(28,10,1)
(15,4,1)
(25,0,1)
(28,22,1)
(0,4,1)
(6,16,1)
(2,9,1)
(15,13,1)
(14,5,1)
(14,5,2)
(4,5,2)
(3,5,2)
(29,10,2)
(9,4,2)
(15,6,2)
(15,10,2)
(9,6,2)
(30,10,2)
(2,10,2)
(9,10,2)
(15,4,2)
(22,10,2)
(3,19,2)
(19,5,2)
(4,3,2)
(13,10,2)
(3,21,2)
(22,9,2)
-----------------------------------
(0,5)
(1,result)
(2,result)
(3,(char)
(4,data = (char)
(5,5==5)
(6,data = ' ')
(7,)
(8,if(5==5)
(9,result = data)
(10,5==5)
(11,data = \' \')
(12,)
(13,data)
(14,data)
(15,++data)
(16,' ')
(17,)
(18,)
(19,RAND32()
(20,data)
(21,char)
(22,printHexCharLine(result)
(23,if(5==5)
(24,data)
(25,5)
(26,5)
(27,5)
(28,RET)
(29,data)
(30,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^