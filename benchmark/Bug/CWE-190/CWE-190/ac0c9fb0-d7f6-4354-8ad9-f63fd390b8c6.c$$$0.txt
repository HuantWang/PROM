-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
54,55
55,56
57,58
58,59
58,60
59,60
59,61
60,61
63,64
63,65
64,65
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,43,48,49,52,53,56,61,62,67,69,73,74,78,80
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
39,40
39,41
46,47
46,48
50,51
50,52
59,60
59,61
71,72
71,73
-----guardedBy-----
61,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_17_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(23,12,0)
(37,16,0)
(25,10,0)
(2,23,0)
(36,31,0)
(21,26,0)
(8,26,0)
(18,17,0)
(30,27,0)
(14,21,0)
(20,6,0)
(41,26,0)
(29,8,0)
(38,21,0)
(5,32,0)
(16,32,0)
(35,26,0)
(4,27,0)
(7,32,0)
(12,15,0)
(12,10,0)
(28,12,0)
(23,10,0)
(24,27,0)
(15,32,0)
(40,15,0)
(15,12,0)
(32,13,0)
(6,1,0)
(0,27,0)
(22,27,0)
(19,15,0)
(17,1,0)
(33,17,0)
(39,1,0)
(11,27,0)
(34,16,0)
(3,1,0)
(7,21,1)
(15,32,1)
(14,38,1)
(35,11,1)
(18,33,1)
(38,8,1)
(34,37,1)
(3,39,1)
(6,20,1)
(20,16,1)
(37,17,1)
(5,7,1)
(9,17,1)
(33,1,1)
(17,1,1)
(16,32,1)
(17,18,1)
(41,35,1)
(29,32,1)
(28,16,1)
(20,23,1)
(16,34,1)
(38,26,1)
(40,19,1)
(12,15,1)
(6,1,1)
(33,6,1)
(21,26,1)
(23,12,1)
(2,12,1)
(23,2,1)
(8,26,1)
(39,21,1)
(19,28,1)
(32,5,1)
(1,3,1)
(21,14,1)
(15,40,1)
(8,29,1)
(26,41,1)
(37,17,2)
(34,17,2)
(6,17,2)
(15,16,2)
(15,32,2)
(20,17,2)
(23,12,2)
(16,17,2)
(8,26,2)
(17,17,2)
(7,21,2)
(14,21,2)
(2,16,2)
(17,1,2)
(21,21,2)
(33,17,2)
(5,21,2)
(6,1,2)
(16,32,2)
(18,17,2)
(19,16,2)
(32,21,2)
(29,21,2)
(23,16,2)
(12,16,2)
(40,16,2)
(12,15,2)
(28,16,2)
(8,21,2)
(21,26,2)
(38,21,2)
-----------------------------------
(0,for(i = 0; i < 1; i++)
(1,j = 0)
(2,result)
(3,0)
(4,i)
(5,LLONG_MAX)
(6,j++)
(7,data)
(8,i++)
(9,RET)
(10,)
(11,L)
(12,result = data * 2)
(13,)
(14,1)
(15,data * 2)
(16,data > 0)
(17,j < 1)
(18,1)
(19,data)
(20,j)
(21,i < 1)
(22,data)
(23,printLongLongLine(result)
(24,j)
(25,result)
(26,i = 0)
(27,)
(28,result)
(29,i)
(30,for(j = 0; j < 1; j++)
(31,)
(32,data = LLONG_MAX)
(33,j)
(34,0)
(35,i)
(36,if(data > 0)
(37,data)
(38,i)
(39,j)
(40,2)
(41,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^