-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_preinc_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_preinc_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_preinc_08_bad()
CWE190_Integer_Overflow__short_fscanf_preinc_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,20,0)
(19,20,0)
(9,6,0)
(12,6,0)
(18,24,0)
(10,11,0)
(15,20,0)
(0,6,0)
(17,15,0)
(13,22,0)
(23,4,0)
(0,23,0)
(22,15,0)
(5,23,0)
(14,18,0)
(11,23,0)
(11,15,0)
(6,15,0)
(18,22,0)
(3,15,0)
(6,23,0)
(25,20,0)
(8,18,0)
(16,0,0)
(22,18,0)
(6,9,1)
(2,1,1)
(12,11,1)
(22,15,1)
(17,3,1)
(6,15,1)
(9,12,1)
(1,15,1)
(0,6,1)
(11,10,1)
(0,16,1)
(14,1,1)
(13,8,1)
(10,2,1)
(8,14,1)
(11,15,1)
(18,22,1)
(15,17,1)
(7,2,1)
(2,18,1)
(16,6,1)
(22,13,1)
(7,0,1)
(0,6,2)
(22,15,2)
(8,1,2)
(6,2,2)
(0,2,2)
(12,2,2)
(6,15,2)
(18,22,2)
(9,2,2)
(14,1,2)
(16,2,2)
(11,2,2)
(18,1,2)
(11,15,2)
(13,1,2)
(22,1,2)
(10,2,2)
-----------------------------------
(0,printIntLine(result)
(1,staticReturnsTrue()
(2,staticReturnsTrue()
(3,data)
(4,)
(5,result)
(6,result = data)
(7,RET)
(8,"%hd")
(9,data)
(10,data)
(11,++data)
(12,result)
(13,data)
(14,stdin)
(15,data = 0)
(16,result)
(17,0)
(18,fscanf (stdin, "%hd", &data)
(19,if(staticReturnsTrue()
(20,)
(21,data)
(22,&data)
(23,)
(24,)
(25,if(staticReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^