-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_06_bad()
{
    int64_t data;
    data = 0LL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,33,39,41,45,47,51,53
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
30,31
30,32
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_06_bad(){    int64_t data;    data = 0LL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_06_bad()
CWE190_Integer_Overflow__int64_t_max_square_06_bad
{    int64_t data;    data = 0LL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(11,3,0)
(9,20,0)
(2,25,0)
(11,9,0)
(3,25,0)
(8,11,0)
(24,22,0)
(15,3,0)
(21,7,0)
(13,11,0)
(25,10,0)
(1,22,0)
(5,14,0)
(0,9,0)
(17,15,0)
(3,11,0)
(4,7,0)
(16,22,0)
(6,14,0)
(18,3,0)
(15,25,0)
(23,22,0)
(12,9,0)
(0,12,1)
(15,17,1)
(12,7,1)
(18,14,1)
(11,9,1)
(4,23,1)
(21,4,1)
(5,6,1)
(19,15,1)
(19,14,1)
(17,3,1)
(9,0,1)
(3,11,1)
(15,3,1)
(13,8,1)
(8,18,1)
(14,5,1)
(7,21,1)
(6,9,1)
(6,7,1)
(11,13,1)
(0,7,2)
(17,14,2)
(18,14,2)
(11,9,2)
(8,14,2)
(3,11,2)
(13,14,2)
(3,14,2)
(12,7,2)
(15,14,2)
(11,14,2)
(15,3,2)
(9,7,2)
-----------------------------------
(0,LLONG_MAX)
(1,data)
(2,result)
(3,result = data * data)
(4,STATIC_CONST_FIVE)
(5,5)
(6,STATIC_CONST_FIVE)
(7,STATIC_CONST_FIVE==5)
(8,data)
(9,data = LLONG_MAX)
(10,)
(11,data * data)
(12,data)
(13,data)
(14,STATIC_CONST_FIVE==5)
(15,printLongLongLine(result)
(16,if(STATIC_CONST_FIVE==5)
(17,result)
(18,result)
(19,RET)
(20,)
(21,5)
(22,)
(23,L)
(24,if(STATIC_CONST_FIVE==5)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^