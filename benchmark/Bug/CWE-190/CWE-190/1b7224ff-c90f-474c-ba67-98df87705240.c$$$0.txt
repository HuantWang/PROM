-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,32,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
30,31
30,32
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_14_bad()
CWE190_Integer_Overflow__int_rand_square_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(26,14,0)
(10,16,0)
(27,15,0)
(19,10,0)
(22,14,0)
(8,10,0)
(11,4,0)
(5,25,0)
(8,25,0)
(4,11,0)
(25,12,0)
(18,25,0)
(24,0,0)
(25,8,0)
(9,11,0)
(12,14,0)
(11,7,0)
(2,12,0)
(3,0,0)
(13,12,0)
(6,10,0)
(20,8,0)
(25,11,0)
(19,8,0)
(21,19,0)
(17,15,0)
(1,14,0)
(25,12,1)
(8,25,1)
(19,8,1)
(18,5,1)
(3,24,1)
(17,27,1)
(25,11,1)
(2,13,1)
(0,3,1)
(25,18,1)
(9,0,1)
(19,21,1)
(24,12,1)
(12,2,1)
(23,19,1)
(20,15,1)
(11,4,1)
(5,20,1)
(4,9,1)
(23,15,1)
(21,8,1)
(15,17,1)
(27,0,1)
(27,11,1)
(25,11,2)
(25,15,2)
(20,15,2)
(19,8,2)
(8,25,2)
(8,15,2)
(25,12,2)
(19,15,2)
(18,15,2)
(11,4,2)
(11,0,2)
(4,0,2)
(5,15,2)
(21,15,2)
(9,0,2)
-----------------------------------
(0,globalFive==5)
(1,data)
(2,0)
(3,5)
(4,RAND32()
(5,data)
(6,result)
(7,)
(8,result = data * data)
(9,data)
(10,)
(11,data = RAND32()
(12,data = 0)
(13,data)
(14,)
(15,globalFive==5)
(16,)
(17,5)
(18,data)
(19,printIntLine(result)
(20,result)
(21,result)
(22,if(globalFive==5)
(23,RET)
(24,globalFive)
(25,data * data)
(26,if(globalFive==5)
(27,globalFive)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^