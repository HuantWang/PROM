-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,45,49,51,55,57,58,59,63,64,65
-----computeFrom-----
12,13
12,14
22,23
22,24
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_max_square_15_bad()
CWE190_Integer_Overflow__int_max_square_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(28,17,0)
(20,29,0)
(0,24,0)
(3,17,0)
(13,8,0)
(18,8,0)
(22,18,0)
(24,17,0)
(2,35,0)
(32,0,0)
(10,2,0)
(15,35,0)
(6,12,0)
(5,8,0)
(0,35,0)
(24,0,0)
(29,12,0)
(24,29,0)
(25,24,0)
(17,8,0)
(19,16,0)
(9,24,0)
(4,16,0)
(2,0,0)
(26,8,0)
(23,16,0)
(31,12,0)
(11,29,0)
(35,16,0)
(30,8,0)
(1,16,0)
(21,12,0)
(34,27,0)
(27,16,0)
(7,1,1)
(2,10,1)
(27,34,1)
(5,18,1)
(33,5,1)
(33,26,1)
(17,28,1)
(10,0,1)
(32,33,1)
(20,11,1)
(0,24,1)
(9,32,1)
(22,14,1)
(3,14,1)
(7,23,1)
(14,29,1)
(25,9,1)
(26,17,1)
(28,3,1)
(18,22,1)
(29,20,1)
(34,33,1)
(24,25,1)
(23,27,1)
(24,17,1)
(24,29,1)
(1,2,1)
(2,0,1)
(25,33,2)
(2,0,2)
(34,33,2)
(22,14,2)
(23,33,2)
(2,33,2)
(0,24,2)
(17,14,2)
(5,14,2)
(27,33,2)
(0,33,2)
(28,14,2)
(18,14,2)
(24,17,2)
(9,33,2)
(26,14,2)
(32,33,2)
(1,33,2)
(24,33,2)
(10,33,2)
(3,14,2)
(24,29,2)
-----------------------------------
(0,result = data * data)
(1,break;)
(2,printIntLine(result)
(3,data)
(4,default:)
(5,break;)
(6,data)
(7,RET)
(8,)
(9,data)
(10,result)
(11,data)
(12,)
(13,default:)
(14,6)
(15,result)
(16,)
(17,data = INT_MAX)
(18,printLine("Benign, fixed string")
(19,case 7:)
(20,0)
(21,switch(7)
(22,"Benign, fixed string")
(23,break;)
(24,data * data)
(25,data)
(26,break;)
(27,printLine("Benign, fixed string")
(28,INT_MAX)
(29,data = 0)
(30,case 6:)
(31,switch(6)
(32,result)
(33,7)
(34,"Benign, fixed string")
(35,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^