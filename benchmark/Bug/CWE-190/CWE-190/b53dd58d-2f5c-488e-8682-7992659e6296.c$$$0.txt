-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_07_bad()
CWE190_Integer_Overflow__char_max_multiply_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(23,24,0)
(16,18,0)
(23,1,0)
(17,1,0)
(24,7,0)
(20,19,0)
(10,23,0)
(22,7,0)
(15,19,0)
(3,24,0)
(27,30,0)
(6,1,0)
(9,6,0)
(5,1,0)
(27,18,0)
(12,7,0)
(26,24,0)
(18,23,0)
(14,4,0)
(0,6,0)
(13,7,0)
(2,4,0)
(6,24,0)
(31,27,0)
(23,18,0)
(8,23,0)
(1,11,0)
(25,30,0)
(18,30,0)
(21,29,0)
(24,3,1)
(9,0,1)
(23,8,1)
(3,26,1)
(17,5,1)
(6,1,1)
(2,14,1)
(1,17,1)
(6,9,1)
(27,31,1)
(10,16,1)
(32,6,1)
(5,19,1)
(0,4,1)
(4,2,1)
(14,19,1)
(32,4,1)
(19,15,1)
(31,18,1)
(16,6,1)
(14,1,1)
(32,27,1)
(6,24,1)
(23,24,1)
(23,1,1)
(8,10,1)
(18,23,1)
(15,20,1)
(27,18,1)
(20,24,1)
(1,19,2)
(9,4,2)
(27,6,2)
(5,19,2)
(18,6,2)
(16,6,2)
(10,6,2)
(8,6,2)
(0,4,2)
(6,1,2)
(6,4,2)
(23,24,2)
(23,6,2)
(27,18,2)
(23,1,2)
(17,19,2)
(31,6,2)
(6,24,2)
(18,23,2)
-----------------------------------
(0,data)
(1,data = CHAR_MAX)
(2,5)
(3,' ')
(4,staticFive==5)
(5,data)
(6,data > 0)
(7,)
(8,2)
(9,0)
(10,data)
(11,)
(12,if(staticFive==5)
(13,data)
(14,staticFive)
(15,5)
(16,result)
(17,CHAR_MAX)
(18,result = data * 2)
(19,staticFive==5)
(20,staticFive)
(21,if(data > 0)
(22,if(staticFive==5)
(23,data * 2)
(24,data = \' \')
(25,result)
(26,data)
(27,printHexCharLine(result)
(28,data = ' ')
(29,)
(30,)
(31,result)
(32,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^