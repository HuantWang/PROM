-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_02_bad()
{
    unsigned int data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
20,21
20,22
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_02_bad(){    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_02_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_02_bad
{    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(7,15,0)
(5,22,0)
(18,17,0)
(7,20,0)
(19,20,0)
(16,15,0)
(13,17,0)
(3,7,0)
(21,15,0)
(1,25,0)
(2,20,0)
(17,25,0)
(10,25,0)
(9,23,0)
(22,5,0)
(15,7,0)
(12,5,0)
(20,24,0)
(8,19,0)
(23,0,0)
(23,5,0)
(15,23,0)
(15,17,0)
(5,12,0)
(5,23,0)
(19,7,0)
(4,25,0)
(15,17,1)
(23,5,1)
(17,13,1)
(16,3,1)
(15,23,1)
(19,8,1)
(15,21,1)
(11,23,1)
(19,7,1)
(8,7,1)
(21,16,1)
(5,12,1)
(7,15,1)
(11,6,1)
(14,11,1)
(13,18,1)
(12,9,1)
(5,22,1)
(14,19,1)
(3,11,1)
(9,6,1)
(6,17,1)
(15,11,2)
(12,6,2)
(3,11,2)
(19,7,2)
(23,6,2)
(5,22,2)
(7,15,2)
(23,5,2)
(9,6,2)
(15,23,2)
(21,11,2)
(16,11,2)
(8,11,2)
(5,6,2)
(5,12,2)
(15,17,2)
(19,11,2)
(7,11,2)
-----------------------------------
(0,)
(1,if(1)
(2,result)
(3,result)
(4,if(1)
(5,(unsigned int)
(6,1)
(7,result = data * data)
(8,result)
(9,data)
(10,data)
(11,1)
(12,RAND32()
(13,0)
(14,RET)
(15,data * data)
(16,data)
(17,data = 0)
(18,data)
(19,printUnsignedLine(result)
(20,)
(21,data)
(22,unsigned int)
(23,data = (unsigned int)
(24,)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^