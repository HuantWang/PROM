-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    char * dataPtr = (char *)dataVoidPtr;
    /* dereference dataPtr into data */
    char data = (*dataPtr);
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        char result = data + 1;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,40,44,45,49,51
-----computeFrom-----
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    char * dataPtr = (char *)dataVoidPtr;    /* dereference dataPtr into data */    char data = (*dataPtr);    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_add_64b_badSink(void * dataVoidPtr)
CWE190_Integer_Overflow__char_rand_add_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    char * dataPtr = (char *)dataVoidPtr;    /* dereference dataPtr into data */    char data = (*dataPtr);    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }}
char * dataPtr = (char *)dataVoidPtr;
char * dataPtr = (char *)dataVoidPtr;
char
* dataPtr = (char *)dataVoidPtr
*
dataPtr
= (char *)dataVoidPtr
(char *)dataVoidPtr
char *
char
*
*
dataVoidPtr
dataVoidPtr
char data = (*dataPtr);
char data = (*dataPtr);
char
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        char result = data + 1;        printHexCharLine(result);    }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(14,15,0)
(22,0,0)
(17,0,0)
(21,20,0)
(10,1,0)
(0,15,0)
(5,4,0)
(4,19,0)
(1,4,0)
(15,0,0)
(8,22,0)
(9,15,0)
(1,11,0)
(19,22,0)
(12,1,0)
(0,20,0)
(19,20,0)
(6,20,0)
(4,1,0)
(11,20,0)
(22,19,0)
(3,4,0)
(18,10,0)
(15,9,0)
(15,13,0)
(2,19,0)
(10,11,0)
(16,11,0)
(1,4,1)
(10,1,1)
(5,3,1)
(2,0,1)
(14,17,1)
(18,1,1)
(10,18,1)
(4,5,1)
(15,13,1)
(8,2,1)
(15,14,1)
(22,0,1)
(7,10,1)
(12,19,1)
(3,12,1)
(19,22,1)
(15,9,1)
(4,19,1)
(0,15,1)
(22,8,1)
(15,13,2)
(1,4,2)
(10,1,2)
(15,9,2)
(22,0,2)
(0,15,2)
(19,22,2)
(4,19,2)
-----------------------------------
(0,* dataPtr = (char *)
(1,result = data + 1)
(2,data)
(3,data)
(4,data + 1)
(5,1)
(6,data)
(7,RET)
(8,dataPtr)
(9,char *)
(10,printHexCharLine(result)
(11,)
(12,result)
(13,void * dataVoidPtr)
(14,dataVoidPtr)
(15,(char *)
(16,result)
(17,dataPtr)
(18,result)
(19,data = (*dataPtr)
(20,)
(21,dataPtr)
(22,*dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^