-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
29,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,30,31,36,37,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
29,30
29,31
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_03_bad()
CWE190_Integer_Overflow__int_rand_multiply_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(11,23,0)
(3,24,0)
(1,24,0)
(21,7,0)
(14,30,0)
(28,7,0)
(25,15,0)
(2,11,0)
(22,2,0)
(8,9,0)
(7,20,0)
(21,14,0)
(6,11,0)
(12,31,0)
(15,30,0)
(14,21,0)
(15,14,0)
(11,26,0)
(27,21,0)
(19,21,0)
(10,7,0)
(2,7,0)
(5,20,0)
(0,30,0)
(16,20,0)
(18,20,0)
(17,31,0)
(4,14,0)
(29,2,0)
(26,11,0)
(21,11,0)
(13,24,1)
(12,17,1)
(3,1,1)
(25,14,1)
(19,27,1)
(22,24,1)
(21,19,1)
(15,25,1)
(27,4,1)
(2,7,1)
(14,21,1)
(17,7,1)
(1,31,1)
(11,26,1)
(7,28,1)
(2,11,1)
(4,2,1)
(2,29,1)
(21,11,1)
(28,10,1)
(26,6,1)
(13,2,1)
(29,22,1)
(21,7,1)
(6,31,1)
(13,15,1)
(24,3,1)
(15,14,1)
(31,12,1)
(1,11,1)
(6,31,2)
(22,24,2)
(21,7,2)
(11,31,2)
(2,11,2)
(27,2,2)
(11,26,2)
(19,2,2)
(14,21,2)
(29,24,2)
(14,2,2)
(2,7,2)
(2,24,2)
(26,31,2)
(4,2,2)
(15,14,2)
(25,2,2)
(21,2,2)
(15,2,2)
(21,11,2)
-----------------------------------
(0,result)
(1,5)
(2,data > 0)
(3,5)
(4,result)
(5,data)
(6,data)
(7,data = 0)
(8,if(data > 0)
(9,)
(10,data)
(11,data = RAND32()
(12,5)
(13,RET)
(14,result = data * 2)
(15,printIntLine(result)
(16,if(5==5)
(17,5)
(18,if(5==5)
(19,2)
(20,)
(21,data * 2)
(22,data)
(23,)
(24,5==5)
(25,result)
(26,RAND32()
(27,data)
(28,0)
(29,0)
(30,)
(31,5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^