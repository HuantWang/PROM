-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_fscanf_multiply_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
52,54
53,54
56,57
56,58
57,58
58,59
58,60
60,61
60,62
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,55,59,61,65,66,70,72
-----computeFrom-----
18,19
18,20
33,34
33,35
52,53
52,54
63,64
63,65
-----guardedBy-----
54,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_34_bad(){    char data;    CWE190_Integer_Overflow__char_fscanf_multiply_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_34_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_34_bad
{    char data;    CWE190_Integer_Overflow__char_fscanf_multiply_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__char_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__char_fscanf_multiply_34_unionType
CWE190_Integer_Overflow__char_fscanf_multiply_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(27,7,0)
(3,20,0)
(2,36,0)
(36,32,0)
(16,4,0)
(35,11,0)
(11,35,0)
(21,9,0)
(14,5,0)
(22,23,0)
(23,32,0)
(33,32,0)
(23,36,0)
(9,1,0)
(26,1,0)
(8,11,0)
(10,36,0)
(5,11,0)
(17,26,0)
(9,28,0)
(25,20,0)
(13,4,0)
(10,20,0)
(4,32,0)
(24,1,0)
(7,23,0)
(26,11,0)
(0,26,0)
(18,5,0)
(20,10,0)
(19,7,0)
(20,32,0)
(15,10,0)
(31,32,0)
(29,35,0)
(34,35,0)
(12,28,0)
(11,4,0)
(1,28,0)
(1,26,0)
(6,36,0)
(5,11,1)
(14,18,1)
(26,11,1)
(25,3,1)
(26,17,1)
(0,24,1)
(36,2,1)
(3,36,1)
(9,1,1)
(22,7,1)
(24,5,1)
(10,15,1)
(35,34,1)
(20,10,1)
(30,5,1)
(9,21,1)
(1,26,1)
(8,23,1)
(19,20,1)
(2,6,1)
(5,14,1)
(23,22,1)
(7,27,1)
(11,35,1)
(23,36,1)
(18,11,1)
(27,19,1)
(34,29,1)
(30,9,1)
(29,8,1)
(21,1,1)
(17,0,1)
(10,36,1)
(15,25,1)
(17,5,2)
(0,5,2)
(21,5,2)
(9,1,2)
(11,35,2)
(1,5,2)
(10,36,2)
(26,11,2)
(24,5,2)
(26,5,2)
(5,11,2)
(23,36,2)
(20,10,2)
(9,5,2)
(1,26,2)
-----------------------------------
(0,data)
(1,result = data * 2)
(2,\\\' \\\')
(3,stdin)
(4,)
(5,data > 0)
(6,data)
(7,myUnion.unionFirst)
(8,data)
(9,printHexCharLine(result)
(10,&data)
(11,data = myUnion.unionSecond)
(12,result)
(13,if(data > 0)
(14,0)
(15,data)
(16,data)
(17,2)
(18,data)
(19,myUnion)
(20,fscanf (stdin, "%c", &data)
(21,result)
(22,data)
(23,myUnion.unionFirst = data)
(24,result)
(25,"%c")
(26,data * 2)
(27,unionFirst)
(28,)
(29,myUnion)
(30,RET)
(31,myUnion)
(32,)
(33,data)
(34,unionSecond)
(35,myUnion.unionSecond)
(36,data = \\\' \\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^