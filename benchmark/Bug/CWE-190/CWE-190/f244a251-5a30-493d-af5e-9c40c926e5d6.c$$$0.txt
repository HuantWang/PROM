-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_18_bad()
{
    char data;
    data = ' ';
    goto source;
source:
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
32,33
32,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,31,33,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_18_bad(){    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_18_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_18_bad
{    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
goto source;
source
source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);
source
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,9,0)
(23,15,0)
(1,6,0)
(2,11,0)
(22,7,0)
(27,26,0)
(24,7,0)
(13,8,0)
(25,9,0)
(8,7,0)
(19,13,0)
(0,11,0)
(13,6,0)
(21,26,0)
(12,15,0)
(11,15,0)
(4,11,0)
(18,15,0)
(5,8,0)
(17,15,0)
(2,26,0)
(14,2,0)
(7,8,0)
(3,15,0)
(9,11,0)
(26,2,0)
(26,15,0)
(8,6,0)
(7,11,0)
(16,15,0)
(27,17,1)
(24,5,1)
(13,19,1)
(10,13,1)
(11,4,1)
(20,3,1)
(26,2,1)
(13,8,1)
(5,9,1)
(25,20,1)
(9,25,1)
(17,11,1)
(19,8,1)
(22,24,1)
(7,22,1)
(3,26,1)
(2,11,1)
(2,14,1)
(10,9,1)
(4,0,1)
(14,21,1)
(8,7,1)
(9,11,1)
(21,27,1)
(7,11,1)
(13,8,2)
(8,9,2)
(8,7,2)
(22,9,2)
(13,9,2)
(7,11,2)
(26,2,2)
(7,9,2)
(2,11,2)
(24,9,2)
(5,9,2)
(9,11,2)
(19,9,2)
-----------------------------------
(0,data)
(1,result)
(2,&data)
(3,goto sink;)
(4,\\\' \\\')
(5,result)
(6,)
(7,data * 2)
(8,result = data * 2)
(9,data > 0)
(10,RET)
(11,data = \\\' \\\')
(12,sink:)
(13,printHexCharLine(result)
(14,data)
(15,)
(16,data)
(17,goto source;)
(18,if(data > 0)
(19,result)
(20,data)
(21,"%c")
(22,2)
(23,source:)
(24,data)
(25,0)
(26,fscanf (stdin, "%c", &data)
(27,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^