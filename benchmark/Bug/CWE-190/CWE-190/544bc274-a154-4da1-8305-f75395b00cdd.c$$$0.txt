-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_16_bad()
{
    int64_t data;
    data = 0LL;
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
26,27
29,30
30,31
33,34
33,35
35,36
35,37
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,9,11,15,16,18,23,27,28,31,32,34,40,42,46,48,52,54,55
-----computeFrom-----
13,14
13,15
21,22
21,23
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_16_bad(){    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_16_bad()
CWE190_Integer_Overflow__int64_t_rand_square_16_bad
{    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
-----joern-----
(18,12,0)
(4,7,0)
(22,18,0)
(19,22,0)
(19,4,0)
(3,11,0)
(11,2,0)
(10,16,0)
(9,18,0)
(0,16,0)
(24,9,0)
(25,16,0)
(1,18,0)
(17,22,0)
(20,19,0)
(21,12,0)
(22,19,0)
(8,16,0)
(6,4,0)
(11,4,0)
(4,11,0)
(13,19,0)
(23,7,0)
(11,3,0)
(9,22,0)
(2,11,0)
(6,5,1)
(9,24,1)
(20,13,1)
(17,15,1)
(5,10,1)
(24,22,1)
(15,23,1)
(11,2,1)
(21,9,1)
(14,15,1)
(19,4,1)
(13,17,1)
(11,3,1)
(4,11,1)
(19,20,1)
(14,21,1)
(23,4,1)
(15,5,1)
(2,6,1)
(9,22,1)
(22,19,1)
(21,15,2)
(24,15,2)
(20,15,2)
(19,15,2)
(11,2,2)
(11,5,2)
(22,15,2)
(13,15,2)
(11,3,2)
(23,5,2)
(22,19,2)
(6,5,2)
(2,5,2)
(4,5,2)
(4,11,2)
(9,22,2)
(19,4,2)
(17,15,2)
(9,15,2)
-----------------------------------
(0,while(1)
(1,result)
(2,RAND64()
(3,int64_t)
(4,data = (int64_t)
(5,1)
(6,data)
(7,)
(8,data)
(9,printLongLongLine(result)
(10,L)
(11,(int64_t)
(12,)
(13,data)
(14,RET)
(15,1)
(16,)
(17,result)
(18,)
(19,data * data)
(20,data)
(21,break;)
(22,result = data * data)
(23,break;)
(24,result)
(25,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^