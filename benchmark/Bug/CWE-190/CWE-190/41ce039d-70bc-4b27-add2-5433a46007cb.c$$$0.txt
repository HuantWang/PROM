-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,43,46,48,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_13_bad()
CWE190_Integer_Overflow__char_rand_postinc_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(27,2,0)
(17,16,0)
(22,9,0)
(5,27,0)
(18,8,0)
(30,27,0)
(19,5,0)
(4,12,0)
(23,16,0)
(5,2,0)
(17,12,0)
(13,26,0)
(21,17,0)
(22,16,0)
(29,12,0)
(3,8,0)
(17,2,0)
(16,28,0)
(6,8,0)
(0,26,0)
(16,22,0)
(7,2,0)
(14,27,0)
(12,8,0)
(22,15,0)
(20,25,0)
(27,16,0)
(15,22,0)
(27,12,0)
(9,22,0)
(10,25,0)
(2,1,0)
(11,25,1)
(26,13,1)
(11,5,1)
(9,23,1)
(12,29,1)
(20,16,1)
(10,20,1)
(27,16,1)
(17,16,1)
(22,9,1)
(0,12,1)
(20,26,1)
(21,25,1)
(22,15,1)
(27,12,1)
(5,19,1)
(17,21,1)
(14,30,1)
(5,27,1)
(27,14,1)
(19,27,1)
(30,17,1)
(25,10,1)
(16,22,1)
(13,0,1)
(29,4,1)
(17,12,1)
(23,26,1)
(27,12,2)
(5,25,2)
(16,26,2)
(16,22,2)
(22,9,2)
(19,25,2)
(17,25,2)
(27,16,2)
(5,27,2)
(27,25,2)
(9,26,2)
(22,26,2)
(14,25,2)
(21,25,2)
(23,26,2)
(17,16,2)
(17,12,2)
(22,15,2)
(30,25,2)
-----------------------------------
(0,GLOBAL_CONST_FIVE)
(1,)
(2,)
(3,if(GLOBAL_CONST_FIVE==5)
(4,data)
(5,printHexCharLine(result)
(6,if(GLOBAL_CONST_FIVE==5)
(7,result)
(8,)
(9,RAND32()
(10,5)
(11,RET)
(12,data = \' \')
(13,5)
(14,data)
(15,char)
(16,data = (char)
(17,data++)
(18,data)
(19,result)
(20,GLOBAL_CONST_FIVE)
(21,data)
(22,(char)
(23,data)
(24,data = ' ')
(25,GLOBAL_CONST_FIVE==5)
(26,GLOBAL_CONST_FIVE==5)
(27,result = data)
(28,)
(29,' ')
(30,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^