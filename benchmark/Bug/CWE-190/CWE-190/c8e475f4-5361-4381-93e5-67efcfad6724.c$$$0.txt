-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_04_bad()
CWE190_Integer_Overflow__char_rand_add_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(4,2,0)
(5,12,0)
(25,15,0)
(7,2,0)
(21,22,0)
(10,2,0)
(6,15,0)
(14,22,0)
(2,12,0)
(22,11,0)
(1,15,0)
(26,7,0)
(8,20,0)
(23,20,0)
(17,8,0)
(12,15,0)
(2,7,0)
(2,20,0)
(8,17,0)
(19,14,0)
(7,22,0)
(20,8,0)
(13,12,0)
(3,8,0)
(20,24,0)
(8,3,0)
(14,7,0)
(10,26,1)
(26,9,1)
(0,12,1)
(3,23,1)
(8,17,1)
(23,0,1)
(18,14,1)
(14,7,1)
(9,20,1)
(5,13,1)
(20,8,1)
(2,20,1)
(2,12,1)
(12,5,1)
(18,9,1)
(9,0,1)
(2,4,1)
(7,2,1)
(19,7,1)
(14,19,1)
(8,3,1)
(4,10,1)
(4,9,2)
(2,20,2)
(14,7,2)
(20,0,2)
(2,9,2)
(10,9,2)
(8,0,2)
(3,0,2)
(19,9,2)
(8,3,2)
(23,0,2)
(7,2,2)
(7,9,2)
(8,17,2)
(20,8,2)
(2,12,2)
(14,9,2)
(26,9,2)
-----------------------------------
(0,STATIC_CONST_TRUE)
(1,if(STATIC_CONST_TRUE)
(2,data + 1)
(3,RAND32()
(4,1)
(5,' ')
(6,data)
(7,result = data + 1)
(8,(char)
(9,STATIC_CONST_TRUE)
(10,data)
(11,)
(12,data = \' \')
(13,data)
(14,printHexCharLine(result)
(15,)
(16,data = ' ')
(17,char)
(18,RET)
(19,result)
(20,data = (char)
(21,result)
(22,)
(23,data)
(24,)
(25,if(STATIC_CONST_TRUE)
(26,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^