-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_14_bad()
CWE190_Integer_Overflow__char_rand_add_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,0,0)
(26,3,0)
(17,2,0)
(27,25,0)
(17,13,0)
(0,20,0)
(9,20,0)
(12,5,0)
(4,28,0)
(23,0,0)
(20,13,0)
(20,5,0)
(23,27,0)
(1,27,0)
(6,23,0)
(30,17,0)
(11,3,0)
(7,22,0)
(2,17,0)
(13,17,0)
(18,22,0)
(17,30,0)
(19,28,0)
(13,14,0)
(10,0,0)
(5,22,0)
(16,22,0)
(21,5,0)
(24,13,0)
(15,20,0)
(0,27,0)
(26,13,1)
(19,4,1)
(10,3,1)
(28,19,1)
(12,21,1)
(6,0,1)
(9,15,1)
(23,6,1)
(24,28,1)
(30,24,1)
(23,0,1)
(13,17,1)
(0,20,1)
(5,12,1)
(26,28,1)
(17,30,1)
(11,26,1)
(29,23,1)
(3,11,1)
(20,9,1)
(29,3,1)
(20,5,1)
(20,13,1)
(4,5,1)
(15,10,1)
(17,2,1)
(17,30,2)
(20,13,2)
(23,3,2)
(13,17,2)
(24,28,2)
(6,3,2)
(30,28,2)
(13,28,2)
(0,3,2)
(10,3,2)
(17,2,2)
(23,0,2)
(9,3,2)
(17,28,2)
(0,20,2)
(15,3,2)
(20,3,2)
(20,5,2)
-----------------------------------
(0,result = data + 1)
(1,result)
(2,char)
(3,globalFive==5)
(4,globalFive)
(5,data = ' ')
(6,result)
(7,data)
(8,data = \' \')
(9,1)
(10,result)
(11,5)
(12,' ')
(13,data = (char)
(14,)
(15,data)
(16,if(globalFive==5)
(17,(char)
(18,if(globalFive==5)
(19,5)
(20,data + 1)
(21,data)
(22,)
(23,printHexCharLine(result)
(24,data)
(25,)
(26,globalFive)
(27,)
(28,globalFive==5)
(29,RET)
(30,RAND32()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^