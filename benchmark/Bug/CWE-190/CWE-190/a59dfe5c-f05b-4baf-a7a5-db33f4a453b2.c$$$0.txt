-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_18_bad()
{
    short data;
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
32,33
32,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,26,29,31,33,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_18_bad(){    short data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_18_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_18_bad
{    short data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);
source
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,14,0)
(9,14,0)
(18,14,0)
(1,9,0)
(4,8,0)
(8,12,0)
(22,8,0)
(5,16,0)
(3,12,0)
(19,16,0)
(27,18,0)
(7,12,0)
(14,12,0)
(2,9,0)
(17,14,0)
(0,8,0)
(23,19,0)
(19,9,0)
(9,19,0)
(13,12,0)
(20,12,0)
(5,19,0)
(6,18,0)
(21,5,0)
(25,12,0)
(24,12,0)
(10,14,0)
(26,16,0)
(8,4,0)
(15,4,0)
(18,6,1)
(24,14,1)
(14,17,1)
(22,0,1)
(4,14,1)
(8,4,1)
(0,24,1)
(27,3,1)
(17,10,1)
(18,14,1)
(1,2,1)
(5,19,1)
(5,21,1)
(11,5,1)
(19,9,1)
(3,8,1)
(9,1,1)
(9,14,1)
(2,23,1)
(6,27,1)
(23,18,1)
(4,15,1)
(15,22,1)
(11,18,1)
(21,19,1)
(1,18,2)
(18,14,2)
(9,18,2)
(5,18,2)
(23,18,2)
(2,18,2)
(21,18,2)
(19,9,2)
(5,19,2)
(9,14,2)
(8,4,2)
(4,14,2)
(19,18,2)
-----------------------------------
(0,stdin)
(1,2)
(2,data)
(3,goto sink;)
(4,&data)
(5,printIntLine(result)
(6,0)
(7,sink:)
(8,fscanf (stdin, "%hd", &data)
(9,data * 2)
(10,data)
(11,RET)
(12,)
(13,data)
(14,data = 0)
(15,data)
(16,)
(17,0)
(18,data > 0)
(19,result = data * 2)
(20,source:)
(21,result)
(22,"%hd")
(23,result)
(24,goto source;)
(25,if(data > 0)
(26,result)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^