-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_add_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        int64_t result = data + 1;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
25,26
26,27
26,28
27,28
31,32
31,33
33,34
33,35
33,36
33,37
33,38
33,39
34,35
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
56,57
57,58
57,59
58,59
-----nextToken-----
2,4,9,11,15,16,18,21,23,24,28,29,30,32,35,40,42,46,47,51,53,54,55,59,60,61
-----computeFrom-----
13,14
13,15
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ProblemStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_add_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_add_15_bad()
CWE190_Integer_Overflow__int64_t_fscanf_add_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%" SCNd64, &data);
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int64_t result = data + 1;        printLongLongLine(result);    }
int64_t result = data + 1;
int64_t result = data + 1;
int64_t
int64_t
result = data + 1
result
= data + 1
data + 1
data
data
1
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(26,30,0)
(8,11,0)
(13,4,0)
(23,11,0)
(6,4,0)
(23,9,0)
(5,9,0)
(27,4,0)
(24,14,0)
(9,22,0)
(12,14,0)
(29,30,0)
(10,23,0)
(21,14,0)
(2,6,0)
(0,12,0)
(7,4,0)
(22,9,0)
(25,30,0)
(15,4,0)
(11,4,0)
(9,11,0)
(17,22,0)
(16,14,0)
(3,30,0)
(18,14,0)
(20,22,0)
(0,19,1)
(17,20,1)
(23,10,1)
(22,17,1)
(16,19,1)
(24,12,1)
(10,9,1)
(20,5,1)
(23,9,1)
(28,7,1)
(5,1,1)
(6,2,1)
(12,0,1)
(7,23,1)
(9,22,1)
(19,3,1)
(1,16,1)
(2,1,1)
(13,6,1)
(1,24,1)
(28,13,1)
(22,1,2)
(2,1,2)
(13,1,2)
(9,1,2)
(6,1,2)
(9,22,2)
(24,19,2)
(10,1,2)
(5,1,2)
(16,19,2)
(12,19,2)
(23,9,2)
(23,1,2)
(7,1,2)
(20,1,2)
(17,1,2)
(0,19,2)
-----------------------------------
(0,"Benign, fixed string")
(1,7)
(2,"Benign, fixed string")
(3,L)
(4,)
(5,result)
(6,printLine("Benign, fixed string")
(7,break;)
(8,result)
(9,result = data + 1)
(10,result)
(11,)
(12,printLine("Benign, fixed string")
(13,break;)
(14,)
(15,case 7:)
(16,break;)
(17,1)
(18,case 6:)
(19,6)
(20,data)
(21,default:)
(22,data + 1)
(23,printLongLongLine(result)
(24,break;)
(25,switch(6)
(26,switch(7)
(27,default:)
(28,RET)
(29,data)
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^