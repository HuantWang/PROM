-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_07_bad()
CWE190_Integer_Overflow__char_max_square_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(12,20,0)
(27,17,0)
(19,13,0)
(22,16,0)
(13,24,0)
(26,0,0)
(4,20,0)
(9,17,0)
(2,16,0)
(9,27,0)
(13,27,0)
(7,20,0)
(13,12,0)
(27,13,0)
(21,13,0)
(17,3,0)
(24,23,0)
(8,24,0)
(28,17,0)
(15,12,0)
(5,0,0)
(10,9,0)
(6,24,0)
(25,20,0)
(14,12,0)
(11,27,0)
(21,11,1)
(26,5,1)
(6,0,1)
(1,9,1)
(13,24,1)
(11,16,1)
(13,19,1)
(9,27,1)
(27,13,1)
(16,22,1)
(22,2,1)
(5,12,1)
(0,26,1)
(2,0,1)
(10,27,1)
(9,10,1)
(12,15,1)
(8,6,1)
(24,8,1)
(19,21,1)
(13,12,1)
(15,14,1)
(1,16,1)
(2,24,1)
(13,24,2)
(19,16,2)
(27,16,2)
(21,16,2)
(13,16,2)
(11,16,2)
(6,0,2)
(9,27,2)
(27,13,2)
(24,0,2)
(10,16,2)
(8,0,2)
(13,12,2)
(9,16,2)
-----------------------------------
(0,staticFive==5)
(1,RET)
(2,staticFive)
(3,)
(4,if(staticFive==5)
(5,staticFive)
(6,data)
(7,if(staticFive==5)
(8,CHAR_MAX)
(9,printHexCharLine(result)
(10,result)
(11,result)
(12,data = ' ')
(13,data * data)
(14,data)
(15,' ')
(16,staticFive==5)
(17,)
(18,data = \' \')
(19,data)
(20,)
(21,data)
(22,5)
(23,)
(24,data = CHAR_MAX)
(25,data)
(26,5)
(27,result = data * data)
(28,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^