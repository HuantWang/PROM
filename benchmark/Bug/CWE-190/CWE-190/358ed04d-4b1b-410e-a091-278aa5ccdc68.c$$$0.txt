-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_08_bad()
{
    short data;
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_08_bad(){    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_08_bad()
CWE190_Integer_Overflow__short_fscanf_square_08_bad
{    short data;    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,1,0)
(11,3,0)
(21,25,0)
(19,24,0)
(25,2,0)
(25,3,0)
(19,3,0)
(13,25,0)
(7,1,0)
(24,19,0)
(4,24,0)
(24,14,0)
(3,1,0)
(16,24,0)
(15,5,0)
(22,2,0)
(17,15,0)
(20,22,0)
(2,25,0)
(22,15,0)
(0,19,0)
(2,15,0)
(9,2,0)
(12,3,0)
(6,1,0)
(9,8,1)
(25,3,1)
(4,16,1)
(16,10,1)
(8,24,1)
(25,21,1)
(3,11,1)
(19,3,1)
(19,0,1)
(21,13,1)
(13,9,1)
(18,8,1)
(22,20,1)
(24,19,1)
(11,12,1)
(18,22,1)
(0,4,1)
(10,3,1)
(22,2,1)
(20,2,1)
(8,10,1)
(2,25,1)
(25,8,2)
(20,8,2)
(13,8,2)
(2,8,2)
(9,8,2)
(0,10,2)
(4,10,2)
(2,25,2)
(16,10,2)
(24,19,2)
(19,10,2)
(25,3,2)
(19,3,2)
(24,10,2)
(22,2,2)
(22,8,2)
(21,8,2)
-----------------------------------
(0,data)
(1,)
(2,result = data * data)
(3,data = 0)
(4,"%hd")
(5,)
(6,if(staticReturnsTrue()
(7,data)
(8,staticReturnsTrue()
(9,result)
(10,staticReturnsTrue()
(11,0)
(12,data)
(13,data)
(14,)
(15,)
(16,stdin)
(17,result)
(18,RET)
(19,&data)
(20,result)
(21,data)
(22,printIntLine(result)
(23,if(staticReturnsTrue()
(24,fscanf (stdin, "%hd", &data)
(25,data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^