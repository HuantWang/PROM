-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,41,45,47,51,52,56,58
-----computeFrom-----
12,13
12,14
22,23
22,24
38,39
38,40
49,50
49,51
-----guardedBy-----
40,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_08_bad()
CWE190_Integer_Overflow__char_rand_multiply_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,13,0)
(12,15,0)
(15,9,0)
(22,5,0)
(23,0,0)
(13,10,0)
(23,9,0)
(19,1,0)
(25,9,0)
(15,13,0)
(28,21,0)
(20,13,0)
(0,23,0)
(2,10,0)
(3,15,0)
(4,10,0)
(1,21,0)
(17,21,0)
(14,10,0)
(1,24,0)
(7,13,0)
(30,28,0)
(24,9,0)
(18,24,0)
(23,8,0)
(28,1,0)
(24,1,0)
(11,24,0)
(9,23,0)
(9,26,0)
(8,23,0)
(29,13,1)
(15,13,1)
(11,18,1)
(9,23,1)
(23,0,1)
(12,6,1)
(23,8,1)
(0,25,1)
(6,9,1)
(15,3,1)
(27,6,1)
(1,24,1)
(3,12,1)
(24,13,1)
(27,28,1)
(7,20,1)
(18,19,1)
(28,30,1)
(19,15,1)
(15,9,1)
(30,1,1)
(24,11,1)
(24,9,1)
(28,1,1)
(6,29,1)
(27,15,1)
(25,29,1)
(13,7,1)
(28,1,2)
(15,9,2)
(9,29,2)
(24,15,2)
(30,15,2)
(23,8,2)
(11,15,2)
(3,6,2)
(0,29,2)
(24,13,2)
(15,6,2)
(28,15,2)
(19,15,2)
(25,29,2)
(9,23,2)
(23,0,2)
(18,15,2)
(24,9,2)
(1,24,2)
(15,13,2)
(23,29,2)
(12,6,2)
(1,15,2)
-----------------------------------
(0,RAND32()
(1,result = data * 2)
(2,if(staticReturnsTrue()
(3,0)
(4,data)
(5,)
(6,staticReturnsTrue()
(7,' ')
(8,char)
(9,data = (char)
(10,)
(11,2)
(12,data)
(13,data = ' ')
(14,if(staticReturnsTrue()
(15,data > 0)
(16,data = \' \')
(17,result)
(18,data)
(19,result)
(20,data)
(21,)
(22,if(data > 0)
(23,(char)
(24,data * 2)
(25,data)
(26,)
(27,RET)
(28,printHexCharLine(result)
(29,staticReturnsTrue()
(30,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^