-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_add_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,41,45,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_add_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_add_03_bad()
CWE190_Integer_Overflow__char_fscanf_add_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(27,1,0)
(28,5,0)
(25,2,0)
(1,2,0)
(7,29,0)
(19,12,0)
(24,5,0)
(6,29,0)
(23,5,0)
(21,2,0)
(11,12,0)
(5,28,0)
(15,28,0)
(0,1,0)
(28,18,0)
(10,22,0)
(3,7,0)
(4,17,0)
(18,16,0)
(13,17,0)
(8,2,0)
(29,14,0)
(20,18,0)
(22,18,0)
(22,28,0)
(5,1,0)
(7,1,0)
(26,29,0)
(29,7,0)
(7,1,1)
(7,3,1)
(10,28,1)
(24,23,1)
(17,4,1)
(15,12,1)
(5,1,1)
(4,13,1)
(3,26,1)
(28,5,1)
(19,11,1)
(23,15,1)
(26,6,1)
(5,24,1)
(22,28,1)
(29,7,1)
(13,1,1)
(12,19,1)
(11,29,1)
(6,17,1)
(11,17,1)
(1,27,1)
(9,12,1)
(22,10,1)
(9,22,1)
(27,0,1)
(6,17,2)
(22,28,2)
(29,7,2)
(24,12,2)
(29,17,2)
(5,1,2)
(7,17,2)
(5,12,2)
(22,12,2)
(23,12,2)
(28,5,2)
(7,1,2)
(10,12,2)
(15,12,2)
(26,17,2)
(3,17,2)
(28,12,2)
-----------------------------------
(0,data)
(1,data = \\\' \\\')
(2,)
(3,data)
(4,5)
(5,data + 1)
(6,stdin)
(7,&data)
(8,data)
(9,RET)
(10,result)
(11,5)
(12,5==5)
(13,5)
(14,)
(15,result)
(16,)
(17,5==5)
(18,)
(19,5)
(20,result)
(21,if(5==5)
(22,printHexCharLine(result)
(23,data)
(24,1)
(25,if(5==5)
(26,"%c")
(27,\\\' \\\')
(28,result = data + 1)
(29,fscanf (stdin, "%c", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^