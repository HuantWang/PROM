-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_add_14_bad()
{
    short data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_add_14_bad(){    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_add_14_bad()
CWE190_Integer_Overflow__short_fscanf_add_14_bad
{    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(1,20,0)
(20,1,0)
(1,5,0)
(10,24,0)
(0,5,0)
(20,24,0)
(13,24,0)
(12,11,0)
(4,20,0)
(29,3,0)
(21,17,0)
(25,23,0)
(11,0,0)
(5,23,0)
(7,17,0)
(11,15,0)
(19,23,0)
(13,20,0)
(27,23,0)
(28,1,0)
(14,11,0)
(0,11,0)
(24,22,0)
(2,5,0)
(18,0,0)
(8,5,0)
(26,3,0)
(16,1,0)
(6,13,0)
(5,8,1)
(8,2,1)
(1,28,1)
(17,7,1)
(26,17,1)
(16,4,1)
(7,21,1)
(4,3,1)
(28,16,1)
(20,1,1)
(1,5,1)
(9,3,1)
(9,13,1)
(21,5,1)
(0,5,1)
(13,20,1)
(14,12,1)
(29,26,1)
(6,20,1)
(11,0,1)
(18,14,1)
(26,11,1)
(13,6,1)
(0,18,1)
(3,29,1)
(12,17,1)
(13,3,2)
(20,1,2)
(11,17,2)
(28,3,2)
(4,3,2)
(0,5,2)
(14,17,2)
(12,17,2)
(0,17,2)
(1,5,2)
(6,3,2)
(13,20,2)
(1,3,2)
(18,17,2)
(16,3,2)
(11,0,2)
(20,3,2)
-----------------------------------
(0,&data)
(1,data + 1)
(2,data)
(3,globalFive==5)
(4,result)
(5,data = 0)
(6,result)
(7,5)
(8,0)
(9,RET)
(10,result)
(11,fscanf (stdin, "%hd", &data)
(12,stdin)
(13,printIntLine(result)
(14,"%hd")
(15,)
(16,data)
(17,globalFive==5)
(18,data)
(19,if(globalFive==5)
(20,result = data + 1)
(21,globalFive)
(22,)
(23,)
(24,)
(25,data)
(26,globalFive)
(27,if(globalFive==5)
(28,1)
(29,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^