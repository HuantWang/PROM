-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_01_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = SHRT_MAX;
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,31,33,37,39
-----computeFrom-----
12,13
12,14
17,18
17,19
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_01_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_max_square_01_bad()
CWE190_Integer_Overflow__short_max_square_01_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = SHRT_MAX;    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,3,0)
(17,6,0)
(15,0,0)
(17,3,0)
(16,12,0)
(8,3,0)
(14,4,0)
(2,17,0)
(0,14,0)
(7,12,0)
(13,14,0)
(6,17,0)
(12,4,0)
(3,4,0)
(11,17,0)
(5,4,0)
(6,14,0)
(1,6,0)
(0,6,0)
(9,12,1)
(2,1,1)
(17,3,1)
(17,11,1)
(8,9,1)
(16,7,1)
(10,0,1)
(0,6,1)
(15,6,1)
(12,16,1)
(3,8,1)
(6,17,1)
(0,15,1)
(1,3,1)
(11,2,1)
(17,3,2)
(6,17,2)
(0,6,2)
-----------------------------------
(0,printIntLine(result)
(1,result)
(2,data)
(3,data = SHRT_MAX)
(4,)
(5,data)
(6,result = data * data)
(7,data)
(8,SHRT_MAX)
(9,data)
(10,RET)
(11,data)
(12,data = 0)
(13,result)
(14,)
(15,result)
(16,0)
(17,data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^