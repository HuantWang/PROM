-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
30,33
31,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,34,37,39,42,46,48
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_04_bad()
CWE190_Integer_Overflow__char_max_preinc_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,4,0)
(14,15,0)
(10,5,0)
(9,12,0)
(14,12,0)
(6,4,0)
(1,14,0)
(23,15,0)
(14,6,0)
(5,14,0)
(17,6,0)
(17,12,0)
(24,6,0)
(5,12,0)
(0,15,0)
(17,15,0)
(15,19,0)
(18,6,0)
(12,11,0)
(22,4,0)
(21,14,0)
(2,17,0)
(8,4,0)
(14,6,1)
(16,5,1)
(3,15,1)
(1,17,1)
(15,23,1)
(6,18,1)
(17,6,1)
(14,21,1)
(23,0,1)
(21,1,1)
(5,10,1)
(17,15,1)
(18,24,1)
(16,3,1)
(20,6,1)
(5,14,1)
(14,15,1)
(0,20,1)
(3,20,1)
(2,3,1)
(10,14,1)
(17,2,1)
(17,3,2)
(17,6,2)
(14,3,2)
(5,14,2)
(14,6,2)
(0,20,2)
(17,15,2)
(21,3,2)
(5,3,2)
(14,15,2)
(15,20,2)
(23,20,2)
(2,3,2)
(1,3,2)
(10,3,2)
-----------------------------------
(0,data)
(1,result)
(2,data)
(3,STATIC_CONST_TRUE)
(4,)
(5,printHexCharLine(result)
(6,data = \' \')
(7,if(STATIC_CONST_TRUE)
(8,data)
(9,result)
(10,result)
(11,)
(12,)
(13,data = ' ')
(14,result = data)
(15,data = CHAR_MAX)
(16,RET)
(17,++data)
(18,' ')
(19,)
(20,STATIC_CONST_TRUE)
(21,data)
(22,if(STATIC_CONST_TRUE)
(23,CHAR_MAX)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^