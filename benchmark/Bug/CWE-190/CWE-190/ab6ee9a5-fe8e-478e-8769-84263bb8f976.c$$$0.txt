-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_add_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,62,66,67,71,73
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_add_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_add_17_bad()
CWE190_Integer_Overflow__int_max_add_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(37,29,0)
(31,21,0)
(7,25,0)
(4,10,0)
(1,27,0)
(8,27,0)
(36,21,0)
(13,3,0)
(22,14,0)
(26,18,0)
(11,3,0)
(19,3,0)
(30,10,0)
(28,13,0)
(23,21,0)
(10,27,0)
(24,21,0)
(6,36,0)
(39,12,0)
(29,16,0)
(5,26,0)
(2,27,0)
(33,29,0)
(25,12,0)
(13,26,0)
(35,27,0)
(0,12,0)
(3,13,0)
(32,24,0)
(34,28,0)
(9,14,0)
(15,13,0)
(3,10,0)
(17,36,0)
(38,27,0)
(3,29,0)
(14,12,0)
(28,26,0)
(22,25,1)
(17,21,1)
(20,14,1)
(36,21,1)
(28,13,1)
(33,37,1)
(12,39,1)
(11,15,1)
(13,3,1)
(29,33,1)
(0,36,1)
(3,10,1)
(10,30,1)
(6,17,1)
(32,29,1)
(14,9,1)
(28,34,1)
(30,4,1)
(22,12,1)
(31,23,1)
(39,0,1)
(14,12,1)
(15,14,1)
(9,22,1)
(36,6,1)
(37,36,1)
(34,13,1)
(25,7,1)
(17,24,1)
(24,32,1)
(3,29,1)
(7,28,1)
(23,10,1)
(19,11,1)
(24,21,1)
(3,19,1)
(25,12,1)
(21,31,1)
(17,36,2)
(28,14,2)
(19,14,2)
(29,36,2)
(6,36,2)
(36,36,2)
(37,36,2)
(15,14,2)
(28,13,2)
(14,14,2)
(14,12,2)
(25,12,2)
(7,14,2)
(24,21,2)
(34,14,2)
(25,14,2)
(32,36,2)
(13,14,2)
(33,36,2)
(9,14,2)
(24,36,2)
(22,14,2)
(36,21,2)
(13,3,2)
(3,29,2)
(3,10,2)
(11,14,2)
(3,14,2)
-----------------------------------
(0,j)
(1,data)
(2,for(i = 0; i < 1; i++)
(3,data + 1)
(4,data)
(5,result)
(6,1)
(7,j)
(8,j)
(9,1)
(10,data = 0)
(11,data)
(12,j = 0)
(13,result = data + 1)
(14,j < 1)
(15,result)
(16,)
(17,i)
(18,)
(19,1)
(20,RET)
(21,i = 0)
(22,j)
(23,i)
(24,i++)
(25,j++)
(26,)
(27,)
(28,printIntLine(result)
(29,data = INT_MAX)
(30,0)
(31,0)
(32,i)
(33,INT_MAX)
(34,result)
(35,for(j = 0; j < 1; j++)
(36,i < 1)
(37,data)
(38,i)
(39,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^