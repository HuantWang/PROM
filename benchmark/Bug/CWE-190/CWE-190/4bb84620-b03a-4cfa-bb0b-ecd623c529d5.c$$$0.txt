-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_rand_add_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,57,61,62,66,68
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_34_bad(){    char data;    CWE190_Integer_Overflow__char_rand_add_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_34_bad()
CWE190_Integer_Overflow__char_rand_add_34_bad
{    char data;    CWE190_Integer_Overflow__char_rand_add_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_rand_add_34_unionType myUnion;
CWE190_Integer_Overflow__char_rand_add_34_unionType myUnion;
CWE190_Integer_Overflow__char_rand_add_34_unionType
CWE190_Integer_Overflow__char_rand_add_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,32,0)
(26,9,0)
(11,26,0)
(18,31,0)
(11,30,0)
(29,3,0)
(23,32,0)
(0,30,0)
(8,1,0)
(20,30,0)
(14,24,0)
(16,0,0)
(6,29,0)
(30,26,0)
(7,24,0)
(25,15,0)
(31,1,0)
(30,0,0)
(4,1,0)
(15,27,0)
(3,24,0)
(3,7,0)
(31,9,0)
(10,9,0)
(0,31,0)
(5,11,0)
(22,0,0)
(32,24,0)
(1,31,0)
(28,26,0)
(15,7,0)
(19,29,0)
(9,24,0)
(7,15,0)
(15,25,0)
(12,24,0)
(27,15,0)
(13,3,0)
(2,7,0)
(13,29,1)
(30,0,1)
(0,31,1)
(15,27,1)
(5,30,1)
(15,25,1)
(6,7,1)
(31,1,1)
(29,19,1)
(8,4,1)
(19,6,1)
(11,30,1)
(32,21,1)
(4,18,1)
(17,11,1)
(16,20,1)
(0,22,1)
(18,3,1)
(7,15,1)
(22,16,1)
(27,2,1)
(21,23,1)
(11,5,1)
(1,8,1)
(3,13,1)
(3,7,1)
(20,31,1)
(2,32,1)
(15,27,2)
(3,7,2)
(31,1,2)
(0,31,2)
(30,0,2)
(11,30,2)
(7,15,2)
(15,25,2)
-----------------------------------
(0,data + 1)
(1,myUnion.unionSecond)
(2,data)
(3,myUnion.unionFirst = data)
(4,myUnion)
(5,result)
(6,myUnion)
(7,data = (char)
(8,unionSecond)
(9,)
(10,data)
(11,printHexCharLine(result)
(12,data)
(13,data)
(14,myUnion)
(15,(char)
(16,data)
(17,RET)
(18,data)
(19,unionFirst)
(20,result)
(21,' ')
(22,1)
(23,data)
(24,)
(25,char)
(26,)
(27,RAND32()
(28,result)
(29,myUnion.unionFirst)
(30,result = data + 1)
(31,data = myUnion.unionSecond)
(32,data = ' ')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^