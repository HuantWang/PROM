-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
47,50
47,51
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
73,75
73,76
74,75
75,76
76,77
78,79
79,80
79,81
81,82
81,83
83,84
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,52,55,60,62,66,68,72,77,80,82,85,89,91
-----computeFrom-----
32,33
32,34
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_32_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,29,0)
(9,23,0)
(35,18,0)
(6,23,0)
(25,3,0)
(0,19,0)
(30,39,0)
(11,2,0)
(18,33,0)
(42,9,0)
(32,9,0)
(15,34,0)
(37,23,0)
(45,30,0)
(18,37,0)
(24,33,0)
(16,25,0)
(10,2,0)
(44,3,0)
(22,19,0)
(26,36,0)
(41,23,0)
(31,8,0)
(29,3,0)
(33,18,0)
(25,36,0)
(10,30,0)
(43,7,0)
(33,2,0)
(2,10,0)
(34,36,0)
(30,23,0)
(19,0,0)
(21,8,0)
(1,31,0)
(39,30,0)
(3,12,0)
(2,37,0)
(13,37,0)
(5,39,0)
(8,37,0)
(4,0,0)
(28,12,0)
(12,23,0)
(3,7,0)
(27,10,0)
(29,36,0)
(0,23,0)
(34,29,0)
(38,23,0)
(14,18,0)
(8,2,0)
(7,0,0)
(31,30,0)
(17,29,0)
(7,3,0)
(36,12,0)
(29,20,1)
(4,30,1)
(39,5,1)
(8,2,1)
(8,21,1)
(10,27,1)
(9,32,1)
(31,1,1)
(25,16,1)
(22,4,1)
(29,3,1)
(0,19,1)
(44,8,1)
(3,7,1)
(30,39,1)
(17,25,1)
(24,35,1)
(32,42,1)
(27,11,1)
(14,2,1)
(42,0,1)
(33,2,1)
(31,30,1)
(33,24,1)
(43,44,1)
(15,29,1)
(19,22,1)
(5,45,1)
(7,0,1)
(21,31,1)
(7,43,1)
(25,3,1)
(40,34,1)
(11,9,1)
(10,30,1)
(34,15,1)
(16,3,1)
(20,17,1)
(35,14,1)
(18,33,1)
(2,10,1)
(34,29,1)
(1,18,1)
(34,29,2)
(25,3,2)
(30,39,2)
(7,0,2)
(3,7,2)
(0,19,2)
(8,2,2)
(31,30,2)
(10,30,2)
(33,2,2)
(2,10,2)
(18,33,2)
(29,3,2)
-----------------------------------
(0,*dataPtr2 = &data)
(1,dataPtr1)
(2,data = *dataPtr1)
(3,data = *dataPtr2)
(4,dataPtr2)
(5,data)
(6,data)
(7,*dataPtr2)
(8,*dataPtr1 = data)
(9,data = \\\' \\\')
(10,*dataPtr1)
(11,data)
(12,)
(13,data)
(14,stdin)
(15,result)
(16,data)
(17,result)
(18,fscanf (stdin, "%c", &data)
(19,&data)
(20,data)
(21,data)
(22,data)
(23,)
(24,data)
(25,data++)
(26,result)
(27,dataPtr1)
(28,data)
(29,result = data)
(30,*dataPtr1 = &data)
(31,*dataPtr1)
(32,\\\' \\\')
(33,&data)
(34,printHexCharLine(result)
(35,"%c")
(36,)
(37,)
(38,dataPtr1)
(39,&data)
(40,RET)
(41,dataPtr2)
(42,data)
(43,dataPtr2)
(44,data)
(45,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^