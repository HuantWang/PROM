-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_13_bad()
{
    int64_t data;
    data = 0LL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,33,38,39,44,46,50,51,55,57
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
30,31
30,32
36,37
36,38
48,49
48,50
-----guardedBy-----
38,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_13_bad(){    int64_t data;    data = 0LL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_13_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_13_bad
{    int64_t data;    data = 0LL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(GLOBAL_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(6,17,0)
(25,14,0)
(24,11,0)
(29,7,0)
(16,4,0)
(4,13,0)
(7,4,0)
(14,4,0)
(1,10,0)
(21,3,0)
(2,15,0)
(11,14,0)
(20,10,0)
(5,27,0)
(28,15,0)
(2,11,0)
(11,15,0)
(8,17,0)
(18,4,0)
(12,7,0)
(9,10,0)
(26,14,0)
(14,11,0)
(0,3,0)
(23,10,0)
(19,2,0)
(8,4,1)
(22,7,1)
(7,4,1)
(21,0,1)
(17,6,1)
(2,11,1)
(19,11,1)
(29,17,1)
(6,8,1)
(24,7,1)
(4,16,1)
(0,23,1)
(2,19,1)
(14,26,1)
(16,18,1)
(26,25,1)
(18,3,1)
(14,4,1)
(8,3,1)
(11,14,1)
(22,2,1)
(25,24,1)
(12,29,1)
(7,12,1)
(3,21,1)
(22,17,1)
(19,7,2)
(2,11,2)
(11,14,2)
(7,4,2)
(11,7,2)
(25,7,2)
(29,17,2)
(18,3,2)
(16,3,2)
(14,7,2)
(14,4,2)
(2,7,2)
(7,17,2)
(12,17,2)
(26,7,2)
(24,7,2)
(4,3,2)
-----------------------------------
(0,GLOBAL_CONST_FIVE)
(1,if(GLOBAL_CONST_FIVE==5)
(2,printLongLongLine(result)
(3,GLOBAL_CONST_FIVE==5)
(4,data = LLONG_MAX)
(5,if(data > 0)
(6,5)
(7,data > 0)
(8,GLOBAL_CONST_FIVE)
(9,data)
(10,)
(11,result = data * 2)
(12,0)
(13,)
(14,data * 2)
(15,)
(16,LLONG_MAX)
(17,GLOBAL_CONST_FIVE==5)
(18,data)
(19,result)
(20,if(GLOBAL_CONST_FIVE==5)
(21,5)
(22,RET)
(23,L)
(24,result)
(25,data)
(26,2)
(27,)
(28,result)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^