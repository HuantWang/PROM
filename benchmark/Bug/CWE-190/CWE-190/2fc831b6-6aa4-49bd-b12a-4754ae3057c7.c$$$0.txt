-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_02_bad()
{
    int64_t data;
    data = 0LL;
    if(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
28,29
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,9,11,15,16,18,23,25,27,32,33,38,40,44,45,49,51
-----computeFrom-----
13,14
13,15
21,22
21,23
30,31
30,32
42,43
42,44
-----guardedBy-----
32,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_02_bad(){    int64_t data;    data = 0LL;    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_02_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_02_bad
{    int64_t data;    data = 0LL;    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(24,25,0)
(25,23,0)
(22,11,0)
(4,25,0)
(4,23,0)
(9,2,0)
(12,11,0)
(8,22,0)
(15,19,0)
(16,4,0)
(11,18,0)
(10,23,0)
(13,11,0)
(25,19,0)
(19,25,0)
(21,2,0)
(5,22,0)
(1,7,0)
(19,11,0)
(20,2,0)
(6,2,0)
(0,19,0)
(3,17,1)
(3,11,1)
(22,8,1)
(22,11,1)
(19,11,1)
(4,25,1)
(12,17,1)
(14,4,1)
(14,3,1)
(24,22,1)
(19,0,1)
(16,25,1)
(17,20,1)
(8,5,1)
(5,3,1)
(14,22,1)
(15,24,1)
(0,15,1)
(13,12,1)
(4,16,1)
(25,19,1)
(11,13,1)
(24,22,2)
(22,3,2)
(12,17,2)
(8,3,2)
(16,22,2)
(4,25,2)
(13,17,2)
(25,22,2)
(19,22,2)
(15,22,2)
(25,19,2)
(22,11,2)
(5,3,2)
(11,17,2)
(0,22,2)
(19,11,2)
(4,22,2)
-----------------------------------
(0,2)
(1,if(data > 0)
(2,)
(3,1)
(4,printLongLongLine(result)
(5,data)
(6,if(1)
(7,)
(8,0)
(9,data)
(10,result)
(11,data = LLONG_MAX)
(12,data)
(13,LLONG_MAX)
(14,RET)
(15,data)
(16,result)
(17,1)
(18,)
(19,data * 2)
(20,L)
(21,if(1)
(22,data > 0)
(23,)
(24,result)
(25,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^