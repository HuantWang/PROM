-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_postinc_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            data++;
            short result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
67,68
69,70
70,71
70,72
72,73
72,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,42,45,47,50,54,56,61,63,68,71,73,76,80,82,87,88
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
59,60
59,61
-----guardedBy-----
61,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_postinc_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_max_postinc_12_bad()
CWE190_Integer_Overflow__short_max_postinc_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            data++;            short result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(14,8,0)
(28,29,0)
(38,27,0)
(19,8,0)
(38,8,0)
(24,8,0)
(11,16,0)
(25,14,0)
(21,19,0)
(0,24,0)
(35,8,0)
(33,40,0)
(15,3,0)
(33,8,0)
(6,0,0)
(4,27,0)
(30,23,0)
(5,19,0)
(31,40,0)
(17,29,0)
(12,24,0)
(1,20,0)
(19,40,0)
(19,11,0)
(33,11,0)
(34,33,0)
(21,40,0)
(29,23,0)
(24,11,0)
(42,38,0)
(8,32,0)
(41,23,0)
(37,21,0)
(9,24,0)
(22,19,0)
(39,8,0)
(10,23,0)
(24,27,0)
(0,27,0)
(13,11,0)
(18,11,0)
(40,36,0)
(38,11,0)
(7,14,0)
(20,26,0)
(14,11,0)
(14,11,1)
(14,8,1)
(44,21,1)
(43,8,1)
(12,38,1)
(25,43,1)
(21,37,1)
(19,8,1)
(39,2,1)
(0,6,1)
(19,22,1)
(8,35,1)
(0,24,1)
(11,18,1)
(44,20,1)
(22,5,1)
(13,2,1)
(44,0,1)
(35,39,1)
(14,7,1)
(29,28,1)
(33,8,1)
(34,43,1)
(42,14,1)
(38,8,1)
(6,24,1)
(24,8,1)
(24,9,1)
(20,1,1)
(24,11,1)
(43,11,1)
(18,13,1)
(33,11,1)
(38,11,1)
(19,11,1)
(7,25,1)
(33,34,1)
(9,12,1)
(38,42,1)
(28,17,1)
(1,14,1)
(37,19,1)
(21,19,1)
(2,29,1)
(5,33,1)
(22,43,2)
(38,8,2)
(18,2,2)
(38,11,2)
(38,14,2)
(34,43,2)
(11,2,2)
(42,14,2)
(0,24,2)
(39,2,2)
(0,14,2)
(19,8,2)
(20,14,2)
(19,11,2)
(5,43,2)
(35,2,2)
(33,43,2)
(12,14,2)
(25,43,2)
(9,14,2)
(14,43,2)
(8,2,2)
(37,43,2)
(14,8,2)
(13,2,2)
(6,14,2)
(19,43,2)
(1,14,2)
(14,11,2)
(21,43,2)
(33,8,2)
(24,11,2)
(24,8,2)
(24,14,2)
(21,19,2)
(33,11,2)
(7,43,2)
-----------------------------------
(0,printIntLine(result)
(1,"data value is too large to perform arithmetic safely.")
(2,globalReturnsTrueOrFalse()
(3,)
(4,result)
(5,result)
(6,result)
(7,SHRT_MAX)
(8,data = 2)
(9,data)
(10,if(globalReturnsTrueOrFalse()
(11,data = SHRT_MAX)
(12,result)
(13,data)
(14,data < SHRT_MAX)
(15,if (data < SHRT_MAX)
(16,)
(17,data)
(18,SHRT_MAX)
(19,result = data)
(20,printLine("data value is too large to perform arithmetic safely.")
(21,printIntLine(result)
(22,data)
(23,)
(24,result = data)
(25,data)
(26,)
(27,)
(28,0)
(29,data = 0)
(30,data)
(31,result)
(32,)
(33,data++)
(34,data)
(35,2)
(36,)
(37,result)
(38,data++)
(39,data)
(40,)
(41,if(globalReturnsTrueOrFalse()
(42,data)
(43,globalReturnsTrueOrFalse()
(44,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^