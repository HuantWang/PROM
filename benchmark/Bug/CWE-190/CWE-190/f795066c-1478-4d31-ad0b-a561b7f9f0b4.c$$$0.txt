-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_max_square_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Use the maximum value for this type */
    data = INT_MAX;
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,52,56,58,62,64
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_34_bad(){    int data;    CWE190_Integer_Overflow__int_max_square_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_34_bad()
CWE190_Integer_Overflow__int_max_square_34_bad
{    int data;    CWE190_Integer_Overflow__int_max_square_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_max_square_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_square_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_square_34_unionType
CWE190_Integer_Overflow__int_max_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,0,0)
(27,10,0)
(24,10,0)
(3,4,0)
(12,29,0)
(27,21,0)
(14,0,0)
(2,9,0)
(4,6,0)
(18,25,0)
(17,27,0)
(1,25,0)
(0,25,0)
(21,15,0)
(28,9,0)
(11,27,0)
(30,6,0)
(4,10,0)
(26,29,0)
(10,27,0)
(22,21,0)
(19,1,0)
(16,23,0)
(23,21,0)
(21,23,0)
(5,25,0)
(7,15,0)
(20,1,0)
(15,25,0)
(0,1,0)
(8,23,0)
(10,6,0)
(29,25,0)
(6,15,0)
(2,1,1)
(3,10,1)
(19,29,1)
(0,14,1)
(13,4,1)
(1,20,1)
(4,3,1)
(29,12,1)
(28,2,1)
(17,24,1)
(0,1,1)
(27,11,1)
(4,10,1)
(20,19,1)
(23,8,1)
(14,9,1)
(8,16,1)
(27,21,1)
(10,27,1)
(11,17,1)
(16,22,1)
(24,21,1)
(12,26,1)
(21,23,1)
(22,0,1)
(9,28,1)
(0,1,2)
(10,27,2)
(27,21,2)
(4,10,2)
(21,23,2)
-----------------------------------
(0,myUnion.unionFirst = data)
(1,data = INT_MAX)
(2,myUnion)
(3,result)
(4,printIntLine(result)
(5,data)
(6,)
(7,data)
(8,unionSecond)
(9,myUnion.unionFirst)
(10,result = data * data)
(11,data)
(12,0)
(13,RET)
(14,data)
(15,)
(16,myUnion)
(17,data)
(18,myUnion)
(19,data)
(20,INT_MAX)
(21,data = myUnion.unionSecond)
(22,data)
(23,myUnion.unionSecond)
(24,result)
(25,)
(26,data)
(27,data * data)
(28,unionFirst)
(29,data = 0)
(30,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^