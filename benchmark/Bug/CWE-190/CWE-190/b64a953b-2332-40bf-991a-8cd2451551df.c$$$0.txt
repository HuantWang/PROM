-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_postinc_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_postinc_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_postinc_14_bad()
CWE190_Integer_Overflow__int_max_postinc_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,2,0)
(21,19,0)
(24,4,0)
(5,13,0)
(10,5,0)
(23,4,0)
(7,6,0)
(1,19,0)
(6,4,0)
(15,2,0)
(12,17,0)
(14,4,0)
(23,17,0)
(20,23,0)
(4,18,0)
(6,17,0)
(8,7,0)
(22,6,0)
(7,5,0)
(27,17,0)
(26,2,0)
(25,3,0)
(6,5,0)
(11,6,0)
(23,5,0)
(9,3,0)
(17,2,0)
(27,12,1)
(23,17,1)
(0,3,1)
(23,20,1)
(9,25,1)
(20,3,1)
(24,19,1)
(23,4,1)
(3,9,1)
(25,19,1)
(7,8,1)
(25,4,1)
(19,21,1)
(11,22,1)
(1,17,1)
(22,23,1)
(14,24,1)
(7,6,1)
(21,1,1)
(6,4,1)
(6,17,1)
(4,14,1)
(17,27,1)
(8,6,1)
(6,11,1)
(0,7,1)
(8,3,2)
(23,4,2)
(22,3,2)
(24,19,2)
(7,3,2)
(20,3,2)
(11,3,2)
(6,3,2)
(6,4,2)
(6,17,2)
(4,19,2)
(23,17,2)
(14,19,2)
(23,3,2)
(7,6,2)
-----------------------------------
(0,RET)
(1,globalFive)
(2,)
(3,globalFive==5)
(4,data = INT_MAX)
(5,)
(6,result = data)
(7,printIntLine(result)
(8,result)
(9,5)
(10,result)
(11,data)
(12,data)
(13,)
(14,INT_MAX)
(15,if(globalFive==5)
(16,data)
(17,data = 0)
(18,)
(19,globalFive==5)
(20,data)
(21,5)
(22,result)
(23,data++)
(24,data)
(25,globalFive)
(26,if(globalFive==5)
(27,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^