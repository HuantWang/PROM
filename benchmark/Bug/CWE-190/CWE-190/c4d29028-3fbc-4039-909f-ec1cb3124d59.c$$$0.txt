-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_13_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
67,68
68,69
68,70
69,70
70,71
70,72
72,73
72,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,66,71,73,77,79,83,85
-----computeFrom-----
12,13
12,14
17,18
17,19
34,35
34,36
48,49
48,50
63,64
63,65
75,76
75,77
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_13_bad(){    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_13_bad()
CWE190_Integer_Overflow__int_fgets_square_13_bad
{    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(42,28,0)
(37,19,0)
(28,27,0)
(31,23,0)
(2,39,0)
(19,13,0)
(19,43,0)
(3,13,0)
(34,25,0)
(24,5,0)
(30,23,0)
(16,2,0)
(11,44,0)
(13,35,0)
(40,35,0)
(7,5,0)
(20,27,0)
(41,15,0)
(4,25,0)
(15,18,0)
(38,28,0)
(12,35,0)
(18,15,0)
(1,2,0)
(16,4,0)
(26,4,0)
(22,25,0)
(13,19,0)
(25,4,0)
(36,15,0)
(6,14,0)
(33,27,0)
(23,21,0)
(25,28,0)
(29,16,0)
(4,2,0)
(8,27,0)
(15,35,0)
(14,32,0)
(25,19,0)
(0,44,0)
(17,18,0)
(35,23,0)
(9,15,0)
(6,18,1)
(22,26,1)
(10,16,1)
(34,22,1)
(41,9,1)
(3,37,1)
(18,15,1)
(7,28,1)
(13,35,1)
(0,11,1)
(14,6,1)
(40,12,1)
(17,15,1)
(24,7,1)
(25,28,1)
(15,35,1)
(11,5,1)
(16,4,1)
(13,3,1)
(10,44,1)
(19,13,1)
(9,35,1)
(35,40,1)
(16,29,1)
(11,19,1)
(15,36,1)
(12,5,1)
(26,44,1)
(18,17,1)
(29,4,1)
(5,24,1)
(44,0,1)
(11,14,1)
(42,38,1)
(25,19,1)
(28,42,1)
(37,18,1)
(25,34,1)
(36,41,1)
(4,25,1)
(25,19,2)
(22,44,2)
(19,13,2)
(18,5,2)
(26,44,2)
(35,5,2)
(12,5,2)
(15,35,2)
(13,18,2)
(19,18,2)
(25,44,2)
(40,5,2)
(9,5,2)
(18,15,2)
(13,35,2)
(14,18,2)
(15,5,2)
(41,5,2)
(3,18,2)
(36,5,2)
(4,44,2)
(16,4,2)
(4,25,2)
(16,44,2)
(37,18,2)
(34,44,2)
(29,44,2)
(25,28,2)
(6,18,2)
(17,5,2)
-----------------------------------
(0,5)
(1,result)
(2,)
(3,inputBuffer)
(4,result = data * data)
(5,GLOBAL_CONST_FIVE==5)
(6,"fgets()
(7,GLOBAL_CONST_FIVE)
(8,if(GLOBAL_CONST_FIVE==5)
(9,inputBuffer)
(10,RET)
(11,GLOBAL_CONST_FIVE)
(12,inputBuffer)
(13,atoi(inputBuffer)
(14,printLine("fgets()
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,printIntLine(result)
(17,NULL)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,data = atoi(inputBuffer)
(20,data)
(21,)
(22,data)
(23,)
(24,5)
(25,data * data)
(26,result)
(27,)
(28,data = 0)
(29,result)
(30,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,inputBuffer)
(32,)
(33,if(GLOBAL_CONST_FIVE==5)
(34,data)
(35,inputBuffer[CHAR_ARRAY_SIZE] = "")
(36,stdin)
(37,data)
(38,data)
(39,)
(40,"")
(41,CHAR_ARRAY_SIZE)
(42,0)
(43,)
(44,GLOBAL_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^