-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_07_bad()
{
    short data;
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_07_bad(){    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_07_bad()
CWE190_Integer_Overflow__short_max_multiply_07_bad
{    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(3,11,0)
(24,6,0)
(16,14,0)
(12,6,0)
(8,0,0)
(22,23,0)
(25,0,0)
(5,6,0)
(11,7,0)
(18,15,0)
(11,14,0)
(27,29,0)
(30,13,0)
(6,24,0)
(20,15,0)
(6,29,0)
(19,7,0)
(10,7,0)
(1,12,0)
(12,29,0)
(2,24,0)
(26,23,0)
(14,28,0)
(24,14,0)
(17,24,0)
(7,23,0)
(4,14,0)
(24,7,0)
(31,11,0)
(21,23,0)
(24,2,1)
(17,5,1)
(12,1,1)
(16,4,1)
(11,7,1)
(18,20,1)
(5,11,1)
(12,6,1)
(19,10,1)
(9,11,1)
(6,24,1)
(24,7,1)
(9,15,1)
(11,31,1)
(7,19,1)
(2,17,1)
(9,12,1)
(31,3,1)
(8,25,1)
(25,7,1)
(11,14,1)
(4,0,1)
(3,15,1)
(20,0,1)
(1,6,1)
(24,14,1)
(14,16,1)
(0,8,1)
(20,14,1)
(15,18,1)
(6,24,2)
(11,7,2)
(12,6,2)
(5,11,2)
(24,7,2)
(11,15,2)
(6,11,2)
(31,15,2)
(11,14,2)
(3,15,2)
(1,11,2)
(12,11,2)
(16,0,2)
(4,0,2)
(24,14,2)
(24,11,2)
(17,11,2)
(14,0,2)
(2,11,2)
-----------------------------------
(0,staticFive==5)
(1,result)
(2,2)
(3,data)
(4,data)
(5,result)
(6,result = data * 2)
(7,data = 0)
(8,5)
(9,RET)
(10,data)
(11,data > 0)
(12,printIntLine(result)
(13,)
(14,data = SHRT_MAX)
(15,staticFive==5)
(16,SHRT_MAX)
(17,data)
(18,5)
(19,0)
(20,staticFive)
(21,if(staticFive==5)
(22,data)
(23,)
(24,data * 2)
(25,staticFive)
(26,if(staticFive==5)
(27,result)
(28,)
(29,)
(30,if(data > 0)
(31,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^