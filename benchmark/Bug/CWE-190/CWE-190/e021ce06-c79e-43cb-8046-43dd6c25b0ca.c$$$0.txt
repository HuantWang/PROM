-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_01_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
23,24
23,25
24,25
27,28
27,29
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
35,36
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,8,10,14,15,19,21,25,26,30,32,36,37,41,43
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
25,36
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_01_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_multiply_01_bad()
CWE190_Integer_Overflow__char_max_multiply_01_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,14,0)
(1,21,0)
(2,20,0)
(10,15,0)
(9,14,0)
(6,18,0)
(20,21,0)
(15,18,0)
(19,17,0)
(21,5,0)
(14,15,0)
(4,15,0)
(3,14,0)
(13,5,0)
(16,15,0)
(12,17,0)
(17,18,0)
(20,5,0)
(8,10,0)
(7,18,0)
(0,10,0)
(14,21,0)
(14,15,1)
(14,9,1)
(10,8,1)
(19,12,1)
(10,15,1)
(17,19,1)
(20,21,1)
(8,0,1)
(0,15,1)
(9,3,1)
(20,2,1)
(3,1,1)
(4,16,1)
(2,21,1)
(21,14,1)
(11,20,1)
(15,4,1)
(1,10,1)
(16,17,1)
(11,10,1)
(2,10,2)
(14,15,2)
(9,10,2)
(20,21,2)
(10,15,2)
(3,10,2)
(14,10,2)
(1,10,2)
(20,10,2)
(21,14,2)
(21,10,2)
-----------------------------------
(0,data)
(1,result)
(2,result)
(3,data)
(4,CHAR_MAX)
(5,)
(6,data)
(7,if(data > 0)
(8,0)
(9,2)
(10,data > 0)
(11,RET)
(12,data)
(13,result)
(14,data * 2)
(15,data = CHAR_MAX)
(16,data)
(17,data = ' ')
(18,)
(19,' ')
(20,printHexCharLine(result)
(21,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^