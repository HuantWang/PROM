-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_34_bad()
{
    short data;
    CWE190_Integer_Overflow__short_fscanf_square_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
53,54
53,55
55,56
55,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,56,60,62,66,68
-----computeFrom-----
18,19
18,20
33,34
33,35
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_34_bad(){    short data;    CWE190_Integer_Overflow__short_fscanf_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_34_bad()
CWE190_Integer_Overflow__short_fscanf_square_34_bad
{    short data;    CWE190_Integer_Overflow__short_fscanf_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
CWE190_Integer_Overflow__short_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__short_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__short_fscanf_square_34_unionType
CWE190_Integer_Overflow__short_fscanf_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,18,0)
(20,23,0)
(30,7,0)
(16,4,0)
(6,0,0)
(2,19,0)
(4,19,0)
(23,0,0)
(13,7,0)
(31,17,0)
(11,9,0)
(8,4,0)
(27,19,0)
(1,19,0)
(29,19,0)
(22,9,0)
(11,4,0)
(9,19,0)
(28,14,0)
(7,0,0)
(4,11,0)
(26,9,0)
(0,23,0)
(32,23,0)
(18,2,0)
(3,17,0)
(17,29,0)
(12,30,0)
(29,9,0)
(7,30,0)
(14,18,0)
(5,29,0)
(15,11,0)
(30,18,0)
(14,30,0)
(0,2,0)
(10,7,0)
(25,2,0)
(8,9,1)
(28,30,1)
(16,8,1)
(9,26,1)
(10,13,1)
(14,30,1)
(11,15,1)
(32,20,1)
(29,5,1)
(31,3,1)
(12,0,1)
(13,12,1)
(24,14,1)
(4,11,1)
(3,4,1)
(7,0,1)
(23,32,1)
(0,23,1)
(26,22,1)
(11,9,1)
(5,17,1)
(29,9,1)
(17,31,1)
(20,6,1)
(15,16,1)
(6,29,1)
(14,28,1)
(30,7,1)
(7,10,1)
(7,0,2)
(11,9,2)
(14,30,2)
(4,11,2)
(0,23,2)
(30,7,2)
(29,9,2)
-----------------------------------
(0,data = myUnion.unionSecond)
(1,myUnion)
(2,)
(3,myUnion)
(4,fscanf (stdin, "%hd", &data)
(5,data)
(6,data)
(7,data * data)
(8,stdin)
(9,data = 0)
(10,data)
(11,&data)
(12,result)
(13,data)
(14,printIntLine(result)
(15,data)
(16,"%hd")
(17,myUnion.unionFirst)
(18,)
(19,)
(20,myUnion)
(21,result)
(22,data)
(23,myUnion.unionSecond)
(24,RET)
(25,data)
(26,0)
(27,data)
(28,result)
(29,myUnion.unionFirst = data)
(30,result = data * data)
(31,unionFirst)
(32,unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^