-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_53d_badSink(int data)
{
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
-----nextToken-----
2,4,6,8,13,15,19,21,25,27
-----computeFrom-----
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_53d_badSink(int data){    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fscanf_square_53d_badSink(int data)
CWE190_Integer_Overflow__int_fscanf_square_53d_badSink
int data
int
data
data
{    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(5,0,0)
(0,4,0)
(10,0,0)
(2,10,0)
(10,2,0)
(9,7,0)
(11,2,0)
(1,2,0)
(7,10,0)
(2,3,0)
(8,10,0)
(7,0,0)
(10,2,1)
(1,8,1)
(7,10,1)
(7,9,1)
(6,7,1)
(9,10,1)
(2,3,1)
(11,1,1)
(2,11,1)
(2,3,2)
(7,10,2)
(10,2,2)
-----------------------------------
(0,)
(1,data)
(2,data * data)
(3,int data)
(4,)
(5,result)
(6,RET)
(7,printIntLine(result)
(8,result)
(9,result)
(10,result = data * data)
(11,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^