-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,65,67,71,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_17_bad()
CWE190_Integer_Overflow__short_rand_square_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(37,31,0)
(8,30,0)
(15,4,0)
(12,40,0)
(36,40,0)
(33,21,0)
(9,21,0)
(41,21,0)
(30,31,0)
(1,30,0)
(36,34,0)
(10,5,0)
(12,39,0)
(26,12,0)
(2,4,0)
(7,19,0)
(22,40,0)
(29,39,0)
(36,28,0)
(20,31,0)
(34,36,0)
(40,13,0)
(38,33,0)
(27,21,0)
(17,12,0)
(14,19,0)
(39,5,0)
(0,21,0)
(39,12,0)
(28,36,0)
(18,31,0)
(11,14,0)
(23,33,0)
(35,19,0)
(12,33,0)
(4,19,0)
(16,21,0)
(24,25,0)
(40,36,0)
(6,37,0)
(5,32,0)
(25,5,0)
(25,39,0)
(8,31,1)
(31,18,1)
(2,19,1)
(1,8,1)
(37,31,1)
(11,40,1)
(7,35,1)
(37,6,1)
(18,20,1)
(22,4,1)
(15,2,1)
(40,36,1)
(3,30,1)
(6,25,1)
(12,40,1)
(26,29,1)
(29,30,1)
(14,19,1)
(25,39,1)
(36,34,1)
(36,28,1)
(4,19,1)
(14,11,1)
(23,38,1)
(35,33,1)
(39,12,1)
(2,14,1)
(12,17,1)
(33,23,1)
(25,24,1)
(20,4,1)
(24,39,1)
(8,37,1)
(19,7,1)
(34,22,1)
(12,33,1)
(17,26,1)
(30,31,1)
(30,1,1)
(4,15,1)
(2,4,2)
(36,28,2)
(14,19,2)
(12,40,2)
(36,4,2)
(14,4,2)
(6,30,2)
(17,30,2)
(22,4,2)
(11,4,2)
(30,31,2)
(8,30,2)
(37,31,2)
(26,30,2)
(24,30,2)
(4,19,2)
(25,39,2)
(4,4,2)
(34,4,2)
(29,30,2)
(1,30,2)
(36,34,2)
(40,4,2)
(12,33,2)
(30,30,2)
(15,4,2)
(37,30,2)
(25,30,2)
(12,30,2)
(39,12,2)
(40,36,2)
(39,30,2)
-----------------------------------
(0,i)
(1,1)
(2,i)
(3,RET)
(4,i < 1)
(5,)
(6,j)
(7,0)
(8,j)
(9,data)
(10,result)
(11,i)
(12,data * data)
(13,)
(14,i++)
(15,1)
(16,j)
(17,data)
(18,0)
(19,i = 0)
(20,j)
(21,)
(22,data)
(23,0)
(24,result)
(25,printIntLine(result)
(26,data)
(27,for(j = 0; j < 1; j++)
(28,short)
(29,result)
(30,j < 1)
(31,j = 0)
(32,)
(33,data = 0)
(34,RAND32()
(35,i)
(36,(short)
(37,j++)
(38,data)
(39,result = data * data)
(40,data = (short)
(41,for(i = 0; i < 1; i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^