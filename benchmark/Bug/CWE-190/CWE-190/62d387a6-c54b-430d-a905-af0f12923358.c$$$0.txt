-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
38,41
39,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,42,45,47,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_06_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,28,0)
(25,21,0)
(0,19,0)
(21,29,0)
(2,15,0)
(7,21,0)
(5,6,0)
(27,13,0)
(8,2,0)
(15,6,0)
(28,21,0)
(15,2,0)
(26,28,0)
(18,6,0)
(25,6,0)
(11,17,0)
(19,21,0)
(22,2,0)
(2,4,0)
(14,25,0)
(16,15,0)
(19,28,0)
(23,10,0)
(6,10,0)
(9,10,0)
(28,6,0)
(3,10,0)
(12,13,0)
(24,17,0)
(1,13,1)
(18,5,1)
(15,16,1)
(8,22,1)
(6,18,1)
(22,17,1)
(16,8,1)
(28,6,1)
(25,14,1)
(14,13,1)
(12,17,1)
(20,25,1)
(2,15,1)
(28,26,1)
(11,6,1)
(15,6,1)
(17,24,1)
(25,6,1)
(19,0,1)
(12,2,1)
(0,28,1)
(27,12,1)
(24,11,1)
(1,19,1)
(13,27,1)
(26,20,1)
(19,28,1)
(19,28,2)
(22,17,2)
(26,13,2)
(25,13,2)
(15,6,2)
(19,13,2)
(25,6,2)
(20,13,2)
(14,13,2)
(28,13,2)
(8,17,2)
(2,15,2)
(16,17,2)
(28,6,2)
(15,17,2)
(0,13,2)
(2,17,2)
-----------------------------------
(0,result)
(1,RET)
(2,fscanf (stdin, "%c", &data)
(3,if(STATIC_CONST_FIVE==5)
(4,)
(5,data)
(6,data = \\\' \\\')
(7,result)
(8,"%c")
(9,if(STATIC_CONST_FIVE==5)
(10,)
(11,STATIC_CONST_FIVE)
(12,STATIC_CONST_FIVE)
(13,STATIC_CONST_FIVE==5)
(14,data)
(15,&data)
(16,data)
(17,STATIC_CONST_FIVE==5)
(18,\\\' \\\')
(19,printHexCharLine(result)
(20,result)
(21,)
(22,stdin)
(23,data)
(24,5)
(25,data++)
(26,data)
(27,5)
(28,result = data)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^