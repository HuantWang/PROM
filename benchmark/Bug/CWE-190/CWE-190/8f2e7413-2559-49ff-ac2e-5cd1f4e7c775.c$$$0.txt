-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_04_bad()
CWE190_Integer_Overflow__char_rand_square_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,5,0)
(26,13,0)
(18,24,0)
(5,23,0)
(3,23,0)
(12,13,0)
(18,13,0)
(20,21,0)
(9,21,0)
(24,9,0)
(23,3,0)
(2,21,0)
(0,9,0)
(13,7,0)
(17,24,0)
(22,26,0)
(8,21,0)
(24,18,0)
(6,9,0)
(1,24,0)
(23,5,0)
(5,15,0)
(10,23,0)
(23,10,0)
(26,18,0)
(25,5,0)
(14,18,0)
(22,18,1)
(19,4,1)
(24,5,1)
(24,9,1)
(11,9,1)
(19,26,1)
(26,22,1)
(5,23,1)
(14,4,1)
(18,24,1)
(25,11,1)
(1,17,1)
(6,0,1)
(23,3,1)
(17,14,1)
(4,11,1)
(24,1,1)
(4,5,1)
(23,10,1)
(10,25,1)
(9,6,1)
(26,18,1)
(22,4,2)
(1,4,2)
(10,11,2)
(18,4,2)
(26,4,2)
(23,3,2)
(24,4,2)
(24,5,2)
(26,18,2)
(18,24,2)
(17,4,2)
(24,9,2)
(25,11,2)
(23,11,2)
(14,4,2)
(5,23,2)
(23,10,2)
(5,11,2)
-----------------------------------
(0,data)
(1,data)
(2,if(STATIC_CONST_TRUE)
(3,char)
(4,STATIC_CONST_TRUE)
(5,data = (char)
(6,' ')
(7,)
(8,data)
(9,data = \' \')
(10,RAND32()
(11,STATIC_CONST_TRUE)
(12,result)
(13,)
(14,result)
(15,)
(16,data = ' ')
(17,data)
(18,result = data * data)
(19,RET)
(20,if(STATIC_CONST_TRUE)
(21,)
(22,result)
(23,(char)
(24,data * data)
(25,data)
(26,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^