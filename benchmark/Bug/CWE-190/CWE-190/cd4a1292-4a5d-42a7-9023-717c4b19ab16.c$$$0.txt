-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_34_bad()
{
    short data;
    CWE190_Integer_Overflow__short_rand_square_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,57,61,63,67,69
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_34_bad(){    short data;    CWE190_Integer_Overflow__short_rand_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_34_bad()
CWE190_Integer_Overflow__short_rand_square_34_bad
{    short data;    CWE190_Integer_Overflow__short_rand_square_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
CWE190_Integer_Overflow__short_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__short_rand_square_34_unionType myUnion;
CWE190_Integer_Overflow__short_rand_square_34_unionType
CWE190_Integer_Overflow__short_rand_square_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(1,24,0)
(21,15,0)
(25,18,0)
(24,7,0)
(23,7,0)
(25,21,0)
(4,25,0)
(9,18,0)
(12,21,0)
(3,29,0)
(22,30,0)
(17,8,0)
(10,24,0)
(7,18,0)
(2,1,0)
(32,6,0)
(5,18,0)
(19,6,0)
(0,3,0)
(13,18,0)
(28,5,0)
(24,1,0)
(21,25,0)
(8,30,0)
(20,19,0)
(3,8,0)
(27,19,0)
(16,1,0)
(8,29,0)
(6,18,0)
(21,12,0)
(30,8,0)
(30,24,0)
(6,25,0)
(15,21,0)
(31,5,0)
(14,30,0)
(29,7,0)
(26,29,0)
(24,1,1)
(22,17,1)
(6,32,1)
(11,3,1)
(0,8,1)
(3,8,1)
(5,31,1)
(2,10,1)
(6,25,1)
(27,20,1)
(30,24,1)
(21,15,1)
(32,19,1)
(15,4,1)
(8,30,1)
(3,0,1)
(4,5,1)
(17,24,1)
(10,6,1)
(16,2,1)
(25,21,1)
(1,16,1)
(21,12,1)
(20,25,1)
(19,27,1)
(30,14,1)
(31,28,1)
(14,22,1)
(21,12,2)
(24,1,2)
(21,15,2)
(8,30,2)
(30,24,2)
(6,25,2)
(3,8,2)
(25,21,2)
-----------------------------------
(0,result)
(1,myUnion.unionSecond)
(2,myUnion)
(3,printIntLine(result)
(4,data)
(5,data = 0)
(6,myUnion.unionFirst = data)
(7,)
(8,result = data * data)
(9,data)
(10,data)
(11,RET)
(12,short)
(13,myUnion)
(14,data)
(15,RAND32()
(16,unionSecond)
(17,result)
(18,)
(19,myUnion.unionFirst)
(20,myUnion)
(21,(short)
(22,data)
(23,data)
(24,data = myUnion.unionSecond)
(25,data = (short)
(26,result)
(27,unionFirst)
(28,data)
(29,)
(30,data * data)
(31,0)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^