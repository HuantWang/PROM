-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_bad()
{
    unsigned int data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,36,38,42,44,48,50,51
-----computeFrom-----
12,13
12,14
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_bad(){    unsigned int data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_bad
{    unsigned int data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
-----joern-----
(9,5,0)
(17,11,0)
(10,0,0)
(15,13,0)
(16,11,0)
(24,3,0)
(12,3,0)
(5,13,0)
(13,26,0)
(3,0,0)
(25,0,0)
(4,23,0)
(12,13,0)
(3,12,0)
(5,12,0)
(25,11,0)
(27,23,0)
(11,25,0)
(8,2,0)
(1,25,0)
(0,23,0)
(11,2,0)
(7,23,0)
(20,0,0)
(14,12,0)
(22,26,0)
(6,3,0)
(18,8,1)
(5,9,1)
(18,19,1)
(24,14,1)
(9,12,1)
(5,12,1)
(21,22,1)
(6,24,1)
(11,25,1)
(0,10,1)
(16,19,1)
(10,20,1)
(8,11,1)
(21,18,1)
(12,3,1)
(3,0,1)
(25,0,1)
(22,5,1)
(3,6,1)
(1,17,1)
(25,1,1)
(17,16,1)
(19,0,1)
(14,18,1)
(14,18,2)
(3,18,2)
(25,0,2)
(16,19,2)
(8,19,2)
(12,3,2)
(22,18,2)
(11,19,2)
(17,19,2)
(5,18,2)
(24,18,2)
(9,18,2)
(6,18,2)
(5,12,2)
(1,19,2)
(3,0,2)
(12,18,2)
(25,19,2)
(11,25,2)
-----------------------------------
(0,data = 0)
(1,data)
(2,)
(3,data * data)
(4,data)
(5,printUnsignedLine(result)
(6,data)
(7,while(1)
(8,break;)
(9,result)
(10,0)
(11,fscanf (stdin, "%u", &data)
(12,result = data * data)
(13,)
(14,result)
(15,result)
(16,stdin)
(17,"%u")
(18,1)
(19,1)
(20,data)
(21,RET)
(22,break;)
(23,)
(24,data)
(25,&data)
(26,)
(27,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^