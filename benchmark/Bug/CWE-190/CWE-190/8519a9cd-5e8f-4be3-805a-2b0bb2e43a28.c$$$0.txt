-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,42,46,48,52,53,57,59
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
39,40
39,41
50,51
50,52
-----guardedBy-----
41,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_06_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(11,23,0)
(31,3,0)
(15,6,0)
(24,25,0)
(21,5,0)
(26,12,0)
(9,25,0)
(19,16,0)
(3,12,0)
(24,9,0)
(3,9,0)
(33,5,0)
(10,11,0)
(9,3,0)
(1,12,0)
(13,24,0)
(4,16,0)
(14,23,0)
(12,16,0)
(22,11,0)
(27,16,0)
(29,3,0)
(17,32,0)
(11,0,0)
(8,6,0)
(28,9,0)
(2,18,0)
(23,11,0)
(30,18,0)
(20,25,0)
(23,12,0)
(5,12,0)
(13,9,1)
(9,3,1)
(10,22,1)
(7,24,1)
(8,15,1)
(22,6,1)
(18,30,1)
(29,28,1)
(14,10,1)
(12,26,1)
(3,31,1)
(2,11,1)
(23,12,1)
(15,12,1)
(30,2,1)
(24,9,1)
(26,1,1)
(11,23,1)
(5,33,1)
(6,8,1)
(7,18,1)
(21,18,1)
(2,6,1)
(23,14,1)
(7,5,1)
(31,29,1)
(28,5,1)
(3,12,1)
(33,21,1)
(5,12,1)
(24,13,1)
(9,5,2)
(33,18,2)
(3,12,2)
(11,23,2)
(21,18,2)
(23,6,2)
(5,18,2)
(24,5,2)
(28,5,2)
(9,3,2)
(31,5,2)
(10,6,2)
(5,12,2)
(14,6,2)
(13,5,2)
(22,6,2)
(23,12,2)
(11,6,2)
(24,9,2)
(29,5,2)
(3,5,2)
-----------------------------------
(0,)
(1,data)
(2,STATIC_CONST_FIVE)
(3,data * 2)
(4,data)
(5,data > 0)
(6,STATIC_CONST_FIVE==5)
(7,RET)
(8,5)
(9,result = data * 2)
(10,"%c")
(11,fscanf (stdin, "%c", &data)
(12,data = \\\' \\\')
(13,result)
(14,data)
(15,STATIC_CONST_FIVE)
(16,)
(17,if(data > 0)
(18,STATIC_CONST_FIVE==5)
(19,if(STATIC_CONST_FIVE==5)
(20,result)
(21,data)
(22,stdin)
(23,&data)
(24,printHexCharLine(result)
(25,)
(26,\\\' \\\')
(27,if(STATIC_CONST_FIVE==5)
(28,result)
(29,data)
(30,5)
(31,2)
(32,)
(33,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^