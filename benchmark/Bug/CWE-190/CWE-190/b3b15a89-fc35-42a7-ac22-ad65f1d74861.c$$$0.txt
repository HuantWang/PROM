-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_01_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,35,37,41,43
-----computeFrom-----
12,13
12,14
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_01_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_square_01_bad()
CWE190_Integer_Overflow__char_fscanf_square_01_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,2,0)
(13,18,0)
(12,5,0)
(2,4,0)
(12,13,0)
(16,13,0)
(5,4,0)
(19,13,0)
(17,1,0)
(14,18,0)
(6,5,0)
(3,1,0)
(9,2,0)
(10,5,0)
(5,12,0)
(2,1,0)
(1,18,0)
(19,12,0)
(0,12,0)
(15,4,0)
(7,19,0)
(8,4,0)
(4,18,0)
(12,5,1)
(6,10,1)
(11,19,1)
(2,9,1)
(0,1,1)
(4,15,1)
(19,12,1)
(7,12,1)
(3,4,1)
(2,4,1)
(17,3,1)
(10,0,1)
(9,17,1)
(5,6,1)
(15,8,1)
(1,2,1)
(19,7,1)
(5,4,1)
(2,4,2)
(1,2,2)
(19,12,2)
(5,4,2)
(12,5,2)
-----------------------------------
(0,result)
(1,fscanf (stdin, "%c", &data)
(2,&data)
(3,stdin)
(4,data = \\\' \\\')
(5,data * data)
(6,data)
(7,result)
(8,data)
(9,data)
(10,data)
(11,RET)
(12,result = data * data)
(13,)
(14,data)
(15,\\\' \\\')
(16,result)
(17,"%c")
(18,)
(19,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^