-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
27,28
28,29
28,30
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,8,10,14,15,17,22,24,26,31,33,37,39,43,45
-----computeFrom-----
12,13
12,14
20,21
20,22
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_02_bad()
CWE190_Integer_Overflow__char_max_square_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,19,0)
(15,19,0)
(11,1,0)
(18,9,0)
(4,16,0)
(19,5,0)
(16,19,0)
(21,2,0)
(0,2,0)
(12,20,0)
(20,1,0)
(13,1,0)
(20,16,0)
(16,9,0)
(13,20,0)
(1,6,0)
(17,9,0)
(9,2,0)
(16,20,0)
(10,16,0)
(7,13,0)
(14,2,0)
(16,9,1)
(19,15,1)
(12,23,1)
(16,4,1)
(3,13,1)
(7,20,1)
(13,7,1)
(8,9,1)
(13,20,1)
(16,19,1)
(18,17,1)
(9,18,1)
(15,24,1)
(23,19,1)
(23,8,1)
(24,8,1)
(3,23,1)
(10,12,1)
(20,16,1)
(4,10,1)
(4,23,2)
(16,23,2)
(20,23,2)
(13,20,2)
(19,8,2)
(16,19,2)
(7,23,2)
(12,23,2)
(24,8,2)
(16,9,2)
(10,23,2)
(13,23,2)
(15,8,2)
(20,16,2)
-----------------------------------
(0,if(1)
(1,)
(2,)
(3,RET)
(4,data)
(5,)
(6,)
(7,result)
(8,1)
(9,data = \' \')
(10,data)
(11,result)
(12,result)
(13,printHexCharLine(result)
(14,if(1)
(15,CHAR_MAX)
(16,data * data)
(17,data)
(18,' ')
(19,data = CHAR_MAX)
(20,result = data * data)
(21,data)
(22,data = ' ')
(23,1)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^