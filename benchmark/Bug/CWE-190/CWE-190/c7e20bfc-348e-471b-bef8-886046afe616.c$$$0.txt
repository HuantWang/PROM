-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,49,53,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_fscanf_square_15_bad()
CWE190_Integer_Overflow__char_fscanf_square_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(10,1,0)
(31,1,0)
(26,19,0)
(35,31,0)
(16,25,0)
(18,32,0)
(28,19,0)
(3,1,0)
(27,14,0)
(2,31,0)
(19,26,0)
(0,3,0)
(11,1,0)
(15,26,0)
(26,20,0)
(24,34,0)
(9,32,0)
(34,14,0)
(4,1,0)
(29,25,0)
(17,25,0)
(14,32,0)
(21,32,0)
(30,16,0)
(37,1,0)
(31,34,0)
(19,14,0)
(22,5,0)
(34,31,0)
(6,25,0)
(20,25,0)
(7,14,0)
(5,20,0)
(23,20,0)
(12,19,0)
(5,26,0)
(13,25,0)
(5,26,1)
(34,24,1)
(14,7,1)
(34,14,1)
(24,2,1)
(22,26,1)
(19,14,1)
(2,35,1)
(15,8,1)
(8,11,1)
(3,0,1)
(19,28,1)
(12,15,1)
(29,16,1)
(35,33,1)
(4,3,1)
(28,12,1)
(33,14,1)
(36,29,1)
(8,4,1)
(36,17,1)
(7,27,1)
(31,34,1)
(30,8,1)
(17,5,1)
(11,31,1)
(16,30,1)
(0,33,1)
(26,19,1)
(5,22,1)
(5,8,2)
(15,8,2)
(24,33,2)
(26,19,2)
(34,14,2)
(2,33,2)
(22,8,2)
(26,8,2)
(30,8,2)
(17,8,2)
(34,33,2)
(4,33,2)
(12,8,2)
(28,8,2)
(3,33,2)
(31,33,2)
(16,8,2)
(29,8,2)
(0,33,2)
(35,33,2)
(19,14,2)
(19,8,2)
(31,34,2)
(5,26,2)
(11,33,2)
-----------------------------------
(0,"Benign, fixed string")
(1,)
(2,"%c")
(3,printLine("Benign, fixed string")
(4,break;)
(5,printHexCharLine(result)
(6,default:)
(7,\\\' \\\')
(8,7)
(9,data)
(10,case 6:)
(11,break;)
(12,data)
(13,case 7:)
(14,data = \\\' \\\')
(15,result)
(16,printLine("Benign, fixed string")
(17,break;)
(18,switch(7)
(19,data * data)
(20,)
(21,switch(6)
(22,result)
(23,result)
(24,data)
(25,)
(26,result = data * data)
(27,data)
(28,data)
(29,break;)
(30,"Benign, fixed string")
(31,fscanf (stdin, "%c", &data)
(32,)
(33,6)
(34,&data)
(35,stdin)
(36,RET)
(37,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^