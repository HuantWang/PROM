-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,65,69,71,75,76,80,82
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
62,63
62,64
73,74
73,75
-----guardedBy-----
64,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_17_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(11,2,0)
(43,42,0)
(0,15,0)
(18,44,0)
(4,30,0)
(17,3,0)
(33,35,0)
(44,6,0)
(15,35,0)
(43,27,0)
(22,13,0)
(24,32,0)
(25,0,0)
(31,44,0)
(39,19,0)
(36,13,0)
(16,15,0)
(5,35,0)
(40,15,0)
(14,40,0)
(41,30,0)
(8,15,0)
(8,44,0)
(12,35,0)
(26,40,0)
(23,43,0)
(42,27,0)
(1,15,0)
(29,42,0)
(9,8,0)
(0,42,0)
(45,35,0)
(3,30,0)
(28,13,0)
(42,0,0)
(2,13,0)
(20,27,0)
(37,28,0)
(38,0,0)
(7,3,0)
(44,8,0)
(32,30,0)
(10,2,0)
(21,35,0)
(32,30,1)
(30,4,1)
(17,7,1)
(2,11,1)
(32,24,1)
(10,28,1)
(23,42,1)
(8,15,1)
(44,8,1)
(40,14,1)
(41,2,1)
(40,15,1)
(1,16,1)
(8,9,1)
(37,44,1)
(42,0,1)
(13,36,1)
(28,13,1)
(34,3,1)
(25,29,1)
(29,40,1)
(24,43,1)
(11,10,1)
(10,13,1)
(0,15,1)
(2,13,1)
(24,40,1)
(7,30,1)
(31,18,1)
(28,37,1)
(38,25,1)
(3,30,1)
(26,3,1)
(7,32,1)
(18,2,1)
(3,17,1)
(43,42,1)
(14,26,1)
(36,22,1)
(22,15,1)
(43,23,1)
(15,1,1)
(4,41,1)
(9,31,1)
(0,38,1)
(29,40,2)
(43,42,2)
(17,3,2)
(9,2,2)
(10,2,2)
(42,40,2)
(32,30,2)
(11,2,2)
(40,3,2)
(2,2,2)
(2,13,2)
(23,40,2)
(32,3,2)
(7,3,2)
(44,2,2)
(44,8,2)
(37,2,2)
(43,40,2)
(31,2,2)
(8,2,2)
(14,3,2)
(18,2,2)
(0,40,2)
(3,3,2)
(38,40,2)
(0,15,2)
(8,15,2)
(42,0,2)
(26,3,2)
(3,30,2)
(40,15,2)
(24,3,2)
(25,40,2)
(28,2,2)
(28,13,2)
-----------------------------------
(0,data * 2)
(1,\\\' \\\')
(2,i < 1)
(3,j < 1)
(4,0)
(5,data)
(6,)
(7,j)
(8,&data)
(9,data)
(10,i)
(11,1)
(12,j)
(13,i = 0)
(14,0)
(15,data = \\\' \\\')
(16,data)
(17,1)
(18,stdin)
(19,)
(20,result)
(21,for(i = 0; i < 1; i++)
(22,i)
(23,result)
(24,j)
(25,data)
(26,data)
(27,)
(28,i++)
(29,result)
(30,j = 0)
(31,"%c")
(32,j++)
(33,for(j = 0; j < 1; j++)
(34,RET)
(35,)
(36,0)
(37,i)
(38,2)
(39,if(data > 0)
(40,data > 0)
(41,j)
(42,result = data * 2)
(43,printHexCharLine(result)
(44,fscanf (stdin, "%c", &data)
(45,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^