-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_10_bad()
{
    short data;
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_10_bad(){    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_10_bad()
CWE190_Integer_Overflow__short_fscanf_square_10_bad
{    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,23,0)
(7,25,0)
(9,15,0)
(1,18,0)
(19,0,0)
(21,5,0)
(6,18,0)
(4,23,0)
(15,10,0)
(23,5,0)
(8,23,0)
(25,9,0)
(18,23,0)
(17,4,0)
(4,0,0)
(18,9,0)
(20,5,0)
(12,15,0)
(0,4,0)
(3,5,0)
(0,14,0)
(9,18,0)
(2,0,0)
(25,15,0)
(13,9,0)
(25,9,1)
(24,23,1)
(6,1,1)
(19,2,1)
(11,24,1)
(16,25,1)
(17,19,1)
(8,22,1)
(16,11,1)
(13,11,1)
(0,4,1)
(9,18,1)
(7,9,1)
(18,6,1)
(2,24,1)
(25,7,1)
(4,17,1)
(18,23,1)
(23,8,1)
(11,0,1)
(4,23,1)
(1,13,1)
(1,11,2)
(18,11,2)
(0,4,2)
(9,18,2)
(2,24,2)
(18,23,2)
(25,9,2)
(7,11,2)
(0,24,2)
(19,24,2)
(25,11,2)
(13,11,2)
(6,11,2)
(17,24,2)
(4,24,2)
(4,23,2)
(9,11,2)
-----------------------------------
(0,fscanf (stdin, "%hd", &data)
(1,data)
(2,stdin)
(3,data)
(4,&data)
(5,)
(6,data)
(7,result)
(8,0)
(9,result = data * data)
(10,)
(11,globalTrue)
(12,result)
(13,result)
(14,)
(15,)
(16,RET)
(17,data)
(18,data * data)
(19,"%hd")
(20,if(globalTrue)
(21,if(globalTrue)
(22,data)
(23,data = 0)
(24,globalTrue)
(25,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^