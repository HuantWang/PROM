-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_preinc_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        int result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
40,43
41,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,44,47,49,52,56,58,59,60,64,65,66
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_preinc_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_max_preinc_15_bad()
CWE190_Integer_Overflow__int_max_preinc_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(29,19,0)
(1,26,0)
(7,4,0)
(17,12,0)
(35,19,0)
(12,24,0)
(11,27,0)
(6,4,0)
(31,30,0)
(26,12,0)
(15,0,0)
(32,27,0)
(8,6,0)
(13,4,0)
(28,19,0)
(18,30,0)
(20,24,0)
(25,24,0)
(23,30,0)
(30,19,0)
(31,27,0)
(34,4,0)
(0,19,0)
(31,12,0)
(33,24,0)
(27,4,0)
(22,19,0)
(2,4,0)
(11,26,0)
(26,27,0)
(10,11,0)
(5,31,0)
(9,26,0)
(26,30,0)
(16,12,0)
(21,35,1)
(10,26,1)
(18,3,1)
(15,3,1)
(0,15,1)
(12,16,1)
(1,31,1)
(31,30,1)
(14,13,1)
(9,1,1)
(11,10,1)
(35,0,1)
(31,12,1)
(26,9,1)
(8,21,1)
(30,23,1)
(23,18,1)
(26,12,1)
(14,34,1)
(6,8,1)
(34,11,1)
(26,30,1)
(22,30,1)
(3,12,1)
(16,17,1)
(21,22,1)
(31,5,1)
(13,6,1)
(5,21,1)
(11,26,1)
(10,21,2)
(8,21,2)
(31,30,2)
(5,21,2)
(26,21,2)
(26,12,2)
(26,30,2)
(22,3,2)
(11,21,2)
(31,21,2)
(6,21,2)
(31,12,2)
(35,3,2)
(1,21,2)
(15,3,2)
(11,26,2)
(34,21,2)
(30,3,2)
(18,3,2)
(9,21,2)
(13,21,2)
(0,3,2)
(23,3,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,result)
(2,case 7:)
(3,6)
(4,)
(5,data)
(6,printLine("Benign, fixed string")
(7,default:)
(8,"Benign, fixed string")
(9,data)
(10,result)
(11,printIntLine(result)
(12,data = 0)
(13,break;)
(14,RET)
(15,"Benign, fixed string")
(16,0)
(17,data)
(18,data)
(19,)
(20,data)
(21,7)
(22,break;)
(23,INT_MAX)
(24,)
(25,switch(6)
(26,result = data)
(27,)
(28,default:)
(29,case 6:)
(30,data = INT_MAX)
(31,++data)
(32,result)
(33,switch(7)
(34,break;)
(35,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^