-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_10_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,62,67,69,73,75,79,81
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
71,72
71,73
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_10_bad(){    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_10_bad()
CWE190_Integer_Overflow__int_fgets_square_10_bad
{    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(31,0,0)
(39,1,0)
(1,39,0)
(37,38,0)
(27,39,0)
(8,0,0)
(6,24,0)
(9,19,0)
(33,0,0)
(11,7,0)
(13,24,0)
(32,12,0)
(23,13,0)
(29,5,0)
(0,4,0)
(18,19,0)
(14,26,0)
(12,10,0)
(17,4,0)
(15,31,0)
(31,12,0)
(20,13,0)
(39,7,0)
(38,1,0)
(7,19,0)
(4,35,0)
(16,13,0)
(22,7,0)
(24,13,0)
(25,4,0)
(13,0,0)
(5,28,0)
(1,14,0)
(21,14,0)
(12,31,0)
(38,14,0)
(39,12,0)
(3,39,0)
(40,19,0)
(34,1,0)
(12,31,1)
(24,6,1)
(8,33,1)
(34,30,1)
(36,38,1)
(31,15,1)
(24,13,1)
(30,12,1)
(38,1,1)
(39,7,1)
(32,24,1)
(0,8,1)
(27,3,1)
(20,16,1)
(3,34,1)
(30,5,1)
(36,30,1)
(33,2,1)
(13,20,1)
(5,29,1)
(39,27,1)
(31,0,1)
(15,32,1)
(30,2,1)
(22,11,1)
(23,0,1)
(38,37,1)
(16,23,1)
(6,13,1)
(29,24,1)
(2,7,1)
(39,12,1)
(7,22,1)
(13,0,1)
(37,1,1)
(1,39,1)
(8,2,2)
(33,2,2)
(32,24,2)
(12,31,2)
(27,30,2)
(37,30,2)
(16,2,2)
(13,2,2)
(15,24,2)
(0,2,2)
(38,1,2)
(12,24,2)
(38,30,2)
(6,2,2)
(13,0,2)
(1,39,2)
(24,2,2)
(39,30,2)
(29,24,2)
(31,0,2)
(20,2,2)
(3,30,2)
(31,24,2)
(5,24,2)
(23,2,2)
(1,30,2)
(39,12,2)
(24,13,2)
(39,7,2)
(34,30,2)
-----------------------------------
(0,inputBuffer[CHAR_ARRAY_SIZE] = "")
(1,result = data * data)
(2,globalTrue)
(3,data)
(4,)
(5,printLine("fgets()
(6,NULL)
(7,data = 0)
(8,"")
(9,data)
(10,)
(11,data)
(12,data = atoi(inputBuffer)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,)
(15,inputBuffer)
(16,CHAR_ARRAY_SIZE)
(17,inputBuffer)
(18,if(globalTrue)
(19,)
(20,stdin)
(21,result)
(22,0)
(23,inputBuffer)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,)
(27,data)
(28,)
(29,"fgets()
(30,globalTrue)
(31,atoi(inputBuffer)
(32,data)
(33,inputBuffer)
(34,result)
(35,)
(36,RET)
(37,result)
(38,printIntLine(result)
(39,data * data)
(40,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^