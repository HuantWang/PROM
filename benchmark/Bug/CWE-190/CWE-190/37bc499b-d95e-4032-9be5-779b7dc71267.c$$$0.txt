-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_connect_socket_preinc_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
46,49
46,50
46,51
46,52
47,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
67,68
68,69
68,70
70,71
70,72
72,73
73,74
75,76
75,77
76,77
76,78
76,79
76,80
76,81
76,82
76,83
76,84
76,85
76,86
76,87
77,78
78,79
78,80
79,80
81,82
81,83
81,84
81,85
82,83
84,85
86,87
88,89
90,91
90,92
91,92
91,93
92,93
94,95
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
103,104
106,107
107,108
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
118,119
119,120
119,121
120,121
120,122
121,122
121,123
122,123
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
133,135
134,135
137,138
137,139
138,139
140,141
142,143
142,144
143,144
143,145
144,145
144,146
144,147
144,148
145,146
147,148
149,150
149,151
150,151
150,152
151,152
153,154
155,156
156,157
158,159
159,160
160,161
162,163
164,165
166,167
167,168
167,169
168,169
170,171
170,172
170,173
170,174
170,175
171,172
173,174
175,176
177,178
177,179
178,179
182,183
182,184
183,184
183,185
184,185
184,186
185,186
187,188
189,190
189,191
190,191
193,194
195,196
196,197
196,198
197,198
197,199
198,199
200,201
203,204
204,205
204,206
205,206
207,208
207,209
208,209
210,211
213,214
213,215
214,215
214,216
215,216
217,218
219,220
220,221
221,222
221,223
222,223
224,225
226,227
227,228
227,229
228,229
229,230
231,232
233,234
233,235
234,235
235,236
235,237
237,238
237,239
239,240
240,241
241,242
243,244
243,245
243,246
244,245
245,246
246,247
248,249
249,250
249,251
251,252
251,253
253,254
254,255
256,257
257,258
257,259
258,259
260,261
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,55,57,61,63,66,69,71,74,80,83,85,87,89,93,95,97,101,104,105,109,114,115,117,123,124,125,128,130,135,136,139,141,146,148,152,154,157,161,163,165,169,172,174,176,179,180,181,186,188,191,192,194,199,201,202,206,209,211,212,216,218,223,225,230,232,236,238,242,247,250,252,255,259,261
-----computeFrom-----
32,33
32,34
78,79
78,80
91,92
91,93
111,112
111,113
119,120
119,121
132,133
132,134
143,144
143,145
167,168
167,169
177,178
177,179
183,184
183,185
184,185
184,186
189,190
189,191
196,197
196,198
204,205
204,206
214,215
214,216
227,228
227,229
-----guardedBy-----
216,225
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_connect_socket_preinc_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_connect_socket_preinc_32_bad()
CWE190_Integer_Overflow__int_connect_socket_preinc_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(129,14,0)
(58,149,0)
(124,60,0)
(160,43,0)
(93,46,0)
(35,34,0)
(18,121,0)
(98,50,0)
(13,128,0)
(74,23,0)
(76,133,0)
(8,11,0)
(83,107,0)
(29,32,0)
(136,66,0)
(107,92,0)
(23,50,0)
(72,43,0)
(24,161,0)
(9,68,0)
(14,140,0)
(25,60,0)
(94,65,0)
(41,2,0)
(0,53,0)
(5,68,0)
(107,87,0)
(43,9,0)
(105,9,0)
(64,50,0)
(43,160,0)
(150,13,0)
(118,139,0)
(13,117,0)
(160,11,0)
(80,156,0)
(91,61,0)
(141,23,0)
(34,106,0)
(149,140,0)
(158,53,0)
(117,13,0)
(26,152,0)
(146,81,0)
(95,135,0)
(125,36,0)
(53,9,0)
(157,60,0)
(66,68,0)
(133,84,0)
(79,68,0)
(132,77,0)
(113,60,0)
(134,49,0)
(161,46,0)
(65,47,0)
(77,2,0)
(147,76,0)
(153,14,0)
(85,128,0)
(142,11,0)
(2,41,0)
(73,133,0)
(110,43,0)
(48,84,0)
(102,50,0)
(114,66,0)
(19,152,0)
(40,148,0)
(106,34,0)
(123,2,0)
(86,87,0)
(13,150,0)
(148,68,0)
(28,41,0)
(75,159,0)
(159,156,0)
(90,47,0)
(154,50,0)
(13,87,0)
(54,153,0)
(21,6,0)
(11,9,0)
(152,106,0)
(47,65,0)
(6,68,0)
(133,73,0)
(144,68,0)
(115,76,0)
(56,107,0)
(111,86,0)
(93,81,0)
(55,81,0)
(39,46,0)
(133,76,0)
(4,87,0)
(136,33,0)
(17,25,0)
(92,50,0)
(2,60,0)
(121,60,0)
(104,114,0)
(116,53,0)
(100,50,0)
(148,139,0)
(89,124,0)
(9,53,0)
(97,86,0)
(96,54,0)
(130,92,0)
(49,63,0)
(46,77,0)
(128,85,0)
(70,155,0)
(128,131,0)
(140,149,0)
(62,60,0)
(22,6,0)
(138,140,0)
(140,60,0)
(128,13,0)
(7,137,0)
(42,55,0)
(108,32,0)
(52,73,0)
(49,87,0)
(11,160,0)
(38,53,0)
(87,86,0)
(67,33,0)
(3,50,0)
(143,50,0)
(59,86,0)
(87,68,0)
(37,50,0)
(69,131,0)
(153,25,0)
(131,128,0)
(16,103,0)
(22,9,0)
(112,159,0)
(15,71,0)
(65,68,0)
(82,135,0)
(135,68,0)
(27,68,0)
(33,136,0)
(126,153,0)
(14,153,0)
(50,25,0)
(32,87,0)
(55,161,0)
(119,150,0)
(46,124,0)
(137,54,0)
(156,68,0)
(145,136,0)
(120,93,0)
(127,22,0)
(101,1,0)
(84,133,0)
(139,148,0)
(54,65,0)
(57,38,0)
(137,140,0)
(78,117,0)
(106,68,0)
(71,148,0)
(148,71,0)
(109,38,0)
(122,121,0)
(66,114,0)
(161,81,0)
(53,87,0)
(45,92,0)
(53,38,0)
(20,33,0)
(31,22,0)
(12,50,0)
(77,46,0)
(88,13,0)
(151,161,0)
(49,92,0)
(81,124,0)
(54,25,0)
(46,77,1)
(58,138,1)
(110,72,1)
(114,104,1)
(56,70,1)
(107,83,1)
(86,97,1)
(161,151,1)
(77,2,1)
(76,115,1)
(66,114,1)
(54,65,1)
(136,33,1)
(132,39,1)
(122,18,1)
(87,86,1)
(70,84,1)
(159,112,1)
(44,65,1)
(39,54,1)
(32,29,1)
(51,49,1)
(106,34,1)
(53,38,1)
(96,137,1)
(8,142,1)
(150,119,1)
(147,44,1)
(34,35,1)
(65,47,1)
(145,33,1)
(129,126,1)
(21,22,1)
(97,111,1)
(57,109,1)
(117,78,1)
(59,4,1)
(13,150,1)
(160,43,1)
(51,107,1)
(84,133,1)
(7,101,1)
(141,74,1)
(148,139,1)
(72,9,1)
(7,51,1)
(24,93,1)
(11,8,1)
(111,59,1)
(13,87,1)
(56,44,1)
(125,32,1)
(54,153,1)
(84,48,1)
(83,56,1)
(152,26,1)
(108,87,1)
(149,58,1)
(94,6,1)
(130,45,1)
(31,127,1)
(56,91,1)
(73,52,1)
(35,152,1)
(95,82,1)
(148,71,1)
(135,95,1)
(117,13,1)
(127,160,1)
(49,92,1)
(107,92,1)
(45,23,1)
(11,9,1)
(40,139,1)
(56,16,1)
(22,31,1)
(56,125,1)
(128,85,1)
(33,67,1)
(82,84,1)
(120,46,1)
(54,96,1)
(140,149,1)
(14,129,1)
(137,140,1)
(158,0,1)
(80,159,1)
(137,7,1)
(93,46,1)
(15,40,1)
(78,13,1)
(55,161,1)
(92,130,1)
(105,117,1)
(18,2,1)
(147,92,1)
(53,116,1)
(55,42,1)
(69,88,1)
(23,141,1)
(49,87,1)
(71,15,1)
(4,135,1)
(26,19,1)
(47,90,1)
(67,20,1)
(32,87,1)
(19,66,1)
(48,133,1)
(119,128,1)
(13,128,1)
(90,94,1)
(53,87,1)
(42,161,1)
(74,153,1)
(101,51,1)
(116,38,1)
(0,105,1)
(107,87,1)
(136,145,1)
(131,69,1)
(121,122,1)
(28,123,1)
(91,117,1)
(75,148,1)
(151,24,1)
(77,132,1)
(93,120,1)
(153,14,1)
(20,156,1)
(133,73,1)
(29,108,1)
(9,53,1)
(43,9,1)
(160,11,1)
(142,43,1)
(10,55,1)
(115,147,1)
(16,160,1)
(52,76,1)
(88,106,1)
(139,118,1)
(118,32,1)
(22,9,1)
(49,134,1)
(41,28,1)
(112,75,1)
(161,46,1)
(128,131,1)
(109,158,1)
(14,140,1)
(38,57,1)
(104,136,1)
(156,80,1)
(133,76,1)
(134,107,1)
(6,21,1)
(123,140,1)
(126,121,1)
(43,110,1)
(2,41,1)
(160,43,2)
(158,117,2)
(14,140,2)
(161,46,2)
(40,32,2)
(137,140,2)
(47,160,2)
(70,84,2)
(106,32,2)
(84,44,2)
(0,117,2)
(142,43,2)
(133,76,2)
(53,117,2)
(109,117,2)
(145,32,2)
(46,77,2)
(35,32,2)
(13,32,2)
(110,117,2)
(33,32,2)
(20,32,2)
(88,32,2)
(87,84,2)
(77,2,2)
(53,38,2)
(153,14,2)
(15,32,2)
(106,34,2)
(125,32,2)
(136,32,2)
(107,87,2)
(128,85,2)
(140,149,2)
(55,161,2)
(52,44,2)
(4,84,2)
(148,32,2)
(71,32,2)
(91,117,2)
(73,44,2)
(44,160,2)
(159,32,2)
(49,107,2)
(82,84,2)
(72,117,2)
(21,160,2)
(75,32,2)
(43,117,2)
(133,44,2)
(87,86,2)
(118,32,2)
(13,128,2)
(67,32,2)
(84,133,2)
(160,117,2)
(29,84,2)
(114,32,2)
(147,44,2)
(112,32,2)
(66,32,2)
(139,32,2)
(38,117,2)
(93,46,2)
(32,84,2)
(66,114,2)
(43,9,2)
(104,32,2)
(6,160,2)
(57,117,2)
(160,11,2)
(54,65,2)
(54,153,2)
(69,32,2)
(13,150,2)
(9,117,2)
(131,32,2)
(148,139,2)
(49,87,2)
(19,32,2)
(127,160,2)
(115,44,2)
(11,43,2)
(2,41,2)
(34,32,2)
(76,44,2)
(134,107,2)
(116,117,2)
(86,84,2)
(22,160,2)
(94,160,2)
(108,84,2)
(48,44,2)
(31,160,2)
(95,84,2)
(9,53,2)
(128,131,2)
(49,92,2)
(119,32,2)
(136,33,2)
(156,32,2)
(97,84,2)
(13,87,2)
(107,92,2)
(105,117,2)
(111,84,2)
(65,160,2)
(101,51,2)
(11,9,2)
(117,13,2)
(133,73,2)
(117,32,2)
(16,160,2)
(152,32,2)
(78,32,2)
(135,84,2)
(128,32,2)
(32,87,2)
(150,32,2)
(26,32,2)
(8,43,2)
(53,87,2)
(59,84,2)
(148,71,2)
(90,160,2)
(65,47,2)
(80,32,2)
(22,9,2)
-----------------------------------
(0,connectSocket)
(1,)
(2,*dataPtr2 = &data)
(3,service)
(4,connectSocket)
(5,if (recvResult == SOCKET_ERROR || recvResult == 0)
(6,inputBuffer[recvResult] = \'\\\\0\')
(7,dataPtr1)
(8,0)
(9,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(10,RET)
(11,recvResult == 0)
(12,if (wsaDataInit)
(13,connect(connectSocket, (struct sockaddr*)
(14,*dataPtr1)
(15,service)
(16,break;)
(17,data)
(18,data)
(19,service)
(20,service)
(21,\'\\\\0\')
(22,inputBuffer[recvResult])
(23,wsaDataInit = 0)
(24,result)
(25,)
(26,sin_port)
(27,if (connect(connectSocket, (struct sockaddr*)
(28,data)
(29,INVALID_SOCKET)
(30,inputBuffer[recvResult] = '\\\\0')
(31,recvResult)
(32,connectSocket == INVALID_SOCKET)
(33,service.sin_addr)
(34,htons(TCP_PORT)
(35,TCP_PORT)
(36,)
(37,wsaData)
(38,CHAR_ARRAY_SIZE - 1)
(39,data)
(40,0)
(41,&data)
(42,result)
(43,recvResult == SOCKET_ERROR)
(44,0)
(45,connectSocket)
(46,data = *dataPtr2)
(47,atoi(inputBuffer)
(48,NO_ERROR)
(49,CLOSE_SOCKET(connectSocket)
(50,)
(51,wsaDataInit)
(52,wsaData)
(53,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(54,*dataPtr1 = data)
(55,printIntLine(result)
(56,connectSocket)
(57,1)
(58,data)
(59,AF_INET)
(60,)
(61,)
(62,data)
(63,)
(64,recvResult)
(65,data = atoi(inputBuffer)
(66,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(67,sin_addr)
(68,)
(69,service)
(70,break;)
(71,sizeof(service)
(72,recvResult)
(73,&wsaData)
(74,wsaDataInit)
(75,service)
(76,MAKEWORD(2,2)
(77,*dataPtr2)
(78,SOCKET_ERROR)
(79,if (WSAStartup(MAKEWORD(2,2)
(80,AF_INET)
(81,)
(82,wsaDataInit)
(83,INVALID_SOCKET)
(84,WSAStartup(MAKEWORD(2,2)
(85,struct sockaddr*)
(86,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(87,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(88,connectSocket)
(89,data)
(90,inputBuffer)
(91,break;)
(92,connectSocket = INVALID_SOCKET)
(93,++data)
(94,data)
(95,1)
(96,data)
(97,IPPROTO_TCP)
(98,connectSocket)
(99,'\\\\0')
(100,do)
(101,WSACleanup()
(102,wsaDataInit)
(103,)
(104,IP_ADDRESS)
(105,recvResult)
(106,service.sin_port = htons(TCP_PORT)
(107,connectSocket != INVALID_SOCKET)
(108,connectSocket)
(109,CHAR_ARRAY_SIZE)
(110,SOCKET_ERROR)
(111,SOCK_STREAM)
(112,sin_family)
(113,dataPtr1)
(114,inet_addr(IP_ADDRESS)
(115,2)
(116,0)
(117,connect(connectSocket, (struct sockaddr*)
(118,service)
(119,service)
(120,data)
(121,data = 0)
(122,0)
(123,dataPtr2)
(124,)
(125,break;)
(126,data)
(127,inputBuffer)
(128,(struct sockaddr*)
(129,dataPtr1)
(130,INVALID_SOCKET)
(131,&service)
(132,dataPtr2)
(133,WSAStartup(MAKEWORD(2,2)
(134,connectSocket)
(135,wsaDataInit = 1)
(136,service.sin_addr.s_addr)
(137,*dataPtr1)
(138,dataPtr1)
(139,&service)
(140,*dataPtr1 = &data)
(141,0)
(142,recvResult)
(143,if (connectSocket != INVALID_SOCKET)
(144,if (connectSocket == INVALID_SOCKET)
(145,s_addr)
(146,result)
(147,2)
(148,memset(&service, 0, sizeof(service)
(149,&data)
(150,sizeof(service)
(151,data)
(152,service.sin_port)
(153,data = *dataPtr1)
(154,inputBuffer)
(155,)
(156,service.sin_family = AF_INET)
(157,dataPtr2)
(158,inputBuffer)
(159,service.sin_family)
(160,recvResult == SOCKET_ERROR || recvResult == 0)
(161,result = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^