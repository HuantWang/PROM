-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
29,30
29,31
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_02_bad()
CWE190_Integer_Overflow__char_fscanf_square_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,24,0)
(1,19,0)
(9,20,0)
(0,4,0)
(14,11,0)
(14,3,0)
(10,14,0)
(20,7,0)
(24,19,0)
(13,4,0)
(12,3,0)
(15,14,0)
(2,3,0)
(20,6,0)
(22,11,0)
(7,3,0)
(11,14,0)
(17,20,0)
(7,20,0)
(24,11,0)
(18,7,0)
(11,19,0)
(3,4,0)
(25,4,0)
(19,23,0)
(11,14,1)
(8,11,1)
(17,5,1)
(20,7,1)
(18,9,1)
(5,3,1)
(10,22,1)
(2,12,1)
(24,11,1)
(16,20,1)
(14,3,1)
(14,15,1)
(9,17,1)
(7,3,1)
(22,16,1)
(7,18,1)
(21,16,1)
(21,24,1)
(15,10,1)
(16,5,1)
(24,8,1)
(3,2,1)
(22,16,2)
(20,7,2)
(15,16,2)
(8,16,2)
(11,14,2)
(20,5,2)
(18,5,2)
(14,16,2)
(10,16,2)
(7,5,2)
(11,16,2)
(14,3,2)
(24,16,2)
(17,5,2)
(9,5,2)
(7,3,2)
(24,11,2)
-----------------------------------
(0,if(1)
(1,result)
(2,\\\' \\\')
(3,data = \\\' \\\')
(4,)
(5,1)
(6,)
(7,&data)
(8,result)
(9,"%c")
(10,data)
(11,result = data * data)
(12,data)
(13,data)
(14,data * data)
(15,data)
(16,1)
(17,stdin)
(18,data)
(19,)
(20,fscanf (stdin, "%c", &data)
(21,RET)
(22,result)
(23,)
(24,printHexCharLine(result)
(25,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^