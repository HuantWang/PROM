-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_01_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use a random value */
    data = (int64_t)RAND64();
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
        int64_t result = data * 2;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
22,24
23,24
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,9,11,15,16,20,24,25,28,32,33,38,40,44,45,49,51
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
42,43
42,44
-----guardedBy-----
32,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_01_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_01_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_01_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(2,14,0)
(5,16,0)
(11,18,0)
(3,18,0)
(12,10,0)
(10,1,0)
(15,3,0)
(19,16,0)
(7,12,0)
(10,6,0)
(10,12,0)
(12,14,0)
(18,12,0)
(4,14,0)
(9,18,0)
(1,10,0)
(5,3,0)
(20,7,0)
(21,5,0)
(3,16,0)
(18,3,0)
(6,10,0)
(0,12,0)
(17,7,0)
(13,14,0)
(3,18,1)
(12,10,1)
(8,7,1)
(8,5,1)
(21,3,1)
(15,7,1)
(7,12,1)
(5,3,1)
(10,1,1)
(1,0,1)
(20,17,1)
(18,12,1)
(7,20,1)
(5,21,1)
(17,12,1)
(0,2,1)
(9,11,1)
(11,15,1)
(18,9,1)
(10,6,1)
(3,18,2)
(10,6,2)
(10,1,2)
(18,7,2)
(9,7,2)
(5,3,2)
(3,7,2)
(18,12,2)
(11,7,2)
(15,7,2)
(21,7,2)
(7,12,2)
(12,10,2)
(5,7,2)
-----------------------------------
(0,data)
(1,RAND64()
(2,L)
(3,result = data * 2)
(4,data)
(5,printLongLongLine(result)
(6,int64_t)
(7,data > 0)
(8,RET)
(9,2)
(10,(int64_t)
(11,data)
(12,data = (int64_t)
(13,if(data > 0)
(14,)
(15,result)
(16,)
(17,data)
(18,data * 2)
(19,result)
(20,0)
(21,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^