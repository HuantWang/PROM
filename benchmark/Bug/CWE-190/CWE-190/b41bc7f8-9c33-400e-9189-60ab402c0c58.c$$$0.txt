-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,48,52,54,58,59,63,65,66,67,71,72,73
-----computeFrom-----
12,13
12,14
45,46
45,47
56,57
56,58
-----guardedBy-----
47,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(34,3,0)
(36,39,0)
(22,32,0)
(31,8,0)
(21,6,0)
(41,21,0)
(26,3,0)
(0,39,0)
(18,7,0)
(20,39,0)
(8,3,0)
(27,39,0)
(30,6,0)
(17,22,0)
(33,3,0)
(29,3,0)
(38,39,0)
(32,6,0)
(21,36,0)
(36,21,0)
(23,25,0)
(4,6,0)
(5,6,0)
(35,4,0)
(10,25,0)
(6,7,0)
(14,4,0)
(2,36,0)
(19,20,0)
(22,25,0)
(9,7,0)
(1,3,0)
(11,32,0)
(15,39,0)
(13,36,0)
(28,7,0)
(16,10,0)
(32,22,0)
(37,32,0)
(10,22,0)
(12,0,1)
(12,27,1)
(34,10,1)
(35,14,1)
(6,5,1)
(20,19,1)
(14,12,1)
(32,6,1)
(36,21,1)
(4,6,1)
(5,30,1)
(40,26,1)
(16,22,1)
(31,12,1)
(21,41,1)
(22,32,1)
(11,17,1)
(8,31,1)
(4,35,1)
(19,24,1)
(26,8,1)
(10,16,1)
(34,4,1)
(17,4,1)
(24,6,1)
(27,36,1)
(21,6,1)
(2,13,1)
(13,24,1)
(41,2,1)
(10,22,1)
(32,37,1)
(37,11,1)
(0,20,1)
(40,34,1)
(19,24,2)
(31,12,2)
(4,6,2)
(22,32,2)
(11,4,2)
(32,4,2)
(2,24,2)
(4,12,2)
(36,24,2)
(14,12,2)
(21,24,2)
(0,24,2)
(22,4,2)
(27,24,2)
(21,6,2)
(16,4,2)
(20,24,2)
(34,12,2)
(32,6,2)
(26,12,2)
(41,24,2)
(13,24,2)
(10,22,2)
(36,21,2)
(35,12,2)
(17,4,2)
(37,4,2)
(10,4,2)
(8,12,2)
-----------------------------------
(0,break;)
(1,case 7:)
(2,"%u")
(3,)
(4,data > 0)
(5,0)
(6,data = 0)
(7,)
(8,printLine("Benign, fixed string")
(9,data)
(10,printUnsignedLine(result)
(11,data)
(12,7)
(13,stdin)
(14,data)
(15,default:)
(16,result)
(17,result)
(18,switch(7)
(19,"Benign, fixed string")
(20,printLine("Benign, fixed string")
(21,&data)
(22,result = data * 2)
(23,result)
(24,6)
(25,)
(26,break;)
(27,break;)
(28,switch(6)
(29,if(data > 0)
(30,data)
(31,"Benign, fixed string")
(32,data * 2)
(33,default:)
(34,break;)
(35,0)
(36,fscanf (stdin, "%u", &data)
(37,2)
(38,case 6:)
(39,)
(40,RET)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^