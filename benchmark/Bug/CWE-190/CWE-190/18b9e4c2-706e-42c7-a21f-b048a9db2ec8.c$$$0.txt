-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_02_bad()
{
    short data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
29,30
29,31
31,32
32,33
32,34
33,34
33,35
34,35
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,30,35,36,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
33,34
33,35
44,45
44,46
-----guardedBy-----
35,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_02_bad(){    short data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_02_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_02_bad
{    short data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(25,2,0)
(19,23,0)
(15,14,0)
(24,14,0)
(4,21,0)
(14,22,0)
(16,21,0)
(17,5,0)
(17,15,0)
(21,24,0)
(4,23,0)
(13,22,0)
(9,2,0)
(8,22,0)
(6,24,0)
(15,17,0)
(11,14,0)
(27,17,0)
(0,22,0)
(7,17,0)
(2,14,0)
(20,4,0)
(28,15,0)
(10,24,0)
(24,21,0)
(21,23,0)
(1,12,0)
(29,14,0)
(18,14,1)
(25,9,1)
(2,14,1)
(14,11,1)
(9,26,1)
(3,2,1)
(3,4,1)
(21,24,1)
(15,14,1)
(11,29,1)
(3,26,1)
(28,27,1)
(7,18,1)
(16,2,1)
(4,20,1)
(4,21,1)
(6,16,1)
(26,17,1)
(20,21,1)
(10,6,1)
(2,25,1)
(24,10,1)
(27,7,1)
(17,15,1)
(26,18,1)
(24,14,1)
(15,28,1)
(15,14,2)
(15,18,2)
(24,14,2)
(10,2,2)
(28,18,2)
(7,18,2)
(17,15,2)
(24,2,2)
(17,18,2)
(9,26,2)
(20,2,2)
(4,2,2)
(21,24,2)
(4,21,2)
(16,2,2)
(21,2,2)
(27,18,2)
(25,26,2)
(6,2,2)
(2,14,2)
(2,26,2)
-----------------------------------
(0,if(1)
(1,if(data > 0)
(2,data > 0)
(3,RET)
(4,printIntLine(result)
(5,)
(6,data)
(7,stdin)
(8,data)
(9,data)
(10,2)
(11,0)
(12,)
(13,if(1)
(14,data = 0)
(15,&data)
(16,result)
(17,fscanf (stdin, "%hd", &data)
(18,1)
(19,result)
(20,result)
(21,result = data * 2)
(22,)
(23,)
(24,data * 2)
(25,0)
(26,1)
(27,"%hd")
(28,data)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^