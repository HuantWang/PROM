-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_09_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(GLOBAL_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_09_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_09_bad()
CWE190_Integer_Overflow__char_max_multiply_09_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(2,4,0)
(9,22,0)
(21,4,0)
(1,9,0)
(12,4,0)
(11,23,0)
(8,23,0)
(26,22,0)
(19,20,0)
(7,20,0)
(13,23,0)
(3,20,0)
(24,3,0)
(9,20,0)
(3,22,0)
(20,5,0)
(25,21,0)
(28,2,0)
(17,3,0)
(9,21,0)
(2,21,0)
(22,23,0)
(21,9,0)
(10,18,0)
(15,9,0)
(16,22,0)
(0,20,1)
(9,20,1)
(3,17,1)
(24,0,1)
(15,25,1)
(6,22,1)
(7,6,1)
(0,6,1)
(19,7,1)
(26,16,1)
(3,20,1)
(17,24,1)
(25,3,1)
(2,28,1)
(22,26,1)
(9,1,1)
(14,0,1)
(1,15,1)
(21,9,1)
(28,21,1)
(3,22,1)
(14,2,1)
(2,21,1)
(14,3,1)
(9,22,1)
(20,19,1)
(3,22,2)
(21,9,2)
(25,3,2)
(3,0,2)
(28,3,2)
(21,3,2)
(17,0,2)
(24,0,2)
(7,6,2)
(15,3,2)
(20,6,2)
(9,22,2)
(2,3,2)
(1,3,2)
(9,3,2)
(19,6,2)
(3,20,2)
(2,21,2)
(9,20,2)
-----------------------------------
(0,GLOBAL_CONST_TRUE)
(1,2)
(2,printHexCharLine(result)
(3,data > 0)
(4,)
(5,)
(6,GLOBAL_CONST_TRUE)
(7,data)
(8,if(GLOBAL_CONST_TRUE)
(9,data * 2)
(10,if(data > 0)
(11,if(GLOBAL_CONST_TRUE)
(12,result)
(13,data)
(14,RET)
(15,data)
(16,data)
(17,0)
(18,)
(19,CHAR_MAX)
(20,data = CHAR_MAX)
(21,result = data * 2)
(22,data = \' \')
(23,)
(24,data)
(25,result)
(26,' ')
(27,data = ' ')
(28,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^