-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_14_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_14_bad(){    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_14_bad()
CWE190_Integer_Overflow__int_max_square_14_bad
{    int data;    /* Initialize data */    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(19,2,0)
(27,7,0)
(19,3,0)
(7,16,0)
(14,7,0)
(2,19,0)
(0,3,0)
(19,26,0)
(17,22,0)
(25,26,0)
(18,26,0)
(14,2,0)
(1,8,0)
(5,2,0)
(2,7,0)
(6,8,0)
(13,23,0)
(10,22,0)
(15,19,0)
(21,3,0)
(24,19,0)
(3,11,0)
(20,14,0)
(9,23,0)
(4,22,0)
(26,22,0)
(14,20,1)
(12,14,1)
(26,18,1)
(8,6,1)
(3,0,1)
(1,26,1)
(23,13,1)
(9,3,1)
(12,23,1)
(21,8,1)
(19,26,1)
(2,19,1)
(19,24,1)
(5,23,1)
(24,15,1)
(20,2,1)
(6,1,1)
(0,21,1)
(15,5,1)
(9,8,1)
(13,9,1)
(14,2,1)
(19,3,1)
(18,25,1)
(2,23,2)
(21,8,2)
(14,23,2)
(3,8,2)
(19,3,2)
(0,8,2)
(14,2,2)
(19,23,2)
(19,26,2)
(2,19,2)
(5,23,2)
(15,23,2)
(24,23,2)
(20,23,2)
-----------------------------------
(0,INT_MAX)
(1,globalFive)
(2,result = data * data)
(3,data = INT_MAX)
(4,if(globalFive==5)
(5,result)
(6,5)
(7,)
(8,globalFive==5)
(9,globalFive)
(10,data)
(11,)
(12,RET)
(13,5)
(14,printIntLine(result)
(15,data)
(16,)
(17,if(globalFive==5)
(18,0)
(19,data * data)
(20,result)
(21,data)
(22,)
(23,globalFive==5)
(24,data)
(25,data)
(26,data = 0)
(27,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^