-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_31_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    {
        char dataCopy = data;
        char data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,48,52,54,58,60
-----computeFrom-----
12,13
12,14
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_31_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    {        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_31_bad()
CWE190_Integer_Overflow__char_fscanf_square_31_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    {        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char dataCopy = data;
char dataCopy = data;
char
dataCopy = data
dataCopy
= data
data
data
char data = dataCopy;
char data = dataCopy;
char
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,6,0)
(4,1,0)
(21,24,0)
(14,12,0)
(25,1,0)
(13,17,0)
(6,5,0)
(17,26,0)
(18,26,0)
(20,17,0)
(26,5,0)
(28,20,0)
(9,6,0)
(23,24,0)
(22,18,0)
(19,6,0)
(24,1,0)
(16,26,0)
(27,5,0)
(17,20,0)
(24,10,0)
(10,24,0)
(8,25,0)
(2,5,0)
(3,20,0)
(18,17,0)
(11,25,0)
(7,10,0)
(6,12,0)
(5,1,0)
(15,12,0)
(12,5,0)
(12,25,0)
(10,25,0)
(6,12,1)
(21,25,1)
(10,25,1)
(9,12,1)
(6,19,1)
(18,17,1)
(10,7,1)
(17,20,1)
(0,18,1)
(12,25,1)
(19,9,1)
(25,11,1)
(13,6,1)
(3,13,1)
(7,23,1)
(22,17,1)
(18,22,1)
(11,8,1)
(15,24,1)
(28,3,1)
(20,28,1)
(12,14,1)
(23,21,1)
(24,10,1)
(14,15,1)
(20,6,1)
(6,12,2)
(12,25,2)
(20,6,2)
(18,17,2)
(24,10,2)
(17,20,2)
(10,25,2)
-----------------------------------
(0,RET)
(1,)
(2,data)
(3,data)
(4,data)
(5,)
(6,data = dataCopy)
(7,data)
(8,data)
(9,data)
(10,&data)
(11,\\\' \\\')
(12,dataCopy = data)
(13,result)
(14,data)
(15,dataCopy)
(16,result)
(17,result = data * data)
(18,printHexCharLine(result)
(19,dataCopy)
(20,data * data)
(21,stdin)
(22,result)
(23,"%c")
(24,fscanf (stdin, "%c", &data)
(25,data = \\\' \\\')
(26,)
(27,dataCopy)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^