-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,41,44,46,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_03_bad()
CWE190_Integer_Overflow__short_rand_postinc_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,25,0)
(13,28,0)
(5,8,0)
(7,12,0)
(12,20,0)
(4,6,0)
(10,8,0)
(7,28,0)
(0,27,0)
(22,12,0)
(7,27,0)
(6,28,0)
(14,23,0)
(26,8,0)
(23,28,0)
(20,12,0)
(18,27,0)
(28,1,0)
(27,8,0)
(25,20,0)
(2,7,0)
(6,12,0)
(20,15,0)
(9,19,0)
(16,19,0)
(24,6,0)
(23,6,0)
(29,21,0)
(6,27,0)
(12,17,0)
(11,21,0)
(15,20,0)
(7,2,1)
(21,29,1)
(18,0,1)
(14,6,1)
(3,21,1)
(6,12,1)
(12,20,1)
(15,22,1)
(16,9,1)
(7,27,1)
(2,21,1)
(11,19,1)
(22,19,1)
(4,7,1)
(20,15,1)
(3,23,1)
(29,11,1)
(6,27,1)
(23,14,1)
(24,4,1)
(7,12,1)
(27,18,1)
(20,25,1)
(23,6,1)
(6,24,1)
(9,27,1)
(19,16,1)
(11,12,1)
(6,27,2)
(2,21,2)
(24,21,2)
(20,25,2)
(4,21,2)
(7,21,2)
(20,19,2)
(15,19,2)
(12,19,2)
(6,21,2)
(23,6,2)
(23,21,2)
(7,12,2)
(22,19,2)
(6,12,2)
(12,20,2)
(7,27,2)
(20,15,2)
(14,21,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,RET)
(4,result)
(5,if(5==5)
(6,result = data)
(7,data++)
(8,)
(9,5)
(10,if(5==5)
(11,5)
(12,data = (short)
(13,result)
(14,result)
(15,RAND32()
(16,5)
(17,)
(18,0)
(19,5==5)
(20,(short)
(21,5==5)
(22,data)
(23,printIntLine(result)
(24,data)
(25,short)
(26,data)
(27,data = 0)
(28,)
(29,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^