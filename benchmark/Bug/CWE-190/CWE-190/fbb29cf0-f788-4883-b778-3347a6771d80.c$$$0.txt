-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,41,44,46,49,53,55
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_08_bad()
CWE190_Integer_Overflow__char_rand_postinc_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(23,9,0)
(12,0,0)
(0,14,0)
(7,4,0)
(11,4,0)
(20,6,0)
(24,23,0)
(9,12,0)
(0,16,0)
(17,21,0)
(1,9,0)
(9,6,0)
(17,6,0)
(6,4,0)
(26,12,0)
(9,21,0)
(18,21,0)
(14,0,0)
(17,12,0)
(19,17,0)
(3,6,0)
(22,4,0)
(21,5,0)
(13,9,0)
(23,21,0)
(0,12,0)
(12,10,0)
(16,0,0)
(17,6,1)
(8,23,1)
(0,16,1)
(12,0,1)
(17,12,1)
(9,1,1)
(16,26,1)
(26,15,1)
(23,24,1)
(15,6,1)
(13,17,1)
(23,9,1)
(2,12,1)
(3,20,1)
(1,13,1)
(9,12,1)
(9,6,1)
(6,3,1)
(8,2,1)
(19,2,1)
(0,14,1)
(17,19,1)
(2,15,1)
(24,9,1)
(19,2,2)
(16,15,2)
(17,2,2)
(12,15,2)
(0,15,2)
(23,2,2)
(26,15,2)
(9,12,2)
(17,12,2)
(9,2,2)
(23,9,2)
(12,0,2)
(13,2,2)
(1,2,2)
(9,6,2)
(0,14,2)
(24,2,2)
(0,16,2)
(17,6,2)
-----------------------------------
(0,(char)
(1,data)
(2,staticReturnsTrue()
(3,' ')
(4,)
(5,)
(6,data = \' \')
(7,data)
(8,RET)
(9,result = data)
(10,)
(11,if(staticReturnsTrue()
(12,data = (char)
(13,result)
(14,char)
(15,staticReturnsTrue()
(16,RAND32()
(17,data++)
(18,result)
(19,data)
(20,data)
(21,)
(22,if(staticReturnsTrue()
(23,printHexCharLine(result)
(24,result)
(25,data = ' ')
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^