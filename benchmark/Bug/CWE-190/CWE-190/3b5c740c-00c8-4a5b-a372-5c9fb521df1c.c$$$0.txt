-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_05_bad()
{
    unsigned int data;
    data = 0;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(staticTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_05_bad(){    unsigned int data;    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_05_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_05_bad
{    unsigned int data;    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
staticTrue
staticTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(11,0,0)
(29,2,0)
(2,29,0)
(8,22,0)
(17,23,0)
(12,17,0)
(20,1,0)
(22,8,0)
(25,5,0)
(8,23,0)
(3,0,0)
(28,8,0)
(29,23,0)
(26,0,0)
(29,15,0)
(6,8,0)
(16,21,0)
(18,17,0)
(23,19,0)
(4,22,0)
(14,23,0)
(5,22,0)
(24,10,0)
(5,21,0)
(10,0,0)
(7,10,0)
(15,29,0)
(22,21,0)
(8,10,0)
(23,29,0)
(17,10,0)
(6,28,1)
(29,15,1)
(13,9,1)
(7,24,1)
(4,17,1)
(10,7,1)
(29,2,1)
(27,5,1)
(17,23,1)
(5,25,1)
(8,10,1)
(25,22,1)
(13,23,1)
(15,14,1)
(5,22,1)
(22,8,1)
(12,13,1)
(23,29,1)
(18,12,1)
(27,17,1)
(14,9,1)
(9,10,1)
(17,18,1)
(8,6,1)
(17,10,1)
(8,23,1)
(28,4,1)
(27,13,1)
(29,9,2)
(28,17,2)
(6,17,2)
(8,17,2)
(18,13,2)
(15,9,2)
(22,8,2)
(23,29,2)
(25,17,2)
(5,17,2)
(14,9,2)
(23,9,2)
(8,23,2)
(5,22,2)
(17,10,2)
(17,13,2)
(22,17,2)
(8,10,2)
(29,15,2)
(4,17,2)
(12,13,2)
(17,23,2)
(29,2,2)
-----------------------------------
(0,)
(1,)
(2,unsigned int)
(3,if(staticTrue)
(4,result)
(5,printUnsignedLine(result)
(6,2)
(7,0)
(8,data * 2)
(9,staticTrue)
(10,data = 0)
(11,if(staticTrue)
(12,data)
(13,staticTrue)
(14,data)
(15,RAND32()
(16,result)
(17,data > 0)
(18,0)
(19,)
(20,if(data > 0)
(21,)
(22,result = data * 2)
(23,data = (unsigned int)
(24,data)
(25,result)
(26,data)
(27,RET)
(28,data)
(29,(unsigned int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^