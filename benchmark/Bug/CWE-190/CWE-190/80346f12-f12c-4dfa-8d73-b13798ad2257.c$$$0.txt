-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_68b_badSink()
{
    short data = CWE190_Integer_Overflow__short_fscanf_multiply_68_badData;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
20,21
21,22
21,23
23,24
23,25
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,8,10,13,17,18,22,24,28,29,33,35
-----computeFrom-----
15,16
15,17
26,27
26,28
-----guardedBy-----
17,28
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_68b_badSink(){    short data = CWE190_Integer_Overflow__short_fscanf_multiply_68_badData;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_68b_badSink()
CWE190_Integer_Overflow__short_fscanf_multiply_68b_badSink
{    short data = CWE190_Integer_Overflow__short_fscanf_multiply_68_badData;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short data = CWE190_Integer_Overflow__short_fscanf_multiply_68_badData;
short data = CWE190_Integer_Overflow__short_fscanf_multiply_68_badData;
short
data = CWE190_Integer_Overflow__short_fscanf_multiply_68_badData
data
= CWE190_Integer_Overflow__short_fscanf_multiply_68_badData
CWE190_Integer_Overflow__short_fscanf_multiply_68_badData
CWE190_Integer_Overflow__short_fscanf_multiply_68_badData
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(5,2,0)
(8,2,0)
(2,8,0)
(18,16,0)
(1,0,0)
(15,10,0)
(7,18,0)
(4,16,0)
(13,8,0)
(13,10,0)
(6,2,0)
(0,18,0)
(2,18,0)
(9,16,0)
(11,18,0)
(14,13,0)
(12,8,0)
(8,10,0)
(3,0,0)
(1,3,1)
(13,8,1)
(0,1,1)
(5,12,1)
(17,13,1)
(18,11,1)
(6,5,1)
(3,18,1)
(14,8,1)
(0,18,1)
(11,7,1)
(17,0,1)
(8,2,1)
(2,6,1)
(2,18,1)
(12,0,1)
(13,14,1)
(0,18,2)
(8,0,2)
(5,0,2)
(2,18,2)
(13,0,2)
(12,0,2)
(8,2,2)
(6,0,2)
(14,0,2)
(13,8,2)
(2,0,2)
-----------------------------------
(0,data > 0)
(1,0)
(2,data * 2)
(3,data)
(4,if(data > 0)
(5,data)
(6,2)
(7,data)
(8,result = data * 2)
(9,data)
(10,)
(11,CWE190_Integer_Overflow__short_fscanf_multiply_68_badData)
(12,result)
(13,printIntLine(result)
(14,result)
(15,result)
(16,)
(17,RET)
(18,data = CWE190_Integer_Overflow__short_fscanf_multiply_68_badData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^