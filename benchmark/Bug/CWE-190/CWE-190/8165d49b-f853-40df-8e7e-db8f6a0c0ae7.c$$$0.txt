-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_01_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        char result = data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
30,31
32,33
33,34
33,35
35,36
35,37
37,38
38,39
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,31,34,36,39,43,45
-----computeFrom-----
12,13
12,14
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_01_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_postinc_01_bad()
CWE190_Integer_Overflow__char_rand_postinc_01_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(19,16,0)
(4,19,0)
(16,9,0)
(7,0,0)
(7,1,0)
(10,17,0)
(18,16,0)
(1,19,0)
(16,18,0)
(0,17,0)
(8,0,0)
(8,19,0)
(12,1,0)
(15,10,0)
(2,17,0)
(14,7,0)
(1,0,0)
(3,0,0)
(19,17,0)
(11,10,0)
(16,19,0)
(9,16,0)
(6,1,0)
(5,8,0)
(9,4,1)
(13,7,1)
(11,15,1)
(5,19,1)
(14,1,1)
(8,19,1)
(4,10,1)
(19,16,1)
(10,11,1)
(16,9,1)
(7,1,1)
(12,8,1)
(8,5,1)
(16,18,1)
(7,14,1)
(1,19,1)
(6,12,1)
(1,6,1)
(7,1,2)
(16,9,2)
(8,19,2)
(1,19,2)
(16,18,2)
(19,16,2)
-----------------------------------
(0,)
(1,result = data)
(2,data)
(3,result)
(4,data)
(5,data)
(6,data)
(7,printHexCharLine(result)
(8,data++)
(9,RAND32()
(10,data = ' ')
(11,' ')
(12,result)
(13,RET)
(14,result)
(15,data)
(16,(char)
(17,)
(18,char)
(19,data = (char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^