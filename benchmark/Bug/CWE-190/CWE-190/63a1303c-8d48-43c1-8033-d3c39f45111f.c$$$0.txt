-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
33,36
34,35
35,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,37,40,42,45,49,51
-----computeFrom-----
12,13
12,14
20,21
20,22
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_02_bad()
CWE190_Integer_Overflow__char_rand_preinc_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,15,0)
(2,26,0)
(14,26,0)
(13,23,0)
(20,14,0)
(15,18,0)
(4,14,0)
(12,26,0)
(20,1,0)
(19,18,0)
(3,23,0)
(11,20,0)
(7,14,0)
(20,19,0)
(16,1,0)
(5,18,0)
(19,21,0)
(23,19,0)
(18,5,0)
(24,3,0)
(17,26,0)
(9,23,0)
(23,1,0)
(6,19,0)
(1,10,0)
(18,19,0)
(23,14,0)
(3,1,0)
(19,18,1)
(20,14,1)
(23,14,1)
(18,15,1)
(8,0,1)
(18,5,1)
(8,19,1)
(9,13,1)
(20,11,1)
(3,23,1)
(24,23,1)
(14,4,1)
(25,3,1)
(25,8,1)
(20,19,1)
(23,19,1)
(11,8,1)
(13,20,1)
(4,7,1)
(23,9,1)
(15,6,1)
(3,24,1)
(0,14,1)
(6,0,1)
(23,8,2)
(6,0,2)
(9,8,2)
(18,5,2)
(20,8,2)
(24,8,2)
(3,8,2)
(18,0,2)
(15,0,2)
(13,8,2)
(20,19,2)
(20,14,2)
(18,15,2)
(23,14,2)
(19,0,2)
(11,8,2)
(3,23,2)
(23,19,2)
(19,18,2)
-----------------------------------
(0,1)
(1,)
(2,data)
(3,printHexCharLine(result)
(4,' ')
(5,char)
(6,data)
(7,data)
(8,1)
(9,data)
(10,)
(11,data)
(12,if(1)
(13,result)
(14,data = ' ')
(15,RAND32()
(16,result)
(17,if(1)
(18,(char)
(19,data = (char)
(20,++data)
(21,)
(22,data = \' \')
(23,result = data)
(24,result)
(25,RET)
(26,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^