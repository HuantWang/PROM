-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_bad()
{
    int64_t data;
    CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_unionType myUnion;
    data = 0LL;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%" SCNd64, &data);
    myUnion.unionFirst = data;
    {
        int64_t data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
25,26
25,27
26,27
26,28
27,28
30,31
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
52,53
54,55
54,56
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
-----nextToken-----
2,4,9,11,15,17,21,22,28,29,31,36,38,42,43,47,48,53,55,59,60,64,66
-----computeFrom-----
19,20
19,21
25,26
25,27
45,46
45,47
57,58
57,59
-----guardedBy-----
47,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_bad(){    int64_t data;    CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_bad
{    int64_t data;    CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_unionType
CWE190_Integer_Overflow__int64_t_fscanf_multiply_34_unionType
myUnion
myUnion
data = 0LL;
data = 0LL
data
data
0LL
fscanf (stdin, "%" SCNd64, &data);
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t data = myUnion.unionSecond;
int64_t data = myUnion.unionSecond;
int64_t
int64_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(7,26,0)
(13,23,0)
(8,3,0)
(29,3,0)
(19,13,0)
(12,4,0)
(9,26,0)
(21,26,0)
(25,6,0)
(27,23,0)
(23,27,0)
(11,26,0)
(0,3,0)
(14,21,0)
(29,4,0)
(20,26,0)
(15,23,0)
(2,6,0)
(28,4,0)
(18,27,0)
(10,21,0)
(24,27,0)
(16,29,0)
(5,9,0)
(8,29,0)
(4,23,0)
(4,29,0)
(17,13,0)
(6,9,0)
(22,8,0)
(23,21,0)
(27,18,1)
(13,23,1)
(2,25,1)
(1,13,1)
(13,17,1)
(19,23,1)
(28,12,1)
(8,22,1)
(4,28,1)
(29,4,1)
(4,23,1)
(25,7,1)
(5,6,1)
(9,5,1)
(15,9,1)
(18,24,1)
(17,19,1)
(24,15,1)
(16,13,1)
(12,16,1)
(1,8,1)
(23,27,1)
(6,2,1)
(8,29,1)
(22,29,1)
(8,29,2)
(22,13,2)
(8,13,2)
(4,13,2)
(12,13,2)
(28,13,2)
(13,23,2)
(29,13,2)
(16,13,2)
(23,27,2)
(29,4,2)
(4,23,2)
-----------------------------------
(0,result)
(1,RET)
(2,unionFirst)
(3,)
(4,data * 2)
(5,data)
(6,myUnion.unionFirst)
(7,L)
(8,printLongLongLine(result)
(9,myUnion.unionFirst = data)
(10,data)
(11,data)
(12,data)
(13,data > 0)
(14,if(data > 0)
(15,data)
(16,result)
(17,0)
(18,unionSecond)
(19,data)
(20,myUnion)
(21,)
(22,result)
(23,data = myUnion.unionSecond)
(24,myUnion)
(25,myUnion)
(26,)
(27,myUnion.unionSecond)
(28,2)
(29,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^