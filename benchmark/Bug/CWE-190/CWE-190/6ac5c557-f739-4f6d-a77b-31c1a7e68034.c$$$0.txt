-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_add_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,74,78,79,83,85
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_add_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_add_32_bad()
CWE190_Integer_Overflow__short_max_add_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(37,20,0)
(2,28,0)
(29,11,0)
(5,0,0)
(17,18,0)
(18,12,0)
(10,1,0)
(39,26,0)
(3,7,0)
(30,27,0)
(14,27,0)
(17,16,0)
(34,23,0)
(3,27,0)
(9,23,0)
(35,42,0)
(16,1,0)
(26,1,0)
(11,1,0)
(13,42,0)
(21,26,0)
(41,16,0)
(36,14,0)
(38,12,0)
(33,29,0)
(40,20,0)
(27,28,0)
(7,34,0)
(18,20,0)
(34,7,0)
(31,43,0)
(8,34,0)
(29,18,0)
(1,20,0)
(28,0,0)
(22,3,0)
(15,20,0)
(14,28,0)
(16,17,0)
(23,43,0)
(27,3,0)
(25,11,0)
(24,3,0)
(43,23,0)
(6,7,0)
(23,20,0)
(19,18,0)
(0,20,0)
(42,20,0)
(32,17,0)
(11,26,0)
(7,0,0)
(12,18,0)
(36,27,1)
(22,24,1)
(3,22,1)
(23,43,1)
(12,38,1)
(13,35,1)
(26,21,1)
(3,7,1)
(14,27,1)
(16,17,1)
(43,31,1)
(14,36,1)
(35,23,1)
(25,29,1)
(9,18,1)
(33,26,1)
(29,33,1)
(18,12,1)
(24,30,1)
(41,42,1)
(17,18,1)
(31,9,1)
(7,34,1)
(6,11,1)
(34,23,1)
(17,32,1)
(38,19,1)
(32,41,1)
(34,8,1)
(42,13,1)
(21,39,1)
(4,14,1)
(39,16,1)
(29,18,1)
(27,3,1)
(11,25,1)
(11,26,1)
(8,6,1)
(30,7,1)
(23,43,2)
(27,3,2)
(7,34,2)
(17,18,2)
(18,12,2)
(14,27,2)
(3,7,2)
(11,26,2)
(34,23,2)
(29,18,2)
(16,17,2)
-----------------------------------
(0,)
(1,)
(2,result)
(3,data + 1)
(4,RET)
(5,data)
(6,data)
(7,data = *dataPtr2)
(8,dataPtr2)
(9,dataPtr2)
(10,data)
(11,*dataPtr1 = data)
(12,&data)
(13,0)
(14,printIntLine(result)
(15,dataPtr1)
(16,data = *dataPtr1)
(17,*dataPtr1)
(18,*dataPtr1 = &data)
(19,dataPtr1)
(20,)
(21,SHRT_MAX)
(22,1)
(23,*dataPtr2 = &data)
(24,data)
(25,data)
(26,data = SHRT_MAX)
(27,result = data + 1)
(28,)
(29,*dataPtr1)
(30,result)
(31,data)
(32,dataPtr1)
(33,dataPtr1)
(34,*dataPtr2)
(35,data)
(36,result)
(37,dataPtr2)
(38,data)
(39,data)
(40,data)
(41,data)
(42,data = 0)
(43,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^