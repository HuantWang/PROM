-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,44,48,50,54,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
52,53
52,54
-----guardedBy-----
43,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_15_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(17,14,0)
(25,0,0)
(26,20,0)
(8,19,0)
(23,14,0)
(4,14,0)
(36,29,0)
(31,14,0)
(13,7,0)
(20,14,0)
(35,0,0)
(2,38,0)
(34,2,0)
(15,29,0)
(2,19,0)
(32,2,0)
(24,38,0)
(39,14,0)
(7,0,0)
(12,37,0)
(30,5,0)
(3,5,0)
(10,38,0)
(5,38,0)
(38,29,0)
(1,12,0)
(11,37,0)
(16,0,0)
(34,37,0)
(19,0,0)
(21,29,0)
(12,34,0)
(9,2,0)
(28,0,0)
(33,19,0)
(5,19,0)
(22,34,0)
(2,34,0)
(31,5,1)
(8,6,1)
(5,30,1)
(6,38,1)
(30,3,1)
(31,12,1)
(32,22,1)
(2,19,1)
(7,13,1)
(1,34,1)
(18,16,1)
(18,28,1)
(12,34,1)
(26,18,1)
(2,9,1)
(19,33,1)
(34,2,1)
(22,5,1)
(9,32,1)
(13,6,1)
(12,1,1)
(5,38,1)
(2,38,1)
(23,20,1)
(20,26,1)
(3,18,1)
(33,8,1)
(38,24,1)
(27,31,1)
(27,23,1)
(28,7,1)
(5,19,1)
(16,19,1)
(24,10,1)
(3,18,2)
(30,18,2)
(28,6,2)
(2,38,2)
(8,6,2)
(5,19,2)
(34,5,2)
(12,34,2)
(7,6,2)
(13,6,2)
(26,18,2)
(12,5,2)
(5,18,2)
(9,5,2)
(22,5,2)
(5,38,2)
(34,2,2)
(2,5,2)
(2,19,2)
(16,6,2)
(32,5,2)
(23,18,2)
(31,18,2)
(1,5,2)
(19,6,2)
(20,18,2)
(33,6,2)
-----------------------------------
(0,)
(1,result)
(2,data * 2)
(3,data)
(4,if(data > 0)
(5,data > 0)
(6,6)
(7,printLine("Benign, fixed string")
(8,data)
(9,2)
(10,data)
(11,result)
(12,printUnsignedLine(result)
(13,"Benign, fixed string")
(14,)
(15,data)
(16,break;)
(17,default:)
(18,7)
(19,data = UINT_MAX)
(20,printLine("Benign, fixed string")
(21,switch(6)
(22,result)
(23,break;)
(24,0)
(25,case 6:)
(26,"Benign, fixed string")
(27,RET)
(28,break;)
(29,)
(30,0)
(31,break;)
(32,data)
(33,UINT_MAX)
(34,result = data * 2)
(35,default:)
(36,switch(7)
(37,)
(38,data = 0)
(39,case 7:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^