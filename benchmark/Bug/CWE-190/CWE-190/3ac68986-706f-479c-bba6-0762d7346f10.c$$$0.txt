-----label-----
1
-----code-----
static void badSink(char data)
{
    if(badStatic)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
15,16
15,17
16,17
19,20
19,21
20,21
21,22
21,23
23,24
23,25
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,6,8,12,17,18,22,24,28,29,33,35
-----computeFrom-----
15,16
15,17
26,27
26,28
-----guardedBy-----
17,28
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char data){    if(badStatic)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
static void
badSink(char data)
badSink
char data
char
data
data
{    if(badStatic)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
if(badStatic)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
badStatic
badStatic
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(10,11,0)
(17,16,0)
(7,9,0)
(2,7,0)
(5,10,0)
(10,4,0)
(7,11,0)
(6,10,0)
(1,15,0)
(3,15,0)
(13,8,0)
(15,4,0)
(11,10,0)
(12,9,0)
(18,11,0)
(11,9,0)
(0,15,1)
(3,14,1)
(7,11,1)
(10,4,1)
(7,2,1)
(2,11,1)
(11,10,1)
(10,5,1)
(1,3,1)
(15,4,1)
(0,7,1)
(6,18,1)
(0,14,1)
(15,1,1)
(18,15,1)
(5,6,1)
(10,4,2)
(1,14,2)
(10,15,2)
(15,4,2)
(7,15,2)
(6,15,2)
(5,15,2)
(2,15,2)
(11,15,2)
(7,11,2)
(3,14,2)
(15,14,2)
(18,15,2)
(11,10,2)
-----------------------------------
(0,RET)
(1,0)
(2,result)
(3,data)
(4,char data)
(5,2)
(6,data)
(7,printHexCharLine(result)
(8,)
(9,)
(10,data * 2)
(11,result = data * 2)
(12,result)
(13,if(badStatic)
(14,badStatic)
(15,data > 0)
(16,)
(17,if(data > 0)
(18,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^