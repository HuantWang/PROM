-----label-----
1
-----code-----
static void badSink(int data)
{
    if(badStatic)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
15,16
15,17
16,17
19,20
19,21
20,21
21,22
21,23
23,24
23,25
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,6,8,12,17,18,22,24,28,29,33,35
-----computeFrom-----
15,16
15,17
26,27
26,28
-----guardedBy-----
17,28
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(int data){    if(badStatic)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
static void
badSink(int data)
badSink
int data
int
data
data
{    if(badStatic)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
if(badStatic)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
badStatic
badStatic
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(2,16,0)
(17,9,0)
(11,0,0)
(6,3,0)
(15,13,0)
(7,16,0)
(13,7,0)
(12,16,0)
(5,10,0)
(16,8,0)
(18,9,0)
(7,0,0)
(9,8,0)
(16,7,0)
(13,0,0)
(14,7,0)
(4,9,1)
(4,13,1)
(9,18,1)
(15,7,1)
(7,16,1)
(16,2,1)
(18,17,1)
(13,7,1)
(13,15,1)
(2,12,1)
(17,1,1)
(4,1,1)
(16,8,1)
(9,8,1)
(12,14,1)
(14,9,1)
(16,8,2)
(9,1,2)
(13,9,2)
(12,9,2)
(9,8,2)
(15,9,2)
(17,1,2)
(7,16,2)
(16,9,2)
(13,7,2)
(7,9,2)
(2,9,2)
(18,1,2)
(14,9,2)
-----------------------------------
(0,)
(1,badStatic)
(2,2)
(3,)
(4,RET)
(5,if(data > 0)
(6,if(badStatic)
(7,result = data * 2)
(8,int data)
(9,data > 0)
(10,)
(11,result)
(12,data)
(13,printIntLine(result)
(14,result)
(15,result)
(16,data * 2)
(17,data)
(18,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^