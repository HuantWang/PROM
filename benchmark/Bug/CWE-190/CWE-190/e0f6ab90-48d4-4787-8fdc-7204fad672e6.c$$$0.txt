-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
        int result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
22,24
23,24
26,27
26,28
27,28
28,29
28,30
30,31
30,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,25,29,31,35,36,40,42
-----computeFrom-----
22,23
22,24
33,34
33,35
-----guardedBy-----
24,35
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_66b_badSink(int dataArray[])
CWE190_Integer_Overflow__int_fgets_multiply_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */        int result = data * 2;        printIntLine(result);    }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,15,0)
(13,3,0)
(4,2,0)
(3,19,0)
(17,14,0)
(2,1,0)
(18,10,0)
(0,16,0)
(20,2,0)
(10,1,0)
(16,14,0)
(16,19,0)
(9,1,0)
(11,19,0)
(8,15,0)
(5,3,0)
(1,15,0)
(1,2,0)
(21,10,0)
(2,6,0)
(19,3,0)
(19,14,0)
(3,1,0)
(3,1,1)
(1,2,1)
(2,4,1)
(3,5,1)
(11,10,1)
(16,19,1)
(21,1,1)
(5,13,1)
(13,11,1)
(4,20,1)
(18,21,1)
(12,10,1)
(12,16,1)
(2,6,1)
(19,3,1)
(10,1,1)
(10,18,1)
(20,9,1)
(16,0,1)
(0,19,1)
(13,10,2)
(16,19,2)
(0,10,2)
(2,6,2)
(3,10,2)
(19,10,2)
(5,10,2)
(3,1,2)
(16,10,2)
(11,10,2)
(1,2,2)
(19,3,2)
(10,1,2)
-----------------------------------
(0,result)
(1,data = dataArray[2])
(2,dataArray[2])
(3,data * 2)
(4,2)
(5,2)
(6,int dataArray[])
(7,data)
(8,if(data > 0)
(9,data)
(10,data > 0)
(11,result)
(12,RET)
(13,data)
(14,)
(15,)
(16,printIntLine(result)
(17,result)
(18,0)
(19,result = data * 2)
(20,dataArray)
(21,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^