-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_04_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_04_bad(){    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_04_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_04_bad
{    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,10,0)
(15,20,0)
(17,28,0)
(5,27,0)
(10,17,0)
(29,5,0)
(23,22,0)
(20,17,0)
(2,29,0)
(10,23,0)
(8,23,0)
(16,17,0)
(9,20,0)
(18,28,0)
(24,16,0)
(21,5,0)
(3,10,0)
(12,27,0)
(19,28,0)
(5,16,0)
(11,28,0)
(26,17,0)
(4,17,0)
(29,27,0)
(13,23,0)
(6,0,0)
(16,5,0)
(25,16,0)
(5,16,1)
(24,21,1)
(15,9,1)
(17,26,1)
(26,4,1)
(13,8,1)
(8,1,1)
(14,23,1)
(3,13,1)
(16,17,1)
(29,2,1)
(9,14,1)
(21,20,1)
(7,20,1)
(1,17,1)
(20,17,1)
(23,10,1)
(10,17,1)
(16,25,1)
(14,1,1)
(29,5,1)
(2,5,1)
(25,24,1)
(7,14,1)
(10,3,1)
(20,15,1)
(7,29,1)
(5,16,2)
(16,17,2)
(29,5,2)
(10,1,2)
(2,20,2)
(25,20,2)
(23,10,2)
(29,20,2)
(16,20,2)
(24,20,2)
(3,1,2)
(10,17,2)
(13,1,2)
(20,14,2)
(20,17,2)
(15,14,2)
(5,20,2)
(21,20,2)
(23,1,2)
(9,14,2)
(8,1,2)
-----------------------------------
(0,)
(1,STATIC_CONST_TRUE)
(2,result)
(3,data)
(4,data)
(5,result = data * 2)
(6,if(data > 0)
(7,RET)
(8,stdin)
(9,data)
(10,&data)
(11,if(STATIC_CONST_TRUE)
(12,result)
(13,"%hd")
(14,STATIC_CONST_TRUE)
(15,0)
(16,data * 2)
(17,data = 0)
(18,if(STATIC_CONST_TRUE)
(19,data)
(20,data > 0)
(21,result)
(22,)
(23,fscanf (stdin, "%hd", &data)
(24,data)
(25,2)
(26,0)
(27,)
(28,)
(29,printIntLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^