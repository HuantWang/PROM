-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_10_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_10_bad(){    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_10_bad()
CWE190_Integer_Overflow__int_max_multiply_10_bad
{    int data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(17,3,0)
(5,18,0)
(10,16,0)
(14,16,0)
(18,15,0)
(22,18,0)
(21,27,0)
(11,27,0)
(1,17,0)
(10,3,0)
(8,3,0)
(25,17,0)
(13,10,0)
(17,21,0)
(23,21,0)
(3,16,0)
(17,15,0)
(2,21,0)
(26,27,0)
(6,27,0)
(20,15,0)
(18,21,0)
(15,24,0)
(3,17,0)
(19,15,0)
(0,4,0)
(25,8,1)
(19,20,1)
(21,2,1)
(12,15,1)
(7,10,1)
(2,23,1)
(20,9,1)
(1,25,1)
(7,12,1)
(13,3,1)
(10,13,1)
(17,21,1)
(5,22,1)
(7,18,1)
(15,19,1)
(3,17,1)
(12,9,1)
(18,21,1)
(9,21,1)
(10,3,1)
(18,15,1)
(18,5,1)
(8,18,1)
(22,12,1)
(17,15,1)
(17,1,1)
(18,15,2)
(17,18,2)
(17,15,2)
(3,18,2)
(18,21,2)
(22,12,2)
(19,9,2)
(5,12,2)
(13,18,2)
(8,18,2)
(10,18,2)
(15,9,2)
(3,17,2)
(18,12,2)
(17,21,2)
(10,3,2)
(1,18,2)
(20,9,2)
(25,18,2)
-----------------------------------
(0,if(data > 0)
(1,2)
(2,0)
(3,result = data * 2)
(4,)
(5,0)
(6,data)
(7,RET)
(8,result)
(9,globalTrue)
(10,printIntLine(result)
(11,if(globalTrue)
(12,globalTrue)
(13,result)
(14,result)
(15,data = INT_MAX)
(16,)
(17,data * 2)
(18,data > 0)
(19,INT_MAX)
(20,data)
(21,data = 0)
(22,data)
(23,data)
(24,)
(25,data)
(26,if(globalTrue)
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^