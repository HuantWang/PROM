-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_08_bad()
{
    int64_t data;
    data = 0LL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,9,11,15,16,20,25,27,31,36,37,42,44,48,49,53,55
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
36,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_08_bad(){    int64_t data;    data = 0LL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_08_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_08_bad
{    int64_t data;    data = 0LL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(13,9,0)
(16,4,0)
(15,11,0)
(10,3,0)
(14,13,0)
(11,25,0)
(6,14,0)
(18,11,0)
(0,9,0)
(20,3,0)
(24,7,0)
(12,0,0)
(2,14,0)
(21,13,0)
(8,3,0)
(7,11,0)
(1,9,0)
(5,3,0)
(14,11,0)
(13,14,0)
(0,13,0)
(22,7,0)
(17,7,1)
(17,23,1)
(12,13,1)
(13,14,1)
(15,18,1)
(19,8,1)
(2,6,1)
(7,11,1)
(22,24,1)
(24,23,1)
(6,21,1)
(21,7,1)
(11,15,1)
(14,2,1)
(23,19,1)
(0,13,1)
(7,22,1)
(17,0,1)
(0,12,1)
(14,11,1)
(23,11,1)
(18,19,1)
(15,19,2)
(13,7,2)
(14,7,2)
(2,7,2)
(6,7,2)
(22,23,2)
(18,19,2)
(24,23,2)
(7,11,2)
(12,7,2)
(13,14,2)
(0,13,2)
(21,7,2)
(11,19,2)
(0,7,2)
(14,11,2)
(7,23,2)
-----------------------------------
(0,printLongLongLine(result)
(1,result)
(2,2)
(3,)
(4,)
(5,if(staticReturnsTrue()
(6,data)
(7,data > 0)
(8,L)
(9,)
(10,data)
(11,data = LLONG_MAX)
(12,result)
(13,result = data * 2)
(14,data * 2)
(15,LLONG_MAX)
(16,if(data > 0)
(17,RET)
(18,data)
(19,staticReturnsTrue()
(20,if(staticReturnsTrue()
(21,result)
(22,0)
(23,staticReturnsTrue()
(24,data)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^