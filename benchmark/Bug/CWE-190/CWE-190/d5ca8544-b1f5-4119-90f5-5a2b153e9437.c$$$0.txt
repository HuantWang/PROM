-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_04_bad()
CWE190_Integer_Overflow__char_fscanf_square_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(13,17,0)
(3,20,0)
(2,16,0)
(1,10,0)
(21,17,0)
(25,16,0)
(23,9,0)
(0,20,0)
(15,1,0)
(9,1,0)
(24,7,0)
(6,7,0)
(17,20,0)
(16,25,0)
(18,20,0)
(7,17,0)
(1,7,0)
(5,25,0)
(16,14,0)
(10,19,0)
(22,16,0)
(12,10,0)
(25,17,0)
(7,1,0)
(9,10,0)
(17,13,1)
(13,21,1)
(22,11,1)
(11,17,1)
(9,23,1)
(7,17,1)
(15,8,1)
(5,2,1)
(2,22,1)
(8,11,1)
(16,25,1)
(23,1,1)
(4,8,1)
(8,16,1)
(24,15,1)
(9,1,1)
(25,5,1)
(25,17,1)
(7,6,1)
(1,7,1)
(4,9,1)
(6,24,1)
(23,8,2)
(16,25,2)
(7,17,2)
(5,11,2)
(7,8,2)
(9,1,2)
(25,11,2)
(22,11,2)
(16,11,2)
(24,8,2)
(9,8,2)
(1,8,2)
(15,8,2)
(6,8,2)
(1,7,2)
(2,11,2)
(25,17,2)
-----------------------------------
(0,data)
(1,result = data * data)
(2,"%c")
(3,if(STATIC_CONST_TRUE)
(4,RET)
(5,data)
(6,data)
(7,data * data)
(8,STATIC_CONST_TRUE)
(9,printHexCharLine(result)
(10,)
(11,STATIC_CONST_TRUE)
(12,result)
(13,\\\' \\\')
(14,)
(15,result)
(16,fscanf (stdin, "%c", &data)
(17,data = \\\' \\\')
(18,if(STATIC_CONST_TRUE)
(19,)
(20,)
(21,data)
(22,stdin)
(23,result)
(24,data)
(25,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^