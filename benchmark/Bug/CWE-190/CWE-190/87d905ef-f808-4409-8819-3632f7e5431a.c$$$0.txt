-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_preinc_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < INT_MAX)
        {
            ++data;
            int result = data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_preinc_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fscanf_preinc_12_bad()
CWE190_Integer_Overflow__int_fscanf_preinc_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < INT_MAX)        {            ++data;            int result = data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < INT_MAX
data
data
INT_MAX
INT_MAX
{            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(13,0,0)
(20,35,0)
(0,18,0)
(46,3,0)
(12,2,0)
(20,8,0)
(33,29,0)
(41,0,0)
(45,43,0)
(8,35,0)
(32,26,0)
(6,42,0)
(15,9,0)
(40,9,0)
(34,33,0)
(29,37,0)
(31,36,0)
(33,27,0)
(10,27,0)
(1,6,0)
(39,9,0)
(5,27,0)
(15,29,0)
(26,27,0)
(7,4,0)
(23,43,0)
(44,20,0)
(11,36,0)
(2,0,0)
(28,8,0)
(9,27,0)
(2,35,0)
(36,0,0)
(25,15,0)
(36,27,0)
(16,29,0)
(9,0,0)
(38,43,0)
(8,27,0)
(27,43,0)
(8,0,0)
(21,3,0)
(26,3,0)
(14,35,0)
(33,0,0)
(30,8,0)
(9,29,0)
(2,27,0)
(3,26,0)
(3,22,0)
(33,0,1)
(28,30,1)
(9,0,1)
(12,36,1)
(21,24,1)
(6,1,1)
(19,15,1)
(36,27,1)
(31,17,1)
(40,39,1)
(26,32,1)
(32,46,1)
(20,8,1)
(36,0,1)
(26,27,1)
(3,26,1)
(2,0,1)
(11,31,1)
(8,28,1)
(5,10,1)
(27,5,1)
(9,40,1)
(2,27,1)
(9,27,1)
(44,8,1)
(39,33,1)
(19,20,1)
(30,2,1)
(13,41,1)
(8,27,1)
(0,13,1)
(36,11,1)
(15,9,1)
(33,34,1)
(8,0,1)
(1,36,1)
(41,24,1)
(19,6,1)
(46,21,1)
(25,9,1)
(17,0,1)
(17,3,1)
(2,12,1)
(34,17,1)
(15,25,1)
(33,27,1)
(24,27,1)
(20,44,1)
(2,36,2)
(2,0,2)
(36,17,2)
(31,17,2)
(13,24,2)
(8,27,2)
(36,27,2)
(15,9,2)
(28,36,2)
(20,36,2)
(34,17,2)
(26,24,2)
(3,26,2)
(11,17,2)
(21,24,2)
(41,24,2)
(30,36,2)
(0,24,2)
(33,27,2)
(9,27,2)
(40,17,2)
(36,0,2)
(12,36,2)
(26,27,2)
(6,36,2)
(8,36,2)
(32,24,2)
(3,24,2)
(33,0,2)
(8,0,2)
(20,8,2)
(9,0,2)
(33,17,2)
(15,17,2)
(1,36,2)
(44,36,2)
(46,24,2)
(25,17,2)
(9,17,2)
(2,27,2)
(39,17,2)
-----------------------------------
(0,data = 2)
(1,"data value is too large to perform arithmetic safely.")
(2,++data)
(3,fscanf(stdin, "%d", &data)
(4,)
(5,0)
(6,printLine("data value is too large to perform arithmetic safely.")
(7,if (data < INT_MAX)
(8,result = data)
(9,result = data)
(10,data)
(11,INT_MAX)
(12,data)
(13,2)
(14,result)
(15,printIntLine(result)
(16,result)
(17,globalReturnsTrueOrFalse()
(18,)
(19,RET)
(20,printIntLine(result)
(21,stdin)
(22,)
(23,if(globalReturnsTrueOrFalse()
(24,globalReturnsTrueOrFalse()
(25,result)
(26,&data)
(27,data = 0)
(28,data)
(29,)
(30,result)
(31,data)
(32,data)
(33,++data)
(34,data)
(35,)
(36,data < INT_MAX)
(37,)
(38,data)
(39,result)
(40,data)
(41,data)
(42,)
(43,)
(44,result)
(45,if(globalReturnsTrueOrFalse()
(46,"%d")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^