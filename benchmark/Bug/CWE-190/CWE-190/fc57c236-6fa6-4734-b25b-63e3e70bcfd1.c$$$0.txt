-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_listen_socket_square_02_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
19,21
19,22
19,23
19,24
19,25
19,26
19,27
20,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
57,59
58,59
58,60
58,61
58,62
58,63
58,64
58,65
58,66
58,67
58,68
58,69
58,70
58,71
58,72
59,60
60,61
60,62
61,62
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
80,81
81,82
81,83
81,84
81,85
82,83
84,85
85,86
88,89
89,90
90,91
92,93
93,94
93,95
94,95
94,96
95,96
98,99
100,101
101,102
101,103
102,103
102,104
103,104
103,105
104,105
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
116,118
117,118
119,120
121,122
121,123
122,123
122,124
123,124
123,125
123,126
123,127
124,125
126,127
128,129
128,130
129,130
129,131
130,131
132,133
134,135
135,136
137,138
138,139
139,140
141,142
143,144
145,146
145,147
146,147
146,148
147,148
147,149
147,150
148,149
150,151
152,153
154,155
156,157
158,159
159,160
159,161
160,161
162,163
162,164
162,165
162,166
163,164
165,166
167,168
169,170
171,172
171,173
172,173
172,174
173,174
175,176
177,178
179,180
180,181
180,182
181,182
183,184
183,185
183,186
183,187
183,188
184,185
186,187
188,189
190,191
190,192
191,192
195,196
195,197
196,197
196,198
197,198
197,199
198,199
200,201
202,203
202,204
203,204
206,207
208,209
209,210
209,211
210,211
210,212
211,212
213,214
216,217
217,218
217,219
218,219
220,221
220,222
221,222
223,224
226,227
226,228
227,228
227,229
228,229
230,231
232,233
233,234
234,235
234,236
235,236
237,238
239,240
239,241
240,241
240,242
241,242
243,244
245,246
246,247
247,248
247,249
248,249
250,251
252,253
252,254
254,255
255,256
255,257
256,257
257,258
257,259
259,260
259,261
261,262
262,263
262,264
263,264
265,266
267,268
268,269
268,270
269,270
271,272
-----nextToken-----
2,4,8,10,14,15,17,22,24,28,30,34,36,39,43,45,48,51,53,56,62,65,67,69,71,75,77,79,83,86,87,91,96,97,99,105,106,107,109,114,115,118,120,125,127,131,133,136,140,142,144,149,151,153,155,157,161,164,166,168,170,174,176,178,182,185,187,189,192,193,194,199,201,204,205,207,212,214,215,219,222,224,225,229,231,236,238,242,244,249,251,253,258,260,264,266,270,272
-----computeFrom-----
12,13
12,14
60,61
60,62
73,74
73,75
93,94
93,95
101,102
101,103
111,112
111,113
122,123
122,124
146,147
146,148
159,160
159,161
172,173
172,174
180,181
180,182
190,191
190,192
196,197
196,198
197,198
197,199
202,203
202,204
209,210
209,211
217,218
217,219
227,228
227,229
240,241
240,242
262,263
262,264
-----guardedBy-----
229,238
242,251
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_listen_socket_square_02_bad(){    int data;    /* Initialize data */    data = 0;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_listen_socket_square_02_bad()
CWE190_Integer_Overflow__int_listen_socket_square_02_bad
{    int data;    /* Initialize data */    data = 0;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(155,78,0)
(128,86,0)
(96,66,0)
(121,168,0)
(133,117,0)
(86,128,0)
(122,9,0)
(89,48,0)
(16,48,0)
(125,66,0)
(169,66,0)
(19,166,0)
(105,65,0)
(124,66,0)
(134,61,0)
(6,99,0)
(137,144,0)
(82,76,0)
(33,42,0)
(8,59,0)
(80,97,0)
(30,48,0)
(162,64,0)
(97,152,0)
(57,66,0)
(119,66,0)
(58,117,0)
(121,152,0)
(43,128,0)
(46,74,0)
(29,152,0)
(154,86,0)
(93,150,0)
(61,152,0)
(73,117,0)
(23,106,0)
(14,168,0)
(97,57,0)
(111,72,0)
(106,149,0)
(51,66,0)
(52,66,0)
(8,133,0)
(69,101,0)
(132,76,0)
(136,107,0)
(65,117,0)
(87,67,0)
(101,69,0)
(170,133,0)
(110,66,0)
(70,76,0)
(46,152,0)
(69,117,0)
(86,56,0)
(127,117,0)
(45,97,0)
(20,58,0)
(92,67,0)
(28,29,0)
(1,35,0)
(76,30,0)
(49,48,0)
(144,137,0)
(10,61,0)
(64,162,0)
(167,150,0)
(112,75,0)
(42,33,0)
(59,8,0)
(162,168,0)
(168,117,0)
(79,9,0)
(109,117,0)
(88,4,0)
(147,37,0)
(64,166,0)
(11,57,0)
(148,108,0)
(130,117,0)
(100,58,0)
(31,160,0)
(85,166,0)
(163,60,0)
(108,42,0)
(17,66,0)
(106,42,0)
(94,51,0)
(166,64,0)
(164,106,0)
(58,24,0)
(77,69,0)
(99,168,0)
(56,86,0)
(165,117,0)
(161,108,0)
(91,101,0)
(150,65,0)
(160,127,0)
(118,78,0)
(102,145,0)
(76,69,0)
(141,57,0)
(103,15,0)
(144,37,0)
(26,75,0)
(0,29,0)
(157,121,0)
(149,106,0)
(84,30,0)
(142,24,0)
(99,4,0)
(41,99,0)
(37,144,0)
(76,70,0)
(143,33,0)
(129,163,0)
(27,29,0)
(18,51,0)
(123,154,0)
(86,154,0)
(62,158,0)
(35,127,0)
(78,42,0)
(152,29,0)
(126,33,0)
(127,160,0)
(144,42,0)
(153,112,0)
(98,117,0)
(25,66,0)
(22,42,0)
(144,112,0)
(55,66,0)
(9,121,0)
(138,121,0)
(168,121,0)
(3,128,0)
(71,117,0)
(53,70,0)
(36,59,0)
(70,163,0)
(44,73,0)
(7,42,0)
(121,9,0)
(104,121,0)
(7,13,0)
(108,51,0)
(40,35,0)
(47,162,0)
(81,66,0)
(67,66,0)
(116,20,0)
(21,162,0)
(54,56,0)
(58,20,0)
(112,153,0)
(151,12,0)
(29,42,0)
(42,117,0)
(72,163,0)
(38,7,0)
(46,57,0)
(24,58,0)
(113,152,0)
(66,135,0)
(114,149,0)
(72,70,0)
(152,117,0)
(5,8,0)
(140,30,0)
(68,137,0)
(63,73,0)
(166,168,0)
(159,59,0)
(75,112,0)
(120,117,0)
(50,46,0)
(112,144,0)
(83,171,0)
(34,33,0)
(90,144,0)
(7,51,0)
(4,117,0)
(131,156,0)
(147,144,1)
(76,69,1)
(47,168,1)
(0,28,1)
(101,91,1)
(28,27,1)
(131,61,1)
(5,59,1)
(37,147,1)
(168,121,1)
(40,133,1)
(39,136,1)
(29,42,1)
(56,86,1)
(10,152,1)
(162,168,1)
(83,149,1)
(106,23,1)
(63,56,1)
(148,62,1)
(61,134,1)
(166,85,1)
(45,108,1)
(148,151,1)
(132,82,1)
(76,132,1)
(58,24,1)
(121,152,1)
(67,92,1)
(121,104,1)
(61,152,1)
(85,19,1)
(80,45,1)
(27,113,1)
(133,170,1)
(108,42,1)
(112,153,1)
(149,114,1)
(23,164,1)
(46,152,1)
(112,75,1)
(44,63,1)
(97,80,1)
(3,57,1)
(57,141,1)
(32,39,1)
(99,168,1)
(149,106,1)
(114,106,1)
(127,160,1)
(34,126,1)
(155,42,1)
(7,42,1)
(113,149,1)
(6,64,1)
(108,161,1)
(118,155,1)
(65,105,1)
(2,97,1)
(35,1,1)
(148,131,1)
(73,44,1)
(51,18,1)
(100,20,1)
(24,142,1)
(72,70,1)
(53,39,1)
(138,157,1)
(29,0,1)
(79,138,1)
(30,84,1)
(26,90,1)
(64,162,1)
(151,78,1)
(148,102,1)
(50,97,1)
(154,123,1)
(144,137,1)
(164,37,1)
(106,42,1)
(75,26,1)
(121,9,1)
(170,8,1)
(18,94,1)
(115,69,1)
(136,2,1)
(2,46,1)
(72,111,1)
(122,79,1)
(160,31,1)
(56,54,1)
(14,61,1)
(91,77,1)
(148,115,1)
(148,103,1)
(108,51,1)
(8,5,1)
(111,70,1)
(102,56,1)
(78,118,1)
(128,43,1)
(123,128,1)
(162,21,1)
(126,22,1)
(144,42,1)
(104,9,1)
(62,64,1)
(143,34,1)
(88,99,1)
(93,58,1)
(94,67,1)
(167,93,1)
(105,150,1)
(21,47,1)
(42,33,1)
(39,2,1)
(8,59,1)
(87,95,1)
(116,78,1)
(4,88,1)
(159,65,1)
(43,3,1)
(64,166,1)
(76,30,1)
(54,86,1)
(157,14,1)
(33,143,1)
(144,112,1)
(11,51,1)
(38,108,1)
(152,29,1)
(150,167,1)
(103,37,1)
(20,116,1)
(59,36,1)
(45,7,1)
(78,42,1)
(68,112,1)
(7,51,1)
(69,101,1)
(137,68,1)
(97,57,1)
(166,168,1)
(92,87,1)
(97,152,1)
(99,41,1)
(46,50,1)
(7,38,1)
(161,148,1)
(86,128,1)
(148,83,1)
(95,30,1)
(77,4,1)
(84,140,1)
(90,127,1)
(41,6,1)
(3,115,1)
(19,162,1)
(22,73,1)
(32,72,1)
(9,122,1)
(46,57,1)
(1,40,1)
(82,53,1)
(86,154,1)
(36,159,1)
(142,100,1)
(31,35,1)
(141,11,1)
(37,144,1)
(58,20,1)
(134,10,1)
(39,95,1)
(70,76,1)
(106,37,2)
(57,95,2)
(43,95,2)
(56,115,2)
(149,106,2)
(62,64,2)
(56,86,2)
(99,168,2)
(123,115,2)
(54,115,2)
(101,64,2)
(166,168,2)
(168,61,2)
(77,64,2)
(26,78,2)
(121,9,2)
(69,64,2)
(123,95,2)
(83,149,2)
(134,149,2)
(64,61,2)
(6,64,2)
(112,78,2)
(128,95,2)
(112,153,2)
(7,42,2)
(149,37,2)
(40,78,2)
(67,95,2)
(58,24,2)
(3,95,2)
(97,57,2)
(78,56,2)
(151,78,2)
(97,152,2)
(8,78,2)
(42,33,2)
(93,78,2)
(131,61,2)
(64,166,2)
(168,121,2)
(108,51,2)
(76,69,2)
(92,95,2)
(104,61,2)
(21,61,2)
(41,64,2)
(154,115,2)
(85,162,2)
(118,56,2)
(53,39,2)
(65,78,2)
(3,115,2)
(72,70,2)
(136,2,2)
(126,56,2)
(161,95,2)
(154,95,2)
(116,78,2)
(29,42,2)
(94,95,2)
(31,78,2)
(167,78,2)
(50,97,2)
(10,149,2)
(38,108,2)
(7,51,2)
(35,78,2)
(152,149,2)
(111,39,2)
(128,115,2)
(37,78,2)
(112,75,2)
(33,56,2)
(122,61,2)
(106,42,2)
(132,39,2)
(58,20,2)
(86,128,2)
(45,95,2)
(80,95,2)
(170,78,2)
(61,152,2)
(155,56,2)
(51,95,2)
(133,78,2)
(18,95,2)
(28,149,2)
(86,95,2)
(127,160,2)
(157,61,2)
(36,78,2)
(69,101,2)
(42,56,2)
(37,144,2)
(162,168,2)
(99,64,2)
(27,149,2)
(141,95,2)
(9,61,2)
(113,149,2)
(102,56,2)
(56,95,2)
(22,56,2)
(108,42,2)
(61,149,2)
(4,64,2)
(44,56,2)
(108,95,2)
(72,39,2)
(14,61,2)
(0,149,2)
(79,61,2)
(144,42,2)
(58,78,2)
(7,108,2)
(159,78,2)
(152,29,2)
(24,78,2)
(46,57,2)
(137,78,2)
(20,78,2)
(143,56,2)
(86,154,2)
(29,149,2)
(121,61,2)
(105,78,2)
(162,61,2)
(91,64,2)
(11,95,2)
(59,78,2)
(100,78,2)
(166,162,2)
(64,162,2)
(115,64,2)
(148,95,2)
(114,37,2)
(90,78,2)
(82,39,2)
(46,152,2)
(144,137,2)
(73,56,2)
(160,78,2)
(127,78,2)
(47,61,2)
(144,112,2)
(19,162,2)
(1,78,2)
(142,78,2)
(76,30,2)
(54,95,2)
(97,95,2)
(43,115,2)
(150,78,2)
(68,78,2)
(164,37,2)
(78,42,2)
(76,39,2)
(8,59,2)
(34,56,2)
(138,61,2)
(23,37,2)
(121,152,2)
(147,78,2)
(87,95,2)
(5,78,2)
(70,76,2)
(103,37,2)
(75,78,2)
(88,64,2)
(144,78,2)
(63,56,2)
(86,115,2)
(70,39,2)
(46,97,2)
(2,95,2)
-----------------------------------
(0,NULL)
(1,sin_port)
(2,wsaDataInit)
(3,2)
(4,inputBuffer[recvResult] = '\\\\0')
(5,s_addr)
(6,inputBuffer)
(7,CLOSE_SOCKET(listenSocket)
(8,service.sin_addr.s_addr)
(9,CHAR_ARRAY_SIZE - 1)
(10,acceptSocket)
(11,acceptSocket)
(12,)
(13,)
(14,recvResult)
(15,)
(16,if(1)
(17,service)
(18,INVALID_SOCKET)
(19,recvResult)
(20,&service)
(21,SOCKET_ERROR)
(22,listenSocket)
(23,LISTEN_BACKLOG)
(24,sizeof(service)
(25,wsaData)
(26,service)
(27,listenSocket)
(28,NULL)
(29,accept(listenSocket, NULL, NULL)
(30,data = 0)
(31,TCP_PORT)
(32,RET)
(33,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(34,SOCK_STREAM)
(35,service.sin_port)
(36,sin_addr)
(37,bind(listenSocket, (struct sockaddr*)
(38,listenSocket)
(39,1)
(40,service)
(41,recvResult)
(42,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(43,2)
(44,1)
(45,acceptSocket)
(46,CLOSE_SOCKET(acceptSocket)
(47,recvResult)
(48,)
(49,if(1)
(50,acceptSocket)
(51,listenSocket = INVALID_SOCKET)
(52,if (listenSocket != INVALID_SOCKET)
(53,result)
(54,NO_ERROR)
(55,if (wsaDataInit)
(56,WSAStartup(MAKEWORD(2,2)
(57,acceptSocket = INVALID_SOCKET)
(58,memset(&service, 0, sizeof(service)
(59,service.sin_addr)
(60,)
(61,acceptSocket == SOCKET_ERROR)
(62,break;)
(63,wsaDataInit)
(64,recvResult == SOCKET_ERROR || recvResult == 0)
(65,service.sin_family = AF_INET)
(66,)
(67,wsaDataInit = 0)
(68,service)
(69,data = atoi(inputBuffer)
(70,result = data * data)
(71,if (listenSocket == INVALID_SOCKET)
(72,printIntLine(result)
(73,wsaDataInit = 1)
(74,)
(75,&service)
(76,data * data)
(77,data)
(78,listenSocket == INVALID_SOCKET)
(79,CHAR_ARRAY_SIZE)
(80,INVALID_SOCKET)
(81,acceptSocket)
(82,data)
(83,break;)
(84,0)
(85,0)
(86,WSAStartup(MAKEWORD(2,2)
(87,wsaDataInit)
(88,'\\\\0')
(89,data)
(90,listenSocket)
(91,inputBuffer)
(92,0)
(93,service)
(94,listenSocket)
(95,1)
(96,if (acceptSocket != INVALID_SOCKET)
(97,acceptSocket != INVALID_SOCKET)
(98,if (listen(listenSocket, LISTEN_BACKLOG)
(99,inputBuffer[recvResult])
(100,0)
(101,atoi(inputBuffer)
(102,break;)
(103,break;)
(104,0)
(105,AF_INET)
(106,listen(listenSocket, LISTEN_BACKLOG)
(107,)
(108,listenSocket != INVALID_SOCKET)
(109,if (bind(listenSocket, (struct sockaddr*)
(110,wsaDataInit)
(111,result)
(112,(struct sockaddr*)
(113,acceptSocket)
(114,SOCKET_ERROR)
(115,0)
(116,service)
(117,)
(118,INVALID_SOCKET)
(119,do)
(120,if (acceptSocket == SOCKET_ERROR)
(121,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(122,1)
(123,wsaData)
(124,listenSocket)
(125,inputBuffer)
(126,AF_INET)
(127,service.sin_port = htons(TCP_PORT)
(128,MAKEWORD(2,2)
(129,result)
(130,if (recvResult == SOCKET_ERROR || recvResult == 0)
(131,break;)
(132,data)
(133,service.sin_addr.s_addr = INADDR_ANY)
(134,SOCKET_ERROR)
(135,)
(136,WSACleanup()
(137,sizeof(service)
(138,inputBuffer)
(139,\'\\\\0\')
(140,data)
(141,INVALID_SOCKET)
(142,service)
(143,IPPROTO_TCP)
(144,bind(listenSocket, (struct sockaddr*)
(145,)
(146,inputBuffer[recvResult] = \'\\\\0\')
(147,SOCKET_ERROR)
(148,listenSocket)
(149,listen(listenSocket, LISTEN_BACKLOG)
(150,service.sin_family)
(151,break;)
(152,acceptSocket = accept(listenSocket, NULL, NULL)
(153,struct sockaddr*)
(154,&wsaData)
(155,listenSocket)
(156,)
(157,acceptSocket)
(158,)
(159,service)
(160,htons(TCP_PORT)
(161,INVALID_SOCKET)
(162,recvResult == SOCKET_ERROR)
(163,)
(164,listenSocket)
(165,if (WSAStartup(MAKEWORD(2,2)
(166,recvResult == 0)
(167,sin_family)
(168,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(169,recvResult)
(170,INADDR_ANY)
(171,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^