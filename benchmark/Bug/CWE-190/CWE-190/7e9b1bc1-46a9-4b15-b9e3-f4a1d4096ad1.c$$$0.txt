-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_42_bad()
{
    unsigned int data;
    data = 0;
    data = badSource(data);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
        unsigned int result = data * 2;
        printUnsignedLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,29,33,35,39,40,44,46
-----computeFrom-----
12,13
12,14
17,18
17,19
26,27
26,28
37,38
37,39
-----guardedBy-----
28,39
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_42_bad(){    unsigned int data;    data = 0;    data = badSource(data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_42_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_42_bad
{    unsigned int data;    data = 0;    data = badSource(data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(9,11,0)
(22,11,0)
(4,19,0)
(11,22,0)
(13,5,0)
(7,4,0)
(14,19,0)
(8,3,0)
(22,21,0)
(0,6,0)
(1,2,0)
(2,22,0)
(19,22,0)
(12,22,0)
(15,21,0)
(5,6,0)
(20,3,0)
(3,21,0)
(16,2,0)
(17,19,0)
(19,4,0)
(5,4,0)
(11,3,0)
(18,21,0)
(4,6,0)
(10,5,1)
(4,19,1)
(2,16,1)
(10,2,1)
(1,22,1)
(11,3,1)
(16,1,1)
(2,22,1)
(13,4,1)
(17,14,1)
(3,20,1)
(7,2,1)
(5,4,1)
(5,13,1)
(9,12,1)
(11,9,1)
(14,7,1)
(19,22,1)
(19,17,1)
(20,8,1)
(22,11,1)
(12,3,1)
(22,11,2)
(13,2,2)
(11,3,2)
(19,22,2)
(5,4,2)
(2,22,2)
(7,2,2)
(4,19,2)
(19,2,2)
(4,2,2)
(17,2,2)
(5,2,2)
(14,2,2)
-----------------------------------
(0,result)
(1,data)
(2,data > 0)
(3,data = 0)
(4,result = data * 2)
(5,printUnsignedLine(result)
(6,)
(7,result)
(8,data)
(9,data)
(10,RET)
(11,badSource(data)
(12,data)
(13,result)
(14,data)
(15,if(data > 0)
(16,0)
(17,2)
(18,data)
(19,data * 2)
(20,0)
(21,)
(22,data = badSource(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^