-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
42,43
42,44
43,44
43,45
44,45
47,48
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
63,64
64,65
64,66
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,45,46,49,54,55,58,59,62,68,70,74,76,80,82
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
39,40
39,41
52,53
52,54
56,57
56,58
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_17_bad()
CWE190_Integer_Overflow__int64_t_rand_square_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(11,8,0)
(1,36,0)
(37,22,0)
(5,23,0)
(0,25,0)
(27,36,0)
(36,23,0)
(28,17,0)
(16,25,0)
(24,29,0)
(15,4,0)
(35,25,0)
(7,22,0)
(29,10,0)
(20,17,0)
(15,18,0)
(18,15,0)
(10,22,0)
(9,29,0)
(3,35,0)
(12,25,0)
(29,8,0)
(19,10,0)
(8,21,0)
(15,8,0)
(13,17,0)
(22,32,0)
(14,23,0)
(39,0,0)
(8,15,0)
(34,17,0)
(6,37,0)
(33,17,0)
(30,17,0)
(31,23,0)
(2,0,0)
(37,10,0)
(38,31,0)
(10,29,0)
(4,15,0)
(0,25,1)
(37,10,1)
(1,27,1)
(24,9,1)
(11,36,1)
(9,19,1)
(35,25,1)
(27,23,1)
(2,39,1)
(14,5,1)
(38,8,1)
(23,14,1)
(39,35,1)
(4,11,1)
(3,37,1)
(5,13,1)
(36,1,1)
(15,4,1)
(37,6,1)
(36,23,1)
(10,29,1)
(29,24,1)
(39,25,1)
(27,31,1)
(16,12,1)
(35,3,1)
(15,18,1)
(6,10,1)
(31,38,1)
(19,0,1)
(26,0,1)
(12,36,1)
(25,16,1)
(31,23,1)
(29,8,1)
(0,2,1)
(8,15,1)
(10,29,2)
(35,25,2)
(31,23,2)
(27,36,2)
(37,0,2)
(0,0,2)
(11,36,2)
(8,36,2)
(31,36,2)
(15,4,2)
(15,36,2)
(38,36,2)
(39,0,2)
(2,0,2)
(35,0,2)
(6,0,2)
(10,0,2)
(8,15,2)
(24,0,2)
(4,36,2)
(36,36,2)
(0,25,2)
(19,0,2)
(29,0,2)
(3,0,2)
(36,23,2)
(29,8,2)
(9,0,2)
(1,36,2)
(37,10,2)
(15,18,2)
-----------------------------------
(0,j < 1)
(1,1)
(2,1)
(3,j)
(4,RAND64()
(5,i)
(6,result)
(7,result)
(8,data = (int64_t)
(9,data)
(10,result = data * data)
(11,data)
(12,j)
(13,L)
(14,0)
(15,(int64_t)
(16,0)
(17,)
(18,int64_t)
(19,result)
(20,data)
(21,)
(22,)
(23,i = 0)
(24,data)
(25,j = 0)
(26,RET)
(27,i)
(28,for(j = 0; j < 1; j++)
(29,data * data)
(30,i)
(31,i++)
(32,)
(33,for(i = 0; i < 1; i++)
(34,j)
(35,j++)
(36,i < 1)
(37,printLongLongLine(result)
(38,i)
(39,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^