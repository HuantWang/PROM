-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_max_multiply_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Use the maximum value for this type */
    data = INT_MAX;
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,51,55,57,61,62,66,68
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
48,49
48,50
59,60
59,61
-----guardedBy-----
50,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_34_bad(){    int data;    CWE190_Integer_Overflow__int_max_multiply_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_34_bad()
CWE190_Integer_Overflow__int_max_multiply_34_bad
{    int data;    CWE190_Integer_Overflow__int_max_multiply_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_max_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_multiply_34_unionType
CWE190_Integer_Overflow__int_max_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(4,1,0)
(11,24,0)
(5,32,0)
(34,16,0)
(8,12,0)
(26,32,0)
(23,4,0)
(1,12,0)
(9,24,0)
(21,5,0)
(13,4,0)
(6,23,0)
(3,32,0)
(5,10,0)
(24,4,0)
(26,4,0)
(4,23,0)
(2,1,0)
(16,14,0)
(32,26,0)
(25,23,0)
(17,16,0)
(20,26,0)
(32,10,0)
(33,12,0)
(0,33,0)
(22,33,0)
(14,12,0)
(30,8,0)
(29,12,0)
(7,12,0)
(27,14,0)
(31,26,0)
(19,8,0)
(18,10,0)
(15,1,0)
(14,33,0)
(21,32,1)
(22,8,1)
(9,11,1)
(6,13,1)
(3,24,1)
(24,9,1)
(34,33,1)
(28,5,1)
(33,0,1)
(32,26,1)
(26,4,1)
(11,4,1)
(27,16,1)
(31,3,1)
(28,24,1)
(25,6,1)
(4,23,1)
(0,22,1)
(8,30,1)
(5,32,1)
(23,25,1)
(30,19,1)
(16,17,1)
(13,14,1)
(24,4,1)
(14,33,1)
(17,34,1)
(20,31,1)
(5,21,1)
(14,27,1)
(26,20,1)
(32,26,2)
(5,32,2)
(5,24,2)
(3,24,2)
(4,23,2)
(24,4,2)
(26,4,2)
(26,24,2)
(32,24,2)
(21,24,2)
(31,24,2)
(20,24,2)
(14,33,2)
-----------------------------------
(0,INT_MAX)
(1,)
(2,data)
(3,result)
(4,data = myUnion.unionSecond)
(5,printIntLine(result)
(6,myUnion)
(7,data)
(8,data = 0)
(9,0)
(10,)
(11,data)
(12,)
(13,data)
(14,myUnion.unionFirst = data)
(15,if(data > 0)
(16,myUnion.unionFirst)
(17,unionFirst)
(18,result)
(19,data)
(20,2)
(21,result)
(22,data)
(23,myUnion.unionSecond)
(24,data > 0)
(25,unionSecond)
(26,data * 2)
(27,data)
(28,RET)
(29,myUnion)
(30,0)
(31,data)
(32,result = data * 2)
(33,data = INT_MAX)
(34,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^