-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_fscanf_preinc_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
51,54
52,53
53,54
54,55
56,57
57,58
57,59
59,60
59,61
61,62
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,55,58,60,63,67,69
-----computeFrom-----
18,19
18,20
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_34_bad(){    char data;    CWE190_Integer_Overflow__char_fscanf_preinc_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_34_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_34_bad
{    char data;    CWE190_Integer_Overflow__char_fscanf_preinc_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_fscanf_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__char_fscanf_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__char_fscanf_preinc_34_unionType
CWE190_Integer_Overflow__char_fscanf_preinc_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(14,23,0)
(9,1,0)
(30,12,0)
(10,1,0)
(28,13,0)
(28,20,0)
(3,13,0)
(32,23,0)
(23,32,0)
(1,20,0)
(14,21,0)
(21,7,0)
(13,28,0)
(8,4,0)
(30,21,0)
(15,28,0)
(27,32,0)
(24,32,0)
(26,20,0)
(25,28,0)
(31,12,0)
(16,21,0)
(0,30,0)
(13,1,0)
(5,14,0)
(12,23,0)
(9,20,0)
(17,23,0)
(22,7,0)
(23,7,0)
(6,9,0)
(12,21,0)
(2,1,0)
(29,12,0)
(18,20,0)
(19,4,0)
(7,20,0)
(4,9,0)
(25,1,1)
(24,27,1)
(14,23,1)
(30,0,1)
(9,1,1)
(8,28,1)
(17,9,1)
(13,1,1)
(0,12,1)
(5,23,1)
(12,23,1)
(10,2,1)
(13,3,1)
(6,4,1)
(32,24,1)
(30,12,1)
(1,10,1)
(12,29,1)
(29,31,1)
(27,17,1)
(23,32,1)
(14,5,1)
(28,13,1)
(3,15,1)
(4,19,1)
(15,25,1)
(19,8,1)
(31,14,1)
(11,30,1)
(9,6,1)
(28,13,2)
(12,23,2)
(9,1,2)
(23,32,2)
(14,23,2)
(30,12,2)
(13,1,2)
-----------------------------------
(0,result)
(1,data = \\\' \\\')
(2,data)
(3,data)
(4,myUnion.unionFirst)
(5,data)
(6,data)
(7,)
(8,myUnion)
(9,myUnion.unionFirst = data)
(10,\\\' \\\')
(11,RET)
(12,result = data)
(13,&data)
(14,++data)
(15,"%c")
(16,result)
(17,data)
(18,data)
(19,unionFirst)
(20,)
(21,)
(22,data)
(23,data = myUnion.unionSecond)
(24,unionSecond)
(25,stdin)
(26,myUnion)
(27,myUnion)
(28,fscanf (stdin, "%c", &data)
(29,data)
(30,printHexCharLine(result)
(31,result)
(32,myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^