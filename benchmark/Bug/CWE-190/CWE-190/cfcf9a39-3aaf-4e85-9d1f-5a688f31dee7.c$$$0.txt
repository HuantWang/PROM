-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_09_bad()
{
    unsigned int data;
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_09_bad(){    unsigned int data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_09_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_09_bad
{    unsigned int data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(23,8,0)
(19,6,0)
(23,20,0)
(0,7,0)
(21,23,0)
(12,19,0)
(8,24,0)
(10,0,0)
(5,23,0)
(21,8,0)
(20,23,0)
(1,6,0)
(17,0,0)
(11,21,0)
(4,14,0)
(15,6,0)
(0,19,0)
(16,20,0)
(25,20,0)
(18,14,0)
(13,14,0)
(20,6,0)
(6,14,0)
(19,0,0)
(2,8,0)
(9,0,1)
(3,9,1)
(12,10,1)
(16,25,1)
(3,21,1)
(6,1,1)
(17,22,1)
(21,23,1)
(9,22,1)
(25,5,1)
(1,15,1)
(0,19,1)
(19,6,1)
(10,17,1)
(22,6,1)
(11,23,1)
(19,12,1)
(21,11,1)
(5,9,1)
(23,20,1)
(20,6,1)
(20,16,1)
(0,22,2)
(23,20,2)
(11,9,2)
(16,9,2)
(12,22,2)
(10,22,2)
(19,22,2)
(21,9,2)
(17,22,2)
(5,9,2)
(20,9,2)
(19,6,2)
(21,23,2)
(20,6,2)
(0,19,2)
(25,9,2)
(23,9,2)
-----------------------------------
(0,fscanf (stdin, "%u", &data)
(1,0)
(2,result)
(3,RET)
(4,if(GLOBAL_CONST_TRUE)
(5,result)
(6,data = 0)
(7,)
(8,)
(9,GLOBAL_CONST_TRUE)
(10,"%u")
(11,result)
(12,data)
(13,data)
(14,)
(15,data)
(16,data)
(17,stdin)
(18,if(GLOBAL_CONST_TRUE)
(19,&data)
(20,data * data)
(21,printUnsignedLine(result)
(22,GLOBAL_CONST_TRUE)
(23,result = data * data)
(24,)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^