-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,45,49,51,55,57,58,59,63,64,65
-----computeFrom-----
12,13
12,14
22,23
22,24
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_max_square_15_bad()
CWE190_Integer_Overflow__char_max_square_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(5,8,0)
(30,3,0)
(11,1,0)
(34,31,0)
(10,32,0)
(35,8,0)
(12,16,0)
(8,31,0)
(33,5,0)
(25,18,0)
(23,30,0)
(19,16,0)
(7,20,0)
(31,21,0)
(20,32,0)
(22,3,0)
(8,30,0)
(17,21,0)
(29,31,0)
(31,20,0)
(5,30,0)
(15,3,0)
(6,21,0)
(21,16,0)
(18,16,0)
(24,16,0)
(1,3,0)
(9,20,0)
(0,3,0)
(28,32,0)
(31,8,0)
(4,32,0)
(27,3,0)
(14,16,0)
(26,22,1)
(13,20,1)
(5,33,1)
(35,2,1)
(1,11,1)
(33,8,1)
(9,7,1)
(6,13,1)
(11,2,1)
(17,6,1)
(2,24,1)
(12,18,1)
(18,25,1)
(20,9,1)
(31,34,1)
(15,1,1)
(24,21,1)
(26,15,1)
(2,12,1)
(31,21,1)
(34,29,1)
(29,35,1)
(25,13,1)
(5,8,1)
(22,5,1)
(31,20,1)
(21,17,1)
(8,31,1)
(5,8,2)
(5,2,2)
(21,13,2)
(1,2,2)
(35,2,2)
(24,13,2)
(29,2,2)
(18,13,2)
(6,13,2)
(15,2,2)
(8,2,2)
(22,2,2)
(12,13,2)
(31,2,2)
(11,2,2)
(25,13,2)
(31,21,2)
(34,2,2)
(33,2,2)
(17,13,2)
(8,31,2)
(31,20,2)
-----------------------------------
(0,case 7:)
(1,printLine("Benign, fixed string")
(2,7)
(3,)
(4,data)
(5,printHexCharLine(result)
(6,data)
(7,data)
(8,result = data * data)
(9,\\\' \\\')
(10,switch(6)
(11,"Benign, fixed string")
(12,break;)
(13,6)
(14,default:)
(15,break;)
(16,)
(17,CHAR_MAX)
(18,printLine("Benign, fixed string")
(19,case 6:)
(20,data = \\\' \\\')
(21,data = CHAR_MAX)
(22,break;)
(23,result)
(24,break;)
(25,"Benign, fixed string")
(26,RET)
(27,default:)
(28,switch(7)
(29,data)
(30,)
(31,data * data)
(32,)
(33,result)
(34,data)
(35,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^