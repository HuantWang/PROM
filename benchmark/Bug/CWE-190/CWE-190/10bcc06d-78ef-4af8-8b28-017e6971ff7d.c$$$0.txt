-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_05_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(staticTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_05_bad(){    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_05_bad()
CWE190_Integer_Overflow__int_max_multiply_05_bad
{    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticTrue
staticTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,2,0)
(19,2,0)
(15,21,0)
(5,2,0)
(18,2,0)
(25,18,0)
(22,6,0)
(16,18,0)
(20,22,0)
(9,22,0)
(1,22,0)
(17,3,0)
(4,15,0)
(12,24,0)
(10,12,0)
(15,24,0)
(26,9,0)
(12,22,0)
(27,24,0)
(12,18,0)
(9,18,0)
(24,21,0)
(7,12,0)
(24,12,0)
(11,9,0)
(0,21,0)
(4,24,1)
(9,18,1)
(24,12,1)
(1,23,1)
(8,23,1)
(14,8,1)
(26,8,1)
(14,9,1)
(8,22,1)
(20,1,1)
(11,26,1)
(23,18,1)
(9,22,1)
(9,11,1)
(7,10,1)
(15,4,1)
(12,18,1)
(22,20,1)
(14,15,1)
(15,24,1)
(12,7,1)
(18,16,1)
(16,25,1)
(12,22,1)
(10,27,1)
(27,9,1)
(9,22,2)
(1,23,2)
(10,9,2)
(22,23,2)
(9,18,2)
(12,22,2)
(15,9,2)
(20,23,2)
(7,9,2)
(15,24,2)
(24,12,2)
(12,18,2)
(26,8,2)
(9,8,2)
(11,8,2)
(12,9,2)
(4,9,2)
(27,9,2)
(24,9,2)
-----------------------------------
(0,result)
(1,data)
(2,)
(3,)
(4,result)
(5,data)
(6,)
(7,2)
(8,staticTrue)
(9,data > 0)
(10,data)
(11,0)
(12,data * 2)
(13,if(staticTrue)
(14,RET)
(15,printIntLine(result)
(16,0)
(17,if(data > 0)
(18,data = 0)
(19,if(staticTrue)
(20,INT_MAX)
(21,)
(22,data = INT_MAX)
(23,staticTrue)
(24,result = data * 2)
(25,data)
(26,data)
(27,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^