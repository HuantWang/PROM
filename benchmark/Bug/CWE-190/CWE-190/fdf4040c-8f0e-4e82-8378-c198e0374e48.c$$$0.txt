-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%" SCNd64, &data);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
        int64_t result = data * 2;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
32,33
35,36
36,37
36,38
37,38
39,40
-----nextToken-----
2,4,9,11,15,16,21,22,27,29,33,34,38,40
-----computeFrom-----
13,14
13,15
19,20
19,21
31,32
31,33
-----guardedBy-----
21,33
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_bad()
CWE190_Integer_Overflow__int64_t_fscanf_multiply_01_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
fscanf (stdin, "%" SCNd64, &data);
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(13,11,0)
(14,11,0)
(15,9,0)
(6,9,0)
(11,5,0)
(16,9,0)
(12,5,0)
(5,11,0)
(11,1,0)
(14,1,0)
(2,5,0)
(0,4,0)
(8,14,0)
(3,1,0)
(10,4,0)
(14,8,1)
(7,14,1)
(5,2,1)
(10,16,1)
(12,13,1)
(8,11,1)
(0,10,1)
(2,12,1)
(11,5,1)
(14,11,1)
(7,4,1)
(13,4,1)
(4,0,1)
(14,4,2)
(11,5,2)
(14,11,2)
(5,4,2)
(13,4,2)
(8,4,2)
(11,4,2)
(12,4,2)
(2,4,2)
-----------------------------------
(0,0)
(1,)
(2,2)
(3,result)
(4,data > 0)
(5,data * 2)
(6,if(data > 0)
(7,RET)
(8,result)
(9,)
(10,data)
(11,result = data * 2)
(12,data)
(13,result)
(14,printLongLongLine(result)
(15,data)
(16,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^