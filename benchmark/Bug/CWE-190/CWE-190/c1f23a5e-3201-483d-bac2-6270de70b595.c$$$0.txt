-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_10_bad()
{
    char data;
    data = ' ';
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
35,38
36,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,39,42,44,47,51,53
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_10_bad(){    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_10_bad()
CWE190_Integer_Overflow__char_rand_postinc_10_bad
{    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalTrue)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(6,2,0)
(11,14,0)
(8,5,0)
(14,2,0)
(6,24,0)
(19,6,0)
(9,13,0)
(26,5,0)
(10,14,0)
(11,24,0)
(13,9,0)
(17,2,0)
(0,13,0)
(12,24,0)
(22,13,0)
(14,22,0)
(20,2,0)
(24,4,0)
(6,22,0)
(1,11,0)
(23,5,0)
(13,0,0)
(22,16,0)
(13,22,0)
(2,5,0)
(18,14,0)
(14,24,0)
(15,22,0)
(21,22,1)
(11,14,1)
(13,0,1)
(20,17,1)
(11,1,1)
(3,2,1)
(14,2,1)
(0,15,1)
(6,22,1)
(21,3,1)
(15,3,1)
(2,20,1)
(14,18,1)
(7,21,1)
(18,10,1)
(13,9,1)
(14,22,1)
(7,11,1)
(6,19,1)
(10,6,1)
(19,21,1)
(22,13,1)
(1,14,1)
(6,2,1)
(13,9,2)
(6,21,2)
(11,14,2)
(22,3,2)
(14,22,2)
(18,21,2)
(6,2,2)
(19,21,2)
(0,3,2)
(11,21,2)
(22,13,2)
(6,22,2)
(1,21,2)
(15,3,2)
(14,21,2)
(14,2,2)
(13,3,2)
(10,21,2)
(13,0,2)
-----------------------------------
(0,RAND32()
(1,result)
(2,data = ' ')
(3,globalTrue)
(4,)
(5,)
(6,data++)
(7,RET)
(8,data)
(9,char)
(10,result)
(11,printHexCharLine(result)
(12,result)
(13,(char)
(14,result = data)
(15,data)
(16,)
(17,data)
(18,data)
(19,data)
(20,' ')
(21,globalTrue)
(22,data = (char)
(23,if(globalTrue)
(24,)
(25,data = \' \')
(26,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^