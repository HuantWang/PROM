-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_17_bad()
{
    int i,j;
    unsigned int data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_17_bad(){    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_17_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_17_bad
{    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(1,4,0)
(15,0,0)
(9,6,0)
(4,30,0)
(23,31,0)
(26,12,0)
(25,0,0)
(22,36,0)
(28,31,0)
(13,5,0)
(18,12,0)
(39,1,0)
(7,15,0)
(29,4,0)
(6,2,0)
(31,5,0)
(27,2,0)
(17,36,0)
(8,17,0)
(2,6,0)
(12,18,0)
(16,5,0)
(32,17,0)
(34,2,0)
(24,36,0)
(6,4,0)
(38,3,0)
(37,18,0)
(40,36,0)
(2,31,0)
(3,0,0)
(11,5,0)
(1,6,0)
(18,31,0)
(10,5,0)
(41,0,0)
(35,5,0)
(12,19,0)
(14,12,0)
(21,40,0)
(20,3,0)
(17,32,1)
(20,38,1)
(8,36,1)
(8,40,1)
(1,6,1)
(23,28,1)
(25,41,1)
(3,0,1)
(37,26,1)
(39,6,1)
(33,3,1)
(21,12,1)
(12,18,1)
(34,27,1)
(38,0,1)
(26,14,1)
(14,17,1)
(17,36,1)
(2,31,1)
(2,34,1)
(24,31,1)
(15,7,1)
(38,15,1)
(3,20,1)
(18,37,1)
(31,23,1)
(15,0,1)
(32,8,1)
(6,2,1)
(9,3,1)
(18,31,1)
(40,36,1)
(36,22,1)
(27,9,1)
(0,25,1)
(41,17,1)
(1,39,1)
(40,21,1)
(22,24,1)
(7,1,1)
(17,36,2)
(3,0,2)
(18,17,2)
(12,17,2)
(2,31,2)
(17,17,2)
(15,0,2)
(21,17,2)
(14,17,2)
(40,17,2)
(39,3,2)
(37,17,2)
(8,17,2)
(6,3,2)
(15,3,2)
(12,18,2)
(7,3,2)
(34,3,2)
(27,3,2)
(26,17,2)
(18,31,2)
(38,3,2)
(1,6,2)
(40,36,2)
(9,3,2)
(32,17,2)
(6,2,2)
(2,3,2)
(3,3,2)
(20,3,2)
(1,3,2)
-----------------------------------
(0,j = 0)
(1,printUnsignedLine(result)
(2,data * data)
(3,j < 1)
(4,)
(5,)
(6,result = data * data)
(7,j)
(8,i)
(9,result)
(10,i)
(11,for(j = 0; j < 1; j++)
(12,fscanf (stdin, "%u", &data)
(13,j)
(14,stdin)
(15,j++)
(16,data)
(17,i < 1)
(18,&data)
(19,)
(20,1)
(21,i)
(22,0)
(23,0)
(24,i)
(25,0)
(26,"%u")
(27,data)
(28,data)
(29,result)
(30,)
(31,data = 0)
(32,1)
(33,RET)
(34,data)
(35,for(i = 0; i < 1; i++)
(36,i = 0)
(37,data)
(38,j)
(39,result)
(40,i++)
(41,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^