-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_07_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,42,46,48,52,53,57,59
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
39,40
39,41
50,51
50,52
-----guardedBy-----
41,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_07_bad(){    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_07_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_07_bad
{    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(31,15,0)
(8,15,0)
(5,18,0)
(13,1,0)
(19,14,0)
(29,21,0)
(26,28,0)
(6,14,0)
(16,3,0)
(17,24,0)
(20,2,0)
(5,19,0)
(24,26,0)
(3,18,0)
(19,5,0)
(22,6,0)
(12,5,0)
(11,26,0)
(4,21,0)
(23,15,0)
(6,19,0)
(24,18,0)
(10,2,0)
(7,14,0)
(30,26,0)
(25,3,0)
(27,19,0)
(0,18,0)
(18,15,0)
(26,24,0)
(33,5,0)
(9,18,0)
(20,26,1)
(26,24,1)
(10,20,1)
(29,4,1)
(33,27,1)
(19,5,1)
(9,0,1)
(22,19,1)
(20,21,1)
(32,6,1)
(5,12,1)
(16,25,1)
(21,29,1)
(6,19,1)
(6,22,1)
(3,18,1)
(5,18,1)
(3,16,1)
(30,11,1)
(25,2,1)
(2,10,1)
(24,17,1)
(32,2,1)
(24,18,1)
(27,3,1)
(11,21,1)
(12,33,1)
(32,3,1)
(4,18,1)
(18,9,1)
(17,30,1)
(6,3,2)
(30,21,2)
(26,24,2)
(33,3,2)
(24,18,2)
(3,2,2)
(6,19,2)
(5,3,2)
(16,2,2)
(5,18,2)
(17,21,2)
(25,2,2)
(19,5,2)
(12,3,2)
(19,3,2)
(24,21,2)
(26,21,2)
(22,3,2)
(27,3,2)
(11,21,2)
(3,18,2)
-----------------------------------
(0,data)
(1,)
(2,staticFive==5)
(3,data > 0)
(4,staticFive)
(5,data * 2)
(6,printIntLine(result)
(7,result)
(8,if(staticFive==5)
(9,0)
(10,5)
(11,stdin)
(12,2)
(13,if(data > 0)
(14,)
(15,)
(16,0)
(17,data)
(18,data = 0)
(19,result = data * 2)
(20,staticFive)
(21,staticFive==5)
(22,result)
(23,data)
(24,&data)
(25,data)
(26,fscanf(stdin, "%d", &data)
(27,result)
(28,)
(29,5)
(30,"%d")
(31,if(staticFive==5)
(32,RET)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^