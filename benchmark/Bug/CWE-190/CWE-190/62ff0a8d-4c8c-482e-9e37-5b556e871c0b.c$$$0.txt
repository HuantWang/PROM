-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_14_bad()
CWE190_Integer_Overflow__char_max_preinc_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,4,0)
(6,9,0)
(10,23,0)
(1,15,0)
(0,4,0)
(27,23,0)
(11,24,0)
(21,16,0)
(25,15,0)
(9,23,0)
(23,13,0)
(20,12,0)
(19,23,0)
(17,18,0)
(22,12,0)
(2,27,0)
(27,12,0)
(27,16,0)
(18,16,0)
(12,15,0)
(16,7,0)
(3,24,0)
(5,15,0)
(18,9,0)
(9,16,0)
(9,12,0)
(28,9,0)
(12,22,1)
(28,6,1)
(8,0,1)
(27,12,1)
(4,8,1)
(18,9,1)
(9,12,1)
(3,12,1)
(11,3,1)
(23,19,1)
(24,11,1)
(22,20,1)
(27,23,1)
(9,28,1)
(6,27,1)
(26,18,1)
(17,9,1)
(0,23,1)
(27,2,1)
(2,4,1)
(19,10,1)
(10,24,1)
(0,24,1)
(9,23,1)
(26,4,1)
(18,17,1)
(9,12,2)
(18,9,2)
(2,4,2)
(9,23,2)
(19,24,2)
(27,12,2)
(27,4,2)
(6,4,2)
(23,24,2)
(9,4,2)
(28,4,2)
(17,4,2)
(18,4,2)
(10,24,2)
(27,23,2)
-----------------------------------
(0,globalFive)
(1,if(globalFive==5)
(2,data)
(3,globalFive)
(4,globalFive==5)
(5,data)
(6,result)
(7,)
(8,5)
(9,result = data)
(10,data)
(11,5)
(12,data = \' \')
(13,)
(14,data = ' ')
(15,)
(16,)
(17,result)
(18,printHexCharLine(result)
(19,CHAR_MAX)
(20,data)
(21,result)
(22,' ')
(23,data = CHAR_MAX)
(24,globalFive==5)
(25,if(globalFive==5)
(26,RET)
(27,++data)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^