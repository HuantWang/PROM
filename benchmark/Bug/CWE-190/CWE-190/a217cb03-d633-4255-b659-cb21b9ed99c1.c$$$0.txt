-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,77,79,83,85,89,91
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
81,82
81,83
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_32_bad()
CWE190_Integer_Overflow__char_rand_square_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }    {        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(40,18,0)
(5,26,0)
(24,3,0)
(10,31,0)
(9,14,0)
(15,9,0)
(5,14,0)
(24,14,0)
(3,24,0)
(28,21,0)
(16,17,0)
(13,10,0)
(37,26,0)
(32,17,0)
(20,42,0)
(2,34,0)
(17,16,0)
(18,42,0)
(20,1,0)
(18,17,0)
(9,5,0)
(7,26,0)
(34,10,0)
(27,6,0)
(1,20,0)
(22,21,0)
(6,27,0)
(11,31,0)
(26,7,0)
(6,31,0)
(30,27,0)
(21,31,0)
(45,24,0)
(38,31,0)
(23,29,0)
(8,1,0)
(39,3,0)
(42,18,0)
(42,10,0)
(43,42,0)
(26,37,0)
(36,16,0)
(33,14,0)
(14,31,0)
(35,5,0)
(3,6,0)
(4,15,0)
(19,20,0)
(15,6,0)
(25,9,0)
(29,34,0)
(17,31,0)
(44,6,0)
(29,1,0)
(12,20,0)
(0,31,0)
(26,5,0)
(1,34,0)
(40,43,1)
(23,1,1)
(41,29,1)
(16,36,1)
(15,4,1)
(32,6,1)
(45,21,1)
(18,17,1)
(22,17,1)
(35,24,1)
(26,7,1)
(27,30,1)
(20,42,1)
(26,37,1)
(20,12,1)
(17,16,1)
(21,28,1)
(29,23,1)
(9,25,1)
(3,39,1)
(18,40,1)
(1,20,1)
(8,42,1)
(12,19,1)
(39,45,1)
(36,32,1)
(3,6,1)
(42,18,1)
(28,22,1)
(9,5,1)
(37,35,1)
(24,3,1)
(4,5,1)
(30,44,1)
(25,15,1)
(43,9,1)
(5,26,1)
(15,6,1)
(19,8,1)
(29,1,1)
(6,27,1)
(17,16,2)
(9,5,2)
(6,27,2)
(24,3,2)
(26,7,2)
(1,20,2)
(18,17,2)
(29,1,2)
(42,18,2)
(3,6,2)
(20,42,2)
(5,26,2)
(26,37,2)
(15,6,2)
-----------------------------------
(0,dataPtr1)
(1,result = data * data)
(2,result)
(3,*dataPtr1)
(4,dataPtr1)
(5,data = (char)
(6,*dataPtr1 = &data)
(7,char)
(8,result)
(9,*dataPtr1 = data)
(10,)
(11,data)
(12,data)
(13,data)
(14,)
(15,*dataPtr1)
(16,&data)
(17,*dataPtr2 = &data)
(18,*dataPtr2)
(19,data)
(20,data * data)
(21,data = ' ')
(22,data)
(23,result)
(24,data = *dataPtr1)
(25,data)
(26,(char)
(27,&data)
(28,' ')
(29,printHexCharLine(result)
(30,data)
(31,)
(32,dataPtr2)
(33,data)
(34,)
(35,data)
(36,data)
(37,RAND32()
(38,dataPtr2)
(39,dataPtr1)
(40,dataPtr2)
(41,RET)
(42,data = *dataPtr2)
(43,data)
(44,dataPtr1)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^