-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_07_bad()
CWE190_Integer_Overflow__char_rand_add_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticFive==5)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(28,4,0)
(22,30,0)
(28,21,0)
(24,28,0)
(19,30,0)
(3,4,0)
(23,7,0)
(15,2,0)
(9,4,0)
(27,13,0)
(7,2,0)
(20,21,0)
(11,14,0)
(30,22,0)
(1,26,0)
(30,19,0)
(5,2,0)
(21,8,0)
(17,14,0)
(2,25,0)
(16,14,0)
(6,26,0)
(12,5,0)
(30,21,0)
(7,28,0)
(28,7,0)
(5,7,0)
(4,14,0)
(21,30,0)
(29,13,0)
(18,28,0)
(9,3,1)
(30,19,1)
(12,7,1)
(28,21,1)
(0,5,1)
(6,4,1)
(22,20,1)
(18,24,1)
(20,26,1)
(4,9,1)
(26,1,1)
(28,4,1)
(7,28,1)
(21,30,1)
(30,22,1)
(23,13,1)
(27,26,1)
(29,27,1)
(5,12,1)
(28,18,1)
(24,23,1)
(13,29,1)
(5,7,1)
(1,6,1)
(27,21,1)
(0,13,1)
(28,4,2)
(30,22,2)
(24,13,2)
(21,30,2)
(20,26,2)
(12,13,2)
(28,21,2)
(5,13,2)
(7,13,2)
(7,28,2)
(22,26,2)
(21,26,2)
(18,13,2)
(28,13,2)
(23,13,2)
(30,19,2)
(5,7,2)
(30,26,2)
-----------------------------------
(0,RET)
(1,5)
(2,)
(3,data)
(4,data = \' \')
(5,printHexCharLine(result)
(6,staticFive)
(7,result = data + 1)
(8,)
(9,' ')
(10,data = ' ')
(11,if(staticFive==5)
(12,result)
(13,staticFive==5)
(14,)
(15,result)
(16,data)
(17,if(staticFive==5)
(18,1)
(19,char)
(20,data)
(21,data = (char)
(22,RAND32()
(23,result)
(24,data)
(25,)
(26,staticFive==5)
(27,staticFive)
(28,data + 1)
(29,5)
(30,(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^