-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_square_03_bad()
{
    int64_t data;
    data = 0LL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,9,11,15,16,19,20,25,27,30,31,37,39,43,45,49,51
-----computeFrom-----
13,14
13,15
18,19
18,20
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_square_03_bad(){    int64_t data;    data = 0LL;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_square_03_bad()
CWE190_Integer_Overflow__int64_t_max_square_03_bad
{    int64_t data;    data = 0LL;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(7,13,0)
(1,13,0)
(12,14,0)
(5,14,0)
(24,0,0)
(9,17,0)
(4,18,0)
(23,3,0)
(20,23,0)
(16,21,0)
(8,21,0)
(17,23,0)
(20,0,0)
(0,20,0)
(15,20,0)
(10,21,0)
(25,21,0)
(22,0,0)
(0,4,0)
(11,4,0)
(19,23,0)
(17,20,0)
(6,4,0)
(12,5,1)
(4,11,1)
(6,14,1)
(24,22,1)
(13,7,1)
(0,4,1)
(1,4,1)
(17,9,1)
(15,13,1)
(7,1,1)
(9,20,1)
(17,20,1)
(1,14,1)
(11,6,1)
(0,24,1)
(14,12,1)
(22,15,1)
(2,17,1)
(20,0,1)
(5,25,1)
(2,13,1)
(20,13,2)
(17,13,2)
(24,13,2)
(9,13,2)
(6,14,2)
(0,4,2)
(17,20,2)
(0,13,2)
(11,14,2)
(4,14,2)
(15,13,2)
(22,13,2)
(20,0,2)
-----------------------------------
(0,data * data)
(1,5)
(2,RET)
(3,)
(4,data = LLONG_MAX)
(5,5)
(6,data)
(7,5)
(8,data)
(9,result)
(10,if(5==5)
(11,LLONG_MAX)
(12,5)
(13,5==5)
(14,5==5)
(15,result)
(16,if(5==5)
(17,printLongLongLine(result)
(18,)
(19,result)
(20,result = data * data)
(21,)
(22,data)
(23,)
(24,data)
(25,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^