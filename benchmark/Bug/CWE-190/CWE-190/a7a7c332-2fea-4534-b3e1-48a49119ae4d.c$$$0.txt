-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
54,55
54,56
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,49,53,55,59,60,64,66,67,68,72,73,74
-----computeFrom-----
12,13
12,14
22,23
22,24
46,47
46,48
57,58
57,59
-----guardedBy-----
48,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_rand_multiply_15_bad()
CWE190_Integer_Overflow__short_rand_multiply_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(16,10,0)
(19,31,0)
(40,23,0)
(33,7,0)
(1,7,0)
(28,4,0)
(4,41,0)
(9,0,0)
(25,30,0)
(24,16,0)
(20,31,0)
(38,19,0)
(30,16,0)
(15,0,0)
(5,23,0)
(39,4,0)
(36,31,0)
(16,30,0)
(6,8,0)
(30,7,0)
(22,7,0)
(11,0,0)
(17,0,0)
(14,7,0)
(32,0,0)
(21,1,0)
(23,4,0)
(16,24,0)
(26,41,0)
(28,41,0)
(34,31,0)
(23,19,0)
(10,16,0)
(12,19,0)
(37,28,0)
(23,30,0)
(29,8,0)
(27,0,0)
(2,32,0)
(35,7,0)
(8,19,0)
(8,30,0)
(4,23,0)
(4,23,1)
(23,30,1)
(3,17,1)
(8,19,1)
(23,19,1)
(14,1,1)
(17,8,1)
(29,13,1)
(35,30,1)
(13,14,1)
(8,6,1)
(3,9,1)
(30,16,1)
(10,25,1)
(25,18,1)
(6,29,1)
(18,19,1)
(23,40,1)
(17,28,1)
(5,39,1)
(8,30,1)
(1,21,1)
(12,38,1)
(37,4,1)
(32,2,1)
(28,4,1)
(9,32,1)
(19,12,1)
(40,5,1)
(28,37,1)
(16,10,1)
(13,35,1)
(39,8,1)
(16,24,1)
(2,13,1)
(21,18,1)
(16,18,2)
(8,30,2)
(23,30,2)
(8,13,2)
(4,23,2)
(29,13,2)
(32,13,2)
(39,8,2)
(16,24,2)
(37,8,2)
(30,16,2)
(2,13,2)
(21,18,2)
(10,18,2)
(8,19,2)
(16,10,2)
(35,18,2)
(4,8,2)
(23,19,2)
(9,13,2)
(6,13,2)
(14,18,2)
(25,18,2)
(28,8,2)
(1,18,2)
(28,4,2)
(5,8,2)
(23,8,2)
(17,13,2)
(30,18,2)
(40,8,2)
-----------------------------------
(0,)
(1,printLine("Benign, fixed string")
(2,"Benign, fixed string")
(3,RET)
(4,result = data * 2)
(5,data)
(6,0)
(7,)
(8,data > 0)
(9,break;)
(10,RAND32()
(11,if(data > 0)
(12,0)
(13,7)
(14,break;)
(15,case 7:)
(16,(short)
(17,break;)
(18,6)
(19,data = 0)
(20,switch(6)
(21,"Benign, fixed string")
(22,case 6:)
(23,data * 2)
(24,short)
(25,data)
(26,result)
(27,default:)
(28,printIntLine(result)
(29,data)
(30,data = (short)
(31,)
(32,printLine("Benign, fixed string")
(33,default:)
(34,data)
(35,break;)
(36,switch(7)
(37,result)
(38,data)
(39,result)
(40,2)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^