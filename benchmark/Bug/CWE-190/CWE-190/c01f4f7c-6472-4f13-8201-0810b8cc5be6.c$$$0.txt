-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_18_bad()
{
    int64_t data;
    data = 0LL;
    goto source;
source:
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = LLONG_MAX;
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
        int64_t result = data * 2;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
22,23
22,24
23,24
25,26
27,28
29,30
29,31
31,32
31,33
32,33
32,34
33,34
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,9,11,15,16,18,20,24,26,28,30,34,35,40,42,46,47,51,53
-----computeFrom-----
13,14
13,15
22,23
22,24
32,33
32,34
44,45
44,46
-----guardedBy-----
34,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_18_bad(){    int64_t data;    data = 0LL;    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_18_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_18_bad
{    int64_t data;    data = 0LL;    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
goto source;
source
source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;
source
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(13,20,0)
(22,1,0)
(1,5,0)
(23,15,0)
(16,5,0)
(21,15,0)
(14,15,0)
(4,15,0)
(20,15,0)
(18,1,0)
(10,13,0)
(22,5,0)
(7,20,0)
(13,1,0)
(8,7,0)
(19,15,0)
(1,13,0)
(12,7,0)
(0,15,0)
(9,15,0)
(11,20,0)
(6,13,0)
(3,20,0)
(2,22,0)
(17,22,1)
(1,13,1)
(13,20,1)
(11,3,1)
(7,20,1)
(10,6,1)
(17,7,1)
(2,1,1)
(18,7,1)
(12,9,1)
(3,0,1)
(22,2,1)
(20,11,1)
(13,10,1)
(8,12,1)
(22,1,1)
(7,8,1)
(9,20,1)
(6,18,1)
(0,19,1)
(2,7,2)
(10,7,2)
(13,20,2)
(6,7,2)
(7,20,2)
(18,7,2)
(22,1,2)
(1,13,2)
(1,7,2)
(13,7,2)
(22,7,2)
-----------------------------------
(0,goto source;)
(1,result = data * 2)
(2,result)
(3,data)
(4,if(data > 0)
(5,)
(6,data)
(7,data > 0)
(8,0)
(9,goto sink;)
(10,2)
(11,LLONG_MAX)
(12,data)
(13,data * 2)
(14,data)
(15,)
(16,result)
(17,RET)
(18,result)
(19,L)
(20,data = LLONG_MAX)
(21,source:)
(22,printLongLongLine(result)
(23,sink:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^