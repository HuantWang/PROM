-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_31_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        int dataCopy = data;
        int data = dataCopy;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
27,28
27,29
27,30
28,29
28,30
29,30
29,31
29,32
29,33
30,31
32,33
34,35
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
56,57
56,58
56,59
57,58
58,59
58,60
60,61
60,62
62,63
63,64
65,66
66,67
66,68
68,69
68,70
70,71
71,72
73,74
73,75
74,75
75,76
75,77
77,78
77,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,14,15,19,21,24,26,31,33,35,37,39,44,47,49,54,55,59,61,64,67,69,72,76,78,82,84,88,90
-----computeFrom-----
12,13
12,14
28,29
28,30
42,43
42,44
80,81
80,82
-----guardedBy-----
33,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_31_bad(){    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_31_bad()
CWE190_Integer_Overflow__int_fgets_square_31_bad
{    int data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        int dataCopy = data;        int data = dataCopy;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,31,0)
(43,26,0)
(1,31,0)
(20,33,0)
(31,1,0)
(35,14,0)
(17,7,0)
(40,1,0)
(13,35,0)
(14,25,0)
(24,26,0)
(21,1,0)
(27,29,0)
(16,4,0)
(39,5,0)
(37,30,0)
(41,13,0)
(33,25,0)
(2,33,0)
(17,26,0)
(35,2,0)
(32,25,0)
(7,17,0)
(29,37,0)
(29,25,0)
(7,38,0)
(33,29,0)
(12,16,0)
(29,7,0)
(26,5,0)
(5,30,0)
(34,1,0)
(28,14,0)
(42,7,0)
(11,17,0)
(8,35,0)
(1,26,0)
(36,5,0)
(9,25,0)
(3,2,0)
(15,2,0)
(6,30,0)
(10,33,0)
(25,30,0)
(13,14,0)
(23,29,0)
(19,37,0)
(0,37,0)
(2,35,0)
(37,0,1)
(15,8,1)
(27,23,1)
(18,13,1)
(31,22,1)
(11,42,1)
(31,1,1)
(13,41,1)
(20,29,1)
(16,12,1)
(33,29,1)
(29,37,1)
(17,11,1)
(23,7,1)
(40,34,1)
(8,33,1)
(2,33,1)
(34,21,1)
(1,26,1)
(0,19,1)
(35,2,1)
(42,31,1)
(21,26,1)
(23,16,1)
(7,17,1)
(13,35,1)
(3,15,1)
(12,31,1)
(26,24,1)
(29,27,1)
(10,20,1)
(29,7,1)
(41,35,1)
(2,3,1)
(17,26,1)
(43,37,1)
(22,1,1)
(1,40,1)
(24,43,1)
(33,10,1)
(17,26,2)
(35,2,2)
(1,26,2)
(29,7,2)
(42,31,2)
(11,31,2)
(13,35,2)
(31,1,2)
(16,31,2)
(33,29,2)
(7,17,2)
(2,33,2)
(29,37,2)
(12,31,2)
(17,31,2)
(7,31,2)
-----------------------------------
(0,0)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,data * data)
(3,data)
(4,)
(5,)
(6,data)
(7,data = atoi(inputBuffer)
(8,result)
(9,data)
(10,dataCopy)
(11,inputBuffer)
(12,"fgets()
(13,printIntLine(result)
(14,)
(15,data)
(16,printLine("fgets()
(17,atoi(inputBuffer)
(18,RET)
(19,data)
(20,data)
(21,inputBuffer)
(22,NULL)
(23,dataCopy)
(24,"")
(25,)
(26,inputBuffer[CHAR_ARRAY_SIZE] = "")
(27,data)
(28,result)
(29,dataCopy = data)
(30,)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,dataCopy)
(33,data = dataCopy)
(34,CHAR_ARRAY_SIZE)
(35,result = data * data)
(36,inputBuffer)
(37,data = 0)
(38,)
(39,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,stdin)
(41,result)
(42,data)
(43,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^