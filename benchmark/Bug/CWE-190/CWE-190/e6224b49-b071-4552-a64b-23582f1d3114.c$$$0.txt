-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_add_04_bad()
{
    short data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_add_04_bad(){    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_add_04_bad()
CWE190_Integer_Overflow__short_rand_add_04_bad
{    short data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,16,0)
(0,16,0)
(1,10,0)
(22,18,0)
(11,6,0)
(7,6,0)
(2,21,0)
(0,18,0)
(5,17,0)
(24,0,0)
(19,0,0)
(8,1,0)
(16,17,0)
(1,8,0)
(2,1,0)
(14,19,0)
(25,16,0)
(18,23,0)
(16,0,0)
(10,1,0)
(16,2,0)
(19,18,0)
(13,2,0)
(9,6,0)
(12,17,0)
(17,6,0)
(1,2,0)
(15,4,1)
(16,25,1)
(24,15,1)
(13,4,1)
(16,2,1)
(0,16,1)
(1,10,1)
(20,24,1)
(3,15,1)
(16,17,1)
(17,5,1)
(2,1,1)
(1,8,1)
(4,17,1)
(19,0,1)
(10,13,1)
(14,0,1)
(3,19,1)
(15,2,1)
(25,20,1)
(5,12,1)
(19,14,1)
(10,4,2)
(0,16,2)
(2,1,2)
(0,15,2)
(24,15,2)
(19,0,2)
(25,15,2)
(16,15,2)
(2,4,2)
(20,15,2)
(16,17,2)
(13,4,2)
(1,10,2)
(1,8,2)
(19,15,2)
(16,2,2)
(1,4,2)
(14,15,2)
-----------------------------------
(0,result = data + 1)
(1,(short)
(2,data = (short)
(3,RET)
(4,STATIC_CONST_TRUE)
(5,0)
(6,)
(7,data)
(8,short)
(9,if(STATIC_CONST_TRUE)
(10,RAND32()
(11,if(STATIC_CONST_TRUE)
(12,data)
(13,data)
(14,result)
(15,STATIC_CONST_TRUE)
(16,data + 1)
(17,data = 0)
(18,)
(19,printIntLine(result)
(20,data)
(21,)
(22,result)
(23,)
(24,result)
(25,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^