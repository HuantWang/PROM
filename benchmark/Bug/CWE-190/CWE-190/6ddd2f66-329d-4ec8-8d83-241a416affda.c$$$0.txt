-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_34_bad()
{
    unsigned int data;
    CWE190_Integer_Overflow__unsigned_int_max_multiply_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = UINT_MAX;
    myUnion.unionFirst = data;
    {
        unsigned int data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,51,55,57,61,62,66,68
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
48,49
48,50
59,60
59,61
-----guardedBy-----
50,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_34_bad(){    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_max_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_34_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_34_bad
{    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_max_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
CWE190_Integer_Overflow__unsigned_int_max_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_max_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_max_multiply_34_unionType
CWE190_Integer_Overflow__unsigned_int_max_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int data = myUnion.unionSecond;
unsigned int data = myUnion.unionSecond;
unsigned int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(33,14,0)
(18,24,0)
(11,30,0)
(29,10,0)
(15,23,0)
(25,26,0)
(32,10,0)
(27,32,0)
(5,33,0)
(28,26,0)
(8,23,0)
(19,14,0)
(5,29,0)
(7,6,0)
(22,34,0)
(4,5,0)
(31,10,0)
(32,29,0)
(23,26,0)
(16,33,0)
(29,5,0)
(13,6,0)
(0,8,0)
(3,30,0)
(33,34,0)
(9,8,0)
(23,24,0)
(6,33,0)
(34,24,0)
(26,24,0)
(14,33,0)
(20,14,0)
(2,24,0)
(12,34,0)
(17,5,0)
(30,24,0)
(1,29,0)
(23,15,1)
(29,5,1)
(33,14,1)
(27,29,1)
(25,28,1)
(13,7,1)
(28,30,1)
(15,8,1)
(23,26,1)
(9,0,1)
(5,33,1)
(32,29,1)
(30,3,1)
(32,27,1)
(26,25,1)
(14,20,1)
(4,1,1)
(8,9,1)
(1,6,1)
(0,26,1)
(6,13,1)
(19,16,1)
(3,11,1)
(21,6,1)
(6,33,1)
(20,19,1)
(16,23,1)
(17,4,1)
(7,33,1)
(21,32,1)
(5,17,1)
(29,5,2)
(32,6,2)
(1,6,2)
(4,6,2)
(27,6,2)
(23,26,2)
(17,6,2)
(32,29,2)
(5,6,2)
(6,33,2)
(5,33,2)
(33,14,2)
(29,6,2)
-----------------------------------
(0,myUnion)
(1,result)
(2,data)
(3,0)
(4,data)
(5,data * 2)
(6,data > 0)
(7,data)
(8,myUnion.unionFirst)
(9,unionFirst)
(10,)
(11,data)
(12,data)
(13,0)
(14,myUnion.unionSecond)
(15,data)
(16,data)
(17,2)
(18,myUnion)
(19,myUnion)
(20,unionSecond)
(21,RET)
(22,if(data > 0)
(23,myUnion.unionFirst = data)
(24,)
(25,UINT_MAX)
(26,data = UINT_MAX)
(27,result)
(28,data)
(29,result = data * 2)
(30,data = 0)
(31,result)
(32,printUnsignedLine(result)
(33,data = myUnion.unionSecond)
(34,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^