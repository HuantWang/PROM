-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_13_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,32,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
30,31
30,32
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_13_bad(){    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_13_bad()
CWE190_Integer_Overflow__int_rand_square_13_bad
{    int data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(12,0,0)
(26,9,0)
(10,25,0)
(12,7,0)
(8,0,0)
(23,1,0)
(19,1,0)
(7,12,0)
(25,5,0)
(6,12,0)
(18,7,0)
(21,5,0)
(13,22,0)
(15,5,0)
(22,13,0)
(0,20,0)
(4,5,0)
(27,11,0)
(17,22,0)
(24,25,0)
(16,9,0)
(3,7,0)
(11,0,0)
(11,12,0)
(22,14,0)
(7,22,0)
(7,25,0)
(19,23,1)
(26,1,1)
(7,25,1)
(24,10,1)
(23,25,1)
(17,1,1)
(25,24,1)
(3,18,1)
(26,22,1)
(11,12,1)
(7,3,1)
(12,7,1)
(16,26,1)
(22,13,1)
(6,9,1)
(18,6,1)
(27,12,1)
(11,27,1)
(13,17,1)
(9,16,1)
(1,19,1)
(2,11,1)
(2,9,1)
(7,22,1)
(17,1,2)
(12,7,2)
(7,22,2)
(18,9,2)
(11,12,2)
(13,1,2)
(22,13,2)
(7,9,2)
(7,25,2)
(22,1,2)
(3,9,2)
(27,9,2)
(11,9,2)
(6,9,2)
(12,9,2)
-----------------------------------
(0,)
(1,GLOBAL_CONST_FIVE==5)
(2,RET)
(3,data)
(4,data)
(5,)
(6,result)
(7,data * data)
(8,result)
(9,GLOBAL_CONST_FIVE==5)
(10,data)
(11,printIntLine(result)
(12,result = data * data)
(13,RAND32()
(14,)
(15,if(GLOBAL_CONST_FIVE==5)
(16,5)
(17,data)
(18,data)
(19,5)
(20,)
(21,if(GLOBAL_CONST_FIVE==5)
(22,data = RAND32()
(23,GLOBAL_CONST_FIVE)
(24,0)
(25,data = 0)
(26,GLOBAL_CONST_FIVE)
(27,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^