-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,43,46,48,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_13_bad()
CWE190_Integer_Overflow__char_rand_preinc_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(2,11,0)
(18,5,0)
(18,11,0)
(10,12,0)
(16,11,0)
(16,21,0)
(11,16,0)
(11,20,0)
(15,22,0)
(9,22,0)
(6,4,0)
(18,22,0)
(9,2,0)
(26,2,0)
(7,27,0)
(21,16,0)
(2,22,0)
(29,2,0)
(3,5,0)
(25,18,0)
(0,12,0)
(13,4,0)
(28,9,0)
(19,27,0)
(16,23,0)
(23,16,0)
(2,5,0)
(30,11,0)
(5,27,0)
(22,1,0)
(14,27,0)
(17,5,0)
(18,5,1)
(0,5,1)
(9,2,1)
(26,18,1)
(10,0,1)
(12,10,1)
(17,3,1)
(2,5,1)
(8,4,1)
(16,23,1)
(18,25,1)
(11,16,1)
(8,9,1)
(28,2,1)
(18,11,1)
(25,4,1)
(2,11,1)
(21,30,1)
(29,26,1)
(5,17,1)
(13,11,1)
(6,13,1)
(13,12,1)
(2,29,1)
(4,6,1)
(16,21,1)
(30,12,1)
(9,28,1)
(16,23,2)
(26,4,2)
(16,21,2)
(30,12,2)
(25,4,2)
(9,2,2)
(2,11,2)
(11,12,2)
(29,4,2)
(21,12,2)
(18,4,2)
(2,4,2)
(28,4,2)
(11,16,2)
(9,4,2)
(2,5,2)
(16,12,2)
(18,11,2)
(18,5,2)
-----------------------------------
(0,GLOBAL_CONST_FIVE)
(1,)
(2,result = data)
(3,data)
(4,GLOBAL_CONST_FIVE==5)
(5,data = ' ')
(6,5)
(7,data)
(8,RET)
(9,printHexCharLine(result)
(10,5)
(11,data = (char)
(12,GLOBAL_CONST_FIVE==5)
(13,GLOBAL_CONST_FIVE)
(14,if(GLOBAL_CONST_FIVE==5)
(15,result)
(16,(char)
(17,' ')
(18,++data)
(19,if(GLOBAL_CONST_FIVE==5)
(20,)
(21,RAND32()
(22,)
(23,char)
(24,data = \' \')
(25,data)
(26,result)
(27,)
(28,result)
(29,data)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^