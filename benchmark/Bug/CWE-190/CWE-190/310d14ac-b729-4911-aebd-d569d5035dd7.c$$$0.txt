-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_add_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < SHRT_MAX)
        {
            short result = data + 1;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
65,66
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,46,48,52,53,57,59,64,66,70,72,76,77,81,83,88,89
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
50,51
50,52
62,63
62,64
74,75
74,76
-----guardedBy-----
64,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_add_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__short_rand_add_12_bad()
CWE190_Integer_Overflow__short_rand_add_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < SHRT_MAX)        {            short result = data + 1;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(10,36,0)
(24,30,0)
(20,9,0)
(39,19,0)
(15,38,0)
(22,6,0)
(14,25,0)
(18,38,0)
(40,8,0)
(30,44,0)
(3,10,0)
(19,15,0)
(19,10,0)
(9,45,0)
(26,19,0)
(40,9,0)
(28,12,0)
(38,5,0)
(16,10,0)
(13,6,0)
(3,8,0)
(21,3,0)
(27,3,0)
(16,15,0)
(17,15,0)
(34,16,0)
(3,15,0)
(0,14,0)
(43,6,0)
(8,3,0)
(30,26,0)
(15,29,0)
(19,26,0)
(31,19,0)
(23,43,0)
(7,26,0)
(26,44,0)
(1,40,0)
(46,6,0)
(8,9,0)
(38,15,0)
(35,16,0)
(38,18,0)
(32,10,0)
(11,44,0)
(37,43,0)
(42,8,0)
(5,38,0)
(2,10,0)
(38,18,1)
(41,30,1)
(18,17,1)
(33,10,1)
(38,5,1)
(8,3,1)
(1,8,1)
(16,34,1)
(30,24,1)
(3,27,1)
(15,38,1)
(4,43,1)
(19,15,1)
(3,15,1)
(17,4,1)
(35,33,1)
(34,35,1)
(37,23,1)
(32,4,1)
(10,2,1)
(43,37,1)
(41,40,1)
(39,7,1)
(40,8,1)
(14,0,1)
(31,39,1)
(40,1,1)
(30,26,1)
(2,32,1)
(16,15,1)
(16,10,1)
(7,16,1)
(19,31,1)
(42,33,1)
(19,10,1)
(21,42,1)
(33,15,1)
(24,26,1)
(3,10,1)
(0,16,1)
(41,14,1)
(26,19,1)
(27,21,1)
(31,16,2)
(16,10,2)
(0,16,2)
(19,16,2)
(21,33,2)
(8,3,2)
(16,15,2)
(27,33,2)
(32,4,2)
(24,16,2)
(3,15,2)
(26,16,2)
(3,10,2)
(38,18,2)
(19,15,2)
(39,16,2)
(17,4,2)
(2,4,2)
(7,16,2)
(30,16,2)
(35,33,2)
(8,33,2)
(10,4,2)
(40,33,2)
(15,4,2)
(42,33,2)
(38,4,2)
(16,33,2)
(26,19,2)
(18,4,2)
(19,10,2)
(34,33,2)
(30,26,2)
(38,5,2)
(14,16,2)
(40,8,2)
(15,38,2)
(3,33,2)
(1,33,2)
-----------------------------------
(0,"data value is too large to perform arithmetic safely.")
(1,result)
(2,2)
(3,data + 1)
(4,globalReturnsTrueOrFalse()
(5,short)
(6,)
(7,result)
(8,result = data + 1)
(9,)
(10,data = 2)
(11,result)
(12,)
(13,if(globalReturnsTrueOrFalse()
(14,printLine("data value is too large to perform arithmetic safely.")
(15,data = (short)
(16,data < SHRT_MAX)
(17,data)
(18,RAND32()
(19,data + 1)
(20,result)
(21,data)
(22,if(globalReturnsTrueOrFalse()
(23,data)
(24,result)
(25,)
(26,result = data + 1)
(27,1)
(28,if (data < SHRT_MAX)
(29,)
(30,printIntLine(result)
(31,1)
(32,data)
(33,globalReturnsTrueOrFalse()
(34,SHRT_MAX)
(35,data)
(36,)
(37,0)
(38,(short)
(39,data)
(40,printIntLine(result)
(41,RET)
(42,result)
(43,data = 0)
(44,)
(45,)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^