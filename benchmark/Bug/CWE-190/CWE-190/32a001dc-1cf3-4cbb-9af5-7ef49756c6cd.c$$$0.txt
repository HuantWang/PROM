-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_32_bad()
{
    char data;
    char *dataPtr1 = &data;
    char *dataPtr2 = &data;
    data = ' ';
    {
        char data = *dataPtr1;
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        *dataPtr1 = data;
    }
    {
        char data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
54,55
55,56
57,58
58,59
58,60
59,60
60,61
62,63
64,65
64,66
65,66
66,67
66,68
68,69
68,70
70,71
71,72
72,73
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
81,82
81,83
83,84
83,85
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,53,56,61,63,67,69,73,77,78,82,84,88,89,93,95
-----computeFrom-----
32,33
32,34
47,48
47,49
58,59
58,60
75,76
75,77
86,87
86,88
-----guardedBy-----
77,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_32_bad(){    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }    {        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_32_bad()
CWE190_Integer_Overflow__char_rand_multiply_32_bad
{    char data;    char *dataPtr1 = &data;    char *dataPtr2 = &data;    data = ' ';    {        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }    {        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
char *dataPtr1 = &data;
char *dataPtr1 = &data;
char
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
char *dataPtr2 = &data;
char *dataPtr2 = &data;
char
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = ' ';
data = ' '
data
data
' '
{        char data = *dataPtr1;        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        *dataPtr1 = data;    }
char data = *dataPtr1;
char data = *dataPtr1;
char
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char data = *dataPtr2;
char data = *dataPtr2;
char
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(46,35,0)
(44,28,0)
(42,22,0)
(3,11,0)
(25,48,0)
(29,21,0)
(21,13,0)
(48,22,0)
(21,42,0)
(0,47,0)
(33,49,0)
(23,14,0)
(24,18,0)
(13,7,0)
(10,30,0)
(49,22,0)
(16,48,0)
(14,23,0)
(43,11,0)
(6,41,0)
(1,14,0)
(8,6,0)
(28,47,0)
(19,22,0)
(15,21,0)
(47,27,0)
(11,22,0)
(39,22,0)
(7,31,0)
(41,18,0)
(9,35,0)
(20,27,0)
(37,23,0)
(36,49,0)
(26,7,0)
(35,46,0)
(6,30,0)
(4,28,0)
(13,42,0)
(41,30,0)
(29,14,0)
(27,47,0)
(17,43,0)
(45,29,0)
(40,18,0)
(35,14,0)
(32,46,0)
(14,22,0)
(18,47,0)
(7,26,0)
(2,22,0)
(7,13,0)
(18,41,0)
(34,42,0)
(31,7,0)
(11,43,0)
(27,11,0)
(47,49,0)
(5,41,0)
(46,42,0)
(38,13,0)
(21,13,1)
(27,20,1)
(41,18,1)
(28,44,1)
(25,16,1)
(17,3,1)
(47,27,1)
(24,5,1)
(32,48,1)
(29,45,1)
(7,26,1)
(44,4,1)
(35,9,1)
(46,35,1)
(37,1,1)
(31,38,1)
(14,23,1)
(5,28,1)
(0,21,1)
(21,15,1)
(20,0,1)
(27,11,1)
(6,8,1)
(15,29,1)
(8,41,1)
(12,6,1)
(29,14,1)
(9,32,1)
(23,37,1)
(48,25,1)
(43,17,1)
(45,13,1)
(16,11,1)
(11,43,1)
(38,46,1)
(6,41,1)
(40,24,1)
(4,47,1)
(18,40,1)
(7,31,1)
(3,14,1)
(13,7,1)
(18,47,1)
(12,28,1)
(28,47,1)
(35,14,1)
(27,11,2)
(7,26,2)
(14,23,2)
(18,28,2)
(18,47,2)
(8,28,2)
(46,35,2)
(41,28,2)
(5,28,2)
(6,41,2)
(28,47,2)
(29,14,2)
(35,14,2)
(13,7,2)
(21,13,2)
(7,31,2)
(11,43,2)
(47,27,2)
(24,28,2)
(40,28,2)
(41,18,2)
(6,28,2)
-----------------------------------
(0,data)
(1,dataPtr1)
(2,dataPtr2)
(3,dataPtr2)
(4,data)
(5,result)
(6,printHexCharLine(result)
(7,(char)
(8,result)
(9,dataPtr1)
(10,result)
(11,*dataPtr2 = &data)
(12,RET)
(13,data = (char)
(14,*dataPtr1 = &data)
(15,data)
(16,data)
(17,data)
(18,data * 2)
(19,dataPtr1)
(20,dataPtr2)
(21,*dataPtr1 = data)
(22,)
(23,&data)
(24,data)
(25,' ')
(26,char)
(27,*dataPtr2)
(28,data > 0)
(29,*dataPtr1)
(30,)
(31,RAND32()
(32,data)
(33,if(data > 0)
(34,data)
(35,*dataPtr1)
(36,data)
(37,data)
(38,data)
(39,data)
(40,2)
(41,result = data * 2)
(42,)
(43,&data)
(44,0)
(45,dataPtr1)
(46,data = *dataPtr1)
(47,data = *dataPtr2)
(48,data = ' ')
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^