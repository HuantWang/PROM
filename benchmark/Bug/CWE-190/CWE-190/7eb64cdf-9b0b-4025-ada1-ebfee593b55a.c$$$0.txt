-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_03_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(27,21,0)
(11,33,0)
(3,2,0)
(2,7,0)
(17,1,0)
(8,32,0)
(12,27,0)
(18,6,0)
(4,11,0)
(22,33,0)
(1,21,0)
(11,2,0)
(0,27,0)
(21,27,0)
(1,28,0)
(23,22,0)
(26,21,0)
(31,33,0)
(21,28,0)
(29,22,0)
(16,2,0)
(25,5,0)
(27,33,0)
(33,6,0)
(9,30,0)
(14,28,0)
(20,5,0)
(24,6,0)
(13,33,0)
(2,11,0)
(15,30,0)
(19,6,0)
(15,2,1)
(11,4,1)
(21,27,1)
(10,22,1)
(33,31,1)
(10,1,1)
(27,12,1)
(1,17,1)
(11,33,1)
(0,26,1)
(26,22,1)
(30,9,1)
(10,30,1)
(9,15,1)
(5,20,1)
(15,5,1)
(22,29,1)
(31,13,1)
(23,30,1)
(16,5,1)
(17,21,1)
(3,16,1)
(4,3,1)
(29,23,1)
(25,33,1)
(12,0,1)
(1,21,1)
(27,33,1)
(2,11,1)
(22,33,1)
(20,25,1)
(2,5,2)
(21,22,2)
(22,33,2)
(1,22,2)
(27,22,2)
(3,5,2)
(27,33,2)
(21,27,2)
(12,22,2)
(11,33,2)
(4,5,2)
(17,22,2)
(26,22,2)
(23,30,2)
(11,5,2)
(1,21,2)
(29,30,2)
(0,22,2)
(16,5,2)
(22,30,2)
(2,11,2)
-----------------------------------
(0,data)
(1,printIntLine(result)
(2,fscanf (stdin, "%hd", &data)
(3,"%hd")
(4,data)
(5,5==5)
(6,)
(7,)
(8,if(data > 0)
(9,5)
(10,RET)
(11,&data)
(12,2)
(13,data)
(14,result)
(15,5)
(16,stdin)
(17,result)
(18,data)
(19,if(5==5)
(20,5)
(21,result = data * 2)
(22,data > 0)
(23,data)
(24,if(5==5)
(25,5)
(26,result)
(27,data * 2)
(28,)
(29,0)
(30,5==5)
(31,0)
(32,)
(33,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^