-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_03_bad()
{
    short data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_03_bad(){    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_03_bad()
CWE190_Integer_Overflow__short_max_square_03_bad
{    short data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,3,0)
(5,16,0)
(9,11,0)
(15,23,0)
(1,3,0)
(17,6,0)
(4,5,0)
(21,1,0)
(27,23,0)
(17,5,0)
(13,19,0)
(8,19,0)
(14,9,0)
(23,1,0)
(24,17,0)
(23,9,0)
(25,6,0)
(22,1,0)
(18,3,0)
(6,5,0)
(7,12,0)
(0,3,0)
(6,23,0)
(26,12,0)
(2,9,0)
(23,6,0)
(8,9,1)
(15,25,1)
(19,13,1)
(26,7,1)
(23,27,1)
(12,26,1)
(21,22,1)
(25,19,1)
(8,12,1)
(6,23,1)
(1,21,1)
(24,6,1)
(2,12,1)
(9,14,1)
(10,17,1)
(13,8,1)
(23,1,1)
(17,24,1)
(10,19,1)
(17,6,1)
(14,2,1)
(23,9,1)
(7,1,1)
(27,15,1)
(17,19,2)
(14,12,2)
(6,23,2)
(23,1,2)
(15,19,2)
(23,9,2)
(27,19,2)
(25,19,2)
(23,19,2)
(9,12,2)
(6,19,2)
(17,6,2)
(2,12,2)
(24,19,2)
-----------------------------------
(0,data)
(1,data = 0)
(2,data)
(3,)
(4,result)
(5,)
(6,result = data * data)
(7,5)
(8,5)
(9,data = SHRT_MAX)
(10,RET)
(11,)
(12,5==5)
(13,5)
(14,SHRT_MAX)
(15,data)
(16,)
(17,printIntLine(result)
(18,if(5==5)
(19,5==5)
(20,if(5==5)
(21,0)
(22,data)
(23,data * data)
(24,result)
(25,result)
(26,5)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^