-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_01_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        short result = data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
30,31
32,33
33,34
33,35
35,36
35,37
37,38
38,39
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,31,34,36,39,43,45
-----computeFrom-----
12,13
12,14
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_01_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        short result = data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_rand_postinc_01_bad()
CWE190_Integer_Overflow__short_rand_postinc_01_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        short result = data;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        short result = data;        printIntLine(result);    }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,1,0)
(8,17,0)
(2,6,0)
(13,1,0)
(17,16,0)
(1,16,0)
(10,6,0)
(0,2,0)
(19,16,0)
(1,6,0)
(15,14,0)
(2,0,0)
(11,9,0)
(16,12,0)
(7,1,0)
(6,2,0)
(14,12,0)
(9,16,0)
(6,12,0)
(2,3,0)
(18,12,0)
(3,2,0)
(17,6,0)
(4,14,0)
(1,7,1)
(8,6,1)
(2,0,1)
(3,10,1)
(1,6,1)
(17,8,1)
(14,15,1)
(9,11,1)
(10,14,1)
(11,1,1)
(17,6,1)
(15,4,1)
(9,1,1)
(13,17,1)
(5,9,1)
(7,13,1)
(6,2,1)
(2,3,1)
(1,6,2)
(2,0,2)
(9,1,2)
(6,2,2)
(17,6,2)
(2,3,2)
-----------------------------------
(0,short)
(1,result = data)
(2,(short)
(3,RAND32()
(4,data)
(5,RET)
(6,data = (short)
(7,data)
(8,data)
(9,printIntLine(result)
(10,data)
(11,result)
(12,)
(13,result)
(14,data = 0)
(15,0)
(16,)
(17,data++)
(18,data)
(19,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^