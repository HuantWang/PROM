-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_32_bad()
{
    int64_t data;
    int64_t *dataPtr1 = &data;
    int64_t *dataPtr2 = &data;
    data = 0LL;
    {
        int64_t data = *dataPtr1;
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
        *dataPtr1 = data;
    }
    {
        int64_t data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
48,49
50,51
51,52
52,53
52,54
53,54
54,55
56,57
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,9,11,15,17,18,22,26,28,29,33,37,38,43,45,49,55,57,62,64,68,73,75,79,81,85,87
-----computeFrom-----
35,36
35,37
52,53
52,54
77,78
77,79
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ProblemStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_32_bad(){    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_square_32_bad()
CWE190_Integer_Overflow__int64_t_fscanf_square_32_bad
{    int64_t data;    int64_t *dataPtr1 = &data;    int64_t *dataPtr2 = &data;    data = 0LL;    {        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        *dataPtr1 = data;    }    {        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
int64_t *dataPtr1 = &data;
int64_t *dataPtr1 = &data;
int64_t
int64_t
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int64_t *dataPtr2 = &data;
int64_t *dataPtr2 = &data;
int64_t
int64_t
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0LL;
data = 0LL
data
data
0LL
{        int64_t data = *dataPtr1;        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        *dataPtr1 = data;    }
int64_t data = *dataPtr1;
int64_t data = *dataPtr1;
int64_t
int64_t
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
fscanf (stdin, "%" SCNd64, &data);
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
int64_t data = *dataPtr2;
int64_t data = *dataPtr2;
int64_t
int64_t
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(28,38,0)
(13,14,0)
(8,1,0)
(12,22,0)
(26,12,0)
(27,5,0)
(9,5,0)
(10,20,0)
(7,12,0)
(2,23,0)
(24,9,0)
(11,38,0)
(0,21,0)
(29,15,0)
(18,29,0)
(4,23,0)
(32,17,0)
(20,17,0)
(9,29,0)
(30,22,0)
(38,11,0)
(33,17,0)
(36,11,0)
(20,37,0)
(29,14,0)
(35,33,0)
(12,5,0)
(25,2,0)
(34,37,0)
(5,9,0)
(23,14,0)
(17,14,0)
(3,15,0)
(6,14,0)
(37,38,0)
(21,22,0)
(16,14,0)
(22,2,0)
(11,17,0)
(22,12,0)
(37,1,0)
(21,2,0)
(17,33,0)
(31,14,0)
(15,29,0)
(1,14,0)
(5,23,0)
(38,1,0)
(24,27,1)
(28,16,1)
(5,9,1)
(38,11,1)
(16,29,1)
(7,30,1)
(21,22,1)
(17,33,1)
(37,38,1)
(35,32,1)
(36,28,1)
(18,17,1)
(20,17,1)
(21,0,1)
(10,38,1)
(37,34,1)
(22,12,1)
(9,29,1)
(34,20,1)
(11,17,1)
(12,26,1)
(29,15,1)
(27,37,1)
(11,36,1)
(33,35,1)
(9,24,1)
(20,10,1)
(19,21,1)
(30,5,1)
(12,5,1)
(26,7,1)
(15,3,1)
(0,22,1)
(3,18,1)
(17,33,2)
(20,17,2)
(12,5,2)
(22,12,2)
(11,17,2)
(37,38,2)
(38,11,2)
(29,15,2)
(21,22,2)
(9,29,2)
(5,9,2)
-----------------------------------
(0,result)
(1,)
(2,)
(3,data)
(4,data)
(5,data = *dataPtr2)
(6,dataPtr2)
(7,data)
(8,data)
(9,*dataPtr2)
(10,dataPtr1)
(11,*dataPtr1)
(12,data * data)
(13,dataPtr1)
(14,)
(15,&data)
(16,L)
(17,*dataPtr1 = &data)
(18,dataPtr2)
(19,RET)
(20,*dataPtr1)
(21,printLongLongLine(result)
(22,result = data * data)
(23,)
(24,dataPtr2)
(25,result)
(26,data)
(27,data)
(28,data)
(29,*dataPtr2 = &data)
(30,result)
(31,data)
(32,dataPtr1)
(33,&data)
(34,data)
(35,data)
(36,dataPtr1)
(37,*dataPtr1 = data)
(38,data = *dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^