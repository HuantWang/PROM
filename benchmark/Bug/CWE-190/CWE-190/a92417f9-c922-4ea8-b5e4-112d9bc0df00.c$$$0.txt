-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_rand_multiply_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Set data to a random value */
    data = RAND32();
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
48,50
49,50
49,51
50,51
53,54
53,55
54,55
55,56
55,57
57,58
57,59
59,60
60,61
60,62
61,62
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,33,34,36,40,42,46,47,51,52,56,58,62,63,67,69
-----computeFrom-----
18,19
18,20
23,24
23,25
30,31
30,32
49,50
49,51
60,61
60,62
-----guardedBy-----
51,62
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_34_bad(){    int data;    CWE190_Integer_Overflow__int_rand_multiply_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_34_bad()
CWE190_Integer_Overflow__int_rand_multiply_34_bad
{    int data;    CWE190_Integer_Overflow__int_rand_multiply_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Set data to a random value */    data = RAND32();    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int_rand_multiply_34_unionType
CWE190_Integer_Overflow__int_rand_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(21,8,0)
(30,18,0)
(10,11,0)
(1,9,0)
(22,31,0)
(18,14,0)
(7,2,0)
(20,31,0)
(17,18,0)
(3,23,0)
(13,2,0)
(24,8,0)
(19,6,0)
(5,8,0)
(4,6,0)
(10,9,0)
(2,14,0)
(25,10,0)
(16,23,0)
(12,26,0)
(33,26,0)
(32,5,0)
(6,22,0)
(14,26,0)
(28,22,0)
(15,11,0)
(9,11,0)
(31,29,0)
(22,8,0)
(31,8,0)
(34,14,0)
(9,2,0)
(29,31,0)
(26,14,0)
(14,23,0)
(23,8,0)
(0,5,0)
(2,9,0)
(10,9,1)
(13,7,1)
(9,2,1)
(22,31,1)
(7,1,1)
(31,29,1)
(14,26,1)
(6,4,1)
(27,10,1)
(22,28,1)
(2,13,1)
(18,14,1)
(28,6,1)
(5,32,1)
(34,22,1)
(32,0,1)
(1,18,1)
(4,19,1)
(20,5,1)
(27,18,1)
(30,17,1)
(10,25,1)
(17,14,1)
(29,20,1)
(12,34,1)
(25,9,1)
(33,12,1)
(18,30,1)
(26,33,1)
(2,14,1)
(19,31,1)
(1,18,2)
(25,18,2)
(22,31,2)
(9,18,2)
(13,18,2)
(2,18,2)
(31,29,2)
(14,26,2)
(10,9,2)
(9,2,2)
(2,14,2)
(18,14,2)
(10,18,2)
(7,18,2)
-----------------------------------
(0,data)
(1,result)
(2,data * 2)
(3,data)
(4,unionFirst)
(5,data = 0)
(6,myUnion.unionFirst)
(7,data)
(8,)
(9,result = data * 2)
(10,printIntLine(result)
(11,)
(12,myUnion)
(13,2)
(14,data = myUnion.unionSecond)
(15,result)
(16,if(data > 0)
(17,data)
(18,data > 0)
(19,myUnion)
(20,data)
(21,myUnion)
(22,myUnion.unionFirst = data)
(23,)
(24,data)
(25,result)
(26,myUnion.unionSecond)
(27,RET)
(28,data)
(29,RAND32()
(30,0)
(31,data = RAND32()
(32,0)
(33,unionSecond)
(34,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^