-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_11_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(globalReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_11_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_11_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_11_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(25,3,0)
(17,19,0)
(12,13,0)
(10,28,0)
(21,20,0)
(8,26,0)
(26,8,0)
(24,21,0)
(15,20,0)
(18,8,0)
(21,24,0)
(3,20,0)
(16,13,0)
(20,13,0)
(7,21,0)
(0,26,0)
(6,24,0)
(4,22,0)
(14,20,0)
(8,20,0)
(23,8,0)
(22,28,0)
(27,24,0)
(5,3,0)
(9,13,0)
(24,29,0)
(26,28,0)
(22,26,0)
(20,14,1)
(24,21,1)
(21,7,1)
(22,4,1)
(26,8,1)
(11,24,1)
(3,20,1)
(25,11,1)
(3,5,1)
(2,3,1)
(22,26,1)
(27,6,1)
(11,1,1)
(14,15,1)
(1,20,1)
(5,25,1)
(23,18,1)
(18,0,1)
(21,20,1)
(6,1,1)
(7,27,1)
(8,20,1)
(2,11,1)
(8,23,1)
(4,26,1)
(2,22,1)
(0,3,1)
(3,11,2)
(0,3,2)
(23,3,2)
(21,1,2)
(7,1,2)
(8,20,2)
(26,8,2)
(24,1,2)
(21,20,2)
(4,3,2)
(26,3,2)
(3,20,2)
(27,1,2)
(18,3,2)
(8,3,2)
(6,1,2)
(22,3,2)
(25,11,2)
(24,21,2)
(22,26,2)
(5,11,2)
-----------------------------------
(0,result)
(1,globalReturnsTrue()
(2,RET)
(3,data > 0)
(4,result)
(5,0)
(6,stdin)
(7,data)
(8,data * 2)
(9,if(globalReturnsTrue()
(10,result)
(11,globalReturnsTrue()
(12,data)
(13,)
(14,0)
(15,data)
(16,if(globalReturnsTrue()
(17,if(data > 0)
(18,data)
(19,)
(20,data = 0)
(21,&data)
(22,printIntLine(result)
(23,2)
(24,fscanf(stdin, "%d", &data)
(25,data)
(26,result = data * 2)
(27,"%d")
(28,)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^