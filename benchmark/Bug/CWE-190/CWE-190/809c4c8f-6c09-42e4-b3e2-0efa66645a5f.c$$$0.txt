-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        char result = data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
45,48
46,47
47,48
48,49
50,51
51,52
51,53
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
66,67
67,68
67,69
68,69
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,49,52,54,57,61,63,64,65,69,70,71
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_rand_preinc_15_bad()
CWE190_Integer_Overflow__char_rand_preinc_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(0,28,0)
(5,21,0)
(15,1,0)
(31,7,0)
(14,31,0)
(25,21,0)
(21,34,0)
(7,13,0)
(14,34,0)
(26,1,0)
(31,22,0)
(16,14,0)
(11,15,0)
(35,28,0)
(7,31,0)
(19,21,0)
(21,31,0)
(3,22,0)
(5,15,0)
(29,22,0)
(10,1,0)
(27,1,0)
(21,15,0)
(9,34,0)
(14,15,0)
(23,22,0)
(12,34,0)
(8,1,0)
(4,30,0)
(18,27,0)
(30,22,0)
(2,28,0)
(34,28,0)
(13,7,0)
(20,31,0)
(7,17,0)
(6,1,0)
(17,7,0)
(32,5,0)
(36,22,0)
(13,20,1)
(20,24,1)
(30,4,1)
(16,37,1)
(9,12,1)
(36,30,1)
(19,25,1)
(5,21,1)
(33,26,1)
(7,17,1)
(37,36,1)
(4,24,1)
(5,32,1)
(21,34,1)
(31,7,1)
(21,31,1)
(21,19,1)
(27,18,1)
(33,6,1)
(37,29,1)
(18,37,1)
(14,34,1)
(7,13,1)
(25,14,1)
(29,31,1)
(34,9,1)
(26,5,1)
(14,16,1)
(24,34,1)
(14,31,1)
(6,27,1)
(32,21,1)
(7,13,2)
(18,37,2)
(36,24,2)
(21,31,2)
(25,37,2)
(7,24,2)
(19,37,2)
(21,34,2)
(30,24,2)
(26,37,2)
(29,24,2)
(20,24,2)
(14,34,2)
(4,24,2)
(32,37,2)
(27,37,2)
(5,21,2)
(16,37,2)
(31,24,2)
(13,24,2)
(31,7,2)
(14,31,2)
(5,37,2)
(7,17,2)
(6,37,2)
(21,37,2)
(14,37,2)
-----------------------------------
(0,switch(6)
(1,)
(2,data)
(3,case 6:)
(4,"Benign, fixed string")
(5,printHexCharLine(result)
(6,break;)
(7,(char)
(8,default:)
(9,\\\' \\\')
(10,case 7:)
(11,result)
(12,data)
(13,RAND32()
(14,++data)
(15,)
(16,data)
(17,char)
(18,"Benign, fixed string")
(19,data)
(20,data)
(21,result = data)
(22,)
(23,default:)
(24,6)
(25,result)
(26,break;)
(27,printLine("Benign, fixed string")
(28,)
(29,break;)
(30,printLine("Benign, fixed string")
(31,data = (char)
(32,result)
(33,RET)
(34,data = \\\' \\\')
(35,switch(7)
(36,break;)
(37,7)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^