-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,36,38,42,43,47,49
-----computeFrom-----
12,13
12,14
20,21
20,22
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_02_bad()
CWE190_Integer_Overflow__char_rand_add_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(10,21,0)
(24,4,0)
(15,9,0)
(24,22,0)
(12,7,0)
(25,9,0)
(1,17,0)
(24,26,0)
(21,10,0)
(20,7,0)
(0,10,0)
(2,0,0)
(5,10,0)
(0,17,0)
(22,24,0)
(10,17,0)
(8,21,0)
(18,21,0)
(26,24,0)
(21,7,0)
(4,24,0)
(22,3,0)
(17,14,0)
(7,9,0)
(21,22,0)
(16,9,0)
(13,22,0)
(13,6,1)
(5,11,1)
(20,12,1)
(23,11,1)
(22,24,1)
(18,8,1)
(21,22,1)
(11,6,1)
(10,21,1)
(8,5,1)
(21,7,1)
(0,2,1)
(24,4,1)
(21,18,1)
(2,10,1)
(11,22,1)
(24,26,1)
(4,13,1)
(6,7,1)
(0,10,1)
(7,20,1)
(23,0,1)
(22,24,2)
(21,7,2)
(24,4,2)
(21,22,2)
(0,11,2)
(0,10,2)
(24,6,2)
(18,11,2)
(10,11,2)
(4,6,2)
(2,11,2)
(8,11,2)
(24,26,2)
(10,21,2)
(21,11,2)
(13,6,2)
(5,11,2)
(22,6,2)
-----------------------------------
(0,printHexCharLine(result)
(1,result)
(2,result)
(3,)
(4,RAND32()
(5,result)
(6,1)
(7,data = \' \')
(8,data)
(9,)
(10,result = data + 1)
(11,1)
(12,data)
(13,data)
(14,)
(15,if(1)
(16,data)
(17,)
(18,1)
(19,data = ' ')
(20,' ')
(21,data + 1)
(22,data = (char)
(23,RET)
(24,(char)
(25,if(1)
(26,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^