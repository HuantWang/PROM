-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))
        {
            int result = data * data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
62,64
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
78,79
78,80
79,80
81,82
81,83
82,83
82,84
85,86
87,88
87,89
88,89
89,90
89,91
91,92
91,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,47,51,53,57,59,65,67,71,73,76,77,80,83,84,86,90,92,96,98,102,104,109,110
-----computeFrom-----
12,13
12,14
33,34
33,35
49,50
49,51
62,63
62,64
63,64
63,65
68,69
68,70
94,95
94,96
-----guardedBy-----
73,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_12_bad()
CWE190_Integer_Overflow__int_fscanf_square_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX)
data > INT_MIN
data
data
INT_MIN
INT_MIN
abs(data) < (long)sqrt((double)INT_MAX)
abs(data)
abs
abs
data
data
(long)sqrt((double)INT_MAX)
long
long

sqrt((double)INT_MAX)
sqrt
sqrt
(double)INT_MAX
double
double

INT_MAX
INT_MAX
{            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(46,27,0)
(36,55,0)
(25,49,0)
(1,22,0)
(12,25,0)
(43,29,0)
(56,1,0)
(11,22,0)
(32,43,0)
(19,25,0)
(11,25,0)
(26,0,0)
(16,10,0)
(53,20,0)
(22,18,0)
(1,38,0)
(43,48,0)
(38,20,0)
(36,26,0)
(21,55,0)
(16,37,0)
(41,32,0)
(53,38,0)
(26,36,0)
(17,21,0)
(55,36,0)
(0,26,0)
(44,11,0)
(33,38,0)
(15,49,0)
(40,49,0)
(7,11,0)
(36,24,0)
(27,31,0)
(35,43,0)
(12,26,0)
(50,29,0)
(28,13,0)
(6,48,0)
(8,1,0)
(45,22,0)
(11,0,0)
(5,20,0)
(9,48,0)
(29,30,0)
(10,25,0)
(21,17,0)
(47,10,0)
(32,29,0)
(38,1,0)
(24,36,0)
(10,16,0)
(26,12,0)
(34,53,0)
(1,25,0)
(23,16,0)
(52,21,0)
(0,11,0)
(48,25,0)
(3,12,0)
(42,22,0)
(2,16,0)
(12,22,0)
(48,22,0)
(55,21,0)
(14,25,0)
(48,43,0)
(51,49,0)
(22,45,1)
(10,25,1)
(12,25,1)
(12,3,1)
(54,25,1)
(48,25,1)
(52,12,1)
(36,24,1)
(1,25,1)
(10,47,1)
(21,17,1)
(35,4,1)
(2,54,1)
(53,38,1)
(47,23,1)
(6,35,1)
(32,41,1)
(48,22,1)
(48,9,1)
(33,0,1)
(26,12,1)
(56,8,1)
(12,22,1)
(3,11,1)
(4,16,1)
(36,55,1)
(16,10,1)
(39,53,1)
(32,43,1)
(0,26,1)
(4,22,1)
(1,22,1)
(44,4,1)
(39,27,1)
(27,46,1)
(0,11,1)
(43,48,1)
(46,0,1)
(9,6,1)
(53,34,1)
(7,44,1)
(55,21,1)
(41,43,1)
(45,42,1)
(19,14,1)
(42,54,1)
(11,7,1)
(11,25,1)
(23,2,1)
(26,36,1)
(8,33,1)
(34,38,1)
(11,22,1)
(21,52,1)
(1,56,1)
(38,1,1)
(39,32,1)
(25,19,1)
(27,0,2)
(11,4,2)
(26,12,2)
(10,54,2)
(55,21,2)
(47,54,2)
(16,10,2)
(52,11,2)
(48,4,2)
(26,36,2)
(43,4,2)
(44,4,2)
(0,11,2)
(36,55,2)
(22,54,2)
(1,22,2)
(32,4,2)
(23,54,2)
(42,54,2)
(0,26,2)
(34,0,2)
(8,0,2)
(11,22,2)
(36,11,2)
(21,11,2)
(3,11,2)
(21,17,2)
(11,25,2)
(12,11,2)
(35,4,2)
(48,25,2)
(38,1,2)
(6,4,2)
(1,25,2)
(9,4,2)
(41,4,2)
(32,43,2)
(53,0,2)
(2,54,2)
(38,0,2)
(16,54,2)
(26,11,2)
(36,24,2)
(10,25,2)
(12,25,2)
(33,0,2)
(0,4,2)
(12,22,2)
(1,0,2)
(55,11,2)
(46,0,2)
(45,54,2)
(43,48,2)
(48,22,2)
(53,38,2)
(7,4,2)
(56,0,2)
-----------------------------------
(0,data > INT_MIN && abs(data)
(1,data * data)
(2,stdin)
(3,data)
(4,globalReturnsTrueOrFalse()
(5,result)
(6,data)
(7,INT_MIN)
(8,data)
(9,data)
(10,&data)
(11,data > INT_MIN)
(12,abs(data)
(13,)
(14,data)
(15,if(globalReturnsTrueOrFalse()
(16,fscanf(stdin, "%d", &data)
(17,double)
(18,)
(19,0)
(20,)
(21,(double)
(22,data = 2)
(23,"%d")
(24,long)
(25,data = 0)
(26,abs(data)
(27,printLine("data value is too large to perform arithmetic safely.")
(28,if (data > INT_MIN && abs(data)
(29,)
(30,)
(31,)
(32,printIntLine(result)
(33,result)
(34,result)
(35,result)
(36,(long)
(37,)
(38,result = data * data)
(39,RET)
(40,if(globalReturnsTrueOrFalse()
(41,result)
(42,data)
(43,result = data * data)
(44,data)
(45,2)
(46,"data value is too large to perform arithmetic safely.")
(47,data)
(48,data * data)
(49,)
(50,result)
(51,data)
(52,INT_MAX)
(53,printIntLine(result)
(54,globalReturnsTrueOrFalse()
(55,sqrt((double)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^