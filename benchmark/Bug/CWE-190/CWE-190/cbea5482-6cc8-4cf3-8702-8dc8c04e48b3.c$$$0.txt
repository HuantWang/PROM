-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_34_bad()
{
    int64_t data;
    CWE190_Integer_Overflow__int64_t_max_multiply_34_unionType myUnion;
    data = 0LL;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = LLONG_MAX;
    myUnion.unionFirst = data;
    {
        int64_t data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
37,38
37,39
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
49,50
49,51
50,51
50,52
51,52
54,55
54,56
55,56
56,57
56,58
57,58
59,60
59,61
61,62
62,63
62,64
63,64
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,9,11,15,17,21,22,26,28,33,34,36,41,43,47,48,52,53,58,60,64,65,69,71
-----computeFrom-----
19,20
19,21
24,25
24,26
30,31
30,32
50,51
50,52
62,63
62,64
-----guardedBy-----
52,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_34_bad(){    int64_t data;    CWE190_Integer_Overflow__int64_t_max_multiply_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_34_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_34_bad
{    int64_t data;    CWE190_Integer_Overflow__int64_t_max_multiply_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
CWE190_Integer_Overflow__int64_t_max_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_max_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_max_multiply_34_unionType
CWE190_Integer_Overflow__int64_t_max_multiply_34_unionType
myUnion
myUnion
data = 0LL;
data = 0LL
data
data
0LL
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t data = myUnion.unionSecond;
int64_t data = myUnion.unionSecond;
int64_t
int64_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(28,4,0)
(2,3,0)
(15,29,0)
(4,28,0)
(1,26,0)
(21,28,0)
(14,0,0)
(6,26,0)
(20,9,0)
(17,4,0)
(9,3,0)
(10,31,0)
(24,22,0)
(22,9,0)
(32,26,0)
(16,11,0)
(12,11,0)
(7,22,0)
(4,9,0)
(27,6,0)
(25,26,0)
(5,31,0)
(13,4,0)
(0,26,0)
(28,31,0)
(23,6,0)
(0,6,0)
(29,9,0)
(8,29,0)
(19,3,0)
(10,28,0)
(9,22,0)
(30,10,0)
(3,26,0)
(11,0,0)
(23,25,1)
(29,9,1)
(14,11,1)
(29,8,1)
(15,9,1)
(9,22,1)
(11,12,1)
(8,15,1)
(0,14,1)
(30,28,1)
(4,9,1)
(7,20,1)
(28,4,1)
(21,29,1)
(12,16,1)
(6,27,1)
(24,7,1)
(0,6,1)
(22,24,1)
(17,21,1)
(16,6,1)
(13,17,1)
(18,10,1)
(10,28,1)
(18,29,1)
(4,13,1)
(27,23,1)
(20,0,1)
(10,30,1)
(17,29,2)
(21,29,2)
(4,29,2)
(4,9,2)
(10,29,2)
(9,22,2)
(10,28,2)
(28,4,2)
(28,29,2)
(29,9,2)
(13,29,2)
(0,6,2)
(30,29,2)
-----------------------------------
(0,myUnion.unionFirst = data)
(1,myUnion)
(2,if(data > 0)
(3,)
(4,data * 2)
(5,result)
(6,data = LLONG_MAX)
(7,myUnion)
(8,0)
(9,data = myUnion.unionSecond)
(10,printLongLongLine(result)
(11,myUnion.unionFirst)
(12,unionFirst)
(13,2)
(14,data)
(15,data)
(16,myUnion)
(17,data)
(18,RET)
(19,data)
(20,data)
(21,result)
(22,myUnion.unionSecond)
(23,data)
(24,unionSecond)
(25,L)
(26,)
(27,LLONG_MAX)
(28,result = data * 2)
(29,data > 0)
(30,result)
(31,)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^