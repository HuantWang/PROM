-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_12_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (SHRT_MAX/2))
            {
                short result = data * 2;
                printIntLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
45,46
45,47
47,48
47,49
49,50
50,51
50,52
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
66,67
67,68
67,69
67,70
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
80,81
80,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,42,46,48,52,53,57,59,64,65,70,74,75,79,81,85,86,90,92,97,98
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
39,40
39,41
50,51
50,52
62,63
62,64
68,69
68,70
72,73
72,74
83,84
83,85
-----guardedBy-----
41,52
64,85
70,85
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_12_bad(){    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_12_bad()
CWE190_Integer_Overflow__short_max_multiply_12_bad
{    short data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (SHRT_MAX/2))            {                short result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (SHRT_MAX/2)
data
data
(SHRT_MAX/2)
SHRT_MAX/2
SHRT_MAX
SHRT_MAX
2
{                short result = data * 2;                printIntLine(result);            }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(30,33,0)
(21,48,0)
(0,9,0)
(55,21,0)
(26,8,0)
(22,2,0)
(13,8,0)
(27,3,0)
(33,8,0)
(40,55,0)
(10,35,0)
(28,0,0)
(31,24,0)
(20,10,0)
(54,26,0)
(16,48,0)
(11,0,0)
(32,8,0)
(29,49,0)
(8,6,0)
(44,26,0)
(26,43,0)
(36,21,0)
(1,5,0)
(15,24,0)
(51,9,0)
(23,33,0)
(42,24,0)
(39,5,0)
(26,9,0)
(13,5,0)
(55,9,0)
(17,19,0)
(43,49,0)
(4,2,0)
(0,8,0)
(47,43,0)
(21,55,0)
(5,13,0)
(46,7,0)
(34,13,0)
(9,18,0)
(43,26,0)
(12,55,0)
(37,9,0)
(7,49,0)
(55,8,0)
(2,24,0)
(19,21,0)
(52,14,0)
(45,8,0)
(7,43,0)
(33,9,0)
(38,50,0)
(13,9,0)
(19,48,0)
(41,10,1)
(26,8,1)
(5,39,1)
(9,37,1)
(41,0,1)
(55,12,1)
(28,53,1)
(2,22,1)
(30,53,1)
(23,30,1)
(39,1,1)
(55,9,1)
(19,17,1)
(46,43,1)
(41,7,1)
(19,21,1)
(55,8,1)
(13,5,1)
(7,43,1)
(51,25,1)
(54,44,1)
(13,9,1)
(33,8,1)
(22,4,1)
(8,32,1)
(53,8,1)
(33,23,1)
(20,13,1)
(26,54,1)
(36,0,1)
(37,51,1)
(10,20,1)
(11,28,1)
(40,36,1)
(17,21,1)
(1,34,1)
(43,26,1)
(32,45,1)
(47,13,1)
(34,33,1)
(13,8,1)
(0,11,1)
(41,33,1)
(0,9,1)
(41,19,1)
(25,2,1)
(26,9,1)
(45,25,1)
(7,46,1)
(33,9,1)
(44,47,1)
(21,55,1)
(53,9,1)
(12,40,1)
(0,8,1)
(33,53,2)
(34,33,2)
(23,53,2)
(13,9,2)
(12,0,2)
(55,8,2)
(26,13,2)
(30,53,2)
(0,9,2)
(26,8,2)
(20,13,2)
(51,25,2)
(47,13,2)
(21,55,2)
(11,53,2)
(43,13,2)
(28,53,2)
(40,0,2)
(8,25,2)
(9,25,2)
(54,13,2)
(55,9,2)
(39,33,2)
(43,26,2)
(46,13,2)
(19,21,2)
(0,8,2)
(7,13,2)
(26,9,2)
(10,13,2)
(13,33,2)
(17,0,2)
(32,25,2)
(13,5,2)
(7,43,2)
(21,0,2)
(55,0,2)
(33,8,2)
(5,33,2)
(33,9,2)
(13,8,2)
(45,25,2)
(1,33,2)
(37,25,2)
(0,53,2)
(36,0,2)
(44,13,2)
(19,0,2)
-----------------------------------
(0,data > 0)
(1,SHRT_MAX)
(2,data = 0)
(3,)
(4,data)
(5,SHRT_MAX/2)
(6,)
(7,printIntLine(result)
(8,data = SHRT_MAX)
(9,data = 2)
(10,printLine("data value is too large to perform arithmetic safely.")
(11,0)
(12,2)
(13,data < (SHRT_MAX/2)
(14,)
(15,data)
(16,result)
(17,result)
(18,)
(19,printIntLine(result)
(20,"data value is too large to perform arithmetic safely.")
(21,result = data * 2)
(22,0)
(23,0)
(24,)
(25,globalReturnsTrueOrFalse()
(26,data * 2)
(27,if(data > 0)
(28,data)
(29,result)
(30,data)
(31,if(globalReturnsTrueOrFalse()
(32,SHRT_MAX)
(33,data > 0)
(34,data)
(35,)
(36,result)
(37,2)
(38,if (data < (SHRT_MAX/2)
(39,2)
(40,data)
(41,RET)
(42,if(globalReturnsTrueOrFalse()
(43,result = data * 2)
(44,data)
(45,data)
(46,result)
(47,result)
(48,)
(49,)
(50,)
(51,data)
(52,if(data > 0)
(53,globalReturnsTrueOrFalse()
(54,2)
(55,data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^