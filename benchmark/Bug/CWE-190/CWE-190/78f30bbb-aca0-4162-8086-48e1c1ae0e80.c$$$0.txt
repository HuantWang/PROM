-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
33,36
34,35
35,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,37,40,42,45,49,51,52
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_16_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
break;
while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }        break;    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(21,8,0)
(12,22,0)
(26,8,0)
(4,9,0)
(27,18,0)
(18,9,0)
(18,24,0)
(14,22,0)
(19,18,0)
(12,24,0)
(22,15,0)
(20,9,0)
(17,4,0)
(4,24,0)
(22,12,0)
(9,6,0)
(7,12,0)
(5,8,0)
(1,18,0)
(23,6,0)
(10,15,0)
(19,9,0)
(25,19,0)
(24,8,0)
(3,22,0)
(2,24,0)
(16,24,0)
(0,10,1)
(12,7,1)
(13,23,1)
(10,22,1)
(11,24,1)
(1,4,1)
(19,18,1)
(13,0,1)
(4,24,1)
(14,11,1)
(4,17,1)
(23,19,1)
(22,12,1)
(18,27,1)
(25,18,1)
(18,24,1)
(24,2,1)
(27,1,1)
(7,3,1)
(0,11,1)
(2,16,1)
(12,24,1)
(3,14,1)
(19,25,1)
(17,0,1)
(12,11,2)
(12,24,2)
(7,11,2)
(25,0,2)
(1,0,2)
(14,11,2)
(19,18,2)
(18,24,2)
(23,0,2)
(3,11,2)
(22,12,2)
(27,0,2)
(4,0,2)
(4,24,2)
(10,11,2)
(22,11,2)
(19,0,2)
(18,0,2)
(17,0,2)
-----------------------------------
(0,1)
(1,result)
(2,\\\' \\\')
(3,"%c")
(4,data++)
(5,data)
(6,)
(7,data)
(8,)
(9,)
(10,break;)
(11,1)
(12,&data)
(13,RET)
(14,stdin)
(15,)
(16,data)
(17,data)
(18,result = data)
(19,printHexCharLine(result)
(20,result)
(21,while(1)
(22,fscanf (stdin, "%c", &data)
(23,break;)
(24,data = \\\' \\\')
(25,result)
(26,while(1)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^