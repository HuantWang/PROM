-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    char * dataPtr = (char *)dataVoidPtr;
    /* dereference dataPtr into data */
    char data = (*dataPtr);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,49,50,54,56
-----computeFrom-----
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    char * dataPtr = (char *)dataVoidPtr;    /* dereference dataPtr into data */    char data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_64b_badSink(void * dataVoidPtr)
CWE190_Integer_Overflow__char_fscanf_multiply_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    char * dataPtr = (char *)dataVoidPtr;    /* dereference dataPtr into data */    char data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char * dataPtr = (char *)dataVoidPtr;
char * dataPtr = (char *)dataVoidPtr;
char
* dataPtr = (char *)dataVoidPtr
*
dataPtr
= (char *)dataVoidPtr
(char *)dataVoidPtr
char *
char
*
*
dataVoidPtr
dataVoidPtr
char data = (*dataPtr);
char data = (*dataPtr);
char
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(14,23,0)
(9,4,0)
(23,11,0)
(13,9,0)
(11,20,0)
(4,9,0)
(11,2,0)
(19,9,0)
(0,4,0)
(17,18,0)
(22,4,0)
(11,23,0)
(13,7,0)
(25,17,0)
(24,11,0)
(12,7,0)
(8,1,0)
(17,15,0)
(1,17,0)
(18,23,0)
(18,17,0)
(23,15,0)
(21,18,0)
(16,13,0)
(6,1,0)
(10,15,0)
(5,15,0)
(9,7,0)
(4,17,0)
(26,15,0)
(20,11,0)
(13,16,1)
(6,8,1)
(11,2,1)
(1,17,1)
(21,25,1)
(9,4,1)
(4,0,1)
(18,21,1)
(4,17,1)
(8,17,1)
(3,13,1)
(11,20,1)
(0,22,1)
(25,23,1)
(13,9,1)
(18,23,1)
(3,1,1)
(1,6,1)
(11,24,1)
(24,14,1)
(22,19,1)
(19,1,1)
(17,18,1)
(23,11,1)
(16,9,1)
(0,1,2)
(11,20,2)
(19,1,2)
(17,18,2)
(1,17,2)
(4,17,2)
(23,11,2)
(4,1,2)
(9,1,2)
(11,2,2)
(13,9,2)
(18,23,2)
(16,1,2)
(9,4,2)
(22,1,2)
(13,1,2)
-----------------------------------
(0,2)
(1,data > 0)
(2,void * dataVoidPtr)
(3,RET)
(4,data * 2)
(5,data)
(6,0)
(7,)
(8,data)
(9,result = data * 2)
(10,dataPtr)
(11,(char *)
(12,result)
(13,printHexCharLine(result)
(14,dataPtr)
(15,)
(16,result)
(17,data = (*dataPtr)
(18,*dataPtr)
(19,result)
(20,char *)
(21,dataPtr)
(22,data)
(23,* dataPtr = (char *)
(24,dataVoidPtr)
(25,data)
(26,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^