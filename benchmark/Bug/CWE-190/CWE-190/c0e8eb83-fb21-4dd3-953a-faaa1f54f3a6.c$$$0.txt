-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,32,37,39,43,45,49,51,52
-----computeFrom-----
12,13
12,14
20,21
20,22
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_rand_square_16_bad()
CWE190_Integer_Overflow__char_rand_square_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(20,14,0)
(7,9,0)
(9,8,0)
(8,11,0)
(23,2,0)
(14,20,0)
(21,5,0)
(20,1,0)
(16,5,0)
(2,9,0)
(3,9,0)
(5,19,0)
(1,20,0)
(18,6,0)
(2,6,0)
(17,2,0)
(27,11,0)
(10,19,0)
(0,8,0)
(9,2,0)
(6,28,0)
(9,5,0)
(23,6,0)
(8,20,0)
(24,19,0)
(26,19,0)
(12,23,0)
(20,8,0)
(15,28,0)
(7,3,1)
(20,14,1)
(5,16,1)
(16,21,1)
(3,17,1)
(20,1,1)
(14,0,1)
(2,9,1)
(25,22,1)
(17,22,1)
(27,8,1)
(9,5,1)
(12,2,1)
(15,23,1)
(22,4,1)
(4,5,1)
(22,27,1)
(9,8,1)
(8,20,1)
(9,7,1)
(23,12,1)
(25,15,1)
(23,2,1)
(0,4,1)
(0,4,2)
(7,22,2)
(23,2,2)
(3,22,2)
(12,22,2)
(9,8,2)
(9,5,2)
(20,4,2)
(2,22,2)
(20,14,2)
(20,1,2)
(23,22,2)
(9,22,2)
(2,9,2)
(27,4,2)
(17,22,2)
(14,4,2)
(8,20,2)
(8,4,2)
(15,22,2)
-----------------------------------
(0,data)
(1,char)
(2,result = data * data)
(3,data)
(4,1)
(5,data = \' \')
(6,)
(7,data)
(8,data = (char)
(9,data * data)
(10,while(1)
(11,)
(12,result)
(13,data = ' ')
(14,RAND32()
(15,break;)
(16,' ')
(17,result)
(18,result)
(19,)
(20,(char)
(21,data)
(22,1)
(23,printHexCharLine(result)
(24,data)
(25,RET)
(26,while(1)
(27,break;)
(28,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^