-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_07_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_07_bad(){    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_07_bad()
CWE190_Integer_Overflow__int_max_square_07_bad
{    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(15,9,0)
(12,23,0)
(16,7,0)
(17,20,0)
(3,23,0)
(13,7,0)
(8,11,0)
(10,7,0)
(21,12,0)
(6,1,0)
(25,12,0)
(0,10,0)
(18,22,0)
(9,27,0)
(7,9,0)
(26,18,0)
(10,18,0)
(1,10,0)
(1,18,0)
(5,23,0)
(14,9,0)
(7,12,0)
(19,23,0)
(7,10,0)
(4,11,0)
(24,20,0)
(13,16,1)
(7,12,1)
(15,20,1)
(16,0,1)
(4,20,1)
(6,10,1)
(20,24,1)
(17,12,1)
(11,8,1)
(4,9,1)
(8,4,1)
(2,11,1)
(1,6,1)
(14,15,1)
(12,25,1)
(0,11,1)
(7,9,1)
(25,21,1)
(2,1,1)
(9,14,1)
(1,10,1)
(10,7,1)
(7,13,1)
(24,17,1)
(7,9,2)
(6,11,2)
(1,10,2)
(7,11,2)
(16,11,2)
(9,20,2)
(10,11,2)
(1,11,2)
(13,11,2)
(10,7,2)
(14,20,2)
(7,12,2)
(15,20,2)
(0,11,2)
-----------------------------------
(0,result)
(1,printIntLine(result)
(2,RET)
(3,if(staticFive==5)
(4,staticFive)
(5,if(staticFive==5)
(6,result)
(7,data * data)
(8,5)
(9,data = INT_MAX)
(10,result = data * data)
(11,staticFive==5)
(12,data = 0)
(13,data)
(14,INT_MAX)
(15,data)
(16,data)
(17,staticFive)
(18,)
(19,data)
(20,staticFive==5)
(21,data)
(22,)
(23,)
(24,5)
(25,0)
(26,result)
(27,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^