-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_18_bad()
{
    unsigned int data;
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Use a random value */
    data = (unsigned int)RAND32();
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
        unsigned int result = data * 2;
        printUnsignedLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
33,34
33,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,17,19,23,26,27,30,32,34,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_18_bad(){    unsigned int data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_18_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_18_bad
{    unsigned int data;    data = 0;    goto source;source:    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();
source
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */        unsigned int result = data * 2;        printUnsignedLine(result);    }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(27,19,0)
(17,2,0)
(12,18,0)
(4,11,0)
(1,2,0)
(8,25,0)
(4,24,0)
(9,2,0)
(3,2,0)
(21,12,0)
(11,4,0)
(6,14,0)
(27,24,0)
(22,4,0)
(25,2,0)
(23,18,0)
(5,2,0)
(15,27,0)
(26,27,0)
(19,18,0)
(4,22,0)
(7,19,0)
(12,19,0)
(24,2,0)
(13,25,0)
(16,14,0)
(0,2,0)
(14,24,0)
(10,24,0)
(24,4,0)
(19,27,0)
(12,21,1)
(14,24,1)
(26,7,1)
(15,26,1)
(4,22,1)
(6,0,1)
(14,16,1)
(20,14,1)
(16,6,1)
(20,12,1)
(27,24,1)
(12,19,1)
(25,8,1)
(21,19,1)
(19,27,1)
(4,11,1)
(10,3,1)
(8,13,1)
(27,15,1)
(11,10,1)
(24,4,1)
(3,25,1)
(7,14,1)
(0,24,1)
(19,14,2)
(24,4,2)
(26,14,2)
(4,11,2)
(7,14,2)
(12,14,2)
(15,14,2)
(27,24,2)
(21,14,2)
(14,24,2)
(19,27,2)
(27,14,2)
(4,22,2)
(12,19,2)
-----------------------------------
(0,goto sink;)
(1,if(data > 0)
(2,)
(3,goto source;)
(4,(unsigned int)
(5,source:)
(6,data)
(7,result)
(8,0)
(9,sink:)
(10,data)
(11,RAND32()
(12,printUnsignedLine(result)
(13,data)
(14,data > 0)
(15,2)
(16,0)
(17,data)
(18,)
(19,result = data * 2)
(20,RET)
(21,result)
(22,unsigned int)
(23,result)
(24,data = (unsigned int)
(25,data = 0)
(26,data)
(27,data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^