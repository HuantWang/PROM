-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_06_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_06_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_06_bad()
CWE190_Integer_Overflow__int_fscanf_square_06_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(29,0,0)
(24,5,0)
(10,0,0)
(25,28,0)
(14,20,0)
(3,4,0)
(18,11,0)
(9,16,0)
(13,20,0)
(20,17,0)
(22,13,0)
(24,26,0)
(7,24,0)
(4,13,0)
(19,0,0)
(6,24,0)
(4,10,0)
(26,24,0)
(21,10,0)
(13,4,0)
(23,4,0)
(15,26,0)
(12,11,0)
(2,28,0)
(16,13,0)
(1,0,0)
(26,10,0)
(27,10,0)
(16,20,0)
(8,16,1)
(12,24,1)
(15,7,1)
(9,13,1)
(27,21,1)
(8,11,1)
(12,28,1)
(4,3,1)
(26,15,1)
(22,11,1)
(18,12,1)
(6,28,1)
(4,10,1)
(2,10,1)
(3,23,1)
(11,18,1)
(25,2,1)
(10,27,1)
(16,9,1)
(28,25,1)
(7,6,1)
(26,10,1)
(13,4,1)
(23,22,1)
(16,13,1)
(24,26,1)
(13,4,2)
(4,10,2)
(15,28,2)
(4,11,2)
(6,28,2)
(26,10,2)
(16,11,2)
(13,11,2)
(7,28,2)
(24,28,2)
(26,28,2)
(9,11,2)
(3,11,2)
(22,11,2)
(24,26,2)
(23,11,2)
(16,13,2)
-----------------------------------
(0,)
(1,if(STATIC_CONST_FIVE==5)
(2,STATIC_CONST_FIVE)
(3,data)
(4,data * data)
(5,)
(6,stdin)
(7,"%d")
(8,RET)
(9,result)
(10,data = 0)
(11,STATIC_CONST_FIVE==5)
(12,STATIC_CONST_FIVE)
(13,result = data * data)
(14,result)
(15,data)
(16,printIntLine(result)
(17,)
(18,5)
(19,if(STATIC_CONST_FIVE==5)
(20,)
(21,data)
(22,result)
(23,data)
(24,fscanf(stdin, "%d", &data)
(25,5)
(26,&data)
(27,0)
(28,STATIC_CONST_FIVE==5)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^