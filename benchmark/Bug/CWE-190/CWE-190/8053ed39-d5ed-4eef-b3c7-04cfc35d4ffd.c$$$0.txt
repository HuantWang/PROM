-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_rand_preinc_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
52,55
53,54
54,55
55,56
57,58
58,59
58,60
60,61
60,62
62,63
63,64
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,56,59,61,64,68,70
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_34_bad(){    char data;    CWE190_Integer_Overflow__char_rand_preinc_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_34_bad()
CWE190_Integer_Overflow__char_rand_preinc_34_bad
{    char data;    CWE190_Integer_Overflow__char_rand_preinc_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_rand_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__char_rand_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__char_rand_preinc_34_unionType
CWE190_Integer_Overflow__char_rand_preinc_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,19,0)
(7,19,0)
(10,11,0)
(18,30,0)
(5,25,0)
(15,3,0)
(30,18,0)
(22,1,0)
(23,18,0)
(20,14,0)
(29,25,0)
(8,25,0)
(26,11,0)
(2,18,0)
(13,10,0)
(0,2,0)
(27,5,0)
(1,14,0)
(13,14,0)
(19,14,0)
(11,10,0)
(17,6,0)
(28,5,0)
(3,25,0)
(6,25,0)
(5,2,0)
(14,3,0)
(18,23,0)
(12,13,0)
(24,27,0)
(10,3,0)
(4,11,0)
(19,10,0)
(31,27,0)
(18,2,0)
(32,19,0)
(2,25,0)
(16,6,0)
(21,10,0)
(26,4,1)
(18,23,1)
(4,21,1)
(0,6,1)
(27,24,1)
(1,22,1)
(10,11,1)
(12,10,1)
(13,12,1)
(16,17,1)
(28,27,1)
(9,1,1)
(5,2,1)
(21,5,1)
(19,10,1)
(13,10,1)
(2,18,1)
(1,19,1)
(23,0,1)
(32,7,1)
(19,32,1)
(7,13,1)
(5,28,1)
(6,16,1)
(18,30,1)
(11,26,1)
(22,19,1)
(24,31,1)
(31,2,1)
(18,30,2)
(1,19,2)
(10,11,2)
(19,10,2)
(13,10,2)
(18,23,2)
(5,2,2)
(2,18,2)
-----------------------------------
(0,data)
(1,printHexCharLine(result)
(2,data = (char)
(3,)
(4,myUnion)
(5,myUnion.unionFirst = data)
(6,data = ' ')
(7,result)
(8,myUnion)
(9,RET)
(10,data = myUnion.unionSecond)
(11,myUnion.unionSecond)
(12,data)
(13,++data)
(14,)
(15,data)
(16,' ')
(17,data)
(18,(char)
(19,result = data)
(20,result)
(21,data)
(22,result)
(23,RAND32()
(24,unionFirst)
(25,)
(26,unionSecond)
(27,myUnion.unionFirst)
(28,data)
(29,data)
(30,char)
(31,myUnion)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^