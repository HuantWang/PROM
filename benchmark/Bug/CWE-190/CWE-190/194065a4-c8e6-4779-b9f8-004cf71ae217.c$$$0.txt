-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_postinc_11_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_postinc_11_bad(){    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_postinc_11_bad()
CWE190_Integer_Overflow__short_fscanf_postinc_11_bad
{    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(20,10,0)
(1,4,0)
(1,10,0)
(9,10,0)
(6,7,0)
(20,21,0)
(0,10,0)
(10,2,0)
(21,3,0)
(15,21,0)
(11,9,0)
(7,21,0)
(16,1,0)
(7,20,0)
(17,4,0)
(22,2,0)
(12,20,0)
(19,20,0)
(4,1,0)
(4,24,0)
(18,2,0)
(25,4,0)
(14,10,0)
(8,2,0)
(9,21,0)
(17,5,1)
(12,9,1)
(23,4,1)
(16,25,1)
(23,5,1)
(0,14,1)
(1,16,1)
(10,0,1)
(7,6,1)
(9,11,1)
(7,20,1)
(5,10,1)
(13,23,1)
(6,20,1)
(11,23,1)
(25,17,1)
(4,1,1)
(9,10,1)
(13,7,1)
(19,12,1)
(20,19,1)
(20,10,1)
(1,10,1)
(12,23,2)
(6,23,2)
(1,5,2)
(25,5,2)
(7,20,2)
(9,23,2)
(11,23,2)
(4,1,2)
(20,23,2)
(1,10,2)
(16,5,2)
(20,10,2)
(19,23,2)
(9,10,2)
(17,5,2)
(4,5,2)
(7,23,2)
-----------------------------------
(0,0)
(1,&data)
(2,)
(3,)
(4,fscanf (stdin, "%hd", &data)
(5,globalReturnsTrue()
(6,result)
(7,printIntLine(result)
(8,if(globalReturnsTrue()
(9,data++)
(10,data = 0)
(11,data)
(12,result)
(13,RET)
(14,data)
(15,result)
(16,data)
(17,stdin)
(18,data)
(19,data)
(20,result = data)
(21,)
(22,if(globalReturnsTrue()
(23,globalReturnsTrue()
(24,)
(25,"%hd")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^