-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_12_bad()
{
    int64_t data;
    data = 0LL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (LLONG_MAX/2))
            {
                int64_t result = data * 2;
                printLongLongLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
64,66
65,66
68,69
69,70
69,71
69,72
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
78,80
79,80
80,81
80,82
81,82
83,84
83,85
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
94,95
96,97
97,98
98,99
98,100
99,100
-----nextToken-----
2,4,9,11,15,16,20,25,27,32,33,37,42,43,48,50,54,55,59,61,66,67,72,76,77,82,84,88,89,93,95,100,101
-----computeFrom-----
13,14
13,15
23,24
23,25
30,31
30,32
40,41
40,42
52,53
52,54
64,65
64,66
70,71
70,72
74,75
74,76
86,87
86,88
-----guardedBy-----
42,54
66,88
72,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_12_bad(){    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_12_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_12_bad
{    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (LLONG_MAX/2))            {                int64_t result = data * 2;                printLongLongLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (LLONG_MAX/2)
data
data
(LLONG_MAX/2)
LLONG_MAX/2
LLONG_MAX
LLONG_MAX
2
{                int64_t result = data * 2;                printLongLongLine(result);            }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(4,2,0)
(11,34,0)
(34,7,0)
(42,20,0)
(11,28,0)
(43,2,0)
(46,26,0)
(24,48,0)
(33,1,0)
(40,18,0)
(14,2,0)
(37,7,0)
(17,19,0)
(49,28,0)
(1,28,0)
(0,1,0)
(13,27,0)
(42,28,0)
(10,28,0)
(31,11,0)
(1,33,0)
(45,2,0)
(52,6,0)
(49,27,0)
(3,34,0)
(42,27,0)
(51,21,0)
(32,49,0)
(22,42,0)
(37,34,0)
(34,11,0)
(30,7,0)
(39,25,0)
(18,20,0)
(16,33,0)
(20,25,0)
(27,5,0)
(53,11,0)
(1,27,0)
(9,28,0)
(36,33,0)
(29,20,0)
(28,23,0)
(18,25,0)
(35,46,0)
(44,42,0)
(12,27,0)
(19,28,0)
(19,27,0)
(11,27,0)
(38,19,0)
(20,42,0)
(41,49,0)
(15,37,0)
(19,28,1)
(1,27,1)
(8,43,1)
(11,31,1)
(11,28,1)
(34,11,1)
(42,28,1)
(50,28,1)
(28,9,1)
(42,22,1)
(19,27,1)
(37,15,1)
(42,27,1)
(11,27,1)
(18,40,1)
(15,34,1)
(47,37,1)
(0,49,1)
(20,42,1)
(47,49,1)
(12,8,1)
(3,19,1)
(53,3,1)
(18,20,1)
(29,1,1)
(19,17,1)
(47,46,1)
(38,50,1)
(13,12,1)
(50,27,1)
(27,13,1)
(49,27,1)
(9,10,1)
(47,18,1)
(17,38,1)
(49,41,1)
(32,50,1)
(1,28,1)
(47,19,1)
(31,53,1)
(10,8,1)
(1,33,1)
(46,35,1)
(44,29,1)
(37,34,1)
(16,0,1)
(41,32,1)
(40,20,1)
(35,1,1)
(36,16,1)
(49,28,1)
(33,36,1)
(22,44,1)
(38,50,2)
(19,27,2)
(49,27,2)
(10,8,2)
(1,28,2)
(1,49,2)
(27,8,2)
(0,49,2)
(49,28,2)
(11,19,2)
(28,8,2)
(36,49,2)
(13,8,2)
(42,1,2)
(22,1,2)
(31,19,2)
(19,50,2)
(3,19,2)
(37,19,2)
(40,1,2)
(11,27,2)
(9,8,2)
(46,1,2)
(12,8,2)
(42,27,2)
(35,1,2)
(49,50,2)
(16,49,2)
(18,20,2)
(20,1,2)
(20,42,2)
(18,1,2)
(42,28,2)
(19,28,2)
(37,34,2)
(34,11,2)
(15,19,2)
(53,19,2)
(29,1,2)
(33,49,2)
(41,50,2)
(17,50,2)
(34,19,2)
(1,27,2)
(1,33,2)
(44,1,2)
(11,28,2)
(32,50,2)
-----------------------------------
(0,data)
(1,data < (LLONG_MAX/2)
(2,)
(3,result)
(4,data)
(5,)
(6,)
(7,)
(8,globalReturnsTrueOrFalse()
(9,2)
(10,data)
(11,data * 2)
(12,data)
(13,LLONG_MAX)
(14,if(globalReturnsTrueOrFalse()
(15,result)
(16,LLONG_MAX)
(17,0)
(18,printLongLongLine(result)
(19,data > 0)
(20,result = data * 2)
(21,)
(22,2)
(23,)
(24,if (data < (LLONG_MAX/2)
(25,)
(26,)
(27,data = LLONG_MAX)
(28,data = 2)
(29,result)
(30,result)
(31,2)
(32,data)
(33,LLONG_MAX/2)
(34,result = data * 2)
(35,"data value is too large to perform arithmetic safely.")
(36,2)
(37,printLongLongLine(result)
(38,data)
(39,result)
(40,result)
(41,0)
(42,data * 2)
(43,L)
(44,data)
(45,if(globalReturnsTrueOrFalse()
(46,printLine("data value is too large to perform arithmetic safely.")
(47,RET)
(48,)
(49,data > 0)
(50,globalReturnsTrueOrFalse()
(51,if(data > 0)
(52,if(data > 0)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^