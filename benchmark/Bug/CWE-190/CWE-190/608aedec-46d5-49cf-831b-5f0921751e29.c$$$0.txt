-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_add_34_bad()
{
    short data;
    CWE190_Integer_Overflow__short_rand_add_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,57,61,62,66,68
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_add_34_bad(){    short data;    CWE190_Integer_Overflow__short_rand_add_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_add_34_bad()
CWE190_Integer_Overflow__short_rand_add_34_bad
{    short data;    CWE190_Integer_Overflow__short_rand_add_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
CWE190_Integer_Overflow__short_rand_add_34_unionType myUnion;
CWE190_Integer_Overflow__short_rand_add_34_unionType myUnion;
CWE190_Integer_Overflow__short_rand_add_34_unionType
CWE190_Integer_Overflow__short_rand_add_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(15,5,0)
(21,3,0)
(8,3,0)
(24,18,0)
(9,2,0)
(31,26,0)
(11,25,0)
(17,24,0)
(27,7,0)
(13,21,0)
(26,4,0)
(14,5,0)
(4,24,0)
(5,26,0)
(2,32,0)
(21,18,0)
(23,3,0)
(32,2,0)
(12,31,0)
(10,18,0)
(32,24,0)
(28,18,0)
(30,7,0)
(0,18,0)
(5,32,0)
(26,5,0)
(29,2,0)
(6,4,0)
(20,25,0)
(25,0,0)
(3,21,0)
(19,32,0)
(31,4,0)
(22,26,0)
(0,21,0)
(7,18,0)
(1,0,0)
(3,23,0)
(3,8,0)
(16,31,1)
(14,15,1)
(31,12,1)
(2,29,1)
(3,8,1)
(3,23,1)
(26,5,1)
(7,30,1)
(5,14,1)
(25,11,1)
(12,26,1)
(22,32,1)
(20,21,1)
(21,3,1)
(30,27,1)
(11,20,1)
(0,1,1)
(32,2,1)
(13,7,1)
(29,9,1)
(23,13,1)
(5,32,1)
(15,22,1)
(1,25,1)
(19,0,1)
(31,26,1)
(0,21,1)
(9,19,1)
(26,5,2)
(21,3,2)
(3,23,2)
(0,21,2)
(5,32,2)
(3,8,2)
(32,2,2)
(31,26,2)
-----------------------------------
(0,myUnion.unionFirst = data)
(1,data)
(2,myUnion.unionSecond)
(3,(short)
(4,)
(5,data + 1)
(6,result)
(7,data = 0)
(8,short)
(9,myUnion)
(10,myUnion)
(11,unionFirst)
(12,result)
(13,data)
(14,1)
(15,data)
(16,RET)
(17,data)
(18,)
(19,data)
(20,myUnion)
(21,data = (short)
(22,result)
(23,RAND32()
(24,)
(25,myUnion.unionFirst)
(26,result = data + 1)
(27,data)
(28,data)
(29,unionSecond)
(30,0)
(31,printIntLine(result)
(32,data = myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^