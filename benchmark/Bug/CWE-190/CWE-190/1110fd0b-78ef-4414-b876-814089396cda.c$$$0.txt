-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,65,69,71,75,76,80,82
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
62,63
62,64
73,74
73,75
-----guardedBy-----
64,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_17_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,17,0)
(32,29,0)
(41,28,0)
(35,34,0)
(14,25,0)
(33,8,0)
(22,3,0)
(44,17,0)
(40,28,0)
(11,8,0)
(6,13,0)
(26,24,0)
(11,13,0)
(19,34,0)
(34,16,0)
(8,11,0)
(15,9,0)
(5,11,0)
(4,35,0)
(38,3,0)
(45,13,0)
(3,13,0)
(43,29,0)
(8,30,0)
(36,30,0)
(10,29,0)
(0,9,0)
(27,29,0)
(13,29,0)
(33,30,0)
(20,25,0)
(12,34,0)
(39,8,0)
(23,37,0)
(31,11,0)
(18,29,0)
(42,33,0)
(24,25,0)
(35,13,0)
(17,25,0)
(2,41,0)
(34,35,0)
(9,28,0)
(21,28,0)
(9,28,1)
(41,2,1)
(35,4,1)
(21,13,1)
(9,15,1)
(15,0,1)
(8,11,1)
(14,20,1)
(1,17,1)
(40,21,1)
(38,22,1)
(42,8,1)
(0,28,1)
(17,25,1)
(31,39,1)
(5,31,1)
(19,9,1)
(45,6,1)
(24,25,1)
(20,9,1)
(28,40,1)
(33,42,1)
(12,19,1)
(34,35,1)
(11,13,1)
(39,3,1)
(26,33,1)
(4,12,1)
(2,34,1)
(25,14,1)
(7,25,1)
(3,13,1)
(13,45,1)
(44,7,1)
(35,13,1)
(17,44,1)
(0,41,1)
(7,24,1)
(26,3,1)
(33,8,1)
(3,38,1)
(22,17,1)
(11,5,1)
(41,28,1)
(24,26,1)
(33,3,2)
(24,25,2)
(34,9,2)
(17,25,2)
(33,8,2)
(38,17,2)
(7,17,2)
(31,3,2)
(35,13,2)
(41,9,2)
(0,9,2)
(9,28,2)
(9,9,2)
(22,17,2)
(19,9,2)
(44,17,2)
(3,13,2)
(8,11,2)
(8,3,2)
(26,17,2)
(11,3,2)
(4,9,2)
(42,3,2)
(3,17,2)
(24,17,2)
(12,9,2)
(2,9,2)
(41,28,2)
(15,9,2)
(5,3,2)
(17,17,2)
(35,9,2)
(34,35,2)
(39,3,2)
(11,13,2)
-----------------------------------
(0,i)
(1,RET)
(2,i)
(3,data > 0)
(4,data)
(5,2)
(6,data)
(7,j)
(8,result = data * 2)
(9,i < 1)
(10,j)
(11,data * 2)
(12,"%hd")
(13,data = 0)
(14,0)
(15,1)
(16,)
(17,j < 1)
(18,for(j = 0; j < 1; j++)
(19,stdin)
(20,j)
(21,i)
(22,data)
(23,if(data > 0)
(24,j++)
(25,j = 0)
(26,j)
(27,data)
(28,i = 0)
(29,)
(30,)
(31,data)
(32,i)
(33,printIntLine(result)
(34,fscanf (stdin, "%hd", &data)
(35,&data)
(36,result)
(37,)
(38,0)
(39,result)
(40,0)
(41,i++)
(42,result)
(43,for(i = 0; i < 1; i++)
(44,1)
(45,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^