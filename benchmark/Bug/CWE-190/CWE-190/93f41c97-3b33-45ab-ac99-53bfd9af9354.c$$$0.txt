-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_preinc_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_preinc_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_preinc_17_bad()
CWE190_Integer_Overflow__int_fscanf_preinc_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,41,0)
(19,0,0)
(2,28,0)
(16,41,0)
(12,32,0)
(31,16,0)
(41,22,0)
(11,41,0)
(1,7,0)
(35,41,0)
(27,22,0)
(25,0,0)
(23,22,0)
(10,29,0)
(28,0,0)
(8,29,0)
(38,19,0)
(17,15,0)
(5,41,0)
(26,7,0)
(14,16,0)
(29,3,0)
(36,32,0)
(39,16,0)
(39,17,0)
(32,7,0)
(9,29,0)
(16,17,0)
(5,17,0)
(21,5,0)
(30,7,0)
(6,22,0)
(24,26,0)
(33,39,0)
(40,22,0)
(13,17,0)
(4,22,0)
(20,0,0)
(29,10,0)
(18,10,0)
(34,28,0)
(26,7,1)
(5,41,1)
(26,24,1)
(38,39,1)
(31,5,1)
(20,32,1)
(29,10,1)
(36,12,1)
(16,14,1)
(8,9,1)
(39,33,1)
(11,35,1)
(41,11,1)
(14,31,1)
(19,38,1)
(12,26,1)
(1,30,1)
(28,34,1)
(25,20,1)
(10,18,1)
(2,0,1)
(32,36,1)
(39,16,1)
(24,29,1)
(5,21,1)
(0,25,1)
(19,0,1)
(28,0,1)
(10,41,1)
(12,7,1)
(30,41,1)
(21,28,1)
(7,1,1)
(9,32,1)
(32,7,1)
(34,2,1)
(16,41,1)
(2,19,1)
(37,28,1)
(18,8,1)
(33,16,1)
(29,32,2)
(9,32,2)
(18,32,2)
(24,32,2)
(10,32,2)
(29,10,2)
(2,28,2)
(21,28,2)
(28,0,2)
(26,7,2)
(33,28,2)
(5,41,2)
(34,28,2)
(14,28,2)
(28,28,2)
(12,32,2)
(16,28,2)
(32,32,2)
(31,28,2)
(39,16,2)
(19,28,2)
(5,28,2)
(38,28,2)
(32,7,2)
(10,41,2)
(19,0,2)
(36,32,2)
(16,41,2)
(26,32,2)
(39,28,2)
(8,32,2)
-----------------------------------
(0,j = 0)
(1,0)
(2,j)
(3,)
(4,for(i = 0; i < 1; i++)
(5,++data)
(6,for(j = 0; j < 1; j++)
(7,i = 0)
(8,"%d")
(9,stdin)
(10,&data)
(11,0)
(12,i)
(13,result)
(14,data)
(15,)
(16,result = data)
(17,)
(18,data)
(19,j++)
(20,j)
(21,data)
(22,)
(23,data)
(24,i)
(25,0)
(26,i++)
(27,j)
(28,j < 1)
(29,fscanf(stdin, "%d", &data)
(30,i)
(31,result)
(32,i < 1)
(33,result)
(34,1)
(35,data)
(36,1)
(37,RET)
(38,j)
(39,printIntLine(result)
(40,i)
(41,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^