-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_add_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        int result = data + 1;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,49,53,54,58,60,61,62,66,67,68
-----computeFrom-----
12,13
12,14
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_add_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_add_15_bad()
CWE190_Integer_Overflow__int_fscanf_add_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        int result = data + 1;        printIntLine(result);    }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(13,9,0)
(24,16,0)
(14,24,0)
(10,13,0)
(36,1,0)
(26,16,0)
(28,13,0)
(32,16,0)
(20,26,0)
(25,16,0)
(3,1,0)
(7,31,0)
(15,1,0)
(30,9,0)
(29,13,0)
(33,16,0)
(37,16,0)
(22,28,0)
(6,30,0)
(21,28,0)
(19,9,0)
(13,28,0)
(27,1,0)
(9,31,0)
(12,4,0)
(22,24,0)
(11,4,0)
(4,1,0)
(34,31,0)
(8,1,0)
(28,24,0)
(18,22,0)
(30,4,0)
(0,9,0)
(4,30,0)
(17,36,0)
(35,31,0)
(2,9,1)
(12,2,1)
(6,11,1)
(13,10,1)
(3,4,1)
(26,20,1)
(10,29,1)
(23,15,1)
(36,17,1)
(15,36,1)
(20,23,1)
(28,13,1)
(19,0,1)
(13,9,1)
(17,2,1)
(11,12,1)
(22,18,1)
(18,28,1)
(9,19,1)
(23,3,1)
(5,37,1)
(37,26,1)
(30,9,1)
(30,6,1)
(5,25,1)
(25,22,1)
(21,23,1)
(4,30,1)
(29,21,1)
(22,28,1)
(13,23,2)
(21,23,2)
(36,2,2)
(4,2,2)
(22,28,2)
(20,23,2)
(37,23,2)
(29,23,2)
(17,2,2)
(30,9,2)
(12,2,2)
(11,2,2)
(18,23,2)
(15,2,2)
(26,23,2)
(6,2,2)
(10,23,2)
(30,2,2)
(4,30,2)
(25,23,2)
(22,23,2)
(13,9,2)
(28,23,2)
(28,13,2)
(3,2,2)
-----------------------------------
(0,data)
(1,)
(2,6)
(3,break;)
(4,fscanf(stdin, "%d", &data)
(5,RET)
(6,data)
(7,switch(7)
(8,case 6:)
(9,data = 0)
(10,1)
(11,"%d")
(12,stdin)
(13,data + 1)
(14,result)
(15,break;)
(16,)
(17,"Benign, fixed string")
(18,result)
(19,0)
(20,"Benign, fixed string")
(21,result)
(22,printIntLine(result)
(23,7)
(24,)
(25,break;)
(26,printLine("Benign, fixed string")
(27,default:)
(28,result = data + 1)
(29,data)
(30,&data)
(31,)
(32,case 7:)
(33,default:)
(34,data)
(35,switch(6)
(36,printLine("Benign, fixed string")
(37,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^