-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            data++;
            char result = data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
43,46
44,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,47,50,52,55,59,61,66,68,73,76,78,81,85,87,92,93
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
64,65
64,66
-----guardedBy-----
66,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_12_bad()
CWE190_Integer_Overflow__char_rand_postinc_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(40,37,0)
(3,19,0)
(9,38,0)
(38,20,0)
(19,4,0)
(23,22,0)
(30,44,0)
(41,19,0)
(30,41,0)
(41,44,0)
(46,1,0)
(24,22,0)
(42,12,0)
(2,21,0)
(17,19,0)
(44,8,0)
(0,25,0)
(17,37,0)
(6,20,0)
(16,44,0)
(31,41,0)
(40,10,0)
(21,22,0)
(5,42,0)
(17,44,0)
(1,19,0)
(26,30,0)
(28,45,0)
(43,10,0)
(33,1,0)
(14,40,0)
(36,41,0)
(15,19,0)
(22,19,0)
(18,37,0)
(42,37,0)
(21,10,0)
(41,37,0)
(42,5,0)
(37,11,0)
(22,10,0)
(35,38,0)
(32,20,0)
(22,37,0)
(1,37,0)
(45,29,0)
(12,42,0)
(37,42,0)
(40,19,0)
(27,20,0)
(13,17,0)
(17,13,1)
(24,40,1)
(1,19,1)
(18,39,1)
(22,37,1)
(41,19,1)
(33,46,1)
(46,7,1)
(30,41,1)
(39,38,1)
(2,22,1)
(30,26,1)
(38,35,1)
(37,42,1)
(15,3,1)
(7,37,1)
(3,39,1)
(22,23,1)
(45,28,1)
(31,36,1)
(42,12,1)
(26,41,1)
(14,1,1)
(13,7,1)
(1,37,1)
(23,24,1)
(17,37,1)
(34,30,1)
(40,37,1)
(1,33,1)
(40,19,1)
(12,18,1)
(21,2,1)
(7,19,1)
(35,9,1)
(41,31,1)
(21,22,1)
(22,19,1)
(34,21,1)
(36,17,1)
(17,19,1)
(42,5,1)
(41,37,1)
(28,1,1)
(34,45,1)
(19,15,1)
(40,14,1)
(42,39,2)
(31,7,2)
(46,7,2)
(24,1,2)
(15,39,2)
(30,7,2)
(45,1,2)
(37,39,2)
(22,1,2)
(23,1,2)
(17,37,2)
(40,19,2)
(22,37,2)
(22,19,2)
(41,37,2)
(1,7,2)
(21,1,2)
(17,7,2)
(19,39,2)
(28,1,2)
(1,19,2)
(26,7,2)
(33,7,2)
(13,7,2)
(17,19,2)
(21,22,2)
(12,39,2)
(18,39,2)
(30,41,2)
(42,12,2)
(40,37,2)
(2,1,2)
(40,1,2)
(41,19,2)
(42,5,2)
(36,7,2)
(14,1,2)
(37,42,2)
(3,39,2)
(41,7,2)
(1,37,2)
-----------------------------------
(0,if (data < CHAR_MAX)
(1,data < CHAR_MAX)
(2,result)
(3,data)
(4,)
(5,char)
(6,if(globalReturnsTrueOrFalse()
(7,globalReturnsTrueOrFalse()
(8,)
(9,data)
(10,)
(11,)
(12,RAND32()
(13,data)
(14,data)
(15,2)
(16,result)
(17,data++)
(18,data)
(19,data = 2)
(20,)
(21,printHexCharLine(result)
(22,result = data)
(23,data)
(24,result)
(25,)
(26,result)
(27,data)
(28,"data value is too large to perform arithmetic safely.")
(29,)
(30,printHexCharLine(result)
(31,data)
(32,if(globalReturnsTrueOrFalse()
(33,CHAR_MAX)
(34,RET)
(35,\\\' \\\')
(36,result)
(37,data = (char)
(38,data = \\\' \\\')
(39,globalReturnsTrueOrFalse()
(40,data++)
(41,result = data)
(42,(char)
(43,result)
(44,)
(45,printLine("data value is too large to perform arithmetic safely.")
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^