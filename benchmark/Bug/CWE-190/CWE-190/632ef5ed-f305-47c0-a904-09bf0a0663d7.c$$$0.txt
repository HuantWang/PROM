-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_10_bad()
{
    short data;
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(globalTrue)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,35,39,41,45,47
-----computeFrom-----
12,13
12,14
21,22
21,23
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_10_bad(){    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_10_bad()
CWE190_Integer_Overflow__short_max_square_10_bad
{    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(globalTrue)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalTrue
globalTrue
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(14,22,0)
(1,0,0)
(19,20,0)
(9,14,0)
(13,5,0)
(3,5,0)
(6,8,0)
(7,4,0)
(18,19,0)
(8,0,0)
(21,18,0)
(8,4,0)
(11,14,0)
(17,8,0)
(4,19,0)
(8,14,0)
(4,8,0)
(10,19,0)
(0,5,0)
(16,0,0)
(23,5,0)
(18,4,0)
(17,7,1)
(15,12,1)
(15,18,1)
(2,0,1)
(6,17,1)
(8,0,1)
(18,21,1)
(9,11,1)
(0,1,1)
(14,9,1)
(11,2,1)
(1,16,1)
(12,2,1)
(8,6,1)
(8,14,1)
(7,12,1)
(4,8,1)
(18,4,1)
(21,4,1)
(12,14,1)
(21,12,2)
(18,4,2)
(8,0,2)
(14,2,2)
(4,8,2)
(9,2,2)
(11,2,2)
(8,14,2)
(8,12,2)
(4,12,2)
(17,12,2)
(7,12,2)
(18,12,2)
(6,12,2)
-----------------------------------
(0,data = 0)
(1,0)
(2,globalTrue)
(3,data)
(4,result = data * data)
(5,)
(6,data)
(7,result)
(8,data * data)
(9,SHRT_MAX)
(10,result)
(11,data)
(12,globalTrue)
(13,if(globalTrue)
(14,data = SHRT_MAX)
(15,RET)
(16,data)
(17,data)
(18,printIntLine(result)
(19,)
(20,)
(21,result)
(22,)
(23,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^