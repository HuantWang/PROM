-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,48,52,54,58,59,63,65,66,67,71,72,73
-----computeFrom-----
12,13
12,14
45,46
45,47
56,57
56,58
-----guardedBy-----
47,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_15_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(18,15,0)
(9,39,0)
(7,0,0)
(37,35,0)
(19,17,0)
(26,2,0)
(0,15,0)
(32,2,0)
(31,26,0)
(15,36,0)
(14,9,0)
(2,26,0)
(20,3,0)
(24,36,0)
(38,35,0)
(3,15,0)
(25,2,0)
(30,16,0)
(16,35,0)
(28,36,0)
(26,15,0)
(16,3,0)
(34,37,0)
(2,39,0)
(11,39,0)
(5,39,0)
(8,6,0)
(41,6,0)
(27,39,0)
(23,3,0)
(33,36,0)
(10,15,0)
(3,16,0)
(4,39,0)
(17,6,0)
(12,6,0)
(40,0,0)
(13,6,0)
(22,6,0)
(37,16,0)
(40,7,1)
(13,17,1)
(20,23,1)
(34,16,1)
(18,10,1)
(37,34,1)
(26,31,1)
(29,22,1)
(16,3,1)
(1,27,1)
(9,14,1)
(1,4,1)
(22,37,1)
(21,15,1)
(37,16,1)
(27,2,1)
(32,25,1)
(22,0,1)
(31,32,1)
(29,13,1)
(3,20,1)
(17,19,1)
(23,30,1)
(4,9,1)
(30,0,1)
(14,21,1)
(3,15,1)
(19,1,1)
(26,15,1)
(7,1,1)
(0,40,1)
(15,18,1)
(2,26,1)
(25,21,1)
(0,15,1)
(3,15,2)
(16,0,2)
(7,1,2)
(3,0,2)
(26,21,2)
(31,21,2)
(22,1,2)
(27,21,2)
(9,21,2)
(30,0,2)
(2,21,2)
(37,0,2)
(23,0,2)
(0,15,2)
(20,0,2)
(25,21,2)
(17,1,2)
(13,1,2)
(4,21,2)
(40,1,2)
(14,21,2)
(19,1,2)
(0,1,2)
(2,26,2)
(32,21,2)
(34,0,2)
(16,3,2)
(26,15,2)
(37,16,2)
-----------------------------------
(0,data > 0)
(1,7)
(2,fscanf (stdin, "%c", &data)
(3,data * 2)
(4,break;)
(5,case 6:)
(6,)
(7,data)
(8,if(data > 0)
(9,printLine("Benign, fixed string")
(10,data)
(11,default:)
(12,case 7:)
(13,break;)
(14,"Benign, fixed string")
(15,data = \\\' \\\')
(16,result = data * 2)
(17,printLine("Benign, fixed string")
(18,\\\' \\\')
(19,"Benign, fixed string")
(20,2)
(21,6)
(22,break;)
(23,data)
(24,switch(7)
(25,stdin)
(26,&data)
(27,break;)
(28,data)
(29,RET)
(30,result)
(31,data)
(32,"%c")
(33,switch(6)
(34,result)
(35,)
(36,)
(37,printHexCharLine(result)
(38,result)
(39,)
(40,0)
(41,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^