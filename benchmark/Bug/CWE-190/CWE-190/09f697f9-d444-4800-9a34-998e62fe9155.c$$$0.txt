-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_31_bad()
{
    unsigned int data;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (unsigned int)RAND32();
    {
        unsigned int dataCopy = data;
        unsigned int data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,47,48,52,54,58,59,63,65
-----computeFrom-----
12,13
12,14
17,18
17,19
45,46
45,47
56,57
56,58
-----guardedBy-----
47,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_31_bad(){    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();    {        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_31_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_31_bad
{    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (unsigned int)RAND32();    {        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
{        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int dataCopy = data;
unsigned int dataCopy = data;
unsigned int
dataCopy = data
dataCopy
= data
data
data
unsigned int data = dataCopy;
unsigned int data = dataCopy;
unsigned int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(26,13,0)
(10,12,0)
(23,2,0)
(27,5,0)
(8,13,0)
(30,2,0)
(24,16,0)
(29,23,0)
(9,20,0)
(0,21,0)
(26,9,0)
(6,19,0)
(16,13,0)
(22,23,0)
(31,21,0)
(14,2,0)
(6,29,0)
(3,9,0)
(1,26,0)
(2,5,0)
(9,3,0)
(18,5,0)
(23,5,0)
(9,26,0)
(2,26,0)
(20,9,0)
(4,6,0)
(17,29,0)
(12,19,0)
(15,19,0)
(11,29,0)
(29,6,0)
(21,23,0)
(28,5,0)
(5,13,0)
(7,16,0)
(25,23,0)
(12,6,0)
(9,3,1)
(2,26,1)
(9,20,1)
(32,21,1)
(25,22,1)
(3,1,1)
(22,2,1)
(23,2,1)
(0,31,1)
(1,16,1)
(2,30,1)
(4,21,1)
(26,9,1)
(30,14,1)
(17,11,1)
(21,23,1)
(7,24,1)
(23,25,1)
(29,17,1)
(29,23,1)
(16,7,1)
(31,23,1)
(11,4,1)
(21,0,1)
(12,10,1)
(14,26,1)
(6,29,1)
(32,12,1)
(12,6,1)
(10,6,1)
(29,21,2)
(26,9,2)
(17,21,2)
(2,26,2)
(6,29,2)
(4,21,2)
(9,20,2)
(29,23,2)
(21,23,2)
(11,21,2)
(10,21,2)
(12,21,2)
(6,21,2)
(23,2,2)
(9,3,2)
(12,6,2)
-----------------------------------
(0,0)
(1,data)
(2,dataCopy = data)
(3,RAND32()
(4,result)
(5,)
(6,result = data * 2)
(7,0)
(8,data)
(9,(unsigned int)
(10,result)
(11,data)
(12,printUnsignedLine(result)
(13,)
(14,dataCopy)
(15,result)
(16,data = 0)
(17,2)
(18,data)
(19,)
(20,unsigned int)
(21,data > 0)
(22,data)
(23,data = dataCopy)
(24,data)
(25,dataCopy)
(26,data = (unsigned int)
(27,dataCopy)
(28,if(data > 0)
(29,data * 2)
(30,data)
(31,data)
(32,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^