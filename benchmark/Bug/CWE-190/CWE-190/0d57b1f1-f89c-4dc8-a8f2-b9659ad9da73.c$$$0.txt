-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_preinc_07_bad()
CWE190_Integer_Overflow__char_max_preinc_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(11,12,0)
(6,20,0)
(2,17,0)
(0,4,0)
(3,26,0)
(24,16,0)
(5,4,0)
(15,11,0)
(4,16,0)
(17,11,0)
(27,26,0)
(28,17,0)
(19,17,0)
(17,13,0)
(28,11,0)
(0,13,0)
(10,16,0)
(1,13,0)
(13,9,0)
(23,28,0)
(8,16,0)
(18,0,0)
(14,20,0)
(0,11,0)
(25,13,0)
(21,4,0)
(17,4,0)
(6,14,1)
(25,26,1)
(0,18,1)
(0,4,1)
(23,17,1)
(22,28,1)
(1,25,1)
(28,23,1)
(28,17,1)
(0,13,1)
(17,13,1)
(27,3,1)
(18,20,1)
(2,19,1)
(19,0,1)
(4,5,1)
(5,21,1)
(20,6,1)
(26,27,1)
(13,1,1)
(17,2,1)
(22,20,1)
(3,4,1)
(17,4,1)
(14,13,1)
(14,26,1)
(25,26,2)
(0,13,2)
(13,26,2)
(17,13,2)
(28,17,2)
(23,20,2)
(19,20,2)
(17,4,2)
(28,20,2)
(18,20,2)
(17,20,2)
(2,20,2)
(0,4,2)
(0,20,2)
(1,26,2)
-----------------------------------
(0,++data)
(1,CHAR_MAX)
(2,data)
(3,staticFive)
(4,data = \' \')
(5,' ')
(6,5)
(7,data = ' ')
(8,if(staticFive==5)
(9,)
(10,if(staticFive==5)
(11,)
(12,)
(13,data = CHAR_MAX)
(14,staticFive)
(15,result)
(16,)
(17,result = data)
(18,data)
(19,result)
(20,staticFive==5)
(21,data)
(22,RET)
(23,result)
(24,data)
(25,data)
(26,staticFive==5)
(27,5)
(28,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^