-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
29,31
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,30,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
29,30
29,31
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_03_bad()
CWE190_Integer_Overflow__int_rand_square_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(2,1,0)
(18,5,0)
(21,19,0)
(26,1,0)
(2,5,0)
(0,13,0)
(2,13,0)
(10,19,0)
(8,1,0)
(12,22,0)
(14,17,0)
(9,23,0)
(7,13,0)
(7,17,0)
(5,23,0)
(17,16,0)
(1,26,0)
(13,17,0)
(20,23,0)
(4,2,0)
(13,2,0)
(27,23,0)
(6,7,0)
(15,5,0)
(1,11,0)
(3,22,0)
(25,2,0)
(8,19,1)
(10,5,1)
(13,2,1)
(24,22,1)
(25,0,1)
(3,12,1)
(22,3,1)
(2,5,1)
(26,8,1)
(1,26,1)
(7,6,1)
(12,1,1)
(2,4,1)
(4,25,1)
(12,19,1)
(19,21,1)
(21,10,1)
(5,15,1)
(15,18,1)
(2,1,1)
(0,22,1)
(6,13,1)
(7,13,1)
(24,7,1)
(2,5,2)
(2,22,2)
(0,22,2)
(26,19,2)
(7,22,2)
(13,2,2)
(1,19,2)
(1,26,2)
(13,22,2)
(4,22,2)
(2,1,2)
(7,13,2)
(8,19,2)
(6,22,2)
(25,22,2)
-----------------------------------
(0,result)
(1,data = RAND32()
(2,data * data)
(3,5)
(4,data)
(5,data = 0)
(6,result)
(7,printIntLine(result)
(8,data)
(9,if(5==5)
(10,5)
(11,)
(12,5)
(13,result = data * data)
(14,result)
(15,0)
(16,)
(17,)
(18,data)
(19,5==5)
(20,if(5==5)
(21,5)
(22,5==5)
(23,)
(24,RET)
(25,data)
(26,RAND32()
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^