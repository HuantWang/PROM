-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_04_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_04_bad(){    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_04_bad()
CWE190_Integer_Overflow__char_rand_multiply_04_bad
{    char data;    data = ' ';    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(13,14,0)
(15,14,0)
(13,17,0)
(1,4,0)
(9,12,0)
(4,14,0)
(11,25,0)
(25,30,0)
(25,26,0)
(22,12,0)
(15,23,0)
(10,15,0)
(24,13,0)
(14,15,0)
(27,13,0)
(15,10,0)
(30,26,0)
(0,14,0)
(14,8,0)
(16,18,0)
(23,15,0)
(5,30,0)
(17,12,0)
(30,4,0)
(2,17,0)
(6,4,0)
(29,26,0)
(4,17,0)
(4,30,0)
(3,17,0)
(21,12,0)
(1,5,1)
(0,20,1)
(10,0,1)
(25,30,1)
(5,13,1)
(13,14,1)
(4,14,1)
(19,7,1)
(25,11,1)
(13,24,1)
(4,17,1)
(4,6,1)
(7,20,1)
(19,25,1)
(27,7,1)
(19,13,1)
(15,10,1)
(14,15,1)
(13,17,1)
(20,17,1)
(15,23,1)
(24,27,1)
(30,4,1)
(11,30,1)
(3,2,1)
(6,1,1)
(17,3,1)
(7,14,1)
(1,13,2)
(4,13,2)
(0,20,2)
(24,7,2)
(13,14,2)
(27,7,2)
(25,13,2)
(30,13,2)
(10,20,2)
(6,13,2)
(30,4,2)
(4,14,2)
(13,7,2)
(14,20,2)
(14,15,2)
(13,17,2)
(11,13,2)
(15,20,2)
(4,17,2)
(5,13,2)
(25,30,2)
(15,10,2)
(15,23,2)
-----------------------------------
(0,data)
(1,data)
(2,data)
(3,' ')
(4,data * 2)
(5,result)
(6,2)
(7,STATIC_CONST_TRUE)
(8,)
(9,if(STATIC_CONST_TRUE)
(10,RAND32()
(11,result)
(12,)
(13,data > 0)
(14,data = (char)
(15,(char)
(16,if(data > 0)
(17,data = ' ')
(18,)
(19,RET)
(20,STATIC_CONST_TRUE)
(21,if(STATIC_CONST_TRUE)
(22,data)
(23,char)
(24,0)
(25,printHexCharLine(result)
(26,)
(27,data)
(28,data = \' \')
(29,result)
(30,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^