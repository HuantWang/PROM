-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_52c_badSink(char data)
{
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
11,13
12,13
15,16
15,17
16,17
17,18
17,19
19,20
19,21
21,22
22,23
22,24
23,24
26,27
27,28
27,29
28,29
30,31
-----nextToken-----
2,4,6,8,13,14,18,20,24,25,29,31
-----computeFrom-----
11,12
11,13
22,23
22,24
-----guardedBy-----
13,24
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_52c_badSink(char data){    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_multiply_52c_badSink(char data)
CWE190_Integer_Overflow__char_rand_multiply_52c_badSink
char data
char
data
data
{    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(11,6,0)
(14,6,0)
(5,11,0)
(14,7,0)
(6,7,0)
(1,11,0)
(6,11,0)
(3,7,0)
(11,8,0)
(15,6,0)
(13,8,0)
(10,14,0)
(2,13,0)
(12,0,0)
(4,13,0)
(15,13,1)
(14,6,1)
(11,1,1)
(1,5,1)
(13,8,1)
(10,6,1)
(11,8,1)
(4,2,1)
(6,11,1)
(14,10,1)
(9,13,1)
(9,14,1)
(5,15,1)
(13,4,1)
(11,13,2)
(5,13,2)
(6,11,2)
(1,13,2)
(14,6,2)
(13,8,2)
(15,13,2)
(6,13,2)
(14,13,2)
(10,13,2)
(11,8,2)
-----------------------------------
(0,)
(1,2)
(2,data)
(3,result)
(4,0)
(5,data)
(6,result = data * 2)
(7,)
(8,char data)
(9,RET)
(10,result)
(11,data * 2)
(12,if(data > 0)
(13,data > 0)
(14,printHexCharLine(result)
(15,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^