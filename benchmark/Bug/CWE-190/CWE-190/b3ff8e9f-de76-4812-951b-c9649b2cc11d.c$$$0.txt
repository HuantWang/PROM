-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_preinc_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
50,51
50,52
50,53
52,53
53,54
55,56
57,58
57,59
57,60
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
89,90
91,92
93,94
93,95
94,95
95,96
95,97
97,98
97,99
99,100
100,101
101,102
103,104
103,105
103,106
104,105
105,106
106,107
108,109
109,110
109,111
111,112
111,113
113,114
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,54,56,61,63,65,67,69,74,77,79,84,85,90,92,96,98,102,107,110,112,115,119,121
-----computeFrom-----
32,33
32,34
58,59
58,60
72,73
72,74
87,88
87,89
-----guardedBy-----
63,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_preinc_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_preinc_32_bad()
CWE190_Integer_Overflow__int_fgets_preinc_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(58,29,0)
(3,22,0)
(6,41,0)
(8,49,0)
(26,13,0)
(59,12,0)
(14,40,0)
(20,54,0)
(7,49,0)
(55,46,0)
(43,41,0)
(14,27,0)
(54,29,0)
(48,23,0)
(21,48,0)
(46,18,0)
(52,22,0)
(39,33,0)
(40,23,0)
(23,46,0)
(34,29,0)
(11,56,0)
(12,56,0)
(42,3,0)
(28,2,0)
(40,27,0)
(12,33,0)
(19,54,0)
(37,24,0)
(56,41,0)
(23,32,0)
(57,22,0)
(29,56,0)
(24,41,0)
(50,44,0)
(49,30,0)
(11,49,0)
(2,18,0)
(35,11,0)
(44,41,0)
(18,41,0)
(8,54,0)
(1,24,0)
(60,27,0)
(15,23,0)
(53,18,0)
(47,24,0)
(18,2,0)
(22,3,0)
(4,40,0)
(31,1,0)
(32,41,0)
(25,32,0)
(33,12,0)
(37,11,0)
(33,24,0)
(5,41,0)
(24,1,0)
(11,12,0)
(48,27,0)
(51,40,0)
(46,23,0)
(16,26,0)
(49,8,0)
(45,14,0)
(10,44,0)
(38,56,0)
(17,37,0)
(0,22,0)
(27,32,0)
(22,54,0)
(9,8,0)
(22,0,1)
(49,8,1)
(23,46,1)
(26,16,1)
(14,40,1)
(28,53,1)
(19,20,1)
(24,1,1)
(55,15,1)
(37,24,1)
(46,18,1)
(52,54,1)
(50,10,1)
(2,28,1)
(57,52,1)
(1,31,1)
(0,57,1)
(45,40,1)
(20,12,1)
(54,19,1)
(7,3,1)
(4,48,1)
(42,22,1)
(51,4,1)
(22,54,1)
(9,7,1)
(14,45,1)
(48,21,1)
(11,12,1)
(15,11,1)
(35,37,1)
(40,51,1)
(33,39,1)
(46,55,1)
(18,2,1)
(8,9,1)
(10,18,1)
(21,23,1)
(17,49,1)
(12,33,1)
(16,3,1)
(3,22,1)
(33,24,1)
(11,35,1)
(36,14,1)
(48,23,1)
(17,26,1)
(11,49,1)
(8,54,1)
(59,44,1)
(3,42,1)
(39,59,1)
(40,23,1)
(37,17,1)
(31,47,1)
(44,50,1)
(53,24,1)
(12,33,2)
(18,2,2)
(8,3,2)
(22,54,2)
(40,23,2)
(8,54,2)
(24,1,2)
(37,24,2)
(11,49,2)
(33,24,2)
(49,3,2)
(7,3,2)
(23,46,2)
(3,22,2)
(48,23,2)
(11,12,2)
(9,3,2)
(46,18,2)
(14,40,2)
(26,3,2)
(16,3,2)
(49,8,2)
-----------------------------------
(0,stdin)
(1,&data)
(2,&data)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,result)
(5,dataPtr1)
(6,dataPtr2)
(7,data)
(8,atoi(inputBuffer)
(9,inputBuffer)
(10,data)
(11,*dataPtr1 = data)
(12,data = *dataPtr1)
(13,)
(14,printIntLine(result)
(15,data)
(16,"fgets()
(17,dataPtr1)
(18,*dataPtr2 = &data)
(19,"")
(20,inputBuffer)
(21,data)
(22,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,data = *dataPtr2)
(24,*dataPtr1 = &data)
(25,data)
(26,printLine("fgets()
(27,)
(28,data)
(29,)
(30,)
(31,data)
(32,)
(33,*dataPtr1)
(34,inputBuffer)
(35,data)
(36,RET)
(37,*dataPtr1)
(38,data)
(39,dataPtr1)
(40,result = data)
(41,)
(42,NULL)
(43,data)
(44,data = 0)
(45,result)
(46,*dataPtr2)
(47,dataPtr1)
(48,++data)
(49,data = atoi(inputBuffer)
(50,0)
(51,data)
(52,inputBuffer)
(53,dataPtr2)
(54,inputBuffer[CHAR_ARRAY_SIZE] = "")
(55,dataPtr2)
(56,)
(57,CHAR_ARRAY_SIZE)
(58,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(59,data)
(60,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^