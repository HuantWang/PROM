-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))
        {
            int result = data * data;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
58,60
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
74,75
74,76
75,76
77,78
77,79
78,79
78,80
81,82
83,84
83,85
84,85
85,86
85,87
87,88
87,89
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,43,47,49,53,55,61,63,67,69,72,73,76,79,80,82,86,88,92,94,98,100,105,106
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
45,46
45,47
58,59
58,60
59,60
59,61
64,65
64,66
90,91
90,92
-----guardedBy-----
69,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int_max_square_12_bad()
CWE190_Integer_Overflow__int_max_square_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))        {            int result = data * data;            printIntLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX)
data > INT_MIN
data
data
INT_MIN
INT_MIN
abs(data) < (long)sqrt((double)INT_MAX)
abs(data)
abs
abs
data
data
(long)sqrt((double)INT_MAX)
long
long

sqrt((double)INT_MAX)
sqrt
sqrt
(double)INT_MAX
double
double

INT_MAX
INT_MAX
{            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(39,0,0)
(5,0,0)
(22,44,0)
(16,42,0)
(25,16,0)
(28,38,0)
(37,24,0)
(28,22,0)
(24,44,0)
(1,24,0)
(50,44,0)
(47,48,0)
(52,8,0)
(24,48,0)
(33,44,0)
(22,16,0)
(11,21,0)
(45,44,0)
(34,22,0)
(0,52,0)
(23,6,0)
(44,27,0)
(10,38,0)
(41,28,0)
(26,22,0)
(52,45,0)
(32,23,0)
(15,19,0)
(54,8,0)
(0,5,0)
(51,35,0)
(54,16,0)
(54,44,0)
(45,16,0)
(52,0,0)
(0,39,0)
(46,5,0)
(45,52,0)
(9,16,0)
(8,52,0)
(18,19,0)
(29,21,0)
(5,46,0)
(46,3,0)
(48,23,0)
(24,16,0)
(49,54,0)
(8,54,0)
(3,46,0)
(19,21,0)
(14,21,0)
(40,51,0)
(48,24,0)
(53,54,0)
(2,46,0)
(43,48,0)
(30,13,0)
(7,47,0)
(13,38,0)
(22,28,0)
(36,31,0)
(12,45,0)
(47,23,0)
(13,28,0)
(24,37,1)
(54,44,1)
(12,54,1)
(28,22,1)
(52,0,1)
(48,24,1)
(17,47,1)
(30,28,1)
(26,41,1)
(13,30,1)
(20,44,1)
(43,20,1)
(37,1,1)
(45,16,1)
(52,45,1)
(20,16,1)
(34,26,1)
(8,52,1)
(53,20,1)
(4,19,1)
(24,44,1)
(9,4,1)
(50,4,1)
(33,50,1)
(1,43,1)
(51,40,1)
(41,8,1)
(47,7,1)
(45,12,1)
(7,48,1)
(54,49,1)
(22,34,1)
(54,16,1)
(22,44,1)
(13,28,1)
(46,3,1)
(16,25,1)
(19,18,1)
(24,16,1)
(40,8,1)
(49,53,1)
(2,45,1)
(17,13,1)
(44,33,1)
(8,54,1)
(47,48,1)
(5,46,1)
(46,2,1)
(22,16,1)
(17,51,1)
(25,9,1)
(18,15,1)
(45,44,1)
(0,39,1)
(0,5,1)
(53,20,2)
(45,54,2)
(1,20,2)
(7,20,2)
(40,8,2)
(54,16,2)
(47,20,2)
(0,5,2)
(44,4,2)
(34,8,2)
(43,20,2)
(0,39,2)
(22,8,2)
(51,8,2)
(24,44,2)
(5,54,2)
(8,54,2)
(25,4,2)
(0,54,2)
(24,16,2)
(52,54,2)
(22,44,2)
(48,24,2)
(13,8,2)
(33,4,2)
(28,22,2)
(28,8,2)
(26,8,2)
(9,4,2)
(41,8,2)
(46,3,2)
(54,44,2)
(5,46,2)
(12,54,2)
(52,0,2)
(8,20,2)
(22,16,2)
(48,20,2)
(45,44,2)
(52,45,2)
(54,20,2)
(49,20,2)
(24,20,2)
(46,54,2)
(30,8,2)
(2,54,2)
(16,4,2)
(45,16,2)
(50,4,2)
(8,52,2)
(37,20,2)
(47,48,2)
(13,28,2)
-----------------------------------
(0,(long)
(1,data)
(2,INT_MAX)
(3,double)
(4,globalReturnsTrueOrFalse()
(5,sqrt((double)
(6,)
(7,result)
(8,data > INT_MIN && abs(data)
(9,data)
(10,result)
(11,data)
(12,data)
(13,printIntLine(result)
(14,if(globalReturnsTrueOrFalse()
(15,data)
(16,data = INT_MAX)
(17,RET)
(18,0)
(19,data = 0)
(20,globalReturnsTrueOrFalse()
(21,)
(22,data * data)
(23,)
(24,data * data)
(25,INT_MAX)
(26,data)
(27,)
(28,result = data * data)
(29,if(globalReturnsTrueOrFalse()
(30,result)
(31,)
(32,result)
(33,2)
(34,data)
(35,)
(36,if (data > INT_MIN && abs(data)
(37,data)
(38,)
(39,long)
(40,"data value is too large to perform arithmetic safely.")
(41,result)
(42,)
(43,result)
(44,data = 2)
(45,abs(data)
(46,(double)
(47,printIntLine(result)
(48,result = data * data)
(49,INT_MIN)
(50,data)
(51,printLine("data value is too large to perform arithmetic safely.")
(52,abs(data)
(53,data)
(54,data > INT_MIN)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^