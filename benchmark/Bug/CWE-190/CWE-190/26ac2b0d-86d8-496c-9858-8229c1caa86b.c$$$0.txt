-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_10_bad()
{
    short data;
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_10_bad(){    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_10_bad()
CWE190_Integer_Overflow__short_rand_multiply_10_bad
{    short data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(6,20,0)
(27,3,0)
(13,2,0)
(4,19,0)
(11,27,0)
(9,27,0)
(7,14,0)
(26,29,0)
(14,8,0)
(25,29,0)
(23,2,0)
(15,13,0)
(2,29,0)
(0,27,0)
(22,3,0)
(21,12,0)
(14,3,0)
(3,5,0)
(27,9,0)
(17,9,0)
(10,29,0)
(19,9,0)
(14,7,0)
(18,2,0)
(3,14,0)
(28,13,0)
(13,3,0)
(9,12,0)
(8,14,0)
(19,12,0)
(27,2,0)
(11,0,1)
(16,2,1)
(22,16,1)
(19,9,1)
(14,7,1)
(2,18,1)
(27,3,1)
(13,2,1)
(1,3,1)
(17,13,1)
(9,27,1)
(24,19,1)
(4,9,1)
(24,13,1)
(8,22,1)
(18,23,1)
(14,8,1)
(28,1,1)
(19,4,1)
(24,1,1)
(27,2,1)
(27,11,1)
(3,14,1)
(1,16,1)
(13,3,1)
(13,15,1)
(0,17,1)
(15,28,1)
(15,1,2)
(0,13,2)
(19,9,2)
(19,13,2)
(27,13,2)
(13,2,2)
(13,1,2)
(14,8,2)
(9,27,2)
(9,13,2)
(8,16,2)
(11,13,2)
(3,16,2)
(3,14,2)
(17,13,2)
(27,3,2)
(14,7,2)
(13,3,2)
(28,1,2)
(27,2,2)
(14,16,2)
(22,16,2)
(4,13,2)
-----------------------------------
(0,data)
(1,globalTrue)
(2,data = 0)
(3,data = (short)
(4,result)
(5,)
(6,if(data > 0)
(7,short)
(8,RAND32()
(9,result = data * 2)
(10,data)
(11,2)
(12,)
(13,data > 0)
(14,(short)
(15,0)
(16,globalTrue)
(17,result)
(18,0)
(19,printIntLine(result)
(20,)
(21,result)
(22,data)
(23,data)
(24,RET)
(25,if(globalTrue)
(26,if(globalTrue)
(27,data * 2)
(28,data)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^