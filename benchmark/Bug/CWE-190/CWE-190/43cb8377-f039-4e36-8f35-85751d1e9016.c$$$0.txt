-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_03_bad()
CWE190_Integer_Overflow__int_fscanf_square_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,8,0)
(13,12,0)
(18,21,0)
(8,17,0)
(15,3,0)
(1,13,0)
(27,26,0)
(12,13,0)
(7,17,0)
(22,5,0)
(23,21,0)
(15,27,0)
(28,27,0)
(13,20,0)
(2,3,0)
(24,13,0)
(12,8,0)
(16,17,0)
(11,29,0)
(5,27,0)
(4,3,0)
(3,8,0)
(25,8,0)
(3,15,0)
(10,29,0)
(5,15,0)
(9,15,0)
(6,17,0)
(14,12,0)
(15,3,1)
(13,12,1)
(23,18,1)
(14,24,1)
(11,10,1)
(9,29,1)
(19,5,1)
(8,25,1)
(25,0,1)
(19,29,1)
(10,13,1)
(10,21,1)
(12,14,1)
(5,15,1)
(22,15,1)
(2,4,1)
(4,9,1)
(3,2,1)
(3,8,1)
(21,23,1)
(5,22,1)
(29,11,1)
(1,21,1)
(24,1,1)
(18,8,1)
(12,8,1)
(3,29,2)
(5,29,2)
(24,21,2)
(12,8,2)
(14,21,2)
(1,21,2)
(13,12,2)
(5,15,2)
(9,29,2)
(22,29,2)
(13,21,2)
(15,3,2)
(3,8,2)
(12,21,2)
(4,29,2)
(2,29,2)
(15,29,2)
-----------------------------------
(0,data)
(1,stdin)
(2,data)
(3,data * data)
(4,data)
(5,printIntLine(result)
(6,data)
(7,if(5==5)
(8,data = 0)
(9,result)
(10,5)
(11,5)
(12,&data)
(13,fscanf(stdin, "%d", &data)
(14,data)
(15,result = data * data)
(16,if(5==5)
(17,)
(18,5)
(19,RET)
(20,)
(21,5==5)
(22,result)
(23,5)
(24,"%d")
(25,0)
(26,)
(27,)
(28,result)
(29,5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^