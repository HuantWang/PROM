-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
31,32
32,33
36,37
37,38
37,39
38,39
42,43
42,44
44,45
44,46
44,47
44,48
44,49
44,50
45,46
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
55,56
57,58
57,59
59,60
60,61
60,62
61,62
64,65
65,66
65,67
66,67
68,69
72,73
73,74
73,75
74,75
-----nextToken-----
2,4,9,11,15,16,18,21,25,29,30,33,34,35,39,40,41,43,46,50,51,56,58,62,63,67,69,70,71,75,76,77
-----computeFrom-----
13,14
13,15
23,24
23,25
48,49
48,50
60,61
60,62
-----guardedBy-----
50,62
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_multiply_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_rand_multiply_15_bad()
CWE190_Integer_Overflow__int64_t_rand_multiply_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(12,22,0)
(30,3,0)
(36,11,0)
(11,2,0)
(5,11,0)
(14,3,0)
(34,3,0)
(25,37,0)
(10,37,0)
(11,16,0)
(15,37,0)
(4,32,0)
(28,2,0)
(22,12,0)
(24,3,0)
(8,32,0)
(9,3,0)
(13,2,0)
(19,32,0)
(12,15,0)
(12,35,0)
(2,15,0)
(0,15,0)
(6,16,0)
(15,12,0)
(29,0,0)
(7,37,0)
(38,3,0)
(21,15,0)
(31,32,0)
(26,37,0)
(1,30,0)
(35,12,0)
(18,23,0)
(20,36,0)
(2,11,0)
(33,0,0)
(23,37,0)
(36,16,0)
(23,18,1)
(35,21,1)
(30,1,1)
(10,23,1)
(18,27,1)
(29,39,1)
(17,34,1)
(1,39,1)
(34,30,1)
(5,0,1)
(39,10,1)
(2,15,1)
(0,15,1)
(25,15,1)
(0,33,1)
(33,29,1)
(36,20,1)
(15,12,1)
(2,28,1)
(28,13,1)
(27,4,1)
(12,22,1)
(38,0,1)
(38,36,1)
(11,2,1)
(12,35,1)
(13,5,1)
(21,27,1)
(17,38,1)
(20,11,1)
(36,11,1)
(39,25,1)
(12,27,2)
(36,0,2)
(12,22,2)
(38,39,2)
(0,39,2)
(33,39,2)
(25,27,2)
(13,0,2)
(23,27,2)
(2,15,2)
(35,27,2)
(1,39,2)
(15,27,2)
(18,27,2)
(15,12,2)
(10,27,2)
(12,35,2)
(29,39,2)
(11,0,2)
(36,11,2)
(0,15,2)
(11,2,2)
(34,39,2)
(30,39,2)
(20,0,2)
(5,0,2)
(21,27,2)
(28,0,2)
(2,0,2)
-----------------------------------
(0,data > 0)
(1,"Benign, fixed string")
(2,data * 2)
(3,)
(4,L)
(5,result)
(6,result)
(7,case 6:)
(8,switch(6)
(9,if(data > 0)
(10,break;)
(11,result = data * 2)
(12,(int64_t)
(13,data)
(14,default:)
(15,data = (int64_t)
(16,)
(17,RET)
(18,"Benign, fixed string")
(19,switch(7)
(20,result)
(21,data)
(22,int64_t)
(23,printLine("Benign, fixed string")
(24,case 7:)
(25,break;)
(26,default:)
(27,6)
(28,2)
(29,data)
(30,printLine("Benign, fixed string")
(31,data)
(32,)
(33,0)
(34,break;)
(35,RAND64()
(36,printLongLongLine(result)
(37,)
(38,break;)
(39,7)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^