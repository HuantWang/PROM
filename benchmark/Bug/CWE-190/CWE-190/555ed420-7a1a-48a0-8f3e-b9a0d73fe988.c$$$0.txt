-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_add_15_bad()
{
    unsigned int data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
        unsigned int result = data + 1;
        printUnsignedLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,45,49,50,54,56,57,58,62,63,64
-----computeFrom-----
12,13
12,14
22,23
22,24
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_add_15_bad(){    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_max_add_15_bad()
CWE190_Integer_Overflow__unsigned_int_max_add_15_bad
{    unsigned int data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */        unsigned int result = data + 1;        printUnsignedLine(result);    }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(19,8,0)
(30,12,0)
(5,22,0)
(27,34,0)
(1,27,0)
(28,23,0)
(17,20,0)
(25,13,0)
(23,7,0)
(1,7,0)
(3,2,0)
(33,34,0)
(0,1,0)
(24,22,0)
(23,20,0)
(35,27,0)
(7,1,0)
(11,22,0)
(29,34,0)
(26,27,0)
(10,2,0)
(16,7,0)
(13,2,0)
(7,20,0)
(18,2,0)
(12,22,0)
(15,34,0)
(9,34,0)
(32,22,0)
(20,22,0)
(4,1,0)
(8,34,0)
(1,13,0)
(31,13,0)
(27,26,1)
(23,7,1)
(6,13,1)
(23,28,1)
(7,1,1)
(35,6,1)
(24,23,1)
(19,6,1)
(14,33,1)
(30,14,1)
(21,32,1)
(9,8,1)
(12,30,1)
(1,13,1)
(1,4,1)
(0,16,1)
(13,25,1)
(14,9,1)
(4,0,1)
(25,31,1)
(16,14,1)
(32,12,1)
(1,27,1)
(8,19,1)
(28,7,1)
(21,24,1)
(33,27,1)
(26,35,1)
(4,14,2)
(9,6,2)
(32,14,2)
(35,6,2)
(8,6,2)
(26,6,2)
(12,14,2)
(23,14,2)
(1,27,2)
(23,7,2)
(7,14,2)
(19,6,2)
(1,13,2)
(16,14,2)
(30,14,2)
(24,14,2)
(33,6,2)
(28,14,2)
(7,1,2)
(0,14,2)
(27,6,2)
(1,14,2)
-----------------------------------
(0,data)
(1,data + 1)
(2,)
(3,switch(7)
(4,1)
(5,case 7:)
(6,6)
(7,result = data + 1)
(8,printLine("Benign, fixed string")
(9,break;)
(10,switch(6)
(11,default:)
(12,printLine("Benign, fixed string")
(13,data = 0)
(14,7)
(15,case 6:)
(16,result)
(17,result)
(18,data)
(19,"Benign, fixed string")
(20,)
(21,RET)
(22,)
(23,printUnsignedLine(result)
(24,break;)
(25,0)
(26,UINT_MAX)
(27,data = UINT_MAX)
(28,result)
(29,default:)
(30,"Benign, fixed string")
(31,data)
(32,break;)
(33,break;)
(34,)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^