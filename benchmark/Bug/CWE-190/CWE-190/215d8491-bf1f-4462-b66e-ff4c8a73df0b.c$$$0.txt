-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_10_bad()
{
    unsigned int data;
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_10_bad(){    unsigned int data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_10_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_10_bad
{    unsigned int data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(5,8,0)
(21,14,0)
(8,9,0)
(27,12,0)
(8,7,0)
(15,8,0)
(19,14,0)
(1,13,0)
(21,7,0)
(14,26,0)
(23,9,0)
(16,21,0)
(9,25,0)
(14,21,0)
(7,13,0)
(11,26,0)
(22,13,0)
(19,26,0)
(0,7,0)
(2,13,0)
(6,7,0)
(17,21,0)
(21,9,0)
(10,9,0)
(18,19,0)
(3,14,0)
(8,9,1)
(21,9,1)
(8,7,1)
(4,20,1)
(16,3,1)
(5,15,1)
(3,8,1)
(17,16,1)
(14,21,1)
(18,14,1)
(8,5,1)
(4,9,1)
(19,14,1)
(24,19,1)
(6,0,1)
(7,6,1)
(23,10,1)
(19,18,1)
(24,8,1)
(21,17,1)
(10,20,1)
(9,23,1)
(24,4,1)
(21,7,1)
(20,7,1)
(15,4,1)
(16,8,2)
(10,20,2)
(19,8,2)
(5,4,2)
(21,9,2)
(23,20,2)
(9,20,2)
(14,8,2)
(3,8,2)
(14,21,2)
(21,7,2)
(8,4,2)
(8,9,2)
(17,8,2)
(15,4,2)
(21,8,2)
(18,8,2)
(19,14,2)
(8,7,2)
-----------------------------------
(0,data)
(1,if(globalTrue)
(2,if(globalTrue)
(3,result)
(4,globalTrue)
(5,0)
(6,0)
(7,data = 0)
(8,data > 0)
(9,data = UINT_MAX)
(10,data)
(11,result)
(12,)
(13,)
(14,result = data * 2)
(15,data)
(16,data)
(17,2)
(18,result)
(19,printUnsignedLine(result)
(20,globalTrue)
(21,data * 2)
(22,data)
(23,UINT_MAX)
(24,RET)
(25,)
(26,)
(27,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^