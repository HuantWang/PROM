-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_31_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    {
        char dataCopy = data;
        char data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,30,33,35,38,42,43,47,49,53,54,58,60
-----computeFrom-----
12,13
12,14
17,18
17,19
40,41
40,42
51,52
51,53
-----guardedBy-----
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_31_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    {        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_31_bad()
CWE190_Integer_Overflow__char_max_multiply_31_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    {        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{        char dataCopy = data;        char data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char dataCopy = data;
char dataCopy = data;
char
dataCopy = data
dataCopy
= data
data
data
char data = dataCopy;
char data = dataCopy;
char
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(30,8,0)
(18,4,0)
(15,19,0)
(8,20,0)
(0,26,0)
(12,4,0)
(16,18,0)
(26,5,0)
(10,8,0)
(5,18,0)
(22,18,0)
(7,5,0)
(26,8,0)
(19,5,0)
(6,25,0)
(1,24,0)
(23,25,0)
(18,25,0)
(8,26,0)
(14,5,0)
(28,24,0)
(4,24,0)
(10,20,0)
(9,19,0)
(17,25,0)
(29,20,0)
(27,26,0)
(25,24,0)
(13,4,0)
(3,1,0)
(21,10,0)
(5,25,0)
(2,1,0)
(18,22,1)
(19,15,1)
(26,5,1)
(13,12,1)
(15,9,1)
(12,1,1)
(0,27,1)
(22,16,1)
(7,14,1)
(21,8,1)
(5,18,1)
(30,19,1)
(8,26,1)
(11,19,1)
(1,3,1)
(3,2,1)
(19,5,1)
(10,21,1)
(11,10,1)
(5,7,1)
(26,0,1)
(16,4,1)
(9,5,1)
(14,18,1)
(4,13,1)
(10,8,1)
(18,4,1)
(27,30,1)
(19,5,2)
(0,19,2)
(26,19,2)
(8,26,2)
(5,18,2)
(26,5,2)
(18,4,2)
(10,8,2)
(8,19,2)
(30,19,2)
(27,19,2)
(10,19,2)
(21,19,2)
-----------------------------------
(0,2)
(1,data = ' ')
(2,data)
(3,' ')
(4,data = CHAR_MAX)
(5,data = dataCopy)
(6,if(data > 0)
(7,dataCopy)
(8,result = data * 2)
(9,data)
(10,printHexCharLine(result)
(11,RET)
(12,data)
(13,CHAR_MAX)
(14,data)
(15,0)
(16,dataCopy)
(17,dataCopy)
(18,dataCopy = data)
(19,data > 0)
(20,)
(21,result)
(22,data)
(23,data)
(24,)
(25,)
(26,data * 2)
(27,data)
(28,data)
(29,result)
(30,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^