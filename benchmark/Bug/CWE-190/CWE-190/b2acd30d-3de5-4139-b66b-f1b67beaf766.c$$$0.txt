-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_07_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
34,35
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,28,31,35,36,41,43,47,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_07_bad(){    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_07_bad()
CWE190_Integer_Overflow__int_fscanf_square_07_bad
{    int data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,14,0)
(4,24,0)
(18,20,0)
(21,7,0)
(16,20,0)
(6,1,0)
(15,25,0)
(26,20,0)
(9,23,0)
(24,1,0)
(2,10,0)
(27,14,0)
(22,10,0)
(28,19,0)
(3,5,0)
(17,25,0)
(7,1,0)
(3,23,0)
(24,10,0)
(1,24,0)
(29,24,0)
(23,3,0)
(10,20,0)
(14,12,0)
(8,19,0)
(1,14,0)
(23,10,0)
(0,3,0)
(11,3,0)
(11,0,1)
(19,28,1)
(22,2,1)
(4,6,1)
(7,1,1)
(15,19,1)
(0,19,1)
(25,17,1)
(1,24,1)
(3,23,1)
(17,15,1)
(24,10,1)
(8,10,1)
(21,1,1)
(29,4,1)
(9,11,1)
(15,3,1)
(28,8,1)
(13,7,1)
(7,21,1)
(6,25,1)
(13,25,1)
(10,22,1)
(23,10,1)
(23,9,1)
(24,29,1)
(6,25,2)
(3,19,2)
(9,19,2)
(3,23,2)
(4,25,2)
(1,24,2)
(24,10,2)
(23,19,2)
(11,19,2)
(7,1,2)
(1,25,2)
(7,25,2)
(29,25,2)
(21,25,2)
(24,25,2)
(23,10,2)
(0,19,2)
-----------------------------------
(0,stdin)
(1,result = data * data)
(2,data)
(3,fscanf(stdin, "%d", &data)
(4,data)
(5,)
(6,result)
(7,printIntLine(result)
(8,staticFive)
(9,data)
(10,data = 0)
(11,"%d")
(12,)
(13,RET)
(14,)
(15,staticFive)
(16,data)
(17,5)
(18,if(staticFive==5)
(19,staticFive==5)
(20,)
(21,result)
(22,0)
(23,&data)
(24,data * data)
(25,staticFive==5)
(26,if(staticFive==5)
(27,result)
(28,5)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^