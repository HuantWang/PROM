-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
63,64
64,65
64,66
65,66
69,70
69,71
71,72
71,73
71,74
71,75
71,76
71,77
72,73
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,29,31,36,38,40,42,44,49,52,54,59,60,61,62,66,67,68,70,73,77,79,83,85,89,91,92,93,97,98,99
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
81,82
81,83
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fgets_square_15_bad()
CWE190_Integer_Overflow__int_fgets_square_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(11,6,0)
(16,24,0)
(42,38,0)
(10,44,0)
(20,5,0)
(29,10,0)
(27,45,0)
(36,5,0)
(33,37,0)
(21,46,0)
(26,18,0)
(25,24,0)
(40,50,0)
(5,45,0)
(32,49,0)
(31,51,0)
(15,50,0)
(46,45,0)
(51,46,0)
(34,45,0)
(17,37,0)
(3,38,0)
(52,44,0)
(10,51,0)
(46,51,0)
(43,0,0)
(44,19,0)
(5,18,0)
(22,19,0)
(30,37,0)
(49,19,0)
(0,12,0)
(48,10,0)
(35,24,0)
(19,24,0)
(23,38,0)
(14,2,0)
(44,10,0)
(2,37,0)
(4,38,0)
(28,24,0)
(8,2,0)
(39,24,0)
(10,2,0)
(18,5,0)
(6,38,0)
(9,5,0)
(50,38,0)
(45,50,0)
(51,13,0)
(49,44,0)
(41,35,0)
(4,0,1)
(5,36,1)
(34,27,1)
(10,2,1)
(46,21,1)
(52,7,1)
(48,52,1)
(6,11,1)
(18,5,1)
(31,18,1)
(41,7,1)
(1,16,1)
(51,46,1)
(1,25,1)
(2,14,1)
(10,51,1)
(42,6,1)
(10,29,1)
(47,2,1)
(45,34,1)
(7,4,1)
(49,44,1)
(7,42,1)
(36,9,1)
(4,51,1)
(21,31,1)
(43,18,1)
(32,44,1)
(29,48,1)
(20,45,1)
(18,26,1)
(49,32,1)
(44,10,1)
(11,47,1)
(14,8,1)
(9,20,1)
(27,47,1)
(25,49,1)
(46,45,1)
(26,5,1)
(35,41,1)
(5,45,1)
(0,43,1)
(16,35,1)
(36,47,2)
(11,47,2)
(32,7,2)
(16,7,2)
(49,7,2)
(9,47,2)
(45,47,2)
(48,7,2)
(0,18,2)
(21,18,2)
(46,18,2)
(27,47,2)
(41,7,2)
(51,18,2)
(46,45,2)
(10,7,2)
(29,7,2)
(31,18,2)
(51,46,2)
(4,47,2)
(26,47,2)
(42,47,2)
(49,44,2)
(5,47,2)
(44,10,2)
(43,18,2)
(35,7,2)
(6,47,2)
(20,47,2)
(10,2,2)
(5,45,2)
(18,5,2)
(34,47,2)
(52,7,2)
(25,7,2)
(10,51,2)
(18,47,2)
(44,7,2)
-----------------------------------
(0,printLine("fgets()
(1,RET)
(2,data = 0)
(3,default:)
(4,break;)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,printLine("Benign, fixed string")
(7,7)
(8,data)
(9,CHAR_ARRAY_SIZE)
(10,data * data)
(11,"Benign, fixed string")
(12,)
(13,)
(14,0)
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,break;)
(17,switch(7)
(18,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,)
(20,inputBuffer)
(21,inputBuffer)
(22,result)
(23,case 6:)
(24,)
(25,break;)
(26,NULL)
(27,inputBuffer)
(28,default:)
(29,data)
(30,switch(6)
(31,data)
(32,result)
(33,data)
(34,"")
(35,printLine("Benign, fixed string")
(36,stdin)
(37,)
(38,)
(39,case 7:)
(40,inputBuffer)
(41,"Benign, fixed string")
(42,break;)
(43,"fgets()
(44,result = data * data)
(45,inputBuffer[CHAR_ARRAY_SIZE] = "")
(46,atoi(inputBuffer)
(47,6)
(48,data)
(49,printIntLine(result)
(50,)
(51,data = atoi(inputBuffer)
(52,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^