-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_preinc_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        int result = data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
63,64
64,65
64,66
65,66
69,70
69,71
71,72
71,73
71,74
71,75
71,76
71,77
72,73
74,75
74,76
74,77
75,76
76,77
77,78
79,80
80,81
80,82
82,83
82,84
84,85
85,86
87,88
88,89
88,90
89,90
91,92
95,96
96,97
96,98
97,98
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,29,31,36,38,40,42,44,49,52,54,59,60,61,62,66,67,68,70,73,78,81,83,86,90,92,93,94,98,99,100
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_preinc_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_fgets_preinc_15_bad()
CWE190_Integer_Overflow__int_fgets_preinc_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        int result = data;        printIntLine(result);    }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(38,16,0)
(48,1,0)
(37,16,0)
(35,21,0)
(39,17,0)
(15,41,0)
(50,16,0)
(31,16,0)
(45,12,0)
(24,14,0)
(40,14,0)
(11,10,0)
(47,38,0)
(43,48,0)
(1,38,0)
(17,8,0)
(2,48,0)
(23,10,0)
(41,17,0)
(48,25,0)
(13,17,0)
(36,10,0)
(42,25,0)
(46,33,0)
(52,1,0)
(30,14,0)
(45,8,0)
(5,8,0)
(17,26,0)
(41,8,0)
(32,12,0)
(8,14,0)
(26,7,0)
(20,16,0)
(28,1,0)
(34,26,0)
(9,26,0)
(45,26,0)
(27,38,0)
(9,1,0)
(18,50,0)
(25,48,0)
(4,16,0)
(22,12,0)
(33,14,0)
(44,48,0)
(26,9,0)
(17,12,0)
(0,14,0)
(29,9,0)
(3,45,0)
(21,19,0)
(12,10,0)
(28,49,1)
(9,1,1)
(6,40,1)
(51,31,1)
(4,26,1)
(48,1,1)
(50,18,1)
(46,51,1)
(0,33,1)
(45,12,1)
(25,42,1)
(17,26,1)
(9,29,1)
(17,12,1)
(6,0,1)
(51,4,1)
(25,48,1)
(21,35,1)
(22,32,1)
(2,43,1)
(13,45,1)
(45,26,1)
(12,22,1)
(33,46,1)
(39,13,1)
(15,17,1)
(49,12,1)
(3,51,1)
(1,52,1)
(41,17,1)
(43,44,1)
(18,49,1)
(35,25,1)
(41,15,1)
(31,50,1)
(42,48,1)
(17,39,1)
(4,21,1)
(40,41,1)
(29,34,1)
(26,9,1)
(34,25,1)
(52,28,1)
(48,2,1)
(45,3,1)
(44,1,1)
(45,26,2)
(48,1,2)
(42,49,2)
(29,25,2)
(25,49,2)
(52,49,2)
(17,12,2)
(43,49,2)
(45,51,2)
(4,49,2)
(39,51,2)
(31,49,2)
(28,49,2)
(15,51,2)
(9,1,2)
(21,25,2)
(18,49,2)
(46,51,2)
(41,51,2)
(9,25,2)
(13,51,2)
(45,12,2)
(17,51,2)
(50,49,2)
(1,49,2)
(0,51,2)
(2,49,2)
(35,25,2)
(26,25,2)
(34,25,2)
(48,49,2)
(40,51,2)
(41,17,2)
(17,26,2)
(26,9,2)
(3,51,2)
(33,51,2)
(44,49,2)
(25,48,2)
-----------------------------------
(0,break;)
(1,inputBuffer[CHAR_ARRAY_SIZE] = "")
(2,stdin)
(3,data)
(4,break;)
(5,result)
(6,RET)
(7,)
(8,)
(9,atoi(inputBuffer)
(10,)
(11,switch(6)
(12,data = 0)
(13,result)
(14,)
(15,result)
(16,)
(17,result = data)
(18,"Benign, fixed string")
(19,)
(20,default:)
(21,printLine("fgets()
(22,0)
(23,data)
(24,default:)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,data = atoi(inputBuffer)
(27,inputBuffer)
(28,inputBuffer)
(29,inputBuffer)
(30,case 7:)
(31,break;)
(32,data)
(33,printLine("Benign, fixed string")
(34,data)
(35,"fgets()
(36,switch(7)
(37,case 6:)
(38,)
(39,data)
(40,break;)
(41,printIntLine(result)
(42,NULL)
(43,CHAR_ARRAY_SIZE)
(44,inputBuffer)
(45,++data)
(46,"Benign, fixed string")
(47,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(48,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,6)
(50,printLine("Benign, fixed string")
(51,7)
(52,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^