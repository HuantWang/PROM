-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_add_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_max_add_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Use the maximum value for this type */
    data = INT_MAX;
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,52,56,57,61,63
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_add_34_bad(){    int data;    CWE190_Integer_Overflow__int_max_add_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_add_34_bad()
CWE190_Integer_Overflow__int_max_add_34_bad
{    int data;    CWE190_Integer_Overflow__int_max_add_34_unionType myUnion;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_max_add_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_add_34_unionType myUnion;
CWE190_Integer_Overflow__int_max_add_34_unionType
CWE190_Integer_Overflow__int_max_add_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int result = data + 1;            printIntLine(result);        }
int result = data + 1;
int result = data + 1;
int
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(27,2,0)
(8,0,0)
(21,10,0)
(3,12,0)
(28,9,0)
(1,10,0)
(19,1,0)
(12,19,0)
(24,10,0)
(6,13,0)
(20,12,0)
(14,20,0)
(5,0,0)
(18,1,0)
(20,2,0)
(25,29,0)
(9,2,0)
(30,8,0)
(11,21,0)
(7,0,0)
(17,12,0)
(9,20,0)
(12,20,0)
(23,10,0)
(8,10,0)
(13,19,0)
(4,29,0)
(22,13,0)
(15,19,0)
(19,13,0)
(2,1,0)
(29,8,0)
(26,21,0)
(0,10,0)
(12,17,1)
(16,9,1)
(12,19,1)
(8,30,1)
(30,29,1)
(28,20,1)
(20,12,1)
(19,13,1)
(4,0,1)
(9,20,1)
(29,25,1)
(3,14,1)
(8,0,1)
(22,15,1)
(6,22,1)
(17,3,1)
(14,19,1)
(0,7,1)
(26,11,1)
(5,21,1)
(15,8,1)
(9,28,1)
(7,5,1)
(13,6,1)
(25,4,1)
(21,26,1)
(12,19,2)
(19,13,2)
(9,20,2)
(20,12,2)
(8,0,2)
-----------------------------------
(0,data = INT_MAX)
(1,)
(2,)
(3,data)
(4,myUnion)
(5,data)
(6,unionSecond)
(7,INT_MAX)
(8,myUnion.unionFirst = data)
(9,printIntLine(result)
(10,)
(11,data)
(12,data + 1)
(13,myUnion.unionSecond)
(14,result)
(15,data)
(16,RET)
(17,1)
(18,data)
(19,data = myUnion.unionSecond)
(20,result = data + 1)
(21,data = 0)
(22,myUnion)
(23,data)
(24,myUnion)
(25,unionFirst)
(26,0)
(27,result)
(28,result)
(29,myUnion.unionFirst)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^