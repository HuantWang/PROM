-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_18_bad()
{
    char data;
    data = ' ';
    goto source;
source:
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    goto sink;
sink:
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
18,19
18,20
20,21
21,22
21,23
22,23
24,25
26,27
28,29
28,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,19,23,25,27,29,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_18_bad(){    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_multiply_18_bad()
CWE190_Integer_Overflow__char_max_multiply_18_bad
{    char data;    data = ' ';    goto source;source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    goto sink;sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
goto source;
source
source:    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;
source
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
goto sink;
sink
sink:    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
sink
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(10,14,0)
(2,8,0)
(1,23,0)
(6,8,0)
(15,23,0)
(3,23,0)
(14,13,0)
(24,8,0)
(5,20,0)
(7,23,0)
(14,20,0)
(16,23,0)
(21,23,0)
(12,24,0)
(22,23,0)
(19,15,0)
(13,8,0)
(13,14,0)
(0,13,0)
(11,15,0)
(25,9,0)
(18,24,0)
(4,13,0)
(9,14,0)
(9,20,0)
(8,23,0)
(13,8,1)
(9,14,1)
(4,10,1)
(25,14,1)
(8,6,1)
(18,12,1)
(2,21,1)
(24,18,1)
(0,4,1)
(13,0,1)
(19,11,1)
(15,19,1)
(17,24,1)
(10,24,1)
(9,25,1)
(21,15,1)
(24,8,1)
(12,22,1)
(6,2,1)
(17,9,1)
(14,13,1)
(22,8,1)
(14,24,2)
(14,13,2)
(10,24,2)
(25,24,2)
(9,14,2)
(13,8,2)
(9,24,2)
(24,8,2)
(13,24,2)
(4,24,2)
(0,24,2)
-----------------------------------
(0,2)
(1,source:)
(2,data)
(3,data)
(4,data)
(5,result)
(6,CHAR_MAX)
(7,sink:)
(8,data = CHAR_MAX)
(9,printHexCharLine(result)
(10,result)
(11,data)
(12,data)
(13,data * 2)
(14,result = data * 2)
(15,data = ' ')
(16,if(data > 0)
(17,RET)
(18,0)
(19,' ')
(20,)
(21,goto source;)
(22,goto sink;)
(23,)
(24,data > 0)
(25,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^