-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_09_bad()
{
    short data;
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_09_bad(){    short data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_09_bad()
CWE190_Integer_Overflow__short_rand_multiply_09_bad
{    short data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,29,0)
(11,29,0)
(17,15,0)
(16,17,0)
(18,23,0)
(19,25,0)
(26,11,0)
(24,25,0)
(17,24,0)
(11,24,0)
(8,25,0)
(28,0,0)
(4,24,0)
(20,17,0)
(12,24,0)
(15,17,0)
(3,15,0)
(7,3,0)
(10,11,0)
(23,18,0)
(17,29,0)
(21,29,0)
(22,15,0)
(15,2,0)
(13,25,0)
(29,23,0)
(5,2,0)
(29,6,0)
(3,2,0)
(23,27,0)
(27,23,0)
(26,9,1)
(10,26,1)
(11,10,1)
(14,3,1)
(24,12,1)
(27,21,1)
(17,29,1)
(23,27,1)
(11,24,1)
(14,11,1)
(14,9,1)
(1,24,1)
(29,23,1)
(21,1,1)
(16,20,1)
(9,29,1)
(12,4,1)
(15,17,1)
(9,1,1)
(11,29,1)
(17,24,1)
(23,18,1)
(20,22,1)
(7,15,1)
(17,16,1)
(3,7,1)
(22,11,1)
(3,15,1)
(10,9,2)
(7,11,2)
(3,11,2)
(29,1,2)
(11,24,2)
(23,18,2)
(3,15,2)
(26,9,2)
(17,24,2)
(27,1,2)
(29,23,2)
(20,11,2)
(17,11,2)
(15,17,2)
(17,29,2)
(11,9,2)
(23,1,2)
(21,1,2)
(11,29,2)
(23,27,2)
(16,11,2)
(22,11,2)
(15,11,2)
-----------------------------------
(0,)
(1,GLOBAL_CONST_TRUE)
(2,)
(3,printIntLine(result)
(4,data)
(5,result)
(6,)
(7,result)
(8,if(GLOBAL_CONST_TRUE)
(9,GLOBAL_CONST_TRUE)
(10,0)
(11,data > 0)
(12,0)
(13,if(GLOBAL_CONST_TRUE)
(14,RET)
(15,result = data * 2)
(16,2)
(17,data * 2)
(18,short)
(19,data)
(20,data)
(21,data)
(22,result)
(23,(short)
(24,data = 0)
(25,)
(26,data)
(27,RAND32()
(28,if(data > 0)
(29,data = (short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^