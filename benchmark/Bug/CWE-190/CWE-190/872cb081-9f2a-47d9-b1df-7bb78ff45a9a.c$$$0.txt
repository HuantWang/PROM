-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_44_bad()
{
    char data;
    /* define a function pointer */
    void (*funcPtr) (char) = badSink;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
38,39
39,40
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,36,37,40,44,46
-----computeFrom-----
26,27
26,28
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_44_bad(){    char data;    /* define a function pointer */    void (*funcPtr) (char) = badSink;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    /* use the function pointer */    funcPtr(data);}
void
CWE190_Integer_Overflow__char_rand_postinc_44_bad()
CWE190_Integer_Overflow__char_rand_postinc_44_bad
{    char data;    /* define a function pointer */    void (*funcPtr) (char) = badSink;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    /* use the function pointer */    funcPtr(data);}
char data;
char data;
char
data
data
void (*funcPtr) (char) = badSink;
void (*funcPtr) (char) = badSink;
void
(*funcPtr) (char) = badSink
*funcPtr
*
funcPtr
char
char


= badSink
badSink
badSink
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(10,1,0)
(9,3,0)
(13,12,0)
(8,7,0)
(7,12,0)
(4,7,0)
(16,12,0)
(5,3,0)
(16,13,0)
(14,12,0)
(15,1,0)
(13,3,0)
(0,13,0)
(3,5,0)
(1,12,0)
(11,12,0)
(3,9,0)
(3,13,0)
(2,16,0)
(8,4,1)
(4,1,1)
(1,15,1)
(3,5,1)
(6,16,1)
(15,10,1)
(16,2,1)
(16,13,1)
(9,0,1)
(3,9,1)
(2,13,1)
(7,8,1)
(13,3,1)
(0,7,1)
(3,9,2)
(13,3,2)
(16,13,2)
(3,5,2)
-----------------------------------
(0,data)
(1,(*funcPtr)
(2,data)
(3,(char)
(4,data)
(5,char)
(6,RET)
(7,data = ' ')
(8,' ')
(9,RAND32()
(10,funcPtr)
(11,funcPtr)
(12,)
(13,data = (char)
(14,data)
(15,badSink)
(16,funcPtr(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^