-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,65,66,70,72,76,77,81,83
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
63,64
63,65
74,75
74,76
-----guardedBy-----
65,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_17_bad()
CWE190_Integer_Overflow__short_rand_multiply_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,27,0)
(33,14,0)
(1,27,0)
(37,33,0)
(27,2,0)
(39,17,0)
(42,17,0)
(16,20,0)
(29,22,0)
(19,45,0)
(27,20,0)
(11,45,0)
(22,35,0)
(9,21,0)
(40,20,0)
(30,0,0)
(24,35,0)
(2,5,0)
(44,42,0)
(26,45,0)
(4,35,0)
(5,2,0)
(27,17,0)
(31,5,0)
(10,45,0)
(15,33,0)
(23,14,0)
(32,14,0)
(5,31,0)
(0,14,0)
(17,45,0)
(5,18,0)
(43,12,0)
(18,5,0)
(40,21,0)
(28,42,0)
(12,35,0)
(42,2,0)
(20,21,0)
(38,45,0)
(20,27,0)
(2,41,0)
(6,17,0)
(36,22,0)
(3,2,0)
(8,40,0)
(25,34,0)
(22,35,1)
(33,15,1)
(18,3,1)
(20,27,1)
(2,5,1)
(40,20,1)
(4,33,1)
(43,40,1)
(35,24,1)
(1,13,1)
(42,2,1)
(37,14,1)
(27,1,1)
(27,2,1)
(17,39,1)
(15,37,1)
(29,36,1)
(0,30,1)
(36,12,1)
(5,18,1)
(42,44,1)
(40,8,1)
(14,32,1)
(30,2,1)
(23,17,1)
(22,29,1)
(32,23,1)
(7,22,1)
(27,17,1)
(42,17,1)
(8,20,1)
(36,35,1)
(39,6,1)
(44,28,1)
(37,0,1)
(33,14,1)
(0,14,1)
(28,22,1)
(16,42,1)
(12,35,1)
(3,33,1)
(43,42,1)
(12,43,1)
(5,31,1)
(24,4,1)
(13,16,1)
(40,20,2)
(42,22,2)
(5,18,2)
(2,33,2)
(44,22,2)
(37,33,2)
(29,22,2)
(15,33,2)
(22,35,2)
(27,17,2)
(5,33,2)
(22,22,2)
(1,42,2)
(42,2,2)
(27,2,2)
(30,33,2)
(40,42,2)
(12,22,2)
(13,42,2)
(33,33,2)
(20,27,2)
(42,17,2)
(16,42,2)
(5,31,2)
(8,42,2)
(20,42,2)
(36,22,2)
(0,14,2)
(27,42,2)
(12,35,2)
(0,33,2)
(33,14,2)
(2,5,2)
(3,33,2)
(28,22,2)
(43,22,2)
(18,33,2)
-----------------------------------
(0,i++)
(1,2)
(2,data = (short)
(3,data)
(4,j)
(5,(short)
(6,data)
(7,RET)
(8,result)
(9,result)
(10,for(i = 0; i < 1; i++)
(11,for(j = 0; j < 1; j++)
(12,j++)
(13,data)
(14,i = 0)
(15,1)
(16,result)
(17,data = 0)
(18,RAND32()
(19,i)
(20,result = data * 2)
(21,)
(22,j < 1)
(23,i)
(24,0)
(25,if(data > 0)
(26,j)
(27,data * 2)
(28,data)
(29,1)
(30,i)
(31,short)
(32,0)
(33,i < 1)
(34,)
(35,j = 0)
(36,j)
(37,i)
(38,data)
(39,0)
(40,printIntLine(result)
(41,)
(42,data > 0)
(43,j)
(44,0)
(45,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^