-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,61,65,67,71,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
58,59
58,60
69,70
69,71
-----guardedBy-----
60,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_17_bad()
CWE190_Integer_Overflow__int_max_multiply_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
for(j = 0; j < 1; j++)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,26,0)
(27,33,0)
(32,9,0)
(42,4,0)
(25,13,0)
(43,23,0)
(12,4,0)
(16,26,0)
(11,1,0)
(7,41,0)
(10,25,0)
(22,14,0)
(34,7,0)
(31,25,0)
(13,25,0)
(40,34,0)
(14,4,0)
(38,14,0)
(29,20,0)
(36,26,0)
(18,37,0)
(39,7,0)
(23,4,0)
(6,27,0)
(3,41,0)
(21,18,0)
(25,27,0)
(2,41,0)
(19,27,0)
(0,41,0)
(34,27,0)
(13,37,0)
(15,41,0)
(30,34,0)
(5,41,0)
(28,37,0)
(35,9,0)
(25,7,0)
(20,26,0)
(17,7,0)
(18,13,0)
(8,13,0)
(26,36,1)
(18,13,1)
(25,27,1)
(35,32,1)
(12,9,1)
(31,8,1)
(14,4,1)
(17,39,1)
(34,7,1)
(10,31,1)
(4,42,1)
(23,43,1)
(9,26,1)
(24,14,1)
(6,19,1)
(34,40,1)
(7,17,1)
(32,20,1)
(27,6,1)
(25,7,1)
(30,14,1)
(18,21,1)
(43,34,1)
(23,4,1)
(21,13,1)
(43,18,1)
(14,22,1)
(16,7,1)
(38,23,1)
(34,27,1)
(29,27,1)
(20,26,1)
(8,34,1)
(22,38,1)
(36,16,1)
(38,4,1)
(42,12,1)
(19,9,1)
(13,25,1)
(20,29,1)
(9,35,1)
(32,26,1)
(40,30,1)
(25,10,1)
(34,27,2)
(14,14,2)
(32,9,2)
(40,14,2)
(38,14,2)
(9,9,2)
(6,9,2)
(34,14,2)
(8,34,2)
(35,9,2)
(23,14,2)
(25,27,2)
(31,34,2)
(13,25,2)
(43,14,2)
(22,14,2)
(25,34,2)
(20,9,2)
(20,26,2)
(21,34,2)
(30,14,2)
(23,4,2)
(18,34,2)
(9,26,2)
(13,34,2)
(29,9,2)
(19,9,2)
(34,7,2)
(18,13,2)
(14,4,2)
(25,7,2)
(27,9,2)
(10,34,2)
-----------------------------------
(0,for(i = 0; i < 1; i++)
(1,)
(2,j)
(3,data)
(4,j = 0)
(5,i)
(6,INT_MAX)
(7,data = 0)
(8,result)
(9,i < 1)
(10,2)
(11,if(data > 0)
(12,j)
(13,result = data * 2)
(14,j < 1)
(15,for(j = 0; j < 1; j++)
(16,i)
(17,0)
(18,printIntLine(result)
(19,data)
(20,i++)
(21,result)
(22,1)
(23,j++)
(24,RET)
(25,data * 2)
(26,i = 0)
(27,data = INT_MAX)
(28,result)
(29,i)
(30,data)
(31,data)
(32,i)
(33,)
(34,data > 0)
(35,1)
(36,0)
(37,)
(38,j)
(39,data)
(40,0)
(41,)
(42,0)
(43,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^