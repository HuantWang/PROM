-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_02_bad()
{
    short data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,36,37,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
20,21
20,22
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_02_bad(){    short data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_02_bad()
CWE190_Integer_Overflow__short_rand_multiply_02_bad
{    short data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(22,16,0)
(1,28,0)
(4,18,0)
(17,18,0)
(0,24,0)
(2,8,0)
(18,19,0)
(3,9,0)
(11,8,0)
(8,18,0)
(29,21,0)
(9,16,0)
(24,13,0)
(21,13,0)
(25,13,0)
(23,17,0)
(17,14,0)
(6,28,0)
(10,16,0)
(9,18,0)
(20,9,0)
(14,17,0)
(24,21,0)
(17,23,0)
(18,17,0)
(8,21,0)
(15,28,0)
(16,28,0)
(21,8,0)
(26,12,0)
(8,16,0)
(5,24,1)
(24,21,1)
(18,17,1)
(4,27,1)
(14,4,1)
(16,10,1)
(10,22,1)
(8,11,1)
(0,21,1)
(9,16,1)
(17,23,1)
(2,29,1)
(7,18,1)
(29,9,1)
(21,8,1)
(5,7,1)
(9,20,1)
(9,18,1)
(5,9,1)
(3,7,1)
(7,27,1)
(8,18,1)
(27,16,1)
(24,0,1)
(17,14,1)
(11,2,1)
(8,16,1)
(20,3,1)
(21,8,2)
(24,21,2)
(20,7,2)
(17,27,2)
(17,23,2)
(21,9,2)
(9,16,2)
(11,9,2)
(18,27,2)
(3,7,2)
(24,9,2)
(0,9,2)
(14,27,2)
(17,14,2)
(9,18,2)
(8,16,2)
(2,9,2)
(9,7,2)
(29,9,2)
(8,9,2)
(4,27,2)
(18,17,2)
(8,18,2)
-----------------------------------
(0,result)
(1,if(1)
(2,data)
(3,data)
(4,data)
(5,RET)
(6,if(1)
(7,1)
(8,data * 2)
(9,data > 0)
(10,0)
(11,2)
(12,)
(13,)
(14,RAND32()
(15,data)
(16,data = 0)
(17,(short)
(18,data = (short)
(19,)
(20,0)
(21,result = data * 2)
(22,data)
(23,short)
(24,printIntLine(result)
(25,result)
(26,if(data > 0)
(27,1)
(28,)
(29,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^