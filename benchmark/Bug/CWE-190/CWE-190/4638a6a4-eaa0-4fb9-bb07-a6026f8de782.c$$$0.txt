-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_04_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,62,67,68,72,74,78,79,83,85
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
76,77
76,78
-----guardedBy-----
37,53
67,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_04_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_04_bad()
CWE190_Integer_Overflow__int_fgets_multiply_04_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(19,43,0)
(7,37,0)
(25,20,0)
(27,2,0)
(37,43,0)
(31,42,0)
(30,25,0)
(41,26,0)
(41,28,0)
(17,2,0)
(12,23,0)
(2,8,0)
(4,28,0)
(40,29,0)
(35,29,0)
(1,25,0)
(35,26,0)
(25,28,0)
(3,7,0)
(32,20,0)
(28,6,0)
(18,34,0)
(20,42,0)
(36,42,0)
(11,42,0)
(29,35,0)
(22,41,0)
(25,37,0)
(0,26,0)
(14,35,0)
(13,35,0)
(34,5,0)
(38,23,0)
(23,28,0)
(7,43,0)
(44,9,0)
(37,25,0)
(39,35,0)
(26,2,0)
(15,20,0)
(33,37,0)
(23,20,0)
(16,26,0)
(28,41,0)
(35,13,1)
(10,24,1)
(24,34,1)
(41,26,1)
(21,20,1)
(16,21,1)
(39,26,1)
(3,37,1)
(25,30,1)
(20,32,1)
(29,40,1)
(18,29,1)
(4,29,1)
(23,28,1)
(35,26,1)
(30,1,1)
(10,23,1)
(7,3,1)
(7,37,1)
(32,15,1)
(1,33,1)
(14,39,1)
(24,21,1)
(24,28,1)
(23,38,1)
(10,7,1)
(23,20,1)
(33,23,1)
(38,12,1)
(25,20,1)
(37,25,1)
(22,4,1)
(41,22,1)
(28,41,1)
(40,35,1)
(26,0,1)
(34,18,1)
(0,16,1)
(12,24,1)
(25,28,1)
(29,35,1)
(13,14,1)
(12,24,2)
(7,23,2)
(35,26,2)
(38,24,2)
(33,23,2)
(3,23,2)
(26,21,2)
(23,24,2)
(29,35,2)
(28,29,2)
(40,21,2)
(14,21,2)
(25,28,2)
(18,29,2)
(23,20,2)
(0,21,2)
(34,29,2)
(1,23,2)
(23,28,2)
(4,29,2)
(22,29,2)
(39,21,2)
(16,21,2)
(41,29,2)
(29,21,2)
(37,25,2)
(7,37,2)
(25,20,2)
(35,21,2)
(28,41,2)
(25,23,2)
(30,23,2)
(41,26,2)
(13,21,2)
(37,23,2)
-----------------------------------
(0,"")
(1,data)
(2,)
(3,result)
(4,data)
(5,)
(6,)
(7,printIntLine(result)
(8,)
(9,)
(10,RET)
(11,data)
(12,data)
(13,stdin)
(14,CHAR_ARRAY_SIZE)
(15,data)
(16,inputBuffer)
(17,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,"fgets()
(19,result)
(20,data = 0)
(21,STATIC_CONST_TRUE)
(22,inputBuffer)
(23,data > 0)
(24,STATIC_CONST_TRUE)
(25,data * 2)
(26,inputBuffer[CHAR_ARRAY_SIZE] = "")
(27,inputBuffer)
(28,data = atoi(inputBuffer)
(29,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(30,2)
(31,if(STATIC_CONST_TRUE)
(32,0)
(33,result)
(34,printLine("fgets()
(35,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(36,if(STATIC_CONST_TRUE)
(37,result = data * 2)
(38,0)
(39,inputBuffer)
(40,NULL)
(41,atoi(inputBuffer)
(42,)
(43,)
(44,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^