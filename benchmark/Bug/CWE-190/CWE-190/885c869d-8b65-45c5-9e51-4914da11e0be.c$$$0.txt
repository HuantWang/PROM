-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_11_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
22,23
22,24
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_11_bad(){    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_11_bad()
CWE190_Integer_Overflow__char_rand_square_11_bad
{    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(2,20,0)
(10,6,0)
(25,14,0)
(10,25,0)
(16,10,0)
(12,20,0)
(25,10,0)
(5,24,0)
(14,9,0)
(8,20,0)
(24,6,0)
(24,10,0)
(3,20,0)
(23,14,0)
(15,25,0)
(19,12,0)
(26,6,0)
(4,9,0)
(22,12,0)
(25,12,0)
(18,9,0)
(9,4,0)
(9,18,0)
(9,14,0)
(14,13,0)
(1,25,0)
(6,0,0)
(15,1,1)
(19,22,1)
(16,11,1)
(25,14,1)
(25,12,1)
(18,23,1)
(17,24,1)
(14,9,1)
(11,14,1)
(9,4,1)
(25,15,1)
(11,7,1)
(9,18,1)
(1,16,1)
(5,10,1)
(24,10,1)
(12,19,1)
(7,12,1)
(24,5,1)
(17,11,1)
(23,7,1)
(10,25,1)
(25,14,2)
(14,9,2)
(18,7,2)
(24,11,2)
(16,11,2)
(9,18,2)
(10,25,2)
(10,11,2)
(25,11,2)
(9,4,2)
(5,11,2)
(14,7,2)
(24,10,2)
(15,11,2)
(25,12,2)
(23,7,2)
(9,7,2)
(1,11,2)
-----------------------------------
(0,)
(1,data)
(2,data)
(3,if(globalReturnsTrue()
(4,char)
(5,result)
(6,)
(7,globalReturnsTrue()
(8,if(globalReturnsTrue()
(9,(char)
(10,result = data * data)
(11,globalReturnsTrue()
(12,data = \' \')
(13,)
(14,data = (char)
(15,data)
(16,result)
(17,RET)
(18,RAND32()
(19,' ')
(20,)
(21,data = ' ')
(22,data)
(23,data)
(24,printHexCharLine(result)
(25,data * data)
(26,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^