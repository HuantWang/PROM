-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
51,52
53,54
54,55
54,56
55,56
56,57
58,59
60,61
60,62
61,62
62,63
62,64
64,65
64,66
66,67
67,68
68,69
70,71
70,72
71,72
71,73
72,73
75,76
75,77
76,77
77,78
77,79
79,80
79,81
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,57,59,63,65,69,73,74,78,80,84,85,89,91
-----computeFrom-----
32,33
32,34
47,48
47,49
54,55
54,56
71,72
71,73
82,83
82,84
-----guardedBy-----
73,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }    {        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_32_bad()
CWE190_Integer_Overflow__int_rand_multiply_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }    {        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(46,29,0)
(32,47,0)
(38,15,0)
(1,3,0)
(13,33,0)
(16,6,0)
(14,39,0)
(28,42,0)
(25,39,0)
(41,40,0)
(44,42,0)
(26,25,0)
(10,27,0)
(3,40,0)
(17,42,0)
(23,42,0)
(21,6,0)
(7,16,0)
(4,44,0)
(30,20,0)
(6,21,0)
(35,29,0)
(16,7,0)
(9,2,0)
(39,30,0)
(8,30,0)
(30,44,0)
(43,23,0)
(29,42,0)
(39,44,0)
(45,27,0)
(22,23,0)
(15,3,0)
(11,15,0)
(20,30,0)
(15,33,0)
(5,6,0)
(3,15,0)
(27,33,0)
(19,16,0)
(7,44,0)
(31,42,0)
(34,47,0)
(12,21,0)
(25,6,0)
(47,34,0)
(0,3,0)
(33,29,0)
(33,2,0)
(6,42,0)
(2,34,0)
(24,7,0)
(2,33,0)
(36,34,0)
(37,0,0)
(34,42,0)
(0,40,0)
(11,38,1)
(23,43,1)
(1,27,1)
(6,21,1)
(20,8,1)
(43,22,1)
(27,33,1)
(38,1,1)
(10,45,1)
(45,33,1)
(21,12,1)
(27,10,1)
(14,25,1)
(8,7,1)
(22,34,1)
(15,33,1)
(36,6,1)
(30,20,1)
(16,6,1)
(33,2,1)
(18,0,1)
(39,14,1)
(26,30,1)
(19,24,1)
(47,32,1)
(9,13,1)
(24,23,1)
(3,15,1)
(2,34,1)
(2,9,1)
(13,39,1)
(18,27,1)
(32,36,1)
(25,26,1)
(25,6,1)
(39,30,1)
(12,5,1)
(7,16,1)
(0,3,1)
(0,37,1)
(34,47,1)
(37,3,1)
(15,11,1)
(16,19,1)
(1,27,2)
(25,6,2)
(2,34,2)
(0,3,2)
(15,27,2)
(39,30,2)
(6,21,2)
(11,27,2)
(37,27,2)
(3,27,2)
(34,47,2)
(7,16,2)
(27,33,2)
(0,27,2)
(16,6,2)
(3,15,2)
(30,20,2)
(15,33,2)
(33,2,2)
(38,27,2)
-----------------------------------
(0,printIntLine(result)
(1,result)
(2,*dataPtr2)
(3,result = data * 2)
(4,data)
(5,dataPtr1)
(6,*dataPtr1 = &data)
(7,data = *dataPtr1)
(8,data)
(9,dataPtr2)
(10,0)
(11,2)
(12,data)
(13,data)
(14,data)
(15,data * 2)
(16,*dataPtr1)
(17,data)
(18,RET)
(19,dataPtr1)
(20,RAND32()
(21,&data)
(22,data)
(23,data = 0)
(24,data)
(25,*dataPtr1)
(26,dataPtr1)
(27,data > 0)
(28,dataPtr1)
(29,)
(30,data = RAND32()
(31,dataPtr2)
(32,data)
(33,data = *dataPtr2)
(34,*dataPtr2 = &data)
(35,if(data > 0)
(36,dataPtr2)
(37,result)
(38,data)
(39,*dataPtr1 = data)
(40,)
(41,result)
(42,)
(43,0)
(44,)
(45,data)
(46,data)
(47,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^