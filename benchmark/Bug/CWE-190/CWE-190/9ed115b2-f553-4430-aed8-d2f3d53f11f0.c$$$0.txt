-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_67b_badSink(CWE190_Integer_Overflow__char_max_square_67_structType myStruct)
{
    char data = myStruct.structFirst;
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
23,24
23,25
25,26
25,27
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
-----nextToken-----
2,4,7,9,13,15,19,20,24,26,30,32,36,38
-----computeFrom-----
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_67b_badSink(CWE190_Integer_Overflow__char_max_square_67_structType myStruct){    char data = myStruct.structFirst;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_square_67b_badSink(CWE190_Integer_Overflow__char_max_square_67_structType myStruct)
CWE190_Integer_Overflow__char_max_square_67b_badSink
CWE190_Integer_Overflow__char_max_square_67_structType myStruct
CWE190_Integer_Overflow__char_max_square_67_structType
CWE190_Integer_Overflow__char_max_square_67_structType
myStruct
myStruct
{    char data = myStruct.structFirst;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data = myStruct.structFirst;
char data = myStruct.structFirst;
char
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(1,0,0)
(8,4,0)
(9,4,0)
(17,5,0)
(9,2,0)
(12,16,0)
(16,5,0)
(4,9,0)
(3,1,0)
(10,5,0)
(5,16,0)
(16,4,0)
(5,1,0)
(4,0,0)
(7,9,0)
(11,10,0)
(10,1,0)
(14,16,0)
(15,9,0)
(6,0,0)
(9,7,1)
(10,11,1)
(16,12,1)
(4,9,1)
(12,14,1)
(7,15,1)
(15,8,1)
(5,16,1)
(9,2,1)
(13,10,1)
(10,5,1)
(17,4,1)
(16,4,1)
(14,17,1)
(11,5,1)
(16,4,2)
(4,9,2)
(5,16,2)
(10,5,2)
(9,2,2)
-----------------------------------
(0,)
(1,)
(2,CWE190_Integer_Overflow__char_max_square_67_structType myStruct)
(3,result)
(4,data = myStruct.structFirst)
(5,result = data * data)
(6,data)
(7,structFirst)
(8,data)
(9,myStruct.structFirst)
(10,printHexCharLine(result)
(11,result)
(12,data)
(13,RET)
(14,data)
(15,myStruct)
(16,data * data)
(17,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^