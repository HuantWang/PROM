-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_preinc_17_bad()
{
    int i,j;
    int data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
41,44
43,44
44,45
46,47
48,49
48,50
48,51
49,50
49,51
50,51
50,52
50,53
50,54
51,52
53,54
55,56
57,58
59,60
61,62
62,63
63,64
63,65
64,65
66,67
66,68
67,68
69,70
71,72
72,73
73,74
73,75
74,75
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
83,84
83,85
84,85
87,88
88,89
90,91
91,92
91,93
91,94
92,93
93,94
94,95
96,97
97,98
97,99
99,100
99,101
101,102
102,103
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,45,47,52,54,56,58,60,65,68,70,75,76,81,82,85,86,89,95,98,100,103,107,109
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
63,64
63,65
79,80
79,81
83,84
83,85
-----guardedBy-----
54,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_preinc_17_bad(){    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_preinc_17_bad()
CWE190_Integer_Overflow__int_fgets_preinc_17_bad
{    int i,j;    int data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int result = data;            printIntLine(result);        }
++data;
++data
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(5,46,0)
(45,11,0)
(0,16,0)
(17,35,0)
(36,6,0)
(54,14,0)
(45,14,0)
(17,30,0)
(46,11,0)
(32,9,0)
(20,1,0)
(47,12,0)
(27,28,0)
(33,17,0)
(25,9,0)
(16,35,0)
(3,9,0)
(21,35,0)
(43,35,0)
(16,0,0)
(46,14,0)
(26,16,0)
(42,12,0)
(53,47,0)
(41,30,0)
(13,6,0)
(7,0,0)
(45,30,0)
(38,46,0)
(55,11,0)
(52,12,0)
(55,46,0)
(30,40,0)
(8,14,0)
(44,52,0)
(10,52,0)
(23,37,0)
(11,18,0)
(4,19,0)
(15,28,0)
(22,11,0)
(46,30,0)
(31,12,0)
(56,9,0)
(48,16,0)
(35,6,0)
(34,16,0)
(24,45,0)
(50,9,0)
(2,20,0)
(30,17,0)
(37,28,0)
(19,28,0)
(29,37,0)
(39,55,0)
(6,49,0)
(14,9,0)
(52,12,1)
(28,15,1)
(20,2,1)
(4,30,1)
(45,24,1)
(15,27,1)
(55,39,1)
(52,10,1)
(47,53,1)
(55,46,1)
(16,35,1)
(17,33,1)
(47,12,1)
(44,47,1)
(30,17,1)
(41,0,1)
(54,8,1)
(44,12,1)
(34,35,1)
(48,26,1)
(51,52,1)
(45,14,1)
(21,37,1)
(0,7,1)
(14,54,1)
(39,46,1)
(10,44,1)
(31,37,1)
(42,31,1)
(37,29,1)
(4,20,1)
(17,35,1)
(38,45,1)
(5,38,1)
(2,0,1)
(53,55,1)
(37,28,1)
(16,48,1)
(19,4,1)
(26,34,1)
(46,14,1)
(12,42,1)
(24,52,1)
(46,30,1)
(46,5,1)
(0,16,1)
(23,19,1)
(23,28,1)
(35,43,1)
(29,23,1)
(43,21,1)
(19,28,1)
(27,14,1)
(45,30,1)
(7,16,1)
(33,41,1)
(45,14,2)
(35,37,2)
(5,52,2)
(30,17,2)
(52,12,2)
(16,35,2)
(48,37,2)
(30,0,2)
(46,52,2)
(47,52,2)
(19,28,2)
(17,35,2)
(34,37,2)
(29,37,2)
(55,46,2)
(47,12,2)
(2,0,2)
(37,28,2)
(16,37,2)
(41,0,2)
(24,52,2)
(4,37,2)
(43,37,2)
(7,37,2)
(38,52,2)
(39,52,2)
(17,0,2)
(33,0,2)
(44,52,2)
(53,52,2)
(0,16,2)
(46,14,2)
(45,30,2)
(55,52,2)
(0,37,2)
(20,0,2)
(10,52,2)
(26,37,2)
(19,37,2)
(52,52,2)
(37,37,2)
(45,52,2)
(46,30,2)
(23,37,2)
(21,37,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,)
(2,"fgets()
(3,for(j = 0; j < 1; j++)
(4,i)
(5,data)
(6,)
(7,NULL)
(8,data)
(9,)
(10,1)
(11,)
(12,j = 0)
(13,inputBuffer)
(14,data = 0)
(15,0)
(16,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,atoi(inputBuffer)
(18,)
(19,i++)
(20,printLine("fgets()
(21,inputBuffer)
(22,result)
(23,i)
(24,data)
(25,for(i = 0; i < 1; i++)
(26,CHAR_ARRAY_SIZE)
(27,i)
(28,i = 0)
(29,1)
(30,data = atoi(inputBuffer)
(31,j)
(32,j)
(33,inputBuffer)
(34,inputBuffer)
(35,inputBuffer[CHAR_ARRAY_SIZE] = "")
(36,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(37,i < 1)
(38,result)
(39,result)
(40,)
(41,data)
(42,0)
(43,"")
(44,j)
(45,++data)
(46,result = data)
(47,j++)
(48,stdin)
(49,)
(50,i)
(51,RET)
(52,j < 1)
(53,j)
(54,0)
(55,printIntLine(result)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^