-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_15_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
26,27
30,31
31,32
31,33
32,33
36,37
36,38
38,39
38,40
38,41
38,42
38,43
38,44
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,29,33,34,35,37,40,44,46,50,52,56,58,59,60,64,65,66
-----computeFrom-----
12,13
12,14
22,23
22,24
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_15_bad(){    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int_rand_square_15_bad()
CWE190_Integer_Overflow__int_rand_square_15_bad
{    int data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(11,28,0)
(28,21,0)
(4,11,0)
(16,2,0)
(23,2,0)
(28,31,0)
(29,11,0)
(31,28,0)
(11,23,0)
(35,21,0)
(7,25,0)
(22,21,0)
(9,11,0)
(13,23,0)
(27,2,0)
(17,4,0)
(5,17,0)
(3,35,0)
(0,26,0)
(15,25,0)
(20,21,0)
(26,25,0)
(33,2,0)
(1,21,0)
(24,23,0)
(19,25,0)
(11,4,0)
(4,26,0)
(34,25,0)
(6,4,0)
(32,25,0)
(18,7,0)
(8,21,0)
(17,26,0)
(30,28,0)
(5,4,1)
(19,17,1)
(11,29,1)
(1,28,1)
(35,3,1)
(7,18,1)
(8,35,1)
(12,1,1)
(18,12,1)
(23,24,1)
(11,23,1)
(17,4,1)
(4,11,1)
(28,31,1)
(9,6,1)
(30,14,1)
(14,23,1)
(31,30,1)
(3,14,1)
(10,32,1)
(24,13,1)
(12,8,1)
(29,9,1)
(32,7,1)
(11,28,1)
(6,12,1)
(17,5,1)
(10,19,1)
(6,12,2)
(29,12,2)
(5,12,2)
(7,12,2)
(28,31,2)
(3,14,2)
(32,12,2)
(8,14,2)
(18,12,2)
(11,28,2)
(4,12,2)
(11,12,2)
(4,11,2)
(17,4,2)
(11,23,2)
(28,14,2)
(35,14,2)
(19,12,2)
(1,14,2)
(17,12,2)
(31,14,2)
(9,12,2)
(30,14,2)
-----------------------------------
(0,result)
(1,break;)
(2,)
(3,"Benign, fixed string")
(4,result = data * data)
(5,result)
(6,result)
(7,printLine("Benign, fixed string")
(8,break;)
(9,data)
(10,RET)
(11,data * data)
(12,7)
(13,data)
(14,6)
(15,default:)
(16,switch(7)
(17,printIntLine(result)
(18,"Benign, fixed string")
(19,break;)
(20,default:)
(21,)
(22,case 6:)
(23,data = 0)
(24,0)
(25,)
(26,)
(27,switch(6)
(28,data = RAND32()
(29,data)
(30,data)
(31,RAND32()
(32,break;)
(33,data)
(34,case 7:)
(35,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^