-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_31_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    {
        char dataCopy = data;
        char data = dataCopy;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,48,51,53,56,60,62
-----computeFrom-----
12,13
12,14
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_31_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_31_bad()
CWE190_Integer_Overflow__char_rand_postinc_31_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    {        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        char dataCopy = data;        char data = dataCopy;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
char dataCopy = data;
char dataCopy = data;
char
dataCopy = data
dataCopy
= data
data
data
char data = dataCopy;
char data = dataCopy;
char
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(22,0,0)
(19,16,0)
(3,6,0)
(26,20,0)
(11,20,0)
(24,20,0)
(7,14,0)
(6,3,0)
(8,6,0)
(15,9,0)
(0,11,0)
(6,8,0)
(17,19,0)
(9,19,0)
(9,5,0)
(14,16,0)
(10,5,0)
(13,5,0)
(23,9,0)
(5,4,0)
(6,4,0)
(27,16,0)
(21,14,0)
(5,19,0)
(26,9,0)
(20,19,0)
(11,9,0)
(4,6,0)
(25,26,0)
(4,16,0)
(12,11,0)
(18,19,0)
(2,4,0)
(0,20,0)
(28,11,0)
(26,9,1)
(12,26,1)
(4,6,1)
(2,14,1)
(23,5,1)
(13,10,1)
(7,21,1)
(6,3,1)
(25,9,1)
(5,13,1)
(26,25,1)
(11,9,1)
(0,11,1)
(8,2,1)
(6,8,1)
(1,0,1)
(5,4,1)
(9,5,1)
(22,11,1)
(28,12,1)
(15,23,1)
(9,15,1)
(11,28,1)
(0,22,1)
(14,7,1)
(10,4,1)
(26,9,2)
(6,8,2)
(5,4,2)
(6,3,2)
(11,9,2)
(9,5,2)
(4,6,2)
(0,11,2)
-----------------------------------
(0,printHexCharLine(result)
(1,RET)
(2,data)
(3,char)
(4,data = (char)
(5,dataCopy = data)
(6,(char)
(7,' ')
(8,RAND32()
(9,data = dataCopy)
(10,dataCopy)
(11,result = data)
(12,result)
(13,data)
(14,data = ' ')
(15,dataCopy)
(16,)
(17,data)
(18,dataCopy)
(19,)
(20,)
(21,data)
(22,result)
(23,data)
(24,result)
(25,data)
(26,data++)
(27,data)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^