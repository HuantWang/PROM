-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_17_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,41,0)
(37,18,0)
(31,12,0)
(32,36,0)
(41,15,0)
(20,18,0)
(16,5,0)
(33,20,0)
(11,29,0)
(36,17,0)
(7,39,0)
(22,1,0)
(40,12,0)
(13,1,0)
(26,15,0)
(6,40,0)
(29,18,0)
(1,36,0)
(41,5,0)
(35,27,0)
(0,39,0)
(13,36,0)
(10,15,0)
(3,18,0)
(5,41,0)
(14,1,0)
(4,20,0)
(15,39,0)
(27,36,0)
(19,12,0)
(25,13,0)
(38,40,0)
(34,12,0)
(5,2,0)
(23,39,0)
(1,15,0)
(27,15,0)
(9,5,0)
(8,39,0)
(28,31,0)
(30,39,0)
(6,12,1)
(40,12,1)
(6,31,1)
(27,35,1)
(13,25,1)
(35,20,1)
(38,6,1)
(34,15,1)
(41,15,1)
(9,40,1)
(13,1,1)
(31,28,1)
(10,26,1)
(12,19,1)
(4,33,1)
(18,3,1)
(41,24,1)
(25,1,1)
(16,9,1)
(14,22,1)
(29,11,1)
(15,10,1)
(1,14,1)
(1,15,1)
(20,4,1)
(20,18,1)
(22,27,1)
(19,34,1)
(5,41,1)
(27,15,1)
(33,29,1)
(11,13,1)
(21,20,1)
(40,38,1)
(29,18,1)
(28,5,1)
(37,40,1)
(3,37,1)
(24,16,1)
(33,18,1)
(31,12,1)
(31,12,2)
(27,15,2)
(29,20,2)
(11,20,2)
(4,20,2)
(13,20,2)
(40,12,2)
(14,20,2)
(29,18,2)
(16,40,2)
(20,18,2)
(5,40,2)
(33,20,2)
(41,15,2)
(22,20,2)
(40,40,2)
(20,20,2)
(13,1,2)
(31,40,2)
(41,40,2)
(1,15,2)
(1,20,2)
(6,40,2)
(9,40,2)
(35,20,2)
(28,40,2)
(5,41,2)
(24,40,2)
(25,20,2)
(38,40,2)
(27,20,2)
-----------------------------------
(0,data)
(1,result = data)
(2,)
(3,0)
(4,1)
(5,fscanf (stdin, "%c", &data)
(6,i)
(7,i)
(8,for(j = 0; j < 1; j++)
(9,stdin)
(10,\\\' \\\')
(11,j)
(12,i = 0)
(13,printHexCharLine(result)
(14,data)
(15,data = \\\' \\\')
(16,"%c")
(17,)
(18,j = 0)
(19,0)
(20,j < 1)
(21,RET)
(22,result)
(23,j)
(24,data)
(25,result)
(26,data)
(27,++data)
(28,i)
(29,j++)
(30,for(i = 0; i < 1; i++)
(31,i++)
(32,result)
(33,j)
(34,i)
(35,data)
(36,)
(37,j)
(38,1)
(39,)
(40,i < 1)
(41,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^