-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_12_bad()
{
    int64_t data;
    data = 0LL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (int64_t)RAND64();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))
        {
            int64_t result = data * data;
            printLongLongLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
31,32
32,33
34,35
35,36
36,37
36,38
37,38
40,41
40,42
40,43
41,42
42,43
44,45
45,46
45,47
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
66,68
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
84,85
84,86
85,86
87,88
87,89
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,9,11,15,16,20,25,29,30,33,38,39,43,49,51,55,57,61,63,69,73,74,76,79,81,86,88,92,94,98,100,105,106
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
53,54
53,55
66,67
66,68
90,91
90,92
-----guardedBy-----
76,94
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_12_bad(){    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_12_bad()
CWE190_Integer_Overflow__int64_t_rand_square_12_bad
{    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (int64_t)RAND64();    }
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX))        {            int64_t result = data * data;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
imaxabs((intmax_t)data) <= sqrtl(LLONG_MAX)
imaxabs((intmax_t)data)
imaxabs
imaxabs
(intmax_t)data
intmax_t
intmax_t
intmax_t

data
data
sqrtl(LLONG_MAX)
sqrtl
sqrtl
LLONG_MAX
LLONG_MAX
{            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(23,11,0)
(46,10,0)
(13,34,0)
(1,15,0)
(42,24,0)
(45,37,0)
(35,38,0)
(3,19,0)
(12,42,0)
(42,26,0)
(34,14,0)
(16,40,0)
(38,32,0)
(44,40,0)
(7,20,0)
(8,24,0)
(11,34,0)
(20,5,0)
(26,10,0)
(9,11,0)
(48,34,0)
(17,46,0)
(39,33,0)
(5,20,0)
(21,32,0)
(37,2,0)
(2,19,0)
(36,2,0)
(26,42,0)
(2,48,0)
(21,20,0)
(20,24,0)
(37,19,0)
(24,0,0)
(6,40,0)
(48,24,0)
(29,26,0)
(11,9,0)
(27,10,0)
(32,38,0)
(34,11,0)
(42,34,0)
(46,26,0)
(32,21,0)
(11,23,0)
(43,40,0)
(20,34,0)
(10,28,0)
(41,24,0)
(31,42,0)
(15,30,0)
(20,21,0)
(48,2,0)
(47,48,0)
(4,48,0)
(34,11,1)
(11,23,1)
(38,35,1)
(35,21,1)
(25,34,1)
(29,25,1)
(48,24,1)
(32,21,1)
(1,32,1)
(20,34,1)
(18,15,1)
(8,41,1)
(15,1,1)
(12,29,1)
(2,48,1)
(11,9,1)
(9,13,1)
(48,4,1)
(20,5,1)
(20,7,1)
(25,24,1)
(42,31,1)
(17,26,1)
(32,38,1)
(18,46,1)
(22,16,1)
(31,12,1)
(47,36,1)
(26,42,1)
(21,20,1)
(42,24,1)
(37,45,1)
(37,2,1)
(41,22,1)
(36,32,1)
(45,2,1)
(7,25,1)
(46,17,1)
(24,8,1)
(4,47,1)
(20,24,1)
(42,34,1)
(46,26,1)
(13,22,1)
(18,37,1)
(48,34,1)
(41,22,2)
(11,23,2)
(2,32,2)
(29,25,2)
(46,26,2)
(26,25,2)
(42,34,2)
(48,34,2)
(9,22,2)
(47,32,2)
(20,24,2)
(42,24,2)
(48,24,2)
(17,25,2)
(32,21,2)
(21,20,2)
(45,32,2)
(21,25,2)
(13,22,2)
(46,25,2)
(20,25,2)
(32,25,2)
(26,42,2)
(12,25,2)
(20,34,2)
(2,48,2)
(11,22,2)
(7,25,2)
(34,11,2)
(4,32,2)
(48,32,2)
(37,2,2)
(31,25,2)
(15,32,2)
(32,38,2)
(35,25,2)
(11,9,2)
(36,32,2)
(34,22,2)
(38,25,2)
(8,22,2)
(42,25,2)
(37,32,2)
(1,32,2)
(20,5,2)
(24,22,2)
-----------------------------------
(0,)
(1,"data value is too large to perform arithmetic safely.")
(2,result = data * data)
(3,result)
(4,data)
(5,intmax_t)
(6,if(globalReturnsTrueOrFalse()
(7,data)
(8,2)
(9,RAND64()
(10,)
(11,(int64_t)
(12,data)
(13,data)
(14,)
(15,printLine("data value is too large to perform arithmetic safely.")
(16,L)
(17,result)
(18,RET)
(19,)
(20,(intmax_t)
(21,imaxabs((intmax_t)
(22,globalReturnsTrueOrFalse()
(23,int64_t)
(24,data = 2)
(25,globalReturnsTrueOrFalse()
(26,result = data * data)
(27,result)
(28,)
(29,result)
(30,)
(31,data)
(32,imaxabs((intmax_t)
(33,)
(34,data = (int64_t)
(35,LLONG_MAX)
(36,result)
(37,printLongLongLine(result)
(38,sqrtl(LLONG_MAX)
(39,if (imaxabs((intmax_t)
(40,)
(41,data)
(42,data * data)
(43,if(globalReturnsTrueOrFalse()
(44,data)
(45,result)
(46,printLongLongLine(result)
(47,data)
(48,data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^