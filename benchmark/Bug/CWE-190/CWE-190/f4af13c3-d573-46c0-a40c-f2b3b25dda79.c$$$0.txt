-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,44,48,50,54,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
52,53
52,54
-----guardedBy-----
43,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_max_multiply_15_bad()
CWE190_Integer_Overflow__short_max_multiply_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(11,16,0)
(38,32,0)
(35,1,0)
(15,9,0)
(2,31,0)
(13,1,0)
(8,31,0)
(36,30,0)
(26,3,0)
(1,9,0)
(27,11,0)
(7,9,0)
(6,30,0)
(23,27,0)
(27,32,0)
(10,13,0)
(17,3,0)
(19,13,0)
(11,32,0)
(5,9,0)
(34,16,0)
(24,1,0)
(13,3,0)
(18,31,0)
(37,4,0)
(39,16,0)
(20,30,0)
(25,30,0)
(0,30,0)
(16,3,0)
(4,31,0)
(3,31,0)
(16,11,0)
(29,30,0)
(33,11,0)
(16,1,0)
(21,20,0)
(28,31,0)
(22,2,1)
(12,25,1)
(26,17,1)
(10,22,1)
(24,35,1)
(13,1,1)
(12,29,1)
(33,13,1)
(4,37,1)
(34,33,1)
(37,14,1)
(29,13,1)
(20,21,1)
(23,11,1)
(22,8,1)
(16,39,1)
(29,27,1)
(14,1,1)
(25,20,1)
(16,1,1)
(2,4,1)
(13,19,1)
(21,22,1)
(27,23,1)
(17,14,1)
(16,3,1)
(19,10,1)
(11,16,1)
(3,26,1)
(13,3,1)
(27,11,1)
(1,24,1)
(8,3,1)
(39,34,1)
(16,1,2)
(20,22,2)
(33,13,2)
(11,16,2)
(19,22,2)
(27,11,2)
(25,22,2)
(34,13,2)
(17,14,2)
(16,3,2)
(13,22,2)
(13,1,2)
(27,13,2)
(16,13,2)
(13,3,2)
(37,14,2)
(39,13,2)
(29,22,2)
(11,13,2)
(8,14,2)
(26,14,2)
(3,14,2)
(2,14,2)
(23,13,2)
(21,22,2)
(10,22,2)
(4,14,2)
-----------------------------------
(0,case 7:)
(1,data = 0)
(2,break;)
(3,data = SHRT_MAX)
(4,printLine("Benign, fixed string")
(5,data)
(6,if(data > 0)
(7,switch(7)
(8,break;)
(9,)
(10,data)
(11,result = data * 2)
(12,RET)
(13,data > 0)
(14,6)
(15,switch(6)
(16,data * 2)
(17,data)
(18,default:)
(19,0)
(20,printLine("Benign, fixed string")
(21,"Benign, fixed string")
(22,7)
(23,result)
(24,0)
(25,break;)
(26,SHRT_MAX)
(27,printIntLine(result)
(28,case 6:)
(29,break;)
(30,)
(31,)
(32,)
(33,result)
(34,data)
(35,data)
(36,default:)
(37,"Benign, fixed string")
(38,result)
(39,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^