-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_01_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = LLONG_MAX;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
        int64_t result = data * 2;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
24,26
25,26
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,9,11,15,16,20,22,26,27,32,34,38,39,43,45
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
36,37
36,38
-----guardedBy-----
26,38
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_01_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_01_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_01_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */        int64_t result = data * 2;        printLongLongLine(result);    }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(8,16,0)
(10,6,0)
(5,3,0)
(3,6,0)
(19,14,0)
(6,14,0)
(17,14,0)
(4,3,0)
(2,8,0)
(0,8,0)
(11,6,0)
(18,11,0)
(7,11,0)
(15,6,0)
(1,14,0)
(8,11,0)
(9,16,0)
(11,8,0)
(2,16,0)
(13,2,0)
(12,3,1)
(15,10,1)
(3,4,1)
(18,0,1)
(11,6,1)
(13,8,1)
(12,2,1)
(4,5,1)
(8,11,1)
(7,18,1)
(6,15,1)
(2,8,1)
(3,6,1)
(0,3,1)
(10,17,1)
(2,13,1)
(5,6,1)
(11,7,1)
(11,6,2)
(7,3,2)
(3,6,2)
(8,3,2)
(0,3,2)
(8,11,2)
(18,3,2)
(13,3,2)
(11,3,2)
(2,8,2)
(2,3,2)
-----------------------------------
(0,result)
(1,if(data > 0)
(2,printLongLongLine(result)
(3,data > 0)
(4,0)
(5,data)
(6,data = LLONG_MAX)
(7,2)
(8,result = data * 2)
(9,result)
(10,data)
(11,data * 2)
(12,RET)
(13,result)
(14,)
(15,LLONG_MAX)
(16,)
(17,L)
(18,data)
(19,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^