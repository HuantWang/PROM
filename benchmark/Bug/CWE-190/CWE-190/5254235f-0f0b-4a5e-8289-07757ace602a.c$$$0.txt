-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_31_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Use the maximum value for this type */
    data = INT_MAX;
    {
        int dataCopy = data;
        int data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,30,33,35,38,42,43,47,49,53,54,58,60
-----computeFrom-----
12,13
12,14
17,18
17,19
40,41
40,42
51,52
51,53
-----guardedBy-----
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_31_bad(){    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    {        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_multiply_31_bad()
CWE190_Integer_Overflow__int_max_multiply_31_bad
{    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Use the maximum value for this type */    data = INT_MAX;    {        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
{        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(1,8,0)
(17,27,0)
(22,3,0)
(10,22,0)
(19,22,0)
(7,3,0)
(26,20,0)
(23,25,0)
(18,2,0)
(28,22,0)
(12,11,0)
(30,14,0)
(20,30,0)
(14,3,0)
(20,22,0)
(11,20,0)
(4,30,0)
(30,22,0)
(16,27,0)
(2,3,0)
(29,23,0)
(15,11,0)
(11,8,0)
(24,14,0)
(9,14,0)
(8,25,0)
(8,11,0)
(5,2,0)
(13,25,0)
(27,20,0)
(23,8,0)
(6,30,0)
(21,20,0)
(14,9,1)
(9,24,1)
(26,30,1)
(21,26,1)
(24,2,1)
(20,21,1)
(1,27,1)
(15,12,1)
(2,5,1)
(17,16,1)
(23,29,1)
(27,17,1)
(12,1,1)
(11,15,1)
(5,18,1)
(16,20,1)
(11,20,1)
(6,4,1)
(0,23,1)
(30,6,1)
(0,27,1)
(23,8,1)
(4,14,1)
(30,14,1)
(8,11,1)
(27,20,1)
(20,30,1)
(29,8,1)
(12,27,2)
(29,27,2)
(11,27,2)
(1,27,2)
(20,30,2)
(8,11,2)
(8,27,2)
(27,20,2)
(30,14,2)
(15,27,2)
(23,27,2)
(23,8,2)
(11,20,2)
-----------------------------------
(0,RET)
(1,result)
(2,data = 0)
(3,)
(4,dataCopy)
(5,0)
(6,data)
(7,data)
(8,result = data * 2)
(9,INT_MAX)
(10,if(data > 0)
(11,data * 2)
(12,data)
(13,result)
(14,data = INT_MAX)
(15,2)
(16,data)
(17,0)
(18,data)
(19,data)
(20,data = dataCopy)
(21,dataCopy)
(22,)
(23,printIntLine(result)
(24,data)
(25,)
(26,data)
(27,data > 0)
(28,dataCopy)
(29,result)
(30,dataCopy = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^