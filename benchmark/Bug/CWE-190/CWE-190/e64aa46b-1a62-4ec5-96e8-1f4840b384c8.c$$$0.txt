-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_postinc_04_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(STATIC_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
30,33
31,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,34,37,39,42,46,48
-----computeFrom-----
12,13
12,14
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_postinc_04_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_postinc_04_bad()
CWE190_Integer_Overflow__unsigned_int_max_postinc_04_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(STATIC_CONST_TRUE)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(15,6,0)
(6,12,0)
(14,6,0)
(9,23,0)
(0,12,0)
(17,7,0)
(10,8,0)
(15,8,0)
(22,8,0)
(20,15,0)
(11,12,0)
(13,7,0)
(1,22,0)
(22,23,0)
(22,12,0)
(12,3,0)
(8,21,0)
(4,7,0)
(6,8,0)
(16,23,0)
(23,7,0)
(18,6,0)
(6,23,0)
(6,14,1)
(5,2,1)
(6,12,1)
(22,23,1)
(19,15,1)
(0,2,1)
(6,23,1)
(5,12,1)
(22,12,1)
(14,18,1)
(1,5,1)
(11,0,1)
(15,20,1)
(18,22,1)
(22,1,1)
(2,23,1)
(15,6,1)
(19,5,1)
(20,6,1)
(12,11,1)
(9,16,1)
(23,9,1)
(22,5,2)
(15,5,2)
(22,12,2)
(6,23,2)
(6,12,2)
(20,5,2)
(12,2,2)
(14,5,2)
(6,5,2)
(0,2,2)
(22,23,2)
(18,5,2)
(15,6,2)
(1,5,2)
(11,2,2)
-----------------------------------
(0,data)
(1,data)
(2,STATIC_CONST_TRUE)
(3,)
(4,if(STATIC_CONST_TRUE)
(5,STATIC_CONST_TRUE)
(6,result = data)
(7,)
(8,)
(9,0)
(10,result)
(11,UINT_MAX)
(12,data = UINT_MAX)
(13,if(STATIC_CONST_TRUE)
(14,data)
(15,printUnsignedLine(result)
(16,data)
(17,data)
(18,result)
(19,RET)
(20,result)
(21,)
(22,data++)
(23,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^