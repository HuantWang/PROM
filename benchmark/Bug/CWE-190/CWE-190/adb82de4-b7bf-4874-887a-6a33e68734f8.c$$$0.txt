-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (INT_MAX/2))
            {
                int result = data * 2;
                printIntLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
51,52
51,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
66,68
67,68
70,71
71,72
71,73
71,74
72,73
72,74
73,74
75,76
76,77
76,78
77,78
80,81
80,82
81,82
82,83
82,84
84,85
84,86
86,87
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,45,46,50,52,56,57,61,63,68,69,74,78,79,83,85,89,90,94,96,101,102
-----computeFrom-----
12,13
12,14
33,34
33,35
43,44
43,45
54,55
54,56
66,67
66,68
72,73
72,74
76,77
76,78
87,88
87,89
-----guardedBy-----
45,56
68,89
74,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_12_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (INT_MAX/2)
data
data
(INT_MAX/2)
INT_MAX/2
INT_MAX
INT_MAX
2
{                int result = data * 2;                printIntLine(result);            }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(8,2,0)
(13,57,0)
(19,37,0)
(48,54,0)
(17,20,0)
(11,29,0)
(51,27,0)
(50,41,0)
(10,15,0)
(13,7,0)
(2,46,0)
(8,7,0)
(22,42,0)
(35,43,0)
(9,46,0)
(3,8,0)
(15,2,0)
(4,37,0)
(14,57,0)
(18,2,0)
(31,2,0)
(24,56,0)
(52,8,0)
(53,54,0)
(47,13,0)
(5,27,0)
(56,2,0)
(37,15,0)
(39,21,0)
(45,43,0)
(12,5,0)
(54,2,0)
(54,39,0)
(15,37,0)
(27,5,0)
(44,39,0)
(23,20,0)
(55,56,0)
(43,29,0)
(0,33,0)
(5,30,0)
(43,2,0)
(34,7,0)
(43,39,0)
(40,5,0)
(23,29,0)
(29,20,0)
(33,16,0)
(26,46,0)
(15,39,0)
(36,46,0)
(28,38,0)
(56,39,0)
(27,2,0)
(49,23,0)
(8,39,0)
(7,8,0)
(29,43,0)
(6,39,0)
(7,57,0)
(44,25,1)
(40,25,1)
(56,55,1)
(55,24,1)
(8,39,1)
(13,7,1)
(1,56,1)
(37,19,1)
(32,5,1)
(56,39,1)
(34,56,1)
(7,8,1)
(15,37,1)
(49,29,1)
(18,31,1)
(54,39,1)
(0,15,1)
(15,2,1)
(10,54,1)
(45,35,1)
(11,15,1)
(1,23,1)
(47,7,1)
(1,33,1)
(8,2,1)
(33,0,1)
(35,11,1)
(5,27,1)
(53,48,1)
(39,6,1)
(54,53,1)
(23,29,1)
(13,47,1)
(52,3,1)
(1,13,1)
(51,12,1)
(24,32,1)
(1,54,1)
(15,39,1)
(54,2,1)
(2,18,1)
(43,39,1)
(19,4,1)
(56,2,1)
(29,43,1)
(48,32,1)
(25,2,1)
(3,34,1)
(27,2,1)
(6,44,1)
(32,39,1)
(43,45,1)
(8,52,1)
(4,10,1)
(27,51,1)
(12,40,1)
(43,2,1)
(23,49,1)
(39,25,2)
(0,15,2)
(55,32,2)
(54,32,2)
(54,39,2)
(24,32,2)
(15,39,2)
(40,25,2)
(13,7,2)
(33,15,2)
(8,56,2)
(15,2,2)
(56,2,2)
(29,15,2)
(35,15,2)
(49,15,2)
(51,25,2)
(4,54,2)
(8,2,2)
(43,2,2)
(45,15,2)
(7,8,2)
(19,54,2)
(56,32,2)
(7,56,2)
(5,27,2)
(34,56,2)
(47,56,2)
(12,25,2)
(27,25,2)
(15,37,2)
(13,56,2)
(3,56,2)
(6,25,2)
(11,15,2)
(15,54,2)
(29,43,2)
(37,54,2)
(27,2,2)
(53,32,2)
(23,15,2)
(23,29,2)
(52,56,2)
(54,2,2)
(8,39,2)
(5,25,2)
(43,15,2)
(43,39,2)
(56,39,2)
(10,54,2)
(48,32,2)
(44,25,2)
-----------------------------------
(0,"data value is too large to perform arithmetic safely.")
(1,RET)
(2,data = 0)
(3,data)
(4,INT_MAX)
(5,fscanf(stdin, "%d", &data)
(6,2)
(7,result = data * 2)
(8,data * 2)
(9,if(globalReturnsTrueOrFalse()
(10,data)
(11,result)
(12,"%d")
(13,printIntLine(result)
(14,result)
(15,data < (INT_MAX/2)
(16,)
(17,result)
(18,0)
(19,2)
(20,)
(21,)
(22,if(data > 0)
(23,printIntLine(result)
(24,data)
(25,globalReturnsTrueOrFalse()
(26,if(globalReturnsTrueOrFalse()
(27,&data)
(28,if(data > 0)
(29,result = data * 2)
(30,)
(31,data)
(32,globalReturnsTrueOrFalse()
(33,printLine("data value is too large to perform arithmetic safely.")
(34,result)
(35,data)
(36,data)
(37,INT_MAX/2)
(38,)
(39,data = 2)
(40,stdin)
(41,)
(42,)
(43,data * 2)
(44,data)
(45,2)
(46,)
(47,result)
(48,data)
(49,result)
(50,if (data < (INT_MAX/2)
(51,data)
(52,2)
(53,0)
(54,data > 0)
(55,0)
(56,data > 0)
(57,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^