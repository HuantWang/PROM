-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_11_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(globalReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_11_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_11_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_11_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(20,22,0)
(2,7,0)
(27,21,0)
(19,17,0)
(8,20,0)
(14,25,0)
(1,21,0)
(21,4,0)
(13,4,0)
(29,15,0)
(3,4,0)
(4,15,0)
(28,27,0)
(12,21,0)
(25,27,0)
(25,7,0)
(18,20,0)
(23,3,0)
(9,15,0)
(17,4,0)
(17,20,0)
(26,4,0)
(6,5,0)
(27,7,0)
(10,15,0)
(16,3,0)
(21,27,0)
(20,17,0)
(0,11,1)
(25,27,1)
(17,19,1)
(4,26,1)
(24,3,1)
(27,21,1)
(17,4,1)
(8,18,1)
(3,4,1)
(1,12,1)
(16,0,1)
(28,3,1)
(24,25,1)
(24,0,1)
(21,1,1)
(14,27,1)
(25,14,1)
(18,11,1)
(0,20,1)
(11,4,1)
(12,28,1)
(20,17,1)
(23,16,1)
(19,8,1)
(26,13,1)
(3,23,1)
(21,4,1)
(18,11,2)
(17,11,2)
(1,3,2)
(14,3,2)
(8,11,2)
(17,4,2)
(12,3,2)
(3,0,2)
(3,4,2)
(27,21,2)
(20,11,2)
(16,0,2)
(25,27,2)
(21,3,2)
(23,0,2)
(19,11,2)
(25,3,2)
(20,17,2)
(28,3,2)
(27,3,2)
(21,4,2)
-----------------------------------
(0,globalReturnsTrue()
(1,2)
(2,result)
(3,data > 0)
(4,data = 0)
(5,)
(6,if(data > 0)
(7,)
(8,"%u")
(9,if(globalReturnsTrue()
(10,data)
(11,globalReturnsTrue()
(12,data)
(13,data)
(14,result)
(15,)
(16,data)
(17,&data)
(18,stdin)
(19,data)
(20,fscanf (stdin, "%u", &data)
(21,data * 2)
(22,)
(23,0)
(24,RET)
(25,printUnsignedLine(result)
(26,0)
(27,result = data * 2)
(28,result)
(29,if(globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^