-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        char result = data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
40,43
41,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,44,47,49,52,56,58,59,60,64,65,66
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_max_postinc_15_bad()
CWE190_Integer_Overflow__char_max_postinc_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(9,32,0)
(19,0,0)
(7,6,0)
(23,32,0)
(18,6,0)
(13,32,0)
(22,17,0)
(26,32,0)
(5,32,0)
(16,32,0)
(1,29,0)
(1,0,0)
(12,17,0)
(30,29,0)
(21,9,0)
(3,21,0)
(24,14,0)
(1,9,0)
(27,0,0)
(17,9,0)
(35,6,0)
(17,0,0)
(31,14,0)
(15,6,0)
(2,29,0)
(11,9,0)
(0,6,0)
(4,15,0)
(33,6,0)
(21,17,0)
(17,29,0)
(25,5,0)
(20,1,0)
(29,14,0)
(34,14,0)
(10,33,1)
(17,0,1)
(15,4,1)
(8,23,1)
(1,0,1)
(1,29,1)
(4,28,1)
(17,29,1)
(1,20,1)
(8,13,1)
(28,29,1)
(12,22,1)
(27,19,1)
(13,5,1)
(0,27,1)
(29,2,1)
(20,10,1)
(21,17,1)
(22,1,1)
(23,21,1)
(25,10,1)
(2,30,1)
(3,17,1)
(19,28,1)
(10,7,1)
(7,15,1)
(17,12,1)
(33,0,1)
(21,3,1)
(5,25,1)
(12,10,2)
(13,10,2)
(22,10,2)
(1,10,2)
(17,29,2)
(21,17,2)
(17,10,2)
(1,0,2)
(3,10,2)
(4,28,2)
(15,28,2)
(21,10,2)
(0,28,2)
(33,28,2)
(1,29,2)
(23,10,2)
(5,10,2)
(7,28,2)
(20,10,2)
(17,0,2)
(25,10,2)
(27,28,2)
(19,28,2)
-----------------------------------
(0,data = CHAR_MAX)
(1,data++)
(2,\\\' \\\')
(3,result)
(4,"Benign, fixed string")
(5,printLine("Benign, fixed string")
(6,)
(7,break;)
(8,RET)
(9,)
(10,7)
(11,result)
(12,data)
(13,break;)
(14,)
(15,printLine("Benign, fixed string")
(16,case 7:)
(17,result = data)
(18,default:)
(19,data)
(20,data)
(21,printHexCharLine(result)
(22,result)
(23,break;)
(24,switch(7)
(25,"Benign, fixed string")
(26,default:)
(27,CHAR_MAX)
(28,6)
(29,data = \\\' \\\')
(30,data)
(31,switch(6)
(32,)
(33,break;)
(34,data)
(35,case 6:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^