-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,36,38,42,44,48,50
-----computeFrom-----
12,13
12,14
20,21
20,22
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_02_bad()
CWE190_Integer_Overflow__char_rand_square_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,9,0)
(12,21,0)
(2,1,0)
(5,9,0)
(7,20,0)
(1,21,0)
(18,17,0)
(14,17,0)
(17,18,0)
(17,13,0)
(9,8,0)
(9,20,0)
(19,18,0)
(13,16,0)
(14,13,0)
(20,9,0)
(23,1,0)
(18,1,0)
(25,13,0)
(11,21,0)
(20,3,0)
(15,14,0)
(22,21,0)
(4,18,0)
(3,20,0)
(0,17,0)
(20,7,0)
(23,2,1)
(18,19,1)
(18,1,1)
(9,20,1)
(10,1,1)
(18,9,1)
(0,24,1)
(7,5,1)
(6,14,1)
(6,24,1)
(20,3,1)
(14,17,1)
(4,0,1)
(15,17,1)
(24,9,1)
(17,18,1)
(5,10,1)
(24,10,1)
(14,15,1)
(1,23,1)
(19,4,1)
(20,7,1)
(17,24,2)
(0,24,2)
(9,10,2)
(4,24,2)
(18,1,2)
(18,24,2)
(20,10,2)
(5,10,2)
(20,7,2)
(19,24,2)
(20,3,2)
(14,17,2)
(9,20,2)
(15,24,2)
(18,9,2)
(14,24,2)
(17,18,2)
(7,10,2)
-----------------------------------
(0,result)
(1,data = \' \')
(2,data)
(3,char)
(4,data)
(5,data)
(6,RET)
(7,RAND32()
(8,)
(9,data = (char)
(10,1)
(11,if(1)
(12,if(1)
(13,)
(14,printHexCharLine(result)
(15,result)
(16,)
(17,result = data * data)
(18,data * data)
(19,data)
(20,(char)
(21,)
(22,data)
(23,' ')
(24,1)
(25,result)
(26,data = ' ')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^