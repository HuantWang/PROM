-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_03_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(32,1,0)
(33,10,0)
(15,28,0)
(30,14,0)
(12,5,0)
(22,33,0)
(3,14,0)
(0,24,0)
(20,28,0)
(4,27,0)
(26,33,0)
(29,5,0)
(27,17,0)
(17,27,0)
(11,24,0)
(5,24,0)
(26,5,0)
(2,33,0)
(21,26,0)
(6,24,0)
(19,8,0)
(33,26,0)
(9,8,0)
(23,3,0)
(16,27,0)
(3,17,0)
(31,5,0)
(7,12,0)
(17,14,0)
(27,5,0)
(18,12,0)
(13,17,0)
(15,5,1)
(25,3,1)
(4,13,1)
(28,20,1)
(13,12,1)
(26,21,1)
(26,5,1)
(31,29,1)
(25,8,1)
(2,22,1)
(12,18,1)
(3,17,1)
(16,4,1)
(19,9,1)
(9,28,1)
(5,31,1)
(7,8,1)
(33,26,1)
(9,33,1)
(21,2,1)
(25,12,1)
(27,16,1)
(23,17,1)
(27,5,1)
(3,23,1)
(22,28,1)
(12,5,1)
(17,27,1)
(8,19,1)
(20,15,1)
(18,7,1)
(26,5,2)
(23,12,2)
(4,12,2)
(17,12,2)
(21,28,2)
(27,12,2)
(12,5,2)
(13,12,2)
(22,28,2)
(7,8,2)
(33,28,2)
(12,8,2)
(27,5,2)
(33,26,2)
(18,8,2)
(2,28,2)
(3,17,2)
(3,12,2)
(17,27,2)
(26,28,2)
(16,12,2)
-----------------------------------
(0,data)
(1,)
(2,"%d")
(3,printIntLine(result)
(4,data)
(5,data = 0)
(6,if(5==5)
(7,data)
(8,5==5)
(9,5)
(10,)
(11,if(5==5)
(12,data > 0)
(13,result)
(14,)
(15,5)
(16,2)
(17,result = data * 2)
(18,0)
(19,5)
(20,5)
(21,data)
(22,stdin)
(23,result)
(24,)
(25,RET)
(26,&data)
(27,data * 2)
(28,5==5)
(29,data)
(30,result)
(31,0)
(32,if(data > 0)
(33,fscanf(stdin, "%d", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^