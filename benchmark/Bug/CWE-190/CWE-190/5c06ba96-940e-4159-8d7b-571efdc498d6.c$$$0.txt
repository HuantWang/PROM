-----label-----
1
-----code-----
static void badSink(char data)
{
    if(badStatic)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
15,16
16,17
17,18
19,20
20,21
20,22
22,23
22,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
-----nextToken-----
2,4,6,8,12,18,21,23,26,30,32
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char data){    if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
static void
badSink(char data)
badSink
char data
char
data
data
{    if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
if(badStatic)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
badStatic
badStatic
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(6,1,0)
(14,10,0)
(3,0,0)
(11,0,0)
(0,2,0)
(12,2,0)
(13,11,0)
(4,6,0)
(2,7,0)
(5,0,0)
(6,2,0)
(0,1,0)
(11,2,0)
(6,4,1)
(6,1,1)
(9,11,1)
(11,13,1)
(0,1,1)
(0,3,1)
(13,0,1)
(4,8,1)
(3,5,1)
(5,6,1)
(11,0,1)
(9,8,1)
(11,8,2)
(11,0,2)
(6,8,2)
(3,8,2)
(13,8,2)
(4,8,2)
(0,8,2)
(5,8,2)
(0,1,2)
(6,1,2)
-----------------------------------
(0,result = data)
(1,char data)
(2,)
(3,data)
(4,data)
(5,result)
(6,++data)
(7,)
(8,badStatic)
(9,RET)
(10,)
(11,printHexCharLine(result)
(12,result)
(13,result)
(14,if(badStatic)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^