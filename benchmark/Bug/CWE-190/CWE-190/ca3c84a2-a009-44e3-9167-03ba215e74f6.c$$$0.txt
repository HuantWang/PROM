-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_31_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    /* POTENTIAL FLAW: Read data from the console using fscanf() */
    fscanf(stdin, "%d", &data);
    {
        int dataCopy = data;
        int data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
26,29
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
40,41
41,42
43,44
43,45
44,45
44,46
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,34,37,39,42,46,47,51,53,57,58,62,64
-----computeFrom-----
12,13
12,14
44,45
44,46
55,56
55,57
-----guardedBy-----
46,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_31_bad(){    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_31_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_31_bad
{    int data;    /* Initialize data */    data = 0;    /* POTENTIAL FLAW: Read data from the console using fscanf() */    fscanf(stdin, "%d", &data);    {        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
{        int dataCopy = data;        int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int dataCopy = data;
int dataCopy = data;
int
dataCopy = data
dataCopy
= data
data
data
int data = dataCopy;
int data = dataCopy;
int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(1,21,0)
(7,11,0)
(31,30,0)
(10,13,0)
(16,21,0)
(28,1,0)
(20,21,0)
(16,13,0)
(27,26,0)
(23,17,0)
(26,16,0)
(6,3,0)
(29,6,0)
(6,1,0)
(0,30,0)
(9,11,0)
(31,11,0)
(30,31,0)
(12,30,0)
(14,3,0)
(15,9,0)
(24,31,0)
(13,3,0)
(4,21,0)
(17,26,0)
(26,13,0)
(19,16,0)
(5,13,0)
(9,31,0)
(2,16,0)
(22,26,0)
(18,6,0)
(32,13,0)
(1,6,0)
(30,26,0)
(25,17,0)
(21,3,0)
(6,1,1)
(1,28,1)
(20,4,1)
(17,25,1)
(9,31,1)
(21,20,1)
(30,0,1)
(15,31,1)
(31,30,1)
(22,16,1)
(23,26,1)
(18,21,1)
(1,21,1)
(0,12,1)
(24,17,1)
(17,26,1)
(26,27,1)
(9,15,1)
(16,19,1)
(27,22,1)
(2,6,1)
(16,21,1)
(28,29,1)
(30,26,1)
(25,23,1)
(19,2,1)
(26,16,1)
(8,9,1)
(29,18,1)
(8,17,1)
(12,24,1)
(26,16,2)
(31,30,2)
(30,17,2)
(6,1,2)
(17,26,2)
(9,31,2)
(9,17,2)
(0,17,2)
(30,26,2)
(31,17,2)
(24,17,2)
(1,21,2)
(12,17,2)
(16,21,2)
(15,17,2)
-----------------------------------
(0,2)
(1,&data)
(2,dataCopy)
(3,)
(4,data)
(5,data)
(6,fscanf(stdin, "%d", &data)
(7,result)
(8,RET)
(9,printIntLine(result)
(10,if(data > 0)
(11,)
(12,data)
(13,)
(14,data)
(15,result)
(16,dataCopy = data)
(17,data > 0)
(18,stdin)
(19,data)
(20,0)
(21,data = 0)
(22,data)
(23,data)
(24,result)
(25,0)
(26,data = dataCopy)
(27,dataCopy)
(28,data)
(29,"%d")
(30,data * 2)
(31,result = data * 2)
(32,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^