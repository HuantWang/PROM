-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_square_07_bad()
{
    unsigned int data;
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_square_07_bad(){    unsigned int data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_square_07_bad()
CWE190_Integer_Overflow__unsigned_int_max_square_07_bad
{    unsigned int data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(7,10,0)
(4,12,0)
(8,10,0)
(15,22,0)
(13,22,0)
(16,1,0)
(14,25,0)
(27,12,0)
(5,18,0)
(5,1,0)
(24,3,0)
(0,23,0)
(23,11,0)
(6,3,0)
(20,5,0)
(5,10,0)
(9,5,0)
(18,5,0)
(26,12,0)
(10,17,0)
(21,1,0)
(1,12,0)
(2,18,0)
(25,23,0)
(18,23,0)
(25,18,0)
(22,13,1)
(14,18,1)
(24,1,1)
(6,24,1)
(19,22,1)
(9,20,1)
(18,5,1)
(5,9,1)
(20,2,1)
(15,3,1)
(1,16,1)
(8,7,1)
(2,22,1)
(25,18,1)
(3,6,1)
(15,10,1)
(25,14,1)
(13,15,1)
(10,8,1)
(19,25,1)
(7,3,1)
(5,10,1)
(5,1,1)
(16,21,1)
(25,18,2)
(5,10,2)
(10,3,2)
(18,5,2)
(7,3,2)
(14,22,2)
(5,1,2)
(5,22,2)
(25,22,2)
(2,22,2)
(18,22,2)
(8,3,2)
(20,22,2)
(9,22,2)
-----------------------------------
(0,result)
(1,data = 0)
(2,result)
(3,staticFive==5)
(4,data)
(5,data * data)
(6,5)
(7,data)
(8,UINT_MAX)
(9,data)
(10,data = UINT_MAX)
(11,)
(12,)
(13,5)
(14,result)
(15,staticFive)
(16,0)
(17,)
(18,result = data * data)
(19,RET)
(20,data)
(21,data)
(22,staticFive==5)
(23,)
(24,staticFive)
(25,printUnsignedLine(result)
(26,if(staticFive==5)
(27,if(staticFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^