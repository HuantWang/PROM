-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_bad()
{
    int64_t data;
    CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_unionType myUnion;
    data = 0LL;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%" SCNd64, &data);
    myUnion.unionFirst = data;
    {
        int64_t data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int64_t result = data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
23,24
24,25
25,26
25,27
26,27
26,28
27,28
30,31
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,9,11,15,17,21,22,28,29,31,36,38,42,43,48,52,54,57,61,63
-----computeFrom-----
19,20
19,21
25,26
25,27
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_bad(){    int64_t data;    CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int64_t result = data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_bad()
CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_bad
{    int64_t data;    CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_unionType myUnion;    data = 0LL;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%" SCNd64, &data);    myUnion.unionFirst = data;    {        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int64_t result = data;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_unionType myUnion;
CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_unionType
CWE190_Integer_Overflow__int64_t_fscanf_postinc_34_unionType
myUnion
myUnion
data = 0LL;
data = 0LL
data
data
0LL
fscanf (stdin, "%" SCNd64, &data);
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int64_t data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int64_t result = data;            printLongLongLine(result);        }    }
int64_t data = myUnion.unionSecond;
int64_t data = myUnion.unionSecond;
int64_t
int64_t
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int64_t result = data;            printLongLongLine(result);        }
data++;
data++
data
data
int64_t result = data;
int64_t result = data;
int64_t
int64_t
result = data
result
= data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(18,24,0)
(17,0,0)
(10,1,0)
(12,23,0)
(16,21,0)
(22,13,0)
(9,11,0)
(21,11,0)
(4,11,0)
(23,8,0)
(7,24,0)
(1,8,0)
(12,13,0)
(21,24,0)
(20,8,0)
(5,8,0)
(11,12,0)
(24,23,0)
(3,0,0)
(15,12,0)
(0,1,0)
(13,12,0)
(7,12,0)
(11,24,0)
(25,23,0)
(2,8,0)
(14,13,0)
(6,7,0)
(17,3,1)
(21,11,1)
(9,7,1)
(7,12,1)
(19,21,1)
(14,15,1)
(3,5,1)
(10,0,1)
(22,14,1)
(0,17,1)
(11,12,1)
(13,22,1)
(6,12,1)
(4,9,1)
(1,10,1)
(7,6,1)
(15,1,1)
(16,11,1)
(12,13,1)
(11,4,1)
(21,16,1)
(12,13,2)
(7,12,2)
(21,11,2)
(11,12,2)
-----------------------------------
(0,myUnion.unionFirst)
(1,myUnion.unionFirst = data)
(2,myUnion)
(3,myUnion)
(4,data)
(5,L)
(6,data)
(7,data++)
(8,)
(9,result)
(10,data)
(11,result = data)
(12,data = myUnion.unionSecond)
(13,myUnion.unionSecond)
(14,myUnion)
(15,data)
(16,result)
(17,unionFirst)
(18,result)
(19,RET)
(20,data)
(21,printLongLongLine(result)
(22,unionSecond)
(23,)
(24,)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^