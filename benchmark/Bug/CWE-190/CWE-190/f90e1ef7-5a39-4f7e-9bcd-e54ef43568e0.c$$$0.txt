-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_postinc_07_bad()
{
    short data;
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,43,46,48,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_postinc_07_bad(){    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_postinc_07_bad()
CWE190_Integer_Overflow__short_rand_postinc_07_bad
{    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            short result = data;            printIntLine(result);        }
data++;
data++
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(6,9,0)
(18,21,0)
(25,21,0)
(22,18,0)
(20,10,0)
(23,10,0)
(2,23,0)
(19,6,0)
(21,16,0)
(15,21,0)
(28,21,0)
(14,3,0)
(27,10,0)
(6,1,0)
(6,19,0)
(7,1,0)
(11,10,0)
(15,23,0)
(18,23,0)
(4,8,0)
(15,1,0)
(17,23,0)
(24,8,0)
(5,3,0)
(1,6,0)
(12,25,0)
(18,1,0)
(13,18,0)
(25,18,0)
(29,15,0)
(9,6,0)
(1,0,0)
(2,17,1)
(22,15,1)
(6,19,1)
(1,6,1)
(9,7,1)
(8,4,1)
(23,2,1)
(15,1,1)
(14,1,1)
(25,12,1)
(5,14,1)
(25,18,1)
(24,23,1)
(26,3,1)
(29,3,1)
(7,8,1)
(4,24,1)
(3,5,1)
(12,18,1)
(18,1,1)
(15,23,1)
(18,23,1)
(14,8,1)
(15,29,1)
(18,13,1)
(26,25,1)
(6,9,1)
(13,22,1)
(15,3,2)
(7,8,2)
(1,6,2)
(25,3,2)
(6,9,2)
(6,19,2)
(18,1,2)
(25,18,2)
(15,23,2)
(15,1,2)
(12,3,2)
(18,3,2)
(13,3,2)
(1,8,2)
(18,23,2)
(29,3,2)
(22,3,2)
(9,8,2)
(6,8,2)
-----------------------------------
(0,)
(1,data = (short)
(2,0)
(3,staticFive==5)
(4,5)
(5,5)
(6,(short)
(7,data)
(8,staticFive==5)
(9,RAND32()
(10,)
(11,if(staticFive==5)
(12,result)
(13,data)
(14,staticFive)
(15,data++)
(16,)
(17,data)
(18,result = data)
(19,short)
(20,if(staticFive==5)
(21,)
(22,result)
(23,data = 0)
(24,staticFive)
(25,printIntLine(result)
(26,RET)
(27,data)
(28,result)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^