-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_max_multiply_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = CHAR_MAX;
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
54,55
54,56
56,57
56,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,32,33,35,39,41,45,46,50,51,55,57,61,62,66,68
-----computeFrom-----
18,19
18,20
23,24
23,25
29,30
29,31
48,49
48,50
59,60
59,61
-----guardedBy-----
50,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_34_bad(){    char data;    CWE190_Integer_Overflow__char_max_multiply_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_34_bad()
CWE190_Integer_Overflow__char_max_multiply_34_bad
{    char data;    CWE190_Integer_Overflow__char_max_multiply_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = CHAR_MAX;    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_max_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__char_max_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__char_max_multiply_34_unionType
CWE190_Integer_Overflow__char_max_multiply_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,14,0)
(15,33,0)
(7,33,0)
(25,2,0)
(16,2,0)
(21,15,0)
(13,19,0)
(26,33,0)
(23,27,0)
(27,0,0)
(22,11,0)
(6,32,0)
(12,7,0)
(8,0,0)
(9,22,0)
(2,0,0)
(29,22,0)
(32,11,0)
(20,27,0)
(11,27,0)
(19,0,0)
(17,7,0)
(33,14,0)
(1,11,0)
(28,31,0)
(4,30,0)
(7,11,0)
(31,19,0)
(33,7,0)
(10,32,0)
(30,31,0)
(5,19,0)
(34,0,0)
(3,30,0)
(15,14,0)
(31,0,0)
(11,22,0)
(3,4,1)
(31,28,1)
(24,32,1)
(28,30,1)
(19,5,1)
(5,13,1)
(16,25,1)
(11,22,1)
(10,11,1)
(29,9,1)
(2,16,1)
(21,33,1)
(6,10,1)
(32,6,1)
(31,19,1)
(15,21,1)
(24,15,1)
(7,12,1)
(26,32,1)
(4,19,1)
(1,31,1)
(30,3,1)
(7,11,1)
(32,11,1)
(15,33,1)
(17,26,1)
(22,29,1)
(13,2,1)
(12,17,1)
(9,1,1)
(33,7,1)
(33,32,2)
(12,32,2)
(21,32,2)
(7,11,2)
(32,11,2)
(15,33,2)
(17,32,2)
(15,32,2)
(7,32,2)
(33,7,2)
(11,22,2)
(26,32,2)
(31,19,2)
-----------------------------------
(0,)
(1,data)
(2,data = ' ')
(3,unionFirst)
(4,myUnion)
(5,CHAR_MAX)
(6,0)
(7,data * 2)
(8,data)
(9,myUnion)
(10,data)
(11,data = myUnion.unionSecond)
(12,2)
(13,data)
(14,)
(15,printHexCharLine(result)
(16,' ')
(17,data)
(18,result)
(19,data = CHAR_MAX)
(20,if(data > 0)
(21,result)
(22,myUnion.unionSecond)
(23,data)
(24,RET)
(25,data)
(26,result)
(27,)
(28,data)
(29,unionSecond)
(30,myUnion.unionFirst)
(31,myUnion.unionFirst = data)
(32,data > 0)
(33,result = data * 2)
(34,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^