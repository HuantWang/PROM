-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_postinc_13_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,38,41,43,46,50,52
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_postinc_13_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_postinc_13_bad()
CWE190_Integer_Overflow__char_max_postinc_13_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(3,28,0)
(17,3,0)
(8,24,0)
(11,3,0)
(17,12,0)
(5,11,0)
(25,22,0)
(11,12,0)
(4,26,0)
(14,11,0)
(1,22,0)
(12,13,0)
(10,3,0)
(11,26,0)
(16,24,0)
(6,13,0)
(23,12,0)
(2,3,0)
(26,18,0)
(4,11,0)
(19,17,0)
(21,26,0)
(17,26,0)
(27,12,0)
(7,13,0)
(0,13,0)
(9,4,0)
(11,12,1)
(8,22,1)
(8,3,1)
(4,9,1)
(27,23,1)
(10,2,1)
(15,24,1)
(1,12,1)
(2,22,1)
(5,14,1)
(19,24,1)
(14,17,1)
(25,1,1)
(17,3,1)
(17,12,1)
(22,25,1)
(17,19,1)
(3,10,1)
(15,4,1)
(16,8,1)
(9,11,1)
(4,11,1)
(11,5,1)
(24,16,1)
(12,27,1)
(11,3,1)
(2,22,2)
(3,22,2)
(10,22,2)
(19,24,2)
(17,12,2)
(4,11,2)
(14,24,2)
(4,24,2)
(11,24,2)
(17,24,2)
(17,3,2)
(5,24,2)
(11,12,2)
(9,24,2)
(11,3,2)
-----------------------------------
(0,data)
(1,GLOBAL_CONST_FIVE)
(2,data)
(3,data = CHAR_MAX)
(4,printHexCharLine(result)
(5,data)
(6,if(GLOBAL_CONST_FIVE==5)
(7,if(GLOBAL_CONST_FIVE==5)
(8,GLOBAL_CONST_FIVE)
(9,result)
(10,CHAR_MAX)
(11,result = data)
(12,data = \' \')
(13,)
(14,result)
(15,RET)
(16,5)
(17,data++)
(18,)
(19,data)
(20,data = ' ')
(21,result)
(22,GLOBAL_CONST_FIVE==5)
(23,data)
(24,GLOBAL_CONST_FIVE==5)
(25,5)
(26,)
(27,' ')
(28,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^