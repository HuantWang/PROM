-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,62,66,67,71,73
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_17_bad()
CWE190_Integer_Overflow__char_max_add_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,6,0)
(38,37,0)
(19,40,0)
(9,12,0)
(21,8,0)
(10,8,0)
(2,21,0)
(33,6,0)
(17,30,0)
(32,21,0)
(24,18,0)
(3,39,0)
(8,13,0)
(39,30,0)
(16,12,0)
(25,12,0)
(14,0,0)
(29,28,0)
(15,12,0)
(1,12,0)
(22,37,0)
(38,24,0)
(37,24,0)
(26,6,0)
(6,12,0)
(27,28,0)
(37,21,0)
(34,5,0)
(0,5,0)
(31,5,0)
(21,37,0)
(28,5,0)
(4,24,0)
(11,40,0)
(7,8,0)
(36,30,0)
(20,38,0)
(40,30,0)
(17,36,1)
(7,40,1)
(21,6,1)
(10,7,1)
(40,11,1)
(11,19,1)
(28,5,1)
(19,39,1)
(23,28,1)
(6,26,1)
(21,8,1)
(30,17,1)
(32,22,1)
(31,40,1)
(29,5,1)
(3,8,1)
(20,37,1)
(19,30,1)
(39,3,1)
(0,14,1)
(14,38,1)
(8,10,1)
(39,30,1)
(36,6,1)
(38,20,1)
(5,34,1)
(28,27,1)
(26,33,1)
(40,30,1)
(38,37,1)
(34,31,1)
(29,0,1)
(21,2,1)
(27,29,1)
(0,5,1)
(22,28,1)
(2,32,1)
(37,21,1)
(38,37,2)
(21,6,2)
(21,8,2)
(28,28,2)
(3,40,2)
(10,40,2)
(38,28,2)
(0,5,2)
(21,28,2)
(39,30,2)
(39,40,2)
(0,28,2)
(8,40,2)
(11,40,2)
(7,40,2)
(37,21,2)
(32,28,2)
(22,28,2)
(29,28,2)
(14,28,2)
(19,40,2)
(20,28,2)
(37,28,2)
(28,5,2)
(40,40,2)
(40,30,2)
(27,28,2)
(2,28,2)
-----------------------------------
(0,j++)
(1,data)
(2,1)
(3,i)
(4,result)
(5,j = 0)
(6,data = ' ')
(7,data)
(8,data = CHAR_MAX)
(9,for(i = 0; i < 1; i++)
(10,CHAR_MAX)
(11,1)
(12,)
(13,)
(14,j)
(15,for(j = 0; j < 1; j++)
(16,j)
(17,0)
(18,)
(19,i)
(20,result)
(21,data + 1)
(22,result)
(23,RET)
(24,)
(25,i)
(26,' ')
(27,1)
(28,j < 1)
(29,j)
(30,i = 0)
(31,j)
(32,data)
(33,data)
(34,0)
(35,data = \' \')
(36,i)
(37,result = data + 1)
(38,printHexCharLine(result)
(39,i++)
(40,i < 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^