-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,48,52,54,58,59,63,65,66,67,71,72,73
-----computeFrom-----
12,13
12,14
45,46
45,47
56,57
56,58
-----guardedBy-----
47,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_15_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(14,32,0)
(25,31,0)
(33,30,0)
(40,21,0)
(32,14,0)
(5,1,0)
(2,23,0)
(23,17,0)
(6,8,0)
(25,32,0)
(41,36,0)
(11,36,0)
(9,14,0)
(21,30,0)
(16,30,0)
(7,12,0)
(24,1,0)
(13,17,0)
(12,7,0)
(12,17,0)
(29,17,0)
(7,21,0)
(10,7,0)
(27,21,0)
(28,36,0)
(3,36,0)
(19,30,0)
(37,14,0)
(26,12,0)
(8,36,0)
(14,21,0)
(4,36,0)
(32,31,0)
(0,31,0)
(35,25,0)
(18,12,0)
(1,21,0)
(38,32,0)
(39,17,0)
(34,17,0)
(12,7,1)
(18,26,1)
(4,8,1)
(21,40,1)
(6,20,1)
(2,22,1)
(5,24,1)
(38,1,1)
(14,21,1)
(1,21,1)
(8,6,1)
(40,27,1)
(1,5,1)
(25,32,1)
(13,12,1)
(14,37,1)
(26,22,1)
(3,1,1)
(20,29,1)
(24,20,1)
(15,4,1)
(20,13,1)
(7,21,1)
(23,2,1)
(22,21,1)
(10,18,1)
(29,23,1)
(15,3,1)
(3,25,1)
(32,14,1)
(35,32,1)
(25,35,1)
(37,9,1)
(7,10,1)
(9,38,1)
(38,1,2)
(35,1,2)
(24,20,2)
(1,21,2)
(12,22,2)
(8,20,2)
(14,1,2)
(13,22,2)
(7,22,2)
(2,22,2)
(18,22,2)
(25,1,2)
(1,20,2)
(23,22,2)
(14,21,2)
(10,22,2)
(7,21,2)
(32,14,2)
(9,1,2)
(37,1,2)
(26,22,2)
(32,1,2)
(5,20,2)
(29,22,2)
(12,7,2)
(4,20,2)
(25,32,2)
(3,20,2)
(6,20,2)
-----------------------------------
(0,result)
(1,data > 0)
(2,"Benign, fixed string")
(3,break;)
(4,break;)
(5,0)
(6,"Benign, fixed string")
(7,&data)
(8,printLine("Benign, fixed string")
(9,data)
(10,data)
(11,case 7:)
(12,fscanf (stdin, "%hd", &data)
(13,break;)
(14,data * 2)
(15,RET)
(16,switch(7)
(17,)
(18,"%hd")
(19,switch(6)
(20,7)
(21,data = 0)
(22,6)
(23,printLine("Benign, fixed string")
(24,data)
(25,printIntLine(result)
(26,stdin)
(27,data)
(28,if(data > 0)
(29,break;)
(30,)
(31,)
(32,result = data * 2)
(33,data)
(34,default:)
(35,result)
(36,)
(37,2)
(38,result)
(39,case 6:)
(40,0)
(41,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^