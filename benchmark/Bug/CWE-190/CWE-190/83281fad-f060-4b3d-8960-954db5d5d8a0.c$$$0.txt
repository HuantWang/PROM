-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_rand_square_01_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use a random value */
    data = (int64_t)RAND64();
    {
        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
        int64_t result = data * data;
        printLongLongLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
22,24
23,24
26,27
27,28
29,30
29,31
30,31
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,9,11,15,16,20,24,25,28,33,35,39,41,45,47
-----computeFrom-----
13,14
13,15
18,19
18,20
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_rand_square_01_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }}
void
CWE190_Integer_Overflow__int64_t_rand_square_01_bad()
CWE190_Integer_Overflow__int64_t_rand_square_01_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use a random value */    data = (int64_t)RAND64();    {        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
data = (int64_t)RAND64();
data = (int64_t)RAND64()
data
data
(int64_t)RAND64()
int64_t
int64_t
int64_t

RAND64()
RAND64
RAND64
{        /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */        int64_t result = data * data;        printLongLongLine(result);    }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(2,7,0)
(17,4,0)
(6,15,0)
(10,15,0)
(4,0,0)
(13,5,0)
(5,4,0)
(16,11,0)
(13,11,0)
(1,5,0)
(14,0,0)
(8,0,0)
(0,4,0)
(4,15,0)
(9,5,0)
(5,13,0)
(0,8,0)
(0,14,0)
(7,13,0)
(12,13,0)
(7,11,0)
(11,15,0)
(9,1,1)
(1,12,1)
(4,0,1)
(5,4,1)
(7,13,1)
(13,5,1)
(17,6,1)
(0,8,1)
(5,9,1)
(0,14,1)
(7,2,1)
(2,13,1)
(3,7,1)
(8,17,1)
(12,4,1)
(0,8,2)
(4,0,2)
(7,13,2)
(5,4,2)
(0,14,2)
(13,5,2)
-----------------------------------
(0,(int64_t)
(1,data)
(2,result)
(3,RET)
(4,data = (int64_t)
(5,data * data)
(6,L)
(7,printLongLongLine(result)
(8,RAND64()
(9,data)
(10,data)
(11,)
(12,result)
(13,result = data * data)
(14,int64_t)
(15,)
(16,result)
(17,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^