-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_preinc_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,40,43,45,48,52,54
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_preinc_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_preinc_08_bad()
CWE190_Integer_Overflow__char_fscanf_preinc_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,14,0)
(10,13,0)
(25,8,0)
(0,9,0)
(9,8,0)
(7,5,0)
(20,4,0)
(19,18,0)
(5,18,0)
(22,13,0)
(24,14,0)
(11,13,0)
(8,16,0)
(6,14,0)
(3,14,0)
(13,15,0)
(2,5,0)
(12,10,0)
(10,18,0)
(9,5,0)
(4,8,0)
(5,8,0)
(4,18,0)
(13,10,0)
(23,18,0)
(20,17,1)
(9,0,1)
(2,7,1)
(5,2,1)
(21,9,1)
(0,5,1)
(10,18,1)
(9,5,1)
(23,19,1)
(17,13,1)
(17,1,1)
(13,10,1)
(21,17,1)
(5,18,1)
(18,23,1)
(11,22,1)
(4,20,1)
(1,18,1)
(4,18,1)
(7,4,1)
(22,1,1)
(12,11,1)
(10,12,1)
(0,17,2)
(13,10,2)
(12,1,2)
(4,18,2)
(5,17,2)
(20,17,2)
(10,18,2)
(2,17,2)
(13,1,2)
(9,5,2)
(4,17,2)
(9,17,2)
(22,1,2)
(11,1,2)
(7,17,2)
(5,18,2)
(10,1,2)
-----------------------------------
(0,result)
(1,staticReturnsTrue()
(2,data)
(3,if(staticReturnsTrue()
(4,++data)
(5,result = data)
(6,data)
(7,result)
(8,)
(9,printHexCharLine(result)
(10,&data)
(11,"%c")
(12,data)
(13,fscanf (stdin, "%c", &data)
(14,)
(15,)
(16,)
(17,staticReturnsTrue()
(18,data = \\\' \\\')
(19,data)
(20,data)
(21,RET)
(22,stdin)
(23,\\\' \\\')
(24,if(staticReturnsTrue()
(25,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^