-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_16_bad()
{
    unsigned int data;
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
28,29
28,30
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,27,32,33,37,39,43,44,48,50,51
-----computeFrom-----
12,13
12,14
20,21
20,22
30,31
30,32
41,42
41,43
-----guardedBy-----
32,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_16_bad(){    unsigned int data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_16_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_16_bad
{    unsigned int data;    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;        break;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
break;
-----joern-----
(29,5,0)
(23,24,0)
(12,26,0)
(15,13,0)
(4,14,0)
(27,4,0)
(17,5,0)
(6,26,0)
(27,14,0)
(4,24,0)
(20,13,0)
(24,5,0)
(9,14,0)
(28,29,0)
(18,27,0)
(19,12,0)
(29,12,0)
(2,5,0)
(8,29,0)
(0,4,0)
(25,24,0)
(1,12,0)
(24,4,0)
(5,3,0)
(21,26,0)
(24,12,0)
(16,3,0)
(22,26,0)
(27,4,1)
(19,1,1)
(24,23,1)
(24,12,1)
(8,11,1)
(27,18,1)
(7,12,1)
(0,29,1)
(11,7,1)
(11,16,1)
(2,7,1)
(29,12,1)
(18,4,1)
(10,11,1)
(24,5,1)
(20,29,1)
(10,20,1)
(28,8,1)
(5,17,1)
(17,2,1)
(12,19,1)
(25,0,1)
(29,28,1)
(4,24,1)
(16,5,1)
(29,5,1)
(20,27,1)
(23,25,1)
(4,29,2)
(29,12,2)
(29,11,2)
(28,11,2)
(24,29,2)
(5,7,2)
(29,5,2)
(27,4,2)
(4,24,2)
(8,11,2)
(17,7,2)
(27,29,2)
(24,12,2)
(24,5,2)
(25,29,2)
(0,29,2)
(16,7,2)
(2,7,2)
(18,29,2)
(20,11,2)
(23,29,2)
-----------------------------------
(0,result)
(1,data)
(2,data)
(3,)
(4,result = data * 2)
(5,data = UINT_MAX)
(6,while(1)
(7,1)
(8,data)
(9,result)
(10,RET)
(11,1)
(12,data = 0)
(13,)
(14,)
(15,if(data > 0)
(16,break;)
(17,UINT_MAX)
(18,result)
(19,0)
(20,break;)
(21,data)
(22,while(1)
(23,2)
(24,data * 2)
(25,data)
(26,)
(27,printUnsignedLine(result)
(28,0)
(29,data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^