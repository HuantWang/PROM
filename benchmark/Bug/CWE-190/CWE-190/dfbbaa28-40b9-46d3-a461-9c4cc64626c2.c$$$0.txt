-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
31,32
31,33
33,34
33,35
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,30,32,37,39,43,44,48,50,51
-----computeFrom-----
12,13
12,14
20,21
20,22
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_rand_add_16_bad()
CWE190_Integer_Overflow__char_rand_add_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
while(1)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }        break;    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(27,23,0)
(7,4,0)
(11,13,0)
(19,12,0)
(5,12,0)
(2,23,0)
(4,7,0)
(23,4,0)
(20,7,0)
(6,5,0)
(17,7,0)
(23,5,0)
(10,1,0)
(7,20,0)
(18,5,0)
(8,12,0)
(23,10,0)
(25,10,0)
(10,23,0)
(13,1,0)
(9,22,0)
(13,10,0)
(7,17,0)
(0,4,0)
(21,1,0)
(16,15,0)
(4,22,0)
(28,12,0)
(1,15,0)
(4,7,1)
(3,9,1)
(23,27,1)
(14,3,1)
(26,5,1)
(3,26,1)
(23,4,1)
(6,18,1)
(0,26,1)
(25,3,1)
(7,20,1)
(27,2,1)
(5,6,1)
(10,23,1)
(23,5,1)
(7,17,1)
(20,0,1)
(14,16,1)
(13,11,1)
(16,13,1)
(2,25,1)
(9,4,1)
(11,10,1)
(13,10,1)
(9,26,2)
(20,26,2)
(4,26,2)
(27,3,2)
(23,5,2)
(7,17,2)
(25,3,2)
(16,3,2)
(23,4,2)
(13,3,2)
(0,26,2)
(11,3,2)
(7,26,2)
(13,10,2)
(4,7,2)
(10,23,2)
(10,3,2)
(2,3,2)
(7,20,2)
(23,3,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,1)
(4,data = (char)
(5,data = ' ')
(6,' ')
(7,(char)
(8,data)
(9,break;)
(10,result = data + 1)
(11,result)
(12,)
(13,printHexCharLine(result)
(14,RET)
(15,)
(16,break;)
(17,char)
(18,data)
(19,while(1)
(20,RAND32()
(21,result)
(22,)
(23,data + 1)
(24,data = \' \')
(25,result)
(26,1)
(27,1)
(28,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^