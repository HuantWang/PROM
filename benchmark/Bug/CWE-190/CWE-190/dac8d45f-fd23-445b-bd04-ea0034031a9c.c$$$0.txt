-----label-----
1
-----code-----
static void badSink()
{
    char data = CWE190_Integer_Overflow__char_rand_square_45_badData;
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
16,17
16,18
18,19
18,20
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
-----nextToken-----
2,4,8,10,13,17,19,23,25,29,31
-----computeFrom-----
21,22
21,23
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    char data = CWE190_Integer_Overflow__char_rand_square_45_badData;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
static void
badSink()
badSink
{    char data = CWE190_Integer_Overflow__char_rand_square_45_badData;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data = CWE190_Integer_Overflow__char_rand_square_45_badData;
char data = CWE190_Integer_Overflow__char_rand_square_45_badData;
char
data = CWE190_Integer_Overflow__char_rand_square_45_badData
data
= CWE190_Integer_Overflow__char_rand_square_45_badData
CWE190_Integer_Overflow__char_rand_square_45_badData
CWE190_Integer_Overflow__char_rand_square_45_badData
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,14,0)
(9,3,0)
(5,8,0)
(10,4,0)
(12,14,0)
(13,4,0)
(1,7,0)
(14,3,0)
(6,3,0)
(2,0,0)
(14,0,0)
(4,7,0)
(3,4,0)
(0,7,0)
(3,14,0)
(8,0,0)
(12,4,1)
(5,14,1)
(11,8,1)
(8,5,1)
(3,4,1)
(4,13,1)
(3,9,1)
(9,6,1)
(8,14,1)
(6,12,1)
(13,10,1)
(14,3,1)
(3,4,2)
(14,3,2)
(8,14,2)
-----------------------------------
(0,)
(1,data)
(2,result)
(3,data * data)
(4,data = CWE190_Integer_Overflow__char_rand_square_45_badData)
(5,result)
(6,data)
(7,)
(8,printHexCharLine(result)
(9,data)
(10,data)
(11,RET)
(12,result)
(13,CWE190_Integer_Overflow__char_rand_square_45_badData)
(14,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^