-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_04_bad()
{
    unsigned int data;
    data = 0;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(STATIC_CONST_TRUE)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,39,43,45,49,50,54,56
-----computeFrom-----
12,13
12,14
21,22
21,23
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_04_bad(){    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_04_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_04_bad
{    unsigned int data;    data = 0;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(STATIC_CONST_TRUE)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(0,8,0)
(24,14,0)
(15,14,0)
(27,10,0)
(22,23,0)
(21,23,0)
(18,0,0)
(3,10,0)
(5,4,0)
(10,28,0)
(11,27,0)
(26,5,0)
(14,23,0)
(5,8,0)
(13,8,0)
(9,8,0)
(25,9,0)
(10,0,0)
(4,5,0)
(5,26,0)
(8,20,0)
(29,16,0)
(17,9,0)
(6,23,0)
(8,5,0)
(0,14,0)
(1,28,0)
(9,14,0)
(0,10,0)
(2,0,0)
(27,28,0)
(0,14,1)
(19,12,1)
(0,18,1)
(3,9,1)
(4,13,1)
(27,10,1)
(0,8,1)
(12,8,1)
(17,12,1)
(12,7,1)
(10,0,1)
(9,8,1)
(25,17,1)
(14,15,1)
(27,11,1)
(19,9,1)
(7,14,1)
(13,7,1)
(5,26,1)
(9,25,1)
(19,27,1)
(11,10,1)
(18,2,1)
(2,3,1)
(9,14,1)
(8,5,1)
(5,4,1)
(15,24,1)
(0,14,2)
(18,9,2)
(5,4,2)
(2,9,2)
(13,7,2)
(10,0,2)
(11,9,2)
(5,7,2)
(27,9,2)
(17,12,2)
(8,5,2)
(25,12,2)
(3,9,2)
(9,8,2)
(8,7,2)
(5,26,2)
(10,9,2)
(27,10,2)
(0,9,2)
(9,14,2)
(9,12,2)
(4,7,2)
(0,8,2)
-----------------------------------
(0,data * 2)
(1,result)
(2,data)
(3,result)
(4,RAND32()
(5,(unsigned int)
(6,data)
(7,STATIC_CONST_TRUE)
(8,data = (unsigned int)
(9,data > 0)
(10,result = data * 2)
(11,result)
(12,STATIC_CONST_TRUE)
(13,data)
(14,data = 0)
(15,0)
(16,)
(17,data)
(18,2)
(19,RET)
(20,)
(21,if(STATIC_CONST_TRUE)
(22,if(STATIC_CONST_TRUE)
(23,)
(24,data)
(25,0)
(26,unsigned int)
(27,printUnsignedLine(result)
(28,)
(29,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^