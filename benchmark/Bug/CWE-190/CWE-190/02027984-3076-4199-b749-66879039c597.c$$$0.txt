-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_67b_badSink(CWE190_Integer_Overflow__char_rand_square_67_structType myStruct)
{
    char data = myStruct.structFirst;
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
23,24
23,25
25,26
25,27
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
-----nextToken-----
2,4,7,9,13,15,19,20,24,26,30,32,36,38
-----computeFrom-----
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_67b_badSink(CWE190_Integer_Overflow__char_rand_square_67_structType myStruct){    char data = myStruct.structFirst;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_square_67b_badSink(CWE190_Integer_Overflow__char_rand_square_67_structType myStruct)
CWE190_Integer_Overflow__char_rand_square_67b_badSink
CWE190_Integer_Overflow__char_rand_square_67_structType myStruct
CWE190_Integer_Overflow__char_rand_square_67_structType
CWE190_Integer_Overflow__char_rand_square_67_structType
myStruct
myStruct
{    char data = myStruct.structFirst;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data = myStruct.structFirst;
char data = myStruct.structFirst;
char
data = myStruct.structFirst
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(13,14,0)
(3,2,0)
(6,1,0)
(17,13,0)
(17,3,0)
(11,16,0)
(5,17,0)
(15,14,0)
(9,14,0)
(1,16,0)
(13,3,0)
(14,16,0)
(12,13,0)
(16,1,0)
(14,13,0)
(10,3,0)
(7,2,0)
(16,2,0)
(0,1,0)
(1,4,0)
(8,17,1)
(6,0,1)
(17,13,1)
(14,15,1)
(9,12,1)
(14,16,1)
(0,11,1)
(5,13,1)
(17,5,1)
(12,16,1)
(15,9,1)
(1,6,1)
(16,1,1)
(1,4,1)
(13,14,1)
(14,16,2)
(16,1,2)
(17,13,2)
(1,4,2)
(13,14,2)
-----------------------------------
(0,myStruct)
(1,myStruct.structFirst)
(2,)
(3,)
(4,CWE190_Integer_Overflow__char_rand_square_67_structType myStruct)
(5,result)
(6,structFirst)
(7,data)
(8,RET)
(9,data)
(10,result)
(11,data)
(12,result)
(13,result = data * data)
(14,data * data)
(15,data)
(16,data = myStruct.structFirst)
(17,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^