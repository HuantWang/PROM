-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_05_bad()
{
    char data;
    data = ' ';
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(staticTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_05_bad(){    char data;    data = ' ';    if(staticTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_05_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_05_bad
{    char data;    data = ' ';    if(staticTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
staticTrue
staticTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(9,22,0)
(24,13,0)
(3,13,0)
(16,0,0)
(6,2,0)
(27,13,0)
(12,21,0)
(7,24,0)
(10,24,0)
(23,6,0)
(20,27,0)
(6,21,0)
(8,26,0)
(17,7,0)
(4,22,0)
(21,6,0)
(19,27,0)
(5,24,0)
(24,7,0)
(7,0,0)
(28,16,0)
(21,13,0)
(14,6,0)
(13,22,0)
(1,22,0)
(25,0,0)
(29,13,0)
(16,7,0)
(24,13,1)
(17,27,1)
(24,10,1)
(28,7,1)
(23,14,1)
(27,19,1)
(13,29,1)
(21,13,1)
(18,13,1)
(12,23,1)
(11,18,1)
(19,20,1)
(27,13,1)
(16,28,1)
(21,12,1)
(7,24,1)
(16,7,1)
(11,6,1)
(15,16,1)
(6,21,1)
(14,18,1)
(5,17,1)
(10,5,1)
(15,27,1)
(29,3,1)
(15,11,1)
(20,11,1)
(7,24,2)
(19,11,2)
(23,18,2)
(24,27,2)
(27,13,2)
(5,27,2)
(10,27,2)
(28,27,2)
(24,13,2)
(27,11,2)
(21,13,2)
(16,7,2)
(14,18,2)
(20,11,2)
(12,18,2)
(16,27,2)
(7,27,2)
(17,27,2)
(6,21,2)
(21,18,2)
(6,18,2)
-----------------------------------
(0,)
(1,data)
(2,)
(3,data)
(4,if(staticTrue)
(5,data)
(6,fscanf (stdin, "%c", &data)
(7,result = data * 2)
(8,if(data > 0)
(9,if(staticTrue)
(10,2)
(11,staticTrue)
(12,data)
(13,data = \\\' \\\')
(14,stdin)
(15,RET)
(16,printHexCharLine(result)
(17,result)
(18,staticTrue)
(19,0)
(20,data)
(21,&data)
(22,)
(23,"%c")
(24,data * 2)
(25,result)
(26,)
(27,data > 0)
(28,result)
(29,\\\' \\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^