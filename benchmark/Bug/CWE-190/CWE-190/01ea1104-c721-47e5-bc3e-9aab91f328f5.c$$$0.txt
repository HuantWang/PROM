-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
28,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
28,29
28,30
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_03_bad()
CWE190_Integer_Overflow__int_max_square_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
5==5
5
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(1,15,0)
(6,15,0)
(11,12,0)
(22,26,0)
(11,26,0)
(0,11,0)
(25,26,0)
(9,4,0)
(8,10,0)
(12,17,0)
(2,9,0)
(19,6,0)
(13,5,0)
(26,9,0)
(18,5,0)
(0,12,0)
(7,15,0)
(24,11,0)
(26,6,0)
(20,10,0)
(21,15,0)
(23,9,0)
(26,11,0)
(16,6,0)
(14,12,0)
(27,0,0)
(27,11,1)
(20,5,1)
(26,9,1)
(25,24,1)
(3,10,1)
(23,5,1)
(10,8,1)
(18,6,1)
(8,20,1)
(2,23,1)
(26,6,1)
(20,9,1)
(3,0,1)
(11,26,1)
(19,16,1)
(22,25,1)
(0,11,1)
(0,27,1)
(5,13,1)
(26,22,1)
(6,19,1)
(24,10,1)
(13,18,1)
(9,2,1)
(27,10,2)
(26,9,2)
(0,10,2)
(22,10,2)
(26,10,2)
(24,10,2)
(23,5,2)
(26,6,2)
(11,10,2)
(25,10,2)
(9,5,2)
(0,11,2)
(11,26,2)
(2,5,2)
-----------------------------------
(0,printIntLine(result)
(1,if(5==5)
(2,INT_MAX)
(3,RET)
(4,)
(5,5==5)
(6,data = 0)
(7,if(5==5)
(8,5)
(9,data = INT_MAX)
(10,5==5)
(11,result = data * data)
(12,)
(13,5)
(14,result)
(15,)
(16,data)
(17,)
(18,5)
(19,0)
(20,5)
(21,data)
(22,data)
(23,data)
(24,result)
(25,data)
(26,data * data)
(27,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^