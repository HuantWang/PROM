-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        char result = data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
44,47
45,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,48,51,53,56,60,62,63,64,68,69,70
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_15_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        char result = data;        printHexCharLine(result);    }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(31,0,0)
(1,8,0)
(21,34,0)
(37,35,0)
(14,34,0)
(10,28,0)
(33,0,0)
(4,3,0)
(5,0,0)
(19,5,0)
(23,8,0)
(15,35,0)
(27,0,0)
(2,8,0)
(29,32,0)
(5,35,0)
(32,3,0)
(16,12,0)
(13,16,0)
(36,8,0)
(0,34,0)
(20,12,0)
(33,12,0)
(6,3,0)
(7,28,0)
(12,3,0)
(16,28,0)
(18,34,0)
(28,12,0)
(35,5,0)
(26,8,0)
(28,0,0)
(24,3,0)
(22,3,0)
(25,33,0)
(35,8,0)
(17,2,0)
(0,31,1)
(7,33,1)
(24,16,1)
(2,17,1)
(13,28,1)
(37,30,1)
(26,2,1)
(33,25,1)
(10,7,1)
(9,24,1)
(16,28,1)
(30,0,1)
(11,26,1)
(11,36,1)
(33,0,1)
(5,0,1)
(5,19,1)
(16,13,1)
(35,5,1)
(6,32,1)
(31,27,1)
(36,35,1)
(32,29,1)
(17,30,1)
(15,37,1)
(25,11,1)
(9,6,1)
(19,15,1)
(29,11,1)
(28,0,1)
(28,10,1)
(33,11,2)
(28,11,2)
(28,0,2)
(35,5,2)
(16,11,2)
(37,30,2)
(26,30,2)
(6,11,2)
(15,30,2)
(25,11,2)
(33,0,2)
(19,30,2)
(29,11,2)
(36,30,2)
(16,28,2)
(10,11,2)
(35,30,2)
(17,30,2)
(2,30,2)
(5,0,2)
(32,11,2)
(5,30,2)
(7,11,2)
(13,11,2)
(24,11,2)
-----------------------------------
(0,data = \\\' \\\')
(1,default:)
(2,printLine("Benign, fixed string")
(3,)
(4,case 7:)
(5,&data)
(6,break;)
(7,result)
(8,)
(9,RET)
(10,data)
(11,7)
(12,)
(13,result)
(14,switch(7)
(15,"%c")
(16,printHexCharLine(result)
(17,"Benign, fixed string")
(18,switch(6)
(19,data)
(20,result)
(21,data)
(22,default:)
(23,case 6:)
(24,break;)
(25,data)
(26,break;)
(27,data)
(28,result = data)
(29,"Benign, fixed string")
(30,6)
(31,\\\' \\\')
(32,printLine("Benign, fixed string")
(33,data++)
(34,)
(35,fscanf (stdin, "%c", &data)
(36,break;)
(37,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^