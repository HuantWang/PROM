-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_17_bad()
{
    int i,j;
    char data;
    data = ' ';
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,43,44,47,52,53,56,57,60,65,67,71,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
50,51
50,52
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_17_bad(){    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_17_bad()
CWE190_Integer_Overflow__char_rand_add_17_bad
{    int i,j;    char data;    data = ' ';    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(23,38,0)
(29,11,0)
(42,27,0)
(26,24,0)
(3,27,0)
(6,31,0)
(28,4,0)
(33,27,0)
(41,27,0)
(9,5,0)
(21,16,0)
(24,38,0)
(34,31,0)
(2,17,0)
(10,0,0)
(22,4,0)
(14,16,0)
(37,38,0)
(39,15,0)
(11,29,0)
(11,39,0)
(31,4,0)
(4,31,0)
(5,38,0)
(0,27,0)
(36,14,0)
(34,40,0)
(12,11,0)
(7,40,0)
(4,0,0)
(17,16,0)
(19,0,0)
(32,34,0)
(40,8,0)
(39,11,0)
(35,27,0)
(20,16,0)
(25,24,0)
(13,39,0)
(4,39,0)
(1,14,0)
(31,40,0)
(11,12,0)
(10,19,1)
(34,32,1)
(0,10,1)
(34,31,1)
(20,0,1)
(25,5,1)
(36,17,1)
(5,9,1)
(11,12,1)
(5,38,1)
(32,31,1)
(22,28,1)
(4,39,1)
(14,1,1)
(9,34,1)
(17,16,1)
(17,2,1)
(36,16,1)
(1,36,1)
(24,26,1)
(18,24,1)
(16,21,1)
(37,23,1)
(6,24,1)
(11,29,1)
(28,6,1)
(14,16,1)
(26,25,1)
(2,39,1)
(25,38,1)
(12,13,1)
(31,4,1)
(24,38,1)
(38,37,1)
(39,11,1)
(21,20,1)
(4,22,1)
(23,14,1)
(4,0,1)
(13,14,1)
(32,24,2)
(14,16,2)
(4,24,2)
(4,39,2)
(11,14,2)
(26,24,2)
(5,24,2)
(9,24,2)
(28,24,2)
(39,11,2)
(13,14,2)
(17,14,2)
(11,29,2)
(5,38,2)
(6,24,2)
(31,4,2)
(22,24,2)
(39,14,2)
(25,24,2)
(11,12,2)
(17,16,2)
(4,0,2)
(34,31,2)
(2,14,2)
(24,24,2)
(12,14,2)
(34,24,2)
(14,14,2)
(31,24,2)
(24,38,2)
(36,14,2)
(1,14,2)
-----------------------------------
(0,data = ' ')
(1,1)
(2,i)
(3,for(i = 0; i < 1; i++)
(4,data + 1)
(5,j++)
(6,result)
(7,result)
(8,)
(9,j)
(10,' ')
(11,(char)
(12,RAND32()
(13,data)
(14,i < 1)
(15,)
(16,i = 0)
(17,i++)
(18,RET)
(19,data)
(20,i)
(21,0)
(22,1)
(23,j)
(24,j < 1)
(25,j)
(26,1)
(27,)
(28,data)
(29,char)
(30,data = \' \')
(31,result = data + 1)
(32,result)
(33,for(j = 0; j < 1; j++)
(34,printHexCharLine(result)
(35,data)
(36,i)
(37,0)
(38,j = 0)
(39,data = (char)
(40,)
(41,j)
(42,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^