-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_multiply_12_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
    else
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* FIX: Add a check to prevent an overflow from occurring */
            if (data < (INT_MAX/2))
            {
                int result = data * 2;
                printIntLine(result);
            }
            else
            {
                printLine("data value is too large to perform arithmetic safely.");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
63,65
64,65
67,68
68,69
68,70
68,71
69,70
69,71
70,71
72,73
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
81,82
81,83
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
92,93
94,95
95,96
96,97
96,98
97,98
-----nextToken-----
2,4,8,10,14,15,19,24,27,32,33,37,42,43,47,49,53,54,58,60,65,66,71,75,76,80,82,86,87,91,93,98,99
-----computeFrom-----
12,13
12,14
22,23
22,24
30,31
30,32
40,41
40,42
51,52
51,53
63,64
63,65
69,70
69,71
73,74
73,75
84,85
84,86
-----guardedBy-----
42,53
65,86
71,86
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_multiply_12_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
void
CWE190_Integer_Overflow__int_rand_multiply_12_bad()
CWE190_Integer_Overflow__int_rand_multiply_12_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an integer overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }    else    {        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{        if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
data > 0
data
data
0
{            /* FIX: Add a check to prevent an overflow from occurring */            if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }        }
if (data < (INT_MAX/2))            {                int result = data * 2;                printIntLine(result);            }            else            {                printLine("data value is too large to perform arithmetic safely.");            }
data < (INT_MAX/2)
data
data
(INT_MAX/2)
INT_MAX/2
INT_MAX
INT_MAX
2
{                int result = data * 2;                printIntLine(result);            }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
{                printLine("data value is too large to perform arithmetic safely.");            }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(8,25,0)
(51,35,0)
(22,47,0)
(25,45,0)
(4,12,0)
(12,10,0)
(23,24,0)
(42,22,0)
(0,41,0)
(1,50,0)
(23,48,0)
(47,20,0)
(24,23,0)
(28,33,0)
(40,34,0)
(43,41,0)
(18,41,0)
(44,8,0)
(33,47,0)
(49,4,0)
(22,12,0)
(13,23,0)
(15,45,0)
(45,11,0)
(35,12,0)
(35,45,0)
(33,20,0)
(54,23,0)
(27,24,0)
(19,14,0)
(25,12,0)
(55,8,0)
(6,47,0)
(36,18,0)
(7,45,0)
(21,12,0)
(9,22,0)
(24,45,0)
(37,4,0)
(12,21,0)
(2,48,0)
(47,22,0)
(24,12,0)
(52,35,0)
(38,20,0)
(32,39,0)
(25,8,0)
(29,13,0)
(4,45,0)
(13,48,0)
(16,18,0)
(22,45,0)
(31,24,0)
(5,12,0)
(30,25,0)
(53,41,0)
(46,32,0)
(25,12,1)
(23,24,1)
(45,15,1)
(44,30,1)
(12,21,1)
(8,55,1)
(54,35,1)
(18,36,1)
(4,45,1)
(17,32,1)
(33,47,1)
(3,18,1)
(13,23,1)
(32,46,1)
(55,44,1)
(33,28,1)
(26,12,1)
(22,45,1)
(17,35,1)
(17,33,1)
(37,49,1)
(35,12,1)
(25,45,1)
(17,13,1)
(46,25,1)
(24,45,1)
(52,26,1)
(4,37,1)
(49,26,1)
(5,3,1)
(29,23,1)
(15,7,1)
(7,3,1)
(27,54,1)
(47,22,1)
(17,4,1)
(28,47,1)
(42,6,1)
(9,42,1)
(25,8,1)
(24,31,1)
(31,27,1)
(35,45,1)
(30,4,1)
(6,25,1)
(35,51,1)
(24,12,1)
(4,12,1)
(13,29,1)
(21,5,1)
(51,52,1)
(26,45,1)
(22,12,1)
(36,16,1)
(22,9,1)
(5,3,2)
(23,24,2)
(15,3,2)
(22,12,2)
(21,3,2)
(45,3,2)
(23,35,2)
(12,3,2)
(8,4,2)
(47,25,2)
(25,8,2)
(7,3,2)
(4,26,2)
(47,22,2)
(55,4,2)
(13,35,2)
(27,35,2)
(35,12,2)
(30,4,2)
(44,4,2)
(31,35,2)
(49,26,2)
(33,25,2)
(29,35,2)
(46,25,2)
(28,25,2)
(24,35,2)
(33,47,2)
(4,12,2)
(4,45,2)
(22,45,2)
(25,12,2)
(24,12,2)
(9,25,2)
(52,26,2)
(24,45,2)
(25,45,2)
(35,26,2)
(13,23,2)
(42,25,2)
(37,26,2)
(51,26,2)
(6,25,2)
(54,35,2)
(12,21,2)
(35,45,2)
(32,25,2)
(22,25,2)
(25,4,2)
-----------------------------------
(0,data)
(1,if(data > 0)
(2,result)
(3,globalReturnsTrueOrFalse()
(4,data > 0)
(5,data)
(6,result)
(7,data)
(8,INT_MAX/2)
(9,2)
(10,)
(11,)
(12,data = RAND32()
(13,printIntLine(result)
(14,)
(15,2)
(16,data)
(17,RET)
(18,data = 0)
(19,if(data > 0)
(20,)
(21,RAND32()
(22,data * 2)
(23,result = data * 2)
(24,data * 2)
(25,data < (INT_MAX/2)
(26,globalReturnsTrueOrFalse()
(27,data)
(28,result)
(29,result)
(30,data)
(31,2)
(32,printLine("data value is too large to perform arithmetic safely.")
(33,printIntLine(result)
(34,)
(35,data > 0)
(36,0)
(37,0)
(38,result)
(39,)
(40,if (data < (INT_MAX/2)
(41,)
(42,data)
(43,if(globalReturnsTrueOrFalse()
(44,INT_MAX)
(45,data = 2)
(46,"data value is too large to perform arithmetic safely.")
(47,result = data * 2)
(48,)
(49,data)
(50,)
(51,0)
(52,data)
(53,if(globalReturnsTrueOrFalse()
(54,result)
(55,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^