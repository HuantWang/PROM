-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_multiply_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
28,29
28,30
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,27,32,33,37,39,43,44,48,50,51
-----computeFrom-----
12,13
12,14
20,21
20,22
30,31
30,32
41,42
41,43
-----guardedBy-----
32,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_multiply_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_max_multiply_16_bad()
CWE190_Integer_Overflow__int_max_multiply_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(11,1,0)
(27,13,0)
(15,17,0)
(25,26,0)
(15,23,0)
(19,13,0)
(0,26,0)
(10,13,0)
(7,26,0)
(10,19,0)
(23,26,0)
(18,17,0)
(29,23,0)
(22,1,0)
(17,9,0)
(18,23,0)
(19,18,0)
(12,15,0)
(3,18,0)
(20,18,0)
(5,15,0)
(8,17,0)
(6,17,0)
(4,10,0)
(16,9,0)
(24,23,0)
(18,19,0)
(2,19,0)
(11,15,1)
(21,14,1)
(20,3,1)
(4,19,1)
(10,4,1)
(28,21,1)
(15,17,1)
(12,21,1)
(29,24,1)
(21,16,1)
(14,23,1)
(11,10,1)
(28,11,1)
(17,8,1)
(2,15,1)
(18,20,1)
(16,17,1)
(3,2,1)
(6,14,1)
(8,6,1)
(15,5,1)
(19,18,1)
(5,12,1)
(18,23,1)
(10,19,1)
(23,29,1)
(18,17,1)
(15,23,1)
(10,19,2)
(12,21,2)
(6,14,2)
(15,17,2)
(18,23,2)
(4,15,2)
(15,23,2)
(3,15,2)
(11,21,2)
(18,17,2)
(20,15,2)
(15,21,2)
(16,14,2)
(18,15,2)
(2,15,2)
(19,18,2)
(5,21,2)
(8,14,2)
(19,15,2)
(10,15,2)
(17,14,2)
-----------------------------------
(0,while(1)
(1,)
(2,result)
(3,data)
(4,result)
(5,0)
(6,data)
(7,while(1)
(8,INT_MAX)
(9,)
(10,printIntLine(result)
(11,break;)
(12,data)
(13,)
(14,1)
(15,data > 0)
(16,break;)
(17,data = INT_MAX)
(18,data * 2)
(19,result = data * 2)
(20,2)
(21,1)
(22,if(data > 0)
(23,data = 0)
(24,data)
(25,data)
(26,)
(27,result)
(28,RET)
(29,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^