-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
19,21
20,21
21,22
21,23
23,24
23,25
23,26
25,26
26,27
28,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
32,35
32,36
33,34
35,36
37,38
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
60,61
60,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
68,69
68,70
69,70
70,71
70,72
72,73
72,74
74,75
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,14,15,17,22,24,27,29,34,36,38,40,42,47,50,52,57,58,59,61,66,67,71,73,77,78,82,84,85
-----computeFrom-----
12,13
12,14
31,32
31,33
45,46
45,47
64,65
64,66
75,76
75,77
-----guardedBy-----
36,52
66,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_16_bad()
CWE190_Integer_Overflow__int_fgets_multiply_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(36,5,0)
(43,46,0)
(36,37,0)
(16,27,0)
(39,45,0)
(32,46,0)
(14,27,0)
(46,2,0)
(33,14,0)
(29,32,0)
(31,11,0)
(1,14,0)
(24,16,0)
(8,5,0)
(42,8,0)
(45,6,0)
(9,5,0)
(34,36,0)
(35,32,0)
(44,46,0)
(16,32,0)
(12,2,0)
(20,6,0)
(30,11,0)
(6,45,0)
(45,32,0)
(41,11,0)
(27,16,0)
(26,38,0)
(40,38,0)
(21,27,0)
(5,8,0)
(13,22,0)
(18,4,0)
(38,11,0)
(14,38,0)
(3,8,0)
(7,18,0)
(25,22,0)
(27,19,0)
(15,37,0)
(0,45,0)
(5,37,0)
(8,27,0)
(8,38,0)
(17,45,0)
(21,6,1)
(33,1,1)
(14,33,1)
(28,10,1)
(28,25,1)
(0,39,1)
(5,8,1)
(3,42,1)
(24,21,1)
(16,24,1)
(10,23,1)
(14,38,1)
(45,32,1)
(20,45,1)
(14,27,1)
(32,29,1)
(8,3,1)
(26,40,1)
(6,45,1)
(10,12,1)
(9,14,1)
(34,5,1)
(12,18,1)
(35,23,1)
(8,27,1)
(36,34,1)
(12,27,1)
(45,0,1)
(25,14,1)
(25,36,1)
(39,17,1)
(7,6,1)
(29,35,1)
(6,20,1)
(17,32,1)
(36,5,1)
(8,38,1)
(1,10,1)
(38,26,1)
(42,9,1)
(18,7,1)
(23,38,1)
(27,16,1)
(16,32,1)
(16,6,2)
(35,23,2)
(0,23,2)
(39,23,2)
(7,6,2)
(6,23,2)
(34,14,2)
(8,27,2)
(24,6,2)
(1,10,2)
(16,32,2)
(33,10,2)
(27,6,2)
(12,23,2)
(25,10,2)
(3,14,2)
(9,14,2)
(29,23,2)
(42,14,2)
(36,14,2)
(5,14,2)
(20,23,2)
(8,38,2)
(18,6,2)
(32,23,2)
(14,38,2)
(27,16,2)
(14,27,2)
(14,10,2)
(5,8,2)
(6,45,2)
(45,23,2)
(36,5,2)
(45,32,2)
(8,14,2)
(21,6,2)
(17,23,2)
-----------------------------------
(0,stdin)
(1,data)
(2,)
(3,2)
(4,)
(5,result = data * 2)
(6,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(7,"fgets()
(8,data * 2)
(9,result)
(10,1)
(11,)
(12,break;)
(13,if(data > 0)
(14,data > 0)
(15,result)
(16,atoi(inputBuffer)
(17,inputBuffer)
(18,printLine("fgets()
(19,)
(20,NULL)
(21,data)
(22,)
(23,1)
(24,inputBuffer)
(25,break;)
(26,0)
(27,data = atoi(inputBuffer)
(28,RET)
(29,"")
(30,while(1)
(31,data)
(32,inputBuffer[CHAR_ARRAY_SIZE] = "")
(33,0)
(34,result)
(35,inputBuffer)
(36,printIntLine(result)
(37,)
(38,data = 0)
(39,CHAR_ARRAY_SIZE)
(40,data)
(41,while(1)
(42,data)
(43,inputBuffer)
(44,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(45,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^