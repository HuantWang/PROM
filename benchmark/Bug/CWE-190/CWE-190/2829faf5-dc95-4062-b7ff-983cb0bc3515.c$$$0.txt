-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_32_bad()
{
    short data;
    short *dataPtr1 = &data;
    short *dataPtr2 = &data;
    data = 0;
    {
        short data = *dataPtr1;
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        *dataPtr1 = data;
    }
    {
        short data = *dataPtr2;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
78,79
78,80
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,56,58,62,64,68,72,73,77,79,83,84,88,90
-----computeFrom-----
32,33
32,34
47,48
47,49
53,54
53,55
70,71
70,72
81,82
81,83
-----guardedBy-----
72,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_32_bad(){    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_multiply_32_bad()
CWE190_Integer_Overflow__short_max_multiply_32_bad
{    short data;    short *dataPtr1 = &data;    short *dataPtr2 = &data;    data = 0;    {        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }    {        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
short *dataPtr1 = &data;
short *dataPtr1 = &data;
short
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
short *dataPtr2 = &data;
short *dataPtr2 = &data;
short
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        short data = *dataPtr1;        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        *dataPtr1 = data;    }
short data = *dataPtr1;
short data = *dataPtr1;
short
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        short data = *dataPtr2;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
short data = *dataPtr2;
short data = *dataPtr2;
short
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(14,3,0)
(20,33,0)
(30,21,0)
(11,2,0)
(6,38,0)
(23,19,0)
(29,6,0)
(19,10,0)
(15,7,0)
(15,3,0)
(35,2,0)
(31,36,0)
(36,10,0)
(1,19,0)
(3,19,0)
(28,7,0)
(27,38,0)
(26,15,0)
(22,21,0)
(6,33,0)
(45,34,0)
(8,13,0)
(18,25,0)
(36,31,0)
(46,21,0)
(42,28,0)
(40,30,0)
(38,2,0)
(16,7,0)
(41,21,0)
(37,0,0)
(25,5,0)
(7,21,0)
(5,25,0)
(44,10,0)
(9,12,0)
(10,21,0)
(5,13,0)
(0,13,0)
(47,12,0)
(34,21,0)
(38,33,0)
(13,0,0)
(24,30,0)
(7,28,0)
(31,7,0)
(25,30,0)
(3,10,0)
(12,25,0)
(4,31,0)
(2,38,0)
(13,21,0)
(43,36,0)
(2,25,0)
(17,34,0)
(32,5,0)
(39,6,1)
(12,25,1)
(43,34,1)
(15,7,1)
(23,1,1)
(6,29,1)
(11,27,1)
(42,16,1)
(12,47,1)
(3,19,1)
(8,7,1)
(36,31,1)
(19,23,1)
(26,19,1)
(14,15,1)
(29,38,1)
(6,38,1)
(4,43,1)
(31,7,1)
(3,14,1)
(13,0,1)
(15,26,1)
(35,11,1)
(45,13,1)
(34,17,1)
(32,18,1)
(47,9,1)
(28,42,1)
(2,35,1)
(5,13,1)
(27,12,1)
(39,12,1)
(2,25,1)
(5,32,1)
(37,8,1)
(7,28,1)
(0,37,1)
(1,36,1)
(38,2,1)
(25,5,1)
(18,3,1)
(17,45,1)
(9,25,1)
(31,4,1)
(2,12,2)
(15,7,2)
(6,38,2)
(2,25,2)
(7,28,2)
(6,12,2)
(5,13,2)
(13,0,2)
(35,12,2)
(38,12,2)
(25,5,2)
(31,7,2)
(38,2,2)
(36,31,2)
(12,25,2)
(11,12,2)
(27,12,2)
(29,12,2)
(3,19,2)
-----------------------------------
(0,&data)
(1,data)
(2,data * 2)
(3,*dataPtr1 = data)
(4,dataPtr1)
(5,*dataPtr2)
(6,printIntLine(result)
(7,*dataPtr1 = &data)
(8,dataPtr2)
(9,data)
(10,)
(11,data)
(12,data > 0)
(13,*dataPtr2 = &data)
(14,data)
(15,*dataPtr1)
(16,dataPtr1)
(17,0)
(18,data)
(19,data = SHRT_MAX)
(20,result)
(21,)
(22,dataPtr1)
(23,SHRT_MAX)
(24,data)
(25,data = *dataPtr2)
(26,dataPtr1)
(27,result)
(28,&data)
(29,result)
(30,)
(31,*dataPtr1)
(32,dataPtr2)
(33,)
(34,data = 0)
(35,2)
(36,data = *dataPtr1)
(37,data)
(38,result = data * 2)
(39,RET)
(40,if(data > 0)
(41,dataPtr2)
(42,data)
(43,data)
(44,data)
(45,data)
(46,data)
(47,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^