-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_square_14_bad()
{
    short data;
    data = 0;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (short)RAND32();
    }
    if(globalFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_square_14_bad(){    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_square_14_bad()
CWE190_Integer_Overflow__short_rand_square_14_bad
{    short data;    data = 0;    if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }    if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (short)RAND32();    }
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
if(globalFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(24,9,0)
(9,4,0)
(12,15,0)
(3,15,0)
(19,22,0)
(29,10,0)
(4,26,0)
(22,26,0)
(9,29,0)
(20,14,0)
(26,22,0)
(22,21,0)
(16,13,0)
(11,4,0)
(8,29,0)
(15,5,0)
(8,9,0)
(4,9,0)
(17,4,0)
(27,14,0)
(25,8,0)
(28,26,0)
(18,13,0)
(26,6,0)
(0,5,0)
(22,19,0)
(1,5,0)
(7,5,0)
(2,29,0)
(4,15,0)
(21,22,0)
(18,14,1)
(28,14,1)
(4,15,1)
(23,8,1)
(27,20,1)
(26,22,1)
(11,24,1)
(21,28,1)
(18,26,1)
(12,3,1)
(8,25,1)
(16,18,1)
(25,9,1)
(9,4,1)
(8,9,1)
(24,13,1)
(14,27,1)
(22,21,1)
(4,26,1)
(17,11,1)
(15,12,1)
(13,16,1)
(22,19,1)
(20,15,1)
(4,17,1)
(23,13,1)
(4,26,2)
(11,13,2)
(28,14,2)
(9,4,2)
(22,14,2)
(8,9,2)
(24,13,2)
(25,13,2)
(9,13,2)
(22,21,2)
(17,13,2)
(26,22,2)
(4,15,2)
(8,13,2)
(26,14,2)
(21,14,2)
(4,13,2)
(22,19,2)
-----------------------------------
(0,data)
(1,if(globalFive==5)
(2,result)
(3,data)
(4,data * data)
(5,)
(6,)
(7,if(globalFive==5)
(8,printIntLine(result)
(9,result = data * data)
(10,)
(11,data)
(12,0)
(13,globalFive==5)
(14,globalFive==5)
(15,data = 0)
(16,5)
(17,data)
(18,globalFive)
(19,short)
(20,globalFive)
(21,RAND32()
(22,(short)
(23,RET)
(24,result)
(25,result)
(26,data = (short)
(27,5)
(28,data)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^