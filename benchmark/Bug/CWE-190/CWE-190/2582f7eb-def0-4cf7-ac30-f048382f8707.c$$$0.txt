-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_add_08_bad()
{
    char data;
    data = ' ';
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,42,46,47,51,53
-----computeFrom-----
12,13
12,14
22,23
22,24
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_add_08_bad(){    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_add_08_bad()
CWE190_Integer_Overflow__char_rand_add_08_bad
{    char data;    data = ' ';    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(7,12,0)
(2,16,0)
(14,5,0)
(24,7,0)
(16,17,0)
(5,25,0)
(19,6,0)
(22,5,0)
(9,12,0)
(8,4,0)
(25,5,0)
(0,6,0)
(25,20,0)
(5,22,0)
(26,4,0)
(7,6,0)
(1,7,0)
(6,4,0)
(12,16,0)
(5,14,0)
(2,12,0)
(7,25,0)
(12,7,0)
(18,4,0)
(10,16,0)
(15,25,0)
(3,2,0)
(6,0,1)
(7,6,1)
(5,22,1)
(24,1,1)
(5,14,1)
(7,24,1)
(13,6,1)
(11,25,1)
(25,5,1)
(21,11,1)
(22,15,1)
(2,3,1)
(3,12,1)
(0,19,1)
(1,9,1)
(7,25,1)
(9,11,1)
(12,7,1)
(11,13,1)
(21,2,1)
(2,12,1)
(15,13,1)
(25,13,2)
(9,11,2)
(12,7,2)
(7,25,2)
(15,13,2)
(5,14,2)
(25,5,2)
(5,22,2)
(5,13,2)
(2,12,2)
(1,11,2)
(2,11,2)
(22,13,2)
(12,11,2)
(24,11,2)
(7,6,2)
(3,11,2)
(7,11,2)
-----------------------------------
(0,' ')
(1,data)
(2,printHexCharLine(result)
(3,result)
(4,)
(5,(char)
(6,data = ' ')
(7,data + 1)
(8,data)
(9,result)
(10,result)
(11,staticReturnsTrue()
(12,result = data + 1)
(13,staticReturnsTrue()
(14,char)
(15,data)
(16,)
(17,)
(18,if(staticReturnsTrue()
(19,data)
(20,)
(21,RET)
(22,RAND32()
(23,data = \' \')
(24,1)
(25,data = (char)
(26,if(staticReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^