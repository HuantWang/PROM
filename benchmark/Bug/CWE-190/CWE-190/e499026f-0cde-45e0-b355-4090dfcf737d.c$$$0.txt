-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_02_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
24,25
26,27
26,28
28,29
29,30
29,31
30,31
31,32
31,33
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,14,15,17,22,25,27,32,34,38,40,44,46
-----computeFrom-----
12,13
12,14
20,21
20,22
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_02_bad(){    int data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_02_bad()
CWE190_Integer_Overflow__int_rand_square_02_bad
{    int data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();    }
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,18,0)
(19,6,0)
(20,12,0)
(12,23,0)
(12,6,0)
(23,10,0)
(10,11,0)
(7,12,0)
(16,23,0)
(4,16,0)
(3,23,0)
(17,18,0)
(1,22,0)
(0,1,0)
(12,1,0)
(9,6,0)
(22,1,0)
(16,10,0)
(2,10,0)
(13,18,0)
(6,18,0)
(23,12,0)
(1,14,0)
(16,4,1)
(12,1,1)
(23,12,1)
(12,20,1)
(15,6,1)
(0,15,1)
(5,15,1)
(7,3,1)
(1,22,1)
(16,23,1)
(19,9,1)
(3,5,1)
(5,1,1)
(21,16,1)
(21,5,1)
(22,0,1)
(20,7,1)
(6,19,1)
(12,6,1)
(4,23,1)
(12,1,2)
(16,23,2)
(1,22,2)
(3,5,2)
(12,5,2)
(7,5,2)
(22,15,2)
(1,15,2)
(20,5,2)
(0,15,2)
(23,5,2)
(12,6,2)
(16,5,2)
(23,12,2)
(4,5,2)
-----------------------------------
(0,data)
(1,data = RAND32()
(2,result)
(3,result)
(4,result)
(5,1)
(6,data = 0)
(7,data)
(8,data)
(9,data)
(10,)
(11,)
(12,data * data)
(13,if(1)
(14,)
(15,1)
(16,printIntLine(result)
(17,if(1)
(18,)
(19,0)
(20,data)
(21,RET)
(22,RAND32()
(23,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^