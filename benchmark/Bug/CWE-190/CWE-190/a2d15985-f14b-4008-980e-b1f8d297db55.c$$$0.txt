-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_11_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_11_bad(){    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_square_11_bad()
CWE190_Integer_Overflow__char_max_square_11_bad
{    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(15,12,0)
(16,10,0)
(1,21,0)
(6,0,0)
(13,24,0)
(19,13,0)
(5,0,0)
(22,3,0)
(0,13,0)
(2,21,0)
(0,9,0)
(17,13,0)
(10,21,0)
(9,0,0)
(18,21,0)
(3,9,0)
(3,12,0)
(0,10,0)
(4,9,0)
(12,8,0)
(20,10,0)
(9,12,0)
(9,0,1)
(20,16,1)
(3,22,1)
(19,17,1)
(7,13,1)
(17,14,1)
(3,9,1)
(13,19,1)
(10,20,1)
(22,9,1)
(4,7,1)
(0,10,1)
(6,5,1)
(0,6,1)
(0,13,1)
(11,3,1)
(11,7,1)
(14,10,1)
(7,14,1)
(5,4,1)
(0,10,2)
(0,7,2)
(9,0,2)
(9,7,2)
(17,14,2)
(6,7,2)
(3,7,2)
(4,7,2)
(22,7,2)
(0,13,2)
(19,14,2)
(5,7,2)
(3,9,2)
(13,14,2)
-----------------------------------
(0,data * data)
(1,if(globalReturnsTrue()
(2,if(globalReturnsTrue()
(3,printHexCharLine(result)
(4,result)
(5,data)
(6,data)
(7,globalReturnsTrue()
(8,)
(9,result = data * data)
(10,data = \' \')
(11,RET)
(12,)
(13,data = CHAR_MAX)
(14,globalReturnsTrue()
(15,result)
(16,data)
(17,data)
(18,data)
(19,CHAR_MAX)
(20,' ')
(21,)
(22,result)
(23,data = ' ')
(24,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^