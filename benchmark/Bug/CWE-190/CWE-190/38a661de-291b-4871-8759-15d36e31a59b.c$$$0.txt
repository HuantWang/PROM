-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_postinc_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            int result = data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
30,31
30,32
32,33
32,34
33,34
33,35
33,36
34,35
35,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,29,31,37,40,42,45,49,51,52
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_postinc_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_fscanf_postinc_16_bad()
CWE190_Integer_Overflow__int_fscanf_postinc_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }    while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);        break;    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
break;
while(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            int result = data;            printIntLine(result);        }
data++;
data++
data
data
int result = data;
int result = data;
int
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(14,26,0)
(5,8,0)
(1,2,0)
(17,5,0)
(21,24,0)
(25,2,0)
(23,8,0)
(15,8,0)
(20,5,0)
(14,19,0)
(24,5,0)
(22,14,0)
(8,13,0)
(26,8,0)
(11,26,0)
(18,1,0)
(10,13,0)
(5,1,0)
(12,19,0)
(6,23,0)
(24,1,0)
(0,13,0)
(27,8,0)
(26,14,0)
(7,14,0)
(23,1,0)
(16,13,0)
(24,5,1)
(8,15,1)
(3,25,1)
(23,8,1)
(26,8,1)
(24,21,1)
(9,12,1)
(3,9,1)
(4,8,1)
(23,6,1)
(7,22,1)
(11,7,1)
(22,4,1)
(21,5,1)
(6,9,1)
(12,14,1)
(5,20,1)
(14,26,1)
(15,27,1)
(26,11,1)
(5,8,1)
(25,24,1)
(20,17,1)
(17,23,1)
(9,4,1)
(23,9,2)
(5,9,2)
(5,8,2)
(22,4,2)
(20,9,2)
(11,4,2)
(14,26,2)
(6,9,2)
(26,4,2)
(21,9,2)
(7,4,2)
(17,9,2)
(24,5,2)
(25,9,2)
(23,8,2)
(24,9,2)
(14,4,2)
(12,4,2)
(26,8,2)
-----------------------------------
(0,while(1)
(1,)
(2,)
(3,RET)
(4,1)
(5,result = data)
(6,data)
(7,"%d")
(8,data = 0)
(9,1)
(10,while(1)
(11,data)
(12,break;)
(13,)
(14,fscanf(stdin, "%d", &data)
(15,0)
(16,data)
(17,result)
(18,result)
(19,)
(20,data)
(21,result)
(22,stdin)
(23,data++)
(24,printIntLine(result)
(25,break;)
(26,&data)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^