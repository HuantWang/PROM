-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_add_11_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            char result = data + 1;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,19,24,26,30,35,37,41,42,46,48
-----computeFrom-----
12,13
12,14
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_add_11_bad(){    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_add_11_bad()
CWE190_Integer_Overflow__char_max_add_11_bad
{    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            char result = data + 1;            printHexCharLine(result);        }
char result = data + 1;
char result = data + 1;
char
result = data + 1
result
= data + 1
data + 1
data
data
1
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(24,10,0)
(9,0,0)
(10,4,0)
(6,13,0)
(17,10,0)
(20,15,0)
(13,10,0)
(4,0,0)
(1,6,0)
(11,13,0)
(3,7,0)
(16,4,0)
(13,3,0)
(10,15,0)
(19,0,0)
(10,13,0)
(18,3,0)
(21,15,0)
(6,3,0)
(8,4,0)
(12,0,0)
(15,2,0)
(22,4,1)
(6,1,1)
(10,4,1)
(23,22,1)
(17,11,1)
(11,23,1)
(1,13,1)
(16,8,1)
(10,24,1)
(24,17,1)
(10,15,1)
(6,13,1)
(14,6,1)
(23,15,1)
(15,21,1)
(13,10,1)
(4,16,1)
(21,20,1)
(20,22,1)
(14,23,1)
(10,15,2)
(24,23,2)
(13,10,2)
(6,23,2)
(17,23,2)
(13,23,2)
(1,23,2)
(15,22,2)
(21,22,2)
(6,13,2)
(10,4,2)
(20,22,2)
(10,23,2)
(11,23,2)
-----------------------------------
(0,)
(1,result)
(2,)
(3,)
(4,data = ' ')
(5,data = \' \')
(6,printHexCharLine(result)
(7,)
(8,data)
(9,data)
(10,data + 1)
(11,result)
(12,if(globalReturnsTrue()
(13,result = data + 1)
(14,RET)
(15,data = CHAR_MAX)
(16,' ')
(17,data)
(18,result)
(19,if(globalReturnsTrue()
(20,data)
(21,CHAR_MAX)
(22,globalReturnsTrue()
(23,globalReturnsTrue()
(24,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^