-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_rand_square_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        /* POTENTIAL FLAW: Set data to a random value */
        data = RAND32();
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
51,52
53,54
54,55
54,56
55,56
56,57
58,59
60,61
60,62
61,62
62,63
62,64
64,65
64,66
66,67
67,68
68,69
70,71
70,72
71,72
72,73
72,74
74,75
74,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,52,57,59,63,65,69,73,75,79,81,85,87
-----computeFrom-----
32,33
32,34
47,48
47,49
54,55
54,56
77,78
77,79
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_rand_square_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_rand_square_32_bad()
CWE190_Integer_Overflow__int_rand_square_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        /* POTENTIAL FLAW: Set data to a random value */        data = RAND32();        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = RAND32();
data = RAND32()
data
data
RAND32()
RAND32
RAND32
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,39,0)
(11,17,0)
(22,19,0)
(25,37,0)
(17,43,0)
(8,17,0)
(32,2,0)
(14,2,0)
(5,7,0)
(33,42,0)
(29,43,0)
(8,33,0)
(36,25,0)
(1,13,0)
(39,35,0)
(27,38,0)
(41,12,0)
(39,7,0)
(3,33,0)
(28,35,0)
(20,13,0)
(38,27,0)
(10,7,0)
(27,39,0)
(25,10,0)
(19,2,0)
(4,37,0)
(42,7,0)
(19,43,0)
(37,4,0)
(38,10,0)
(40,8,0)
(43,42,0)
(16,34,0)
(12,39,0)
(9,7,0)
(18,38,0)
(2,32,0)
(23,17,0)
(15,42,0)
(30,7,0)
(12,25,0)
(37,10,0)
(34,33,0)
(43,19,0)
(35,39,0)
(26,10,0)
(24,32,0)
(13,7,0)
(34,8,0)
(6,37,0)
(2,7,0)
(17,8,0)
(31,27,0)
(20,1,1)
(16,8,1)
(41,37,1)
(22,29,1)
(4,6,1)
(40,43,1)
(12,41,1)
(36,12,1)
(6,38,1)
(12,39,1)
(2,32,1)
(34,8,1)
(27,31,1)
(11,40,1)
(34,16,1)
(13,20,1)
(19,2,1)
(37,4,1)
(39,35,1)
(32,24,1)
(27,39,1)
(17,43,1)
(28,0,1)
(21,34,1)
(23,11,1)
(19,22,1)
(14,39,1)
(1,2,1)
(18,13,1)
(24,14,1)
(31,18,1)
(25,37,1)
(8,17,1)
(38,27,1)
(35,28,1)
(29,25,1)
(43,19,1)
(17,23,1)
(25,36,1)
(17,43,2)
(38,27,2)
(27,39,2)
(34,8,2)
(8,17,2)
(12,39,2)
(19,2,2)
(43,19,2)
(37,4,2)
(25,37,2)
(39,35,2)
(2,32,2)
-----------------------------------
(0,dataPtr1)
(1,data)
(2,*dataPtr2 = &data)
(3,result)
(4,RAND32()
(5,data)
(6,data)
(7,)
(8,result = data * data)
(9,dataPtr1)
(10,)
(11,data)
(12,*dataPtr1)
(13,data = 0)
(14,dataPtr2)
(15,data)
(16,result)
(17,data * data)
(18,data)
(19,*dataPtr2)
(20,0)
(21,RET)
(22,dataPtr2)
(23,data)
(24,data)
(25,*dataPtr1 = data)
(26,data)
(27,*dataPtr1)
(28,data)
(29,data)
(30,dataPtr2)
(31,dataPtr1)
(32,&data)
(33,)
(34,printIntLine(result)
(35,&data)
(36,data)
(37,data = RAND32()
(38,data = *dataPtr1)
(39,*dataPtr1 = &data)
(40,result)
(41,dataPtr1)
(42,)
(43,data = *dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^