-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_listen_socket_square_32_bad()
{
    int data;
    int *dataPtr1 = &data;
    int *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        int data = *dataPtr1;
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        *dataPtr1 = data;
    }
    {
        int data = *dataPtr2;
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
37,38
38,39
38,40
40,41
40,42
42,43
43,44
44,45
46,47
46,48
46,49
46,50
46,51
46,52
46,53
46,54
47,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
67,68
68,69
68,70
69,70
71,72
71,73
73,74
74,75
76,77
77,78
77,79
79,80
79,81
81,82
82,83
84,85
84,86
85,86
85,87
85,88
85,89
85,90
85,91
85,92
85,93
85,94
85,95
85,96
85,97
85,98
85,99
86,87
87,88
87,89
88,89
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
99,101
100,101
100,102
101,102
103,104
105,106
107,108
108,109
108,110
108,111
108,112
109,110
111,112
112,113
115,116
116,117
117,118
119,120
120,121
120,122
121,122
121,123
122,123
125,126
127,128
128,129
128,130
129,130
129,131
130,131
130,132
131,132
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
143,145
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
150,153
150,154
151,152
153,154
155,156
155,157
156,157
156,158
157,158
159,160
161,162
162,163
164,165
165,166
166,167
168,169
170,171
172,173
172,174
173,174
173,175
174,175
174,176
174,177
175,176
177,178
179,180
181,182
183,184
185,186
186,187
186,188
187,188
189,190
189,191
189,192
189,193
190,191
192,193
194,195
196,197
198,199
198,200
199,200
199,201
200,201
202,203
204,205
206,207
207,208
207,209
208,209
210,211
210,212
210,213
210,214
210,215
211,212
213,214
215,216
217,218
217,219
218,219
222,223
222,224
223,224
223,225
224,225
224,226
225,226
227,228
229,230
229,231
230,231
233,234
235,236
236,237
236,238
237,238
237,239
238,239
240,241
243,244
244,245
244,246
245,246
247,248
247,249
248,249
250,251
253,254
253,255
254,255
254,256
255,256
257,258
259,260
260,261
261,262
261,263
262,263
264,265
266,267
266,268
267,268
267,269
268,269
270,271
272,273
273,274
274,275
274,276
275,276
277,278
279,280
280,281
280,282
281,282
282,283
284,285
286,287
286,288
287,288
288,289
288,290
290,291
290,292
292,293
293,294
294,295
296,297
296,298
297,298
298,299
298,300
300,301
300,302
302,303
303,304
303,305
304,305
306,307
308,309
309,310
309,311
310,311
312,313
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,35,39,41,45,49,51,55,57,61,63,66,70,72,75,78,80,83,89,92,94,96,98,102,104,106,110,113,114,118,123,124,126,132,133,134,136,141,142,145,147,152,154,158,160,163,167,169,171,176,178,180,182,184,188,191,193,195,197,201,203,205,209,212,214,216,219,220,221,226,228,231,232,234,239,241,242,246,249,251,252,256,258,263,265,269,271,276,278,283,285,289,291,295,299,301,305,307,311,313
-----computeFrom-----
32,33
32,34
87,88
87,89
100,101
100,102
120,121
120,122
128,129
128,130
138,139
138,140
149,150
149,151
173,174
173,175
186,187
186,188
199,200
199,201
207,208
207,209
217,218
217,219
223,224
223,225
224,225
224,226
229,230
229,231
236,237
236,238
244,245
244,246
254,255
254,256
267,268
267,269
280,281
280,282
303,304
303,305
-----guardedBy-----
256,265
269,278
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_listen_socket_square_32_bad(){    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_listen_socket_square_32_bad()
CWE190_Integer_Overflow__int_listen_socket_square_32_bad
{    int data;    int *dataPtr1 = &data;    int *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }    {        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
int *dataPtr1 = &data;
int *dataPtr1 = &data;
int
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
int *dataPtr2 = &data;
int *dataPtr2 = &data;
int
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        int data = *dataPtr1;        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        *dataPtr1 = data;    }
int data = *dataPtr1;
int data = *dataPtr1;
int
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                data = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int data = *dataPtr2;        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
int data = *dataPtr2;
int data = *dataPtr2;
int
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(179,154,0)
(22,126,0)
(112,117,0)
(144,99,0)
(188,126,0)
(89,37,0)
(183,109,0)
(128,176,0)
(160,2,0)
(169,15,0)
(57,13,0)
(60,136,0)
(103,168,0)
(117,101,0)
(125,171,0)
(90,191,0)
(37,69,0)
(172,154,0)
(81,69,0)
(86,191,0)
(64,147,0)
(159,14,0)
(157,162,0)
(47,69,0)
(7,35,0)
(41,154,0)
(52,187,0)
(10,87,0)
(186,185,0)
(155,37,0)
(130,2,0)
(26,37,0)
(103,154,0)
(93,103,0)
(101,117,0)
(143,162,0)
(122,154,0)
(113,147,0)
(82,183,0)
(177,154,0)
(180,166,0)
(160,62,0)
(52,10,0)
(14,16,0)
(174,37,0)
(164,37,0)
(56,13,0)
(29,48,0)
(108,55,0)
(149,14,0)
(98,156,0)
(83,35,0)
(43,179,0)
(152,183,0)
(92,52,0)
(28,69,0)
(90,43,0)
(78,46,0)
(87,10,0)
(66,113,0)
(42,54,0)
(21,117,0)
(148,109,0)
(77,7,0)
(191,90,0)
(190,37,0)
(123,41,0)
(105,43,0)
(170,99,0)
(24,87,0)
(11,154,0)
(109,183,0)
(25,108,0)
(139,179,0)
(95,188,0)
(58,101,0)
(188,95,0)
(166,147,0)
(20,187,0)
(119,135,0)
(75,131,0)
(171,133,0)
(124,113,0)
(62,160,0)
(84,88,0)
(28,172,0)
(146,154,0)
(187,52,0)
(109,179,0)
(80,37,0)
(129,63,0)
(141,31,0)
(72,10,0)
(40,79,0)
(166,158,0)
(101,154,0)
(30,43,0)
(189,139,0)
(47,66,0)
(139,48,0)
(44,37,0)
(38,154,0)
(2,13,0)
(110,47,0)
(88,113,0)
(172,67,0)
(136,15,0)
(140,7,0)
(13,2,0)
(6,16,0)
(54,103,0)
(31,46,0)
(126,2,0)
(173,126,0)
(4,2,0)
(43,90,0)
(34,55,0)
(116,172,0)
(15,37,0)
(5,160,0)
(176,2,0)
(46,23,0)
(184,154,0)
(153,185,0)
(0,124,0)
(51,35,0)
(126,22,0)
(162,37,0)
(163,113,0)
(39,66,0)
(10,23,0)
(142,1,0)
(132,109,0)
(58,118,0)
(185,146,0)
(131,147,0)
(107,15,0)
(181,13,0)
(49,133,0)
(70,126,0)
(36,28,0)
(18,147,0)
(87,166,0)
(17,154,0)
(113,88,0)
(179,109,0)
(176,150,0)
(126,173,0)
(9,154,0)
(133,154,0)
(114,131,0)
(16,14,0)
(59,37,0)
(45,67,0)
(28,47,0)
(55,156,0)
(104,49,0)
(178,146,0)
(191,179,0)
(109,101,0)
(73,58,0)
(158,166,0)
(99,101,0)
(76,173,0)
(182,158,0)
(133,49,0)
(121,147,0)
(27,4,0)
(127,23,0)
(69,147,0)
(19,52,0)
(187,46,0)
(96,179,0)
(106,117,0)
(97,101,0)
(100,37,0)
(111,109,0)
(65,32,0)
(117,2,0)
(61,171,0)
(66,47,0)
(48,154,0)
(68,136,0)
(176,35,0)
(50,62,0)
(31,187,0)
(165,168,0)
(71,4,0)
(55,34,0)
(188,135,0)
(55,108,0)
(7,2,0)
(167,9,0)
(2,154,0)
(161,33,0)
(103,54,0)
(134,22,0)
(12,151,0)
(67,172,0)
(8,34,0)
(94,139,0)
(23,147,0)
(16,41,0)
(53,160,0)
(85,37,0)
(138,191,0)
(135,188,0)
(145,9,0)
(168,103,0)
(124,28,0)
(35,37,0)
(136,101,0)
(120,137,0)
(58,15,0)
(126,188,0)
(156,55,0)
(3,156,0)
(87,166,1)
(141,187,1)
(126,188,1)
(140,129,1)
(90,191,1)
(84,163,1)
(108,25,1)
(159,146,1)
(116,48,1)
(51,83,1)
(107,169,1)
(2,13,1)
(3,98,1)
(170,101,1)
(30,179,1)
(136,68,1)
(70,133,1)
(4,71,1)
(101,117,1)
(8,55,1)
(36,124,1)
(134,126,1)
(22,134,1)
(169,35,1)
(50,160,1)
(179,109,1)
(24,72,1)
(109,101,1)
(58,101,1)
(49,104,1)
(9,145,1)
(58,73,1)
(56,181,1)
(83,162,1)
(189,90,1)
(53,5,1)
(103,54,1)
(62,160,1)
(77,140,1)
(96,99,1)
(113,88,1)
(7,77,1)
(129,62,1)
(112,106,1)
(172,67,1)
(168,165,1)
(178,185,1)
(28,47,1)
(98,74,1)
(97,62,1)
(10,87,1)
(162,143,1)
(104,171,1)
(31,187,1)
(191,179,1)
(109,111,1)
(102,58,1)
(165,93,1)
(110,131,1)
(52,10,1)
(188,135,1)
(124,0,1)
(109,183,1)
(140,161,1)
(28,36,1)
(139,179,1)
(166,158,1)
(140,142,1)
(88,84,1)
(103,168,1)
(124,113,1)
(35,51,1)
(5,22,1)
(146,178,1)
(92,19,1)
(131,114,1)
(27,2,1)
(182,180,1)
(167,34,1)
(139,94,1)
(14,149,1)
(117,2,1)
(140,74,1)
(40,4,1)
(43,105,1)
(173,76,1)
(180,113,1)
(16,6,1)
(132,148,1)
(135,119,1)
(145,167,1)
(21,97,1)
(181,57,1)
(161,34,1)
(62,50,1)
(12,102,1)
(185,153,1)
(140,120,1)
(19,20,1)
(71,27,1)
(25,156,1)
(160,53,1)
(126,2,1)
(157,47,1)
(73,136,1)
(140,65,1)
(61,41,1)
(6,14,1)
(60,176,1)
(93,54,1)
(130,9,1)
(57,130,1)
(68,60,1)
(20,10,1)
(152,82,1)
(16,14,1)
(142,90,1)
(13,56,1)
(74,172,1)
(128,7,1)
(136,15,1)
(31,141,1)
(119,70,1)
(176,35,1)
(47,66,1)
(86,43,1)
(125,61,1)
(126,173,1)
(156,3,1)
(66,39,1)
(171,125,1)
(98,15,1)
(102,136,1)
(72,28,1)
(133,49,1)
(48,29,1)
(176,2,1)
(52,92,1)
(176,128,1)
(138,86,1)
(140,40,1)
(148,96,1)
(7,35,1)
(94,189,1)
(149,159,1)
(106,21,1)
(75,166,1)
(175,31,1)
(0,12,1)
(65,99,1)
(42,4,1)
(191,138,1)
(158,182,1)
(55,108,1)
(144,170,1)
(55,156,1)
(99,101,1)
(143,157,1)
(0,102,1)
(39,110,1)
(4,2,1)
(136,101,1)
(67,45,1)
(120,22,1)
(76,188,1)
(7,2,1)
(117,112,1)
(87,24,1)
(28,172,1)
(66,113,1)
(58,15,1)
(82,132,1)
(187,52,1)
(99,144,1)
(22,126,1)
(153,186,1)
(34,55,1)
(45,116,1)
(43,179,1)
(114,75,1)
(41,123,1)
(111,183,1)
(29,139,1)
(105,30,1)
(90,43,1)
(34,8,1)
(60,7,1)
(186,103,1)
(160,2,1)
(188,95,1)
(123,16,1)
(183,152,1)
(15,107,1)
(54,42,1)
(179,109,2)
(146,4,2)
(96,99,2)
(43,179,2)
(61,4,2)
(126,4,2)
(171,4,2)
(160,22,2)
(172,90,2)
(103,168,2)
(152,99,2)
(120,22,2)
(66,113,2)
(42,4,2)
(10,87,2)
(90,43,2)
(58,136,2)
(82,99,2)
(12,102,2)
(167,34,2)
(165,4,2)
(87,166,2)
(183,99,2)
(74,90,2)
(3,74,2)
(54,4,2)
(106,62,2)
(21,62,2)
(90,191,2)
(136,101,2)
(30,99,2)
(125,4,2)
(7,35,2)
(170,62,2)
(132,99,2)
(176,2,2)
(71,34,2)
(105,99,2)
(50,22,2)
(179,99,2)
(134,4,2)
(99,62,2)
(130,34,2)
(103,4,2)
(185,4,2)
(109,101,2)
(101,62,2)
(31,187,2)
(16,4,2)
(58,15,2)
(136,15,2)
(126,173,2)
(34,74,2)
(178,4,2)
(4,34,2)
(142,90,2)
(22,126,2)
(43,99,2)
(153,4,2)
(188,95,2)
(186,4,2)
(8,74,2)
(135,4,2)
(172,67,2)
(9,34,2)
(2,13,2)
(189,90,2)
(108,74,2)
(4,2,2)
(53,22,2)
(129,62,2)
(191,179,2)
(22,4,2)
(16,14,2)
(166,158,2)
(188,135,2)
(70,4,2)
(128,7,2)
(126,2,2)
(14,4,2)
(109,183,2)
(187,52,2)
(176,7,2)
(103,54,2)
(13,34,2)
(168,4,2)
(124,113,2)
(139,179,2)
(94,90,2)
(41,4,2)
(25,74,2)
(109,99,2)
(104,4,2)
(58,101,2)
(28,47,2)
(49,4,2)
(181,34,2)
(29,90,2)
(191,43,2)
(2,34,2)
(86,43,2)
(57,34,2)
(149,4,2)
(188,4,2)
(112,62,2)
(117,2,2)
(34,55,2)
(52,10,2)
(73,136,2)
(48,90,2)
(7,2,2)
(99,101,2)
(145,34,2)
(40,4,2)
(65,99,2)
(111,99,2)
(76,4,2)
(93,4,2)
(98,74,2)
(67,90,2)
(97,62,2)
(90,99,2)
(116,90,2)
(62,160,2)
(160,2,2)
(5,22,2)
(156,74,2)
(55,108,2)
(117,62,2)
(161,34,2)
(133,4,2)
(6,4,2)
(55,74,2)
(176,35,2)
(113,88,2)
(173,4,2)
(139,90,2)
(144,62,2)
(56,34,2)
(148,99,2)
(101,117,2)
(133,49,2)
(55,156,2)
(28,172,2)
(119,4,2)
(47,66,2)
(126,188,2)
(123,4,2)
(159,4,2)
(138,43,2)
(45,90,2)
(62,22,2)
(27,34,2)
-----------------------------------
(0,dataPtr1)
(1,)
(2,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(3,2)
(4,listenSocket == INVALID_SOCKET)
(5,listenSocket)
(6,s_addr)
(7,listenSocket != INVALID_SOCKET)
(8,NO_ERROR)
(9,wsaDataInit = 1)
(10,data = *dataPtr2)
(11,if (recvResult == SOCKET_ERROR || recvResult == 0)
(12,WSACleanup()
(13,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(14,service.sin_addr)
(15,acceptSocket = INVALID_SOCKET)
(16,service.sin_addr.s_addr)
(17,if (WSAStartup(MAKEWORD(2,2)
(18,dataPtr1)
(19,data)
(20,result)
(21,listenSocket)
(22,bind(listenSocket, (struct sockaddr*)
(23,)
(24,dataPtr2)
(25,wsaData)
(26,wsaDataInit)
(27,listenSocket)
(28,*dataPtr1 = data)
(29,\'\\\\0\')
(30,recvResult)
(31,printIntLine(result)
(32,)
(33,)
(34,WSAStartup(MAKEWORD(2,2)
(35,listenSocket = INVALID_SOCKET)
(36,data)
(37,)
(38,if (listenSocket == INVALID_SOCKET)
(39,dataPtr1)
(40,break;)
(41,service.sin_addr.s_addr = INADDR_ANY)
(42,service)
(43,recvResult == SOCKET_ERROR)
(44,wsaData)
(45,inputBuffer)
(46,)
(47,data = *dataPtr1)
(48,inputBuffer[recvResult] = '\\\\0')
(49,htons(TCP_PORT)
(50,SOCKET_ERROR)
(51,INVALID_SOCKET)
(52,data * data)
(53,LISTEN_BACKLOG)
(54,&service)
(55,WSAStartup(MAKEWORD(2,2)
(56,IPPROTO_TCP)
(57,AF_INET)
(58,CLOSE_SOCKET(acceptSocket)
(59,acceptSocket)
(60,acceptSocket)
(61,service)
(62,listen(listenSocket, LISTEN_BACKLOG)
(63,)
(64,dataPtr2)
(65,break;)
(66,*dataPtr1)
(67,atoi(inputBuffer)
(68,INVALID_SOCKET)
(69,)
(70,listenSocket)
(71,INVALID_SOCKET)
(72,data)
(73,acceptSocket)
(74,0)
(75,data)
(76,service)
(77,INVALID_SOCKET)
(78,result)
(79,)
(80,if (listenSocket != INVALID_SOCKET)
(81,data)
(82,CHAR_ARRAY_SIZE)
(83,listenSocket)
(84,data)
(85,listenSocket)
(86,recvResult)
(87,*dataPtr2)
(88,&data)
(89,if (acceptSocket != INVALID_SOCKET)
(90,recvResult == SOCKET_ERROR || recvResult == 0)
(91,'\\\\0')
(92,data)
(93,0)
(94,recvResult)
(95,struct sockaddr*)
(96,recvResult)
(97,acceptSocket)
(98,2)
(99,acceptSocket == SOCKET_ERROR)
(100,recvResult)
(101,acceptSocket = accept(listenSocket, NULL, NULL)
(102,wsaDataInit)
(103,memset(&service, 0, sizeof(service)
(104,TCP_PORT)
(105,SOCKET_ERROR)
(106,NULL)
(107,INVALID_SOCKET)
(108,&wsaData)
(109,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(110,data)
(111,0)
(112,NULL)
(113,*dataPtr1 = &data)
(114,0)
(115,inputBuffer[recvResult] = \'\\\\0\')
(116,data)
(117,accept(listenSocket, NULL, NULL)
(118,)
(119,service)
(120,break;)
(121,data)
(122,if (listen(listenSocket, LISTEN_BACKLOG)
(123,INADDR_ANY)
(124,*dataPtr1)
(125,sin_port)
(126,bind(listenSocket, (struct sockaddr*)
(127,data)
(128,listenSocket)
(129,break;)
(130,listenSocket)
(131,data = 0)
(132,inputBuffer)
(133,service.sin_port = htons(TCP_PORT)
(134,SOCKET_ERROR)
(135,&service)
(136,acceptSocket != INVALID_SOCKET)
(137,)
(138,0)
(139,inputBuffer[recvResult])
(140,listenSocket)
(141,result)
(142,break;)
(143,0)
(144,SOCKET_ERROR)
(145,1)
(146,service.sin_family = AF_INET)
(147,)
(148,acceptSocket)
(149,sin_addr)
(150,)
(151,)
(152,1)
(153,sin_family)
(154,)
(155,do)
(156,MAKEWORD(2,2)
(157,wsaDataInit)
(158,&data)
(159,service)
(160,listen(listenSocket, LISTEN_BACKLOG)
(161,break;)
(162,wsaDataInit = 0)
(163,dataPtr1)
(164,inputBuffer)
(165,service)
(166,*dataPtr2 = &data)
(167,wsaDataInit)
(168,sizeof(service)
(169,acceptSocket)
(170,acceptSocket)
(171,service.sin_port)
(172,data = atoi(inputBuffer)
(173,sizeof(service)
(174,service)
(175,RET)
(176,CLOSE_SOCKET(listenSocket)
(177,if (acceptSocket == SOCKET_ERROR)
(178,AF_INET)
(179,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(180,dataPtr2)
(181,SOCK_STREAM)
(182,data)
(183,CHAR_ARRAY_SIZE - 1)
(184,if (bind(listenSocket, (struct sockaddr*)
(185,service.sin_family)
(186,service)
(187,result = data * data)
(188,(struct sockaddr*)
(189,inputBuffer)
(190,if (wsaDataInit)
(191,recvResult == 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^