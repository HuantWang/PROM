-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_17_bad()
{
    int i,j;
    unsigned int data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
61,64
62,63
63,64
64,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,65,68,70,73,77,79
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_17_bad(){    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_17_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_postinc_17_bad
{    int i,j;    unsigned int data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(31,6,0)
(17,4,0)
(5,17,0)
(0,39,0)
(23,4,0)
(10,41,0)
(11,30,0)
(34,4,0)
(20,8,0)
(26,12,0)
(13,14,0)
(6,8,0)
(32,30,0)
(40,0,0)
(41,12,0)
(7,14,0)
(8,1,0)
(28,4,0)
(35,23,0)
(36,30,0)
(37,0,0)
(41,24,0)
(6,0,0)
(27,0,0)
(37,8,0)
(14,30,0)
(16,39,0)
(15,20,0)
(12,0,0)
(22,37,0)
(33,37,0)
(20,37,0)
(18,39,0)
(21,8,0)
(2,41,0)
(38,39,0)
(19,32,0)
(29,39,0)
(12,41,0)
(3,39,0)
(9,17,0)
(36,0,1)
(23,35,1)
(14,13,1)
(6,31,1)
(35,20,1)
(9,23,1)
(12,0,1)
(23,4,1)
(34,28,1)
(13,7,1)
(4,34,1)
(19,41,1)
(33,6,1)
(12,26,1)
(14,30,1)
(10,14,1)
(32,30,1)
(17,5,1)
(7,30,1)
(28,14,1)
(22,33,1)
(15,37,1)
(17,4,1)
(0,27,1)
(31,17,1)
(37,22,1)
(9,4,1)
(37,0,1)
(27,40,1)
(32,19,1)
(20,15,1)
(41,12,1)
(26,2,1)
(11,36,1)
(25,17,1)
(7,32,1)
(2,10,1)
(30,11,1)
(20,37,1)
(5,9,1)
(6,0,1)
(20,17,2)
(14,14,2)
(9,17,2)
(41,14,2)
(26,14,2)
(32,14,2)
(7,14,2)
(35,17,2)
(6,17,2)
(12,14,2)
(23,17,2)
(14,30,2)
(13,14,2)
(17,4,2)
(15,17,2)
(37,0,2)
(20,37,2)
(22,17,2)
(19,14,2)
(6,0,2)
(17,17,2)
(23,4,2)
(31,17,2)
(33,17,2)
(37,17,2)
(32,30,2)
(5,17,2)
(10,14,2)
(2,14,2)
(12,0,2)
(41,12,2)
-----------------------------------
(0,data = 0)
(1,)
(2,"%u")
(3,for(j = 0; j < 1; j++)
(4,j = 0)
(5,1)
(6,data++)
(7,i)
(8,)
(9,j)
(10,stdin)
(11,0)
(12,&data)
(13,1)
(14,i < 1)
(15,result)
(16,i)
(17,j < 1)
(18,j)
(19,i)
(20,printUnsignedLine(result)
(21,result)
(22,data)
(23,j++)
(24,)
(25,RET)
(26,data)
(27,0)
(28,j)
(29,for(i = 0; i < 1; i++)
(30,i = 0)
(31,data)
(32,i++)
(33,result)
(34,0)
(35,j)
(36,i)
(37,result = data)
(38,data)
(39,)
(40,data)
(41,fscanf (stdin, "%u", &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^