-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_fscanf_square_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%c", &data);
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
53,54
53,55
55,56
55,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,56,60,62,66,68
-----computeFrom-----
18,19
18,20
33,34
33,35
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_34_bad(){    char data;    CWE190_Integer_Overflow__char_fscanf_square_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_34_bad()
CWE190_Integer_Overflow__char_fscanf_square_34_bad
{    char data;    CWE190_Integer_Overflow__char_fscanf_square_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%c", &data);    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__char_fscanf_square_34_unionType myUnion;
CWE190_Integer_Overflow__char_fscanf_square_34_unionType
CWE190_Integer_Overflow__char_fscanf_square_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,32,0)
(5,19,0)
(14,3,0)
(24,32,0)
(4,21,0)
(0,11,0)
(0,22,0)
(2,3,0)
(16,30,0)
(29,28,0)
(18,0,0)
(9,20,0)
(7,30,0)
(3,19,0)
(20,19,0)
(23,18,0)
(1,19,0)
(10,14,0)
(32,14,0)
(11,14,0)
(15,0,0)
(28,30,0)
(28,26,0)
(18,22,0)
(26,19,0)
(12,11,0)
(30,19,0)
(11,0,0)
(6,22,0)
(22,3,0)
(14,32,0)
(27,26,0)
(17,21,0)
(20,26,0)
(13,26,0)
(21,20,0)
(30,28,0)
(31,11,0)
(20,26,1)
(8,24,1)
(28,29,1)
(15,14,1)
(24,10,1)
(11,14,1)
(30,28,1)
(26,27,1)
(7,16,1)
(32,8,1)
(16,26,1)
(9,21,1)
(11,12,1)
(28,26,1)
(20,9,1)
(25,18,1)
(23,0,1)
(4,30,1)
(21,17,1)
(18,0,1)
(12,31,1)
(10,20,1)
(27,13,1)
(14,32,1)
(0,11,1)
(31,15,1)
(18,23,1)
(17,4,1)
(29,7,1)
(14,32,2)
(11,14,2)
(20,26,2)
(18,0,2)
(28,26,2)
(30,28,2)
(0,11,2)
-----------------------------------
(0,result = data * data)
(1,data)
(2,data)
(3,)
(4,myUnion)
(5,myUnion)
(6,result)
(7,"%c")
(8,unionSecond)
(9,data)
(10,data)
(11,data * data)
(12,data)
(13,data)
(14,data = myUnion.unionSecond)
(15,result)
(16,stdin)
(17,unionFirst)
(18,printHexCharLine(result)
(19,)
(20,myUnion.unionFirst = data)
(21,myUnion.unionFirst)
(22,)
(23,result)
(24,myUnion)
(25,RET)
(26,data = \\\' \\\')
(27,\\\' \\\')
(28,&data)
(29,data)
(30,fscanf (stdin, "%c", &data)
(31,data)
(32,myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^