-----label-----
1
-----code-----
static void badSink()
{
    char data = CWE190_Integer_Overflow__char_rand_multiply_45_badData;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
20,21
21,22
21,23
23,24
23,25
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,8,10,13,17,18,22,24,28,29,33,35
-----computeFrom-----
15,16
15,17
26,27
26,28
-----guardedBy-----
17,28
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(){    char data = CWE190_Integer_Overflow__char_rand_multiply_45_badData;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
static void
badSink()
badSink
{    char data = CWE190_Integer_Overflow__char_rand_multiply_45_badData;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data = CWE190_Integer_Overflow__char_rand_multiply_45_badData;
char data = CWE190_Integer_Overflow__char_rand_multiply_45_badData;
char
data = CWE190_Integer_Overflow__char_rand_multiply_45_badData
data
= CWE190_Integer_Overflow__char_rand_multiply_45_badData
CWE190_Integer_Overflow__char_rand_multiply_45_badData
CWE190_Integer_Overflow__char_rand_multiply_45_badData
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,5,0)
(16,15,0)
(6,14,0)
(17,1,0)
(12,2,0)
(1,7,0)
(8,7,0)
(10,5,0)
(5,14,0)
(18,7,0)
(1,18,0)
(4,2,0)
(11,14,0)
(2,14,0)
(9,15,0)
(5,18,0)
(0,18,0)
(13,5,0)
(14,15,0)
(5,10,1)
(2,14,1)
(1,17,1)
(13,0,1)
(0,2,1)
(18,5,1)
(4,12,1)
(14,6,1)
(1,18,1)
(10,13,1)
(5,14,1)
(3,2,1)
(6,11,1)
(12,14,1)
(17,18,1)
(3,1,1)
(2,4,1)
(10,2,2)
(5,14,2)
(17,2,2)
(0,2,2)
(18,5,2)
(13,2,2)
(1,2,2)
(5,2,2)
(2,14,2)
(18,2,2)
(1,18,2)
-----------------------------------
(0,result)
(1,printHexCharLine(result)
(2,data > 0)
(3,RET)
(4,0)
(5,data * 2)
(6,CWE190_Integer_Overflow__char_rand_multiply_45_badData)
(7,)
(8,result)
(9,data)
(10,2)
(11,data)
(12,data)
(13,data)
(14,data = CWE190_Integer_Overflow__char_rand_multiply_45_badData)
(15,)
(16,if(data > 0)
(17,result)
(18,result = data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^