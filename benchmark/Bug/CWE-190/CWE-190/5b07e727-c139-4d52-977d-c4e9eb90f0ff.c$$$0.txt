-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_13_bad()
{
    unsigned int data;
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_13_bad(){    unsigned int data;    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_13_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_13_bad
{    unsigned int data;    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(18,16,0)
(29,17,0)
(2,13,0)
(5,7,0)
(7,12,0)
(6,27,0)
(26,27,0)
(3,19,0)
(15,7,0)
(7,5,0)
(16,2,0)
(21,2,0)
(24,23,0)
(28,5,0)
(13,9,0)
(8,27,0)
(22,1,0)
(10,23,0)
(2,1,0)
(1,5,0)
(7,15,0)
(12,7,0)
(20,17,0)
(25,1,0)
(1,19,0)
(19,27,0)
(4,13,0)
(1,2,0)
(16,13,0)
(14,19,0)
(5,0,0)
(15,28,1)
(14,3,1)
(20,29,1)
(1,19,1)
(1,5,1)
(19,14,1)
(7,15,1)
(11,16,1)
(5,7,1)
(1,25,1)
(22,21,1)
(18,2,1)
(29,19,1)
(2,1,1)
(7,12,1)
(24,10,1)
(16,18,1)
(10,17,1)
(17,20,1)
(23,24,1)
(28,17,1)
(16,2,1)
(11,23,1)
(21,23,1)
(25,22,1)
(10,5,1)
(7,15,2)
(16,23,2)
(5,7,2)
(21,23,2)
(7,12,2)
(16,2,2)
(1,5,2)
(1,23,2)
(2,23,2)
(25,23,2)
(5,17,2)
(15,17,2)
(7,17,2)
(28,17,2)
(2,1,2)
(1,19,2)
(22,23,2)
(18,23,2)
-----------------------------------
(0,)
(1,data * data)
(2,result = data * data)
(3,data)
(4,result)
(5,data = (unsigned int)
(6,if(GLOBAL_CONST_FIVE==5)
(7,(unsigned int)
(8,if(GLOBAL_CONST_FIVE==5)
(9,)
(10,GLOBAL_CONST_FIVE)
(11,RET)
(12,unsigned int)
(13,)
(14,0)
(15,RAND32()
(16,printUnsignedLine(result)
(17,GLOBAL_CONST_FIVE==5)
(18,result)
(19,data = 0)
(20,5)
(21,result)
(22,data)
(23,GLOBAL_CONST_FIVE==5)
(24,5)
(25,data)
(26,data)
(27,)
(28,data)
(29,GLOBAL_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^