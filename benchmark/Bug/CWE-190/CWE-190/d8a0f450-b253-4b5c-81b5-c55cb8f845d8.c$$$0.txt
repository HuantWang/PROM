-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_10_bad()
{
    unsigned int data;
    data = 0;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_10_bad(){    unsigned int data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_10_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_10_bad
{    unsigned int data;    data = 0;    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(14,17,0)
(5,28,0)
(3,7,0)
(5,29,0)
(26,5,0)
(12,23,0)
(23,8,0)
(25,3,0)
(23,28,0)
(7,3,0)
(18,16,0)
(15,5,0)
(13,7,0)
(24,17,0)
(10,20,0)
(3,29,0)
(0,17,0)
(7,27,0)
(9,8,0)
(11,29,0)
(19,29,0)
(29,17,0)
(21,28,0)
(6,7,0)
(28,5,0)
(28,8,0)
(22,16,0)
(16,29,0)
(1,23,1)
(16,29,1)
(23,28,1)
(28,5,1)
(2,4,1)
(25,6,1)
(23,12,1)
(5,26,1)
(3,29,1)
(2,7,1)
(1,2,1)
(16,18,1)
(7,3,1)
(21,16,1)
(13,4,1)
(6,13,1)
(11,19,1)
(18,22,1)
(12,28,1)
(5,29,1)
(26,15,1)
(15,21,1)
(1,16,1)
(22,2,1)
(3,25,1)
(29,11,1)
(4,29,1)
(21,16,2)
(18,2,2)
(3,4,2)
(15,16,2)
(6,4,2)
(25,4,2)
(5,29,2)
(23,16,2)
(16,29,2)
(12,16,2)
(23,28,2)
(7,4,2)
(3,29,2)
(26,16,2)
(7,3,2)
(13,4,2)
(16,2,2)
(28,5,2)
(5,16,2)
(28,16,2)
(22,2,2)
-----------------------------------
(0,if(globalTrue)
(1,RET)
(2,globalTrue)
(3,&data)
(4,globalTrue)
(5,data * 2)
(6,"%u")
(7,fscanf (stdin, "%u", &data)
(8,)
(9,result)
(10,if(data > 0)
(11,0)
(12,result)
(13,stdin)
(14,if(globalTrue)
(15,data)
(16,data > 0)
(17,)
(18,0)
(19,data)
(20,)
(21,result)
(22,data)
(23,printUnsignedLine(result)
(24,data)
(25,data)
(26,2)
(27,)
(28,result = data * 2)
(29,data = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^