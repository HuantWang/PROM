-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_34_bad()
{
    int data;
    CWE190_Integer_Overflow__int_fgets_multiply_34_unionType myUnion;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = data;
    {
        int data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
72,73
72,74
74,75
74,76
76,77
77,78
77,79
78,79
81,82
81,83
82,83
82,84
83,84
86,87
86,88
87,88
88,89
88,90
90,91
90,92
92,93
93,94
93,95
94,95
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,66,67,69,73,75,79,80,84,85,89,91,95,96,100,102
-----computeFrom-----
18,19
18,20
34,35
34,36
48,49
48,50
63,64
63,65
82,83
82,84
93,94
93,95
-----guardedBy-----
39,55
84,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_34_bad(){    int data;    CWE190_Integer_Overflow__int_fgets_multiply_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_34_bad()
CWE190_Integer_Overflow__int_fgets_multiply_34_bad
{    int data;    CWE190_Integer_Overflow__int_fgets_multiply_34_unionType myUnion;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = data;    {        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
CWE190_Integer_Overflow__int_fgets_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int_fgets_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__int_fgets_multiply_34_unionType
CWE190_Integer_Overflow__int_fgets_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            data = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            data = atoi(inputBuffer);        }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
int data = myUnion.unionSecond;
int data = myUnion.unionSecond;
int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(48,21,0)
(43,18,0)
(17,15,0)
(13,44,0)
(16,24,0)
(21,12,0)
(34,9,0)
(23,31,0)
(9,1,0)
(29,12,0)
(42,14,0)
(31,26,0)
(14,15,0)
(8,18,0)
(17,14,0)
(22,40,0)
(2,48,0)
(48,14,0)
(3,50,0)
(28,22,0)
(41,40,0)
(37,22,0)
(31,1,0)
(19,7,0)
(39,24,0)
(6,21,0)
(26,24,0)
(51,12,0)
(12,21,0)
(45,22,0)
(31,24,0)
(35,26,0)
(1,10,0)
(0,26,0)
(50,32,0)
(4,21,0)
(38,48,0)
(47,7,0)
(22,44,0)
(25,30,0)
(1,9,0)
(21,18,0)
(9,40,0)
(18,24,0)
(36,40,0)
(7,24,0)
(27,30,0)
(14,48,0)
(30,31,0)
(44,22,0)
(20,4,0)
(5,4,0)
(40,7,0)
(46,1,0)
(33,15,0)
(11,17,0)
(6,31,1)
(44,22,1)
(17,14,1)
(51,6,1)
(20,21,1)
(1,9,1)
(38,2,1)
(45,40,1)
(30,27,1)
(49,17,1)
(9,40,1)
(14,48,1)
(42,4,1)
(46,44,1)
(5,20,1)
(4,21,1)
(0,35,1)
(3,44,1)
(4,5,1)
(17,11,1)
(28,37,1)
(31,26,1)
(25,1,1)
(40,41,1)
(44,13,1)
(48,38,1)
(21,12,1)
(31,23,1)
(31,1,1)
(11,14,1)
(23,30,1)
(9,34,1)
(29,51,1)
(41,36,1)
(13,22,1)
(36,26,1)
(22,28,1)
(50,3,1)
(34,46,1)
(27,25,1)
(2,42,1)
(22,40,1)
(49,4,1)
(26,0,1)
(37,45,1)
(12,29,1)
(25,50,1)
(48,21,1)
(48,21,2)
(3,44,2)
(17,14,2)
(44,22,2)
(9,40,2)
(9,44,2)
(11,4,2)
(22,40,2)
(1,44,2)
(31,1,2)
(14,48,2)
(34,44,2)
(2,4,2)
(21,12,2)
(46,44,2)
(31,26,2)
(38,4,2)
(14,4,2)
(48,4,2)
(1,9,2)
(17,4,2)
(50,44,2)
(42,4,2)
(4,21,2)
-----------------------------------
(0,0)
(1,data = atoi(inputBuffer)
(2,data)
(3,"fgets()
(4,data > 0)
(5,0)
(6,data)
(7,)
(8,if(data > 0)
(9,atoi(inputBuffer)
(10,)
(11,result)
(12,myUnion.unionSecond)
(13,NULL)
(14,result = data * 2)
(15,)
(16,data)
(17,printIntLine(result)
(18,)
(19,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,data)
(21,data = myUnion.unionSecond)
(22,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,data)
(24,)
(25,myUnion)
(26,data = 0)
(27,unionFirst)
(28,stdin)
(29,unionSecond)
(30,myUnion.unionFirst)
(31,myUnion.unionFirst = data)
(32,)
(33,result)
(34,inputBuffer)
(35,data)
(36,inputBuffer)
(37,CHAR_ARRAY_SIZE)
(38,2)
(39,myUnion)
(40,inputBuffer[CHAR_ARRAY_SIZE] = "")
(41,"")
(42,result)
(43,data)
(44,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(45,inputBuffer)
(46,data)
(47,inputBuffer)
(48,data * 2)
(49,RET)
(50,printLine("fgets()
(51,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^