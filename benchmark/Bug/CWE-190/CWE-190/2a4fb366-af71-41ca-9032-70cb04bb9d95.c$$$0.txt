-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_square_03_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
62,64
65,66
66,67
66,68
67,68
68,69
68,70
70,71
70,72
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,64,69,71,75,77,81,83
-----computeFrom-----
12,13
12,14
17,18
17,19
33,34
33,35
47,48
47,49
62,63
62,64
73,74
73,75
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_square_03_bad(){    int data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_square_03_bad()
CWE190_Integer_Overflow__int_fgets_square_03_bad
{    int data;    /* Initialize data */    data = 0;    if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
5==5
5
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(5==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(24,41,0)
(8,21,0)
(5,14,0)
(11,19,0)
(39,40,0)
(44,43,0)
(38,41,0)
(18,14,0)
(43,15,0)
(44,29,0)
(40,25,0)
(13,33,0)
(31,43,0)
(27,24,0)
(22,26,0)
(28,19,0)
(29,44,0)
(3,28,0)
(42,44,0)
(9,36,0)
(10,29,0)
(37,29,0)
(0,34,0)
(25,34,0)
(41,24,0)
(33,43,0)
(17,24,0)
(40,36,0)
(12,25,0)
(1,19,0)
(34,4,0)
(16,24,0)
(24,25,0)
(33,44,0)
(23,19,0)
(32,25,0)
(6,26,0)
(36,35,0)
(20,34,0)
(21,7,0)
(2,28,0)
(29,36,0)
(36,40,0)
(29,28,0)
(29,28,1)
(36,40,1)
(29,37,1)
(14,5,1)
(13,44,1)
(40,39,1)
(5,18,1)
(40,25,1)
(12,26,1)
(16,17,1)
(39,9,1)
(24,16,1)
(42,14,1)
(28,2,1)
(30,33,1)
(41,24,1)
(25,32,1)
(24,25,1)
(2,3,1)
(18,36,1)
(30,14,1)
(41,38,1)
(33,13,1)
(21,8,1)
(26,6,1)
(29,36,1)
(10,42,1)
(17,27,1)
(6,22,1)
(18,26,1)
(9,41,1)
(44,29,1)
(32,12,1)
(8,41,1)
(27,25,1)
(37,10,1)
(33,44,1)
(38,24,1)
(22,28,1)
(18,21,1)
(29,14,2)
(27,26,2)
(44,29,2)
(33,44,2)
(41,26,2)
(10,14,2)
(32,26,2)
(29,28,2)
(40,25,2)
(39,41,2)
(38,26,2)
(33,14,2)
(41,24,2)
(8,41,2)
(36,41,2)
(24,26,2)
(16,26,2)
(40,41,2)
(25,26,2)
(9,41,2)
(29,36,2)
(13,14,2)
(24,25,2)
(12,26,2)
(42,14,2)
(21,41,2)
(37,14,2)
(17,26,2)
(36,40,2)
(44,14,2)
-----------------------------------
(0,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,if(5==5)
(2,0)
(3,data)
(4,)
(5,5)
(6,5)
(7,)
(8,"fgets()
(9,data)
(10,data)
(11,if(5==5)
(12,inputBuffer)
(13,result)
(14,5==5)
(15,)
(16,stdin)
(17,CHAR_ARRAY_SIZE)
(18,5)
(19,)
(20,inputBuffer)
(21,printLine("fgets()
(22,5)
(23,data)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,inputBuffer[CHAR_ARRAY_SIZE] = "")
(26,5==5)
(27,inputBuffer)
(28,data = 0)
(29,data * data)
(30,RET)
(31,result)
(32,"")
(33,printIntLine(result)
(34,)
(35,)
(36,data = atoi(inputBuffer)
(37,data)
(38,NULL)
(39,inputBuffer)
(40,atoi(inputBuffer)
(41,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,result)
(43,)
(44,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^