-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_01_bad()
{
    char data;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
        char result = data * 2;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
28,29
28,30
29,30
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,31,35,37,41,42,46,48
-----computeFrom-----
12,13
12,14
17,18
17,19
28,29
28,30
39,40
39,41
-----guardedBy-----
30,41
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_01_bad(){    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_rand_multiply_01_bad()
CWE190_Integer_Overflow__char_rand_multiply_01_bad
{    char data;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */        char result = data * 2;        printHexCharLine(result);    }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(17,13,0)
(4,13,0)
(12,19,0)
(9,1,0)
(3,1,0)
(21,1,0)
(7,6,0)
(0,5,0)
(14,16,0)
(23,6,0)
(16,14,0)
(16,8,0)
(6,13,0)
(10,4,0)
(20,13,0)
(19,21,0)
(2,23,0)
(8,16,0)
(11,21,0)
(1,6,0)
(1,21,0)
(18,4,0)
(19,5,0)
(6,16,0)
(21,5,0)
(15,23,0)
(16,6,0)
(19,21,1)
(7,4,1)
(19,12,1)
(1,9,1)
(16,8,1)
(2,6,1)
(22,19,1)
(14,7,1)
(4,18,1)
(18,10,1)
(23,6,1)
(3,11,1)
(16,14,1)
(9,3,1)
(15,2,1)
(1,6,1)
(21,1,1)
(12,21,1)
(11,23,1)
(6,16,1)
(22,23,1)
(23,15,1)
(11,23,2)
(9,23,2)
(19,21,2)
(1,6,2)
(12,23,2)
(16,14,2)
(6,16,2)
(21,1,2)
(23,6,2)
(19,23,2)
(3,23,2)
(16,8,2)
(21,23,2)
(1,23,2)
-----------------------------------
(0,result)
(1,data * 2)
(2,data)
(3,data)
(4,data = ' ')
(5,)
(6,data = (char)
(7,data)
(8,char)
(9,2)
(10,data)
(11,result)
(12,result)
(13,)
(14,RAND32()
(15,0)
(16,(char)
(17,data)
(18,' ')
(19,printHexCharLine(result)
(20,if(data > 0)
(21,result = data * 2)
(22,RET)
(23,data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^