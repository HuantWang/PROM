-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_31_bad()
{
    unsigned int data;
    data = 0;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = UINT_MAX;
    {
        unsigned int dataCopy = data;
        unsigned int data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
28,29
29,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,21,25,27,30,33,35,38,42,43,47,49,53,54,58,60
-----computeFrom-----
12,13
12,14
17,18
17,19
40,41
40,42
51,52
51,53
-----guardedBy-----
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_multiply_31_bad(){    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    {        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_multiply_31_bad()
CWE190_Integer_Overflow__unsigned_int_max_multiply_31_bad
{    unsigned int data;    data = 0;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = UINT_MAX;    {        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
{        unsigned int dataCopy = data;        unsigned int data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int dataCopy = data;
unsigned int dataCopy = data;
unsigned int
dataCopy = data
dataCopy
= data
data
data
unsigned int data = dataCopy;
unsigned int data = dataCopy;
unsigned int
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(29,17,0)
(17,13,0)
(14,24,0)
(3,15,0)
(10,17,0)
(14,15,0)
(16,13,0)
(27,10,0)
(4,6,0)
(11,26,0)
(19,24,0)
(24,17,0)
(28,13,0)
(30,17,0)
(22,28,0)
(15,26,0)
(20,24,0)
(25,17,0)
(7,14,0)
(23,16,0)
(8,15,0)
(15,14,0)
(10,16,0)
(0,13,0)
(1,10,0)
(3,26,0)
(9,6,0)
(6,24,0)
(5,16,0)
(12,28,0)
(21,3,0)
(18,14,0)
(24,10,0)
(18,7,1)
(14,24,1)
(23,28,1)
(1,16,1)
(5,23,1)
(12,22,1)
(6,4,1)
(7,8,1)
(15,14,1)
(3,15,1)
(9,24,1)
(20,19,1)
(8,6,1)
(2,3,1)
(6,24,1)
(10,16,1)
(28,12,1)
(21,15,1)
(10,27,1)
(2,6,1)
(27,1,1)
(16,5,1)
(24,10,1)
(4,9,1)
(14,18,1)
(19,10,1)
(24,20,1)
(3,21,1)
(10,16,2)
(14,24,2)
(15,6,2)
(18,6,2)
(8,6,2)
(21,6,2)
(3,15,2)
(3,6,2)
(6,24,2)
(7,6,2)
(15,14,2)
(24,10,2)
(14,6,2)
-----------------------------------
(0,data)
(1,dataCopy)
(2,RET)
(3,printUnsignedLine(result)
(4,0)
(5,UINT_MAX)
(6,data > 0)
(7,data)
(8,result)
(9,data)
(10,dataCopy = data)
(11,result)
(12,0)
(13,)
(14,data * 2)
(15,result = data * 2)
(16,data = UINT_MAX)
(17,)
(18,2)
(19,data)
(20,dataCopy)
(21,result)
(22,data)
(23,data)
(24,data = dataCopy)
(25,dataCopy)
(26,)
(27,data)
(28,data = 0)
(29,if(data > 0)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^