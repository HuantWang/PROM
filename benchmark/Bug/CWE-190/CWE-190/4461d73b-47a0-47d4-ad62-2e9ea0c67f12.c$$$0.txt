-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_multiply_31_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    {
        short dataCopy = data;
        short data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
21,23
24,25
25,26
27,28
27,29
27,30
28,29
29,30
29,31
31,32
31,33
33,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,14,15,19,22,23,26,30,32,35,38,40,43,47,48,52,54,58,59,63,65
-----computeFrom-----
12,13
12,14
17,18
17,19
45,46
45,47
56,57
56,58
-----guardedBy-----
47,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_multiply_31_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_multiply_31_bad()
CWE190_Integer_Overflow__short_rand_multiply_31_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    {        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
{        short dataCopy = data;        short data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
short dataCopy = data;
short dataCopy = data;
short
dataCopy = data
dataCopy
= data
data
data
short data = dataCopy;
short data = dataCopy;
short
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(23,3,0)
(19,12,0)
(11,7,0)
(30,3,0)
(12,19,0)
(32,22,0)
(1,5,0)
(12,31,0)
(15,22,0)
(21,13,0)
(9,26,0)
(7,11,0)
(18,30,0)
(5,8,0)
(25,7,0)
(20,5,0)
(16,15,0)
(0,26,0)
(8,30,0)
(12,23,0)
(17,8,0)
(11,22,0)
(24,11,0)
(27,23,0)
(15,11,0)
(2,30,0)
(29,7,0)
(23,12,0)
(10,13,0)
(28,3,0)
(7,5,0)
(31,12,0)
(26,3,0)
(8,23,0)
(4,8,0)
(6,30,0)
(13,5,0)
(5,30,0)
(29,25,1)
(7,29,1)
(15,16,1)
(1,8,1)
(5,8,1)
(4,23,1)
(27,26,1)
(8,17,1)
(0,9,1)
(20,1,1)
(15,11,1)
(31,27,1)
(21,10,1)
(26,0,1)
(14,15,1)
(16,11,1)
(13,21,1)
(8,23,1)
(12,19,1)
(12,31,1)
(14,13,1)
(17,4,1)
(23,12,1)
(11,7,1)
(10,5,1)
(5,20,1)
(24,13,1)
(25,24,1)
(7,5,1)
(13,5,1)
(7,13,2)
(29,13,2)
(8,23,2)
(7,5,2)
(11,13,2)
(16,13,2)
(23,12,2)
(15,11,2)
(24,13,2)
(12,31,2)
(11,7,2)
(15,13,2)
(25,13,2)
(13,5,2)
(5,8,2)
(12,19,2)
-----------------------------------
(0,0)
(1,data)
(2,dataCopy)
(3,)
(4,dataCopy)
(5,data = dataCopy)
(6,data)
(7,data * 2)
(8,dataCopy = data)
(9,data)
(10,data)
(11,result = data * 2)
(12,(short)
(13,data > 0)
(14,RET)
(15,printIntLine(result)
(16,result)
(17,data)
(18,if(data > 0)
(19,short)
(20,dataCopy)
(21,0)
(22,)
(23,data = (short)
(24,result)
(25,data)
(26,data = 0)
(27,data)
(28,data)
(29,2)
(30,)
(31,RAND32()
(32,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^