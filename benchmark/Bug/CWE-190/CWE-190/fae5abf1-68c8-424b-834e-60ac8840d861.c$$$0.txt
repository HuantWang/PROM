-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
57,58
58,59
60,61
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,43,46,51,52,55,56,59,64,66,70,72,76,78
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
49,50
49,51
53,54
53,55
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_square_17_bad()
CWE190_Integer_Overflow__short_fscanf_square_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(3,10,0)
(16,37,0)
(8,37,0)
(31,18,0)
(24,37,0)
(40,37,0)
(11,38,0)
(5,7,0)
(41,3,0)
(20,11,0)
(22,38,0)
(13,17,0)
(7,4,0)
(0,10,0)
(10,7,0)
(29,7,0)
(19,37,0)
(21,11,0)
(6,31,0)
(36,12,0)
(1,29,0)
(15,18,0)
(25,3,0)
(33,18,0)
(23,17,0)
(29,10,0)
(18,35,0)
(14,13,0)
(39,37,0)
(31,8,0)
(3,8,0)
(12,17,0)
(10,3,0)
(30,38,0)
(9,8,0)
(26,30,0)
(32,8,0)
(2,38,0)
(27,12,0)
(18,31,0)
(34,17,0)
(34,23,1)
(27,13,1)
(8,9,1)
(30,26,1)
(26,18,1)
(9,32,1)
(23,11,1)
(29,1,1)
(6,15,1)
(30,38,1)
(29,10,1)
(11,38,1)
(31,6,1)
(11,21,1)
(1,10,1)
(22,2,1)
(0,12,1)
(41,0,1)
(20,30,1)
(12,36,1)
(38,22,1)
(12,17,1)
(21,20,1)
(25,41,1)
(31,8,1)
(3,8,1)
(3,25,1)
(28,12,1)
(20,38,1)
(17,34,1)
(2,8,1)
(14,29,1)
(15,33,1)
(10,3,1)
(13,14,1)
(36,27,1)
(18,31,1)
(27,17,1)
(13,17,1)
(33,11,1)
(13,17,2)
(0,12,2)
(1,12,2)
(14,12,2)
(18,11,2)
(36,12,2)
(3,8,2)
(12,17,2)
(20,11,2)
(25,12,2)
(30,11,2)
(18,31,2)
(15,11,2)
(11,11,2)
(11,38,2)
(6,11,2)
(10,12,2)
(27,12,2)
(41,12,2)
(31,11,2)
(12,12,2)
(3,12,2)
(33,11,2)
(30,38,2)
(29,12,2)
(21,11,2)
(31,8,2)
(29,10,2)
(10,3,2)
(26,11,2)
(13,12,2)
-----------------------------------
(0,result)
(1,result)
(2,i)
(3,data * data)
(4,)
(5,result)
(6,data)
(7,)
(8,data = 0)
(9,0)
(10,result = data * data)
(11,i < 1)
(12,j < 1)
(13,j++)
(14,j)
(15,"%hd")
(16,i)
(17,j = 0)
(18,fscanf (stdin, "%hd", &data)
(19,data)
(20,i)
(21,1)
(22,0)
(23,j)
(24,j)
(25,data)
(26,i)
(27,j)
(28,RET)
(29,printIntLine(result)
(30,i++)
(31,&data)
(32,data)
(33,stdin)
(34,0)
(35,)
(36,1)
(37,)
(38,i = 0)
(39,for(i = 0; i < 1; i++)
(40,for(j = 0; j < 1; j++)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^