-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_square_11_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_square_11_bad(){    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_square_11_bad()
CWE190_Integer_Overflow__char_fscanf_square_11_bad
{    char data;    data = ' ';    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(11,7,0)
(7,3,0)
(0,5,0)
(13,7,0)
(19,8,0)
(18,20,0)
(15,0,0)
(16,3,0)
(23,5,0)
(25,8,0)
(24,3,0)
(22,5,0)
(14,21,0)
(20,8,0)
(8,7,0)
(1,3,0)
(18,14,0)
(0,7,0)
(5,0,0)
(20,14,0)
(8,20,0)
(10,18,0)
(6,20,0)
(5,4,0)
(2,14,0)
(15,22,1)
(5,0,1)
(12,5,1)
(7,13,1)
(25,6,1)
(19,25,1)
(8,7,1)
(6,12,1)
(9,12,1)
(0,7,1)
(18,10,1)
(12,17,1)
(18,20,1)
(10,20,1)
(22,23,1)
(13,11,1)
(20,8,1)
(9,18,1)
(8,19,1)
(23,17,1)
(17,7,1)
(0,15,1)
(15,17,2)
(10,12,2)
(5,17,2)
(22,17,2)
(25,12,2)
(20,8,2)
(23,17,2)
(8,12,2)
(18,20,2)
(18,12,2)
(8,7,2)
(19,12,2)
(0,17,2)
(5,0,2)
(20,12,2)
(0,7,2)
(6,12,2)
-----------------------------------
(0,&data)
(1,if(globalReturnsTrue()
(2,result)
(3,)
(4,)
(5,fscanf (stdin, "%c", &data)
(6,result)
(7,data = \\\' \\\')
(8,data * data)
(9,RET)
(10,result)
(11,data)
(12,globalReturnsTrue()
(13,\\\' \\\')
(14,)
(15,data)
(16,data)
(17,globalReturnsTrue()
(18,printHexCharLine(result)
(19,data)
(20,result = data * data)
(21,)
(22,"%c")
(23,stdin)
(24,if(globalReturnsTrue()
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^