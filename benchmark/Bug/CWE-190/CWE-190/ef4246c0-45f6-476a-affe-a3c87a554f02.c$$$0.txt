-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_16_bad()
{
    char data;
    data = ' ';
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
28,29
28,30
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,27,32,33,37,39,43,44,48,50,51
-----computeFrom-----
12,13
12,14
20,21
20,22
30,31
30,32
41,42
41,43
-----guardedBy-----
32,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_16_bad(){    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__char_max_multiply_16_bad()
CWE190_Integer_Overflow__char_max_multiply_16_bad
{    char data;    data = ' ';    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
-----joern-----
(18,8,0)
(20,4,0)
(21,8,0)
(23,8,0)
(21,4,0)
(22,20,0)
(26,28,0)
(3,14,0)
(25,20,0)
(20,5,0)
(5,28,0)
(13,4,0)
(15,28,0)
(19,4,0)
(1,26,0)
(26,5,0)
(6,21,0)
(30,14,0)
(11,10,0)
(27,10,0)
(8,16,0)
(20,8,0)
(4,10,0)
(17,10,0)
(0,21,0)
(9,16,0)
(24,5,0)
(5,20,0)
(2,7,1)
(21,0,1)
(18,7,1)
(9,8,1)
(6,2,1)
(21,4,1)
(2,9,1)
(0,6,1)
(20,8,1)
(1,5,1)
(8,23,1)
(26,1,1)
(22,25,1)
(20,4,1)
(7,4,1)
(20,22,1)
(21,8,1)
(5,20,1)
(3,21,1)
(23,18,1)
(4,13,1)
(3,26,1)
(29,2,1)
(13,19,1)
(25,24,1)
(26,5,1)
(29,3,1)
(24,21,1)
(0,2,2)
(1,21,2)
(23,7,2)
(24,21,2)
(26,21,2)
(21,4,2)
(21,8,2)
(5,20,2)
(25,21,2)
(8,7,2)
(26,5,2)
(9,7,2)
(6,2,2)
(18,7,2)
(3,2,2)
(20,21,2)
(20,8,2)
(21,2,2)
(20,4,2)
(22,21,2)
(5,21,2)
-----------------------------------
(0,0)
(1,result)
(2,1)
(3,break;)
(4,data = ' ')
(5,result = data * 2)
(6,data)
(7,1)
(8,data = CHAR_MAX)
(9,break;)
(10,)
(11,while(1)
(12,data = \' \')
(13,' ')
(14,)
(15,result)
(16,)
(17,data)
(18,data)
(19,data)
(20,data * 2)
(21,data > 0)
(22,2)
(23,CHAR_MAX)
(24,result)
(25,data)
(26,printHexCharLine(result)
(27,while(1)
(28,)
(29,RET)
(30,if(data > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^