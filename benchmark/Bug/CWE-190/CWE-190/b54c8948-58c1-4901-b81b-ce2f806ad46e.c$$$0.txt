-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_16_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
        break;
    }
    while(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
19,20
20,21
20,22
21,22
23,24
26,27
26,28
28,29
28,30
29,30
29,31
30,31
31,32
31,33
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,27,32,34,38,40,44,46,47
-----computeFrom-----
12,13
12,14
20,21
20,22
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_16_bad(){    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int_max_square_16_bad()
CWE190_Integer_Overflow__int_max_square_16_bad
{    int data;    /* Initialize data */    data = 0;    while(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    }    while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;        break;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
break;
while(1)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }        break;    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
-----joern-----
(0,10,0)
(25,2,0)
(16,12,0)
(8,0,0)
(9,10,0)
(3,25,0)
(7,23,0)
(10,25,0)
(14,6,0)
(5,2,0)
(1,25,0)
(15,17,0)
(22,12,0)
(10,0,0)
(10,17,0)
(19,0,0)
(0,23,0)
(21,10,0)
(23,6,0)
(18,12,0)
(19,23,0)
(24,17,0)
(11,19,0)
(17,12,0)
(17,24,1)
(11,0,1)
(9,21,1)
(19,0,1)
(8,4,1)
(5,25,1)
(4,5,1)
(4,20,1)
(0,10,1)
(19,11,1)
(3,1,1)
(13,4,1)
(13,14,1)
(21,8,1)
(10,25,1)
(25,3,1)
(10,9,1)
(24,15,1)
(1,20,1)
(10,17,1)
(14,19,1)
(20,17,1)
(8,4,2)
(9,4,2)
(19,0,2)
(25,20,2)
(5,20,2)
(10,17,2)
(11,4,2)
(14,4,2)
(21,4,2)
(1,20,2)
(10,25,2)
(0,10,2)
(19,4,2)
(0,4,2)
(10,4,2)
(3,20,2)
-----------------------------------
(0,result = data * data)
(1,data)
(2,)
(3,INT_MAX)
(4,1)
(5,break;)
(6,)
(7,result)
(8,result)
(9,data)
(10,data * data)
(11,result)
(12,)
(13,RET)
(14,break;)
(15,data)
(16,data)
(17,data = 0)
(18,while(1)
(19,printIntLine(result)
(20,1)
(21,data)
(22,while(1)
(23,)
(24,0)
(25,data = INT_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^