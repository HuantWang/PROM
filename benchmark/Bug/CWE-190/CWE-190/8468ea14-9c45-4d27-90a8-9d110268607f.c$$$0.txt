-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_multiply_05_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(staticTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_multiply_05_bad(){    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_multiply_05_bad()
CWE190_Integer_Overflow__int_fscanf_multiply_05_bad
{    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticTrue
staticTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(0,12,0)
(15,1,0)
(10,9,0)
(6,25,0)
(27,7,0)
(21,9,0)
(1,9,0)
(6,20,0)
(16,6,0)
(13,25,0)
(22,27,0)
(14,25,0)
(12,1,0)
(19,20,0)
(25,20,0)
(28,12,0)
(14,1,0)
(4,14,0)
(5,14,0)
(7,1,0)
(18,27,0)
(29,1,0)
(11,3,0)
(25,14,0)
(8,7,0)
(7,27,0)
(2,9,0)
(27,23,0)
(4,13,1)
(17,27,1)
(1,15,1)
(7,1,1)
(7,8,1)
(8,22,1)
(14,5,1)
(0,28,1)
(12,0,1)
(15,29,1)
(6,25,1)
(24,17,1)
(22,18,1)
(18,26,1)
(12,1,1)
(17,26,1)
(5,4,1)
(24,6,1)
(28,17,1)
(13,12,1)
(25,14,1)
(16,25,1)
(6,16,1)
(26,1,1)
(24,12,1)
(27,7,1)
(14,1,1)
(13,12,2)
(0,17,2)
(25,14,2)
(8,26,2)
(28,17,2)
(22,26,2)
(18,26,2)
(12,1,2)
(27,7,2)
(25,12,2)
(27,26,2)
(7,1,2)
(14,1,2)
(6,25,2)
(12,17,2)
(16,12,2)
(14,12,2)
(6,12,2)
(7,26,2)
(5,12,2)
(4,12,2)
-----------------------------------
(0,0)
(1,data = 0)
(2,data)
(3,)
(4,data)
(5,2)
(6,printIntLine(result)
(7,&data)
(8,data)
(9,)
(10,if(staticTrue)
(11,if(data > 0)
(12,data > 0)
(13,result)
(14,data * 2)
(15,0)
(16,result)
(17,staticTrue)
(18,stdin)
(19,result)
(20,)
(21,if(staticTrue)
(22,"%d")
(23,)
(24,RET)
(25,result = data * 2)
(26,staticTrue)
(27,fscanf(stdin, "%d", &data)
(28,data)
(29,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^