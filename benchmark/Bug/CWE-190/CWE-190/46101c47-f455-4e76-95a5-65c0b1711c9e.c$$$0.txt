-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_postinc_15_bad()
{
    int64_t data;
    data = 0LL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        data++;
        int64_t result = data;
        printLongLongLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
25,26
26,27
26,28
27,28
31,32
31,33
33,34
33,35
33,36
33,37
33,38
33,39
34,35
36,37
36,38
36,39
37,38
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
58,59
59,60
59,61
60,61
-----nextToken-----
2,4,9,11,15,16,18,21,23,24,28,29,30,32,35,40,44,46,49,53,55,56,57,61,62,63
-----computeFrom-----
13,14
13,15
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ProblemStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_postinc_15_bad(){    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_postinc_15_bad()
CWE190_Integer_Overflow__int64_t_fscanf_postinc_15_bad
{    int64_t data;    data = 0LL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%" SCNd64, &data);
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int64_t result = data;        printLongLongLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        data++;        int64_t result = data;        printLongLongLine(result);    }
data++;
data++
data
data
int64_t result = data;
int64_t result = data;
int64_t
int64_t
result = data
result
= data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(24,7,0)
(19,11,0)
(22,7,0)
(11,7,0)
(23,10,0)
(6,11,0)
(30,10,0)
(28,0,0)
(17,19,0)
(27,7,0)
(20,10,0)
(4,11,0)
(5,29,0)
(16,10,0)
(25,4,0)
(12,0,0)
(9,0,0)
(29,11,0)
(1,28,0)
(2,7,0)
(8,0,0)
(21,29,0)
(13,27,0)
(26,0,0)
(4,29,0)
(15,7,0)
(17,18,1)
(4,29,1)
(3,24,1)
(5,21,1)
(28,1,1)
(15,27,1)
(29,5,1)
(27,13,1)
(21,19,1)
(4,25,1)
(19,17,1)
(14,30,1)
(18,8,1)
(24,4,1)
(1,14,1)
(13,18,1)
(25,29,1)
(12,14,1)
(18,12,1)
(3,15,1)
(8,28,1)
(1,14,2)
(24,18,2)
(19,18,2)
(4,18,2)
(4,29,2)
(29,18,2)
(5,18,2)
(27,18,2)
(17,18,2)
(28,14,2)
(25,18,2)
(15,18,2)
(21,18,2)
(13,18,2)
(12,14,2)
(8,14,2)
-----------------------------------
(0,)
(1,"Benign, fixed string")
(2,case 7:)
(3,RET)
(4,printLongLongLine(result)
(5,data)
(6,result)
(7,)
(8,break;)
(9,default:)
(10,)
(11,)
(12,break;)
(13,"Benign, fixed string")
(14,6)
(15,break;)
(16,switch(7)
(17,data)
(18,7)
(19,data++)
(20,switch(6)
(21,result)
(22,default:)
(23,data)
(24,break;)
(25,result)
(26,case 6:)
(27,printLine("Benign, fixed string")
(28,printLine("Benign, fixed string")
(29,result = data)
(30,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^