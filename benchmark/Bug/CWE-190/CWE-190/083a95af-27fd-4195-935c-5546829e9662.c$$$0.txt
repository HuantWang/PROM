-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_06_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum value for this type */
        data = INT_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_06_bad(){    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_max_square_06_bad()
CWE190_Integer_Overflow__int_max_square_06_bad
{    int data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum value for this type */        data = INT_MAX;    }
data = INT_MAX;
data = INT_MAX
data
data
INT_MAX
INT_MAX
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(13,5,0)
(8,3,0)
(17,5,0)
(24,12,0)
(5,14,0)
(0,5,0)
(15,27,0)
(11,14,0)
(27,17,0)
(20,16,0)
(1,8,0)
(15,24,0)
(22,24,0)
(27,24,0)
(21,15,0)
(2,14,0)
(17,27,0)
(26,27,0)
(19,16,0)
(6,14,0)
(7,18,0)
(23,18,0)
(25,8,0)
(17,8,0)
(4,17,0)
(10,17,0)
(20,19,1)
(5,13,1)
(17,8,1)
(8,25,1)
(17,5,1)
(23,5,1)
(25,1,1)
(27,17,1)
(17,10,1)
(19,8,1)
(19,18,1)
(21,27,1)
(4,26,1)
(13,0,1)
(18,7,1)
(16,20,1)
(9,15,1)
(26,16,1)
(10,4,1)
(9,16,1)
(15,21,1)
(7,23,1)
(1,18,1)
(15,27,1)
(27,17,2)
(8,18,2)
(15,16,2)
(1,18,2)
(17,5,2)
(21,16,2)
(26,16,2)
(15,27,2)
(17,8,2)
(25,18,2)
(17,16,2)
(27,16,2)
(4,16,2)
(10,16,2)
-----------------------------------
(0,data)
(1,data)
(2,data)
(3,)
(4,data)
(5,data = 0)
(6,if(STATIC_CONST_FIVE==5)
(7,5)
(8,data = INT_MAX)
(9,RET)
(10,data)
(11,if(STATIC_CONST_FIVE==5)
(12,)
(13,0)
(14,)
(15,printIntLine(result)
(16,STATIC_CONST_FIVE==5)
(17,data * data)
(18,STATIC_CONST_FIVE==5)
(19,STATIC_CONST_FIVE)
(20,5)
(21,result)
(22,result)
(23,STATIC_CONST_FIVE)
(24,)
(25,INT_MAX)
(26,result)
(27,result = data * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^