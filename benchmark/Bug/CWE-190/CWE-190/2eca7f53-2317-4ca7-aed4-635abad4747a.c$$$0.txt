-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_05_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
63,64
64,65
64,66
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
73,74
73,75
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,62,67,68,72,74,78,79,83,85
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
65,66
65,67
76,77
76,78
-----guardedBy-----
37,53
67,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_05_bad(){    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_05_bad()
CWE190_Integer_Overflow__int_fgets_multiply_05_bad
{    int data;    /* Initialize data */    data = 0;    if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticTrue
staticTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticTrue
staticTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(25,38,0)
(24,19,0)
(0,1,0)
(27,44,0)
(33,0,0)
(32,30,0)
(35,28,0)
(13,19,0)
(19,12,0)
(15,39,0)
(18,38,0)
(8,43,0)
(0,9,0)
(1,0,0)
(39,28,0)
(20,38,0)
(21,1,0)
(26,18,0)
(41,43,0)
(11,38,0)
(10,16,0)
(38,22,0)
(5,43,0)
(39,18,0)
(43,19,0)
(30,43,0)
(25,0,0)
(29,22,0)
(18,39,0)
(14,27,0)
(17,22,0)
(18,0,0)
(37,15,0)
(36,39,0)
(34,25,0)
(42,22,0)
(15,28,0)
(31,12,0)
(3,18,0)
(6,25,0)
(1,19,0)
(12,40,0)
(23,12,0)
(43,30,0)
(15,37,1)
(1,19,1)
(2,4,1)
(21,33,1)
(6,34,1)
(43,8,1)
(25,0,1)
(25,6,1)
(5,19,1)
(14,30,1)
(20,11,1)
(26,36,1)
(0,1,1)
(34,4,1)
(27,14,1)
(41,5,1)
(38,20,1)
(43,19,1)
(36,25,1)
(4,27,1)
(13,7,1)
(1,21,1)
(30,32,1)
(8,41,1)
(33,30,1)
(37,39,1)
(18,0,1)
(4,7,1)
(18,38,1)
(18,3,1)
(30,43,1)
(2,15,1)
(39,18,1)
(32,43,1)
(3,26,1)
(2,25,1)
(25,38,1)
(4,0,1)
(15,39,1)
(24,13,1)
(19,24,1)
(7,38,1)
(39,25,2)
(43,19,2)
(6,4,2)
(37,25,2)
(34,4,2)
(18,0,2)
(30,43,2)
(32,7,2)
(13,7,2)
(33,30,2)
(0,1,2)
(18,38,2)
(27,30,2)
(24,7,2)
(15,25,2)
(5,7,2)
(18,25,2)
(21,30,2)
(39,18,2)
(15,39,2)
(26,25,2)
(14,30,2)
(0,30,2)
(25,38,2)
(41,7,2)
(25,0,2)
(3,25,2)
(1,30,2)
(8,7,2)
(43,7,2)
(36,25,2)
(19,7,2)
(30,7,2)
(25,4,2)
(1,19,2)
-----------------------------------
(0,data = atoi(inputBuffer)
(1,atoi(inputBuffer)
(2,RET)
(3,2)
(4,staticTrue)
(5,inputBuffer)
(6,0)
(7,staticTrue)
(8,stdin)
(9,)
(10,if(data > 0)
(11,data)
(12,)
(13,inputBuffer)
(14,"fgets()
(15,printIntLine(result)
(16,)
(17,if(staticTrue)
(18,data * 2)
(19,inputBuffer[CHAR_ARRAY_SIZE] = "")
(20,0)
(21,inputBuffer)
(22,)
(23,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,"")
(25,data > 0)
(26,data)
(27,printLine("fgets()
(28,)
(29,if(staticTrue)
(30,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(31,inputBuffer)
(32,NULL)
(33,data)
(34,data)
(35,result)
(36,result)
(37,result)
(38,data = 0)
(39,result = data * 2)
(40,)
(41,CHAR_ARRAY_SIZE)
(42,data)
(43,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^