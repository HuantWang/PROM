-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_square_63b_badSink(char * dataPtr)
{
    char data = *dataPtr;
    {
        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
        char result = data * data;
        printHexCharLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
22,23
22,24
24,25
24,26
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,29,31,35,37
-----computeFrom-----
27,28
27,29
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_square_63b_badSink(char * dataPtr){    char data = *dataPtr;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
void
CWE190_Integer_Overflow__char_max_square_63b_badSink(char * dataPtr)
CWE190_Integer_Overflow__char_max_square_63b_badSink
char * dataPtr
char
* dataPtr
*
dataPtr
{    char data = *dataPtr;    {        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }}
char data = *dataPtr;
char data = *dataPtr;
char
data = *dataPtr
data
= *dataPtr
*dataPtr
dataPtr
dataPtr
{        /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */        char result = data * data;        printHexCharLine(result);    }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(4,14,0)
(6,4,0)
(3,14,0)
(3,0,0)
(15,0,0)
(10,4,0)
(12,7,0)
(9,7,0)
(11,6,0)
(0,3,0)
(2,14,0)
(1,10,0)
(8,4,0)
(5,3,0)
(6,10,0)
(7,3,0)
(7,10,0)
(10,7,0)
(0,13,0)
(1,3,1)
(7,3,1)
(3,0,1)
(6,11,1)
(16,6,1)
(7,9,1)
(0,13,1)
(0,15,1)
(10,7,1)
(15,5,1)
(11,10,1)
(9,12,1)
(12,1,1)
(6,10,1)
(10,7,2)
(3,0,2)
(0,13,2)
(7,3,2)
(6,10,2)
-----------------------------------
(0,*dataPtr)
(1,result)
(2,data)
(3,data = *dataPtr)
(4,)
(5,data)
(6,printHexCharLine(result)
(7,data * data)
(8,result)
(9,data)
(10,result = data * data)
(11,result)
(12,data)
(13,char * dataPtr)
(14,)
(15,dataPtr)
(16,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^