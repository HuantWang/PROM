-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
33,34
34,35
34,36
35,36
39,40
39,41
41,42
41,43
41,44
41,45
41,46
41,47
42,43
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,30,31,32,36,37,38,40,43,47,49,53,55,59,61,62,63,67,68,69
-----computeFrom-----
12,13
12,14
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_fscanf_square_15_bad()
CWE190_Integer_Overflow__short_fscanf_square_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(27,24,0)
(2,36,0)
(1,19,0)
(21,15,0)
(30,26,0)
(31,32,0)
(14,26,0)
(5,10,0)
(32,8,0)
(18,8,0)
(22,36,0)
(26,15,0)
(22,32,0)
(4,10,0)
(23,22,0)
(17,8,0)
(20,10,0)
(36,22,0)
(6,8,0)
(34,26,0)
(30,14,0)
(37,20,0)
(14,24,0)
(24,32,0)
(0,14,0)
(35,15,0)
(13,30,0)
(12,10,0)
(28,32,0)
(36,10,0)
(9,36,0)
(19,15,0)
(29,15,0)
(33,15,0)
(7,24,0)
(25,10,0)
(24,14,0)
(27,7,1)
(3,21,1)
(22,23,1)
(24,32,1)
(14,24,1)
(32,28,1)
(35,19,1)
(0,11,1)
(2,9,1)
(30,14,1)
(13,14,1)
(36,22,1)
(19,1,1)
(11,25,1)
(28,31,1)
(23,2,1)
(20,37,1)
(1,11,1)
(30,13,1)
(11,4,1)
(7,0,1)
(3,35,1)
(37,16,1)
(24,27,1)
(9,16,1)
(16,32,1)
(22,32,1)
(4,36,1)
(21,30,1)
(25,20,1)
(7,11,2)
(36,22,2)
(22,16,2)
(36,16,2)
(21,11,2)
(2,16,2)
(37,16,2)
(4,16,2)
(24,32,2)
(1,11,2)
(14,24,2)
(22,32,2)
(13,11,2)
(23,16,2)
(0,11,2)
(30,14,2)
(9,16,2)
(19,11,2)
(14,11,2)
(24,11,2)
(35,11,2)
(30,11,2)
(27,11,2)
(25,16,2)
(20,16,2)
-----------------------------------
(0,result)
(1,"Benign, fixed string")
(2,"%hd")
(3,RET)
(4,break;)
(5,case 6:)
(6,switch(6)
(7,data)
(8,)
(9,stdin)
(10,)
(11,7)
(12,default:)
(13,result)
(14,result = data * data)
(15,)
(16,6)
(17,data)
(18,switch(7)
(19,printLine("Benign, fixed string")
(20,printLine("Benign, fixed string")
(21,break;)
(22,&data)
(23,data)
(24,data * data)
(25,break;)
(26,)
(27,data)
(28,0)
(29,case 7:)
(30,printIntLine(result)
(31,data)
(32,data = 0)
(33,default:)
(34,result)
(35,break;)
(36,fscanf (stdin, "%hd", &data)
(37,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^