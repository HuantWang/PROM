-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_16_bad()
{
    int64_t data;
    data = 0LL;
    while(1)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
        break;
    }
    while(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
27,28
27,29
29,30
29,31
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,28,33,34,39,41,45,46,50,52,53
-----computeFrom-----
13,14
13,15
21,22
21,23
31,32
31,33
43,44
43,45
-----guardedBy-----
33,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_16_bad(){    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_16_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_16_bad
{    int64_t data;    data = 0LL;    while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    }    while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
while(1)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    }
1
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;        break;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
break;
while(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }        break;    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
break;
-----joern-----
(17,19,0)
(23,14,0)
(1,3,0)
(2,14,0)
(21,10,0)
(14,24,0)
(11,3,0)
(7,3,0)
(19,14,0)
(20,22,0)
(0,26,0)
(5,3,0)
(6,24,0)
(16,26,0)
(22,10,0)
(21,22,0)
(4,22,0)
(15,21,0)
(27,19,0)
(22,20,0)
(12,20,0)
(8,20,0)
(20,14,0)
(13,10,0)
(19,27,1)
(9,18,1)
(20,8,1)
(18,25,1)
(6,14,1)
(16,19,1)
(16,21,1)
(17,18,1)
(23,25,1)
(2,23,1)
(15,22,1)
(9,16,1)
(14,2,1)
(8,12,1)
(21,22,1)
(25,7,1)
(22,20,1)
(21,15,1)
(12,4,1)
(18,6,1)
(27,17,1)
(4,19,1)
(20,14,1)
(19,14,1)
(22,20,2)
(20,14,2)
(19,18,2)
(21,19,2)
(12,19,2)
(16,18,2)
(21,22,2)
(6,25,2)
(22,19,2)
(23,25,2)
(17,18,2)
(8,19,2)
(20,19,2)
(19,14,2)
(4,19,2)
(27,18,2)
(2,25,2)
(15,19,2)
(14,25,2)
-----------------------------------
(0,if(data > 0)
(1,while(1)
(2,LLONG_MAX)
(3,)
(4,result)
(5,data)
(6,break;)
(7,L)
(8,2)
(9,RET)
(10,)
(11,while(1)
(12,data)
(13,result)
(14,data = LLONG_MAX)
(15,result)
(16,break;)
(17,data)
(18,1)
(19,data > 0)
(20,data * 2)
(21,printLongLongLine(result)
(22,result = data * 2)
(23,data)
(24,)
(25,1)
(26,)
(27,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^