-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_44_bad()
{
    short data;
    /* define a function pointer */
    void (*funcPtr) (short) = badSink;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
30,31
31,32
31,33
31,34
31,35
32,33
34,35
37,38
38,39
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,29,33,35,36,39,43,45
-----computeFrom-----
26,27
26,28
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_44_bad(){    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    /* use the function pointer */    funcPtr(data);}
void
CWE190_Integer_Overflow__short_fscanf_square_44_bad()
CWE190_Integer_Overflow__short_fscanf_square_44_bad
{    short data;    /* define a function pointer */    void (*funcPtr) (short) = badSink;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    /* use the function pointer */    funcPtr(data);}
short data;
short data;
short
data
data
void (*funcPtr) (short) = badSink;
void (*funcPtr) (short) = badSink;
void
(*funcPtr) (short) = badSink
*funcPtr
*
funcPtr
short
short


= badSink
badSink
badSink
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(16,3,0)
(5,7,0)
(1,7,0)
(12,5,0)
(15,1,0)
(8,3,0)
(4,13,0)
(13,5,0)
(3,7,0)
(13,3,0)
(14,7,0)
(2,1,0)
(6,5,0)
(9,3,0)
(10,7,0)
(5,13,0)
(8,7,0)
(11,8,0)
(6,12,1)
(2,15,1)
(0,8,1)
(8,3,1)
(13,3,1)
(5,13,1)
(11,5,1)
(13,4,1)
(4,6,1)
(9,1,1)
(12,3,1)
(1,2,1)
(16,9,1)
(8,11,1)
(3,16,1)
(13,3,2)
(8,3,2)
(5,13,2)
-----------------------------------
(0,RET)
(1,(*funcPtr)
(2,badSink)
(3,data = 0)
(4,data)
(5,fscanf (stdin, "%hd", &data)
(6,"%hd")
(7,)
(8,funcPtr(data)
(9,data)
(10,funcPtr)
(11,data)
(12,stdin)
(13,&data)
(14,data)
(15,funcPtr)
(16,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^