-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_14_bad()
{
    char data;
    data = ' ';
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_14_bad(){    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_14_bad()
CWE190_Integer_Overflow__char_max_multiply_14_bad
{    char data;    data = ' ';    if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
globalFive==5
globalFive
globalFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(21,5,0)
(31,15,0)
(0,7,0)
(4,10,0)
(6,32,0)
(13,28,0)
(23,7,0)
(28,9,0)
(23,28,0)
(13,15,0)
(11,26,0)
(18,28,0)
(14,10,0)
(3,13,0)
(26,25,0)
(15,25,0)
(19,13,0)
(16,8,0)
(24,5,0)
(22,7,0)
(2,32,0)
(26,15,0)
(13,7,0)
(1,28,0)
(12,25,0)
(7,5,0)
(17,5,0)
(20,23,0)
(15,13,0)
(29,23,0)
(7,0,1)
(11,15,1)
(26,11,1)
(19,31,1)
(30,23,1)
(26,15,1)
(1,18,1)
(18,10,1)
(13,7,1)
(13,3,1)
(6,28,1)
(2,6,1)
(6,10,1)
(30,26,1)
(13,28,1)
(3,19,1)
(14,4,1)
(32,2,1)
(23,28,1)
(20,29,1)
(28,1,1)
(10,14,1)
(31,23,1)
(29,32,1)
(30,32,1)
(23,20,1)
(23,7,1)
(15,13,1)
(4,7,1)
(0,22,1)
(23,32,2)
(18,10,2)
(15,13,2)
(31,23,2)
(13,28,2)
(1,10,2)
(20,32,2)
(11,23,2)
(23,7,2)
(13,23,2)
(23,28,2)
(26,15,2)
(29,32,2)
(3,23,2)
(13,7,2)
(28,10,2)
(26,23,2)
(19,23,2)
(15,23,2)
-----------------------------------
(0,' ')
(1,CHAR_MAX)
(2,5)
(3,2)
(4,globalFive)
(5,)
(6,globalFive)
(7,data = ' ')
(8,)
(9,)
(10,globalFive==5)
(11,result)
(12,result)
(13,data * 2)
(14,5)
(15,result = data * 2)
(16,if(data > 0)
(17,if(globalFive==5)
(18,data)
(19,data)
(20,0)
(21,data)
(22,data)
(23,data > 0)
(24,if(globalFive==5)
(25,)
(26,printHexCharLine(result)
(27,data = \' \')
(28,data = CHAR_MAX)
(29,data)
(30,RET)
(31,result)
(32,globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^