-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_07_bad()
{
    short data;
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
            short result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,19,20,25,27,31,32,37,39,43,45,49,51
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
29,30
29,31
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_07_bad(){    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_square_07_bad()
CWE190_Integer_Overflow__short_max_square_07_bad
{    short data;    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
if(staticFive==5)    {        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */            short result = data * data;            printIntLine(result);        }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(7,1,0)
(5,27,0)
(26,1,0)
(22,24,0)
(0,26,0)
(6,16,0)
(17,18,0)
(1,16,0)
(14,18,0)
(8,25,0)
(26,24,0)
(25,10,0)
(2,13,0)
(4,8,0)
(9,16,0)
(23,26,0)
(15,27,0)
(24,25,0)
(12,2,0)
(20,16,0)
(24,26,0)
(19,2,0)
(21,1,0)
(11,25,0)
(8,24,0)
(26,2,0)
(27,5,1)
(15,2,1)
(1,7,1)
(4,24,1)
(8,4,1)
(12,18,1)
(23,22,1)
(7,21,1)
(17,1,1)
(3,27,1)
(3,8,1)
(22,27,1)
(8,24,1)
(15,18,1)
(26,0,1)
(26,2,1)
(26,1,1)
(0,23,1)
(2,19,1)
(5,15,1)
(18,14,1)
(19,12,1)
(24,26,1)
(14,17,1)
(2,18,2)
(12,18,2)
(24,27,2)
(8,27,2)
(26,1,2)
(4,27,2)
(0,27,2)
(23,27,2)
(26,2,2)
(19,18,2)
(24,26,2)
(8,24,2)
(22,27,2)
(26,27,2)
-----------------------------------
(0,data)
(1,data = 0)
(2,data = SHRT_MAX)
(3,RET)
(4,result)
(5,5)
(6,if(staticFive==5)
(7,0)
(8,printIntLine(result)
(9,data)
(10,)
(11,result)
(12,data)
(13,)
(14,5)
(15,staticFive)
(16,)
(17,staticFive)
(18,staticFive==5)
(19,SHRT_MAX)
(20,if(staticFive==5)
(21,data)
(22,result)
(23,data)
(24,result = data * data)
(25,)
(26,data * data)
(27,staticFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^