-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_square_06_bad()
{
    char data;
    data = ' ';
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */
            char result = data * data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,44,48,50,54,56
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_square_06_bad(){    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_square_06_bad()
CWE190_Integer_Overflow__char_rand_square_06_bad
{    char data;    data = ' ';    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(STATIC_CONST_FIVE==5)    {        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > CHAR_MAX, this will overflow */            char result = data * data;            printHexCharLine(result);        }
char result = data * data;
char result = data * data;
char
result = data * data
result
= data * data
data * data
data
data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(20,3,0)
(15,12,0)
(26,29,0)
(18,23,0)
(22,2,0)
(14,3,0)
(11,3,0)
(14,1,0)
(24,19,0)
(5,12,0)
(17,14,0)
(10,18,0)
(18,29,0)
(16,8,0)
(29,6,0)
(11,18,0)
(4,11,0)
(21,2,0)
(11,12,0)
(28,19,0)
(12,19,0)
(0,19,0)
(29,18,0)
(3,1,0)
(6,29,0)
(9,1,0)
(13,8,0)
(29,26,0)
(3,11,0)
(30,11,0)
(1,27,0)
(13,12,1)
(7,2,1)
(11,4,1)
(14,3,1)
(20,2,1)
(2,22,1)
(29,26,1)
(14,17,1)
(22,21,1)
(10,8,1)
(7,14,1)
(8,16,1)
(21,8,1)
(3,11,1)
(17,3,1)
(26,10,1)
(21,18,1)
(30,20,1)
(18,29,1)
(12,15,1)
(29,6,1)
(16,13,1)
(11,18,1)
(4,30,1)
(15,5,1)
(11,12,1)
(29,8,2)
(18,29,2)
(29,26,2)
(26,8,2)
(3,2,2)
(17,2,2)
(14,3,2)
(14,2,2)
(29,6,2)
(20,2,2)
(11,18,2)
(11,2,2)
(4,2,2)
(10,8,2)
(30,2,2)
(3,11,2)
(18,8,2)
(11,12,2)
-----------------------------------
(0,data)
(1,)
(2,STATIC_CONST_FIVE==5)
(3,result = data * data)
(4,data)
(5,data)
(6,char)
(7,RET)
(8,STATIC_CONST_FIVE==5)
(9,result)
(10,data)
(11,data * data)
(12,data = ' ')
(13,STATIC_CONST_FIVE)
(14,printHexCharLine(result)
(15,' ')
(16,5)
(17,result)
(18,data = (char)
(19,)
(20,result)
(21,STATIC_CONST_FIVE)
(22,5)
(23,)
(24,if(STATIC_CONST_FIVE==5)
(25,data = \' \')
(26,RAND32()
(27,)
(28,if(STATIC_CONST_FIVE==5)
(29,(char)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^