-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_06_bad()
{
    int64_t data;
    data = 0LL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    if(STATIC_CONST_FIVE==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,33,38,39,44,46,50,51,55,57
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
30,31
30,32
36,37
36,38
48,49
48,50
-----guardedBy-----
38,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_06_bad(){    int64_t data;    data = 0LL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_06_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_06_bad
{    int64_t data;    data = 0LL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
if(STATIC_CONST_FIVE==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(10,20,0)
(9,20,0)
(6,19,0)
(9,0,0)
(20,19,0)
(24,0,0)
(7,8,0)
(26,9,0)
(29,24,0)
(27,15,0)
(10,19,0)
(23,17,0)
(16,8,0)
(21,10,0)
(4,8,0)
(18,1,0)
(20,9,0)
(13,17,0)
(2,0,0)
(28,9,0)
(12,0,0)
(0,11,0)
(25,24,0)
(3,20,0)
(5,8,0)
(14,15,0)
(22,10,1)
(27,0,1)
(25,15,1)
(21,20,1)
(22,15,1)
(14,27,1)
(9,0,1)
(26,3,1)
(15,14,1)
(9,28,1)
(17,13,1)
(23,5,1)
(24,29,1)
(0,2,1)
(13,23,1)
(3,24,1)
(22,24,1)
(20,9,1)
(10,21,1)
(27,17,1)
(24,0,1)
(29,25,1)
(12,17,1)
(2,12,1)
(10,20,1)
(28,26,1)
(24,0,2)
(20,24,2)
(9,24,2)
(0,17,2)
(20,9,2)
(2,17,2)
(9,0,2)
(10,24,2)
(28,24,2)
(25,15,2)
(12,17,2)
(26,24,2)
(21,24,2)
(3,24,2)
(29,15,2)
(10,20,2)
(24,15,2)
-----------------------------------
(0,data = LLONG_MAX)
(1,)
(2,LLONG_MAX)
(3,result)
(4,if(STATIC_CONST_FIVE==5)
(5,L)
(6,result)
(7,data)
(8,)
(9,data * 2)
(10,printLongLongLine(result)
(11,)
(12,data)
(13,5)
(14,5)
(15,STATIC_CONST_FIVE==5)
(16,if(STATIC_CONST_FIVE==5)
(17,STATIC_CONST_FIVE==5)
(18,if(data > 0)
(19,)
(20,result = data * 2)
(21,result)
(22,RET)
(23,STATIC_CONST_FIVE)
(24,data > 0)
(25,data)
(26,data)
(27,STATIC_CONST_FIVE)
(28,2)
(29,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^