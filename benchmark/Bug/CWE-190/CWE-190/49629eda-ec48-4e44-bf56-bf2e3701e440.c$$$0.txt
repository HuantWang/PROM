-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_rand_preinc_34_bad()
{
    short data;
    CWE190_Integer_Overflow__short_rand_preinc_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a random value */
    data = (short)RAND32();
    myUnion.unionFirst = data;
    {
        short data = myUnion.unionSecond;
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            short result = data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
52,55
53,54
54,55
55,56
57,58
58,59
58,60
60,61
60,62
62,63
63,64
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,56,59,61,64,68,70
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_rand_preinc_34_bad(){    short data;    CWE190_Integer_Overflow__short_rand_preinc_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_rand_preinc_34_bad()
CWE190_Integer_Overflow__short_rand_preinc_34_bad
{    short data;    CWE190_Integer_Overflow__short_rand_preinc_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a random value */    data = (short)RAND32();    myUnion.unionFirst = data;    {        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
CWE190_Integer_Overflow__short_rand_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__short_rand_preinc_34_unionType myUnion;
CWE190_Integer_Overflow__short_rand_preinc_34_unionType
CWE190_Integer_Overflow__short_rand_preinc_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
data = (short)RAND32();
data = (short)RAND32()
data
data
(short)RAND32()
short
short

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        short data = myUnion.unionSecond;        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }    }
short data = myUnion.unionSecond;
short data = myUnion.unionSecond;
short
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            short result = data;            printIntLine(result);        }
++data;
++data
data
data
short result = data;
short result = data;
short
result = data
result
= data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(29,21,0)
(2,21,0)
(22,12,0)
(13,25,0)
(2,24,0)
(12,21,0)
(14,27,0)
(26,7,0)
(19,2,0)
(5,24,0)
(25,12,0)
(20,2,0)
(15,25,0)
(11,22,0)
(24,14,0)
(9,25,0)
(1,15,0)
(0,19,0)
(32,7,0)
(17,19,0)
(7,25,0)
(28,15,0)
(18,15,0)
(16,1,0)
(23,14,0)
(14,23,0)
(25,7,0)
(31,29,0)
(8,12,0)
(14,24,0)
(4,9,0)
(27,14,0)
(3,29,0)
(6,21,0)
(1,22,0)
(15,22,0)
(10,21,0)
(24,21,0)
(9,22,0)
(9,4,1)
(15,28,1)
(24,14,1)
(14,23,1)
(18,9,1)
(26,32,1)
(32,13,1)
(20,19,1)
(1,15,1)
(9,25,1)
(0,24,1)
(14,27,1)
(30,1,1)
(17,0,1)
(7,26,1)
(25,7,1)
(13,2,1)
(4,25,1)
(23,5,1)
(16,15,1)
(2,24,1)
(29,3,1)
(28,18,1)
(15,25,1)
(3,31,1)
(19,17,1)
(1,16,1)
(2,20,1)
(5,29,1)
(1,15,2)
(14,27,2)
(25,7,2)
(15,25,2)
(24,14,2)
(2,24,2)
(9,25,2)
(14,23,2)
-----------------------------------
(0,myUnion)
(1,printIntLine(result)
(2,myUnion.unionFirst = data)
(3,0)
(4,data)
(5,data)
(6,data)
(7,myUnion.unionSecond)
(8,data)
(9,++data)
(10,myUnion)
(11,result)
(12,)
(13,data)
(14,(short)
(15,result = data)
(16,result)
(17,unionFirst)
(18,result)
(19,myUnion.unionFirst)
(20,data)
(21,)
(22,)
(23,RAND32()
(24,data = (short)
(25,data = myUnion.unionSecond)
(26,unionSecond)
(27,short)
(28,data)
(29,data = 0)
(30,RET)
(31,data)
(32,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^