-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_11_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,35,40,42,46,48,52,54
-----computeFrom-----
12,13
12,14
22,23
22,24
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_11_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_11_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_11_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(24,11,0)
(21,18,0)
(13,11,0)
(23,9,0)
(3,19,0)
(15,9,0)
(11,20,0)
(9,11,0)
(13,6,0)
(0,3,0)
(9,1,0)
(7,13,0)
(1,18,0)
(17,3,0)
(9,17,0)
(6,13,0)
(14,18,0)
(10,0,0)
(4,1,0)
(5,17,0)
(13,7,0)
(17,9,0)
(25,18,0)
(11,13,0)
(12,1,0)
(0,17,0)
(2,3,0)
(15,5,1)
(1,4,1)
(11,13,1)
(9,23,1)
(8,1,1)
(13,7,1)
(13,6,1)
(22,16,1)
(9,1,1)
(4,12,1)
(5,16,1)
(24,8,1)
(7,24,1)
(10,17,1)
(16,11,1)
(22,0,1)
(23,15,1)
(9,11,1)
(17,9,1)
(16,8,1)
(0,10,1)
(0,17,1)
(13,8,2)
(0,17,2)
(17,9,2)
(0,16,2)
(11,8,2)
(11,13,2)
(23,16,2)
(9,11,2)
(13,7,2)
(9,16,2)
(10,16,2)
(24,8,2)
(17,16,2)
(13,6,2)
(9,1,2)
(5,16,2)
(15,16,2)
(7,8,2)
-----------------------------------
(0,printUnsignedLine(result)
(1,data = 0)
(2,result)
(3,)
(4,0)
(5,result)
(6,unsigned int)
(7,RAND32()
(8,globalReturnsTrue()
(9,data * data)
(10,result)
(11,data = (unsigned int)
(12,data)
(13,(unsigned int)
(14,if(globalReturnsTrue()
(15,data)
(16,globalReturnsTrue()
(17,result = data * data)
(18,)
(19,)
(20,)
(21,if(globalReturnsTrue()
(22,RET)
(23,data)
(24,data)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^