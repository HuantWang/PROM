-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_09_bad()
{
    unsigned int data;
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
24,26
25,26
25,27
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,14,15,18,23,26,27,30,33,38,40,44,46,50,52
-----computeFrom-----
12,13
12,14
21,22
21,23
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_square_09_bad(){    unsigned int data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_square_09_bad()
CWE190_Integer_Overflow__unsigned_int_rand_square_09_bad
{    unsigned int data;    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(GLOBAL_CONST_TRUE)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(14,4,0)
(13,12,0)
(7,4,0)
(16,1,0)
(9,25,0)
(12,6,0)
(8,0,0)
(4,10,0)
(9,0,0)
(17,6,0)
(6,1,0)
(12,9,0)
(7,15,0)
(19,12,0)
(24,0,0)
(0,8,0)
(11,7,0)
(22,6,0)
(21,9,0)
(18,1,0)
(12,15,0)
(15,4,0)
(0,24,0)
(0,9,0)
(20,15,0)
(15,12,0)
(23,1,0)
(0,8,1)
(12,13,1)
(12,9,1)
(17,22,1)
(3,5,1)
(6,17,1)
(21,2,1)
(5,9,1)
(12,6,1)
(8,21,1)
(5,2,1)
(9,0,1)
(19,20,1)
(15,12,1)
(20,5,1)
(11,15,1)
(0,24,1)
(2,6,1)
(7,15,1)
(13,19,1)
(3,7,1)
(7,11,1)
(15,5,2)
(0,2,2)
(12,5,2)
(20,5,2)
(9,0,2)
(9,2,2)
(12,6,2)
(8,2,2)
(21,2,2)
(11,5,2)
(7,15,2)
(15,12,2)
(13,5,2)
(12,9,2)
(0,24,2)
(0,8,2)
(19,5,2)
(7,5,2)
-----------------------------------
(0,(unsigned int)
(1,)
(2,GLOBAL_CONST_TRUE)
(3,RET)
(4,)
(5,GLOBAL_CONST_TRUE)
(6,data = 0)
(7,printUnsignedLine(result)
(8,RAND32()
(9,data = (unsigned int)
(10,)
(11,result)
(12,data * data)
(13,data)
(14,result)
(15,result = data * data)
(16,data)
(17,0)
(18,if(GLOBAL_CONST_TRUE)
(19,data)
(20,result)
(21,data)
(22,data)
(23,if(GLOBAL_CONST_TRUE)
(24,unsigned int)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^