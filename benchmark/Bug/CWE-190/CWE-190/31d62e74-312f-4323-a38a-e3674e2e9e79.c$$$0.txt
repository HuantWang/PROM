-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_add_12_bad()
{
    int64_t data;
    data = 0LL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = LLONG_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            int64_t result = data + 1;
            printLongLongLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < LLONG_MAX)
        {
            int64_t result = data + 1;
            printLongLongLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
36,37
38,39
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
59,61
60,61
62,63
64,65
64,66
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
72,74
73,74
76,77
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,9,11,15,16,20,25,27,32,33,37,43,45,49,50,54,56,61,63,68,70,74,75,79,81,86,87
-----computeFrom-----
13,14
13,15
23,24
23,25
30,31
30,32
47,48
47,49
59,60
59,61
72,73
72,74
-----guardedBy-----
61,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_add_12_bad(){    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < LLONG_MAX)        {            int64_t result = data + 1;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__int64_t_max_add_12_bad()
CWE190_Integer_Overflow__int64_t_max_add_12_bad
{    int64_t data;    data = 0LL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < LLONG_MAX)        {            int64_t result = data + 1;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = LLONG_MAX;    }
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < LLONG_MAX)        {            int64_t result = data + 1;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            int64_t result = data + 1;            printLongLongLine(result);        }
int64_t result = data + 1;
int64_t result = data + 1;
int64_t
int64_t
result = data + 1
result
= data + 1
data + 1
data
data
1
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < LLONG_MAX)        {            int64_t result = data + 1;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < LLONG_MAX)        {            int64_t result = data + 1;            printLongLongLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
{            int64_t result = data + 1;            printLongLongLine(result);        }
int64_t result = data + 1;
int64_t result = data + 1;
int64_t
int64_t
result = data + 1
result
= data + 1
data + 1
data
data
1
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(0,42,0)
(19,18,0)
(8,42,0)
(22,29,0)
(35,6,0)
(33,15,0)
(29,2,0)
(35,38,0)
(40,35,0)
(18,12,0)
(14,38,0)
(0,2,0)
(30,18,0)
(2,41,0)
(25,15,0)
(31,0,0)
(1,15,0)
(34,2,0)
(0,6,0)
(12,16,0)
(5,12,0)
(4,12,0)
(18,42,0)
(32,42,0)
(29,42,0)
(37,2,0)
(6,38,0)
(7,3,0)
(6,0,0)
(16,26,0)
(28,0,0)
(11,4,0)
(24,29,0)
(21,17,0)
(39,6,0)
(17,20,0)
(9,15,0)
(42,10,0)
(18,2,0)
(23,16,0)
(12,18,0)
(4,16,0)
(0,42,1)
(35,40,1)
(29,42,1)
(12,18,1)
(27,4,1)
(40,6,1)
(4,12,1)
(34,36,1)
(2,37,1)
(32,8,1)
(29,22,1)
(27,17,1)
(6,0,1)
(4,11,1)
(31,39,1)
(30,5,1)
(21,29,1)
(39,29,1)
(18,42,1)
(19,30,1)
(29,2,1)
(37,34,1)
(11,12,1)
(35,6,1)
(18,19,1)
(0,2,1)
(28,31,1)
(24,13,1)
(0,28,1)
(22,24,1)
(5,13,1)
(13,2,1)
(42,32,1)
(36,33,1)
(8,36,1)
(27,35,1)
(13,42,1)
(18,2,1)
(17,21,1)
(42,36,2)
(12,13,2)
(11,13,2)
(39,29,2)
(6,29,2)
(37,36,2)
(35,6,2)
(18,42,2)
(35,29,2)
(18,13,2)
(18,2,2)
(4,12,2)
(24,13,2)
(32,36,2)
(21,29,2)
(6,0,2)
(28,29,2)
(22,13,2)
(29,13,2)
(2,36,2)
(12,18,2)
(0,42,2)
(0,2,2)
(5,13,2)
(0,29,2)
(4,13,2)
(31,29,2)
(8,36,2)
(30,13,2)
(29,42,2)
(17,29,2)
(40,29,2)
(19,13,2)
(34,36,2)
(29,2,2)
-----------------------------------
(0,data + 1)
(1,if(globalReturnsTrueOrFalse()
(2,data = LLONG_MAX)
(3,)
(4,printLongLongLine(result)
(5,result)
(6,result = data + 1)
(7,if (data < LLONG_MAX)
(8,data)
(9,if(globalReturnsTrueOrFalse()
(10,)
(11,result)
(12,result = data + 1)
(13,globalReturnsTrueOrFalse()
(14,result)
(15,)
(16,)
(17,printLine("data value is too large to perform arithmetic safely.")
(18,data + 1)
(19,1)
(20,)
(21,"data value is too large to perform arithmetic safely.")
(22,LLONG_MAX)
(23,result)
(24,data)
(25,data)
(26,)
(27,RET)
(28,1)
(29,data < LLONG_MAX)
(30,data)
(31,data)
(32,2)
(33,L)
(34,data)
(35,printLongLongLine(result)
(36,globalReturnsTrueOrFalse()
(37,LLONG_MAX)
(38,)
(39,result)
(40,result)
(41,)
(42,data = 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^