-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_34_bad()
{
    char data;
    CWE190_Integer_Overflow__char_rand_multiply_34_unionType myUnion;
    data = ' ';
    /* POTENTIAL FLAW: Use a random value */
    data = (char)RAND32();
    myUnion.unionFirst = data;
    {
        char data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
53,55
54,55
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,14,16,20,21,25,28,29,32,37,38,40,44,46,50,51,55,56,60,62,66,67,71,73
-----computeFrom-----
18,19
18,20
23,24
23,25
34,35
34,36
53,54
53,55
64,65
64,66
-----guardedBy-----
55,66
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_34_bad(){    char data;    CWE190_Integer_Overflow__char_rand_multiply_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_34_bad()
CWE190_Integer_Overflow__char_rand_multiply_34_bad
{    char data;    CWE190_Integer_Overflow__char_rand_multiply_34_unionType myUnion;    data = ' ';    /* POTENTIAL FLAW: Use a random value */    data = (char)RAND32();    myUnion.unionFirst = data;    {        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
CWE190_Integer_Overflow__char_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__char_rand_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__char_rand_multiply_34_unionType
CWE190_Integer_Overflow__char_rand_multiply_34_unionType
myUnion
myUnion
data = ' ';
data = ' '
data
data
' '
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
char data = myUnion.unionSecond;
char data = myUnion.unionSecond;
char
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(19,0,0)
(9,12,0)
(0,31,0)
(31,0,0)
(31,33,0)
(28,36,0)
(26,12,0)
(2,5,0)
(7,33,0)
(27,34,0)
(5,6,0)
(16,34,0)
(10,11,0)
(23,25,0)
(18,11,0)
(21,36,0)
(11,33,0)
(6,5,0)
(1,4,0)
(13,1,0)
(29,6,0)
(15,33,0)
(1,6,0)
(30,33,0)
(24,7,0)
(5,21,0)
(3,21,0)
(8,0,0)
(0,19,0)
(22,36,0)
(20,4,0)
(36,21,0)
(34,7,0)
(35,31,0)
(6,4,0)
(7,31,0)
(12,21,0)
(25,33,0)
(21,11,0)
(0,8,0)
(17,25,0)
(14,5,0)
(24,34,1)
(0,19,1)
(36,22,1)
(5,2,1)
(14,29,1)
(22,28,1)
(19,35,1)
(17,23,1)
(34,16,1)
(2,14,1)
(35,25,1)
(1,6,1)
(9,21,1)
(12,21,1)
(3,7,1)
(29,12,1)
(27,31,1)
(31,0,1)
(26,9,1)
(28,3,1)
(21,36,1)
(7,24,1)
(5,21,1)
(1,13,1)
(32,1,1)
(16,27,1)
(32,12,1)
(0,8,1)
(13,6,1)
(7,31,1)
(12,26,1)
(6,5,1)
(25,17,1)
(5,21,2)
(6,5,2)
(1,6,2)
(6,12,2)
(5,12,2)
(1,12,2)
(13,12,2)
(2,12,2)
(0,19,2)
(29,12,2)
(7,31,2)
(21,36,2)
(12,21,2)
(0,8,2)
(31,0,2)
(14,12,2)
-----------------------------------
(0,(char)
(1,printHexCharLine(result)
(2,2)
(3,data)
(4,)
(5,data * 2)
(6,result = data * 2)
(7,myUnion.unionFirst = data)
(8,char)
(9,data)
(10,data)
(11,)
(12,data > 0)
(13,result)
(14,data)
(15,data)
(16,unionFirst)
(17,' ')
(18,if(data > 0)
(19,RAND32()
(20,result)
(21,data = myUnion.unionSecond)
(22,unionSecond)
(23,data)
(24,data)
(25,data = ' ')
(26,0)
(27,myUnion)
(28,myUnion)
(29,result)
(30,myUnion)
(31,data = (char)
(32,RET)
(33,)
(34,myUnion.unionFirst)
(35,data)
(36,myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^