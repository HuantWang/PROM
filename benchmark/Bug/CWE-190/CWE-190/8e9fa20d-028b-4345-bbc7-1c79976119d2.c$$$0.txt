-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_max_square_42_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    data = badSource(data);
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
18,19
20,21
20,22
21,22
23,24
25,26
25,27
26,27
27,28
27,29
29,30
29,31
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
-----nextToken-----
2,4,8,10,14,15,19,22,24,28,30,34,36,40,42
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_max_square_42_bad(){    int data;    /* Initialize data */    data = 0;    data = badSource(data);    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_max_square_42_bad()
CWE190_Integer_Overflow__int_max_square_42_bad
{    int data;    /* Initialize data */    data = 0;    data = badSource(data);    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
data = badSource(data);
data = badSource(data)
data
data
badSource(data)
badSource
badSource
data
data
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(14,15,0)
(8,15,0)
(7,9,0)
(7,12,0)
(0,6,0)
(5,16,0)
(11,15,0)
(6,12,0)
(8,6,0)
(9,1,0)
(9,7,0)
(15,7,0)
(1,12,0)
(10,8,0)
(4,1,0)
(13,12,0)
(3,1,0)
(2,7,0)
(17,9,0)
(15,8,0)
(16,8,0)
(16,6,0)
(15,7,1)
(15,11,1)
(7,9,1)
(9,1,1)
(10,7,1)
(1,4,1)
(5,8,1)
(9,17,1)
(16,5,1)
(17,2,1)
(8,15,1)
(4,3,1)
(2,1,1)
(16,8,1)
(11,14,1)
(18,16,1)
(14,10,1)
(7,9,2)
(15,7,2)
(8,15,2)
(16,8,2)
(9,1,2)
-----------------------------------
(0,result)
(1,data = 0)
(2,data)
(3,data)
(4,0)
(5,result)
(6,)
(7,data = badSource(data)
(8,result = data * data)
(9,badSource(data)
(10,result)
(11,data)
(12,)
(13,data)
(14,data)
(15,data * data)
(16,printIntLine(result)
(17,data)
(18,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^