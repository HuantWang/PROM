-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_multiply_68b_badSink()
{
    short data = CWE190_Integer_Overflow__short_max_multiply_68_badData;
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
15,17
16,17
19,20
19,21
20,21
21,22
21,23
23,24
23,25
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,8,10,13,17,18,22,24,28,29,33,35
-----computeFrom-----
15,16
15,17
26,27
26,28
-----guardedBy-----
17,28
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_multiply_68b_badSink(){    short data = CWE190_Integer_Overflow__short_max_multiply_68_badData;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_max_multiply_68b_badSink()
CWE190_Integer_Overflow__short_max_multiply_68b_badSink
{    short data = CWE190_Integer_Overflow__short_max_multiply_68_badData;    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short data = CWE190_Integer_Overflow__short_max_multiply_68_badData;
short data = CWE190_Integer_Overflow__short_max_multiply_68_badData;
short
data = CWE190_Integer_Overflow__short_max_multiply_68_badData
data
= CWE190_Integer_Overflow__short_max_multiply_68_badData
CWE190_Integer_Overflow__short_max_multiply_68_badData
CWE190_Integer_Overflow__short_max_multiply_68_badData
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(8,1,0)
(12,8,0)
(15,18,0)
(8,4,0)
(0,3,0)
(13,18,0)
(1,2,0)
(3,4,0)
(10,1,0)
(9,2,0)
(6,4,0)
(11,4,0)
(1,8,0)
(16,1,0)
(5,8,0)
(7,3,0)
(4,18,0)
(10,2,0)
(17,10,0)
(0,4,1)
(4,6,1)
(7,0,1)
(10,17,1)
(10,1,1)
(14,3,1)
(6,11,1)
(5,16,1)
(8,4,1)
(12,5,1)
(17,1,1)
(8,12,1)
(1,8,1)
(3,7,1)
(14,10,1)
(3,4,1)
(16,3,1)
(17,3,2)
(12,3,2)
(10,1,2)
(10,3,2)
(5,3,2)
(1,3,2)
(8,3,2)
(8,4,2)
(16,3,2)
(1,8,2)
(3,4,2)
-----------------------------------
(0,data)
(1,result = data * 2)
(2,)
(3,data > 0)
(4,data = CWE190_Integer_Overflow__short_max_multiply_68_badData)
(5,data)
(6,CWE190_Integer_Overflow__short_max_multiply_68_badData)
(7,0)
(8,data * 2)
(9,result)
(10,printIntLine(result)
(11,data)
(12,2)
(13,data)
(14,RET)
(15,if(data > 0)
(16,result)
(17,result)
(18,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^