-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fscanf_square_11_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%d", &data);
    }
    if(globalReturnsTrue())
    {
        {
            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
            int result = data * data;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,41,45,47,51,53
-----computeFrom-----
12,13
12,14
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fscanf_square_11_bad(){    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fscanf_square_11_bad()
CWE190_Integer_Overflow__int_fscanf_square_11_bad
{    int data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }    if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%d", &data);    }
fscanf(stdin, "%d", &data);
fscanf(stdin, "%d", &data)
fscanf
fscanf
stdin
stdin
"%d"
&data
data
data
if(globalReturnsTrue())    {        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */            int result = data * data;            printIntLine(result);        }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,7,0)
(0,6,0)
(21,12,0)
(15,1,0)
(14,1,0)
(2,21,0)
(14,4,0)
(20,8,0)
(13,8,0)
(17,12,0)
(9,14,0)
(23,12,0)
(11,0,0)
(24,7,0)
(8,21,0)
(25,12,0)
(24,0,0)
(5,14,0)
(3,21,0)
(7,0,0)
(19,24,0)
(8,7,0)
(1,21,0)
(7,8,0)
(1,14,0)
(13,10,1)
(16,22,1)
(14,1,1)
(9,22,1)
(18,24,1)
(1,21,1)
(19,7,1)
(10,16,1)
(8,21,1)
(1,15,1)
(24,19,1)
(18,16,1)
(7,8,1)
(16,14,1)
(24,7,1)
(22,21,1)
(15,5,1)
(20,13,1)
(8,20,1)
(5,9,1)
(21,3,1)
(3,2,1)
(7,16,2)
(13,16,2)
(8,16,2)
(20,16,2)
(7,8,2)
(24,7,2)
(14,1,2)
(1,21,2)
(19,16,2)
(5,22,2)
(15,22,2)
(10,16,2)
(9,22,2)
(1,22,2)
(14,22,2)
(8,21,2)
(24,16,2)
-----------------------------------
(0,)
(1,&data)
(2,data)
(3,0)
(4,)
(5,"%d")
(6,)
(7,result = data * data)
(8,data * data)
(9,stdin)
(10,result)
(11,result)
(12,)
(13,data)
(14,fscanf(stdin, "%d", &data)
(15,data)
(16,globalReturnsTrue()
(17,if(globalReturnsTrue()
(18,RET)
(19,result)
(20,data)
(21,data = 0)
(22,globalReturnsTrue()
(23,if(globalReturnsTrue()
(24,printIntLine(result)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^