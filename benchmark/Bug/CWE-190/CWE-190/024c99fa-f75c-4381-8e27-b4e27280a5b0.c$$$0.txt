-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_max_add_12_bad()
{
    unsigned int data;
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = UINT_MAX;
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            unsigned int result = data + 1;
            printUnsignedLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < UINT_MAX)
        {
            unsigned int result = data + 1;
            printUnsignedLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
27,28
28,29
29,30
29,31
30,31
33,34
33,35
33,36
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
57,59
58,59
60,61
62,63
62,64
63,64
64,65
64,66
66,67
66,68
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
-----nextToken-----
2,4,8,10,14,15,19,24,26,31,32,36,41,43,47,48,52,54,59,61,65,67,71,72,76,78,83,84
-----computeFrom-----
12,13
12,14
22,23
22,24
29,30
29,31
45,46
45,47
57,58
57,59
69,70
69,71
-----guardedBy-----
59,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_max_add_12_bad(){    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__unsigned_int_max_add_12_bad()
CWE190_Integer_Overflow__unsigned_int_max_add_12_bad
{    unsigned int data;    data = 0;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = UINT_MAX;    }
data = UINT_MAX;
data = UINT_MAX
data
data
UINT_MAX
UINT_MAX
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            unsigned int result = data + 1;            printUnsignedLine(result);        }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < UINT_MAX)        {            unsigned int result = data + 1;            printUnsignedLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < UINT_MAX
data
data
UINT_MAX
UINT_MAX
{            unsigned int result = data + 1;            printUnsignedLine(result);        }
unsigned int result = data + 1;
unsigned int result = data + 1;
unsigned int
result = data + 1
result
= data + 1
data + 1
data
data
1
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(23,41,0)
(11,33,0)
(28,41,0)
(31,14,0)
(21,40,0)
(30,37,0)
(10,41,0)
(22,27,0)
(4,30,0)
(25,16,0)
(0,12,0)
(29,42,0)
(12,9,0)
(30,14,0)
(30,9,0)
(5,11,0)
(3,21,0)
(24,21,0)
(21,13,0)
(37,33,0)
(19,40,0)
(42,41,0)
(3,13,0)
(35,9,0)
(37,30,0)
(14,26,0)
(40,14,0)
(17,3,0)
(40,21,0)
(8,13,0)
(11,37,0)
(1,42,0)
(33,44,0)
(6,14,0)
(15,12,0)
(38,40,0)
(32,9,0)
(36,37,0)
(39,33,0)
(12,14,0)
(40,9,0)
(43,30,0)
(18,22,0)
(9,34,0)
(40,14,1)
(43,36,1)
(2,14,1)
(20,11,1)
(36,2,1)
(30,14,1)
(6,7,1)
(22,18,1)
(0,2,1)
(19,38,1)
(3,17,1)
(38,24,1)
(37,30,1)
(5,37,1)
(7,42,1)
(30,9,1)
(15,0,1)
(20,3,1)
(4,43,1)
(31,6,1)
(3,21,1)
(30,4,1)
(14,31,1)
(12,14,1)
(2,9,1)
(12,9,1)
(11,5,1)
(18,12,1)
(40,19,1)
(17,21,1)
(11,37,1)
(20,22,1)
(9,32,1)
(40,9,1)
(29,1,1)
(32,35,1)
(12,15,1)
(42,29,1)
(24,12,1)
(35,7,1)
(21,40,1)
(6,7,2)
(17,12,2)
(12,14,2)
(3,12,2)
(19,12,2)
(5,2,2)
(40,9,2)
(12,9,2)
(32,7,2)
(21,12,2)
(14,7,2)
(22,12,2)
(21,40,2)
(37,30,2)
(30,14,2)
(12,2,2)
(30,2,2)
(0,2,2)
(24,12,2)
(3,21,2)
(11,37,2)
(11,2,2)
(4,2,2)
(38,12,2)
(30,9,2)
(31,7,2)
(18,12,2)
(15,2,2)
(40,14,2)
(40,12,2)
(36,2,2)
(37,2,2)
(9,7,2)
(43,2,2)
(35,7,2)
-----------------------------------
(0,data)
(1,data)
(2,globalReturnsTrueOrFalse()
(3,printUnsignedLine(result)
(4,1)
(5,result)
(6,data)
(7,globalReturnsTrueOrFalse()
(8,result)
(9,data = UINT_MAX)
(10,if(globalReturnsTrueOrFalse()
(11,printUnsignedLine(result)
(12,data < UINT_MAX)
(13,)
(14,data = 2)
(15,UINT_MAX)
(16,)
(17,result)
(18,"data value is too large to perform arithmetic safely.")
(19,1)
(20,RET)
(21,result = data + 1)
(22,printLine("data value is too large to perform arithmetic safely.")
(23,if(globalReturnsTrueOrFalse()
(24,result)
(25,if (data < UINT_MAX)
(26,)
(27,)
(28,data)
(29,0)
(30,data + 1)
(31,2)
(32,UINT_MAX)
(33,)
(34,)
(35,data)
(36,result)
(37,result = data + 1)
(38,data)
(39,result)
(40,data + 1)
(41,)
(42,data = 0)
(43,data)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^