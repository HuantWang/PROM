-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_preinc_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            char result = data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            ++data;
            char result = data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
38,40
38,41
39,40
40,41
42,43
43,44
43,45
43,46
44,45
45,46
46,47
48,49
49,50
49,51
51,52
51,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
79,80
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,8,10,14,15,19,24,27,28,31,36,37,41,47,50,52,55,59,61,66,68,73,76,78,81,85,87,92,93
-----computeFrom-----
12,13
12,14
22,23
22,24
34,35
34,36
64,65
64,66
-----guardedBy-----
66,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_preinc_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_rand_preinc_12_bad()
CWE190_Integer_Overflow__char_rand_preinc_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            ++data;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            ++data;            char result = data;            printHexCharLine(result);        }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(41,0,0)
(8,12,0)
(3,4,0)
(17,43,0)
(29,6,0)
(12,8,0)
(33,6,0)
(5,43,0)
(40,41,0)
(11,4,0)
(35,1,0)
(26,45,0)
(41,12,0)
(34,43,0)
(32,41,0)
(6,41,0)
(24,26,0)
(28,40,0)
(36,5,0)
(19,41,0)
(9,26,0)
(40,26,0)
(6,26,0)
(12,18,0)
(42,26,0)
(18,12,0)
(9,4,0)
(11,6,0)
(1,10,0)
(19,31,0)
(19,26,0)
(24,41,0)
(21,5,0)
(28,31,0)
(46,28,0)
(13,9,0)
(31,22,0)
(27,43,0)
(30,19,0)
(37,40,0)
(25,11,0)
(39,24,0)
(6,4,0)
(20,40,0)
(14,24,0)
(9,41,0)
(7,26,0)
(15,31,0)
(16,2,0)
(12,41,0)
(40,31,0)
(32,44,1)
(38,1,1)
(24,14,1)
(13,24,1)
(19,30,1)
(42,7,1)
(40,41,1)
(5,21,1)
(9,26,1)
(6,41,1)
(11,25,1)
(23,26,1)
(12,8,1)
(19,41,1)
(19,26,1)
(18,32,1)
(20,37,1)
(30,23,1)
(9,13,1)
(11,6,1)
(40,26,1)
(46,40,1)
(38,11,1)
(37,19,1)
(6,33,1)
(44,5,1)
(24,41,1)
(41,12,1)
(1,35,1)
(6,26,1)
(12,18,1)
(29,9,1)
(39,23,1)
(14,39,1)
(24,26,1)
(9,41,1)
(28,40,1)
(40,20,1)
(26,42,1)
(38,28,1)
(21,36,1)
(25,6,1)
(33,29,1)
(28,46,1)
(23,41,1)
(7,44,1)
(35,24,1)
(32,44,2)
(6,41,2)
(40,26,2)
(24,26,2)
(18,44,2)
(26,44,2)
(11,24,2)
(28,23,2)
(37,23,2)
(12,44,2)
(42,44,2)
(1,24,2)
(20,23,2)
(7,44,2)
(19,26,2)
(12,8,2)
(9,24,2)
(41,44,2)
(9,26,2)
(6,26,2)
(41,12,2)
(29,24,2)
(35,24,2)
(40,41,2)
(33,24,2)
(6,24,2)
(28,40,2)
(12,18,2)
(13,24,2)
(25,24,2)
(19,23,2)
(24,41,2)
(14,23,2)
(9,41,2)
(24,23,2)
(30,23,2)
(40,23,2)
(39,23,2)
(19,41,2)
(46,23,2)
(11,6,2)
-----------------------------------
(0,)
(1,printLine("data value is too large to perform arithmetic safely.")
(2,)
(3,result)
(4,)
(5,data = \\\' \\\')
(6,result = data)
(7,data)
(8,char)
(9,++data)
(10,)
(11,printHexCharLine(result)
(12,(char)
(13,data)
(14,CHAR_MAX)
(15,result)
(16,if (data < CHAR_MAX)
(17,if(globalReturnsTrueOrFalse()
(18,RAND32()
(19,++data)
(20,data)
(21,\\\' \\\')
(22,)
(23,globalReturnsTrueOrFalse()
(24,data < CHAR_MAX)
(25,result)
(26,data = 2)
(27,data)
(28,printHexCharLine(result)
(29,result)
(30,data)
(31,)
(32,data)
(33,data)
(34,if(globalReturnsTrueOrFalse()
(35,"data value is too large to perform arithmetic safely.")
(36,data)
(37,result)
(38,RET)
(39,data)
(40,result = data)
(41,data = (char)
(42,2)
(43,)
(44,globalReturnsTrueOrFalse()
(45,)
(46,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^