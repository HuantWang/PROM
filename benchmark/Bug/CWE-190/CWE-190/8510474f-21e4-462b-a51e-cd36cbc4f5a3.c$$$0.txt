-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticFive==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,43,46,48,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_07_bad()
CWE190_Integer_Overflow__char_rand_postinc_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticFive==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(10,23,0)
(25,20,0)
(18,10,0)
(30,3,0)
(27,3,0)
(9,1,0)
(14,23,0)
(1,5,0)
(11,9,0)
(20,3,0)
(16,30,0)
(21,22,0)
(7,10,0)
(2,20,0)
(17,22,0)
(29,3,0)
(9,13,0)
(13,9,0)
(15,1,0)
(20,1,0)
(12,24,0)
(9,11,0)
(30,20,0)
(20,10,0)
(3,4,0)
(29,10,0)
(0,23,0)
(29,1,0)
(1,9,0)
(19,24,0)
(26,23,0)
(6,29,0)
(20,2,1)
(9,13,1)
(8,24,1)
(30,20,1)
(13,15,1)
(29,10,1)
(6,24,1)
(25,29,1)
(30,16,1)
(19,22,1)
(29,1,1)
(21,17,1)
(16,20,1)
(1,9,1)
(20,10,1)
(20,1,1)
(7,18,1)
(8,30,1)
(10,7,1)
(29,6,1)
(2,25,1)
(24,12,1)
(17,10,1)
(22,21,1)
(9,11,1)
(19,1,1)
(12,19,1)
(15,22,1)
(30,20,2)
(2,24,2)
(1,9,2)
(16,24,2)
(20,10,2)
(15,22,2)
(29,1,2)
(6,24,2)
(9,11,2)
(20,1,2)
(29,24,2)
(9,22,2)
(13,22,2)
(30,24,2)
(25,24,2)
(20,24,2)
(1,22,2)
(9,13,2)
(29,10,2)
-----------------------------------
(0,data)
(1,data = (char)
(2,data)
(3,)
(4,)
(5,)
(6,data)
(7,' ')
(8,RET)
(9,(char)
(10,data = ' ')
(11,char)
(12,5)
(13,RAND32()
(14,if(staticFive==5)
(15,data)
(16,result)
(17,staticFive)
(18,data)
(19,staticFive)
(20,result = data)
(21,5)
(22,staticFive==5)
(23,)
(24,staticFive==5)
(25,result)
(26,if(staticFive==5)
(27,result)
(28,data = \' \')
(29,data++)
(30,printHexCharLine(result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^