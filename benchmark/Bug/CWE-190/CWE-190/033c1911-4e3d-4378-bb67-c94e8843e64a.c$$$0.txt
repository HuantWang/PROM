-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_max_multiply_31_bad()
{
    int64_t data;
    data = 0LL;
    /* POTENTIAL FLAW: Use the maximum size of the data type */
    data = LLONG_MAX;
    {
        int64_t dataCopy = data;
        int64_t data = dataCopy;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */
            int64_t result = data * 2;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
30,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
42,44
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
-----nextToken-----
2,4,9,11,15,16,20,22,27,29,32,36,38,41,45,46,51,53,57,58,62,64
-----computeFrom-----
13,14
13,15
18,19
18,20
43,44
43,45
55,56
55,57
-----guardedBy-----
45,57
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_max_multiply_31_bad(){    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    {        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_max_multiply_31_bad()
CWE190_Integer_Overflow__int64_t_max_multiply_31_bad
{    int64_t data;    data = 0LL;    /* POTENTIAL FLAW: Use the maximum size of the data type */    data = LLONG_MAX;    {        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }}
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
data = LLONG_MAX;
data = LLONG_MAX
data
data
LLONG_MAX
LLONG_MAX
{        int64_t dataCopy = data;        int64_t data = dataCopy;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }    }
int64_t dataCopy = data;
int64_t dataCopy = data;
int64_t
int64_t
dataCopy = data
dataCopy
= data
data
data
int64_t data = dataCopy;
int64_t data = dataCopy;
int64_t
int64_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > LLONG_MAX, this will overflow */            int64_t result = data * 2;            printLongLongLine(result);        }
int64_t result = data * 2;
int64_t result = data * 2;
int64_t
int64_t
result = data * 2
result
= data * 2
data * 2
data
data
2
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(14,26,0)
(19,24,0)
(0,28,0)
(22,19,0)
(19,28,0)
(25,23,0)
(24,1,0)
(11,12,0)
(3,2,0)
(10,19,0)
(28,23,0)
(8,19,0)
(13,1,0)
(16,24,0)
(20,28,0)
(9,12,0)
(18,24,0)
(4,26,0)
(27,10,0)
(12,19,0)
(23,1,0)
(26,10,0)
(21,24,0)
(7,1,0)
(17,10,0)
(10,26,0)
(6,14,0)
(26,2,0)
(15,23,0)
(14,2,0)
(28,24,0)
(23,25,1)
(17,4,1)
(25,15,1)
(11,9,1)
(4,12,1)
(5,14,1)
(15,7,1)
(20,0,1)
(6,26,1)
(14,26,1)
(14,6,1)
(28,20,1)
(12,11,1)
(26,10,1)
(0,23,1)
(28,23,1)
(9,19,1)
(22,8,1)
(27,17,1)
(19,28,1)
(10,27,1)
(10,19,1)
(8,28,1)
(12,19,1)
(5,12,1)
(19,22,1)
(17,12,2)
(14,12,2)
(19,28,2)
(27,12,2)
(10,19,2)
(14,26,2)
(10,12,2)
(26,12,2)
(28,23,2)
(26,10,2)
(6,12,2)
(12,19,2)
(4,12,2)
-----------------------------------
(0,dataCopy)
(1,)
(2,)
(3,result)
(4,result)
(5,RET)
(6,result)
(7,L)
(8,data)
(9,data)
(10,data * 2)
(11,0)
(12,data > 0)
(13,data)
(14,printLongLongLine(result)
(15,data)
(16,if(data > 0)
(17,data)
(18,dataCopy)
(19,data = dataCopy)
(20,data)
(21,data)
(22,dataCopy)
(23,data = LLONG_MAX)
(24,)
(25,LLONG_MAX)
(26,result = data * 2)
(27,2)
(28,dataCopy = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^