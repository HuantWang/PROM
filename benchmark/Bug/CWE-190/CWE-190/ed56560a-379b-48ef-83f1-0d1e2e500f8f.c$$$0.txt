-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_postinc_03_bad()
{
    unsigned int data;
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(5==5)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            unsigned int result = data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,19,24,27,28,31,34,35,41,44,46,49,53,55
-----computeFrom-----
12,13
12,14
17,18
17,19
22,23
22,24
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_postinc_03_bad(){    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_postinc_03_bad()
CWE190_Integer_Overflow__unsigned_int_rand_postinc_03_bad
{    unsigned int data;    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(5==5)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
5==5
5
5
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            unsigned int result = data;            printUnsignedLine(result);        }
data++;
data++
data
data
unsigned int result = data;
unsigned int result = data;
unsigned int
result = data
result
= data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(10,22,0)
(25,27,0)
(18,24,0)
(21,27,0)
(22,11,0)
(20,13,0)
(8,23,0)
(26,3,0)
(1,28,0)
(21,14,0)
(3,26,0)
(7,22,0)
(6,11,0)
(0,23,0)
(23,14,0)
(17,13,0)
(23,22,0)
(19,11,0)
(2,14,0)
(21,22,0)
(28,23,0)
(12,11,0)
(26,14,0)
(15,26,0)
(14,26,0)
(26,15,0)
(23,27,0)
(9,24,0)
(14,16,0)
(27,29,0)
(5,21,0)
(28,27,0)
(1,23,1)
(23,14,1)
(18,22,1)
(8,0,1)
(17,24,1)
(22,10,1)
(26,3,1)
(4,28,1)
(28,23,1)
(23,22,1)
(28,1,1)
(21,14,1)
(9,18,1)
(20,17,1)
(5,13,1)
(21,5,1)
(23,8,1)
(13,20,1)
(0,21,1)
(15,2,1)
(4,13,1)
(26,15,1)
(24,9,1)
(17,14,1)
(21,22,1)
(14,26,1)
(2,24,1)
(10,7,1)
(26,3,2)
(28,23,2)
(21,22,2)
(14,24,2)
(26,24,2)
(0,13,2)
(26,15,2)
(2,24,2)
(23,13,2)
(21,13,2)
(23,22,2)
(15,24,2)
(21,14,2)
(1,13,2)
(23,14,2)
(14,26,2)
(8,13,2)
(28,13,2)
(5,13,2)
-----------------------------------
(0,result)
(1,result)
(2,data)
(3,unsigned int)
(4,RET)
(5,data)
(6,data)
(7,data)
(8,data)
(9,5)
(10,0)
(11,)
(12,if(5==5)
(13,5==5)
(14,data = (unsigned int)
(15,RAND32()
(16,)
(17,5)
(18,5)
(19,if(5==5)
(20,5)
(21,data++)
(22,data = 0)
(23,result = data)
(24,5==5)
(25,result)
(26,(unsigned int)
(27,)
(28,printUnsignedLine(result)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^