-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_bad()
{
    unsigned int data;
    CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_unionType myUnion;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%u", &data);
    myUnion.unionFirst = data;
    {
        unsigned int data = myUnion.unionSecond;
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
51,53
52,53
52,54
53,54
56,57
56,58
57,58
58,59
58,60
60,61
60,62
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,14,16,20,21,25,27,28,31,36,37,39,43,45,49,50,54,55,59,61,65,66,70,72
-----computeFrom-----
18,19
18,20
33,34
33,35
52,53
52,54
63,64
63,65
-----guardedBy-----
54,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_bad(){    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_bad
{    unsigned int data;    CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_unionType myUnion;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%u", &data);    myUnion.unionFirst = data;    {        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_unionType myUnion;
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_unionType
CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_34_unionType
myUnion
myUnion
data = 0;
data = 0
data
data
0
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        unsigned int data = myUnion.unionSecond;        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
unsigned int data = myUnion.unionSecond;
unsigned int data = myUnion.unionSecond;
unsigned int
data = myUnion.unionSecond
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(13,32,0)
(33,32,0)
(1,2,0)
(32,20,0)
(15,20,0)
(22,13,0)
(33,28,0)
(3,26,0)
(25,23,0)
(0,33,0)
(1,6,0)
(18,13,0)
(30,6,0)
(16,32,0)
(13,20,0)
(17,31,0)
(24,2,0)
(28,33,0)
(27,1,0)
(8,28,0)
(35,2,0)
(10,20,0)
(26,31,0)
(31,23,0)
(7,26,0)
(31,10,0)
(36,20,0)
(19,28,0)
(34,10,0)
(2,31,0)
(11,10,0)
(27,6,0)
(28,20,0)
(5,23,0)
(2,1,0)
(29,27,0)
(4,32,0)
(12,1,0)
(9,18,0)
(14,18,0)
(23,31,0)
(9,28,1)
(26,3,1)
(21,27,1)
(4,16,1)
(33,32,1)
(24,12,1)
(3,7,1)
(29,1,1)
(22,18,1)
(21,26,1)
(27,1,1)
(14,9,1)
(18,14,1)
(27,29,1)
(12,26,1)
(17,13,1)
(2,31,1)
(8,19,1)
(23,5,1)
(19,32,1)
(31,23,1)
(33,0,1)
(25,17,1)
(0,8,1)
(28,33,1)
(13,32,1)
(1,2,1)
(35,24,1)
(2,35,1)
(5,25,1)
(13,22,1)
(26,31,1)
(7,31,1)
(32,4,1)
(13,32,2)
(2,31,2)
(35,26,2)
(31,23,2)
(2,26,2)
(27,1,2)
(12,26,2)
(27,26,2)
(24,26,2)
(1,26,2)
(1,2,2)
(26,31,2)
(29,26,2)
(33,32,2)
(28,33,2)
-----------------------------------
(0,data)
(1,result = data * 2)
(2,data * 2)
(3,0)
(4,0)
(5,unionSecond)
(6,)
(7,data)
(8,"%u")
(9,myUnion)
(10,)
(11,if(data > 0)
(12,result)
(13,myUnion.unionFirst = data)
(14,unionFirst)
(15,myUnion)
(16,data)
(17,data)
(18,myUnion.unionFirst)
(19,stdin)
(20,)
(21,RET)
(22,data)
(23,myUnion.unionSecond)
(24,data)
(25,myUnion)
(26,data > 0)
(27,printUnsignedLine(result)
(28,fscanf (stdin, "%u", &data)
(29,result)
(30,result)
(31,data = myUnion.unionSecond)
(32,data = 0)
(33,&data)
(34,data)
(35,2)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^