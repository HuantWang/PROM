-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_preinc_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: Incrementing data could cause an overflow */
        ++data;
        char result = data;
        printHexCharLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
40,43
41,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,44,47,49,52,56,58,59,60,64,65,66
-----computeFrom-----
12,13
12,14
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_preinc_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_max_preinc_15_bad()
CWE190_Integer_Overflow__char_max_preinc_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: Incrementing data could cause an overflow */        ++data;        char result = data;        printHexCharLine(result);    }
++data;
++data
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(2,35,0)
(11,3,0)
(14,27,0)
(4,3,0)
(2,31,0)
(25,31,0)
(29,35,0)
(10,35,0)
(22,13,0)
(6,27,0)
(28,23,0)
(5,3,0)
(2,4,0)
(9,3,0)
(0,23,0)
(16,23,0)
(23,31,0)
(24,3,0)
(30,11,0)
(23,35,0)
(18,7,0)
(8,2,0)
(34,13,0)
(12,27,0)
(26,0,0)
(0,4,0)
(23,4,0)
(15,4,0)
(33,27,0)
(19,3,0)
(7,27,0)
(17,13,0)
(31,13,0)
(32,31,0)
(35,27,0)
(31,32,1)
(35,29,1)
(10,1,1)
(2,31,1)
(2,8,1)
(0,23,1)
(23,28,1)
(2,35,1)
(24,0,1)
(1,31,1)
(5,11,1)
(21,6,1)
(33,35,1)
(20,5,1)
(6,7,1)
(23,31,1)
(26,23,1)
(0,26,1)
(23,35,1)
(28,16,1)
(20,24,1)
(21,33,1)
(8,21,1)
(32,25,1)
(30,21,1)
(29,10,1)
(16,2,1)
(7,18,1)
(11,30,1)
(18,1,1)
(5,21,2)
(2,21,2)
(2,31,2)
(35,1,2)
(33,1,2)
(7,1,2)
(0,23,2)
(16,21,2)
(29,1,2)
(11,21,2)
(2,35,2)
(10,1,2)
(0,21,2)
(23,21,2)
(30,21,2)
(23,35,2)
(6,1,2)
(24,21,2)
(26,21,2)
(8,21,2)
(28,21,2)
(23,31,2)
(18,1,2)
-----------------------------------
(0,printHexCharLine(result)
(1,6)
(2,++data)
(3,)
(4,)
(5,break;)
(6,break;)
(7,printLine("Benign, fixed string")
(8,data)
(9,default:)
(10,data)
(11,printLine("Benign, fixed string")
(12,default:)
(13,)
(14,case 6:)
(15,result)
(16,result)
(17,switch(6)
(18,"Benign, fixed string")
(19,case 7:)
(20,RET)
(21,7)
(22,data)
(23,result = data)
(24,break;)
(25,data)
(26,result)
(27,)
(28,data)
(29,CHAR_MAX)
(30,"Benign, fixed string")
(31,data = \\\' \\\')
(32,\\\' \\\')
(33,break;)
(34,switch(7)
(35,data = CHAR_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^