-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_square_01_bad()
{
    short data;
    data = 0;
    /* POTENTIAL FLAW: Use a value input from the console */
    fscanf (stdin, "%hd", &data);
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
18,19
20,21
23,24
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,8,10,14,15,19,21,22,25,29,31,35,37,41,43
-----computeFrom-----
12,13
12,14
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_square_01_bad(){    short data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_fscanf_square_01_bad()
CWE190_Integer_Overflow__short_fscanf_square_01_bad
{    short data;    data = 0;    /* POTENTIAL FLAW: Use a value input from the console */    fscanf (stdin, "%hd", &data);    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(10,13,0)
(13,9,0)
(7,2,0)
(1,11,0)
(19,11,0)
(12,14,0)
(8,13,0)
(14,13,0)
(17,7,0)
(6,8,0)
(18,2,0)
(16,5,0)
(2,7,0)
(14,11,0)
(7,9,0)
(11,14,0)
(11,5,0)
(8,14,0)
(15,5,0)
(0,7,0)
(5,9,0)
(2,5,0)
(3,9,0)
(18,0,1)
(19,12,1)
(11,1,1)
(1,19,1)
(7,2,1)
(14,11,1)
(15,16,1)
(6,14,1)
(8,14,1)
(5,15,1)
(0,17,1)
(17,5,1)
(4,8,1)
(2,5,1)
(11,5,1)
(8,6,1)
(12,7,1)
(2,18,1)
(11,5,2)
(2,5,2)
(7,2,2)
(8,14,2)
(14,11,2)
-----------------------------------
(0,"%hd")
(1,data)
(2,&data)
(3,data)
(4,RET)
(5,data = 0)
(6,result)
(7,fscanf (stdin, "%hd", &data)
(8,printIntLine(result)
(9,)
(10,result)
(11,data * data)
(12,result)
(13,)
(14,result = data * data)
(15,0)
(16,data)
(17,stdin)
(18,data)
(19,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^