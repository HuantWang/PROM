-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_preinc_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            ++data;
            int64_t result = data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
49,50
50,51
52,53
53,54
53,55
53,56
54,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,43,44,47,48,51,57,61,63,66,70,72
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
41,42
41,43
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ProblemStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_preinc_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int64_t result = data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_preinc_17_bad()
CWE190_Integer_Overflow__int64_t_fscanf_preinc_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int64_t result = data;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int64_t result = data;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int64_t result = data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            ++data;            int64_t result = data;            printLongLongLine(result);        }
++data;
++data
data
data
int64_t result = data;
int64_t result = data;
int64_t
int64_t
result = data
result
= data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(12,30,0)
(33,16,0)
(20,6,0)
(24,9,0)
(8,32,0)
(4,20,0)
(6,17,0)
(27,30,0)
(23,9,0)
(10,16,0)
(15,30,0)
(29,6,0)
(32,29,0)
(32,6,0)
(22,10,0)
(31,10,0)
(5,29,0)
(18,23,0)
(0,16,0)
(14,30,0)
(3,6,0)
(21,0,0)
(19,30,0)
(2,13,0)
(7,16,0)
(13,9,0)
(26,30,0)
(25,29,0)
(28,23,0)
(11,9,0)
(23,28,1)
(11,10,1)
(16,7,1)
(18,13,1)
(21,10,1)
(0,21,1)
(7,33,1)
(13,9,1)
(8,29,1)
(1,23,1)
(29,25,1)
(32,29,1)
(13,2,1)
(9,24,1)
(10,16,1)
(32,8,1)
(22,31,1)
(2,32,1)
(31,0,1)
(24,11,1)
(18,9,1)
(20,4,1)
(0,16,1)
(31,16,1)
(23,9,1)
(33,14,1)
(5,20,1)
(28,18,1)
(10,22,1)
(4,23,1)
(25,5,1)
(32,29,2)
(18,23,2)
(13,23,2)
(29,23,2)
(8,23,2)
(0,16,2)
(23,23,2)
(21,10,2)
(25,23,2)
(28,23,2)
(31,10,2)
(0,10,2)
(4,23,2)
(2,23,2)
(22,10,2)
(20,23,2)
(32,23,2)
(13,9,2)
(10,16,2)
(5,23,2)
(23,9,2)
(10,10,2)
-----------------------------------
(0,i++)
(1,RET)
(2,j)
(3,result)
(4,data)
(5,result)
(6,)
(7,0)
(8,result)
(9,j = 0)
(10,i < 1)
(11,j)
(12,data)
(13,j++)
(14,L)
(15,for(i = 0; i < 1; i++)
(16,i = 0)
(17,)
(18,j)
(19,j)
(20,++data)
(21,i)
(22,1)
(23,j < 1)
(24,0)
(25,data)
(26,i)
(27,for(j = 0; j < 1; j++)
(28,1)
(29,result = data)
(30,)
(31,i)
(32,printLongLongLine(result)
(33,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^