-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_11_bad()
{
    short data;
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%hd", &data);
    }
    if(globalReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
            short result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_11_bad(){    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_11_bad()
CWE190_Integer_Overflow__short_fscanf_multiply_11_bad
{    short data;    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }    if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%hd", &data);    }
fscanf (stdin, "%hd", &data);
fscanf (stdin, "%hd", &data)
fscanf
fscanf
stdin
stdin
"%hd"
&data
data
data
if(globalReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */            short result = data * 2;            printIntLine(result);        }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(9,24,0)
(1,16,0)
(0,8,0)
(15,9,0)
(19,0,0)
(10,8,0)
(4,21,0)
(27,21,0)
(29,16,0)
(4,8,0)
(12,9,0)
(2,11,0)
(16,1,0)
(6,1,0)
(21,24,0)
(17,4,0)
(23,11,0)
(28,21,0)
(25,26,0)
(3,24,0)
(0,4,0)
(5,11,0)
(16,18,0)
(1,24,0)
(13,24,0)
(24,11,0)
(14,16,0)
(21,4,0)
(22,9,1)
(7,16,1)
(29,14,1)
(1,6,1)
(9,15,1)
(28,17,1)
(6,29,1)
(22,7,1)
(0,4,1)
(27,28,1)
(16,1,1)
(0,19,1)
(1,24,1)
(20,24,1)
(19,4,1)
(4,21,1)
(13,3,1)
(9,24,1)
(24,13,1)
(17,9,1)
(15,12,1)
(7,20,1)
(12,7,1)
(21,27,1)
(21,24,1)
(22,0,1)
(14,20,1)
(1,24,2)
(1,20,2)
(0,4,2)
(9,24,2)
(19,9,2)
(27,9,2)
(14,20,2)
(21,9,2)
(16,20,2)
(4,21,2)
(4,9,2)
(21,24,2)
(12,7,2)
(28,9,2)
(6,20,2)
(15,7,2)
(17,9,2)
(9,7,2)
(16,1,2)
(0,9,2)
(29,20,2)
-----------------------------------
(0,printIntLine(result)
(1,&data)
(2,if(globalReturnsTrue()
(3,data)
(4,result = data * 2)
(5,if(globalReturnsTrue()
(6,data)
(7,globalReturnsTrue()
(8,)
(9,data > 0)
(10,result)
(11,)
(12,data)
(13,0)
(14,stdin)
(15,0)
(16,fscanf (stdin, "%hd", &data)
(17,result)
(18,)
(19,result)
(20,globalReturnsTrue()
(21,data * 2)
(22,RET)
(23,data)
(24,data = 0)
(25,if(data > 0)
(26,)
(27,2)
(28,data)
(29,"%hd")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^