-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_10_bad()
{
    char data;
    data = ' ';
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
31,32
33,34
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
-----nextToken-----
2,4,8,10,14,15,18,23,25,26,29,32,37,38,42,44,48,49,53,55
-----computeFrom-----
12,13
12,14
35,36
35,37
46,47
46,48
-----guardedBy-----
37,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_10_bad(){    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_10_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_10_bad
{    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalTrue)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(17,23,0)
(15,20,0)
(18,2,0)
(1,0,0)
(13,10,0)
(26,23,0)
(16,22,0)
(17,10,0)
(19,20,0)
(27,25,0)
(18,7,0)
(5,22,0)
(9,29,0)
(12,20,0)
(0,17,0)
(3,17,0)
(6,10,0)
(28,25,0)
(7,18,0)
(0,23,0)
(10,22,0)
(10,17,0)
(7,22,0)
(22,20,0)
(24,18,0)
(4,7,0)
(14,18,0)
(25,22,0)
(14,24,1)
(17,10,1)
(11,25,1)
(21,22,1)
(28,27,1)
(8,21,1)
(18,7,1)
(27,8,1)
(7,4,1)
(3,25,1)
(8,18,1)
(25,28,1)
(11,0,1)
(0,17,1)
(13,3,1)
(22,5,1)
(1,17,1)
(7,22,1)
(5,16,1)
(0,1,1)
(11,8,1)
(4,14,1)
(10,6,1)
(25,22,1)
(24,21,1)
(6,13,1)
(10,22,1)
(27,8,2)
(7,22,2)
(0,17,2)
(18,21,2)
(10,22,2)
(24,21,2)
(6,25,2)
(10,25,2)
(0,25,2)
(17,10,2)
(7,21,2)
(14,21,2)
(25,8,2)
(17,25,2)
(25,22,2)
(28,8,2)
(18,7,2)
(3,25,2)
(13,25,2)
(1,25,2)
(4,21,2)
-----------------------------------
(0,printHexCharLine(result)
(1,result)
(2,)
(3,result)
(4,data)
(5,\\\' \\\')
(6,2)
(7,&data)
(8,globalTrue)
(9,if(data > 0)
(10,data * 2)
(11,RET)
(12,if(globalTrue)
(13,data)
(14,"%c")
(15,if(globalTrue)
(16,data)
(17,result = data * 2)
(18,fscanf (stdin, "%c", &data)
(19,data)
(20,)
(21,globalTrue)
(22,data = \\\' \\\')
(23,)
(24,stdin)
(25,data > 0)
(26,result)
(27,data)
(28,0)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^