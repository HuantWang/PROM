-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_15_bad()
{
    char data;
    data = ' ';
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
45,47
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
54,55
54,56
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,8,10,14,15,17,20,24,27,28,31,32,33,37,38,39,41,44,48,49,53,55,59,60,64,66,67,68,72,73,74
-----computeFrom-----
12,13
12,14
22,23
22,24
46,47
46,48
57,58
57,59
-----guardedBy-----
48,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_15_bad(){    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__char_rand_multiply_15_bad()
CWE190_Integer_Overflow__char_rand_multiply_15_bad
{    char data;    data = ' ';    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(24,14,0)
(20,33,0)
(18,20,0)
(31,14,0)
(2,1,0)
(17,3,0)
(28,10,0)
(5,16,0)
(11,40,0)
(9,41,0)
(7,31,0)
(3,17,0)
(16,20,0)
(27,40,0)
(19,33,0)
(23,24,0)
(13,20,0)
(30,10,0)
(25,35,0)
(18,41,0)
(29,41,0)
(17,20,0)
(16,24,0)
(38,18,0)
(34,40,0)
(22,16,0)
(39,33,0)
(17,12,0)
(41,10,0)
(0,40,0)
(1,40,0)
(36,10,0)
(20,17,0)
(8,40,0)
(24,16,0)
(21,33,0)
(4,14,0)
(35,33,0)
(12,17,0)
(6,18,0)
(15,33,0)
(16,41,0)
(31,24,0)
(0,31,1)
(16,41,1)
(13,32,1)
(26,19,1)
(1,2,1)
(24,16,1)
(31,7,1)
(41,9,1)
(12,13,1)
(9,29,1)
(25,32,1)
(32,41,1)
(16,20,1)
(22,5,1)
(18,20,1)
(5,23,1)
(2,26,1)
(23,18,1)
(6,38,1)
(20,17,1)
(26,39,1)
(37,11,1)
(38,26,1)
(31,24,1)
(39,20,1)
(17,12,1)
(35,25,1)
(11,1,1)
(0,18,1)
(18,41,1)
(18,6,1)
(19,35,1)
(37,0,1)
(7,24,1)
(16,22,1)
(17,3,1)
(16,18,2)
(11,26,2)
(20,32,2)
(12,32,2)
(23,18,2)
(24,18,2)
(1,26,2)
(39,32,2)
(19,32,2)
(17,32,2)
(5,18,2)
(22,18,2)
(24,16,2)
(17,12,2)
(17,3,2)
(35,32,2)
(6,26,2)
(20,17,2)
(31,24,2)
(0,26,2)
(7,18,2)
(18,41,2)
(25,32,2)
(31,18,2)
(2,26,2)
(18,20,2)
(18,26,2)
(38,26,2)
(13,32,2)
(16,41,2)
(16,20,2)
-----------------------------------
(0,break;)
(1,printLine("Benign, fixed string")
(2,"Benign, fixed string")
(3,char)
(4,result)
(5,data)
(6,0)
(7,result)
(8,case 7:)
(9,\\\' \\\')
(10,)
(11,break;)
(12,RAND32()
(13,data)
(14,)
(15,default:)
(16,data * 2)
(17,(char)
(18,data > 0)
(19,break;)
(20,data = (char)
(21,case 6:)
(22,2)
(23,result)
(24,result = data * 2)
(25,"Benign, fixed string")
(26,7)
(27,default:)
(28,data)
(29,data)
(30,switch(6)
(31,printHexCharLine(result)
(32,6)
(33,)
(34,if(data > 0)
(35,printLine("Benign, fixed string")
(36,switch(7)
(37,RET)
(38,data)
(39,break;)
(40,)
(41,data = \\\' \\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^