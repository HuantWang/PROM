-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_postinc_12_bad()
{
    char data;
    data = ' ';
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    else
    {
        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */
        data = 2;
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
    else
    {
        /* FIX: Add a check to prevent an overflow from occurring */
        if (data < CHAR_MAX)
        {
            data++;
            char result = data;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
16,19
17,18
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
32,33
33,34
33,35
34,35
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,8,10,14,15,19,24,26,27,30,35,36,40,46,49,51,54,58,60,65,67,72,75,77,80,84,86,91,92
-----computeFrom-----
12,13
12,14
33,34
33,35
63,64
63,65
-----guardedBy-----
65,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_postinc_12_bad(){    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
void
CWE190_Integer_Overflow__char_fscanf_postinc_12_bad()
CWE190_Integer_Overflow__char_fscanf_postinc_12_bad
{    char data;    data = ' ';    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }    if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    else    {        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
{        /* FIX: Use a small, non-zero value that will not cause an overflow in the sinks */        data = 2;    }
data = 2;
data = 2
data
data
2
if(globalReturnsTrueOrFalse())    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }    else    {        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{        /* FIX: Add a check to prevent an overflow from occurring */        if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }    }
if (data < CHAR_MAX)        {            data++;            char result = data;            printHexCharLine(result);        }        else        {            printLine("data value is too large to perform arithmetic safely.");        }
data < CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
{            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
{            printLine("data value is too large to perform arithmetic safely.");        }
printLine("data value is too large to perform arithmetic safely.");
printLine("data value is too large to perform arithmetic safely.")
printLine
printLine
"data value is too large to perform arithmetic safely."
-----joern-----
(15,43,0)
(2,21,0)
(14,40,0)
(3,21,0)
(29,13,0)
(34,13,0)
(7,43,0)
(19,14,0)
(15,13,0)
(42,15,0)
(1,11,0)
(8,43,0)
(31,21,0)
(22,13,0)
(21,18,0)
(4,29,0)
(41,12,0)
(3,29,0)
(22,11,0)
(25,22,0)
(40,14,0)
(6,12,0)
(8,15,0)
(38,31,0)
(40,32,0)
(31,11,0)
(23,29,0)
(26,36,0)
(17,22,0)
(15,11,0)
(9,43,0)
(5,26,0)
(28,40,0)
(20,9,0)
(11,27,0)
(13,12,0)
(24,12,0)
(39,13,0)
(35,3,0)
(9,13,0)
(14,13,0)
(44,15,0)
(29,11,0)
(16,8,0)
(46,40,0)
(31,13,0)
(45,11,0)
(9,11,0)
(37,10,0)
(29,21,0)
(9,13,1)
(14,19,1)
(30,40,1)
(4,23,1)
(29,11,1)
(15,13,1)
(42,9,1)
(23,31,1)
(22,11,1)
(3,29,1)
(46,33,1)
(30,11,1)
(44,42,1)
(11,1,1)
(31,38,1)
(31,13,1)
(15,44,1)
(33,13,1)
(13,39,1)
(20,22,1)
(19,28,1)
(14,13,1)
(25,17,1)
(22,25,1)
(40,14,1)
(1,45,1)
(28,46,1)
(29,13,1)
(0,8,1)
(0,26,1)
(3,35,1)
(16,15,1)
(26,5,1)
(9,11,1)
(8,15,1)
(8,16,1)
(17,30,1)
(35,29,1)
(45,33,1)
(5,22,1)
(29,4,1)
(0,3,1)
(38,30,1)
(9,20,1)
(22,13,1)
(15,11,1)
(31,11,1)
(39,34,1)
(28,33,2)
(45,33,2)
(19,33,2)
(14,13,2)
(22,11,2)
(15,11,2)
(22,30,2)
(4,30,2)
(15,22,2)
(42,22,2)
(3,30,2)
(29,13,2)
(38,30,2)
(29,30,2)
(8,15,2)
(17,30,2)
(25,30,2)
(31,30,2)
(15,13,2)
(8,22,2)
(31,13,2)
(23,30,2)
(20,22,2)
(44,22,2)
(26,22,2)
(9,22,2)
(9,11,2)
(5,22,2)
(3,29,2)
(22,13,2)
(1,33,2)
(40,33,2)
(29,11,2)
(31,11,2)
(40,14,2)
(9,13,2)
(14,33,2)
(16,22,2)
(35,30,2)
(11,33,2)
(46,33,2)
-----------------------------------
(0,RET)
(1,2)
(2,result)
(3,printHexCharLine(result)
(4,data)
(5,"data value is too large to perform arithmetic safely.")
(6,data)
(7,result)
(8,printHexCharLine(result)
(9,data++)
(10,)
(11,data = 2)
(12,)
(13,data = \\\' \\\')
(14,&data)
(15,result = data)
(16,result)
(17,data)
(18,)
(19,data)
(20,data)
(21,)
(22,data < CHAR_MAX)
(23,result)
(24,if(globalReturnsTrueOrFalse()
(25,CHAR_MAX)
(26,printLine("data value is too large to perform arithmetic safely.")
(27,)
(28,"%c")
(29,result = data)
(30,globalReturnsTrueOrFalse()
(31,data++)
(32,)
(33,globalReturnsTrueOrFalse()
(34,data)
(35,result)
(36,)
(37,if (data < CHAR_MAX)
(38,data)
(39,\\\' \\\')
(40,fscanf (stdin, "%c", &data)
(41,if(globalReturnsTrueOrFalse()
(42,result)
(43,)
(44,data)
(45,data)
(46,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^