-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_square_15_bad()
{
    short data;
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */
        short result = data * data;
        printIntLine(result);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
18,20
18,21
18,22
18,23
18,24
19,20
21,22
22,23
22,24
23,24
25,26
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,14,15,17,20,24,26,27,28,32,33,34,36,39,43,45,49,51,55,57,58,59,63,64,65
-----computeFrom-----
12,13
12,14
22,23
22,24
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_square_15_bad(){    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE190_Integer_Overflow__short_max_square_15_bad()
CWE190_Integer_Overflow__short_max_square_15_bad
{    short data;    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        /* POTENTIAL FLAW: if (data*data) > SHRT_MAX, this will overflow */        short result = data * data;        printIntLine(result);    }
short result = data * data;
short result = data * data;
short
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(23,15,0)
(16,10,0)
(25,21,0)
(8,16,0)
(16,25,0)
(33,11,0)
(19,18,0)
(33,2,0)
(32,21,0)
(34,18,0)
(24,16,0)
(6,15,0)
(22,10,0)
(14,18,0)
(27,18,0)
(26,33,0)
(11,15,0)
(17,11,0)
(16,2,0)
(10,18,0)
(5,18,0)
(29,14,0)
(20,2,0)
(2,11,0)
(4,15,0)
(35,21,0)
(12,25,0)
(1,21,0)
(13,28,0)
(2,16,0)
(28,15,0)
(7,25,0)
(9,15,0)
(31,10,0)
(3,4,1)
(16,10,1)
(10,22,1)
(34,10,1)
(12,7,1)
(33,2,1)
(3,6,1)
(16,8,1)
(6,28,1)
(14,29,1)
(8,24,1)
(19,14,1)
(16,25,1)
(2,16,1)
(29,30,1)
(25,12,1)
(31,30,1)
(20,0,1)
(22,31,1)
(33,26,1)
(4,33,1)
(26,2,1)
(0,19,1)
(24,20,1)
(30,25,1)
(28,13,1)
(0,34,1)
(13,0,1)
(16,0,2)
(19,30,2)
(20,0,2)
(2,0,2)
(22,30,2)
(34,30,2)
(29,30,2)
(2,16,2)
(14,30,2)
(28,0,2)
(4,0,2)
(26,0,2)
(33,0,2)
(24,0,2)
(13,0,2)
(33,2,2)
(16,10,2)
(6,0,2)
(8,0,2)
(31,30,2)
(10,30,2)
(16,25,2)
-----------------------------------
(0,7)
(1,switch(7)
(2,result = data * data)
(3,RET)
(4,break;)
(5,case 6:)
(6,break;)
(7,data)
(8,data)
(9,default:)
(10,data = SHRT_MAX)
(11,)
(12,0)
(13,"Benign, fixed string")
(14,printLine("Benign, fixed string")
(15,)
(16,data * data)
(17,result)
(18,)
(19,break;)
(20,result)
(21,)
(22,SHRT_MAX)
(23,case 7:)
(24,data)
(25,data = 0)
(26,result)
(27,default:)
(28,printLine("Benign, fixed string")
(29,"Benign, fixed string")
(30,6)
(31,data)
(32,switch(6)
(33,printIntLine(result)
(34,break;)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^