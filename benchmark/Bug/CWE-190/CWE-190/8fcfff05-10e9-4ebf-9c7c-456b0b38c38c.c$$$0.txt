-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_max_multiply_10_bad()
{
    char data;
    data = ' ';
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = CHAR_MAX;
    }
    if(globalTrue)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,18,23,25,28,33,34,38,40,44,45,49,51
-----computeFrom-----
12,13
12,14
21,22
21,23
31,32
31,33
42,43
42,44
-----guardedBy-----
33,44
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_max_multiply_10_bad(){    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_max_multiply_10_bad()
CWE190_Integer_Overflow__char_max_multiply_10_bad
{    char data;    data = ' ';    if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }    if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(globalTrue)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = CHAR_MAX;    }
data = CHAR_MAX;
data = CHAR_MAX
data
data
CHAR_MAX
CHAR_MAX
if(globalTrue)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
globalTrue
globalTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(12,0,0)
(10,25,0)
(25,3,0)
(12,7,0)
(27,7,0)
(2,12,0)
(23,16,0)
(1,0,0)
(4,14,0)
(19,16,0)
(21,0,0)
(9,16,0)
(7,16,0)
(0,13,0)
(5,12,0)
(6,14,0)
(14,7,0)
(15,3,0)
(28,7,0)
(14,0,0)
(25,15,0)
(12,15,0)
(20,15,0)
(22,3,0)
(15,12,0)
(26,17,0)
(12,0,1)
(14,7,1)
(12,2,1)
(15,12,1)
(11,0,1)
(10,15,1)
(8,11,1)
(8,14,1)
(20,14,1)
(7,27,1)
(6,4,1)
(5,20,1)
(14,6,1)
(14,0,1)
(1,21,1)
(27,28,1)
(2,5,1)
(25,10,1)
(24,7,1)
(12,7,1)
(25,15,1)
(11,24,1)
(21,24,1)
(4,11,1)
(8,25,1)
(0,1,1)
(1,24,2)
(20,14,2)
(21,24,2)
(14,0,2)
(5,14,2)
(12,7,2)
(2,14,2)
(12,14,2)
(6,11,2)
(12,0,2)
(10,14,2)
(15,12,2)
(25,15,2)
(0,24,2)
(15,14,2)
(14,7,2)
(14,11,2)
(25,14,2)
(4,11,2)
-----------------------------------
(0,data = CHAR_MAX)
(1,CHAR_MAX)
(2,2)
(3,)
(4,data)
(5,data)
(6,0)
(7,data = \' \')
(8,RET)
(9,data)
(10,result)
(11,globalTrue)
(12,data * 2)
(13,)
(14,data > 0)
(15,result = data * 2)
(16,)
(17,)
(18,data = ' ')
(19,if(globalTrue)
(20,result)
(21,data)
(22,result)
(23,if(globalTrue)
(24,globalTrue)
(25,printHexCharLine(result)
(26,if(data > 0)
(27,' ')
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^