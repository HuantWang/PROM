-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_02_bad()
{
    unsigned int data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (unsigned int)RAND32();
    }
    if(1)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */
            unsigned int result = data * 2;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,36,37,41,43,47,48,52,54
-----computeFrom-----
12,13
12,14
20,21
20,22
34,35
34,36
45,46
45,47
-----guardedBy-----
36,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_rand_multiply_02_bad(){    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_rand_multiply_02_bad()
CWE190_Integer_Overflow__unsigned_int_rand_multiply_02_bad
{    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }    if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (unsigned int)RAND32();    }
data = (unsigned int)RAND32();
data = (unsigned int)RAND32()
data
data
(unsigned int)RAND32()
unsigned int
unsigned int

RAND32()
RAND32
RAND32
if(1)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
1
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > UINT_MAX, this will overflow */            unsigned int result = data * 2;            printUnsignedLine(result);        }
unsigned int result = data * 2;
unsigned int result = data * 2;
unsigned int
result = data * 2
result
= data * 2
data * 2
data
data
2
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(0,2,0)
(2,13,0)
(15,25,0)
(25,8,0)
(2,26,0)
(15,16,0)
(9,19,0)
(10,17,0)
(11,13,0)
(6,19,0)
(27,26,0)
(29,9,0)
(20,17,0)
(3,9,0)
(8,25,0)
(23,29,0)
(14,19,0)
(18,19,0)
(25,15,0)
(7,24,0)
(4,29,0)
(25,28,0)
(29,15,0)
(17,15,0)
(26,13,0)
(17,9,0)
(26,29,0)
(28,25,0)
(22,15,0)
(29,26,0)
(21,9,0)
(29,4,1)
(25,28,1)
(17,9,1)
(22,5,1)
(1,12,1)
(5,9,1)
(12,15,1)
(29,9,1)
(17,20,1)
(0,26,1)
(2,26,1)
(4,23,1)
(20,10,1)
(10,12,1)
(23,27,1)
(3,21,1)
(1,2,1)
(9,3,1)
(27,17,1)
(26,29,1)
(15,25,1)
(17,15,1)
(2,0,1)
(1,17,1)
(29,15,1)
(25,8,1)
(12,5,1)
(8,22,1)
(25,8,2)
(29,15,2)
(27,17,2)
(8,5,2)
(10,12,2)
(22,5,2)
(25,28,2)
(2,17,2)
(29,9,2)
(17,12,2)
(15,5,2)
(17,15,2)
(17,9,2)
(25,5,2)
(20,12,2)
(29,17,2)
(15,25,2)
(26,29,2)
(4,17,2)
(26,17,2)
(2,26,2)
(0,17,2)
(23,17,2)
-----------------------------------
(0,result)
(1,RET)
(2,printUnsignedLine(result)
(3,0)
(4,2)
(5,1)
(6,data)
(7,if(data > 0)
(8,RAND32()
(9,data = 0)
(10,data)
(11,result)
(12,1)
(13,)
(14,if(1)
(15,data = (unsigned int)
(16,)
(17,data > 0)
(18,if(1)
(19,)
(20,0)
(21,data)
(22,data)
(23,data)
(24,)
(25,(unsigned int)
(26,result = data * 2)
(27,result)
(28,unsigned int)
(29,data * 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^