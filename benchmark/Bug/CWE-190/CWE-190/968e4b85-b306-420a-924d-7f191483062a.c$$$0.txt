-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_fgets_multiply_08_bad()
{
    int data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                data = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticReturnsTrue())
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */
            int result = data * 2;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,8,10,14,15,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,64,69,70,74,76,80,81,85,87
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
67,68
67,69
78,79
78,80
-----guardedBy-----
38,54
69,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_fgets_multiply_08_bad(){    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__int_fgets_multiply_08_bad()
CWE190_Integer_Overflow__int_fgets_multiply_08_bad
{    int data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }}
int data;
int data;
int
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                data = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                data = atoi(inputBuffer);            }
data = atoi(inputBuffer);
data = atoi(inputBuffer)
data
data
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticReturnsTrue())    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */            int result = data * 2;            printIntLine(result);        }
int result = data * 2;
int result = data * 2;
int
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(44,0,0)
(0,40,0)
(19,27,0)
(3,24,0)
(17,37,0)
(2,9,0)
(4,37,0)
(14,13,0)
(30,40,0)
(16,25,0)
(3,31,0)
(9,11,0)
(34,5,0)
(20,31,0)
(31,41,0)
(1,37,0)
(18,33,0)
(38,13,0)
(36,27,0)
(33,26,0)
(12,27,0)
(15,34,0)
(26,37,0)
(25,40,0)
(13,3,0)
(32,39,0)
(42,41,0)
(27,12,0)
(0,25,0)
(31,3,0)
(21,27,0)
(43,12,0)
(27,41,0)
(29,26,0)
(28,33,0)
(23,26,0)
(6,34,0)
(13,26,0)
(33,3,0)
(22,41,0)
(35,3,0)
(41,34,0)
(13,25,0)
(25,13,0)
(9,2,1)
(35,12,1)
(13,3,1)
(13,14,1)
(10,3,1)
(2,12,1)
(3,31,1)
(21,19,1)
(20,35,1)
(7,33,1)
(31,20,1)
(19,36,1)
(0,25,1)
(36,41,1)
(12,43,1)
(33,28,1)
(18,10,1)
(27,21,1)
(8,26,1)
(10,8,1)
(31,41,1)
(7,10,1)
(26,29,1)
(13,26,1)
(12,27,1)
(27,41,1)
(29,23,1)
(16,33,1)
(22,8,1)
(44,25,1)
(41,42,1)
(42,22,1)
(0,44,1)
(43,27,1)
(7,0,1)
(33,3,1)
(38,16,1)
(28,18,1)
(25,13,1)
(14,38,1)
(10,9,1)
(33,26,1)
(36,8,2)
(16,33,2)
(28,10,2)
(31,12,2)
(38,33,2)
(0,25,2)
(3,31,2)
(18,10,2)
(19,8,2)
(9,12,2)
(13,3,2)
(12,27,2)
(27,8,2)
(33,10,2)
(13,33,2)
(44,33,2)
(20,12,2)
(25,13,2)
(14,33,2)
(2,12,2)
(22,8,2)
(25,33,2)
(33,26,2)
(13,26,2)
(0,33,2)
(27,41,2)
(35,12,2)
(31,41,2)
(33,3,2)
(42,8,2)
(43,8,2)
(21,8,2)
(12,8,2)
(3,12,2)
(41,8,2)
-----------------------------------
(0,printIntLine(result)
(1,if(staticReturnsTrue()
(2,"fgets()
(3,data = atoi(inputBuffer)
(4,data)
(5,)
(6,inputBuffer)
(7,RET)
(8,staticReturnsTrue()
(9,printLine("fgets()
(10,staticReturnsTrue()
(11,)
(12,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(13,data * 2)
(14,2)
(15,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,result)
(17,if(staticReturnsTrue()
(18,data)
(19,CHAR_ARRAY_SIZE)
(20,inputBuffer)
(21,stdin)
(22,inputBuffer)
(23,data)
(24,)
(25,result = data * 2)
(26,data = 0)
(27,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,0)
(29,0)
(30,result)
(31,atoi(inputBuffer)
(32,if(data > 0)
(33,data > 0)
(34,)
(35,data)
(36,inputBuffer)
(37,)
(38,data)
(39,)
(40,)
(41,inputBuffer[CHAR_ARRAY_SIZE] = "")
(42,"")
(43,NULL)
(44,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^