-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_fscanf_multiply_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    short * dataPtr = (short *)dataVoidPtr;
    /* dereference dataPtr into data */
    short data = (*dataPtr);
    if(data > 0) /* ensure we won't have an underflow */
    {
        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */
        short result = data * 2;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,38,39,43,45,49,50,54,56
-----computeFrom-----
36,37
36,38
47,48
47,49
-----guardedBy-----
38,49
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_fscanf_multiply_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    short * dataPtr = (short *)dataVoidPtr;    /* dereference dataPtr into data */    short data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__short_fscanf_multiply_64b_badSink(void * dataVoidPtr)
CWE190_Integer_Overflow__short_fscanf_multiply_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    short * dataPtr = (short *)dataVoidPtr;    /* dereference dataPtr into data */    short data = (*dataPtr);    if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }}
short * dataPtr = (short *)dataVoidPtr;
short * dataPtr = (short *)dataVoidPtr;
short
* dataPtr = (short *)dataVoidPtr
*
dataPtr
= (short *)dataVoidPtr
(short *)dataVoidPtr
short *
short
*
*
dataVoidPtr
dataVoidPtr
short data = (*dataPtr);
short data = (*dataPtr);
short
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
if(data > 0) /* ensure we won't have an underflow */    {        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
data > 0
data
data
0
{        /* POTENTIAL FLAW: if (data*2) > SHRT_MAX, this will overflow */        short result = data * 2;        printIntLine(result);    }
short result = data * 2;
short result = data * 2;
short
result = data * 2
result
= data * 2
data * 2
data
data
2
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(16,26,0)
(24,8,0)
(2,4,0)
(9,21,0)
(5,4,0)
(3,14,0)
(25,4,0)
(8,9,0)
(12,25,0)
(17,19,0)
(15,16,0)
(20,19,0)
(16,25,0)
(14,8,0)
(13,19,0)
(7,0,0)
(0,23,0)
(23,14,0)
(9,8,0)
(9,18,0)
(8,19,0)
(4,23,0)
(25,26,0)
(6,23,0)
(10,0,0)
(14,23,0)
(23,19,0)
(4,25,0)
(21,9,0)
(11,26,0)
(22,9,0)
(7,10,1)
(12,0,1)
(14,3,1)
(14,8,1)
(4,23,1)
(22,24,1)
(23,14,1)
(2,12,1)
(4,5,1)
(5,2,1)
(10,23,1)
(8,9,1)
(0,7,1)
(0,23,1)
(15,25,1)
(1,0,1)
(6,8,1)
(16,25,1)
(9,18,1)
(9,22,1)
(25,4,1)
(9,21,1)
(1,16,1)
(16,15,1)
(3,6,1)
(8,9,2)
(12,0,2)
(4,23,2)
(4,0,2)
(2,0,2)
(0,23,2)
(25,4,2)
(16,25,2)
(14,8,2)
(25,0,2)
(16,0,2)
(9,18,2)
(9,21,2)
(23,14,2)
(5,0,2)
(15,0,2)
-----------------------------------
(0,data > 0)
(1,RET)
(2,data)
(3,dataPtr)
(4,data * 2)
(5,2)
(6,data)
(7,0)
(8,* dataPtr = (short *)
(9,(short *)
(10,data)
(11,result)
(12,result)
(13,data)
(14,*dataPtr)
(15,result)
(16,printIntLine(result)
(17,if(data > 0)
(18,void * dataVoidPtr)
(19,)
(20,dataPtr)
(21,short *)
(22,dataVoidPtr)
(23,data = (*dataPtr)
(24,dataPtr)
(25,result = data * 2)
(26,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^