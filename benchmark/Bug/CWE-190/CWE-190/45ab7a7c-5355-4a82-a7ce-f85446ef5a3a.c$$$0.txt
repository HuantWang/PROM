-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_fscanf_multiply_03_bad()
{
    char data;
    data = ' ';
    if(5==5)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%c", &data);
    }
    if(5==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
32,34
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,14,15,18,19,24,26,27,30,33,34,39,40,44,46,50,51,55,57
-----computeFrom-----
12,13
12,14
17,18
17,19
32,33
32,34
37,38
37,39
48,49
48,50
-----guardedBy-----
39,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_fscanf_multiply_03_bad(){    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_fscanf_multiply_03_bad()
CWE190_Integer_Overflow__char_fscanf_multiply_03_bad
{    char data;    data = ' ';    if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }    if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(5==5)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%c", &data);    }
fscanf (stdin, "%c", &data);
fscanf (stdin, "%c", &data)
fscanf
fscanf
stdin
stdin
"%c"
&data
data
data
if(5==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
5==5
5
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(8,30,0)
(24,13,0)
(14,30,0)
(22,8,0)
(21,22,0)
(4,10,0)
(27,23,0)
(31,8,0)
(32,13,0)
(20,23,0)
(1,8,0)
(2,3,0)
(0,11,0)
(29,5,0)
(23,15,0)
(9,23,0)
(6,12,0)
(20,10,0)
(23,20,0)
(7,13,0)
(17,31,0)
(8,22,0)
(10,13,0)
(22,10,0)
(3,10,0)
(33,12,0)
(16,3,0)
(18,22,0)
(25,11,0)
(26,20,0)
(28,10,0)
(31,30,0)
(20,26,1)
(31,8,1)
(17,8,1)
(23,20,1)
(3,10,1)
(11,25,1)
(9,27,1)
(18,21,1)
(20,10,1)
(4,28,1)
(31,17,1)
(12,33,1)
(8,22,1)
(19,12,1)
(16,2,1)
(6,23,1)
(19,3,1)
(10,4,1)
(27,11,1)
(2,12,1)
(22,10,1)
(3,16,1)
(21,1,1)
(0,10,1)
(33,6,1)
(22,18,1)
(1,3,1)
(25,0,1)
(26,9,1)
(19,31,1)
(6,11,1)
(31,8,2)
(23,11,2)
(9,11,2)
(8,3,2)
(2,12,2)
(26,11,2)
(3,10,2)
(8,22,2)
(18,3,2)
(1,3,2)
(21,3,2)
(23,20,2)
(31,3,2)
(17,3,2)
(20,11,2)
(3,12,2)
(27,11,2)
(22,3,2)
(22,10,2)
(16,12,2)
(20,10,2)
-----------------------------------
(0,5)
(1,result)
(2,data)
(3,data > 0)
(4,\\\' \\\')
(5,)
(6,5)
(7,data)
(8,result = data * 2)
(9,"%c")
(10,data = \\\' \\\')
(11,5==5)
(12,5==5)
(13,)
(14,result)
(15,)
(16,0)
(17,result)
(18,2)
(19,RET)
(20,&data)
(21,data)
(22,data * 2)
(23,fscanf (stdin, "%c", &data)
(24,if(5==5)
(25,5)
(26,data)
(27,stdin)
(28,data)
(29,if(data > 0)
(30,)
(31,printHexCharLine(result)
(32,if(5==5)
(33,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^