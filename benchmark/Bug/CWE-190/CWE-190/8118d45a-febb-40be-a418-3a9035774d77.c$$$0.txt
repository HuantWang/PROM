-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_multiply_07_bad()
{
    char data;
    data = ' ';
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(staticFive==5)
    {
        if(data > 0) /* ensure we won't have an underflow */
        {
            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */
            char result = data * 2;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
17,19
18,19
21,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,14,15,19,20,25,28,29,32,36,37,42,43,47,49,53,54,58,60
-----computeFrom-----
12,13
12,14
17,18
17,19
23,24
23,25
34,35
34,36
40,41
40,42
51,52
51,53
-----guardedBy-----
42,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_multiply_07_bad(){    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_multiply_07_bad()
CWE190_Integer_Overflow__char_rand_multiply_07_bad
{    char data;    data = ' ';    if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(staticFive==5)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(staticFive==5)    {        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
staticFive==5
staticFive
staticFive
5
{        if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }    }
if(data > 0) /* ensure we won't have an underflow */        {            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
data > 0
data
data
0
{            /* POTENTIAL FLAW: if (data*2) > CHAR_MAX, this will overflow */            char result = data * 2;            printHexCharLine(result);        }
char result = data * 2;
char result = data * 2;
char
result = data * 2
result
= data * 2
data * 2
data
data
2
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(18,16,0)
(31,13,0)
(20,21,0)
(25,17,0)
(2,16,0)
(13,2,0)
(25,16,0)
(28,29,0)
(8,9,0)
(2,21,0)
(0,21,0)
(16,1,0)
(26,23,0)
(2,13,0)
(17,25,0)
(18,21,0)
(19,10,0)
(15,2,0)
(27,2,0)
(31,6,0)
(3,18,0)
(33,9,0)
(11,10,0)
(22,13,0)
(21,10,0)
(24,29,0)
(12,16,0)
(5,25,0)
(7,18,0)
(32,31,0)
(16,25,0)
(14,10,0)
(25,5,0)
(4,6,0)
(13,6,0)
(16,25,1)
(5,12,1)
(2,15,1)
(34,31,1)
(12,29,1)
(33,8,1)
(18,7,1)
(15,27,1)
(27,22,1)
(21,0,1)
(18,21,1)
(29,28,1)
(28,24,1)
(0,20,1)
(9,33,1)
(7,3,1)
(31,32,1)
(25,17,1)
(3,9,1)
(32,13,1)
(8,29,1)
(13,2,1)
(22,18,1)
(31,13,1)
(24,21,1)
(34,18,1)
(2,21,1)
(8,16,1)
(18,16,1)
(25,5,1)
(34,9,1)
(2,16,1)
(16,29,2)
(32,18,2)
(2,16,2)
(13,2,2)
(16,25,2)
(22,18,2)
(15,18,2)
(2,18,2)
(18,21,2)
(12,29,2)
(5,29,2)
(25,17,2)
(31,18,2)
(31,13,2)
(27,18,2)
(25,29,2)
(13,18,2)
(18,9,2)
(3,9,2)
(25,5,2)
(18,16,2)
(7,9,2)
(2,21,2)
-----------------------------------
(0,' ')
(1,)
(2,data * 2)
(3,data)
(4,result)
(5,RAND32()
(6,)
(7,0)
(8,staticFive)
(9,staticFive==5)
(10,)
(11,if(staticFive==5)
(12,data)
(13,result = data * 2)
(14,data)
(15,2)
(16,data = (char)
(17,char)
(18,data > 0)
(19,if(staticFive==5)
(20,data)
(21,data = \' \')
(22,result)
(23,)
(24,staticFive)
(25,(char)
(26,if(data > 0)
(27,data)
(28,5)
(29,staticFive==5)
(30,data = ' ')
(31,printHexCharLine(result)
(32,result)
(33,5)
(34,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^