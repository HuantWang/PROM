-----label-----
1
-----code-----
void CWE190_Integer_Overflow__char_rand_postinc_02_bad()
{
    char data;
    data = ' ';
    if(1)
    {
        /* POTENTIAL FLAW: Use a random value */
        data = (char)RAND32();
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: Incrementing data could cause an overflow */
            data++;
            char result = data;
            printHexCharLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
27,28
28,29
30,31
30,32
32,33
33,34
33,35
33,36
34,35
35,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
-----nextToken-----
2,4,8,10,14,15,17,22,25,26,29,31,37,40,42,45,49,51
-----computeFrom-----
12,13
12,14
20,21
20,22
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__char_rand_postinc_02_bad(){    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
void
CWE190_Integer_Overflow__char_rand_postinc_02_bad()
CWE190_Integer_Overflow__char_rand_postinc_02_bad
{    char data;    data = ' ';    if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }    if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(1)    {        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
1
{        /* POTENTIAL FLAW: Use a random value */        data = (char)RAND32();    }
data = (char)RAND32();
data = (char)RAND32()
data
data
(char)RAND32()
char
char

RAND32()
RAND32
RAND32
if(1)    {        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }    }
{            /* POTENTIAL FLAW: Incrementing data could cause an overflow */            data++;            char result = data;            printHexCharLine(result);        }
data++;
data++
data
data
char result = data;
char result = data;
char
result = data
result
= data
data
data
printHexCharLine(result);
printHexCharLine(result)
printHexCharLine
printHexCharLine
result
result
-----joern-----
(3,5,0)
(7,4,0)
(11,5,0)
(4,12,0)
(14,18,0)
(2,11,0)
(2,14,0)
(1,5,0)
(8,18,0)
(25,11,0)
(6,20,0)
(9,18,0)
(18,9,0)
(13,11,0)
(14,21,0)
(20,14,0)
(20,4,0)
(23,2,0)
(10,2,0)
(20,11,0)
(17,2,0)
(23,4,0)
(2,4,0)
(24,23,0)
(19,14,0)
(22,5,0)
(18,8,0)
(18,14,0)
(11,13,1)
(10,17,1)
(26,23,1)
(16,0,1)
(18,8,1)
(6,16,1)
(26,16,1)
(13,25,1)
(19,0,1)
(20,6,1)
(9,19,1)
(20,11,1)
(2,10,1)
(24,2,1)
(2,11,1)
(0,11,1)
(16,14,1)
(20,14,1)
(18,9,1)
(23,2,1)
(23,24,1)
(17,20,1)
(14,18,1)
(2,14,1)
(2,14,2)
(23,2,2)
(6,16,2)
(18,8,2)
(14,18,2)
(18,0,2)
(19,0,2)
(17,16,2)
(20,14,2)
(14,0,2)
(18,9,2)
(20,11,2)
(20,16,2)
(24,16,2)
(10,16,2)
(23,16,2)
(2,11,2)
(2,16,2)
(9,0,2)
-----------------------------------
(0,1)
(1,if(1)
(2,result = data)
(3,if(1)
(4,)
(5,)
(6,data)
(7,result)
(8,char)
(9,RAND32()
(10,data)
(11,data = ' ')
(12,)
(13,' ')
(14,data = (char)
(15,data = \' \')
(16,1)
(17,result)
(18,(char)
(19,data)
(20,data++)
(21,)
(22,data)
(23,printHexCharLine(result)
(24,result)
(25,data)
(26,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^