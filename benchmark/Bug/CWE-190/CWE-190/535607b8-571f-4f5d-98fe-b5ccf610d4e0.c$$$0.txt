-----label-----
1
-----code-----
void CWE190_Integer_Overflow__short_max_add_17_bad()
{
    int i,j;
    short data;
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use the maximum size of the data type */
        data = SHRT_MAX;
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */
            short result = data + 1;
            printIntLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
61,62
61,63
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
72,73
-----nextToken-----
2,4,8,10,12,15,17,21,22,27,28,31,32,35,40,42,47,48,51,52,55,60,62,66,67,71,73
-----computeFrom-----
19,20
19,21
25,26
25,27
29,30
29,31
38,39
38,40
45,46
45,47
49,50
49,51
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__short_max_add_17_bad(){    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
void
CWE190_Integer_Overflow__short_max_add_17_bad()
CWE190_Integer_Overflow__short_max_add_17_bad
{    int i,j;    short data;    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
short data;
short data;
short
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use the maximum size of the data type */        data = SHRT_MAX;    }
data = SHRT_MAX;
data = SHRT_MAX
data
data
SHRT_MAX
SHRT_MAX
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }    }
{            /* POTENTIAL FLAW: Adding 1 to data could cause an overflow */            short result = data + 1;            printIntLine(result);        }
short result = data + 1;
short result = data + 1;
short
result = data + 1
result
= data + 1
data + 1
data
data
1
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(39,36,0)
(0,35,0)
(13,2,0)
(33,27,0)
(10,30,0)
(37,18,0)
(7,27,0)
(33,19,0)
(11,2,0)
(24,13,0)
(36,28,0)
(20,4,0)
(6,22,0)
(3,35,0)
(19,33,0)
(30,18,0)
(4,22,0)
(15,32,0)
(25,35,0)
(31,13,0)
(29,35,0)
(5,11,0)
(30,19,0)
(1,27,0)
(33,36,0)
(18,16,0)
(12,33,0)
(17,33,0)
(34,2,0)
(27,35,0)
(26,2,0)
(19,18,0)
(32,22,0)
(8,35,0)
(9,4,0)
(14,36,0)
(21,22,0)
(38,19,0)
(39,13,1)
(34,27,1)
(24,11,1)
(4,22,1)
(6,21,1)
(20,32,1)
(26,34,1)
(9,20,1)
(22,6,1)
(21,13,1)
(36,14,1)
(24,2,1)
(32,15,1)
(17,38,1)
(38,4,1)
(31,24,1)
(33,12,1)
(20,22,1)
(11,5,1)
(30,19,1)
(15,30,1)
(4,9,1)
(33,27,1)
(19,33,1)
(30,10,1)
(14,39,1)
(32,22,1)
(13,2,1)
(23,4,1)
(11,2,1)
(33,36,1)
(13,31,1)
(5,36,1)
(2,26,1)
(7,1,1)
(12,17,1)
(10,19,1)
(27,7,1)
(33,36,2)
(31,13,2)
(15,4,2)
(36,13,2)
(24,13,2)
(4,22,2)
(39,13,2)
(32,22,2)
(38,4,2)
(33,27,2)
(5,13,2)
(11,2,2)
(32,4,2)
(4,4,2)
(14,13,2)
(9,4,2)
(11,13,2)
(30,4,2)
(33,4,2)
(19,4,2)
(20,4,2)
(17,4,2)
(13,13,2)
(13,2,2)
(10,4,2)
(12,4,2)
(30,19,2)
(19,33,2)
-----------------------------------
(0,for(i = 0; i < 1; i++)
(1,data)
(2,i = 0)
(3,for(j = 0; j < 1; j++)
(4,j < 1)
(5,i)
(6,0)
(7,0)
(8,data)
(9,1)
(10,result)
(11,i++)
(12,1)
(13,i < 1)
(14,SHRT_MAX)
(15,j)
(16,)
(17,data)
(18,)
(19,result = data + 1)
(20,j)
(21,j)
(22,j = 0)
(23,RET)
(24,i)
(25,j)
(26,0)
(27,data = 0)
(28,)
(29,i)
(30,printIntLine(result)
(31,1)
(32,j++)
(33,data + 1)
(34,i)
(35,)
(36,data = SHRT_MAX)
(37,result)
(38,result)
(39,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^