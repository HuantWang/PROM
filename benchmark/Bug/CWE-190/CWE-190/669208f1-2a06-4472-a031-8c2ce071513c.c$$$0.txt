-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int_listen_socket_square_66b_badSink(int dataArray[])
{
    /* copy data out of dataArray */
    int data = dataArray[2];
    {
        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */
        int result = data * data;
        printIntLine(result);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
22,23
23,24
23,25
25,26
25,27
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
-----nextToken-----
2,4,6,8,9,13,15,19,20,24,26,30,32,36,38
-----computeFrom-----
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int_listen_socket_square_66b_badSink(int dataArray[]){    /* copy data out of dataArray */    int data = dataArray[2];    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
void
CWE190_Integer_Overflow__int_listen_socket_square_66b_badSink(int dataArray[])
CWE190_Integer_Overflow__int_listen_socket_square_66b_badSink
int dataArray[]
int
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    int data = dataArray[2];    {        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }}
int data = dataArray[2];
int data = dataArray[2];
int
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        /* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */        int result = data * data;        printIntLine(result);    }
int result = data * data;
int result = data * data;
int
result = data * data
result
= data * data
data * data
data
data
data
data
printIntLine(result);
printIntLine(result)
printIntLine
printIntLine
result
result
-----joern-----
(2,3,0)
(6,3,0)
(2,14,0)
(3,2,0)
(15,8,0)
(10,14,0)
(0,2,0)
(11,14,0)
(9,8,0)
(17,15,0)
(8,15,0)
(7,10,0)
(8,2,0)
(1,4,0)
(3,13,0)
(16,8,0)
(4,10,0)
(5,3,0)
(15,10,0)
(4,15,0)
(15,8,1)
(4,15,1)
(16,17,1)
(12,4,1)
(5,6,1)
(8,2,1)
(9,16,1)
(1,15,1)
(3,13,1)
(3,5,1)
(6,0,1)
(17,2,1)
(4,1,1)
(2,3,1)
(8,9,1)
(3,13,2)
(4,15,2)
(8,2,2)
(15,8,2)
(2,3,2)
-----------------------------------
(0,data)
(1,result)
(2,data = dataArray[2])
(3,dataArray[2])
(4,printIntLine(result)
(5,2)
(6,dataArray)
(7,result)
(8,data * data)
(9,data)
(10,)
(11,data)
(12,RET)
(13,int dataArray[])
(14,)
(15,result = data * data)
(16,data)
(17,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^