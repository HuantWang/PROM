-----label-----
1
-----code-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_17_bad()
{
    int i,j;
    int64_t data;
    data = 0LL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%" SCNd64, &data);
    }
    for(j = 0; j < 1; j++)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */
            int64_t result = data * data;
            printLongLongLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
49,50
50,51
52,53
53,54
53,55
54,55
55,56
55,57
56,57
58,59
58,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,43,44,47,48,51,57,59,63,65,69,71
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
41,42
41,43
45,46
45,47
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ProblemStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__int64_t_fscanf_square_17_bad(){    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
void
CWE190_Integer_Overflow__int64_t_fscanf_square_17_bad()
CWE190_Integer_Overflow__int64_t_fscanf_square_17_bad
{    int i,j;    int64_t data;    data = 0LL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }    for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t data;
int64_t data;
int64_t
int64_t
data
data
data = 0LL;
data = 0LL
data
data
0LL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%" SCNd64, &data);    }
fscanf (stdin, "%" SCNd64, &data);
for(j = 0; j < 1; j++)    {        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > LLONG_MAX, this will overflow */            int64_t result = data * data;            printLongLongLine(result);        }
int64_t result = data * data;
int64_t result = data * data;
int64_t
int64_t
result = data * data
result
= data * data
data * data
data
data
data
data
printLongLongLine(result);
printLongLongLine(result)
printLongLongLine
printLongLongLine
result
result
-----joern-----
(5,6,0)
(21,22,0)
(16,14,0)
(7,11,0)
(14,23,0)
(13,6,0)
(30,7,0)
(29,13,0)
(23,0,0)
(15,24,0)
(9,6,0)
(28,22,0)
(0,17,0)
(26,24,0)
(1,14,0)
(32,0,0)
(3,24,0)
(18,11,0)
(33,24,0)
(23,14,0)
(22,11,0)
(2,32,0)
(32,23,0)
(25,13,0)
(10,24,0)
(20,5,0)
(19,6,0)
(31,23,0)
(8,24,0)
(27,0,0)
(12,11,0)
(21,11,1)
(13,25,1)
(5,6,1)
(22,11,1)
(30,32,1)
(21,7,1)
(1,31,1)
(5,20,1)
(7,11,1)
(32,2,1)
(18,13,1)
(16,1,1)
(23,14,1)
(31,22,1)
(2,23,1)
(14,16,1)
(32,23,1)
(9,19,1)
(11,12,1)
(29,5,1)
(19,33,1)
(12,18,1)
(29,6,1)
(22,28,1)
(28,21,1)
(20,13,1)
(25,29,1)
(7,30,1)
(4,22,1)
(13,6,1)
(6,9,1)
(22,11,2)
(20,13,2)
(5,13,2)
(2,22,2)
(22,22,2)
(14,22,2)
(1,22,2)
(23,14,2)
(31,22,2)
(32,23,2)
(21,22,2)
(28,22,2)
(7,22,2)
(25,13,2)
(30,22,2)
(7,11,2)
(5,6,2)
(29,13,2)
(32,22,2)
(23,22,2)
(13,6,2)
(13,13,2)
(16,22,2)
-----------------------------------
(0,)
(1,data)
(2,result)
(3,j)
(4,RET)
(5,i++)
(6,i = 0)
(7,j++)
(8,for(j = 0; j < 1; j++)
(9,0)
(10,i)
(11,j = 0)
(12,0)
(13,i < 1)
(14,data * data)
(15,data)
(16,data)
(17,)
(18,j)
(19,i)
(20,i)
(21,j)
(22,j < 1)
(23,result = data * data)
(24,)
(25,1)
(26,for(i = 0; i < 1; i++)
(27,result)
(28,1)
(29,i)
(30,j)
(31,result)
(32,printLongLongLine(result)
(33,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^