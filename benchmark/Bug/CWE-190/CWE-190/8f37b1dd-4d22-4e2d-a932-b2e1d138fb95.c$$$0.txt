-----label-----
1
-----code-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_02_bad()
{
    unsigned int data;
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Use a value input from the console */
        fscanf (stdin, "%u", &data);
    }
    if(1)
    {
        {
            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */
            unsigned int result = data * data;
            printUnsignedLine(result);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
18,19
19,20
20,21
20,22
20,23
20,24
21,22
23,24
26,27
27,28
29,30
29,31
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
-----nextToken-----
2,4,8,10,14,15,17,22,24,25,28,30,35,37,41,43,47,49
-----computeFrom-----
12,13
12,14
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE190_Integer_Overflow__unsigned_int_fscanf_square_02_bad(){    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
void
CWE190_Integer_Overflow__unsigned_int_fscanf_square_02_bad()
CWE190_Integer_Overflow__unsigned_int_fscanf_square_02_bad
{    unsigned int data;    data = 0;    if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }    if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }}
unsigned int data;
unsigned int data;
unsigned int
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
1
{        /* POTENTIAL FLAW: Use a value input from the console */        fscanf (stdin, "%u", &data);    }
fscanf (stdin, "%u", &data);
fscanf (stdin, "%u", &data)
fscanf
fscanf
stdin
stdin
"%u"
&data
data
data
if(1)    {        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
1
{        {            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }    }
{            /* POTENTIAL FLAW: if (data*data) > UINT_MAX, this will overflow */            unsigned int result = data * data;            printUnsignedLine(result);        }
unsigned int result = data * data;
unsigned int result = data * data;
unsigned int
result = data * data
result
= data * data
data * data
data
data
data
data
printUnsignedLine(result);
printUnsignedLine(result)
printUnsignedLine
printUnsignedLine
result
result
-----joern-----
(24,17,0)
(5,1,0)
(21,18,0)
(2,18,0)
(13,1,0)
(11,15,0)
(20,23,0)
(17,20,0)
(14,21,0)
(19,15,0)
(2,15,0)
(17,14,0)
(4,18,0)
(7,21,0)
(0,21,0)
(14,20,0)
(9,20,0)
(18,1,0)
(8,2,0)
(15,6,0)
(21,14,0)
(25,1,0)
(3,14,0)
(16,18,0)
(15,2,0)
(12,22,1)
(8,19,1)
(17,14,1)
(19,11,1)
(2,18,1)
(17,24,1)
(2,8,1)
(21,18,1)
(16,4,1)
(24,14,1)
(3,22,1)
(18,16,1)
(22,10,1)
(15,2,1)
(11,10,1)
(0,3,1)
(12,17,1)
(14,21,1)
(7,0,1)
(22,15,1)
(21,7,1)
(10,18,1)
(21,22,2)
(19,10,2)
(15,2,2)
(0,22,2)
(8,10,2)
(11,10,2)
(17,14,2)
(2,18,2)
(24,22,2)
(17,22,2)
(21,18,2)
(2,10,2)
(15,10,2)
(7,22,2)
(3,22,2)
(14,21,2)
(14,22,2)
-----------------------------------
(0,data)
(1,)
(2,&data)
(3,result)
(4,data)
(5,if(1)
(6,)
(7,data)
(8,data)
(9,result)
(10,1)
(11,stdin)
(12,RET)
(13,data)
(14,result = data * data)
(15,fscanf (stdin, "%u", &data)
(16,0)
(17,printUnsignedLine(result)
(18,data = 0)
(19,"%u")
(20,)
(21,data * data)
(22,1)
(23,)
(24,result)
(25,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^