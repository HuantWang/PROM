-----label-----
1
-----code-----
static int badSource(int count)
{
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    return count;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
11,12
11,13
11,14
11,15
12,13
14,15
17,18
18,19
20,21
21,22
-----nextToken-----
2,4,6,8,13,15,16,19,22
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int badSource(int count){    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    return count;}
static int
badSource(int count)
badSource
int count
int
count
count
{    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    return count;}
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
return count;
count
count
-----joern-----
(2,8,0)
(9,7,0)
(8,7,0)
(3,2,0)
(1,9,0)
(9,4,0)
(2,4,0)
(6,8,0)
(5,9,0)
(8,2,0)
(0,8,0)
(9,4,1)
(0,6,1)
(9,1,1)
(8,2,1)
(5,9,1)
(2,4,1)
(1,8,1)
(2,3,1)
(3,0,1)
(2,4,2)
(8,2,2)
(9,4,2)
(5,9,2)
-----------------------------------
(0,"%d")
(1,count)
(2,&count)
(3,count)
(4,int count)
(5,RET)
(6,stdin)
(7,)
(8,fscanf(stdin, "%d", &count)
(9,return count;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^