-----label-----
1
-----code-----
static void badSink(int count)
{
    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
    SLEEP(count);
    printLine("Sleep time possibly too long");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
11,12
11,13
12,13
14,15
16,17
17,18
17,19
18,19
-----nextToken-----
2,4,6,8,13,15,19,20
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(int count){    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */    SLEEP(count);    printLine("Sleep time possibly too long");}
static void
badSink(int count)
badSink
int count
int
count
count
{    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */    SLEEP(count);    printLine("Sleep time possibly too long");}
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(6,5,0)
(4,6,0)
(2,1,0)
(3,2,0)
(2,5,0)
(2,3,1)
(0,6,1)
(2,1,1)
(6,4,1)
(4,2,1)
(2,1,2)
-----------------------------------
(0,RET)
(1,int count)
(2,SLEEP(count)
(3,count)
(4,"Sleep time possibly too long")
(5,)
(6,printLine("Sleep time possibly too long")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^