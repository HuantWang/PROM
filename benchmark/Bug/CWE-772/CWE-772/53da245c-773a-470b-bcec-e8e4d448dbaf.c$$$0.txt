-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
                free(data);
            }
        }
    }
    else
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
29,31
31,32
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
52,54
53,54
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
89,90
91,92
91,93
92,93
94,95
95,96
95,97
96,97
99,100
99,101
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
108,110
109,110
109,111
110,111
115,116
116,117
116,118
117,118
117,119
118,119
118,120
119,120
124,125
125,126
125,127
126,127
128,129
129,130
129,131
130,131
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
140,143
140,144
140,145
140,146
140,147
140,148
140,149
141,142
142,143
142,144
143,144
145,146
145,147
145,148
148,149
149,150
149,151
150,151
150,152
151,152
153,154
155,156
155,157
156,157
158,159
158,160
160,161
161,162
161,163
162,163
165,166
165,167
166,167
166,168
167,168
169,170
171,172
172,173
173,174
173,175
174,175
176,177
178,179
179,180
179,181
180,181
182,183
182,184
185,186
186,187
186,188
187,188
187,189
188,189
188,190
189,190
194,195
195,196
195,197
196,197
196,198
197,198
197,199
198,199
203,204
204,205
204,206
205,206
207,208
208,209
208,210
209,210
212,213
213,214
213,215
214,215
216,217
216,218
217,218
217,219
218,219
220,221
222,223
222,224
222,225
223,224
225,226
227,228
227,229
228,229
230,231
231,232
231,233
232,233
235,236
235,237
236,237
236,238
237,238
239,240
241,242
241,243
241,244
241,245
242,243
243,244
243,245
244,245
246,247
248,249
249,250
249,251
250,251
250,252
251,252
251,253
252,253
257,258
258,259
258,260
259,260
259,261
260,261
260,262
261,262
266,267
267,268
267,269
268,269
270,271
271,272
271,273
272,273
275,276
276,277
276,278
277,278
279,280
-----nextToken-----
2,4,9,15,17,18,23,25,28,30,34,35,39,41,46,48,54,55,56,57,63,64,65,66,70,74,75,79,83,85,88,90,93,97,98,102,104,111,112,113,114,120,121,122,123,127,131,132,136,138,144,146,147,152,154,157,159,163,164,168,170,175,177,181,183,184,190,191,192,193,199,200,201,202,206,210,211,215,219,221,224,226,229,233,234,238,240,245,247,253,254,255,256,262,263,264,265,269,273,274,278,280
-----computeFrom-----
29,30
29,31
37,38
37,39
50,51
50,52
59,60
59,61
77,78
77,79
91,92
91,93
100,101
100,102
107,108
107,109
116,117
116,118
158,159
158,160
166,167
166,168
186,187
186,188
195,196
195,197
213,214
213,215
227,228
227,229
236,237
236,238
243,244
243,245
249,250
249,251
258,259
258,260
-----guardedBy-----
102,138
238,247
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_12_bad()
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }}
if(globalReturnsTrueOrFalse())    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
twoIntsStruct * tmpData;
twoIntsStruct * tmpData;
twoIntsStruct
twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
tmpData
tmpData
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(141,90,0)
(133,58,0)
(121,126,0)
(14,129,0)
(130,156,0)
(132,61,0)
(7,11,0)
(146,40,0)
(67,45,0)
(63,121,0)
(72,80,0)
(45,90,0)
(101,80,0)
(78,112,0)
(11,7,0)
(61,95,0)
(113,58,0)
(71,143,0)
(66,123,0)
(37,78,0)
(148,108,0)
(94,51,0)
(127,145,0)
(12,58,0)
(138,48,0)
(8,146,0)
(61,78,0)
(40,58,0)
(104,45,0)
(120,95,0)
(11,54,0)
(36,110,0)
(122,57,0)
(130,18,0)
(102,80,0)
(58,138,0)
(54,112,0)
(7,58,0)
(48,138,0)
(139,37,0)
(75,3,0)
(134,156,0)
(73,143,0)
(108,148,0)
(141,137,0)
(21,154,0)
(27,145,0)
(118,93,0)
(86,19,0)
(40,146,0)
(54,11,0)
(45,104,0)
(63,37,0)
(79,27,0)
(26,33,0)
(114,36,0)
(111,63,0)
(19,39,0)
(100,113,0)
(25,146,0)
(28,78,0)
(9,71,0)
(110,60,0)
(42,142,0)
(112,34,0)
(75,143,0)
(30,108,0)
(39,19,0)
(22,143,0)
(151,112,0)
(146,8,0)
(1,55,0)
(93,118,0)
(77,105,0)
(149,114,0)
(64,35,0)
(71,80,0)
(0,38,0)
(3,75,0)
(78,38,0)
(68,18,0)
(150,40,0)
(55,78,0)
(141,18,0)
(110,2,0)
(13,81,0)
(133,109,0)
(70,113,0)
(31,57,0)
(82,37,0)
(154,126,0)
(142,20,0)
(31,58,0)
(128,157,0)
(71,18,0)
(35,51,0)
(10,68,0)
(109,133,0)
(115,157,0)
(125,133,0)
(57,59,0)
(6,19,0)
(143,2,0)
(46,103,0)
(39,116,0)
(38,40,0)
(90,141,0)
(108,18,0)
(156,130,0)
(84,130,0)
(29,36,0)
(109,151,0)
(57,31,0)
(119,31,0)
(81,114,0)
(124,3,0)
(36,114,0)
(52,80,0)
(65,55,0)
(35,22,0)
(43,108,0)
(152,42,0)
(2,80,0)
(24,7,0)
(114,81,0)
(59,112,0)
(156,103,0)
(87,151,0)
(38,0,0)
(53,68,0)
(19,78,0)
(40,38,0)
(148,33,0)
(145,27,0)
(23,83,0)
(155,143,0)
(42,143,0)
(95,61,0)
(147,59,0)
(95,154,0)
(47,80,0)
(145,85,0)
(96,42,0)
(4,157,0)
(22,35,0)
(97,8,0)
(33,80,0)
(116,39,0)
(144,2,0)
(20,142,0)
(18,80,0)
(2,110,0)
(60,110,0)
(135,78,0)
(80,69,0)
(103,80,0)
(58,112,0)
(18,141,0)
(142,42,0)
(17,112,0)
(93,99,0)
(76,22,0)
(36,18,0)
(16,18,0)
(137,141,0)
(23,136,0)
(110,36,0)
(105,2,0)
(51,123,0)
(101,115,0)
(85,138,0)
(135,126,0)
(49,148,0)
(143,123,0)
(138,85,0)
(41,66,0)
(3,66,0)
(38,78,0)
(89,104,0)
(138,58,0)
(56,22,0)
(117,7,0)
(140,130,0)
(106,75,0)
(107,112,0)
(157,115,0)
(15,109,0)
(37,63,0)
(98,105,0)
(90,45,0)
(74,136,0)
(44,121,0)
(85,145,0)
(131,135,0)
(157,18,0)
(91,133,0)
(116,126,0)
(20,123,0)
(92,118,0)
(88,31,0)
(62,61,0)
(115,101,0)
(153,75,0)
(136,23,0)
(32,112,0)
(118,92,1)
(130,18,1)
(1,65,1)
(143,2,1)
(91,23,1)
(132,121,1)
(140,84,1)
(39,19,1)
(3,75,1)
(156,130,1)
(157,4,1)
(15,133,1)
(96,66,1)
(55,1,1)
(130,140,1)
(40,58,1)
(95,120,1)
(128,103,1)
(7,24,1)
(148,108,1)
(31,58,1)
(11,7,1)
(101,115,1)
(138,85,1)
(74,113,1)
(131,116,1)
(133,58,1)
(25,150,1)
(71,143,1)
(40,146,1)
(61,62,1)
(144,101,1)
(135,78,1)
(45,104,1)
(78,38,1)
(134,130,1)
(108,18,1)
(36,114,1)
(153,51,1)
(2,110,1)
(65,78,1)
(71,18,1)
(30,93,1)
(125,91,1)
(56,76,1)
(108,43,1)
(28,54,1)
(100,70,1)
(88,151,1)
(57,122,1)
(109,133,1)
(42,143,1)
(57,31,1)
(73,155,1)
(38,40,1)
(103,46,1)
(24,117,1)
(121,44,1)
(30,68,1)
(8,97,1)
(62,132,1)
(54,11,1)
(135,131,1)
(42,152,1)
(77,98,1)
(7,58,1)
(105,77,1)
(97,25,1)
(127,12,1)
(155,105,1)
(12,5,1)
(110,60,1)
(139,55,1)
(21,95,1)
(110,36,1)
(116,39,1)
(29,144,1)
(63,37,1)
(59,147,1)
(41,3,1)
(16,5,1)
(86,154,1)
(145,27,1)
(154,21,1)
(106,153,1)
(109,15,1)
(147,57,1)
(10,18,1)
(26,148,1)
(92,68,1)
(148,49,1)
(133,125,1)
(6,86,1)
(68,53,1)
(22,143,1)
(22,56,1)
(9,105,1)
(87,109,1)
(68,18,1)
(13,149,1)
(142,42,1)
(64,22,1)
(98,2,1)
(61,78,1)
(37,82,1)
(149,29,1)
(81,13,1)
(156,134,1)
(94,35,1)
(138,48,1)
(104,89,1)
(35,64,1)
(111,37,1)
(113,58,1)
(27,79,1)
(53,10,1)
(157,18,1)
(114,81,1)
(31,119,1)
(117,59,1)
(20,142,1)
(79,127,1)
(89,67,1)
(67,16,1)
(119,88,1)
(95,61,1)
(141,90,1)
(44,63,1)
(36,18,1)
(113,100,1)
(115,157,1)
(120,61,1)
(9,20,1)
(38,0,1)
(152,96,1)
(58,138,1)
(122,31,1)
(55,78,1)
(37,78,1)
(50,135,1)
(50,55,1)
(150,28,1)
(3,124,1)
(105,2,1)
(23,136,1)
(46,156,1)
(51,94,1)
(141,137,1)
(90,45,1)
(4,128,1)
(35,22,1)
(75,143,1)
(43,30,1)
(82,139,1)
(93,118,1)
(49,108,1)
(91,113,1)
(63,111,1)
(66,41,1)
(33,26,1)
(18,141,1)
(85,145,1)
(84,33,1)
(136,74,1)
(19,6,1)
(19,78,1)
(50,71,1)
(143,73,1)
(70,58,1)
(71,9,1)
(124,75,1)
(151,87,1)
(75,106,1)
(146,8,1)
(76,143,1)
(154,55,2)
(97,5,2)
(12,5,2)
(64,105,2)
(145,5,2)
(98,5,2)
(13,5,2)
(73,105,2)
(138,85,2)
(42,143,2)
(4,5,2)
(86,55,2)
(93,68,2)
(118,68,2)
(30,5,2)
(2,5,2)
(22,143,2)
(40,5,2)
(46,5,2)
(18,141,2)
(113,5,2)
(8,5,2)
(122,5,2)
(53,5,2)
(2,110,2)
(90,45,2)
(114,5,2)
(108,18,2)
(142,105,2)
(143,2,2)
(37,55,2)
(156,130,2)
(18,5,2)
(96,105,2)
(108,5,2)
(66,105,2)
(91,5,2)
(148,5,2)
(22,105,2)
(79,5,2)
(59,5,2)
(67,5,2)
(58,5,2)
(19,78,2)
(138,48,2)
(33,5,2)
(142,42,2)
(141,90,2)
(150,5,2)
(93,118,2)
(130,5,2)
(109,133,2)
(110,5,2)
(105,2,2)
(10,5,2)
(135,78,2)
(7,5,2)
(106,105,2)
(71,18,2)
(45,104,2)
(56,105,2)
(23,113,2)
(115,157,2)
(109,5,2)
(45,5,2)
(139,55,2)
(131,55,2)
(55,5,2)
(130,18,2)
(100,5,2)
(42,105,2)
(145,27,2)
(55,78,2)
(11,7,2)
(116,39,2)
(127,5,2)
(41,105,2)
(84,5,2)
(135,55,2)
(143,105,2)
(40,58,2)
(35,105,2)
(132,55,2)
(155,105,2)
(31,58,2)
(88,5,2)
(94,105,2)
(157,18,2)
(110,60,2)
(68,5,2)
(26,5,2)
(121,55,2)
(51,105,2)
(95,61,2)
(101,115,2)
(16,5,2)
(3,75,2)
(62,55,2)
(128,5,2)
(49,5,2)
(20,142,2)
(19,55,2)
(54,5,2)
(125,5,2)
(35,22,2)
(54,11,2)
(39,19,2)
(117,5,2)
(78,38,2)
(65,5,2)
(75,105,2)
(103,5,2)
(146,5,2)
(20,105,2)
(1,5,2)
(152,105,2)
(119,5,2)
(151,5,2)
(146,8,2)
(63,37,2)
(28,5,2)
(120,55,2)
(63,55,2)
(75,143,2)
(87,5,2)
(21,55,2)
(149,5,2)
(40,146,2)
(3,105,2)
(68,18,2)
(24,5,2)
(38,40,2)
(43,5,2)
(61,55,2)
(27,5,2)
(105,5,2)
(57,31,2)
(115,5,2)
(44,55,2)
(113,58,2)
(76,105,2)
(116,55,2)
(15,5,2)
(89,5,2)
(156,5,2)
(36,18,2)
(85,5,2)
(71,5,2)
(138,5,2)
(114,81,2)
(133,5,2)
(133,58,2)
(25,5,2)
(85,145,2)
(82,55,2)
(37,78,2)
(153,105,2)
(23,136,2)
(140,5,2)
(77,5,2)
(7,58,2)
(36,114,2)
(58,138,2)
(74,113,2)
(144,5,2)
(134,5,2)
(11,5,2)
(71,143,2)
(38,0,2)
(104,5,2)
(141,5,2)
(6,55,2)
(157,5,2)
(136,113,2)
(70,5,2)
(38,5,2)
(147,5,2)
(39,55,2)
(124,105,2)
(148,108,2)
(29,5,2)
(81,5,2)
(9,5,2)
(36,5,2)
(92,68,2)
(61,78,2)
(101,5,2)
(141,137,2)
(110,36,2)
(111,55,2)
(95,55,2)
(31,5,2)
(57,5,2)
(90,5,2)
(78,5,2)
-----------------------------------
(0,twoIntsStruct *)
(1,NULL)
(2,tmpData = (twoIntsStruct *)
(3,data[0].intTwo)
(4,0)
(5,globalReturnsTrueOrFalse()
(6,0)
(7,data[0])
(8,sizeof(twoIntsStruct)
(9,data)
(10,data)
(11,&data[0])
(12,data)
(13,twoIntsStruct)
(14,if(globalReturnsTrueOrFalse()
(15,intOne)
(16,data)
(17,data)
(18,* data = (twoIntsStruct *)
(19,data[0])
(20,printStructLine(&data[0])
(21,1)
(22,data[0])
(23,exit(-1)
(24,0)
(25,130000)
(26,0)
(27,sizeof(twoIntsStruct)
(28,data)
(29,data)
(30,data)
(31,data[0])
(32,if (data != NULL)
(33,data[0].intOne = 0)
(34,)
(35,data[0].intOne)
(36,realloc(data, (130000)
(37,data[0])
(38,(twoIntsStruct *)
(39,&data[0])
(40,realloc(data, (130000)
(41,1)
(42,data[0])
(43,0)
(44,1)
(45,100*sizeof(twoIntsStruct)
(46,0)
(47,data)
(48,twoIntsStruct *)
(49,intOne)
(50,RET)
(51,data[0].intOne = 1)
(52,if (data == NULL)
(53,NULL)
(54,printStructLine(&data[0])
(55,data != NULL)
(56,0)
(57,data[0].intTwo)
(58,* data = (twoIntsStruct *)
(59,data[0].intTwo = 0)
(60,twoIntsStruct *)
(61,data[0])
(62,0)
(63,data[0].intOne)
(64,intOne)
(65,data)
(66,data[0].intTwo = 1)
(67,100)
(68,data == NULL)
(69,)
(70,data)
(71,free(data)
(72,if (tmpData != NULL)
(73,tmpData)
(74,1)
(75,data[0])
(76,data)
(77,NULL)
(78,data = (twoIntsStruct *)
(79,twoIntsStruct)
(80,)
(81,sizeof(twoIntsStruct)
(82,0)
(83,)
(84,data)
(85,malloc(100*sizeof(twoIntsStruct)
(86,data)
(87,0)
(88,data)
(89,twoIntsStruct)
(90,malloc(100*sizeof(twoIntsStruct)
(91,data)
(92,1)
(93,exit(-1)
(94,1)
(95,data[0].intTwo)
(96,data)
(97,twoIntsStruct)
(98,tmpData)
(99,)
(100,NULL)
(101,printStructLine(&data[0])
(102,tmpData)
(103,data[0].intTwo = 0)
(104,sizeof(twoIntsStruct)
(105,tmpData != NULL)
(106,0)
(107,if (data == NULL)
(108,data[0])
(109,data[0].intOne)
(110,(twoIntsStruct *)
(111,intOne)
(112,)
(113,data == NULL)
(114,(130000)
(115,&data[0])
(116,printStructLine(&data[0])
(117,data)
(118,-1)
(119,0)
(120,intTwo)
(121,data[0].intOne = 1)
(122,intTwo)
(123,)
(124,intTwo)
(125,0)
(126,)
(127,100)
(128,data)
(129,)
(130,data[0])
(131,data)
(132,data)
(133,data[0])
(134,intTwo)
(135,free(data)
(136,-1)
(137,twoIntsStruct *)
(138,(twoIntsStruct *)
(139,data)
(140,0)
(141,(twoIntsStruct *)
(142,&data[0])
(143,data = tmpData)
(144,tmpData)
(145,100*sizeof(twoIntsStruct)
(146,(130000)
(147,0)
(148,data[0].intOne)
(149,130000)
(150,data)
(151,data[0].intOne = 0)
(152,0)
(153,data)
(154,data[0].intTwo = 1)
(155,data)
(156,data[0].intTwo)
(157,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
