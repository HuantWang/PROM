-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_34_bad()
{
    int * data;
    CWE401_Memory_Leak__int_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    myUnion.unionFirst = data;
    {
        int * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
71,72
71,73
72,73
72,74
73,74
76,77
78,79
78,80
79,80
80,81
80,82
82,83
82,84
82,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,59,60,61,65,68,69,74,75,77,81,83,84,88,89,90
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
56,57
56,58
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_34_bad(){    int * data;    CWE401_Memory_Leak__int_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_34_bad()
CWE401_Memory_Leak__int_malloc_34_bad
{    int * data;    CWE401_Memory_Leak__int_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
CWE401_Memory_Leak__int_malloc_34_unionType myUnion;
CWE401_Memory_Leak__int_malloc_34_unionType myUnion;
CWE401_Memory_Leak__int_malloc_34_unionType
CWE401_Memory_Leak__int_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = myUnion.unionSecond;
int * data = myUnion.unionSecond;
int
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(2,21,0)
(14,19,0)
(36,31,0)
(8,24,0)
(38,31,0)
(9,24,0)
(1,30,0)
(0,43,0)
(6,42,0)
(4,19,0)
(6,30,0)
(29,43,0)
(30,6,0)
(21,17,0)
(3,16,0)
(28,33,0)
(27,43,0)
(44,31,0)
(31,6,0)
(0,17,0)
(43,0,0)
(11,17,0)
(10,37,0)
(13,44,0)
(20,4,0)
(22,17,0)
(26,33,0)
(4,33,0)
(41,3,0)
(18,17,0)
(19,17,0)
(23,22,0)
(7,36,0)
(35,1,0)
(43,21,0)
(15,16,0)
(6,31,0)
(42,6,0)
(33,4,0)
(30,1,0)
(25,17,0)
(5,22,0)
(40,3,0)
(12,36,0)
(31,17,0)
(34,44,0)
(16,17,0)
(36,21,0)
(43,31,0)
(16,31,0)
(37,1,0)
(9,32,0)
(1,37,0)
(24,9,0)
(10,35,1)
(39,4,1)
(7,12,1)
(34,31,1)
(43,31,1)
(9,24,1)
(44,31,1)
(16,15,1)
(0,43,1)
(12,44,1)
(6,42,1)
(43,21,1)
(27,21,1)
(31,6,1)
(20,16,1)
(30,1,1)
(29,27,1)
(3,40,1)
(22,23,1)
(6,30,1)
(16,31,1)
(8,44,1)
(12,9,1)
(44,13,1)
(4,33,1)
(2,36,1)
(38,22,1)
(41,0,1)
(13,34,1)
(33,26,1)
(43,29,1)
(28,20,1)
(21,2,1)
(35,38,1)
(23,5,1)
(36,31,1)
(26,28,1)
(24,8,1)
(1,37,1)
(37,10,1)
(36,7,1)
(40,41,1)
(15,3,1)
(44,31,2)
(31,6,2)
(16,31,2)
(8,44,2)
(4,33,2)
(43,31,2)
(6,42,2)
(0,43,2)
(24,44,2)
(36,31,2)
(6,30,2)
(30,1,2)
(9,44,2)
(43,21,2)
(1,37,2)
(9,24,2)
-----------------------------------
(0,printIntLine(data[0])
(1,100*sizeof(int)
(2,5)
(3,myUnion.unionFirst)
(4,* data = myUnion.unionSecond)
(5,data)
(6,(int *)
(7,0)
(8,1)
(9,exit(-1)
(10,int)
(11,if (data == NULL)
(12,data)
(13,NULL)
(14,data)
(15,data)
(16,myUnion.unionFirst = data)
(17,)
(18,data)
(19,)
(20,data)
(21,data[0] = 5)
(22,data = NULL)
(23,NULL)
(24,-1)
(25,myUnion)
(26,unionSecond)
(27,data)
(28,myUnion)
(29,0)
(30,malloc(100*sizeof(int)
(31,data = (int *)
(32,)
(33,myUnion.unionSecond)
(34,data)
(35,100)
(36,data[0])
(37,sizeof(int)
(38,data)
(39,RET)
(40,unionFirst)
(41,myUnion)
(42,int *)
(43,data[0])
(44,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
