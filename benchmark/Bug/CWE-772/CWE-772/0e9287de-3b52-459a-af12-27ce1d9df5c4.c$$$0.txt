-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_15_bad()
{
    twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
86,87
87,88
87,89
88,89
92,93
92,94
94,95
94,96
94,97
94,98
94,99
94,100
95,96
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,84,85,89,90,91,93,96,97,98,99,103,104,105
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_15_bad(){    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_15_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_15_bad
{    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(58,42,0)
(42,5,0)
(37,52,0)
(37,5,0)
(5,42,0)
(6,55,0)
(6,38,0)
(30,45,0)
(16,8,0)
(8,59,0)
(33,39,0)
(0,52,0)
(35,27,0)
(26,52,0)
(42,59,0)
(41,53,0)
(59,22,0)
(49,9,0)
(5,37,0)
(19,33,0)
(21,20,0)
(22,32,0)
(31,53,0)
(29,59,0)
(3,36,0)
(46,45,0)
(15,40,0)
(22,59,0)
(32,22,0)
(40,27,0)
(33,36,0)
(36,52,0)
(48,42,0)
(25,23,0)
(54,53,0)
(2,52,0)
(56,39,0)
(29,20,0)
(4,2,0)
(45,32,0)
(7,30,0)
(9,53,0)
(28,52,0)
(12,52,0)
(20,2,0)
(57,39,0)
(39,33,0)
(34,59,0)
(22,50,0)
(45,30,0)
(18,53,0)
(43,40,0)
(50,22,0)
(44,55,0)
(10,29,0)
(39,59,0)
(23,52,0)
(1,8,0)
(59,52,0)
(32,45,0)
(24,27,0)
(11,52,0)
(20,29,0)
(47,29,0)
(17,27,0)
(55,6,0)
(20,21,1)
(33,19,1)
(49,13,1)
(9,49,1)
(46,34,1)
(34,14,1)
(44,8,1)
(8,59,1)
(21,29,1)
(40,15,1)
(47,10,1)
(37,5,1)
(56,57,1)
(42,58,1)
(22,32,1)
(5,42,1)
(12,23,1)
(25,14,1)
(45,30,1)
(3,33,1)
(33,39,1)
(51,18,1)
(57,8,1)
(32,45,1)
(7,46,1)
(6,55,1)
(58,48,1)
(23,25,1)
(16,59,1)
(18,13,1)
(39,56,1)
(41,9,1)
(36,3,1)
(15,43,1)
(20,29,1)
(48,2,1)
(29,59,1)
(10,36,1)
(30,7,1)
(26,37,1)
(14,40,1)
(4,20,1)
(22,50,1)
(42,59,1)
(55,44,1)
(13,26,1)
(29,47,1)
(13,12,1)
(57,6,1)
(19,39,1)
(51,41,1)
(8,1,1)
(1,16,1)
(59,22,1)
(2,4,1)
(39,59,1)
(56,14,2)
(5,42,2)
(59,14,2)
(7,14,2)
(37,5,2)
(32,14,2)
(29,59,2)
(30,14,2)
(6,55,2)
(19,14,2)
(44,8,2)
(8,14,2)
(49,13,2)
(42,14,2)
(48,14,2)
(39,59,2)
(4,14,2)
(29,14,2)
(59,22,2)
(6,8,2)
(3,14,2)
(12,14,2)
(2,14,2)
(55,8,2)
(25,14,2)
(20,29,2)
(42,59,2)
(46,14,2)
(9,13,2)
(32,45,2)
(58,14,2)
(8,59,2)
(45,14,2)
(21,14,2)
(22,14,2)
(33,14,2)
(47,14,2)
(22,32,2)
(45,30,2)
(5,14,2)
(33,39,2)
(37,14,2)
(20,14,2)
(18,13,2)
(23,14,2)
(10,14,2)
(26,14,2)
(16,14,2)
(22,50,2)
(1,14,2)
(41,13,2)
(34,14,2)
(39,14,2)
(36,14,2)
(57,14,2)
-----------------------------------
(0,if (data == NULL)
(1,NULL)
(2,data[0].intTwo = 0)
(3,0)
(4,0)
(5,&data[0])
(6,exit(-1)
(7,twoIntsStruct)
(8,data == NULL)
(9,printLine("Benign, fixed string")
(10,data)
(11,case 6:)
(12,break;)
(13,7)
(14,6)
(15,NULL)
(16,data)
(17,data)
(18,break;)
(19,intOne)
(20,data[0].intTwo)
(21,intTwo)
(22,(twoIntsStruct *)
(23,printLine("Benign, fixed string")
(24,switch(6)
(25,"Benign, fixed string")
(26,break;)
(27,)
(28,default:)
(29,data[0])
(30,sizeof(twoIntsStruct)
(31,case 7:)
(32,malloc(100*sizeof(twoIntsStruct)
(33,data[0].intOne)
(34,data)
(35,switch(7)
(36,data[0].intOne = 0)
(37,printStructLine(&data[0])
(38,)
(39,data[0])
(40,data = NULL)
(41,break;)
(42,data[0])
(43,data)
(44,1)
(45,100*sizeof(twoIntsStruct)
(46,100)
(47,0)
(48,data)
(49,"Benign, fixed string")
(50,twoIntsStruct *)
(51,RET)
(52,)
(53,)
(54,default:)
(55,-1)
(56,0)
(57,data)
(58,0)
(59,data = (twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
