-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
    else
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
70,73
71,72
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
88,91
89,90
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
111,114
111,115
111,116
111,117
111,118
111,119
112,113
113,114
113,115
115,116
115,117
115,118
118,119
119,120
119,121
120,121
120,122
122,123
124,125
124,126
125,126
127,128
127,129
129,130
130,131
130,132
133,134
133,135
134,135
134,136
135,136
137,138
139,140
140,141
141,142
141,143
142,143
144,145
146,147
147,148
147,149
149,150
149,151
152,153
153,154
153,155
154,155
154,156
155,156
159,160
160,161
160,162
161,162
163,164
163,165
164,165
167,168
168,169
168,170
169,170
171,172
171,173
172,173
172,174
174,175
176,177
176,178
176,179
177,178
179,180
181,182
181,183
182,183
184,185
185,186
185,187
188,189
188,190
189,190
189,191
190,191
192,193
194,195
194,196
194,197
195,196
196,197
196,198
197,198
199,200
201,202
202,203
202,204
203,204
203,205
204,205
208,209
209,210
209,211
210,211
212,213
212,214
213,214
216,217
217,218
217,219
218,219
220,221
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,50,51,52,56,59,60,64,67,69,72,74,77,80,81,85,87,93,94,95,99,102,103,107,109,114,116,117,121,123,126,128,131,132,136,138,143,145,148,150,151,156,157,158,162,165,166,170,173,175,178,180,183,186,187,191,193,198,200,205,206,207,211,214,215,219,221
-----computeFrom-----
27,28
27,29
34,35
34,36
47,48
47,49
62,63
62,64
75,76
75,77
83,84
83,85
90,91
90,92
127,128
127,129
134,135
134,136
153,154
153,155
168,169
168,170
181,182
181,183
189,190
189,191
196,197
196,198
202,203
202,204
-----guardedBy-----
85,109
191,200
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_12_bad()
CWE401_Memory_Leak__malloc_realloc_int_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(globalReturnsTrueOrFalse())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }    else    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(93,30,0)
(113,65,0)
(84,65,0)
(19,35,0)
(59,18,0)
(34,43,0)
(87,47,0)
(43,102,0)
(46,114,0)
(14,70,0)
(49,77,0)
(29,16,0)
(68,86,0)
(93,50,0)
(95,55,0)
(108,50,0)
(97,96,0)
(83,1,0)
(56,10,0)
(61,72,0)
(32,8,0)
(54,32,0)
(64,115,0)
(46,24,0)
(12,96,0)
(30,70,0)
(3,27,0)
(115,63,0)
(61,22,0)
(100,45,0)
(98,35,0)
(13,27,0)
(90,22,0)
(114,102,0)
(41,17,0)
(89,72,0)
(68,25,0)
(40,101,0)
(95,76,0)
(20,61,0)
(117,102,0)
(67,72,0)
(67,22,0)
(26,56,0)
(109,102,0)
(116,109,0)
(110,114,0)
(44,87,0)
(8,32,0)
(106,104,0)
(21,0,0)
(35,19,0)
(38,108,0)
(104,113,0)
(50,93,0)
(5,87,0)
(107,113,0)
(63,115,0)
(99,40,0)
(40,113,0)
(61,47,0)
(69,70,0)
(73,93,0)
(66,104,0)
(72,18,0)
(78,19,0)
(0,17,0)
(81,108,0)
(70,30,0)
(39,40,0)
(40,47,0)
(85,102,0)
(114,46,0)
(9,25,0)
(82,56,0)
(96,97,0)
(47,65,0)
(50,24,0)
(74,55,0)
(96,102,0)
(28,55,0)
(71,117,0)
(62,95,0)
(55,7,0)
(111,24,0)
(57,30,0)
(35,12,0)
(75,67,0)
(80,114,0)
(1,83,0)
(113,104,0)
(25,68,0)
(55,50,0)
(109,55,0)
(15,51,0)
(56,51,0)
(58,47,0)
(22,83,0)
(92,45,0)
(31,65,0)
(10,7,0)
(42,61,0)
(101,40,0)
(23,24,0)
(17,83,0)
(83,22,0)
(77,18,0)
(77,22,0)
(33,43,0)
(83,17,0)
(104,106,0)
(63,106,0)
(10,56,0)
(102,96,0)
(79,76,0)
(11,117,0)
(112,69,0)
(114,51,0)
(37,65,0)
(101,65,0)
(8,6,0)
(70,69,0)
(22,65,0)
(60,21,0)
(2,50,0)
(12,35,0)
(56,76,0)
(65,53,0)
(94,24,0)
(43,51,0)
(24,91,0)
(105,0,0)
(52,95,0)
(59,61,0)
(30,102,0)
(96,12,0)
(102,24,0)
(0,21,0)
(88,24,0)
(17,113,0)
(27,22,0)
(87,113,0)
(56,55,0)
(104,66,0)
(17,0,0)
(61,59,0)
(76,7,0)
(106,63,0)
(51,24,0)
(48,63,0)
(109,24,0)
(103,67,0)
(45,113,0)
(30,93,0)
(93,73,0)
(69,112,1)
(100,113,1)
(56,76,1)
(17,113,1)
(109,116,1)
(62,55,1)
(13,22,1)
(83,17,1)
(58,87,1)
(114,110,1)
(103,75,1)
(33,34,1)
(112,14,1)
(61,72,1)
(72,89,1)
(68,25,1)
(10,56,1)
(108,81,1)
(79,95,1)
(3,13,1)
(71,11,1)
(39,47,1)
(38,50,1)
(8,32,1)
(49,59,1)
(14,57,1)
(106,63,1)
(67,103,1)
(108,50,1)
(109,55,1)
(61,42,1)
(55,28,1)
(50,93,1)
(46,114,1)
(82,26,1)
(9,45,1)
(92,100,1)
(22,83,1)
(56,51,1)
(96,12,1)
(11,102,1)
(77,22,1)
(76,79,1)
(104,106,1)
(77,49,1)
(28,74,1)
(114,51,1)
(0,21,1)
(109,102,1)
(74,108,1)
(115,64,1)
(27,22,1)
(44,45,1)
(96,97,1)
(95,52,1)
(110,80,1)
(102,96,1)
(36,77,1)
(83,1,1)
(89,67,1)
(25,9,1)
(19,78,1)
(34,117,1)
(63,115,1)
(55,50,1)
(70,69,1)
(32,54,1)
(56,82,1)
(107,4,1)
(64,48,1)
(61,22,1)
(113,104,1)
(117,71,1)
(45,92,1)
(104,66,1)
(116,108,1)
(67,22,1)
(30,102,1)
(45,113,1)
(36,27,1)
(2,46,1)
(81,38,1)
(87,113,1)
(43,33,1)
(99,39,1)
(47,58,1)
(27,3,1)
(20,72,1)
(48,107,1)
(17,0,1)
(21,60,1)
(59,61,1)
(54,117,1)
(75,27,1)
(40,99,1)
(5,44,1)
(117,102,1)
(36,109,1)
(85,4,1)
(51,15,1)
(114,102,1)
(56,55,1)
(78,98,1)
(116,10,1)
(40,47,1)
(30,70,1)
(57,2,1)
(95,55,1)
(93,73,1)
(26,76,1)
(98,85,1)
(44,68,1)
(34,8,1)
(43,102,1)
(41,90,1)
(12,35,1)
(105,41,1)
(60,105,1)
(80,51,1)
(101,40,1)
(87,5,1)
(61,47,1)
(93,30,1)
(90,101,1)
(35,19,1)
(15,43,1)
(40,113,1)
(52,62,1)
(42,20,1)
(59,27,2)
(17,0,2)
(46,4,2)
(114,4,2)
(59,61,2)
(45,4,2)
(14,4,2)
(30,70,2)
(33,4,2)
(83,17,2)
(10,56,2)
(0,4,2)
(67,22,2)
(63,115,2)
(62,108,2)
(101,4,2)
(55,50,2)
(68,45,2)
(25,45,2)
(0,21,2)
(2,4,2)
(19,4,2)
(26,108,2)
(85,4,2)
(61,47,2)
(108,50,2)
(56,55,2)
(116,4,2)
(45,113,2)
(96,12,2)
(55,108,2)
(17,113,2)
(72,27,2)
(81,4,2)
(12,35,2)
(100,4,2)
(117,4,2)
(43,4,2)
(56,76,2)
(92,4,2)
(117,102,2)
(101,40,2)
(83,4,2)
(93,73,2)
(8,117,2)
(83,1,2)
(61,27,2)
(40,4,2)
(48,4,2)
(28,108,2)
(70,69,2)
(96,4,2)
(46,114,2)
(56,51,2)
(95,108,2)
(113,4,2)
(78,4,2)
(112,4,2)
(115,4,2)
(54,117,2)
(105,4,2)
(60,4,2)
(20,27,2)
(22,4,2)
(102,96,2)
(70,4,2)
(87,113,2)
(5,4,2)
(50,93,2)
(110,4,2)
(61,22,2)
(50,4,2)
(113,104,2)
(64,4,2)
(32,117,2)
(43,102,2)
(69,4,2)
(79,108,2)
(38,4,2)
(15,4,2)
(96,97,2)
(41,4,2)
(103,27,2)
(106,4,2)
(44,4,2)
(10,108,2)
(39,4,2)
(87,4,2)
(107,4,2)
(109,102,2)
(106,63,2)
(71,4,2)
(90,4,2)
(22,83,2)
(27,22,2)
(82,108,2)
(30,4,2)
(35,19,2)
(104,66,2)
(76,108,2)
(77,22,2)
(89,27,2)
(98,4,2)
(47,4,2)
(57,4,2)
(102,4,2)
(108,4,2)
(114,51,2)
(30,102,2)
(35,4,2)
(21,4,2)
(9,45,2)
(40,47,2)
(93,4,2)
(63,4,2)
(8,32,2)
(75,27,2)
(3,4,2)
(13,4,2)
(49,27,2)
(80,4,2)
(51,4,2)
(99,4,2)
(61,72,2)
(40,113,2)
(58,4,2)
(68,25,2)
(95,55,2)
(56,108,2)
(114,102,2)
(93,30,2)
(11,4,2)
(42,27,2)
(67,27,2)
(109,55,2)
(104,106,2)
(77,27,2)
(27,4,2)
(52,108,2)
(17,4,2)
(104,4,2)
(34,4,2)
(12,4,2)
(74,108,2)
(109,4,2)
-----------------------------------
(0,(130000)
(1,int *)
(2,tmpData)
(3,NULL)
(4,globalReturnsTrueOrFalse()
(5,0)
(6,)
(7,)
(8,exit(-1)
(9,1)
(10,printIntLine(data[0])
(11,data)
(12,malloc(100*sizeof(int)
(13,data)
(14,130000)
(15,5)
(16,)
(17,realloc(data, (130000)
(18,)
(19,sizeof(int)
(20,data)
(21,sizeof(int)
(22,data = (int *)
(23,tmpData)
(24,)
(25,-1)
(26,data)
(27,data != NULL)
(28,tmpData)
(29,if(globalReturnsTrueOrFalse()
(30,realloc(data, (130000)
(31,data)
(32,-1)
(33,0)
(34,data)
(35,100*sizeof(int)
(36,RET)
(37,if (data != NULL)
(38,tmpData)
(39,data)
(40,data[0])
(41,data)
(42,0)
(43,data[0])
(44,data)
(45,data == NULL)
(46,printIntLine(data[0])
(47,data[0] = 5)
(48,100)
(49,data)
(50,tmpData = (int *)
(51,data[0] = 5)
(52,0)
(53,)
(54,1)
(55,data = tmpData)
(56,data[0])
(57,data)
(58,5)
(59,printIntLine(data[0])
(60,int)
(61,data[0])
(62,data)
(63,100*sizeof(int)
(64,int)
(65,)
(66,int *)
(67,data[0])
(68,exit(-1)
(69,sizeof(int)
(70,(130000)
(71,NULL)
(72,data[0] = 10)
(73,int *)
(74,data)
(75,data)
(76,data[0] = 10)
(77,free(data)
(78,int)
(79,10)
(80,data)
(81,NULL)
(82,0)
(83,(int *)
(84,if (data == NULL)
(85,data)
(86,)
(87,data[0])
(88,data)
(89,10)
(90,data)
(91,)
(92,NULL)
(93,(int *)
(94,if (data == NULL)
(95,data[0])
(96,(int *)
(97,int *)
(98,100)
(99,0)
(100,data)
(101,printIntLine(data[0])
(102,* data = (int *)
(103,0)
(104,(int *)
(105,130000)
(106,malloc(100*sizeof(int)
(107,data)
(108,tmpData != NULL)
(109,free(data)
(110,0)
(111,if (tmpData != NULL)
(112,int)
(113,* data = (int *)
(114,data[0])
(115,sizeof(int)
(116,data)
(117,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
