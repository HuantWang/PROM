-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_09_bad()
{
    if(GLOBAL_CONST_TRUE)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_09_bad(){    if(GLOBAL_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_09_bad()
CWE401_Memory_Leak__malloc_realloc_char_09_bad
{    if(GLOBAL_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(GLOBAL_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(8,12,0)
(1,43,0)
(19,45,0)
(29,5,0)
(40,45,0)
(48,40,0)
(27,32,0)
(49,35,0)
(45,40,0)
(23,10,0)
(21,45,0)
(6,21,0)
(41,49,0)
(11,14,0)
(31,36,0)
(27,33,0)
(36,43,0)
(40,48,0)
(42,9,0)
(4,30,0)
(37,13,0)
(12,35,0)
(35,43,0)
(15,39,0)
(33,29,0)
(13,29,0)
(5,29,0)
(24,32,0)
(13,43,0)
(18,40,0)
(29,13,0)
(39,43,0)
(44,34,0)
(30,13,0)
(22,39,0)
(14,35,0)
(45,13,0)
(16,27,0)
(25,48,0)
(14,47,0)
(2,12,0)
(34,44,0)
(49,47,0)
(33,27,0)
(43,28,0)
(38,10,0)
(44,17,0)
(0,35,0)
(20,30,0)
(3,43,0)
(39,13,0)
(32,27,0)
(10,35,0)
(21,35,0)
(29,33,0)
(46,34,0)
(36,13,0)
(12,47,0)
(45,21,0)
(35,21,0)
(21,6,0)
(7,43,0)
(31,39,1)
(49,41,1)
(12,8,1)
(0,36,1)
(49,35,1)
(35,21,1)
(32,24,1)
(46,30,1)
(18,19,1)
(10,35,1)
(14,11,1)
(24,16,1)
(29,33,1)
(30,4,1)
(10,23,1)
(21,45,1)
(38,35,1)
(25,18,1)
(39,15,1)
(22,44,1)
(29,5,1)
(33,27,1)
(8,2,1)
(48,25,1)
(45,13,1)
(13,29,1)
(14,35,1)
(16,37,1)
(44,34,1)
(12,35,1)
(41,12,1)
(19,0,1)
(4,20,1)
(36,13,1)
(50,14,1)
(27,32,1)
(34,46,1)
(37,26,1)
(39,13,1)
(50,10,1)
(22,30,1)
(2,10,1)
(11,49,1)
(45,40,1)
(21,6,1)
(20,13,1)
(40,48,1)
(36,31,1)
(50,26,1)
(15,22,1)
(30,13,1)
(23,38,1)
(36,13,2)
(32,26,2)
(34,30,2)
(23,26,2)
(30,26,2)
(33,26,2)
(14,10,2)
(49,35,2)
(41,10,2)
(38,26,2)
(18,26,2)
(13,26,2)
(27,26,2)
(22,26,2)
(20,26,2)
(49,10,2)
(11,10,2)
(12,35,2)
(39,26,2)
(44,34,2)
(21,45,2)
(16,26,2)
(40,26,2)
(21,6,2)
(14,35,2)
(13,29,2)
(12,10,2)
(36,26,2)
(37,26,2)
(29,33,2)
(24,26,2)
(4,26,2)
(2,10,2)
(8,10,2)
(45,40,2)
(10,26,2)
(15,26,2)
(46,30,2)
(0,26,2)
(44,30,2)
(10,35,2)
(40,48,2)
(25,26,2)
(19,26,2)
(45,26,2)
(29,5,2)
(31,26,2)
(45,13,2)
(30,13,2)
(29,26,2)
(33,27,2)
(35,21,2)
(39,13,2)
(27,32,2)
(48,26,2)
(35,26,2)
(21,26,2)
-----------------------------------
(0,data)
(1,if (data != NULL)
(2,data)
(3,data)
(4,NULL)
(5,char *)
(6,char *)
(7,if (data == NULL)
(8,"New String")
(9,)
(10,data != NULL)
(11,data)
(12,strcpy(data, "New String")
(13,* data = (char *)
(14,free(data)
(15,"A String")
(16,100)
(17,)
(18,130000)
(19,data)
(20,data)
(21,(char *)
(22,data)
(23,NULL)
(24,char)
(25,char)
(26,GLOBAL_CONST_TRUE)
(27,100*sizeof(char)
(28,)
(29,(char *)
(30,data == NULL)
(31,data)
(32,sizeof(char)
(33,malloc(100*sizeof(char)
(34,-1)
(35,data = (char *)
(36,printLine(data)
(37,data)
(38,data)
(39,strcpy(data, "A String")
(40,(130000)
(41,data)
(42,if(GLOBAL_CONST_TRUE)
(43,)
(44,exit(-1)
(45,realloc(data, (130000)
(46,1)
(47,)
(48,sizeof(char)
(49,printLine(data)
(50,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
