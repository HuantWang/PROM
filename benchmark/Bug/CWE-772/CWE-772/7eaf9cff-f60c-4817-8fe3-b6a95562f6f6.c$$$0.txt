-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_13_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,97
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_13_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_13_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_13_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(5,26,0)
(1,19,0)
(42,26,0)
(31,4,0)
(11,34,0)
(7,42,0)
(22,19,0)
(5,33,0)
(44,0,0)
(1,0,0)
(15,27,0)
(3,19,0)
(32,14,0)
(24,16,0)
(19,22,0)
(14,26,0)
(14,52,0)
(12,5,0)
(26,25,0)
(23,20,0)
(15,42,0)
(8,45,0)
(26,5,0)
(50,34,0)
(21,14,0)
(31,49,0)
(30,39,0)
(35,52,0)
(2,42,0)
(45,25,0)
(27,25,0)
(28,25,0)
(19,3,0)
(6,43,0)
(3,25,0)
(47,27,0)
(29,49,0)
(0,26,0)
(43,18,0)
(4,31,0)
(42,15,0)
(10,37,0)
(52,45,0)
(17,0,0)
(9,15,0)
(34,26,0)
(52,14,0)
(18,13,0)
(20,37,0)
(19,1,0)
(49,12,0)
(5,12,0)
(33,5,0)
(0,1,0)
(51,26,0)
(46,16,0)
(40,37,0)
(38,37,0)
(12,49,0)
(41,39,0)
(49,31,0)
(18,43,0)
(48,20,0)
(41,16,1)
(26,5,1)
(7,18,1)
(36,39,1)
(14,26,1)
(20,23,1)
(0,26,1)
(12,49,1)
(35,14,1)
(9,42,1)
(19,22,1)
(7,34,1)
(15,9,1)
(15,42,1)
(24,20,1)
(41,3,1)
(43,6,1)
(49,31,1)
(5,33,1)
(34,26,1)
(27,47,1)
(23,48,1)
(5,12,1)
(16,46,1)
(47,15,1)
(51,16,1)
(46,24,1)
(39,30,1)
(3,19,1)
(19,1,1)
(52,35,1)
(45,8,1)
(1,0,1)
(34,11,1)
(32,21,1)
(18,43,1)
(11,50,1)
(21,27,1)
(44,17,1)
(30,41,1)
(8,52,1)
(42,2,1)
(17,45,1)
(31,4,1)
(52,14,1)
(0,44,1)
(6,34,1)
(14,32,1)
(29,51,1)
(31,29,1)
(2,7,1)
(42,26,1)
(50,26,1)
(3,19,2)
(6,34,2)
(43,34,2)
(14,26,2)
(31,4,2)
(34,16,2)
(0,26,2)
(52,16,2)
(42,16,2)
(47,16,2)
(27,16,2)
(19,16,2)
(15,42,2)
(31,16,2)
(26,16,2)
(35,16,2)
(17,16,2)
(3,16,2)
(32,16,2)
(15,16,2)
(50,16,2)
(12,49,2)
(34,26,2)
(19,22,2)
(1,0,2)
(21,16,2)
(26,5,2)
(29,16,2)
(49,31,2)
(14,16,2)
(9,16,2)
(49,16,2)
(52,14,2)
(44,16,2)
(19,1,2)
(18,43,2)
(5,16,2)
(5,12,2)
(1,16,2)
(7,16,2)
(42,26,2)
(5,33,2)
(8,16,2)
(12,16,2)
(0,16,2)
(2,16,2)
(18,34,2)
(45,16,2)
(51,16,2)
(11,16,2)
-----------------------------------
(0,data[0])
(1,&data[0])
(2,0)
(3,printStructLine((twoIntsStruct *)
(4,struct _twoIntsStruct)
(5,(struct _twoIntsStruct *)
(6,1)
(7,data)
(8,0)
(9,intOne)
(10,data)
(11,NULL)
(12,malloc(100*sizeof(struct _twoIntsStruct)
(13,)
(14,data[0])
(15,data[0].intOne)
(16,GLOBAL_CONST_FIVE==5)
(17,data)
(18,exit(-1)
(19,(twoIntsStruct *)
(20,data = NULL)
(21,data)
(22,twoIntsStruct *)
(23,NULL)
(24,GLOBAL_CONST_FIVE)
(25,)
(26,data = (struct _twoIntsStruct *)
(27,data[0].intOne = 0)
(28,if (data == NULL)
(29,100)
(30,5)
(31,sizeof(struct _twoIntsStruct)
(32,0)
(33,struct _twoIntsStruct *)
(34,data == NULL)
(35,intTwo)
(36,RET)
(37,)
(38,if(GLOBAL_CONST_FIVE==5)
(39,GLOBAL_CONST_FIVE==5)
(40,if(GLOBAL_CONST_FIVE==5)
(41,GLOBAL_CONST_FIVE)
(42,data[0])
(43,-1)
(44,0)
(45,data[0].intTwo = 0)
(46,5)
(47,0)
(48,data)
(49,100*sizeof(struct _twoIntsStruct)
(50,data)
(51,data)
(52,data[0].intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
