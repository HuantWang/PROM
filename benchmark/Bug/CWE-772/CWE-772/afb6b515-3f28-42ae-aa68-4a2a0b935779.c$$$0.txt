-----label-----
1
-----code-----
static twoIntsStruct * badSource(twoIntsStruct * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
24,27
25,26
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
49,51
50,51
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
68,69
69,70
69,71
70,71
73,74
74,75
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,27,31,32,36,38,43,45,51,52,53,54,60,61,62,63,67,71,72,75
-----computeFrom-----
15,16
15,17
34,35
34,36
47,48
47,49
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static twoIntsStruct * badSource(twoIntsStruct * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
static twoIntsStruct
twoIntsStruct
* badSource(twoIntsStruct * data)
*
badSource
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
return data;
data
data
-----joern-----
(31,36,0)
(1,23,0)
(23,29,0)
(22,33,0)
(33,23,0)
(23,9,0)
(34,28,0)
(5,24,0)
(8,29,0)
(17,9,0)
(31,35,0)
(33,6,0)
(24,36,0)
(9,29,0)
(2,13,0)
(27,29,0)
(17,12,0)
(27,9,0)
(39,13,0)
(9,17,0)
(6,36,0)
(28,34,0)
(27,35,0)
(19,38,0)
(4,18,0)
(8,36,0)
(37,23,0)
(11,28,0)
(28,9,0)
(35,31,0)
(34,24,0)
(13,2,0)
(20,27,0)
(9,36,0)
(26,7,0)
(18,29,0)
(13,17,0)
(3,34,0)
(25,2,0)
(18,9,0)
(12,17,0)
(15,8,0)
(16,36,0)
(7,19,0)
(28,29,0)
(17,13,0)
(30,18,0)
(19,7,0)
(23,33,0)
(10,9,0)
(32,27,0)
(14,28,0)
(40,8,0)
(0,6,0)
(35,27,0)
(8,9,0)
(32,20,1)
(39,10,1)
(34,3,1)
(23,37,1)
(27,9,1)
(31,35,1)
(28,11,1)
(8,15,1)
(23,29,1)
(5,34,1)
(15,31,1)
(19,7,1)
(17,13,1)
(28,9,1)
(37,1,1)
(27,32,1)
(30,9,1)
(13,2,1)
(22,23,1)
(23,9,1)
(18,9,1)
(33,23,1)
(26,18,1)
(3,28,1)
(7,26,1)
(17,12,1)
(18,4,1)
(6,0,1)
(8,9,1)
(1,24,1)
(2,25,1)
(34,28,1)
(33,22,1)
(9,29,1)
(20,6,1)
(18,29,1)
(14,18,1)
(8,29,1)
(9,17,1)
(25,39,1)
(4,30,1)
(27,29,1)
(11,14,1)
(24,5,1)
(35,27,1)
(0,33,1)
(28,29,1)
(14,19,1)
(40,8,1)
(34,28,2)
(28,9,2)
(8,29,2)
(13,2,2)
(8,9,2)
(18,29,2)
(23,29,2)
(27,9,2)
(17,13,2)
(19,7,2)
(28,29,2)
(27,29,2)
(33,23,2)
(9,17,2)
(35,27,2)
(18,9,2)
(40,8,2)
(9,29,2)
(23,9,2)
(17,12,2)
(26,18,2)
(31,35,2)
(7,18,2)
(19,18,2)
-----------------------------------
(0,0)
(1,data)
(2,sizeof(twoIntsStruct)
(3,intOne)
(4,NULL)
(5,0)
(6,data[0].intTwo = 0)
(7,-1)
(8,return data;)
(9,data = (twoIntsStruct *)
(10,data)
(11,0)
(12,twoIntsStruct *)
(13,calloc(100, sizeof(twoIntsStruct)
(14,data)
(15,data)
(16,if (data == NULL)
(17,(twoIntsStruct *)
(18,data == NULL)
(19,exit(-1)
(20,data)
(21, sizeof(twoIntsStruct)
(22,intTwo)
(23,data[0])
(24,data[0].intOne = 0)
(25,twoIntsStruct)
(26,1)
(27,data[0])
(28,data[0])
(29,twoIntsStruct * data)
(30,data)
(31,printStructLine(&data[0])
(32,0)
(33,data[0].intTwo)
(34,data[0].intOne)
(35,&data[0])
(36,)
(37,0)
(38,)
(39,100)
(40,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
