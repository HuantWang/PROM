-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_08_bad()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
70,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,71,73
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_08_bad(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_08_bad()
CWE401_Memory_Leak__int_calloc_08_bad
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,33,0)
(9,15,0)
(15,32,0)
(33,22,0)
(34,4,0)
(14,33,0)
(10,23,0)
(30,19,0)
(7,8,0)
(36,3,0)
(19,35,0)
(3,16,0)
(2,13,0)
(17,1,0)
(21,35,0)
(22,6,0)
(26,35,0)
(16,17,0)
(29,1,0)
(28,23,0)
(17,16,0)
(23,8,0)
(15,8,0)
(16,18,0)
(18,16,0)
(27,15,0)
(32,15,0)
(25,17,0)
(11,13,0)
(12,35,0)
(24,19,0)
(16,3,0)
(3,4,0)
(4,3,0)
(13,17,0)
(32,1,0)
(8,1,0)
(23,17,0)
(15,17,0)
(5,32,1)
(28,22,1)
(28,13,1)
(4,34,1)
(9,8,1)
(15,27,1)
(15,8,1)
(19,30,1)
(32,15,1)
(23,10,1)
(20,19,1)
(8,7,1)
(13,2,1)
(36,25,1)
(33,14,1)
(22,33,1)
(27,9,1)
(17,16,1)
(15,17,1)
(7,23,1)
(10,28,1)
(3,4,1)
(31,5,1)
(30,24,1)
(5,20,1)
(16,3,1)
(23,17,1)
(25,20,1)
(34,36,1)
(11,17,1)
(2,11,1)
(14,13,1)
(13,17,1)
(16,18,1)
(10,20,2)
(3,20,2)
(17,20,2)
(22,33,2)
(11,20,2)
(8,20,2)
(2,20,2)
(27,20,2)
(7,20,2)
(34,20,2)
(16,20,2)
(14,13,2)
(23,20,2)
(36,20,2)
(28,20,2)
(16,3,2)
(15,8,2)
(23,17,2)
(9,20,2)
(13,17,2)
(3,4,2)
(16,18,2)
(32,15,2)
(32,20,2)
(33,13,2)
(15,17,2)
(22,13,2)
(15,20,2)
(13,20,2)
(17,16,2)
(4,20,2)
(25,20,2)
-----------------------------------
(0, sizeof(int)
(1,)
(2,NULL)
(3,calloc(100, sizeof(int)
(4,sizeof(int)
(5,staticReturnsTrue()
(6,)
(7,5)
(8,data[0] = 5)
(9,data)
(10,0)
(11,data)
(12,if(staticReturnsTrue()
(13,data == NULL)
(14,1)
(15,data[0])
(16,(int *)
(17,data = (int *)
(18,int *)
(19,data = NULL)
(20,staticReturnsTrue()
(21,data)
(22,exit(-1)
(23,data[0])
(24,data)
(25,data)
(26,if(staticReturnsTrue()
(27,0)
(28,data)
(29,if (data == NULL)
(30,NULL)
(31,RET)
(32,printIntLine(data[0])
(33,-1)
(34,int)
(35,)
(36,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
