-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_16_bad()
{
    twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
83,84
83,85
85,86
85,87
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,82,84,86,87
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_16_bad(){    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_16_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_16_bad
{    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(30,45,0)
(48,15,0)
(11,14,0)
(1,25,0)
(46,45,0)
(48,14,0)
(21,6,0)
(16,3,0)
(9,24,0)
(2,6,0)
(24,9,0)
(49,32,0)
(25,18,0)
(13,29,0)
(32,28,0)
(14,45,0)
(3,23,0)
(18,26,0)
(6,45,0)
(7,16,0)
(39,26,0)
(3,16,0)
(24,45,0)
(41,30,0)
(38,14,0)
(45,20,0)
(17,28,0)
(37,24,0)
(5,20,0)
(20,13,0)
(27,26,0)
(45,26,0)
(31,18,0)
(4,32,0)
(40,26,0)
(33,42,0)
(6,25,0)
(20,45,0)
(19,24,0)
(25,6,0)
(15,26,0)
(13,20,0)
(47,8,0)
(0,28,0)
(39,9,0)
(29,13,0)
(9,39,0)
(14,48,0)
(34,29,0)
(35,30,0)
(44,48,0)
(36,15,0)
(20,5,0)
(29,42,0)
(42,29,0)
(22,28,0)
(29,42,1)
(2,15,1)
(20,13,1)
(20,5,1)
(33,34,1)
(14,11,1)
(38,3,1)
(18,31,1)
(6,21,1)
(31,25,1)
(13,29,1)
(48,44,1)
(24,19,1)
(48,14,1)
(41,45,1)
(1,6,1)
(38,30,1)
(37,18,1)
(15,36,1)
(39,9,1)
(30,35,1)
(24,45,1)
(11,38,1)
(9,24,1)
(25,6,1)
(47,12,1)
(46,43,1)
(12,27,1)
(21,2,1)
(3,16,1)
(27,39,1)
(30,45,1)
(35,41,1)
(19,37,1)
(25,1,1)
(42,33,1)
(32,49,1)
(16,7,1)
(36,48,1)
(49,4,1)
(45,20,1)
(7,30,1)
(34,46,1)
(12,43,1)
(10,47,1)
(44,14,1)
(6,45,1)
(14,45,1)
(43,32,1)
(10,12,1)
(35,43,2)
(20,43,2)
(9,24,2)
(9,43,2)
(37,43,2)
(21,43,2)
(24,43,2)
(31,43,2)
(1,43,2)
(25,43,2)
(47,12,2)
(14,45,2)
(2,43,2)
(19,43,2)
(7,30,2)
(48,14,2)
(14,43,2)
(13,43,2)
(18,43,2)
(45,43,2)
(6,45,2)
(15,43,2)
(16,30,2)
(24,45,2)
(13,29,2)
(48,43,2)
(3,16,2)
(11,43,2)
(29,43,2)
(39,43,2)
(45,20,2)
(20,5,2)
(41,43,2)
(46,43,2)
(38,43,2)
(30,45,2)
(20,13,2)
(30,43,2)
(42,43,2)
(27,43,2)
(6,43,2)
(34,43,2)
(39,9,2)
(3,30,2)
(25,6,2)
(44,43,2)
(29,42,2)
(36,43,2)
(33,43,2)
-----------------------------------
(0,data)
(1,intTwo)
(2,data)
(3,exit(-1)
(4,data)
(5,twoIntsStruct *)
(6,data[0])
(7,1)
(8,)
(9,&data[0])
(10,RET)
(11,0)
(12,1)
(13,malloc(100*sizeof(twoIntsStruct)
(14,data[0])
(15,data[0].intOne = 0)
(16,-1)
(17,while(1)
(18,data[0].intTwo = 0)
(19,0)
(20,(twoIntsStruct *)
(21,0)
(22,while(1)
(23,)
(24,data[0])
(25,data[0].intTwo)
(26,)
(27,break;)
(28,)
(29,100*sizeof(twoIntsStruct)
(30,data == NULL)
(31,0)
(32,data = NULL)
(33,twoIntsStruct)
(34,100)
(35,NULL)
(36,0)
(37,data)
(38,data)
(39,printStructLine(&data[0])
(40,if (data == NULL)
(41,data)
(42,sizeof(twoIntsStruct)
(43,1)
(44,intOne)
(45,data = (twoIntsStruct *)
(46,data)
(47,break;)
(48,data[0].intOne)
(49,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
