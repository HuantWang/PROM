-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_02_bad()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
69,70
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,57,58,62,65,66,68,70
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_02_bad(){    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_02_bad()
CWE401_Memory_Leak__int_malloc_02_bad
{    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(14,1,0)
(5,24,0)
(28,5,0)
(34,17,0)
(20,8,0)
(2,21,0)
(5,28,0)
(10,4,0)
(7,11,0)
(30,21,0)
(29,34,0)
(5,0,0)
(31,1,0)
(11,0,0)
(1,23,0)
(13,24,0)
(24,5,0)
(12,11,0)
(17,4,0)
(3,23,0)
(6,32,0)
(15,21,0)
(34,24,0)
(8,20,0)
(26,32,0)
(9,36,0)
(35,34,0)
(0,5,0)
(32,24,0)
(20,16,0)
(11,12,0)
(18,36,0)
(23,4,0)
(17,34,0)
(0,11,0)
(34,23,0)
(19,12,0)
(27,8,0)
(1,24,0)
(36,21,0)
(24,4,0)
(19,7,1)
(6,24,1)
(11,12,1)
(3,1,1)
(18,9,1)
(34,23,1)
(36,18,1)
(27,32,1)
(5,28,1)
(8,27,1)
(7,13,1)
(22,17,1)
(17,34,1)
(32,24,1)
(14,31,1)
(13,33,1)
(35,23,1)
(34,29,1)
(32,26,1)
(26,6,1)
(12,19,1)
(31,20,1)
(22,33,1)
(1,14,1)
(34,24,1)
(20,8,1)
(25,22,1)
(29,35,1)
(23,3,1)
(5,0,1)
(0,11,1)
(1,24,1)
(24,5,1)
(33,36,1)
(31,32,1)
(7,33,2)
(26,33,2)
(32,33,2)
(31,33,2)
(5,33,2)
(34,23,2)
(34,24,2)
(14,33,2)
(17,33,2)
(34,33,2)
(17,34,2)
(8,32,2)
(24,33,2)
(5,28,2)
(29,33,2)
(6,33,2)
(11,12,2)
(20,8,2)
(5,0,2)
(0,11,2)
(13,33,2)
(35,33,2)
(0,33,2)
(24,5,2)
(3,33,2)
(11,33,2)
(32,24,2)
(27,32,2)
(1,33,2)
(19,33,2)
(12,33,2)
(20,32,2)
(1,24,2)
(23,33,2)
-----------------------------------
(0,malloc(100*sizeof(int)
(1,data[0])
(2,if(1)
(3,5)
(4,)
(5,(int *)
(6,data)
(7,100)
(8,-1)
(9,data)
(10,if (data == NULL)
(11,100*sizeof(int)
(12,sizeof(int)
(13,data)
(14,0)
(15,if(1)
(16,)
(17,printIntLine(data[0])
(18,NULL)
(19,int)
(20,exit(-1)
(21,)
(22,1)
(23,data[0] = 5)
(24,data = (int *)
(25,RET)
(26,NULL)
(27,1)
(28,int *)
(29,0)
(30,data)
(31,data)
(32,data == NULL)
(33,1)
(34,data[0])
(35,data)
(36,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
