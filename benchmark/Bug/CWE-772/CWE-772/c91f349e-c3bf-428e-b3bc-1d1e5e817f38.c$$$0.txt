-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,72,74
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_11_bad()
CWE401_Memory_Leak__wchar_t_realloc_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(21,2,0)
(16,1,0)
(6,18,0)
(29,4,0)
(11,28,0)
(20,3,0)
(28,2,0)
(8,18,0)
(25,29,0)
(18,8,0)
(19,2,0)
(18,29,0)
(5,14,0)
(17,0,0)
(24,28,0)
(8,20,0)
(4,29,0)
(14,3,0)
(30,0,0)
(23,20,0)
(7,16,0)
(1,16,0)
(14,20,0)
(10,4,0)
(29,18,0)
(26,8,0)
(13,3,0)
(0,20,0)
(9,2,0)
(20,8,0)
(8,26,0)
(18,28,0)
(1,27,0)
(25,6,1)
(5,1,1)
(14,5,1)
(0,20,1)
(6,23,1)
(15,28,1)
(28,11,1)
(18,29,1)
(14,20,1)
(4,10,1)
(30,20,1)
(16,7,1)
(12,15,1)
(29,4,1)
(1,16,1)
(17,30,1)
(22,12,1)
(8,26,1)
(20,8,1)
(8,18,1)
(0,17,1)
(11,24,1)
(18,28,1)
(10,25,1)
(12,14,1)
(5,0,1)
(7,0,1)
(23,15,1)
(18,28,2)
(1,16,2)
(20,15,2)
(4,15,2)
(8,15,2)
(30,15,2)
(18,29,2)
(10,15,2)
(0,15,2)
(29,4,2)
(14,15,2)
(7,0,2)
(17,15,2)
(5,15,2)
(18,15,2)
(1,0,2)
(8,26,2)
(6,15,2)
(0,20,2)
(23,15,2)
(14,20,2)
(16,0,2)
(29,15,2)
(25,15,2)
(20,8,2)
(8,18,2)
-----------------------------------
(0,data == NULL)
(1,exit(-1)
(2,)
(3,)
(4,sizeof(wchar_t)
(5,data)
(6,data)
(7,1)
(8,(wchar_t *)
(9,if(globalReturnsTrue()
(10,wchar_t)
(11,NULL)
(12,globalReturnsTrue()
(13,if (data == NULL)
(14,printWLine(data)
(15,globalReturnsTrue()
(16,-1)
(17,NULL)
(18,realloc(data, 100*sizeof(wchar_t)
(19,if(globalReturnsTrue()
(20,data = (wchar_t *)
(21,data)
(22,RET)
(23,data)
(24,data)
(25,100)
(26,wchar_t *)
(27,)
(28,data = NULL)
(29,100*sizeof(wchar_t)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
