-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_04_bad(){    if(STATIC_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_04_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_04_bad
{    if(STATIC_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
if(STATIC_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(25,23,0)
(41,30,0)
(10,5,0)
(30,27,0)
(15,6,0)
(12,26,0)
(21,5,0)
(6,32,0)
(22,40,0)
(20,30,0)
(38,19,0)
(9,37,0)
(34,23,0)
(5,22,0)
(41,15,0)
(0,32,0)
(33,17,0)
(32,0,0)
(22,5,0)
(28,12,0)
(3,41,0)
(16,36,0)
(11,15,0)
(14,39,0)
(15,30,0)
(32,6,0)
(6,15,0)
(17,1,0)
(7,40,0)
(19,36,0)
(44,36,0)
(13,16,0)
(0,39,0)
(39,0,0)
(31,33,0)
(19,26,0)
(5,10,0)
(10,18,0)
(36,30,0)
(42,30,0)
(23,15,0)
(40,22,0)
(36,10,0)
(17,33,0)
(5,15,0)
(43,0,0)
(8,6,0)
(6,8,0)
(18,10,0)
(10,36,0)
(35,30,0)
(12,36,0)
(4,22,0)
(2,16,0)
(24,16,1)
(39,14,1)
(23,34,1)
(12,36,1)
(28,19,1)
(12,28,1)
(23,15,1)
(24,29,1)
(38,16,1)
(25,15,1)
(14,43,1)
(16,13,1)
(40,7,1)
(5,15,1)
(19,36,1)
(21,44,1)
(13,2,1)
(24,12,1)
(17,33,1)
(41,15,1)
(33,31,1)
(15,6,1)
(6,8,1)
(34,25,1)
(10,18,1)
(19,38,1)
(11,29,1)
(43,11,1)
(4,21,1)
(32,0,1)
(3,17,1)
(0,39,1)
(3,23,1)
(44,41,1)
(36,10,1)
(10,5,1)
(16,36,1)
(5,22,1)
(6,32,1)
(7,4,1)
(22,40,1)
(41,3,1)
(31,23,1)
(2,36,1)
(17,23,2)
(3,29,2)
(2,29,2)
(43,29,2)
(34,29,2)
(31,23,2)
(14,29,2)
(16,29,2)
(11,29,2)
(28,16,2)
(6,8,2)
(36,10,2)
(22,29,2)
(12,36,2)
(40,29,2)
(32,29,2)
(38,16,2)
(15,6,2)
(21,29,2)
(4,29,2)
(16,36,2)
(5,22,2)
(39,29,2)
(10,5,2)
(36,29,2)
(33,23,2)
(23,29,2)
(25,29,2)
(19,16,2)
(10,29,2)
(0,29,2)
(10,18,2)
(6,29,2)
(6,32,2)
(13,29,2)
(5,29,2)
(12,16,2)
(0,39,2)
(41,29,2)
(22,40,2)
(19,36,2)
(23,15,2)
(17,33,2)
(44,29,2)
(7,29,2)
(32,0,2)
(41,15,2)
(5,15,2)
(15,29,2)
-----------------------------------
(0,100*sizeof(wchar_t)
(1,)
(2,data)
(3,data)
(4,130000)
(5,realloc(data, (130000)
(6,(wchar_t *)
(7,wchar_t)
(8,wchar_t *)
(9,if(STATIC_CONST_TRUE)
(10,(wchar_t *)
(11,data)
(12,free(data)
(13,NULL)
(14,wchar_t)
(15,* data = (wchar_t *)
(16,data != NULL)
(17,exit(-1)
(18,wchar_t *)
(19,printWLine(data)
(20,data)
(21,data)
(22,(130000)
(23,data == NULL)
(24,RET)
(25,data)
(26,)
(27,)
(28,data)
(29,STATIC_CONST_TRUE)
(30,)
(31,1)
(32,malloc(100*sizeof(wchar_t)
(33,-1)
(34,NULL)
(35,if (data == NULL)
(36,data = (wchar_t *)
(37,)
(38,data)
(39,sizeof(wchar_t)
(40,sizeof(wchar_t)
(41,printWLine(data)
(42,if (data != NULL)
(43,100)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
