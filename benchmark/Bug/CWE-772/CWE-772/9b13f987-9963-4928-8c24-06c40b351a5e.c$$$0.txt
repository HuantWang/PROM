-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_05_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,90,92
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_05_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_05_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_05_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(11,1,0)
(39,5,0)
(27,42,0)
(22,19,0)
(6,15,0)
(35,29,0)
(7,23,0)
(42,3,0)
(9,27,0)
(21,15,0)
(42,27,0)
(31,6,0)
(34,12,0)
(38,31,0)
(20,34,0)
(44,32,0)
(23,17,0)
(0,19,0)
(33,17,0)
(6,31,0)
(39,27,0)
(2,48,0)
(4,31,0)
(3,42,0)
(45,19,0)
(36,48,0)
(28,39,0)
(13,30,0)
(47,29,0)
(18,8,0)
(15,21,0)
(16,12,0)
(41,17,0)
(33,15,0)
(46,1,0)
(12,8,0)
(34,5,0)
(12,34,0)
(15,6,0)
(27,39,0)
(1,11,0)
(1,5,0)
(40,5,0)
(48,5,0)
(10,34,0)
(11,23,0)
(15,33,0)
(26,11,0)
(32,13,0)
(5,17,0)
(31,5,0)
(13,32,0)
(29,19,0)
(8,17,0)
(39,28,0)
(24,1,0)
(5,39,0)
(5,39,1)
(33,15,1)
(42,3,1)
(48,36,1)
(15,6,1)
(14,43,1)
(1,5,1)
(43,33,1)
(16,34,1)
(31,5,1)
(39,27,1)
(40,37,1)
(9,40,1)
(10,20,1)
(46,13,1)
(24,46,1)
(23,7,1)
(20,23,1)
(31,38,1)
(42,9,1)
(27,42,1)
(48,5,1)
(15,21,1)
(8,18,1)
(44,48,1)
(36,2,1)
(11,1,1)
(12,34,1)
(18,12,1)
(32,44,1)
(34,5,1)
(35,47,1)
(12,16,1)
(6,31,1)
(34,10,1)
(26,1,1)
(4,8,1)
(11,26,1)
(37,29,1)
(38,4,1)
(29,35,1)
(43,37,1)
(2,5,1)
(46,48,1)
(13,32,1)
(1,24,1)
(7,11,1)
(39,28,1)
(27,42,2)
(2,37,2)
(5,37,2)
(38,37,2)
(8,37,2)
(24,37,2)
(31,37,2)
(26,37,2)
(13,48,2)
(10,37,2)
(9,37,2)
(40,37,2)
(12,34,2)
(46,37,2)
(42,37,2)
(34,37,2)
(48,5,2)
(7,37,2)
(20,37,2)
(18,37,2)
(4,37,2)
(33,37,2)
(15,6,2)
(16,37,2)
(27,37,2)
(39,28,2)
(6,37,2)
(39,27,2)
(15,21,2)
(6,31,2)
(23,37,2)
(15,37,2)
(36,37,2)
(42,3,2)
(32,48,2)
(39,37,2)
(34,5,2)
(1,37,2)
(1,5,2)
(44,48,2)
(48,37,2)
(5,39,2)
(11,37,2)
(12,37,2)
(33,15,2)
(11,1,2)
(13,32,2)
(31,5,2)
-----------------------------------
(0,data)
(1,data[0])
(2,data)
(3,struct _twoIntsStruct)
(4,data)
(5,data = (struct _twoIntsStruct *)
(6,&data[0])
(7,0)
(8,data[0].intTwo = 0)
(9,100)
(10,0)
(11,data[0].intOne)
(12,data[0].intTwo)
(13,exit(-1)
(14,RET)
(15,(twoIntsStruct *)
(16,intTwo)
(17,)
(18,0)
(19,)
(20,data)
(21,twoIntsStruct *)
(22,if(staticTrue)
(23,data[0].intOne = 0)
(24,0)
(25, sizeof(struct _twoIntsStruct)
(26,intOne)
(27,calloc(100, sizeof(struct _twoIntsStruct)
(28,struct _twoIntsStruct *)
(29,data = NULL)
(30,)
(31,data[0])
(32,-1)
(33,printStructLine((twoIntsStruct *)
(34,data[0])
(35,NULL)
(36,NULL)
(37,staticTrue)
(38,0)
(39,(struct _twoIntsStruct *)
(40,data)
(41,if (data == NULL)
(42,sizeof(struct _twoIntsStruct)
(43,staticTrue)
(44,1)
(45,if(staticTrue)
(46,data)
(47,data)
(48,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
