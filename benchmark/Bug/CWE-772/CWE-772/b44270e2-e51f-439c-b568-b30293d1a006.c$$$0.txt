-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_18_bad()
{
    int * data;
    data = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
70,71
70,72
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,66,67,69,71,72
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_18_bad(){    int * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_malloc_18_bad()
CWE401_Memory_Leak__int_malloc_18_bad
{    int * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));
source
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation */    ;
sink
;
-----joern-----
(24,8,0)
(35,28,0)
(8,24,0)
(6,28,0)
(29,6,0)
(32,29,0)
(33,1,0)
(16,8,0)
(29,3,0)
(29,17,0)
(27,6,0)
(15,16,0)
(34,28,0)
(7,29,0)
(26,15,0)
(13,17,0)
(13,6,0)
(3,29,0)
(14,13,0)
(4,16,0)
(12,17,0)
(2,28,0)
(19,28,0)
(18,17,0)
(23,1,0)
(3,28,0)
(22,0,0)
(24,11,0)
(30,0,0)
(17,24,0)
(17,28,0)
(0,28,0)
(8,16,0)
(33,31,0)
(24,17,0)
(16,15,0)
(10,28,0)
(21,13,0)
(5,18,0)
(25,28,0)
(1,33,0)
(11,24,0)
(20,18,0)
(14,18,1)
(3,29,1)
(21,14,1)
(27,13,1)
(15,26,1)
(20,17,1)
(33,1,1)
(4,12,1)
(0,22,1)
(6,27,1)
(7,32,1)
(17,24,1)
(29,7,1)
(9,35,1)
(13,17,1)
(16,15,1)
(29,17,1)
(32,6,1)
(22,30,1)
(18,17,1)
(13,21,1)
(24,8,1)
(23,18,1)
(24,11,1)
(14,33,1)
(8,16,1)
(5,20,1)
(35,3,1)
(26,4,1)
(18,5,1)
(1,23,1)
(34,0,1)
(29,6,1)
(12,34,1)
(24,11,2)
(13,17,2)
(23,18,2)
(16,15,2)
(17,24,2)
(8,16,2)
(18,17,2)
(33,18,2)
(29,17,2)
(29,6,2)
(1,18,2)
(33,1,2)
(24,8,2)
(3,29,2)
-----------------------------------
(0,data = NULL)
(1,-1)
(2,sink:)
(3,printIntLine(data[0])
(4,100)
(5,NULL)
(6,data[0] = 5)
(7,0)
(8,malloc(100*sizeof(int)
(9,RET)
(10,data)
(11,int *)
(12,data)
(13,data[0])
(14,data)
(15,sizeof(int)
(16,100*sizeof(int)
(17,data = (int *)
(18,data == NULL)
(19,if (data == NULL)
(20,data)
(21,0)
(22,NULL)
(23,1)
(24,(int *)
(25,source:)
(26,int)
(27,5)
(28,)
(29,data[0])
(30,data)
(31,)
(32,data)
(33,exit(-1)
(34,goto source;)
(35,goto sink;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
