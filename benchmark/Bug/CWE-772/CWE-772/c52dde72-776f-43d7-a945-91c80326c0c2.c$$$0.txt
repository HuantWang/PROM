-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_10_bad()
{
    if(globalTrue)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,49,50,51,55,58,59,63,66,68,71,73,76,79,80,84,86,92,93,94,98,101,102,106,108
-----computeFrom-----
26,27
26,28
33,34
33,35
46,47
46,48
61,62
61,63
74,75
74,76
82,83
82,84
89,90
89,91
-----guardedBy-----
84,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_10_bad(){    if(globalTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_10_bad()
CWE401_Memory_Leak__malloc_realloc_int_10_bad
{    if(globalTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(globalTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
globalTrue
globalTrue
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(49,22,0)
(21,53,0)
(49,52,0)
(10,36,0)
(42,39,0)
(43,40,0)
(56,41,0)
(47,29,0)
(6,23,0)
(18,13,0)
(41,11,0)
(17,41,0)
(23,6,0)
(36,1,0)
(29,52,0)
(11,41,0)
(10,26,0)
(17,34,0)
(32,36,0)
(19,37,0)
(31,45,0)
(53,26,0)
(58,1,0)
(51,0,0)
(2,1,0)
(6,1,0)
(52,49,0)
(10,11,0)
(52,29,0)
(26,10,0)
(30,10,0)
(54,46,0)
(3,23,0)
(4,58,0)
(15,23,0)
(0,38,0)
(26,53,0)
(29,47,0)
(11,10,0)
(7,26,0)
(24,22,0)
(48,49,0)
(25,13,0)
(28,40,0)
(33,12,0)
(50,17,0)
(45,41,0)
(37,44,0)
(1,8,0)
(13,36,0)
(22,49,0)
(29,36,0)
(20,1,0)
(9,11,0)
(0,12,0)
(37,19,0)
(38,0,0)
(14,45,0)
(39,36,0)
(5,1,0)
(16,19,0)
(23,58,0)
(11,9,0)
(0,58,0)
(41,1,0)
(0,41,0)
(40,41,0)
(23,36,0)
(12,34,0)
(38,34,0)
(57,39,0)
(13,58,0)
(40,12,0)
(36,29,0)
(35,0,0)
(30,56,1)
(53,21,1)
(10,36,1)
(22,24,1)
(50,38,1)
(27,17,1)
(51,12,1)
(39,36,1)
(26,53,1)
(23,58,1)
(0,35,1)
(23,3,1)
(4,13,1)
(40,43,1)
(42,57,1)
(25,39,1)
(24,48,1)
(37,19,1)
(18,25,1)
(41,11,1)
(10,26,1)
(49,22,1)
(36,29,1)
(57,36,1)
(7,30,1)
(17,50,1)
(45,41,1)
(29,52,1)
(19,16,1)
(14,41,1)
(13,36,1)
(27,55,1)
(25,37,1)
(16,39,1)
(6,23,1)
(40,41,1)
(0,58,1)
(11,9,1)
(0,41,1)
(52,49,1)
(0,12,1)
(56,6,1)
(32,55,1)
(28,45,1)
(11,10,1)
(12,33,1)
(17,41,1)
(33,40,1)
(58,4,1)
(38,0,1)
(23,36,1)
(35,51,1)
(48,32,1)
(3,15,1)
(31,14,1)
(43,28,1)
(29,47,1)
(13,18,1)
(45,31,1)
(39,42,1)
(27,45,1)
(15,58,1)
(21,7,1)
(41,11,2)
(29,52,2)
(15,55,2)
(39,36,2)
(52,49,2)
(17,45,2)
(31,55,2)
(50,45,2)
(3,55,2)
(39,55,2)
(49,55,2)
(0,45,2)
(48,55,2)
(23,55,2)
(25,55,2)
(13,55,2)
(13,36,2)
(29,47,2)
(41,55,2)
(10,26,2)
(40,41,2)
(18,55,2)
(23,58,2)
(38,0,2)
(33,45,2)
(10,36,2)
(45,41,2)
(12,45,2)
(51,45,2)
(26,53,2)
(36,55,2)
(11,55,2)
(23,36,2)
(26,55,2)
(36,29,2)
(0,58,2)
(40,45,2)
(22,55,2)
(58,55,2)
(16,39,2)
(43,45,2)
(4,55,2)
(38,45,2)
(14,55,2)
(45,55,2)
(53,55,2)
(56,55,2)
(52,55,2)
(24,55,2)
(30,55,2)
(21,55,2)
(49,22,2)
(10,55,2)
(32,55,2)
(37,19,2)
(6,55,2)
(37,39,2)
(29,55,2)
(42,55,2)
(11,10,2)
(0,41,2)
(19,39,2)
(6,23,2)
(0,12,2)
(35,45,2)
(7,55,2)
(57,55,2)
(11,9,2)
(28,45,2)
(17,41,2)
-----------------------------------
(0,data[0])
(1,)
(2,if (data != NULL)
(3,0)
(4,5)
(5,if (data == NULL)
(6,printIntLine(data[0])
(7,130000)
(8,)
(9,int *)
(10,realloc(data, (130000)
(11,(int *)
(12,data[0] = 10)
(13,data[0])
(14,data)
(15,data)
(16,1)
(17,free(data)
(18,0)
(19,-1)
(20,data)
(21,int)
(22,sizeof(int)
(23,data[0])
(24,int)
(25,data)
(26,(130000)
(27,RET)
(28,data)
(29,(int *)
(30,data)
(31,NULL)
(32,data)
(33,10)
(34,)
(35,0)
(36,* data = (int *)
(37,exit(-1)
(38,printIntLine(data[0])
(39,data == NULL)
(40,data[0])
(41,data = (int *)
(42,NULL)
(43,0)
(44,)
(45,data != NULL)
(46,)
(47,int *)
(48,100)
(49,100*sizeof(int)
(50,data)
(51,data)
(52,malloc(100*sizeof(int)
(53,sizeof(int)
(54,if(globalTrue)
(55,globalTrue)
(56,data)
(57,data)
(58,data[0] = 5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
