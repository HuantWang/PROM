-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_06_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,97
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_06_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_06_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_06_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,21,0)
(22,49,0)
(45,51,0)
(15,51,0)
(51,15,0)
(44,43,0)
(44,50,0)
(30,43,0)
(16,13,0)
(14,4,0)
(49,19,0)
(36,41,0)
(31,30,0)
(34,40,0)
(43,44,0)
(32,51,0)
(4,38,0)
(27,20,0)
(39,20,0)
(5,44,0)
(26,2,0)
(7,15,0)
(9,41,0)
(48,33,0)
(35,29,0)
(1,29,0)
(47,13,0)
(21,2,0)
(27,41,0)
(37,30,0)
(21,3,0)
(41,9,0)
(46,6,0)
(5,20,0)
(44,5,0)
(40,33,0)
(38,25,0)
(41,36,0)
(36,2,0)
(30,27,0)
(42,19,0)
(19,27,0)
(17,40,0)
(51,27,0)
(11,27,0)
(10,6,0)
(2,36,0)
(41,27,0)
(18,33,0)
(24,20,0)
(43,30,0)
(28,24,0)
(23,33,0)
(13,27,0)
(52,20,0)
(50,44,0)
(49,24,0)
(3,21,0)
(38,4,0)
(19,49,0)
(15,39,0)
(8,39,0)
(0,19,0)
(39,8,1)
(13,47,1)
(32,24,1)
(0,38,1)
(19,27,1)
(43,30,1)
(16,27,1)
(41,9,1)
(7,51,1)
(31,39,1)
(40,17,1)
(0,13,1)
(30,27,1)
(46,40,1)
(49,19,1)
(22,19,1)
(44,50,1)
(45,32,1)
(14,13,1)
(10,46,1)
(21,3,1)
(4,14,1)
(1,5,1)
(38,4,1)
(37,31,1)
(42,0,1)
(49,22,1)
(24,28,1)
(26,11,1)
(6,10,1)
(47,16,1)
(30,37,1)
(15,51,1)
(21,26,1)
(2,21,1)
(17,34,1)
(29,35,1)
(35,1,1)
(36,2,1)
(11,6,1)
(51,27,1)
(5,44,1)
(12,29,1)
(41,36,1)
(1,6,1)
(51,45,1)
(44,43,1)
(27,41,1)
(15,7,1)
(13,27,1)
(19,42,1)
(28,49,1)
(8,15,1)
(37,6,2)
(5,44,2)
(38,13,2)
(2,6,2)
(49,6,2)
(22,6,2)
(7,6,2)
(51,6,2)
(5,6,2)
(36,2,2)
(43,30,2)
(51,27,2)
(27,6,2)
(19,6,2)
(42,6,2)
(4,13,2)
(43,6,2)
(13,27,2)
(38,4,2)
(47,6,2)
(30,27,2)
(14,13,2)
(41,36,2)
(21,6,2)
(44,43,2)
(21,3,2)
(2,21,2)
(45,6,2)
(26,6,2)
(36,6,2)
(31,6,2)
(19,27,2)
(16,6,2)
(32,6,2)
(30,6,2)
(11,6,2)
(44,50,2)
(0,6,2)
(49,19,2)
(41,9,2)
(44,6,2)
(15,51,2)
(8,6,2)
(13,6,2)
(15,6,2)
(24,6,2)
(41,6,2)
(39,6,2)
(28,6,2)
(27,41,2)
-----------------------------------
(0,data)
(1,STATIC_CONST_FIVE)
(2,100*sizeof(struct _twoIntsStruct)
(3,struct _twoIntsStruct)
(4,-1)
(5,printStructLine((twoIntsStruct *)
(6,STATIC_CONST_FIVE==5)
(7,intTwo)
(8,0)
(9,struct _twoIntsStruct *)
(10,5)
(11,data)
(12,RET)
(13,data == NULL)
(14,1)
(15,data[0].intTwo)
(16,data)
(17,NULL)
(18,if(STATIC_CONST_FIVE==5)
(19,data[0])
(20,)
(21,sizeof(struct _twoIntsStruct)
(22,intOne)
(23,data)
(24,data[0].intOne = 0)
(25,)
(26,100)
(27,data = (struct _twoIntsStruct *)
(28,0)
(29,STATIC_CONST_FIVE==5)
(30,data[0])
(31,data)
(32,data)
(33,)
(34,data)
(35,5)
(36,malloc(100*sizeof(struct _twoIntsStruct)
(37,0)
(38,exit(-1)
(39,data[0].intTwo = 0)
(40,data = NULL)
(41,(struct _twoIntsStruct *)
(42,0)
(43,&data[0])
(44,(twoIntsStruct *)
(45,0)
(46,STATIC_CONST_FIVE)
(47,NULL)
(48,if(STATIC_CONST_FIVE==5)
(49,data[0].intOne)
(50,twoIntsStruct *)
(51,data[0])
(52,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
