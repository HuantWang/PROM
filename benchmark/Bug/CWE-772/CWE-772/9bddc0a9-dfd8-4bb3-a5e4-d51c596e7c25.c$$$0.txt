-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_31_bad()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
50,51
52,53
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
62,63
63,64
63,65
65,66
65,67
65,68
68,69
69,70
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,51,53,54,58,60,64,66,67,70,73,75,76,79,80
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_31_bad(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_31_bad()
CWE401_Memory_Leak__char_calloc_31_bad
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(29,23,0)
(25,26,0)
(30,22,0)
(9,12,0)
(29,31,0)
(19,31,0)
(12,17,0)
(7,24,0)
(0,23,0)
(27,13,0)
(3,29,0)
(17,12,0)
(5,6,0)
(6,26,0)
(21,36,0)
(22,4,0)
(24,17,0)
(34,17,0)
(35,18,0)
(23,31,0)
(4,1,0)
(33,14,0)
(12,9,0)
(32,24,0)
(17,14,0)
(28,18,0)
(4,22,0)
(26,6,0)
(26,12,0)
(15,36,0)
(36,14,0)
(10,14,0)
(2,23,0)
(18,14,0)
(23,17,0)
(8,29,0)
(18,17,0)
(13,14,0)
(11,31,0)
(12,26,0)
(13,17,0)
(31,14,0)
(28,24,1)
(6,5,1)
(0,13,1)
(28,4,1)
(29,23,1)
(24,17,1)
(30,24,1)
(18,35,1)
(24,32,1)
(27,18,1)
(25,34,1)
(34,36,1)
(18,17,1)
(4,22,1)
(7,17,1)
(13,27,1)
(2,0,1)
(17,12,1)
(23,17,1)
(22,30,1)
(12,26,1)
(8,23,1)
(13,17,1)
(36,21,1)
(5,25,1)
(32,7,1)
(21,15,1)
(12,9,1)
(23,2,1)
(26,6,1)
(35,28,1)
(29,3,1)
(20,29,1)
(3,8,1)
(4,22,2)
(18,17,2)
(26,6,2)
(30,24,2)
(17,12,2)
(4,24,2)
(23,17,2)
(24,17,2)
(12,9,2)
(13,17,2)
(22,24,2)
(12,26,2)
(29,23,2)
-----------------------------------
(0,dataCopy)
(1,)
(2,data)
(3,dataCopy)
(4,exit(-1)
(5,char)
(6,sizeof(char)
(7,data)
(8,data)
(9,char *)
(10,if (data == NULL)
(11,dataCopy)
(12,(char *)
(13,printLine(data)
(14,)
(15,data)
(16, sizeof(char)
(17,data = (char *)
(18,strcpy(data, "A String")
(19,data)
(20,RET)
(21,NULL)
(22,-1)
(23,* dataCopy = data)
(24,data == NULL)
(25,100)
(26,calloc(100, sizeof(char)
(27,data)
(28,data)
(29,* data = dataCopy)
(30,1)
(31,)
(32,NULL)
(33,data)
(34,data)
(35,"A String")
(36,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
