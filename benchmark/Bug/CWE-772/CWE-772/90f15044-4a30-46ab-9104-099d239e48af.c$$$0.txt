-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_15_bad()
{
    int * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
70,71
71,72
71,73
72,73
76,77
76,78
78,79
78,80
78,81
78,82
78,83
78,84
79,80
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,68,69,73,74,75,77,80,81,82,83,87,88,89
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_15_bad(){    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__int_calloc_15_bad()
CWE401_Memory_Leak__int_calloc_15_bad
{    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(12,5,0)
(41,11,0)
(31,47,0)
(24,38,0)
(43,15,0)
(3,10,0)
(39,11,0)
(40,3,0)
(8,29,0)
(29,47,0)
(46,7,0)
(34,23,0)
(35,10,0)
(32,47,0)
(46,47,0)
(48,26,0)
(3,46,0)
(19,47,0)
(28,23,0)
(7,41,0)
(9,7,0)
(17,44,0)
(25,14,0)
(0,41,0)
(38,26,0)
(21,23,0)
(45,47,0)
(11,41,0)
(22,3,0)
(16,21,0)
(36,23,0)
(8,10,0)
(42,26,0)
(30,46,0)
(17,15,0)
(29,8,0)
(14,47,0)
(7,9,0)
(8,46,0)
(13,8,0)
(10,47,0)
(15,17,0)
(41,7,0)
(4,23,0)
(5,46,0)
(37,5,0)
(49,26,0)
(18,8,0)
(7,46,0)
(33,38,0)
(27,47,0)
(8,10,1)
(27,14,1)
(3,22,1)
(8,46,1)
(38,24,1)
(45,29,1)
(2,36,1)
(43,5,1)
(40,17,1)
(25,20,1)
(22,40,1)
(35,3,1)
(18,10,1)
(7,9,1)
(8,13,1)
(6,45,1)
(3,46,1)
(12,46,1)
(40,5,1)
(10,35,1)
(0,30,1)
(15,43,1)
(14,25,1)
(21,16,1)
(5,37,1)
(5,46,1)
(30,20,1)
(36,21,1)
(11,39,1)
(7,41,1)
(34,6,1)
(46,7,1)
(2,34,1)
(24,33,1)
(41,11,1)
(20,38,1)
(13,18,1)
(39,0,1)
(17,15,1)
(16,6,1)
(29,8,1)
(37,12,1)
(6,27,1)
(17,15,2)
(43,5,2)
(12,20,2)
(8,20,2)
(39,20,2)
(35,20,2)
(21,6,2)
(18,20,2)
(0,20,2)
(5,20,2)
(41,20,2)
(8,46,2)
(17,5,2)
(5,46,2)
(34,6,2)
(25,20,2)
(7,20,2)
(40,20,2)
(41,11,2)
(13,20,2)
(45,20,2)
(37,20,2)
(36,6,2)
(8,10,2)
(14,20,2)
(11,20,2)
(10,20,2)
(46,20,2)
(22,20,2)
(7,9,2)
(16,6,2)
(3,20,2)
(30,20,2)
(3,46,2)
(46,7,2)
(15,5,2)
(7,41,2)
(29,20,2)
(29,8,2)
(27,20,2)
-----------------------------------
(0,100)
(1, sizeof(int)
(2,RET)
(3,data[0])
(4,default:)
(5,data == NULL)
(6,7)
(7,(int *)
(8,data[0])
(9,int *)
(10,data[0] = 5)
(11,sizeof(int)
(12,data)
(13,0)
(14,printLine("Benign, fixed string")
(15,-1)
(16,"Benign, fixed string")
(17,exit(-1)
(18,data)
(19,if (data == NULL)
(20,6)
(21,printLine("Benign, fixed string")
(22,0)
(23,)
(24,NULL)
(25,"Benign, fixed string")
(26,)
(27,break;)
(28,case 7:)
(29,printIntLine(data[0])
(30,data)
(31,case 6:)
(32,default:)
(33,data)
(34,break;)
(35,5)
(36,break;)
(37,NULL)
(38,data = NULL)
(39,int)
(40,data)
(41,calloc(100, sizeof(int)
(42,switch(7)
(43,1)
(44,)
(45,break;)
(46,data = (int *)
(47,)
(48,switch(6)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
