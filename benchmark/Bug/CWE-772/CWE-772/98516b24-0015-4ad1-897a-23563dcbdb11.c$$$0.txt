-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
70,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
37,38
37,39
44,45
44,46
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_03_bad()
CWE401_Memory_Leak__char_realloc_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(19,37,0)
(6,33,0)
(5,24,0)
(16,18,0)
(10,4,0)
(0,33,0)
(13,19,0)
(1,18,0)
(26,25,0)
(28,33,0)
(0,16,0)
(16,0,0)
(30,33,0)
(36,24,0)
(8,0,0)
(31,32,0)
(15,30,0)
(7,21,0)
(33,32,0)
(21,18,0)
(27,30,0)
(3,4,0)
(18,21,0)
(12,19,0)
(11,14,0)
(2,37,0)
(4,33,0)
(0,8,0)
(17,25,0)
(33,0,0)
(6,32,0)
(34,6,0)
(29,23,0)
(18,16,0)
(16,19,0)
(4,32,0)
(23,11,0)
(11,23,0)
(9,37,0)
(22,37,0)
(35,16,0)
(36,5,1)
(28,24,1)
(13,12,1)
(0,16,1)
(7,1,1)
(34,4,1)
(16,19,1)
(18,21,1)
(20,25,1)
(17,26,1)
(26,24,1)
(16,18,1)
(33,0,1)
(3,30,1)
(0,8,1)
(1,35,1)
(4,10,1)
(35,28,1)
(23,29,1)
(27,15,1)
(6,33,1)
(4,33,1)
(10,3,1)
(6,34,1)
(21,7,1)
(25,17,1)
(30,33,1)
(26,6,1)
(11,23,1)
(15,33,1)
(30,27,1)
(19,13,1)
(5,19,1)
(29,30,1)
(24,36,1)
(3,11,1)
(3,24,2)
(11,23,2)
(30,24,2)
(29,30,2)
(33,0,2)
(4,33,2)
(0,8,2)
(4,24,2)
(0,24,2)
(0,16,2)
(7,24,2)
(16,19,2)
(23,30,2)
(18,21,2)
(10,24,2)
(34,24,2)
(6,24,2)
(16,24,2)
(35,24,2)
(1,24,2)
(15,24,2)
(21,24,2)
(11,30,2)
(18,24,2)
(6,33,2)
(28,24,2)
(33,24,2)
(27,24,2)
(30,33,2)
(16,18,2)
-----------------------------------
(0,(char *)
(1,100)
(2,if(5==5)
(3,data)
(4,strcpy(data, "A String")
(5,5)
(6,printLine(data)
(7,char)
(8,char *)
(9,data)
(10,"A String")
(11,exit(-1)
(12,data)
(13,NULL)
(14,)
(15,data)
(16,realloc(data, 100*sizeof(char)
(17,5)
(18,100*sizeof(char)
(19,data = NULL)
(20,RET)
(21,sizeof(char)
(22,if(5==5)
(23,-1)
(24,5==5)
(25,5==5)
(26,5)
(27,NULL)
(28,data)
(29,1)
(30,data == NULL)
(31,if (data == NULL)
(32,)
(33,data = (char *)
(34,data)
(35,data)
(36,5)
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
