-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_44_bad()
{
    wchar_t * data;
    /* define a function pointer */
    void (*funcPtr) (wchar_t *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
42,45
43,44
45,46
47,48
47,49
49,50
50,51
50,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
68,69
70,71
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,48,51,52,56,58,63,65,69,71,72,76,78,82,84
-----computeFrom-----
28,29
28,30
34,35
34,36
47,48
47,49
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_44_bad(){    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__wchar_t_realloc_44_bad()
CWE401_Memory_Leak__wchar_t_realloc_44_bad
{    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* use the function pointer */    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = badSink;
void (*funcPtr) (wchar_t *) = badSink;
void
(*funcPtr) (wchar_t *) = badSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(10,27,0)
(7,27,0)
(22,28,0)
(31,23,0)
(27,7,0)
(8,22,0)
(14,0,0)
(16,28,0)
(1,10,0)
(15,19,0)
(25,6,0)
(29,8,0)
(8,7,0)
(7,30,0)
(26,19,0)
(21,27,0)
(17,4,0)
(3,22,0)
(0,24,0)
(2,4,0)
(9,10,0)
(20,6,0)
(7,8,0)
(23,19,0)
(12,27,0)
(24,5,0)
(8,4,0)
(21,19,0)
(24,0,0)
(27,19,0)
(22,8,0)
(6,19,0)
(11,21,0)
(28,22,0)
(30,7,0)
(4,19,0)
(13,19,0)
(23,27,0)
(6,25,1)
(12,4,1)
(10,9,1)
(1,27,1)
(28,16,1)
(11,23,1)
(3,29,1)
(18,21,1)
(7,8,1)
(25,20,1)
(31,10,1)
(22,28,1)
(23,27,1)
(16,3,1)
(31,24,1)
(21,27,1)
(24,0,1)
(14,10,1)
(9,1,1)
(7,30,1)
(29,12,1)
(23,31,1)
(0,14,1)
(8,22,1)
(8,4,1)
(27,7,1)
(21,11,1)
(4,2,1)
(17,6,1)
(10,27,1)
(2,17,1)
(7,8,2)
(22,28,2)
(21,27,2)
(23,27,2)
(7,30,2)
(8,22,2)
(8,4,2)
(24,10,2)
(14,10,2)
(10,27,2)
(0,10,2)
(24,0,2)
(27,7,2)
-----------------------------------
(0,-1)
(1,data)
(2,NULL)
(3,100)
(4,data = NULL)
(5,)
(6,(*funcPtr)
(7,(wchar_t *)
(8,realloc(data, 100*sizeof(wchar_t)
(9,NULL)
(10,data == NULL)
(11,data)
(12,data)
(13,data)
(14,1)
(15,if (data == NULL)
(16,wchar_t)
(17,data)
(18,RET)
(19,)
(20,funcPtr)
(21,funcPtr(data)
(22,100*sizeof(wchar_t)
(23,printWLine(data)
(24,exit(-1)
(25,badSink)
(26,funcPtr)
(27,data = (wchar_t *)
(28,sizeof(wchar_t)
(29,data)
(30,wchar_t *)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
