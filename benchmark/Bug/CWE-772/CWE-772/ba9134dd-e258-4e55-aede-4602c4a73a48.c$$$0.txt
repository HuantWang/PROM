-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_13_bad()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_13_bad(){    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_13_bad()
CWE401_Memory_Leak__char_calloc_13_bad
{    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(14,22,0)
(36,6,0)
(6,28,0)
(7,10,0)
(16,28,0)
(0,3,0)
(10,24,0)
(17,6,0)
(6,24,0)
(18,24,0)
(19,4,0)
(26,29,0)
(9,29,0)
(32,19,0)
(21,29,0)
(13,3,0)
(3,20,0)
(4,23,0)
(2,20,0)
(15,30,0)
(20,24,0)
(35,26,0)
(1,12,0)
(8,13,0)
(5,26,0)
(3,13,0)
(30,28,0)
(20,2,0)
(34,10,0)
(31,29,0)
(27,12,0)
(24,28,0)
(4,19,0)
(25,22,0)
(30,24,0)
(24,20,0)
(20,3,0)
(35,5,1)
(36,17,1)
(17,4,1)
(4,19,1)
(0,18,1)
(7,24,1)
(30,15,1)
(22,14,1)
(33,12,1)
(15,6,1)
(25,26,1)
(17,10,1)
(27,30,1)
(8,0,1)
(34,7,1)
(30,24,1)
(13,8,1)
(26,35,1)
(10,24,1)
(24,20,1)
(19,32,1)
(1,27,1)
(18,22,1)
(10,34,1)
(6,36,1)
(3,13,1)
(12,1,1)
(20,2,1)
(20,3,1)
(6,24,1)
(14,25,1)
(32,10,1)
(27,22,1)
(18,22,2)
(4,19,2)
(17,22,2)
(20,3,2)
(20,22,2)
(30,22,2)
(13,22,2)
(30,24,2)
(8,22,2)
(19,10,2)
(0,22,2)
(3,22,2)
(10,22,2)
(4,10,2)
(32,10,2)
(6,22,2)
(24,22,2)
(20,2,2)
(34,22,2)
(10,24,2)
(6,24,2)
(24,20,2)
(7,22,2)
(36,22,2)
(3,13,2)
(15,22,2)
-----------------------------------
(0,100)
(1,5)
(2,char *)
(3,calloc(100, sizeof(char)
(4,exit(-1)
(5,data)
(6,strcpy(data, "A String")
(7,data)
(8,char)
(9,if(GLOBAL_CONST_FIVE==5)
(10,data == NULL)
(11, sizeof(char)
(12,GLOBAL_CONST_FIVE==5)
(13,sizeof(char)
(14,5)
(15,data)
(16,if (data == NULL)
(17,data)
(18,data)
(19,-1)
(20,(char *)
(21,data)
(22,GLOBAL_CONST_FIVE==5)
(23,)
(24,data = (char *)
(25,GLOBAL_CONST_FIVE)
(26,data = NULL)
(27,GLOBAL_CONST_FIVE)
(28,)
(29,)
(30,printLine(data)
(31,if(GLOBAL_CONST_FIVE==5)
(32,1)
(33,RET)
(34,NULL)
(35,NULL)
(36,"A String")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
