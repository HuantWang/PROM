-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_05_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,58,60,61,65,67,70,72
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_05_bad(){    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_05_bad()
CWE401_Memory_Leak__wchar_t_realloc_05_bad
{    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(20,12,0)
(24,4,0)
(1,12,0)
(28,20,0)
(23,13,0)
(26,17,0)
(12,19,0)
(8,24,0)
(6,28,0)
(25,0,0)
(20,28,0)
(27,26,0)
(10,19,0)
(5,9,0)
(17,28,0)
(28,17,0)
(17,22,0)
(13,17,0)
(15,12,0)
(14,17,0)
(29,22,0)
(20,0,0)
(9,0,0)
(30,19,0)
(28,6,0)
(0,9,0)
(16,20,0)
(26,22,0)
(24,8,0)
(3,8,0)
(21,19,0)
(11,13,0)
(0,20,0)
(8,3,1)
(11,23,1)
(26,27,1)
(27,13,1)
(28,6,1)
(12,15,1)
(0,9,1)
(18,2,1)
(15,1,1)
(24,8,1)
(14,2,1)
(20,0,1)
(2,12,1)
(18,26,1)
(27,24,1)
(13,11,1)
(26,17,1)
(5,25,1)
(23,17,1)
(3,13,1)
(9,5,1)
(17,28,1)
(13,17,1)
(20,12,1)
(7,18,1)
(28,20,1)
(16,14,1)
(25,16,1)
(9,2,2)
(16,2,2)
(17,28,2)
(24,8,2)
(23,2,2)
(20,0,2)
(13,17,2)
(27,2,2)
(17,2,2)
(20,12,2)
(28,2,2)
(0,9,2)
(5,2,2)
(14,2,2)
(11,2,2)
(13,2,2)
(28,6,2)
(25,2,2)
(24,13,2)
(26,2,2)
(26,17,2)
(20,2,2)
(28,20,2)
(0,2,2)
(8,13,2)
(3,13,2)
-----------------------------------
(0,100*sizeof(wchar_t)
(1,data)
(2,staticTrue)
(3,1)
(4,)
(5,wchar_t)
(6,wchar_t *)
(7,RET)
(8,-1)
(9,sizeof(wchar_t)
(10,if(staticTrue)
(11,NULL)
(12,data = NULL)
(13,data == NULL)
(14,data)
(15,NULL)
(16,data)
(17,data = (wchar_t *)
(18,staticTrue)
(19,)
(20,realloc(data, 100*sizeof(wchar_t)
(21,data)
(22,)
(23,data)
(24,exit(-1)
(25,100)
(26,printWLine(data)
(27,data)
(28,(wchar_t *)
(29,if (data == NULL)
(30,if(staticTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
