-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_34_bad()
{
    char * data;
    CWE401_Memory_Leak__char_calloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
69,70
69,71
70,71
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
83,85
84,85
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,71,72,74,78,80,81,85,86,87
-----computeFrom-----
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_34_bad(){    char * data;    CWE401_Memory_Leak__char_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_34_bad()
CWE401_Memory_Leak__char_calloc_34_bad
{    char * data;    CWE401_Memory_Leak__char_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
CWE401_Memory_Leak__char_calloc_34_unionType myUnion;
CWE401_Memory_Leak__char_calloc_34_unionType myUnion;
CWE401_Memory_Leak__char_calloc_34_unionType
CWE401_Memory_Leak__char_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(29,28,0)
(12,13,0)
(33,3,0)
(34,17,0)
(3,28,0)
(9,12,0)
(19,37,0)
(10,6,0)
(0,12,0)
(40,26,0)
(18,22,0)
(7,39,0)
(21,13,0)
(4,37,0)
(3,17,0)
(31,37,0)
(27,37,0)
(25,13,0)
(15,30,0)
(6,25,0)
(32,30,0)
(5,13,0)
(20,31,0)
(25,37,0)
(30,15,0)
(38,13,0)
(27,14,0)
(26,27,0)
(28,13,0)
(31,13,0)
(22,37,0)
(35,17,0)
(8,31,0)
(17,3,0)
(2,25,0)
(39,26,0)
(27,26,0)
(14,27,0)
(37,13,0)
(23,19,0)
(37,27,0)
(36,19,0)
(24,6,0)
(26,39,0)
(22,13,0)
(15,16,0)
(39,7,1)
(25,37,1)
(4,12,1)
(24,10,1)
(18,31,1)
(35,33,1)
(8,20,1)
(30,32,1)
(10,22,1)
(31,37,1)
(6,24,1)
(27,26,1)
(3,17,1)
(22,18,1)
(31,8,1)
(17,34,1)
(7,40,1)
(2,6,1)
(26,39,1)
(25,2,1)
(20,15,1)
(23,37,1)
(37,27,1)
(34,35,1)
(36,23,1)
(33,25,1)
(20,19,1)
(12,9,1)
(40,4,1)
(1,3,1)
(15,30,1)
(22,37,1)
(9,0,1)
(27,14,1)
(32,19,1)
(19,37,1)
(19,36,1)
(27,26,2)
(37,27,2)
(32,19,2)
(3,17,2)
(26,39,2)
(22,37,2)
(31,37,2)
(30,19,2)
(25,37,2)
(19,37,2)
(27,14,2)
(15,30,2)
(15,19,2)
-----------------------------------
(0,data)
(1,RET)
(2,data)
(3,* data = myUnion.unionSecond)
(4,data)
(5,myUnion)
(6,myUnion.unionFirst)
(7,char)
(8,"A String")
(9,NULL)
(10,myUnion)
(11, sizeof(char)
(12,data = NULL)
(13,)
(14,char *)
(15,exit(-1)
(16,)
(17,myUnion.unionSecond)
(18,data)
(19,data == NULL)
(20,data)
(21,if (data == NULL)
(22,printLine(data)
(23,data)
(24,unionFirst)
(25,myUnion.unionFirst = data)
(26,calloc(100, sizeof(char)
(27,(char *)
(28,)
(29,data)
(30,-1)
(31,strcpy(data, "A String")
(32,1)
(33,data)
(34,unionSecond)
(35,myUnion)
(36,NULL)
(37,data = (char *)
(38,data)
(39,sizeof(char)
(40,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
