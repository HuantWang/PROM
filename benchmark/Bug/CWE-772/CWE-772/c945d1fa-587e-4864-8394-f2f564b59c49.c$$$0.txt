-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_03_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
84,86
87,88
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,85,86,88
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_03_bad(){    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_03_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_03_bad
{    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(42,3,0)
(38,22,0)
(49,39,0)
(17,36,0)
(13,29,0)
(25,5,0)
(20,28,0)
(2,6,0)
(34,30,0)
(20,3,0)
(16,41,0)
(37,48,0)
(32,39,0)
(24,18,0)
(9,39,0)
(25,20,0)
(18,44,0)
(44,6,0)
(44,18,0)
(45,6,0)
(26,15,0)
(35,3,0)
(12,37,0)
(15,0,0)
(14,48,0)
(31,25,0)
(4,24,0)
(48,3,0)
(28,20,0)
(7,26,0)
(15,26,0)
(36,39,0)
(37,45,0)
(3,20,0)
(23,5,0)
(30,21,0)
(18,24,0)
(20,25,0)
(27,22,0)
(40,21,0)
(24,3,0)
(21,3,0)
(30,41,0)
(48,37,0)
(50,29,0)
(47,24,0)
(8,48,0)
(41,6,0)
(46,42,0)
(1,42,0)
(3,6,0)
(5,25,0)
(21,30,0)
(11,36,0)
(10,21,0)
(43,45,0)
(34,21,1)
(40,42,1)
(27,38,1)
(46,3,1)
(21,3,1)
(24,4,1)
(11,17,1)
(37,48,1)
(15,26,1)
(3,20,1)
(21,10,1)
(41,16,1)
(31,35,1)
(40,15,1)
(30,34,1)
(47,45,1)
(36,11,1)
(8,14,1)
(23,31,1)
(26,7,1)
(12,48,1)
(16,30,1)
(48,3,1)
(35,22,1)
(19,29,1)
(24,3,1)
(18,24,1)
(42,1,1)
(5,23,1)
(48,8,1)
(20,28,1)
(25,5,1)
(30,21,1)
(1,46,1)
(37,12,1)
(45,43,1)
(38,36,1)
(14,41,1)
(29,13,1)
(44,18,1)
(4,47,1)
(50,22,1)
(13,50,1)
(10,40,1)
(42,3,1)
(43,37,1)
(50,44,1)
(7,42,1)
(20,25,1)
(22,27,1)
(20,25,2)
(1,22,2)
(35,22,2)
(45,22,2)
(34,22,2)
(30,21,2)
(23,22,2)
(10,22,2)
(7,42,2)
(12,22,2)
(21,3,2)
(25,5,2)
(3,20,2)
(24,3,2)
(37,22,2)
(42,3,2)
(31,22,2)
(4,22,2)
(14,22,2)
(47,22,2)
(5,22,2)
(24,22,2)
(20,28,2)
(18,24,2)
(26,42,2)
(42,22,2)
(43,22,2)
(41,22,2)
(37,48,2)
(21,22,2)
(16,22,2)
(44,22,2)
(25,22,2)
(15,42,2)
(48,22,2)
(8,22,2)
(3,22,2)
(46,22,2)
(44,18,2)
(48,3,2)
(15,26,2)
(40,22,2)
(30,22,2)
(18,22,2)
(20,22,2)
-----------------------------------
(0,)
(1,NULL)
(2,if (data == NULL)
(3,data = (twoIntsStruct *)
(4,0)
(5,sizeof(twoIntsStruct)
(6,)
(7,1)
(8,0)
(9,if(5==5)
(10,0)
(11,NULL)
(12,intTwo)
(13,5)
(14,data)
(15,exit(-1)
(16,0)
(17,data)
(18,&data[0])
(19,RET)
(20,(twoIntsStruct *)
(21,data[0])
(22,5==5)
(23,twoIntsStruct)
(24,data[0])
(25,calloc(100, sizeof(twoIntsStruct)
(26,-1)
(27,5)
(28,twoIntsStruct *)
(29,5==5)
(30,data[0].intOne)
(31,100)
(32,data)
(33, sizeof(twoIntsStruct)
(34,intOne)
(35,data)
(36,data = NULL)
(37,data[0].intTwo)
(38,5)
(39,)
(40,data)
(41,data[0].intOne = 0)
(42,data == NULL)
(43,0)
(44,printStructLine(&data[0])
(45,data[0].intTwo = 0)
(46,data)
(47,data)
(48,data[0])
(49,if(5==5)
(50,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
