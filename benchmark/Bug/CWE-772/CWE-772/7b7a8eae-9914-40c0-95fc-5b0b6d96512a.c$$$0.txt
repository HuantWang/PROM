-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_14_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,88,89,91
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_14_bad(){    twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_14_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_14_bad
{    twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,1,0)
(3,44,0)
(44,21,0)
(38,42,0)
(22,14,0)
(20,38,0)
(17,31,0)
(30,31,0)
(5,2,0)
(10,5,0)
(11,27,0)
(45,13,0)
(28,41,0)
(22,46,0)
(16,2,0)
(9,41,0)
(29,50,0)
(41,14,0)
(41,40,0)
(19,40,0)
(42,27,0)
(3,14,0)
(31,14,0)
(50,29,0)
(14,3,0)
(44,3,0)
(36,39,0)
(15,32,0)
(29,47,0)
(46,5,0)
(7,50,0)
(19,2,0)
(3,35,0)
(26,21,0)
(49,32,0)
(46,22,0)
(39,32,0)
(21,0,0)
(8,38,0)
(14,2,0)
(4,39,0)
(24,1,0)
(37,0,0)
(21,44,0)
(42,38,0)
(48,42,0)
(25,14,0)
(0,21,0)
(27,2,0)
(40,41,0)
(35,3,0)
(33,13,0)
(6,32,0)
(38,14,0)
(40,19,0)
(12,22,0)
(23,22,0)
(43,46,0)
(27,11,1)
(9,28,1)
(1,24,1)
(42,38,1)
(3,35,1)
(50,7,1)
(46,43,1)
(28,27,1)
(31,14,1)
(30,14,1)
(18,39,1)
(0,37,1)
(19,40,1)
(8,20,1)
(33,45,1)
(13,33,1)
(42,48,1)
(22,23,1)
(48,38,1)
(23,12,1)
(37,26,1)
(25,1,1)
(12,29,1)
(12,31,1)
(39,4,1)
(34,13,1)
(43,22,1)
(10,46,1)
(17,30,1)
(45,1,1)
(5,10,1)
(41,14,1)
(29,50,1)
(31,17,1)
(7,31,1)
(3,44,1)
(38,14,1)
(4,36,1)
(40,41,1)
(21,0,1)
(20,5,1)
(44,21,1)
(38,8,1)
(41,9,1)
(24,18,1)
(46,22,1)
(11,42,1)
(22,14,1)
(14,3,1)
(45,19,1)
(26,25,1)
(31,1,2)
(3,35,2)
(5,1,2)
(38,14,2)
(25,1,2)
(37,1,2)
(29,50,2)
(42,38,2)
(3,44,2)
(0,1,2)
(3,1,2)
(14,1,2)
(44,21,2)
(14,3,2)
(7,31,2)
(46,1,2)
(21,0,2)
(27,1,2)
(12,1,2)
(40,1,2)
(28,1,2)
(17,1,2)
(19,40,2)
(19,1,2)
(23,1,2)
(8,1,2)
(9,1,2)
(21,1,2)
(29,31,2)
(26,1,2)
(31,14,2)
(10,1,2)
(22,14,2)
(42,1,2)
(44,1,2)
(46,22,2)
(11,1,2)
(48,1,2)
(41,14,2)
(41,1,2)
(38,1,2)
(43,1,2)
(30,1,2)
(50,31,2)
(22,1,2)
(20,1,2)
(40,41,2)
-----------------------------------
(0,sizeof(twoIntsStruct)
(1,globalFive==5)
(2,)
(3,(twoIntsStruct *)
(4,NULL)
(5,data[0].intOne = 0)
(6,if(globalFive==5)
(7,1)
(8,0)
(9,0)
(10,0)
(11,0)
(12,data)
(13,globalFive==5)
(14,data = (twoIntsStruct *)
(15,data)
(16,if (data == NULL)
(17,NULL)
(18,globalFive)
(19,printStructLine(&data[0])
(20,data)
(21,100*sizeof(twoIntsStruct)
(22,data[0])
(23,0)
(24,5)
(25,data)
(26,100)
(27,data[0].intTwo = 0)
(28,data)
(29,exit(-1)
(30,data)
(31,data == NULL)
(32,)
(33,5)
(34,RET)
(35,twoIntsStruct *)
(36,data)
(37,twoIntsStruct)
(38,data[0])
(39,data = NULL)
(40,&data[0])
(41,data[0])
(42,data[0].intTwo)
(43,intOne)
(44,malloc(100*sizeof(twoIntsStruct)
(45,globalFive)
(46,data[0].intOne)
(47,)
(48,intTwo)
(49,if(globalFive==5)
(50,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
