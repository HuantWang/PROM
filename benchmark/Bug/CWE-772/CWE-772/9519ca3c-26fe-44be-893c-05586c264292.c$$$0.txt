-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_10_bad()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
26,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
49,50
-----nextToken-----
2,4,8,10,11,15,17,20,25,27,28,30,34,37,39,43,45,48,50
-----computeFrom-----
13,14
13,15
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_10_bad(){    char * data;    data = NULL;    if(globalTrue)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_10_bad()
CWE401_Memory_Leak__strdup_char_10_bad
{    char * data;    data = NULL;    if(globalTrue)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
globalTrue
globalTrue
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(6,14,0)
(9,19,0)
(15,21,0)
(15,9,0)
(20,1,0)
(7,1,0)
(14,21,0)
(19,9,0)
(17,14,0)
(4,13,0)
(9,21,0)
(5,21,0)
(11,19,0)
(13,1,0)
(12,15,0)
(21,8,0)
(2,9,0)
(16,1,0)
(19,14,0)
(3,13,0)
(18,15,1)
(18,0,1)
(12,9,1)
(15,12,1)
(13,4,1)
(17,6,1)
(19,14,1)
(6,0,1)
(2,14,1)
(14,17,1)
(9,19,1)
(10,18,1)
(19,11,1)
(4,3,1)
(11,2,1)
(15,9,1)
(0,13,1)
(12,0,2)
(19,14,2)
(9,19,2)
(17,0,2)
(11,0,2)
(9,0,2)
(15,9,2)
(15,0,2)
(2,0,2)
(6,0,2)
(14,0,2)
(19,0,2)
-----------------------------------
(0,globalTrue)
(1,)
(2,data)
(3,data)
(4,NULL)
(5,myString)
(6,myString)
(7,if(globalTrue)
(8,)
(9,data = strdup(myString)
(10,RET)
(11,myString)
(12,data)
(13,data = NULL)
(14,myString[] = "myString")
(15,printLine(data)
(16,data)
(17,"myString")
(18,globalTrue)
(19,strdup(myString)
(20,if(globalTrue)
(21,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
