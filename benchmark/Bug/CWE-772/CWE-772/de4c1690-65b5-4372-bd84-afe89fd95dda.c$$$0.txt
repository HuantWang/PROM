-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_04_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,91,93
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_04_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_04_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_04_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(35,3,0)
(39,2,0)
(35,12,0)
(8,25,0)
(19,5,0)
(8,1,0)
(39,28,0)
(18,5,0)
(48,28,0)
(44,35,0)
(27,22,0)
(25,8,0)
(15,42,0)
(28,39,0)
(12,27,0)
(31,47,0)
(38,12,0)
(38,1,0)
(14,47,0)
(33,38,0)
(10,12,0)
(2,42,0)
(21,12,0)
(26,42,0)
(34,41,0)
(40,26,0)
(4,41,0)
(1,8,0)
(0,38,0)
(27,37,0)
(36,22,0)
(17,21,0)
(32,28,0)
(13,2,0)
(24,5,0)
(16,35,0)
(9,3,0)
(41,5,0)
(23,36,0)
(12,42,0)
(43,21,0)
(28,12,0)
(27,12,0)
(37,27,0)
(36,30,0)
(30,36,0)
(11,8,0)
(22,27,0)
(8,11,0)
(47,14,0)
(25,42,0)
(22,36,0)
(45,39,0)
(1,38,0)
(3,26,0)
(3,35,0)
(7,30,0)
(14,29,0)
(30,7,0)
(12,27,1)
(20,41,1)
(38,12,1)
(40,3,1)
(14,47,1)
(27,37,1)
(39,28,1)
(27,22,1)
(8,11,1)
(6,25,1)
(1,38,1)
(43,12,1)
(9,35,1)
(25,8,1)
(33,0,1)
(16,2,1)
(41,34,1)
(35,12,1)
(48,32,1)
(22,36,1)
(28,12,1)
(30,23,1)
(23,10,1)
(38,33,1)
(3,9,1)
(35,44,1)
(44,16,1)
(21,17,1)
(31,21,1)
(46,6,1)
(21,12,1)
(2,13,1)
(34,4,1)
(47,31,1)
(45,28,1)
(3,35,1)
(32,21,1)
(10,20,1)
(39,45,1)
(36,30,1)
(28,48,1)
(32,14,1)
(30,7,1)
(26,40,1)
(8,1,1)
(0,26,1)
(13,39,1)
(17,43,1)
(6,20,1)
(3,35,2)
(35,20,2)
(1,38,2)
(14,21,2)
(25,8,2)
(39,20,2)
(30,7,2)
(12,20,2)
(12,27,2)
(47,21,2)
(44,20,2)
(25,20,2)
(40,20,2)
(43,20,2)
(38,20,2)
(9,20,2)
(32,20,2)
(36,20,2)
(23,20,2)
(30,20,2)
(27,20,2)
(8,20,2)
(28,20,2)
(2,20,2)
(31,21,2)
(14,47,2)
(1,20,2)
(27,37,2)
(17,20,2)
(45,20,2)
(8,11,2)
(22,36,2)
(38,12,2)
(36,30,2)
(39,28,2)
(26,20,2)
(16,20,2)
(10,20,2)
(35,12,2)
(33,20,2)
(48,20,2)
(21,12,2)
(28,12,2)
(22,20,2)
(27,22,2)
(21,20,2)
(3,20,2)
(0,20,2)
(13,20,2)
(8,1,2)
-----------------------------------
(0,data)
(1,&data[0])
(2,data[0].intOne = 0)
(3,data[0].intTwo)
(4,data)
(5,)
(6,STATIC_CONST_TRUE)
(7,struct _twoIntsStruct)
(8,(twoIntsStruct *)
(9,intTwo)
(10,data)
(11,twoIntsStruct *)
(12,data = (struct _twoIntsStruct *)
(13,0)
(14,exit(-1)
(15,if (data == NULL)
(16,data)
(17,NULL)
(18,if(STATIC_CONST_TRUE)
(19,data)
(20,STATIC_CONST_TRUE)
(21,data == NULL)
(22,malloc(100*sizeof(struct _twoIntsStruct)
(23,100)
(24,if(STATIC_CONST_TRUE)
(25,printStructLine((twoIntsStruct *)
(26,data[0].intTwo = 0)
(27,(struct _twoIntsStruct *)
(28,data[0])
(29,)
(30,sizeof(struct _twoIntsStruct)
(31,1)
(32,data)
(33,0)
(34,NULL)
(35,data[0])
(36,100*sizeof(struct _twoIntsStruct)
(37,struct _twoIntsStruct *)
(38,data[0])
(39,data[0].intOne)
(40,0)
(41,data = NULL)
(42,)
(43,data)
(44,0)
(45,intOne)
(46,RET)
(47,-1)
(48,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
