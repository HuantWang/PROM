-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_02_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
88,90
90,91
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,89,91
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_02_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_02_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_02_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(47,46,0)
(8,44,0)
(16,45,0)
(34,30,0)
(44,22,0)
(20,14,0)
(3,11,0)
(26,30,0)
(37,41,0)
(44,21,0)
(17,12,0)
(11,8,0)
(8,15,0)
(30,8,0)
(41,45,0)
(46,14,0)
(46,25,0)
(42,45,0)
(17,11,0)
(25,8,0)
(27,40,0)
(27,1,0)
(44,8,0)
(23,6,0)
(14,15,0)
(12,15,0)
(10,25,0)
(33,8,0)
(9,15,0)
(24,45,0)
(39,31,0)
(22,44,0)
(2,35,0)
(25,46,0)
(6,30,0)
(22,35,0)
(0,8,0)
(43,12,0)
(30,6,0)
(23,7,0)
(7,23,0)
(40,27,0)
(13,23,0)
(35,39,0)
(38,25,0)
(36,0,0)
(32,40,0)
(31,39,0)
(28,41,0)
(21,44,0)
(29,0,0)
(4,17,0)
(35,22,0)
(11,17,0)
(39,35,0)
(19,11,0)
(23,13,0)
(13,15,0)
(6,23,0)
(14,20,1)
(5,18,1)
(25,8,1)
(10,38,1)
(44,22,1)
(11,19,1)
(39,2,1)
(44,21,1)
(18,41,1)
(29,36,1)
(48,5,1)
(23,7,1)
(39,31,1)
(8,44,1)
(2,33,1)
(36,8,1)
(25,10,1)
(47,25,1)
(4,11,1)
(3,0,1)
(17,4,1)
(17,11,1)
(0,8,1)
(43,17,1)
(46,47,1)
(26,34,1)
(33,18,1)
(27,40,1)
(30,26,1)
(6,30,1)
(11,8,1)
(30,8,1)
(23,6,1)
(13,23,1)
(41,37,1)
(37,28,1)
(19,3,1)
(34,14,1)
(46,25,1)
(0,29,1)
(40,32,1)
(22,35,1)
(3,27,1)
(35,39,1)
(20,46,1)
(12,43,1)
(38,12,1)
(32,0,1)
(5,13,1)
(26,18,2)
(0,18,2)
(13,18,2)
(25,18,2)
(20,18,2)
(23,7,2)
(32,0,2)
(13,23,2)
(12,18,2)
(35,39,2)
(46,18,2)
(35,18,2)
(40,0,2)
(38,18,2)
(44,18,2)
(6,30,2)
(44,21,2)
(30,18,2)
(2,18,2)
(17,18,2)
(36,18,2)
(19,18,2)
(30,8,2)
(6,18,2)
(27,40,2)
(25,8,2)
(3,18,2)
(22,18,2)
(22,35,2)
(46,25,2)
(43,18,2)
(4,18,2)
(11,18,2)
(34,18,2)
(8,18,2)
(10,18,2)
(0,8,2)
(8,44,2)
(27,0,2)
(14,18,2)
(17,11,2)
(39,31,2)
(33,18,2)
(11,8,2)
(29,18,2)
(44,22,2)
(47,18,2)
(23,18,2)
(39,18,2)
(23,6,2)
-----------------------------------
(0,data == NULL)
(1,)
(2,100)
(3,data)
(4,intOne)
(5,1)
(6,&data[0])
(7,twoIntsStruct *)
(8,data = (struct _twoIntsStruct *)
(9,if (data == NULL)
(10,0)
(11,data[0])
(12,data[0].intOne = 0)
(13,printStructLine((twoIntsStruct *)
(14,data[0].intTwo = 0)
(15,)
(16,if(1)
(17,data[0].intOne)
(18,1)
(19,0)
(20,0)
(21,struct _twoIntsStruct *)
(22,malloc(100*sizeof(struct _twoIntsStruct)
(23,(twoIntsStruct *)
(24,if(1)
(25,data[0])
(26,0)
(27,exit(-1)
(28,data)
(29,NULL)
(30,data[0])
(31,struct _twoIntsStruct)
(32,1)
(33,data)
(34,data)
(35,100*sizeof(struct _twoIntsStruct)
(36,data)
(37,NULL)
(38,data)
(39,sizeof(struct _twoIntsStruct)
(40,-1)
(41,data = NULL)
(42,data)
(43,0)
(44,(struct _twoIntsStruct *)
(45,)
(46,data[0].intTwo)
(47,intTwo)
(48,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
