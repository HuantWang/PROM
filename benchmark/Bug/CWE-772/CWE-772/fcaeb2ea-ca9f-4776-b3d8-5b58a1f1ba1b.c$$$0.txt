-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_16_bad()
{
    twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
85,86
85,87
87,88
87,89
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,84,86,88,89
-----computeFrom-----
14,15
14,16
23,24
23,25
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_16_bad(){    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_16_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_16_bad
{    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(30,7,0)
(36,24,0)
(43,31,0)
(24,4,0)
(15,10,0)
(15,19,0)
(19,2,0)
(41,16,0)
(47,28,0)
(16,2,0)
(7,18,0)
(31,19,0)
(8,19,0)
(29,8,0)
(3,2,0)
(42,31,0)
(23,10,0)
(34,50,0)
(12,6,0)
(36,19,0)
(28,2,0)
(1,14,0)
(39,18,0)
(22,20,0)
(5,22,0)
(44,14,0)
(0,24,0)
(6,4,0)
(19,36,0)
(3,49,0)
(4,24,0)
(24,7,0)
(27,15,0)
(40,18,0)
(8,49,0)
(48,20,0)
(35,18,0)
(17,2,0)
(10,28,0)
(25,20,0)
(24,36,0)
(13,8,0)
(36,9,0)
(45,2,0)
(20,19,0)
(21,15,0)
(49,8,0)
(10,15,0)
(4,6,0)
(49,3,0)
(33,4,0)
(11,7,0)
(14,1,0)
(9,36,0)
(1,32,0)
(22,16,0)
(20,22,0)
(26,19,0)
(10,23,1)
(37,38,1)
(24,4,1)
(15,21,1)
(19,36,1)
(13,29,1)
(22,20,1)
(25,1,1)
(21,27,1)
(44,31,1)
(23,15,1)
(37,45,1)
(6,12,1)
(12,33,1)
(26,38,1)
(11,30,1)
(46,37,1)
(36,24,1)
(8,13,1)
(42,43,1)
(10,15,1)
(43,19,1)
(20,48,1)
(8,19,1)
(27,16,1)
(46,34,1)
(41,22,1)
(34,37,1)
(1,14,1)
(48,25,1)
(14,44,1)
(31,19,1)
(3,49,1)
(0,26,1)
(7,11,1)
(29,28,1)
(28,47,1)
(22,5,1)
(16,41,1)
(38,7,1)
(45,3,1)
(15,19,1)
(47,10,1)
(25,31,1)
(20,19,1)
(33,0,1)
(4,6,1)
(31,42,1)
(24,7,1)
(49,8,1)
(5,20,1)
(36,9,1)
(3,49,2)
(47,38,2)
(15,38,2)
(34,37,2)
(10,15,2)
(41,38,2)
(4,6,2)
(5,38,2)
(16,38,2)
(10,38,2)
(8,38,2)
(42,38,2)
(26,38,2)
(1,14,2)
(43,38,2)
(36,38,2)
(19,36,2)
(36,9,2)
(12,38,2)
(3,38,2)
(33,38,2)
(24,7,2)
(19,38,2)
(49,8,2)
(6,38,2)
(29,38,2)
(25,38,2)
(45,38,2)
(22,38,2)
(21,38,2)
(44,31,2)
(22,20,2)
(31,38,2)
(8,19,2)
(15,19,2)
(14,31,2)
(31,19,2)
(49,38,2)
(24,38,2)
(4,38,2)
(48,38,2)
(1,31,2)
(20,38,2)
(23,38,2)
(20,19,2)
(24,4,2)
(36,24,2)
(27,38,2)
(13,38,2)
(28,38,2)
(0,38,2)
-----------------------------------
(0,data)
(1,exit(-1)
(2,)
(3,printStructLine(&data[0])
(4,100*sizeof(twoIntsStruct)
(5,intOne)
(6,sizeof(twoIntsStruct)
(7,data = NULL)
(8,data[0])
(9,twoIntsStruct *)
(10,data[0].intTwo)
(11,NULL)
(12,twoIntsStruct)
(13,0)
(14,-1)
(15,data[0])
(16,data[0].intOne = 0)
(17,if (data == NULL)
(18,)
(19,data = (twoIntsStruct *)
(20,data[0])
(21,0)
(22,data[0].intOne)
(23,intTwo)
(24,realloc(data, 100*sizeof(twoIntsStruct)
(25,data)
(26,data)
(27,data)
(28,data[0].intTwo = 0)
(29,data)
(30,data)
(31,data == NULL)
(32,)
(33,100)
(34,break;)
(35,while(1)
(36,(twoIntsStruct *)
(37,1)
(38,1)
(39,while(1)
(40,data)
(41,0)
(42,NULL)
(43,data)
(44,1)
(45,break;)
(46,RET)
(47,0)
(48,0)
(49,&data[0])
(50,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
