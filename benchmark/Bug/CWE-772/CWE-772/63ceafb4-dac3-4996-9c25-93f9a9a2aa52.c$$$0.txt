-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
49,50
51,52
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,31,35,38,40,44,46,50,52
-----computeFrom-----
13,14
13,15
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_08_bad()
CWE401_Memory_Leak__strdup_char_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(21,1,0)
(18,5,0)
(2,5,0)
(16,6,0)
(3,1,0)
(15,16,0)
(19,6,0)
(13,6,0)
(12,16,0)
(18,11,0)
(1,5,0)
(0,1,0)
(5,9,0)
(7,11,0)
(17,18,0)
(0,11,0)
(11,5,0)
(8,6,0)
(20,0,0)
(11,0,0)
(0,20,1)
(0,1,1)
(20,7,1)
(7,1,1)
(15,12,1)
(17,11,1)
(3,4,1)
(10,14,1)
(14,4,1)
(21,3,1)
(4,16,1)
(14,18,1)
(16,15,1)
(11,0,1)
(1,21,1)
(18,17,1)
(18,11,1)
(17,4,2)
(0,4,2)
(7,4,2)
(21,4,2)
(1,4,2)
(0,1,2)
(3,4,2)
(18,11,2)
(11,4,2)
(11,0,2)
(20,4,2)
(18,4,2)
-----------------------------------
(0,strdup(myString)
(1,myString[] = "myString")
(2,myString)
(3,myString)
(4,staticReturnsTrue()
(5,)
(6,)
(7,data)
(8,if(staticReturnsTrue()
(9,)
(10,RET)
(11,data = strdup(myString)
(12,data)
(13,data)
(14,staticReturnsTrue()
(15,NULL)
(16,data = NULL)
(17,data)
(18,printLine(data)
(19,if(staticReturnsTrue()
(20,myString)
(21,"myString")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
