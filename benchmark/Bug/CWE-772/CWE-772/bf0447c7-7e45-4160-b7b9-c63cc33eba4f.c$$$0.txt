-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
82,83
84,85
84,86
84,87
85,86
87,88
89,90
89,91
90,91
92,93
93,94
93,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
102,105
103,104
104,105
104,106
105,106
105,107
106,107
110,111
111,112
111,113
112,113
114,115
114,116
115,116
118,119
119,120
119,121
120,121
122,123
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,31,35,37,40,42,45,46,50,52,57,59,64,65,66,70,73,74,78,81,83,86,88,91,94,95,99,101,107,108,109,113,116,117,121,123
-----computeFrom-----
13,14
13,15
17,18
17,19
41,42
41,43
48,49
48,50
61,62
61,63
76,77
76,78
89,90
89,91
97,98
97,99
104,105
104,106
-----guardedBy-----
99,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_17_bad()
CWE401_Memory_Leak__malloc_realloc_int_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(0,30,0)
(6,43,0)
(59,16,0)
(12,59,0)
(41,16,0)
(46,6,0)
(21,66,0)
(12,40,0)
(43,6,0)
(0,29,0)
(66,15,0)
(59,12,0)
(60,0,0)
(30,0,0)
(53,59,0)
(52,12,0)
(9,50,0)
(42,17,0)
(7,15,0)
(36,29,0)
(43,52,0)
(0,59,0)
(65,57,0)
(63,33,0)
(56,17,0)
(32,10,0)
(18,55,0)
(13,57,0)
(49,15,0)
(61,16,0)
(23,3,0)
(27,43,0)
(62,22,0)
(11,20,0)
(37,61,0)
(2,33,0)
(58,16,0)
(20,57,0)
(38,55,0)
(57,13,0)
(30,16,0)
(4,61,0)
(50,61,0)
(0,18,0)
(40,12,0)
(50,18,0)
(16,31,0)
(39,38,0)
(26,24,0)
(10,20,0)
(61,10,0)
(51,22,0)
(14,13,0)
(25,55,0)
(39,29,0)
(57,20,0)
(3,29,0)
(8,39,0)
(33,59,0)
(3,59,0)
(28,39,0)
(48,4,0)
(54,50,0)
(35,4,0)
(38,39,0)
(47,25,0)
(62,45,0)
(39,61,0)
(29,16,0)
(20,10,0)
(25,61,0)
(22,62,0)
(34,16,0)
(39,18,0)
(1,3,0)
(24,15,0)
(44,0,0)
(10,32,0)
(52,43,0)
(20,59,0)
(10,61,0)
(19,18,0)
(12,52,0)
(64,24,0)
(39,29,1)
(57,13,1)
(51,33,1)
(33,59,1)
(13,14,1)
(20,59,1)
(3,23,1)
(39,61,1)
(52,43,1)
(39,8,1)
(43,6,1)
(7,49,1)
(9,54,1)
(0,29,1)
(11,37,1)
(25,47,1)
(22,51,1)
(1,33,1)
(24,64,1)
(12,40,1)
(66,21,1)
(12,52,1)
(39,18,1)
(62,22,1)
(0,44,1)
(25,61,1)
(4,35,1)
(26,15,1)
(26,66,1)
(27,53,1)
(36,3,1)
(29,36,1)
(60,29,1)
(21,25,1)
(0,18,1)
(0,59,1)
(54,4,1)
(10,32,1)
(44,60,1)
(19,50,1)
(38,39,1)
(14,65,1)
(59,12,1)
(66,15,1)
(2,63,1)
(65,11,1)
(35,48,1)
(47,38,1)
(46,27,1)
(6,46,1)
(37,30,1)
(28,18,1)
(30,0,1)
(64,26,1)
(10,20,1)
(48,61,1)
(1,62,1)
(5,24,1)
(61,10,1)
(8,28,1)
(15,7,1)
(53,24,1)
(20,57,1)
(4,61,1)
(3,59,1)
(50,9,1)
(18,19,1)
(21,4,1)
(63,59,1)
(24,15,1)
(33,2,1)
(50,61,1)
(23,1,1)
(25,4,2)
(60,24,2)
(11,24,2)
(39,18,2)
(50,61,2)
(39,4,2)
(12,52,2)
(20,57,2)
(1,24,2)
(43,6,2)
(30,0,2)
(14,24,2)
(6,24,2)
(38,39,2)
(52,43,2)
(62,33,2)
(43,24,2)
(19,4,2)
(10,32,2)
(30,24,2)
(4,24,2)
(4,61,2)
(39,29,2)
(10,24,2)
(63,24,2)
(0,59,2)
(0,18,2)
(66,24,2)
(20,24,2)
(33,59,2)
(65,24,2)
(12,40,2)
(39,61,2)
(18,4,2)
(61,10,2)
(26,24,2)
(0,24,2)
(50,4,2)
(61,24,2)
(62,22,2)
(24,24,2)
(28,4,2)
(59,12,2)
(24,15,2)
(33,24,2)
(8,4,2)
(25,61,2)
(27,24,2)
(29,24,2)
(53,24,2)
(38,4,2)
(0,29,2)
(54,4,2)
(57,24,2)
(66,15,2)
(23,24,2)
(35,24,2)
(20,59,2)
(44,24,2)
(64,24,2)
(48,24,2)
(51,33,2)
(13,24,2)
(22,33,2)
(3,59,2)
(52,24,2)
(21,24,2)
(36,24,2)
(59,24,2)
(37,24,2)
(9,4,2)
(3,24,2)
(57,13,2)
(2,24,2)
(10,20,2)
(12,24,2)
(47,4,2)
(46,24,2)
-----------------------------------
(0,data[0])
(1,data)
(2,NULL)
(3,data[0])
(4,data != NULL)
(5,RET)
(6,sizeof(int)
(7,0)
(8,0)
(9,0)
(10,(int *)
(11,data)
(12,(int *)
(13,sizeof(int)
(14,int)
(15,j = 0)
(16,)
(17,)
(18,data[0] = 10)
(19,10)
(20,realloc(data, (130000)
(21,j)
(22,-1)
(23,0)
(24,j < 1)
(25,free(data)
(26,j)
(27,100)
(28,data)
(29,data[0] = 5)
(30,printIntLine(data[0])
(31,)
(32,int *)
(33,data == NULL)
(34,data)
(35,NULL)
(36,5)
(37,data)
(38,printIntLine(data[0])
(39,data[0])
(40,int *)
(41,if (data != NULL)
(42,for(j = 0; j < 1; j++)
(43,100*sizeof(int)
(44,0)
(45,)
(46,int)
(47,data)
(48,data)
(49,j)
(50,data[0])
(51,1)
(52,malloc(100*sizeof(int)
(53,data)
(54,data)
(55,)
(56,j)
(57,(130000)
(58,if (data == NULL)
(59,* data = (int *)
(60,data)
(61,data = (int *)
(62,exit(-1)
(63,data)
(64,1)
(65,130000)
(66,j++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
