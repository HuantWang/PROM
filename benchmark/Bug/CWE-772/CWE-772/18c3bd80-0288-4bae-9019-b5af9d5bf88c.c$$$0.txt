-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_16_bad()
{
    int64_t * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
70,71
70,72
72,73
72,74
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,58,59,60,64,67,68,69,71,73,74
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_16_bad(){    int64_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__int64_t_calloc_16_bad()
CWE401_Memory_Leak__int64_t_calloc_16_bad
{    int64_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(8,3,0)
(21,15,0)
(30,22,0)
(18,2,0)
(25,28,0)
(27,19,0)
(29,30,0)
(26,22,0)
(15,21,0)
(35,28,0)
(27,22,0)
(12,15,0)
(10,28,0)
(7,15,0)
(19,30,0)
(19,27,0)
(4,19,0)
(3,30,0)
(17,12,0)
(33,21,0)
(14,25,0)
(23,22,0)
(1,13,0)
(31,11,0)
(12,17,0)
(5,28,0)
(1,11,0)
(30,12,0)
(34,19,0)
(9,25,0)
(12,30,0)
(0,3,0)
(15,12,0)
(20,22,0)
(11,1,0)
(12,15,1)
(23,27,1)
(16,23,1)
(33,7,1)
(32,25,1)
(3,0,1)
(6,18,1)
(19,30,1)
(3,30,1)
(11,31,1)
(19,4,1)
(29,32,1)
(27,19,1)
(12,17,1)
(25,9,1)
(34,20,1)
(18,16,1)
(31,3,1)
(21,33,1)
(7,29,1)
(9,14,1)
(1,11,1)
(16,32,1)
(6,16,1)
(15,21,1)
(4,34,1)
(20,1,1)
(0,8,1)
(30,12,1)
(20,3,1)
(8,30,1)
(1,11,2)
(20,32,2)
(18,16,2)
(27,19,2)
(8,32,2)
(3,32,2)
(19,30,2)
(30,12,2)
(33,32,2)
(30,32,2)
(19,32,2)
(12,32,2)
(21,32,2)
(15,21,2)
(15,32,2)
(12,15,2)
(7,32,2)
(1,3,2)
(3,30,2)
(27,32,2)
(29,32,2)
(0,32,2)
(4,32,2)
(23,32,2)
(12,17,2)
(34,32,2)
(31,3,2)
(11,3,2)
-----------------------------------
(0,NULL)
(1,exit(-1)
(2,)
(3,data == NULL)
(4,0)
(5,while(1)
(6,RET)
(7,100)
(8,data)
(9,NULL)
(10,while(1)
(11,-1)
(12,(int64_t *)
(13,)
(14,data)
(15,calloc(100, sizeof(int64_t)
(16,1)
(17,int64_t *)
(18,break;)
(19,data[0])
(20,L)
(21,sizeof(int64_t)
(22,)
(23,break;)
(24, sizeof(int64_t)
(25,data = NULL)
(26,if (data == NULL)
(27,printLongLongLine(data[0])
(28,)
(29,data)
(30,data = (int64_t *)
(31,1)
(32,1)
(33,int64_t)
(34,data)
(35,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
