-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_17_bad()
{
    int i,j;
    struct _twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
53,54
55,56
55,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
108,109
108,110
108,111
108,112
109,110
110,111
110,112
111,112
114,115
114,116
115,116
118,119
119,120
121,122
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,56,60,61,65,67,72,74,80,81,82,83,89,90,91,92,96,100,102,106,107,112,113,116,117,120,122
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
55,56
55,57
63,64
63,65
76,77
76,78
85,86
85,87
110,111
110,112
114,115
114,116
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_17_bad(){    int i,j;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_17_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_17_bad
{    int i,j;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,52,0)
(65,11,0)
(44,40,0)
(51,36,0)
(52,18,0)
(35,29,0)
(5,37,0)
(29,54,0)
(58,44,0)
(41,37,0)
(48,6,0)
(44,29,0)
(1,28,0)
(24,49,0)
(7,23,0)
(49,47,0)
(4,43,0)
(39,54,0)
(55,57,0)
(4,30,0)
(61,17,0)
(38,29,0)
(46,47,0)
(57,56,0)
(59,23,0)
(25,39,0)
(3,29,0)
(52,58,0)
(34,56,0)
(21,35,0)
(0,40,0)
(22,5,0)
(8,44,0)
(40,23,0)
(47,29,0)
(29,36,0)
(14,56,0)
(13,38,0)
(30,54,0)
(58,52,0)
(42,35,0)
(44,36,0)
(16,3,0)
(63,11,0)
(35,5,0)
(26,40,0)
(31,23,0)
(11,63,0)
(44,58,0)
(17,6,0)
(53,17,0)
(15,23,0)
(20,29,0)
(27,28,0)
(36,44,0)
(37,54,0)
(30,4,0)
(3,32,0)
(62,47,0)
(10,38,0)
(32,4,0)
(12,54,0)
(33,58,0)
(49,39,0)
(36,51,0)
(43,4,0)
(5,35,0)
(47,49,0)
(64,50,0)
(19,6,0)
(32,3,0)
(4,32,0)
(45,3,0)
(28,56,0)
(2,23,0)
(50,6,0)
(36,29,0)
(63,60,0)
(37,41,1)
(32,3,1)
(24,47,1)
(48,19,1)
(3,16,1)
(8,20,1)
(4,43,1)
(9,17,1)
(10,29,1)
(44,40,1)
(29,36,1)
(21,42,1)
(52,18,1)
(34,40,1)
(20,28,1)
(30,4,1)
(44,29,1)
(42,38,1)
(1,57,1)
(52,33,1)
(16,45,1)
(39,25,1)
(13,10,1)
(38,29,1)
(36,44,1)
(11,65,1)
(44,58,1)
(17,6,1)
(28,56,1)
(27,1,1)
(55,30,1)
(25,49,1)
(53,50,1)
(41,5,1)
(6,48,1)
(47,29,1)
(33,8,1)
(65,38,1)
(62,46,1)
(50,64,1)
(17,61,1)
(46,37,1)
(61,53,1)
(3,29,1)
(19,28,1)
(56,14,1)
(49,24,1)
(22,35,1)
(35,21,1)
(38,13,1)
(49,47,1)
(5,35,1)
(5,22,1)
(53,6,1)
(14,34,1)
(63,11,1)
(42,63,1)
(4,32,1)
(64,17,1)
(35,29,1)
(1,56,1)
(50,6,1)
(58,52,1)
(26,0,1)
(45,39,1)
(36,51,1)
(57,55,1)
(47,62,1)
(57,56,1)
(28,27,1)
(40,26,1)
(63,11,2)
(21,28,2)
(33,28,2)
(36,28,2)
(36,51,2)
(36,44,2)
(4,28,2)
(49,28,2)
(17,17,2)
(1,28,2)
(28,28,2)
(47,28,2)
(50,17,2)
(5,28,2)
(3,28,2)
(58,52,2)
(53,17,2)
(61,17,2)
(58,28,2)
(24,28,2)
(29,28,2)
(62,28,2)
(35,29,2)
(32,28,2)
(44,58,2)
(4,32,2)
(52,18,2)
(4,43,2)
(39,28,2)
(57,56,2)
(8,28,2)
(37,28,2)
(22,28,2)
(41,28,2)
(38,28,2)
(30,28,2)
(52,28,2)
(44,28,2)
(25,28,2)
(45,28,2)
(55,28,2)
(10,28,2)
(50,6,2)
(28,56,2)
(35,28,2)
(64,17,2)
(17,6,2)
(47,29,2)
(13,28,2)
(32,3,2)
(11,38,2)
(44,29,2)
(65,38,2)
(5,35,2)
(16,28,2)
(20,28,2)
(30,4,2)
(38,29,2)
(44,40,2)
(63,38,2)
(46,28,2)
(27,28,2)
(57,28,2)
(49,47,2)
(29,36,2)
(3,29,2)
(42,28,2)
-----------------------------------
(0,data)
(1,i)
(2,data)
(3,data[0])
(4,(twoIntsStruct *)
(5,data[0].intOne)
(6,j = 0)
(7,j)
(8,data)
(9,RET)
(10,data)
(11,-1)
(12,if (data == NULL)
(13,NULL)
(14,0)
(15,for(i = 0; i < 1; i++)
(16,0)
(17,j < 1)
(18,struct _twoIntsStruct)
(19,j)
(20,data)
(21,0)
(22,intOne)
(23,)
(24,intTwo)
(25,0)
(26,NULL)
(27,1)
(28,i < 1)
(29,data = (struct _twoIntsStruct *)
(30,printStructLine((twoIntsStruct *)
(31,i)
(32,&data[0])
(33,100)
(34,i)
(35,data[0])
(36,(struct _twoIntsStruct *)
(37,data[0].intOne = 0)
(38,data == NULL)
(39,data[0].intTwo = 0)
(40,data = NULL)
(41,0)
(42,data)
(43,twoIntsStruct *)
(44,realloc(data, 100*sizeof(struct _twoIntsStruct)
(45,data)
(46,data)
(47,data[0])
(48,0)
(49,data[0].intTwo)
(50,j++)
(51,struct _twoIntsStruct *)
(52,sizeof(struct _twoIntsStruct)
(53,j)
(54,)
(55,i)
(56,i = 0)
(57,i++)
(58,100*sizeof(struct _twoIntsStruct)
(59,for(j = 0; j < 1; j++)
(60,)
(61,1)
(62,0)
(63,exit(-1)
(64,j)
(65,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
