-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_11_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
70,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,71,73
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_11_bad(){    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_11_bad()
CWE401_Memory_Leak__int_calloc_11_bad
{    int * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,10,0)
(35,7,0)
(11,15,0)
(8,35,0)
(31,35,0)
(30,7,0)
(25,23,0)
(32,33,0)
(5,35,0)
(7,30,0)
(16,7,0)
(30,36,0)
(35,5,0)
(23,7,0)
(28,30,0)
(24,4,0)
(5,10,0)
(20,34,0)
(29,2,0)
(14,4,0)
(34,10,0)
(27,3,0)
(9,33,0)
(36,30,0)
(4,34,0)
(35,34,0)
(30,28,0)
(15,28,0)
(33,9,0)
(9,18,0)
(1,3,0)
(22,23,0)
(7,10,0)
(19,2,0)
(28,15,0)
(13,2,0)
(6,28,0)
(4,7,0)
(3,2,0)
(9,33,1)
(34,20,1)
(14,9,1)
(35,31,1)
(15,11,1)
(26,12,1)
(4,24,1)
(4,7,1)
(33,32,1)
(7,30,1)
(30,36,1)
(11,6,1)
(5,35,1)
(8,34,1)
(35,7,1)
(16,12,1)
(20,4,1)
(24,14,1)
(30,28,1)
(31,8,1)
(23,22,1)
(3,1,1)
(35,34,1)
(28,15,1)
(12,3,1)
(32,23,1)
(21,26,1)
(22,25,1)
(1,27,1)
(14,23,1)
(25,7,1)
(23,7,1)
(6,16,1)
(26,5,1)
(25,12,2)
(7,30,2)
(28,12,2)
(23,7,2)
(35,7,2)
(24,12,2)
(4,12,2)
(30,12,2)
(22,12,2)
(20,12,2)
(4,7,2)
(14,12,2)
(6,12,2)
(15,12,2)
(11,12,2)
(8,12,2)
(34,12,2)
(28,15,2)
(31,12,2)
(35,34,2)
(5,35,2)
(33,23,2)
(23,12,2)
(35,12,2)
(7,12,2)
(5,12,2)
(32,23,2)
(9,23,2)
(30,28,2)
(30,36,2)
(9,33,2)
(16,12,2)
-----------------------------------
(0, sizeof(int)
(1,NULL)
(2,)
(3,data = NULL)
(4,data[0])
(5,printIntLine(data[0])
(6,100)
(7,data = (int *)
(8,data)
(9,exit(-1)
(10,)
(11,int)
(12,globalReturnsTrue()
(13,if(globalReturnsTrue()
(14,data)
(15,sizeof(int)
(16,data)
(17,if (data == NULL)
(18,)
(19,data)
(20,5)
(21,RET)
(22,NULL)
(23,data == NULL)
(24,0)
(25,data)
(26,globalReturnsTrue()
(27,data)
(28,calloc(100, sizeof(int)
(29,if(globalReturnsTrue()
(30,(int *)
(31,0)
(32,1)
(33,-1)
(34,data[0] = 5)
(35,data[0])
(36,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
