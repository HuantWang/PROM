-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_15_bad()
{
    switch(6)
    {
    case 6:
    {
        char * data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (char *)realloc(data, (130000)*sizeof(char));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            strcpy(data, "New String");
            printLine(data);
            free(data);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,7,10,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105,106,107,111,112,113
-----computeFrom-----
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_15_bad(){    switch(6)    {    case 6:    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_char_15_bad()
CWE401_Memory_Leak__malloc_realloc_char_15_bad
{    switch(6)    {    case 6:    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(28,38,0)
(13,40,0)
(38,46,0)
(15,28,0)
(15,54,0)
(53,40,0)
(52,37,0)
(26,40,0)
(22,12,0)
(56,28,0)
(25,13,0)
(24,44,0)
(55,39,0)
(3,54,0)
(31,12,0)
(1,27,0)
(46,30,0)
(29,20,0)
(6,20,0)
(44,55,0)
(20,14,0)
(29,21,0)
(38,28,0)
(42,40,0)
(37,30,0)
(43,33,0)
(46,38,0)
(30,46,0)
(53,27,0)
(7,21,0)
(21,7,0)
(47,8,0)
(27,21,0)
(18,53,0)
(28,40,0)
(34,12,0)
(3,28,0)
(23,12,0)
(21,27,0)
(20,29,0)
(21,29,0)
(19,53,0)
(36,30,0)
(49,5,0)
(13,27,0)
(40,12,0)
(14,20,0)
(45,46,0)
(50,11,0)
(4,14,0)
(27,40,0)
(5,12,0)
(51,40,0)
(48,8,0)
(33,28,0)
(46,27,0)
(17,15,0)
(8,27,0)
(10,41,0)
(11,28,0)
(16,38,0)
(30,37,0)
(32,15,0)
(38,16,0)
(55,44,0)
(2,11,0)
(9,3,0)
(33,54,0)
(46,30,1)
(9,33,1)
(22,11,1)
(38,46,1)
(5,49,1)
(1,35,1)
(30,37,1)
(3,28,1)
(45,56,1)
(13,27,1)
(55,44,1)
(36,45,1)
(48,27,1)
(2,28,1)
(32,17,1)
(47,48,1)
(18,55,1)
(11,28,1)
(37,52,1)
(38,16,1)
(0,34,1)
(52,36,1)
(33,43,1)
(0,22,1)
(3,9,1)
(21,7,1)
(6,1,1)
(43,15,1)
(53,19,1)
(28,38,1)
(17,11,1)
(13,25,1)
(19,18,1)
(4,6,1)
(34,5,1)
(53,27,1)
(56,13,1)
(15,32,1)
(33,28,1)
(8,47,1)
(14,4,1)
(24,8,1)
(25,53,1)
(29,20,1)
(27,21,1)
(50,2,1)
(8,27,1)
(21,29,1)
(15,28,1)
(22,3,1)
(11,50,1)
(18,8,1)
(20,14,1)
(44,24,1)
(49,35,1)
(46,27,1)
(18,35,2)
(30,35,2)
(29,20,2)
(22,35,2)
(28,35,2)
(52,35,2)
(8,27,2)
(8,35,2)
(30,37,2)
(14,35,2)
(36,35,2)
(13,35,2)
(46,27,2)
(6,35,2)
(34,35,2)
(48,35,2)
(20,35,2)
(21,7,2)
(13,27,2)
(15,28,2)
(28,38,2)
(27,35,2)
(11,28,2)
(21,29,2)
(56,35,2)
(27,21,2)
(2,35,2)
(3,28,2)
(24,8,2)
(44,8,2)
(20,14,2)
(5,35,2)
(37,35,2)
(55,44,2)
(53,27,2)
(32,11,2)
(38,46,2)
(38,35,2)
(33,11,2)
(9,11,2)
(15,11,2)
(4,35,2)
(46,30,2)
(21,35,2)
(50,35,2)
(38,16,2)
(55,8,2)
(45,35,2)
(43,11,2)
(11,35,2)
(53,35,2)
(33,28,2)
(17,11,2)
(3,11,2)
(47,35,2)
(25,35,2)
(1,35,2)
(49,35,2)
(29,35,2)
(46,35,2)
(19,35,2)
-----------------------------------
(0,RET)
(1,data)
(2,data)
(3,free(data)
(4,char)
(5,printLine("Benign, fixed string")
(6,100)
(7,char *)
(8,data == NULL)
(9,data)
(10,switch(6)
(11,data != NULL)
(12,)
(13,printLine(data)
(14,sizeof(char)
(15,strcpy(data, "New String")
(16,char *)
(17,data)
(18,data)
(19,"A String")
(20,100*sizeof(char)
(21,(char *)
(22,break;)
(23,default:)
(24,1)
(25,data)
(26,if (data == NULL)
(27,* data = (char *)
(28,data = (char *)
(29,malloc(100*sizeof(char)
(30,(130000)
(31,case 6:)
(32,"New String")
(33,printLine(data)
(34,break;)
(35,6)
(36,130000)
(37,sizeof(char)
(38,(char *)
(39,)
(40,)
(41,)
(42,if (data != NULL)
(43,data)
(44,-1)
(45,data)
(46,realloc(data, (130000)
(47,NULL)
(48,data)
(49,"Benign, fixed string")
(50,NULL)
(51,data)
(52,char)
(53,strcpy(data, "A String")
(54,)
(55,exit(-1)
(56,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
