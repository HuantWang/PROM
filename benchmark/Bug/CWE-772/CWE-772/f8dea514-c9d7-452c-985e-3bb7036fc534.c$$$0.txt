-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_01_bad()
{
    {
        int * data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (int *)realloc(data, (130000)*sizeof(int));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            data[0] = 10;
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
7,8
8,9
8,10
10,11
10,12
10,13
13,14
14,15
14,16
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
24,25
25,26
25,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
43,45
44,45
48,49
49,50
49,51
50,51
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
63,64
65,66
65,67
65,68
66,67
68,69
70,71
70,72
71,72
73,74
74,75
74,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
83,85
83,86
84,85
85,86
85,87
86,87
86,88
87,88
91,92
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,9,11,12,16,18,21,23,26,27,31,33,38,40,45,46,47,51,54,55,59,62,64,67,69,72,75,76,80,82,88,89,90,94,97,98,102,104
-----computeFrom-----
22,23
22,24
29,30
29,31
42,43
42,44
57,58
57,59
70,71
70,72
78,79
78,80
85,86
85,87
-----guardedBy-----
80,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_01_bad(){    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_01_bad()
CWE401_Memory_Leak__malloc_realloc_int_01_bad
{    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }}
{        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(42,33,0)
(45,13,0)
(9,15,0)
(24,27,0)
(32,39,0)
(29,26,0)
(25,30,0)
(36,45,0)
(50,18,0)
(21,22,0)
(3,30,0)
(45,19,0)
(35,33,0)
(29,0,0)
(2,43,0)
(27,26,0)
(3,15,0)
(53,32,0)
(11,55,0)
(27,43,0)
(10,48,0)
(43,2,0)
(17,25,0)
(4,24,0)
(48,26,0)
(37,22,0)
(27,24,0)
(0,29,0)
(25,22,0)
(45,26,0)
(52,29,0)
(12,27,0)
(46,38,0)
(47,37,0)
(51,3,0)
(13,32,0)
(26,29,0)
(34,43,0)
(22,15,0)
(30,24,0)
(26,32,0)
(5,48,0)
(43,27,0)
(55,26,0)
(42,0,0)
(44,13,0)
(24,4,0)
(24,30,0)
(29,52,0)
(16,55,0)
(9,37,0)
(30,32,0)
(18,50,0)
(19,45,0)
(6,32,0)
(38,30,0)
(41,30,0)
(14,2,0)
(37,13,0)
(7,37,0)
(50,20,0)
(23,25,0)
(37,9,0)
(1,42,0)
(48,13,0)
(19,32,0)
(33,42,0)
(40,26,0)
(0,42,0)
(37,30,0)
(31,18,0)
(49,45,0)
(54,38,0)
(8,32,0)
(55,26,1)
(9,37,1)
(25,30,1)
(30,24,1)
(37,30,1)
(44,48,1)
(24,4,1)
(7,47,1)
(37,7,1)
(21,25,1)
(55,11,1)
(3,30,1)
(28,3,1)
(37,13,1)
(23,17,1)
(47,22,1)
(16,26,1)
(41,19,1)
(45,13,1)
(14,34,1)
(38,30,1)
(38,54,1)
(10,5,1)
(5,55,1)
(22,21,1)
(46,30,1)
(12,41,1)
(49,13,1)
(5,50,1)
(13,44,1)
(36,49,1)
(29,0,1)
(33,35,1)
(17,38,1)
(54,46,1)
(50,18,1)
(45,26,1)
(31,55,1)
(35,1,1)
(43,2,1)
(18,31,1)
(34,12,1)
(42,33,1)
(24,27,1)
(45,36,1)
(0,42,1)
(26,29,1)
(48,26,1)
(29,52,1)
(3,51,1)
(2,14,1)
(51,9,1)
(48,10,1)
(11,16,1)
(25,23,1)
(37,22,1)
(27,26,1)
(19,45,1)
(28,38,1)
(1,40,1)
(27,43,1)
(0,42,2)
(25,30,2)
(24,27,2)
(30,24,2)
(26,29,2)
(9,38,2)
(38,30,2)
(42,33,2)
(47,38,2)
(27,43,2)
(27,26,2)
(37,22,2)
(9,37,2)
(37,30,2)
(17,38,2)
(55,26,2)
(29,52,2)
(23,38,2)
(19,45,2)
(45,26,2)
(7,38,2)
(3,38,2)
(50,55,2)
(51,38,2)
(37,38,2)
(24,4,2)
(22,38,2)
(43,2,2)
(45,13,2)
(37,13,2)
(48,26,2)
(50,18,2)
(29,0,2)
(31,55,2)
(3,30,2)
(25,38,2)
(21,38,2)
(18,55,2)
-----------------------------------
(0,malloc(100*sizeof(int)
(1,100)
(2,sizeof(int)
(3,free(data)
(4,int *)
(5,data)
(6,if (data == NULL)
(7,0)
(8,data)
(9,printIntLine(data[0])
(10,0)
(11,NULL)
(12,data)
(13,data[0] = 5)
(14,int)
(15,)
(16,data)
(17,data)
(18,-1)
(19,printIntLine(data[0])
(20,)
(21,10)
(22,data[0] = 10)
(23,0)
(24,(int *)
(25,data[0])
(26,* data = (int *)
(27,realloc(data, (130000)
(28,RET)
(29,(int *)
(30,data = (int *)
(31,1)
(32,)
(33,sizeof(int)
(34,130000)
(35,int)
(36,0)
(37,data[0])
(38,data != NULL)
(39,)
(40,data)
(41,data)
(42,100*sizeof(int)
(43,(130000)
(44,5)
(45,data[0])
(46,data)
(47,data)
(48,data[0])
(49,data)
(50,exit(-1)
(51,data)
(52,int *)
(53,if (data != NULL)
(54,NULL)
(55,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
