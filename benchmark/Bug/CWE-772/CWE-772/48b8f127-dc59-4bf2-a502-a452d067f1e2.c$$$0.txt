-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_10_bad()
{
    int * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,59,60,61,65,68,69,72,74
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_10_bad(){    int * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_10_bad()
CWE401_Memory_Leak__int_realloc_10_bad
{    int * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,5,0)
(31,19,0)
(24,3,0)
(27,35,0)
(1,29,0)
(30,31,0)
(6,13,0)
(16,12,0)
(21,5,0)
(26,31,0)
(29,34,0)
(10,21,0)
(19,31,0)
(5,26,0)
(12,35,0)
(0,13,0)
(37,3,0)
(14,26,0)
(33,8,0)
(26,5,0)
(20,4,0)
(8,2,0)
(30,3,0)
(13,37,0)
(2,22,0)
(35,3,0)
(37,13,0)
(12,30,0)
(18,34,0)
(13,30,0)
(13,35,0)
(31,26,0)
(26,29,0)
(31,30,0)
(32,34,0)
(4,30,0)
(5,21,0)
(7,30,0)
(11,34,0)
(28,4,0)
(15,29,0)
(2,8,0)
(36,12,0)
(5,21,1)
(37,13,1)
(10,17,1)
(36,4,1)
(26,5,1)
(0,6,1)
(7,9,1)
(4,30,1)
(25,23,1)
(4,28,1)
(31,19,1)
(21,10,1)
(16,36,1)
(9,29,1)
(31,26,1)
(12,30,1)
(30,31,1)
(29,1,1)
(13,30,1)
(23,37,1)
(36,2,1)
(27,12,1)
(6,35,1)
(2,8,1)
(26,29,1)
(20,30,1)
(14,7,1)
(17,14,1)
(23,9,1)
(8,33,1)
(33,4,1)
(28,20,1)
(12,16,1)
(1,15,1)
(35,27,1)
(13,35,1)
(13,0,1)
(36,9,2)
(16,9,2)
(26,5,2)
(12,30,2)
(21,9,2)
(4,30,2)
(20,9,2)
(26,9,2)
(27,9,2)
(31,26,2)
(13,35,2)
(37,13,2)
(2,8,2)
(4,9,2)
(28,9,2)
(5,9,2)
(31,19,2)
(30,31,2)
(12,9,2)
(33,4,2)
(31,9,2)
(13,9,2)
(14,9,2)
(7,9,2)
(2,4,2)
(17,9,2)
(26,29,2)
(35,9,2)
(30,9,2)
(5,21,2)
(8,4,2)
(10,9,2)
(0,9,2)
(13,30,2)
(6,9,2)
(37,9,2)
-----------------------------------
(0,0)
(1,NULL)
(2,exit(-1)
(3,)
(4,data == NULL)
(5,100*sizeof(int)
(6,data)
(7,data)
(8,-1)
(9,globalTrue)
(10,int)
(11,data)
(12,data[0])
(13,data[0])
(14,data)
(15,data)
(16,0)
(17,100)
(18,if(globalTrue)
(19,int *)
(20,data)
(21,sizeof(int)
(22,)
(23,globalTrue)
(24,if (data == NULL)
(25,RET)
(26,realloc(data, 100*sizeof(int)
(27,5)
(28,NULL)
(29,data = NULL)
(30,data = (int *)
(31,(int *)
(32,if(globalTrue)
(33,1)
(34,)
(35,data[0] = 5)
(36,data)
(37,printIntLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
