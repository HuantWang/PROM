-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_44_bad()
{
    int64_t * data;
    /* define a function pointer */
    void (*funcPtr) (int64_t *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int64_t *)calloc(100, sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
16,17
16,18
16,19
17,18
17,19
20,21
20,22
21,22
23,24
23,25
26,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
45,47
45,48
46,47
49,50
50,51
50,52
51,52
54,55
54,56
55,56
55,57
56,57
58,59
60,61
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
69,70
69,71
70,71
74,75
75,76
75,77
76,77
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,9,11,12,15,18,19,22,24,25,28,32,34,38,42,44,47,48,52,53,57,59,64,66,71,72,73,77,80,81,85,87
-----computeFrom-----
30,31
30,32
36,37
36,38
55,56
55,57
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_44_bad(){    int64_t * data;    /* define a function pointer */    void (*funcPtr) (int64_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)calloc(100, sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__int64_t_calloc_44_bad()
CWE401_Memory_Leak__int64_t_calloc_44_bad
{    int64_t * data;    /* define a function pointer */    void (*funcPtr) (int64_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)calloc(100, sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    /* use the function pointer */    funcPtr(data);}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
void (*funcPtr) (int64_t *) = badSink;
void (*funcPtr) (int64_t *) = badSink;
void
(*funcPtr) (int64_t *) = badSink
*funcPtr
*
funcPtr
int64_t *
int64_t
int64_t
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(20,15,0)
(2,25,0)
(17,7,0)
(7,15,0)
(23,1,0)
(8,20,0)
(30,15,0)
(28,9,0)
(26,15,0)
(2,31,0)
(4,7,0)
(11,9,0)
(21,20,0)
(1,23,0)
(24,15,0)
(1,15,0)
(25,2,0)
(10,25,0)
(13,18,0)
(22,15,0)
(4,15,0)
(29,23,0)
(11,3,0)
(23,7,0)
(33,18,0)
(25,10,0)
(9,11,0)
(7,25,0)
(27,4,0)
(31,2,0)
(5,17,0)
(18,15,0)
(6,23,0)
(16,7,0)
(25,7,0)
(0,17,0)
(12,31,0)
(14,2,0)
(28,17,1)
(27,1,1)
(0,7,1)
(6,30,1)
(32,4,1)
(17,5,1)
(11,9,1)
(21,8,1)
(9,28,1)
(2,31,1)
(33,20,1)
(14,16,1)
(25,2,1)
(4,7,1)
(30,17,1)
(5,0,1)
(4,27,1)
(7,25,1)
(16,18,1)
(12,14,1)
(18,13,1)
(23,29,1)
(13,33,1)
(25,10,1)
(30,11,1)
(1,23,1)
(31,12,1)
(23,7,1)
(29,6,1)
(17,7,1)
(20,21,1)
(1,23,2)
(7,25,2)
(17,7,2)
(28,17,2)
(23,7,2)
(11,9,2)
(2,31,2)
(4,7,2)
(11,17,2)
(9,17,2)
(25,2,2)
(25,10,2)
-----------------------------------
(0,data)
(1,printLongLongLine(data[0])
(2,calloc(100, sizeof(int64_t)
(3,)
(4,funcPtr(data)
(5,NULL)
(6,data)
(7,data = (int64_t *)
(8,funcPtr)
(9,-1)
(10,int64_t *)
(11,exit(-1)
(12,int64_t)
(13,NULL)
(14,100)
(15,)
(16,data)
(17,data == NULL)
(18,data = NULL)
(19, sizeof(int64_t)
(20,(*funcPtr)
(21,badSink)
(22,funcPtr)
(23,data[0])
(24,data)
(25,(int64_t *)
(26,if (data == NULL)
(27,data)
(28,1)
(29,0)
(30,L)
(31,sizeof(int64_t)
(32,RET)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
