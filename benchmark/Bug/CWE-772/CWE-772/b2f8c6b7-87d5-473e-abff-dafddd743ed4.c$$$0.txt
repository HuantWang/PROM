-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_05_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,70
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_05_bad(){    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_05_bad()
CWE401_Memory_Leak__wchar_t_malloc_05_bad
{    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(16,25,0)
(20,6,0)
(23,14,0)
(13,18,0)
(22,3,0)
(6,1,0)
(18,3,0)
(29,2,0)
(0,9,0)
(4,16,0)
(29,26,0)
(11,3,0)
(17,14,0)
(21,25,0)
(28,3,0)
(26,29,0)
(16,29,0)
(14,16,0)
(2,6,0)
(1,6,0)
(9,15,0)
(6,2,0)
(5,16,0)
(2,29,0)
(29,16,0)
(15,9,0)
(19,18,0)
(5,25,0)
(15,12,0)
(8,5,0)
(27,1,0)
(19,13,1)
(24,7,1)
(6,1,1)
(7,18,1)
(14,17,1)
(18,19,1)
(4,7,1)
(17,23,1)
(14,16,1)
(9,0,1)
(0,14,1)
(24,5,1)
(8,15,1)
(29,26,1)
(27,20,1)
(15,9,1)
(2,6,1)
(20,4,1)
(10,24,1)
(1,27,1)
(16,29,1)
(23,16,1)
(29,2,1)
(8,14,1)
(5,16,1)
(5,8,1)
(2,6,2)
(14,7,2)
(8,7,2)
(29,7,2)
(4,7,2)
(6,1,2)
(29,2,2)
(14,16,2)
(29,26,2)
(1,7,2)
(20,7,2)
(6,7,2)
(15,14,2)
(17,7,2)
(0,14,2)
(15,9,2)
(5,7,2)
(23,7,2)
(2,7,2)
(27,7,2)
(5,16,2)
(16,7,2)
(16,29,2)
(9,14,2)
-----------------------------------
(0,1)
(1,sizeof(wchar_t)
(2,malloc(100*sizeof(wchar_t)
(3,)
(4,data)
(5,printWLine(data)
(6,100*sizeof(wchar_t)
(7,staticTrue)
(8,data)
(9,-1)
(10,RET)
(11,if(staticTrue)
(12,)
(13,data)
(14,data == NULL)
(15,exit(-1)
(16,data = (wchar_t *)
(17,NULL)
(18,data = NULL)
(19,NULL)
(20,100)
(21,if (data == NULL)
(22,data)
(23,data)
(24,staticTrue)
(25,)
(26,wchar_t *)
(27,wchar_t)
(28,if(staticTrue)
(29,(wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
