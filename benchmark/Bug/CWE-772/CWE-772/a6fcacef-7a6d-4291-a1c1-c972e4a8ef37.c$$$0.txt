-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_07_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
98,99
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,96,97,99
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_07_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_07_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_07_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(8,51,0)
(14,16,0)
(44,20,0)
(2,20,0)
(16,14,0)
(31,0,0)
(43,10,0)
(40,17,0)
(5,28,0)
(28,5,0)
(48,12,0)
(51,12,0)
(11,34,0)
(53,13,0)
(19,3,0)
(27,25,0)
(45,24,0)
(1,45,0)
(8,34,0)
(24,26,0)
(22,39,0)
(47,8,0)
(1,50,0)
(34,17,0)
(25,51,0)
(18,3,0)
(33,28,0)
(9,13,0)
(36,44,0)
(28,19,0)
(4,3,0)
(6,25,0)
(37,24,0)
(33,12,0)
(30,50,0)
(7,45,0)
(42,44,0)
(19,28,0)
(3,51,0)
(3,19,0)
(38,26,0)
(45,14,0)
(15,26,0)
(29,22,0)
(20,10,0)
(49,51,0)
(17,12,0)
(14,51,0)
(32,1,0)
(28,33,0)
(52,24,0)
(20,44,0)
(10,12,0)
(50,30,0)
(44,51,0)
(14,45,0)
(51,14,0)
(39,46,0)
(34,8,0)
(50,1,0)
(21,8,0)
(23,0,0)
(45,1,0)
(35,26,0)
(39,22,0)
(49,13,1)
(7,49,1)
(44,36,1)
(17,40,1)
(31,23,1)
(47,10,1)
(2,44,1)
(40,34,1)
(45,24,1)
(28,5,1)
(10,43,1)
(25,27,1)
(9,24,1)
(4,17,1)
(20,2,1)
(3,51,1)
(27,6,1)
(50,30,1)
(44,51,1)
(36,42,1)
(53,9,1)
(42,39,1)
(22,29,1)
(18,4,1)
(3,18,1)
(39,22,1)
(34,8,1)
(21,47,1)
(8,51,1)
(0,31,1)
(23,33,1)
(32,7,1)
(28,19,1)
(23,13,1)
(51,14,1)
(34,11,1)
(14,45,1)
(52,37,1)
(13,53,1)
(6,51,1)
(19,3,1)
(50,32,1)
(24,52,1)
(45,1,1)
(33,28,1)
(20,44,1)
(29,25,1)
(8,21,1)
(41,0,1)
(25,51,1)
(14,16,1)
(42,25,1)
(1,50,1)
(11,8,1)
(43,20,1)
(29,25,2)
(20,44,2)
(4,13,2)
(50,30,2)
(21,13,2)
(28,19,2)
(20,13,2)
(3,13,2)
(27,13,2)
(14,13,2)
(2,13,2)
(11,13,2)
(49,13,2)
(19,13,2)
(36,13,2)
(14,45,2)
(18,13,2)
(1,13,2)
(34,13,2)
(32,13,2)
(33,13,2)
(22,25,2)
(45,24,2)
(42,13,2)
(25,13,2)
(44,13,2)
(40,13,2)
(17,13,2)
(14,16,2)
(51,13,2)
(43,13,2)
(45,1,2)
(8,51,2)
(10,13,2)
(39,22,2)
(3,51,2)
(8,13,2)
(28,5,2)
(47,13,2)
(34,8,2)
(50,13,2)
(44,51,2)
(45,13,2)
(7,13,2)
(1,50,2)
(33,28,2)
(28,13,2)
(6,13,2)
(19,3,2)
(51,14,2)
(39,25,2)
(25,51,2)
-----------------------------------
(0,staticFive==5)
(1,100*sizeof(struct _twoIntsStruct)
(2,intOne)
(3,data[0])
(4,data)
(5,twoIntsStruct *)
(6,data)
(7,data)
(8,data[0])
(9,staticFive)
(10,data[0].intOne = 0)
(11,intTwo)
(12,)
(13,staticFive==5)
(14,(struct _twoIntsStruct *)
(15,if(staticFive==5)
(16,struct _twoIntsStruct *)
(17,data[0].intTwo = 0)
(18,0)
(19,&data[0])
(20,data[0].intOne)
(21,0)
(22,-1)
(23,staticFive)
(24,data = NULL)
(25,data == NULL)
(26,)
(27,NULL)
(28,(twoIntsStruct *)
(29,1)
(30,struct _twoIntsStruct)
(31,5)
(32,100)
(33,printStructLine((twoIntsStruct *)
(34,data[0].intTwo)
(35,data)
(36,0)
(37,data)
(38,if(staticFive==5)
(39,exit(-1)
(40,0)
(41,RET)
(42,data)
(43,0)
(44,data[0])
(45,realloc(data, 100*sizeof(struct _twoIntsStruct)
(46,)
(47,data)
(48,if (data == NULL)
(49,data)
(50,sizeof(struct _twoIntsStruct)
(51,data = (struct _twoIntsStruct *)
(52,NULL)
(53,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
