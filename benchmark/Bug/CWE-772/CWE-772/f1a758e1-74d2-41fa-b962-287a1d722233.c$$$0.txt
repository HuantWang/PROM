-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_16_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
88,89
88,90
90,91
90,92
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,81,85,86,87,89,91,92
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_16_bad(){    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_16_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_16_bad
{    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(27,25,0)
(45,51,0)
(32,37,0)
(7,4,0)
(41,26,0)
(49,22,0)
(6,41,0)
(0,3,0)
(22,43,0)
(5,50,0)
(31,15,0)
(33,35,0)
(37,25,0)
(35,37,0)
(2,32,0)
(32,15,0)
(34,50,0)
(18,25,0)
(28,37,0)
(17,0,0)
(9,30,0)
(26,51,0)
(3,44,0)
(38,34,0)
(16,34,0)
(30,37,0)
(21,27,0)
(39,50,0)
(23,35,0)
(25,37,0)
(22,33,0)
(11,32,0)
(36,27,0)
(14,21,0)
(22,49,0)
(41,30,0)
(25,27,0)
(15,46,0)
(33,22,0)
(8,48,0)
(25,18,0)
(43,22,0)
(46,51,0)
(1,51,0)
(27,21,0)
(43,51,0)
(30,41,0)
(47,50,0)
(4,37,0)
(42,30,0)
(21,14,0)
(12,35,0)
(20,4,0)
(15,32,0)
(35,33,0)
(3,0,0)
(19,26,0)
(37,51,0)
(13,46,0)
(22,33,1)
(41,6,1)
(30,42,1)
(32,37,1)
(46,13,1)
(31,32,1)
(26,19,1)
(36,28,1)
(29,8,1)
(11,4,1)
(40,10,1)
(30,37,1)
(32,2,1)
(23,12,1)
(3,0,1)
(9,46,1)
(33,35,1)
(45,43,1)
(15,31,1)
(22,49,1)
(12,26,1)
(35,23,1)
(37,25,1)
(41,30,1)
(42,9,1)
(15,32,1)
(19,41,1)
(11,3,1)
(21,36,1)
(28,10,1)
(25,27,1)
(20,7,1)
(43,22,1)
(27,21,1)
(25,18,1)
(7,37,1)
(29,40,1)
(4,37,1)
(40,45,1)
(6,30,1)
(0,17,1)
(2,11,1)
(17,4,1)
(4,20,1)
(8,40,1)
(35,37,1)
(34,16,1)
(21,14,1)
(10,34,1)
(13,15,1)
(16,38,1)
(7,10,2)
(43,22,2)
(30,37,2)
(22,10,2)
(11,10,2)
(23,10,2)
(27,21,2)
(27,10,2)
(20,10,2)
(25,18,2)
(35,37,2)
(33,10,2)
(22,49,2)
(13,10,2)
(12,10,2)
(31,10,2)
(2,10,2)
(37,10,2)
(36,10,2)
(17,4,2)
(26,10,2)
(21,14,2)
(4,37,2)
(22,33,2)
(45,10,2)
(37,25,2)
(3,0,2)
(4,10,2)
(0,4,2)
(15,10,2)
(6,10,2)
(41,30,2)
(9,10,2)
(46,10,2)
(41,10,2)
(25,27,2)
(15,32,2)
(25,10,2)
(33,35,2)
(35,10,2)
(43,10,2)
(42,10,2)
(28,10,2)
(8,40,2)
(32,10,2)
(19,10,2)
(3,4,2)
(30,10,2)
(32,37,2)
(21,10,2)
-----------------------------------
(0,-1)
(1,if (data == NULL)
(2,0)
(3,exit(-1)
(4,data == NULL)
(5,while(1)
(6,intTwo)
(7,data)
(8,break;)
(9,data)
(10,1)
(11,data)
(12,data)
(13,0)
(14,struct _twoIntsStruct)
(15,data[0].intOne)
(16,NULL)
(17,1)
(18,struct _twoIntsStruct *)
(19,0)
(20,NULL)
(21,sizeof(struct _twoIntsStruct)
(22,(twoIntsStruct *)
(23,0)
(24, sizeof(struct _twoIntsStruct)
(25,(struct _twoIntsStruct *)
(26,data[0].intTwo = 0)
(27,calloc(100, sizeof(struct _twoIntsStruct)
(28,data)
(29,RET)
(30,data[0])
(31,intOne)
(32,data[0])
(33,&data[0])
(34,data = NULL)
(35,data[0])
(36,100)
(37,data = (struct _twoIntsStruct *)
(38,data)
(39,while(1)
(40,1)
(41,data[0].intTwo)
(42,0)
(43,printStructLine((twoIntsStruct *)
(44,)
(45,break;)
(46,data[0].intOne = 0)
(47,data)
(48,)
(49,twoIntsStruct *)
(50,)
(51,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
