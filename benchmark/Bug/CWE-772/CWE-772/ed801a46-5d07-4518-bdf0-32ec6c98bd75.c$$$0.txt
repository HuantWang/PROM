-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
70,73
71,72
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
88,91
89,90
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,50,51,52,56,59,60,64,67,69,72,74,77,80,81,85,87,93,94,95,99,102,103,107,109
-----computeFrom-----
27,28
27,29
34,35
34,36
47,48
47,49
62,63
62,64
75,76
75,77
83,84
83,85
90,91
90,92
-----guardedBy-----
85,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_08_bad(){    if(staticReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_08_bad()
CWE401_Memory_Leak__malloc_realloc_int_08_bad
{    if(staticReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(staticReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(2,55,0)
(46,44,0)
(37,29,0)
(4,28,0)
(39,4,0)
(56,18,0)
(23,1,0)
(32,13,0)
(16,6,0)
(35,5,0)
(57,38,0)
(24,54,0)
(48,33,0)
(47,13,0)
(3,47,0)
(20,35,0)
(18,25,0)
(10,7,0)
(30,54,0)
(35,28,0)
(17,40,0)
(0,23,0)
(49,35,0)
(12,15,0)
(51,40,0)
(44,9,0)
(36,28,0)
(58,6,0)
(26,5,0)
(18,16,0)
(9,44,0)
(44,46,0)
(22,1,0)
(28,1,0)
(51,23,0)
(19,6,0)
(5,6,0)
(18,5,0)
(23,16,0)
(23,51,0)
(47,46,0)
(25,18,0)
(57,55,0)
(48,28,0)
(29,16,0)
(14,51,0)
(6,50,0)
(1,28,0)
(49,33,0)
(54,28,0)
(15,33,0)
(7,5,0)
(43,18,0)
(40,51,0)
(1,23,0)
(44,16,0)
(1,22,0)
(53,4,0)
(8,16,0)
(25,6,0)
(41,48,0)
(27,35,0)
(4,15,0)
(35,49,0)
(55,57,0)
(28,6,0)
(21,7,0)
(35,15,0)
(11,6,0)
(13,47,0)
(16,44,0)
(42,29,0)
(7,16,0)
(46,47,0)
(31,45,0)
(7,16,1)
(48,41,1)
(27,20,1)
(35,28,1)
(51,40,1)
(39,53,1)
(48,28,1)
(23,51,1)
(40,17,1)
(4,28,1)
(30,28,1)
(23,16,1)
(15,12,1)
(10,29,1)
(0,36,1)
(44,46,1)
(4,39,1)
(44,9,1)
(13,32,1)
(28,1,1)
(18,16,1)
(18,5,1)
(26,7,1)
(1,23,1)
(52,54,1)
(54,28,1)
(3,8,1)
(52,34,1)
(14,0,1)
(43,5,1)
(21,10,1)
(18,56,1)
(35,27,1)
(8,34,1)
(7,21,1)
(24,30,1)
(52,48,1)
(29,42,1)
(57,55,1)
(56,43,1)
(35,15,1)
(49,35,1)
(25,18,1)
(46,47,1)
(55,2,1)
(5,26,1)
(2,29,1)
(36,25,1)
(54,24,1)
(32,3,1)
(53,54,1)
(29,16,1)
(20,15,1)
(10,57,1)
(37,16,1)
(42,37,1)
(12,4,1)
(47,13,1)
(17,14,1)
(1,22,1)
(41,49,1)
(16,44,1)
(35,5,1)
(16,44,2)
(3,34,2)
(1,34,2)
(30,34,2)
(28,34,2)
(57,29,2)
(54,28,2)
(35,5,2)
(24,34,2)
(40,34,2)
(37,34,2)
(29,16,2)
(46,34,2)
(49,35,2)
(7,34,2)
(35,15,2)
(21,34,2)
(28,1,2)
(46,47,2)
(1,22,2)
(25,18,2)
(44,46,2)
(51,34,2)
(32,34,2)
(4,54,2)
(44,9,2)
(23,51,2)
(41,54,2)
(48,28,2)
(35,28,2)
(2,29,2)
(10,34,2)
(8,34,2)
(23,16,2)
(4,28,2)
(26,34,2)
(55,29,2)
(23,34,2)
(16,34,2)
(1,23,2)
(13,34,2)
(47,13,2)
(18,5,2)
(7,16,2)
(15,54,2)
(49,54,2)
(27,54,2)
(54,34,2)
(12,54,2)
(0,34,2)
(42,34,2)
(47,34,2)
(25,34,2)
(35,54,2)
(44,34,2)
(5,34,2)
(36,34,2)
(39,54,2)
(20,54,2)
(43,34,2)
(17,34,2)
(57,55,2)
(18,34,2)
(56,34,2)
(18,16,2)
(53,54,2)
(51,40,2)
(29,34,2)
(48,54,2)
(14,34,2)
-----------------------------------
(0,data)
(1,(int *)
(2,1)
(3,100)
(4,data[0])
(5,data[0] = 5)
(6,)
(7,data[0])
(8,data)
(9,int *)
(10,data)
(11,data)
(12,10)
(13,sizeof(int)
(14,130000)
(15,data[0] = 10)
(16,* data = (int *)
(17,int)
(18,data[0])
(19,if (data != NULL)
(20,data)
(21,0)
(22,int *)
(23,realloc(data, (130000)
(24,NULL)
(25,printIntLine(data[0])
(26,5)
(27,0)
(28,data = (int *)
(29,data == NULL)
(30,data)
(31,if(staticReturnsTrue()
(32,int)
(33,)
(34,staticReturnsTrue()
(35,data[0])
(36,data)
(37,data)
(38,)
(39,0)
(40,sizeof(int)
(41,data)
(42,NULL)
(43,data)
(44,(int *)
(45,)
(46,malloc(100*sizeof(int)
(47,100*sizeof(int)
(48,free(data)
(49,printIntLine(data[0])
(50,)
(51,(130000)
(52,RET)
(53,data)
(54,data != NULL)
(55,-1)
(56,0)
(57,exit(-1)
(58,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
