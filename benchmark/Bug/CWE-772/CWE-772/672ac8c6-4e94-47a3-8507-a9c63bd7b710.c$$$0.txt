-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_14_bad()
{
    char * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_14_bad(){    char * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_14_bad()
CWE401_Memory_Leak__char_malloc_14_bad
{    char * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(35,21,0)
(6,18,0)
(5,3,0)
(17,4,0)
(36,32,0)
(1,21,0)
(33,27,0)
(2,24,0)
(30,22,0)
(22,27,0)
(23,17,0)
(9,12,0)
(24,22,0)
(8,18,0)
(33,22,0)
(16,30,0)
(14,5,0)
(4,17,0)
(19,30,0)
(25,12,0)
(29,3,0)
(7,18,0)
(34,18,0)
(2,5,0)
(20,22,0)
(24,2,0)
(22,24,0)
(4,31,0)
(0,33,0)
(3,5,0)
(28,24,0)
(26,6,0)
(13,32,0)
(24,28,0)
(10,6,0)
(15,27,0)
(21,22,0)
(5,2,0)
(21,27,0)
(1,4,1)
(29,14,1)
(3,29,1)
(10,26,1)
(33,22,1)
(20,12,1)
(25,9,1)
(5,3,1)
(24,28,1)
(17,23,1)
(11,32,1)
(6,10,1)
(2,5,1)
(19,16,1)
(1,30,1)
(30,19,1)
(30,22,1)
(12,25,1)
(16,22,1)
(36,13,1)
(22,24,1)
(9,6,1)
(24,2,1)
(23,30,1)
(14,20,1)
(21,35,1)
(13,33,1)
(35,1,1)
(4,17,1)
(33,0,1)
(0,21,1)
(32,36,1)
(13,12,1)
(21,22,1)
(1,12,2)
(24,2,2)
(30,22,2)
(21,22,2)
(4,17,2)
(4,30,2)
(5,12,2)
(0,12,2)
(20,12,2)
(2,12,2)
(35,12,2)
(23,30,2)
(24,28,2)
(2,5,2)
(16,12,2)
(17,30,2)
(33,22,2)
(22,12,2)
(24,12,2)
(22,24,2)
(30,12,2)
(14,12,2)
(5,3,2)
(29,12,2)
(19,12,2)
(21,12,2)
(33,12,2)
(3,12,2)
-----------------------------------
(0,data)
(1,data)
(2,malloc(100*sizeof(char)
(3,sizeof(char)
(4,exit(-1)
(5,100*sizeof(char)
(6,data = NULL)
(7,if(globalFive==5)
(8,if(globalFive==5)
(9,globalFive)
(10,NULL)
(11,RET)
(12,globalFive==5)
(13,globalFive)
(14,100)
(15,if (data == NULL)
(16,data)
(17,-1)
(18,)
(19,NULL)
(20,data)
(21,strcpy(data, "A String")
(22,data = (char *)
(23,1)
(24,(char *)
(25,5)
(26,data)
(27,)
(28,char *)
(29,char)
(30,data == NULL)
(31,)
(32,globalFive==5)
(33,printLine(data)
(34,data)
(35,"A String")
(36,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
