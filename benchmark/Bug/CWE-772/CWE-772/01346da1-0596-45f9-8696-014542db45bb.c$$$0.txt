-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_16_bad()
{
    int64_t * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
71,72
71,73
73,74
73,75
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,59,60,61,65,68,69,70,72,74,75
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_16_bad(){    int64_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__int64_t_malloc_16_bad()
CWE401_Memory_Leak__int64_t_malloc_16_bad
{    int64_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(3,16,0)
(27,16,0)
(19,9,0)
(26,32,0)
(14,34,0)
(17,34,0)
(14,32,0)
(32,29,0)
(29,34,0)
(31,34,0)
(25,7,0)
(4,9,0)
(20,24,0)
(18,3,0)
(11,34,0)
(7,29,0)
(16,27,0)
(20,23,0)
(3,18,0)
(8,29,0)
(30,28,0)
(16,3,0)
(21,9,0)
(27,28,0)
(28,27,0)
(3,29,0)
(24,20,0)
(10,27,0)
(22,4,0)
(6,1,0)
(12,7,0)
(0,24,0)
(29,3,0)
(35,4,0)
(5,32,0)
(33,9,0)
(32,14,0)
(31,7,1)
(8,13,1)
(6,2,1)
(29,3,1)
(4,35,1)
(2,17,1)
(7,29,1)
(0,7,1)
(13,4,1)
(17,14,1)
(15,6,1)
(28,30,1)
(12,25,1)
(27,28,1)
(25,29,1)
(2,13,1)
(31,20,1)
(32,5,1)
(20,24,1)
(24,0,1)
(15,2,1)
(3,18,1)
(30,10,1)
(7,12,1)
(3,16,1)
(10,8,1)
(35,22,1)
(32,29,1)
(26,31,1)
(16,27,1)
(5,26,1)
(14,32,1)
(16,27,2)
(27,28,2)
(5,13,2)
(6,2,2)
(12,13,2)
(24,7,2)
(7,13,2)
(3,16,2)
(20,24,2)
(29,13,2)
(30,13,2)
(31,13,2)
(25,13,2)
(20,7,2)
(16,13,2)
(7,29,2)
(3,18,2)
(32,13,2)
(3,13,2)
(10,13,2)
(14,13,2)
(32,29,2)
(29,3,2)
(14,32,2)
(26,13,2)
(0,7,2)
(17,13,2)
(28,13,2)
(27,13,2)
(8,13,2)
-----------------------------------
(0,1)
(1,)
(2,1)
(3,(int64_t *)
(4,data = NULL)
(5,0)
(6,break;)
(7,data == NULL)
(8,data)
(9,)
(10,100)
(11,if (data == NULL)
(12,NULL)
(13,1)
(14,printLongLongLine(data[0])
(15,RET)
(16,malloc(100*sizeof(int64_t)
(17,break;)
(18,int64_t *)
(19,data)
(20,exit(-1)
(21,while(1)
(22,data)
(23,)
(24,-1)
(25,data)
(26,data)
(27,100*sizeof(int64_t)
(28,sizeof(int64_t)
(29,data = (int64_t *)
(30,int64_t)
(31,L)
(32,data[0])
(33,while(1)
(34,)
(35,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
