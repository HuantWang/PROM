-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_16_bad()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
66,67
66,68
68,69
68,70
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,62,64,65,67,69,70
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_16_bad(){    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__wchar_t_malloc_16_bad()
CWE401_Memory_Leak__wchar_t_malloc_16_bad
{    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(11,27,0)
(18,2,0)
(32,6,0)
(27,12,0)
(7,2,0)
(20,13,0)
(2,12,0)
(10,23,0)
(7,19,0)
(7,21,0)
(26,6,0)
(24,6,0)
(2,7,0)
(21,7,0)
(0,4,0)
(28,17,0)
(27,2,0)
(13,17,0)
(1,4,0)
(14,15,0)
(5,24,0)
(16,12,0)
(19,17,0)
(19,7,0)
(4,2,0)
(29,24,0)
(23,14,0)
(8,12,0)
(17,13,0)
(9,6,0)
(14,23,0)
(17,19,0)
(25,22,0)
(1,0,1)
(11,14,1)
(24,29,1)
(27,2,1)
(4,1,1)
(30,8,1)
(7,21,1)
(27,11,1)
(25,30,1)
(18,3,1)
(30,3,1)
(31,25,1)
(14,23,1)
(2,7,1)
(11,4,1)
(31,30,1)
(4,2,1)
(13,20,1)
(23,10,1)
(0,2,1)
(17,13,1)
(29,5,1)
(19,17,1)
(20,28,1)
(10,4,1)
(7,19,1)
(8,27,1)
(3,24,1)
(28,18,1)
(17,3,2)
(28,3,2)
(27,2,2)
(10,4,2)
(27,3,2)
(14,4,2)
(2,7,2)
(25,30,2)
(4,2,2)
(19,3,2)
(23,4,2)
(4,3,2)
(14,23,2)
(19,17,2)
(2,3,2)
(8,3,2)
(7,21,2)
(18,3,2)
(7,19,2)
(13,3,2)
(11,3,2)
(20,3,2)
(1,3,2)
(0,3,2)
(7,3,2)
(17,13,2)
-----------------------------------
(0,data)
(1,NULL)
(2,data = (wchar_t *)
(3,1)
(4,data == NULL)
(5,data)
(6,)
(7,(wchar_t *)
(8,break;)
(9,while(1)
(10,1)
(11,data)
(12,)
(13,sizeof(wchar_t)
(14,exit(-1)
(15,)
(16,if (data == NULL)
(17,100*sizeof(wchar_t)
(18,data)
(19,malloc(100*sizeof(wchar_t)
(20,wchar_t)
(21,wchar_t *)
(22,)
(23,-1)
(24,data = NULL)
(25,break;)
(26,data)
(27,printWLine(data)
(28,100)
(29,NULL)
(30,1)
(31,RET)
(32,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
