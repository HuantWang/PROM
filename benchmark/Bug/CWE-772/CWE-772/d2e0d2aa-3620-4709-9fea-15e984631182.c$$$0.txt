-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_15_bad()
{
    int * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
71,72
72,73
72,74
73,74
77,78
77,79
79,80
79,81
79,82
79,83
79,84
79,85
80,81
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,67,68,69,70,74,75,76,78,81,82,83,84,88,89,90
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_15_bad(){    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__int_malloc_15_bad()
CWE401_Memory_Leak__int_malloc_15_bad
{    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(41,46,0)
(5,35,0)
(45,27,0)
(40,29,0)
(9,35,0)
(28,27,0)
(46,41,0)
(2,29,0)
(21,44,0)
(11,27,0)
(25,17,0)
(20,35,0)
(39,29,0)
(3,27,0)
(30,7,0)
(8,43,0)
(7,3,0)
(36,29,0)
(24,8,0)
(3,7,0)
(7,14,0)
(31,15,0)
(4,2,0)
(23,35,0)
(15,48,0)
(42,41,0)
(22,43,0)
(13,17,0)
(7,43,0)
(18,2,0)
(43,27,0)
(46,17,0)
(47,25,0)
(14,41,0)
(10,49,0)
(14,27,0)
(32,49,0)
(26,37,0)
(12,8,0)
(41,14,0)
(44,27,0)
(48,15,0)
(17,46,0)
(48,16,0)
(8,14,0)
(6,7,0)
(41,42,0)
(49,14,0)
(38,27,0)
(17,25,0)
(0,14,0)
(37,35,0)
(1,27,0)
(13,0,1)
(21,19,1)
(31,49,1)
(15,31,1)
(34,20,1)
(45,3,1)
(32,10,1)
(26,33,1)
(10,14,1)
(33,45,1)
(43,22,1)
(41,42,1)
(46,17,1)
(30,43,1)
(0,19,1)
(33,11,1)
(34,9,1)
(8,12,1)
(7,14,1)
(11,44,1)
(7,43,1)
(24,49,1)
(49,32,1)
(19,2,1)
(20,33,1)
(37,26,1)
(47,13,1)
(8,14,1)
(14,41,1)
(12,24,1)
(17,25,1)
(6,30,1)
(2,4,1)
(4,18,1)
(44,21,1)
(9,37,1)
(7,6,1)
(3,7,1)
(41,46,1)
(49,14,1)
(25,47,1)
(24,48,1)
(48,15,1)
(22,8,1)
(24,19,2)
(7,19,2)
(46,19,2)
(25,19,2)
(47,19,2)
(17,19,2)
(13,19,2)
(21,19,2)
(32,19,2)
(3,19,2)
(20,33,2)
(8,19,2)
(12,19,2)
(49,19,2)
(48,15,2)
(7,14,2)
(45,19,2)
(41,46,2)
(22,19,2)
(41,19,2)
(14,41,2)
(46,17,2)
(14,19,2)
(15,49,2)
(41,42,2)
(10,19,2)
(0,19,2)
(37,33,2)
(31,49,2)
(30,19,2)
(6,19,2)
(49,14,2)
(8,14,2)
(48,49,2)
(7,43,2)
(43,19,2)
(11,19,2)
(17,25,2)
(9,33,2)
(3,7,2)
(44,19,2)
(26,33,2)
-----------------------------------
(0,data)
(1,case 6:)
(2,data = NULL)
(3,printIntLine(data[0])
(4,NULL)
(5,default:)
(6,0)
(7,data[0])
(8,data[0])
(9,break;)
(10,data)
(11,break;)
(12,0)
(13,100)
(14,data = (int *)
(15,-1)
(16,)
(17,100*sizeof(int)
(18,data)
(19,6)
(20,break;)
(21,"Benign, fixed string")
(22,5)
(23,case 7:)
(24,data)
(25,sizeof(int)
(26,"Benign, fixed string")
(27,)
(28,default:)
(29,)
(30,data)
(31,1)
(32,NULL)
(33,7)
(34,RET)
(35,)
(36,switch(6)
(37,printLine("Benign, fixed string")
(38,if (data == NULL)
(39,switch(7)
(40,data)
(41,(int *)
(42,int *)
(43,data[0] = 5)
(44,printLine("Benign, fixed string")
(45,break;)
(46,malloc(100*sizeof(int)
(47,int)
(48,exit(-1)
(49,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
