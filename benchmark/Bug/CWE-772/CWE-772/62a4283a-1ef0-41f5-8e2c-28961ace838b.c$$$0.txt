-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_31_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine((twoIntsStruct *)&data[0]);
    {
        struct _twoIntsStruct * dataCopy = data;
        struct _twoIntsStruct * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
29,32
30,31
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
84,85
84,86
84,87
85,86
86,87
86,88
87,88
89,90
89,91
89,92
92,93
93,94
95,96
96,97
96,98
97,98
99,100
99,101
99,102
102,103
103,104
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,32,36,37,41,43,48,50,56,57,58,59,65,66,67,68,72,76,78,82,83,88,90,91,94,98,100,101,104,105
-----computeFrom-----
14,15
14,16
20,21
20,22
39,40
39,41
52,53
52,54
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_31_bad(){    struct _twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    {        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_31_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_31_bad
{    struct _twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    {        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
{        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * dataCopy = data;
struct _twoIntsStruct * dataCopy = data;
struct _twoIntsStruct
_twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
struct _twoIntsStruct * data = dataCopy;
struct _twoIntsStruct * data = dataCopy;
struct _twoIntsStruct
_twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(9,16,0)
(8,6,0)
(2,11,0)
(28,20,0)
(43,28,0)
(48,7,0)
(35,26,0)
(17,37,0)
(28,26,0)
(50,20,0)
(29,51,0)
(42,3,0)
(3,42,0)
(37,7,0)
(16,9,0)
(41,2,0)
(44,28,0)
(42,18,0)
(51,14,0)
(2,3,0)
(6,15,0)
(22,0,0)
(11,14,0)
(15,47,0)
(52,38,0)
(27,26,0)
(22,11,0)
(21,0,0)
(6,11,0)
(15,6,0)
(11,22,0)
(12,20,0)
(10,2,0)
(38,14,0)
(20,14,0)
(31,15,0)
(46,6,0)
(34,36,0)
(40,47,0)
(32,14,0)
(24,11,0)
(45,23,0)
(18,42,0)
(1,42,0)
(7,37,0)
(4,24,0)
(30,38,0)
(0,9,0)
(39,14,0)
(49,24,0)
(22,13,0)
(37,51,0)
(18,14,0)
(0,22,0)
(26,11,0)
(7,11,0)
(3,2,0)
(47,14,0)
(23,34,0)
(19,11,0)
(42,1,0)
(33,7,0)
(26,20,0)
(9,0,0)
(34,23,0)
(13,22,0)
(2,10,1)
(38,52,1)
(28,26,1)
(29,37,1)
(47,40,1)
(10,41,1)
(24,11,1)
(22,13,1)
(19,38,1)
(37,17,1)
(6,46,1)
(49,4,1)
(6,11,1)
(33,24,1)
(31,6,1)
(9,21,1)
(23,45,1)
(44,43,1)
(21,19,1)
(33,34,1)
(17,7,1)
(15,31,1)
(26,11,1)
(7,11,1)
(9,16,1)
(4,11,1)
(0,9,1)
(26,35,1)
(34,23,1)
(40,15,1)
(8,51,1)
(45,24,1)
(35,27,1)
(15,6,1)
(22,0,1)
(28,44,1)
(3,2,1)
(18,42,1)
(51,29,1)
(37,7,1)
(24,49,1)
(46,8,1)
(5,28,1)
(7,48,1)
(43,26,1)
(11,22,1)
(42,3,1)
(52,30,1)
(2,11,1)
(42,1,1)
(48,33,1)
(41,47,1)
(27,18,1)
(42,3,2)
(34,23,2)
(42,1,2)
(9,16,2)
(15,6,2)
(0,9,2)
(7,11,2)
(11,22,2)
(18,42,2)
(28,26,2)
(37,7,2)
(3,2,2)
(34,24,2)
(6,11,2)
(26,11,2)
(2,11,2)
(23,24,2)
(22,0,2)
(24,11,2)
(22,13,2)
(45,24,2)
-----------------------------------
(0,calloc(100, sizeof(struct _twoIntsStruct)
(1,twoIntsStruct *)
(2,data[0])
(3,&data[0])
(4,data)
(5,RET)
(6,data[0])
(7,data[0])
(8,data)
(9,sizeof(struct _twoIntsStruct)
(10,0)
(11,data = (struct _twoIntsStruct *)
(12,data)
(13,struct _twoIntsStruct *)
(14,)
(15,data[0].intTwo)
(16,struct _twoIntsStruct)
(17,intOne)
(18,printStructLine((twoIntsStruct *)
(19,data)
(20,)
(21,100)
(22,(struct _twoIntsStruct *)
(23,-1)
(24,data == NULL)
(25, sizeof(struct _twoIntsStruct)
(26,* dataCopy = data)
(27,dataCopy)
(28,* data = dataCopy)
(29,0)
(30,data)
(31,intTwo)
(32,data)
(33,data)
(34,exit(-1)
(35,data)
(36,)
(37,data[0].intOne)
(38,data = NULL)
(39,if (data == NULL)
(40,0)
(41,data)
(42,(twoIntsStruct *)
(43,data)
(44,dataCopy)
(45,1)
(46,0)
(47,data[0].intTwo = 0)
(48,0)
(49,NULL)
(50,dataCopy)
(51,data[0].intOne = 0)
(52,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
