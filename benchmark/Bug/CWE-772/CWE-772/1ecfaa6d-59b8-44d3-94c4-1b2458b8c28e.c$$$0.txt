-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_44_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,49,50,54,56,61,63,67,69,70,74,76,80,82
-----computeFrom-----
28,29
28,30
34,35
34,36
45,46
45,47
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_44_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__char_malloc_44_bad()
CWE401_Memory_Leak__char_malloc_44_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = badSink;
void (*funcPtr) (char *) = badSink;
void
(*funcPtr) (char *) = badSink
*funcPtr
*
funcPtr
char *
char
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(20,31,0)
(17,4,0)
(26,29,0)
(5,4,0)
(22,4,0)
(29,10,0)
(28,4,0)
(30,15,0)
(4,5,0)
(29,2,0)
(1,7,0)
(33,2,0)
(6,20,0)
(10,29,0)
(8,15,0)
(10,5,0)
(22,31,0)
(20,4,0)
(11,22,0)
(3,13,0)
(15,31,0)
(9,4,0)
(2,29,0)
(21,17,0)
(19,31,0)
(18,7,0)
(7,31,0)
(32,3,0)
(23,31,0)
(13,0,0)
(28,31,0)
(4,31,0)
(25,28,0)
(12,22,0)
(27,5,0)
(16,31,0)
(5,27,0)
(5,10,0)
(13,3,0)
(14,17,0)
(11,12,1)
(5,27,1)
(12,17,1)
(2,33,1)
(8,7,1)
(4,5,1)
(20,6,1)
(25,20,1)
(6,22,1)
(15,30,1)
(5,10,1)
(7,18,1)
(18,1,1)
(28,25,1)
(3,32,1)
(22,4,1)
(24,28,1)
(17,14,1)
(28,4,1)
(33,26,1)
(32,17,1)
(26,9,1)
(10,29,1)
(14,21,1)
(13,3,1)
(17,4,1)
(22,11,1)
(29,2,1)
(21,4,1)
(30,8,1)
(12,13,1)
(9,15,1)
(20,4,1)
(20,4,2)
(17,4,2)
(5,10,2)
(32,17,2)
(4,5,2)
(5,27,2)
(28,4,2)
(29,2,2)
(13,3,2)
(13,17,2)
(10,29,2)
(22,4,2)
(3,17,2)
-----------------------------------
(0,)
(1,funcPtr)
(2,sizeof(char)
(3,-1)
(4,data = (char *)
(5,(char *)
(6,data)
(7,(*funcPtr)
(8,data)
(9,data)
(10,malloc(100*sizeof(char)
(11,"A String")
(12,data)
(13,exit(-1)
(14,NULL)
(15,data = NULL)
(16,funcPtr)
(17,data == NULL)
(18,badSink)
(19,if (data == NULL)
(20,printLine(data)
(21,data)
(22,strcpy(data, "A String")
(23,data)
(24,RET)
(25,data)
(26,100)
(27,char *)
(28,funcPtr(data)
(29,100*sizeof(char)
(30,NULL)
(31,)
(32,1)
(33,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
