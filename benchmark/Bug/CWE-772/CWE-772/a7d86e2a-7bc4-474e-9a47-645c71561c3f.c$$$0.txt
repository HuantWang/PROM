-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_12_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
92,93
92,94
92,95
92,96
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
99,100
101,102
103,104
103,105
104,105
106,107
106,108
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
122,123
123,124
123,125
124,125
124,126
125,126
125,127
126,127
131,132
132,133
132,134
133,134
135,136
135,137
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
146,147
146,148
146,149
147,148
148,149
150,151
152,153
153,154
154,155
154,156
155,156
157,158
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,86,90,91,96,100,102,105,107,111,112,118,119,120,121,127,128,129,130,134,138,140,144,145,149,151,156,158
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
94,95
94,96
106,107
106,108
114,115
114,116
123,124
123,125
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_12_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_12_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_12_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(16,59,0)
(83,80,0)
(76,55,0)
(64,54,0)
(6,36,0)
(83,26,0)
(54,36,0)
(55,48,0)
(61,6,0)
(28,72,0)
(44,50,0)
(52,36,0)
(25,40,0)
(66,1,0)
(24,81,0)
(78,11,0)
(64,69,0)
(72,48,0)
(37,11,0)
(11,78,0)
(66,72,0)
(30,15,0)
(15,30,0)
(23,32,0)
(78,65,0)
(39,69,0)
(41,66,0)
(55,24,0)
(62,51,0)
(7,32,0)
(17,26,0)
(6,68,0)
(14,1,0)
(83,4,0)
(73,48,0)
(71,22,0)
(50,44,0)
(11,37,0)
(27,83,0)
(12,54,0)
(18,49,0)
(45,52,0)
(75,49,0)
(69,65,0)
(1,55,0)
(26,49,0)
(80,35,0)
(35,80,0)
(7,13,0)
(36,65,0)
(31,60,0)
(3,52,0)
(30,43,0)
(77,36,0)
(54,64,0)
(58,11,0)
(71,55,0)
(79,43,0)
(51,33,0)
(34,49,0)
(59,65,0)
(51,62,0)
(0,71,0)
(71,36,0)
(13,48,0)
(67,6,0)
(56,29,0)
(53,26,0)
(40,4,0)
(8,60,0)
(37,52,0)
(20,65,0)
(9,1,0)
(24,15,0)
(24,55,0)
(80,83,0)
(43,79,0)
(74,29,0)
(4,40,0)
(15,24,0)
(42,7,0)
(36,80,0)
(4,83,0)
(62,60,0)
(68,59,0)
(60,55,0)
(50,57,0)
(43,30,0)
(47,68,0)
(2,4,0)
(1,66,0)
(60,62,0)
(21,44,0)
(32,55,0)
(5,32,0)
(29,36,0)
(11,58,0)
(32,7,0)
(51,73,0)
(46,64,0)
(73,51,0)
(70,13,0)
(82,54,0)
(33,51,0)
(80,36,0)
(38,30,0)
(68,6,0)
(40,25,0)
(81,24,0)
(52,37,0)
(45,3,1)
(66,41,1)
(32,23,1)
(60,8,1)
(67,50,1)
(11,37,1)
(1,14,1)
(32,55,1)
(6,36,1)
(7,32,1)
(5,72,1)
(27,77,1)
(13,70,1)
(83,26,1)
(39,64,1)
(21,29,1)
(76,10,1)
(43,79,1)
(71,36,1)
(9,55,1)
(43,38,1)
(63,78,1)
(46,54,1)
(47,6,1)
(77,10,1)
(69,39,1)
(66,1,1)
(6,61,1)
(54,36,1)
(41,1,1)
(64,46,1)
(17,53,1)
(68,47,1)
(23,5,1)
(83,4,1)
(30,43,1)
(15,30,1)
(36,80,1)
(80,83,1)
(59,16,1)
(14,9,1)
(28,66,1)
(40,25,1)
(52,45,1)
(40,2,1)
(29,56,1)
(67,29,1)
(61,67,1)
(4,40,1)
(72,28,1)
(52,36,1)
(80,35,1)
(12,82,1)
(82,59,1)
(2,27,1)
(50,44,1)
(7,42,1)
(60,55,1)
(38,76,1)
(71,0,1)
(24,15,1)
(68,6,1)
(51,62,1)
(63,73,1)
(31,13,1)
(29,36,1)
(3,69,1)
(8,31,1)
(74,36,1)
(1,55,1)
(44,21,1)
(0,63,1)
(64,54,1)
(24,81,1)
(19,63,1)
(42,32,1)
(55,24,1)
(70,7,1)
(56,74,1)
(62,60,1)
(51,33,1)
(10,26,1)
(37,52,1)
(78,11,1)
(71,55,1)
(16,68,1)
(11,58,1)
(73,51,1)
(54,12,1)
(26,17,1)
(19,71,1)
(16,10,2)
(73,10,2)
(9,10,2)
(3,10,2)
(83,26,2)
(36,80,2)
(30,43,2)
(51,10,2)
(51,33,2)
(14,10,2)
(6,36,2)
(46,10,2)
(5,10,2)
(11,10,2)
(68,6,2)
(41,10,2)
(12,10,2)
(70,10,2)
(60,10,2)
(74,10,2)
(51,62,2)
(76,10,2)
(30,10,2)
(80,35,2)
(21,29,2)
(43,79,2)
(44,29,2)
(50,29,2)
(24,15,2)
(29,36,2)
(66,10,2)
(78,10,2)
(54,10,2)
(61,10,2)
(37,52,2)
(42,10,2)
(60,55,2)
(24,81,2)
(11,37,2)
(52,36,2)
(80,83,2)
(1,55,2)
(62,10,2)
(52,10,2)
(31,10,2)
(64,54,2)
(67,10,2)
(83,10,2)
(56,10,2)
(40,10,2)
(68,10,2)
(0,63,2)
(78,11,2)
(71,63,2)
(36,10,2)
(62,60,2)
(8,10,2)
(66,1,2)
(64,10,2)
(29,10,2)
(54,36,2)
(77,10,2)
(37,10,2)
(4,40,2)
(27,10,2)
(55,10,2)
(59,10,2)
(38,10,2)
(7,32,2)
(24,10,2)
(4,10,2)
(47,10,2)
(55,24,2)
(15,10,2)
(71,55,2)
(50,44,2)
(73,51,2)
(72,10,2)
(15,30,2)
(13,10,2)
(69,10,2)
(32,55,2)
(39,10,2)
(1,10,2)
(7,10,2)
(11,58,2)
(82,10,2)
(6,10,2)
(32,10,2)
(43,10,2)
(40,25,2)
(28,10,2)
(80,10,2)
(83,4,2)
(71,36,2)
(45,10,2)
(23,10,2)
(2,10,2)
-----------------------------------
(0,data)
(1,data[0])
(2,100)
(3,data)
(4,100*sizeof(struct _twoIntsStruct)
(5,data)
(6,data[0])
(7,data[0].intTwo)
(8,0)
(9,data)
(10,globalReturnsTrueOrFalse()
(11,(twoIntsStruct *)
(12,0)
(13,data[0].intTwo = 0)
(14,0)
(15,ALLOCA(100*sizeof(struct _twoIntsStruct)
(16,0)
(17,NULL)
(18,data)
(19,RET)
(20,if (data == NULL)
(21,1)
(22,)
(23,0)
(24,(struct _twoIntsStruct *)
(25,struct _twoIntsStruct)
(26,data = NULL)
(27,data)
(28,0)
(29,data == NULL)
(30,100*sizeof(struct _twoIntsStruct)
(31,data)
(32,data[0])
(33,twoIntsStruct *)
(34,if(globalReturnsTrueOrFalse()
(35,struct _twoIntsStruct *)
(36,data = (struct _twoIntsStruct *)
(37,&data[0])
(38,100)
(39,0)
(40,sizeof(struct _twoIntsStruct)
(41,intOne)
(42,intTwo)
(43,sizeof(struct _twoIntsStruct)
(44,-1)
(45,0)
(46,intTwo)
(47,intOne)
(48,)
(49,)
(50,exit(-1)
(51,(twoIntsStruct *)
(52,data[0])
(53,data)
(54,data[0])
(55,data = (struct _twoIntsStruct *)
(56,NULL)
(57,)
(58,twoIntsStruct *)
(59,data[0].intOne = 0)
(60,data[0])
(61,0)
(62,&data[0])
(63,globalReturnsTrueOrFalse()
(64,data[0].intTwo)
(65,)
(66,data[0].intOne)
(67,data)
(68,data[0].intOne)
(69,data[0].intTwo = 0)
(70,0)
(71,free(data)
(72,data[0].intOne = 0)
(73,printStructLine((twoIntsStruct *)
(74,data)
(75,if(globalReturnsTrueOrFalse()
(76,data)
(77,data)
(78,printStructLine((twoIntsStruct *)
(79,struct _twoIntsStruct)
(80,(struct _twoIntsStruct *)
(81,struct _twoIntsStruct *)
(82,data)
(83,realloc(data, 100*sizeof(struct _twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
