-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_08_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,70,72
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_08_bad(){    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_08_bad()
CWE401_Memory_Leak__wchar_t_malloc_08_bad
{    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,6,0)
(22,6,0)
(4,0,0)
(0,8,0)
(1,4,0)
(23,22,0)
(8,29,0)
(17,25,0)
(0,4,0)
(24,25,0)
(20,25,0)
(7,14,0)
(3,22,0)
(10,25,0)
(19,17,0)
(22,8,0)
(4,9,0)
(11,7,0)
(26,6,0)
(28,23,0)
(14,18,0)
(14,7,0)
(26,22,0)
(8,22,0)
(8,0,0)
(12,26,0)
(5,23,0)
(9,4,0)
(21,9,0)
(29,8,0)
(15,17,0)
(26,12,1)
(4,9,1)
(27,13,1)
(21,1,1)
(16,17,1)
(9,21,1)
(15,19,1)
(12,14,1)
(23,5,1)
(0,4,1)
(8,0,1)
(17,15,1)
(1,3,1)
(7,11,1)
(8,29,1)
(3,16,1)
(11,23,1)
(22,8,1)
(23,22,1)
(26,22,1)
(13,26,1)
(13,16,1)
(12,23,1)
(5,28,1)
(14,7,1)
(28,22,1)
(4,9,2)
(14,7,2)
(7,23,2)
(5,16,2)
(9,16,2)
(3,16,2)
(28,16,2)
(8,16,2)
(0,16,2)
(4,16,2)
(12,16,2)
(0,4,2)
(23,16,2)
(22,8,2)
(14,23,2)
(8,0,2)
(26,16,2)
(1,16,2)
(23,22,2)
(8,29,2)
(11,23,2)
(22,16,2)
(26,22,2)
(21,16,2)
-----------------------------------
(0,malloc(100*sizeof(wchar_t)
(1,100)
(2,if (data == NULL)
(3,data)
(4,100*sizeof(wchar_t)
(5,NULL)
(6,)
(7,-1)
(8,(wchar_t *)
(9,sizeof(wchar_t)
(10,data)
(11,1)
(12,data)
(13,staticReturnsTrue()
(14,exit(-1)
(15,NULL)
(16,staticReturnsTrue()
(17,data = NULL)
(18,)
(19,data)
(20,if(staticReturnsTrue()
(21,wchar_t)
(22,data = (wchar_t *)
(23,data == NULL)
(24,if(staticReturnsTrue()
(25,)
(26,printWLine(data)
(27,RET)
(28,data)
(29,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
