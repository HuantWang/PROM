-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
71,74
72,73
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
89,91
89,92
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,51,52,53,57,60,61,65,68,70,73,75,78,81,82,86,88,94,95,96,100,103,104,108,110
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
48,49
48,50
63,64
63,65
76,77
76,78
84,85
84,86
91,92
91,93
-----guardedBy-----
86,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_06_bad()
CWE401_Memory_Leak__malloc_realloc_int_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(STATIC_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(39,28,0)
(40,25,0)
(32,9,0)
(7,17,0)
(10,33,0)
(52,31,0)
(11,23,0)
(44,20,0)
(21,23,0)
(27,21,0)
(20,44,0)
(60,1,0)
(2,51,0)
(31,43,0)
(41,26,0)
(18,30,0)
(23,11,0)
(1,49,0)
(50,31,0)
(44,23,0)
(31,50,0)
(17,26,0)
(4,44,0)
(22,12,0)
(3,46,0)
(51,23,0)
(43,11,0)
(26,49,0)
(44,1,0)
(49,13,0)
(14,3,0)
(26,9,0)
(23,49,0)
(8,46,0)
(11,43,0)
(18,3,0)
(45,11,0)
(12,42,0)
(11,45,0)
(59,21,0)
(3,26,0)
(56,47,0)
(6,32,0)
(17,30,0)
(32,12,0)
(24,33,0)
(57,39,0)
(20,49,0)
(51,1,0)
(47,26,0)
(28,39,0)
(36,49,0)
(46,30,0)
(3,1,0)
(54,23,0)
(15,3,0)
(33,26,0)
(55,50,0)
(19,44,0)
(32,23,0)
(33,46,0)
(48,51,0)
(43,31,0)
(29,47,0)
(35,5,0)
(9,58,0)
(53,5,0)
(0,42,0)
(28,37,0)
(12,32,0)
(3,18,0)
(16,49,0)
(9,32,0)
(42,12,0)
(58,9,0)
(34,49,0)
(9,26,0)
(32,23,1)
(29,56,1)
(32,12,1)
(9,32,1)
(21,23,1)
(21,27,1)
(14,15,1)
(24,10,1)
(26,9,1)
(38,47,1)
(46,8,1)
(2,28,1)
(3,46,1)
(38,5,1)
(18,3,1)
(48,2,1)
(15,46,1)
(44,23,1)
(3,1,1)
(42,0,1)
(2,21,1)
(39,57,1)
(1,60,1)
(6,41,1)
(5,53,1)
(38,17,1)
(11,43,1)
(33,26,1)
(52,54,1)
(41,20,1)
(17,7,1)
(44,1,1)
(3,26,1)
(51,48,1)
(8,33,1)
(20,44,1)
(59,23,1)
(4,19,1)
(55,52,1)
(50,55,1)
(12,42,1)
(19,1,1)
(28,39,1)
(47,29,1)
(17,26,1)
(60,51,1)
(53,35,1)
(10,47,1)
(33,24,1)
(7,18,1)
(54,5,1)
(56,26,1)
(23,11,1)
(57,21,1)
(31,50,1)
(11,45,1)
(0,22,1)
(9,58,1)
(27,59,1)
(43,31,1)
(47,26,1)
(44,4,1)
(3,14,1)
(22,6,1)
(51,23,1)
(31,5,2)
(11,45,2)
(41,5,2)
(23,5,2)
(26,5,2)
(29,5,2)
(7,47,2)
(42,5,2)
(9,5,2)
(15,47,2)
(18,3,2)
(33,26,2)
(27,5,2)
(1,5,2)
(32,12,2)
(44,23,2)
(43,31,2)
(2,5,2)
(9,32,2)
(12,42,2)
(56,5,2)
(3,46,2)
(47,26,2)
(22,5,2)
(46,47,2)
(21,5,2)
(60,5,2)
(19,5,2)
(39,21,2)
(48,5,2)
(17,26,2)
(18,47,2)
(50,5,2)
(3,26,2)
(11,43,2)
(21,23,2)
(9,58,2)
(17,47,2)
(14,47,2)
(51,23,2)
(3,47,2)
(6,5,2)
(24,47,2)
(57,21,2)
(4,5,2)
(10,47,2)
(8,47,2)
(3,1,2)
(0,5,2)
(31,50,2)
(20,44,2)
(43,5,2)
(32,23,2)
(28,21,2)
(51,5,2)
(47,5,2)
(11,5,2)
(32,5,2)
(28,39,2)
(12,5,2)
(59,5,2)
(20,5,2)
(23,11,2)
(26,9,2)
(52,5,2)
(33,47,2)
(44,5,2)
(55,5,2)
(54,5,2)
(44,1,2)
-----------------------------------
(0,int)
(1,data[0] = 5)
(2,data)
(3,data[0])
(4,0)
(5,STATIC_CONST_FIVE==5)
(6,data)
(7,data)
(8,10)
(9,(int *)
(10,data)
(11,(int *)
(12,(130000)
(13,)
(14,0)
(15,data)
(16,data)
(17,free(data)
(18,printIntLine(data[0])
(19,data)
(20,printIntLine(data[0])
(21,data == NULL)
(22,130000)
(23,* data = (int *)
(24,0)
(25,)
(26,data = (int *)
(27,NULL)
(28,exit(-1)
(29,NULL)
(30,)
(31,100*sizeof(int)
(32,realloc(data, (130000)
(33,data[0])
(34,if (data == NULL)
(35,STATIC_CONST_FIVE)
(36,if (data != NULL)
(37,)
(38,RET)
(39,-1)
(40,if(STATIC_CONST_FIVE==5)
(41,data)
(42,sizeof(int)
(43,malloc(100*sizeof(int)
(44,data[0])
(45,int *)
(46,data[0] = 10)
(47,data != NULL)
(48,0)
(49,)
(50,sizeof(int)
(51,data[0])
(52,100)
(53,5)
(54,data)
(55,int)
(56,data)
(57,1)
(58,int *)
(59,data)
(60,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
