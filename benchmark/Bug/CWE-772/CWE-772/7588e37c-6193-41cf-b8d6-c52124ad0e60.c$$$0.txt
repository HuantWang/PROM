-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_41_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
29,32
30,31
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,32,36,37,41,43,48,50,56,57,58,59,65,66,67,68,72,76,77,81,83
-----computeFrom-----
14,15
14,16
20,21
20,22
39,40
39,41
52,53
52,54
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_41_bad(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    badSink(data);}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_41_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_41_bad
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    badSink(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
badSink(data);
badSink(data)
badSink
badSink
data
data
-----joern-----
(14,34,0)
(34,7,0)
(38,9,0)
(28,10,0)
(32,28,0)
(19,14,0)
(12,7,0)
(33,34,0)
(23,35,0)
(26,7,0)
(2,7,0)
(16,2,0)
(13,6,0)
(17,34,0)
(5,17,0)
(27,7,0)
(6,22,0)
(37,7,0)
(10,28,0)
(35,23,0)
(38,23,0)
(42,7,0)
(40,10,0)
(29,23,0)
(24,27,0)
(20,42,0)
(17,25,0)
(25,37,0)
(41,35,0)
(31,34,0)
(34,38,0)
(15,17,0)
(3,33,0)
(39,26,0)
(22,11,0)
(37,25,0)
(4,26,0)
(23,38,0)
(27,34,0)
(18,28,0)
(21,14,0)
(14,16,0)
(36,16,0)
(43,2,0)
(8,33,0)
(10,42,0)
(22,6,0)
(1,7,0)
(38,34,0)
(16,14,0)
(28,34,0)
(9,38,0)
(25,17,0)
(20,10,1)
(17,15,1)
(14,21,1)
(16,36,1)
(42,20,1)
(6,13,1)
(17,34,1)
(39,4,1)
(3,8,1)
(10,28,1)
(33,34,1)
(8,34,1)
(43,16,1)
(40,28,1)
(2,43,1)
(14,34,1)
(31,26,1)
(27,34,1)
(29,31,1)
(24,37,1)
(38,9,1)
(32,18,1)
(18,22,1)
(41,29,1)
(19,42,1)
(13,33,1)
(16,14,1)
(22,6,1)
(10,40,1)
(0,27,1)
(25,17,1)
(37,25,1)
(26,39,1)
(38,23,1)
(15,5,1)
(23,35,1)
(28,34,1)
(33,3,1)
(21,19,1)
(35,41,1)
(36,14,1)
(5,2,1)
(34,38,1)
(18,33,1)
(28,32,1)
(27,24,1)
(14,34,2)
(34,38,2)
(23,35,2)
(38,9,2)
(13,33,2)
(22,33,2)
(27,34,2)
(38,23,2)
(25,17,2)
(33,34,2)
(16,14,2)
(22,6,2)
(17,34,2)
(37,25,2)
(28,34,2)
(10,28,2)
(6,33,2)
-----------------------------------
(0,RET)
(1,if (data == NULL)
(2,data[0].intTwo = 0)
(3,NULL)
(4,data)
(5,data)
(6,-1)
(7,)
(8,data)
(9,twoIntsStruct *)
(10,data[0].intOne)
(11,)
(12,data)
(13,1)
(14,data[0])
(15,0)
(16,data[0].intTwo)
(17,data[0])
(18,data)
(19,data)
(20,0)
(21,0)
(22,exit(-1)
(23,calloc(100, sizeof(twoIntsStruct)
(24,data)
(25,&data[0])
(26,data = NULL)
(27,badSink(data)
(28,data[0])
(29,100)
(30, sizeof(twoIntsStruct)
(31,data)
(32,0)
(33,data == NULL)
(34,data = (twoIntsStruct *)
(35,sizeof(twoIntsStruct)
(36,intTwo)
(37,printStructLine(&data[0])
(38,(twoIntsStruct *)
(39,NULL)
(40,intOne)
(41,twoIntsStruct)
(42,data[0].intOne = 0)
(43,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
