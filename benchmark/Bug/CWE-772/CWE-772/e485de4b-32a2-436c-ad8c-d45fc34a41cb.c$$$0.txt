-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_07_bad()
{
    if(staticFive==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
71,74
72,73
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
89,91
89,92
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,51,52,53,57,60,61,65,68,70,73,75,78,81,82,86,88,94,95,96,100,103,104,108,110
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
48,49
48,50
63,64
63,65
76,77
76,78
84,85
84,86
91,92
91,93
-----guardedBy-----
86,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_07_bad(){    if(staticFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_07_bad()
CWE401_Memory_Leak__malloc_realloc_int_07_bad
{    if(staticFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(staticFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(28,12,0)
(32,11,0)
(53,47,0)
(52,1,0)
(57,7,0)
(56,31,0)
(21,23,0)
(7,39,0)
(8,60,0)
(25,40,0)
(58,56,0)
(11,4,0)
(10,23,0)
(13,5,0)
(38,44,0)
(31,21,0)
(31,56,0)
(23,21,0)
(47,26,0)
(40,25,0)
(38,16,0)
(25,31,0)
(59,29,0)
(24,16,0)
(1,9,0)
(60,6,0)
(54,47,0)
(13,35,0)
(4,47,0)
(12,40,0)
(20,60,0)
(4,11,0)
(34,14,0)
(21,47,0)
(50,6,0)
(9,44,0)
(41,25,0)
(16,9,0)
(33,17,0)
(31,25,0)
(36,45,0)
(60,21,0)
(56,17,0)
(49,7,0)
(16,40,0)
(7,57,0)
(2,47,0)
(1,40,0)
(39,7,0)
(18,5,0)
(6,47,0)
(16,38,0)
(22,40,0)
(17,56,0)
(55,9,0)
(0,44,0)
(15,16,0)
(43,57,0)
(45,21,0)
(37,45,0)
(48,31,0)
(23,10,0)
(39,23,0)
(0,40,0)
(3,21,0)
(27,29,0)
(11,21,0)
(30,12,0)
(42,0,0)
(23,39,0)
(5,13,0)
(11,6,0)
(46,11,0)
(25,41,0)
(16,6,0)
(40,47,0)
(19,1,0)
(12,28,1)
(12,40,1)
(11,46,1)
(6,50,1)
(36,37,1)
(31,56,1)
(60,20,1)
(16,6,1)
(25,41,1)
(57,43,1)
(60,21,1)
(28,30,1)
(43,49,1)
(40,25,1)
(22,4,1)
(13,5,1)
(3,29,1)
(21,23,1)
(45,36,1)
(20,8,1)
(1,40,1)
(51,12,1)
(52,12,1)
(7,57,1)
(30,40,1)
(11,6,1)
(49,3,1)
(0,40,1)
(0,42,1)
(39,7,1)
(11,21,1)
(27,59,1)
(33,58,1)
(24,9,1)
(45,21,1)
(4,11,1)
(48,22,1)
(31,21,1)
(38,16,1)
(25,31,1)
(55,1,1)
(23,39,1)
(5,18,1)
(16,9,1)
(9,55,1)
(50,60,1)
(42,38,1)
(17,33,1)
(37,21,1)
(32,6,1)
(29,27,1)
(15,24,1)
(18,45,1)
(8,45,1)
(51,0,1)
(16,40,1)
(1,19,1)
(56,17,1)
(8,13,1)
(23,10,1)
(19,52,1)
(46,32,1)
(16,15,1)
(58,48,1)
(51,29,1)
(23,29,2)
(23,39,2)
(6,29,2)
(18,45,2)
(30,29,2)
(60,21,2)
(5,45,2)
(50,29,2)
(12,29,2)
(39,7,2)
(39,29,2)
(16,12,2)
(11,21,2)
(57,29,2)
(32,29,2)
(42,12,2)
(21,23,2)
(3,29,2)
(60,29,2)
(23,10,2)
(40,29,2)
(45,21,2)
(8,29,2)
(13,5,2)
(7,29,2)
(37,29,2)
(48,29,2)
(16,9,2)
(4,11,2)
(25,29,2)
(40,25,2)
(22,29,2)
(56,29,2)
(24,12,2)
(45,29,2)
(58,29,2)
(21,29,2)
(33,29,2)
(43,29,2)
(16,40,2)
(11,29,2)
(56,17,2)
(15,12,2)
(25,31,2)
(1,12,2)
(46,29,2)
(16,6,2)
(17,29,2)
(20,29,2)
(9,12,2)
(1,40,2)
(0,40,2)
(31,29,2)
(7,57,2)
(36,29,2)
(31,56,2)
(13,45,2)
(0,12,2)
(19,12,2)
(25,41,2)
(11,6,2)
(28,29,2)
(38,16,2)
(55,12,2)
(12,40,2)
(4,29,2)
(38,12,2)
(31,21,2)
(49,29,2)
(52,12,2)
-----------------------------------
(0,free(data)
(1,data[0])
(2,if (data == NULL)
(3,data)
(4,printIntLine(data[0])
(5,-1)
(6,data[0] = 5)
(7,100*sizeof(int)
(8,data)
(9,data[0] = 10)
(10,int *)
(11,data[0])
(12,data != NULL)
(13,exit(-1)
(14,)
(15,0)
(16,data[0])
(17,sizeof(int)
(18,1)
(19,0)
(20,0)
(21,* data = (int *)
(22,data)
(23,(int *)
(24,data)
(25,(int *)
(26,)
(27,5)
(28,NULL)
(29,staticFive==5)
(30,data)
(31,realloc(data, (130000)
(32,data)
(33,int)
(34,if(staticFive==5)
(35,)
(36,NULL)
(37,data)
(38,printIntLine(data[0])
(39,malloc(100*sizeof(int)
(40,data = (int *)
(41,int *)
(42,data)
(43,int)
(44,)
(45,data == NULL)
(46,0)
(47,)
(48,data)
(49,100)
(50,5)
(51,RET)
(52,data)
(53,data)
(54,if (data != NULL)
(55,10)
(56,(130000)
(57,sizeof(int)
(58,130000)
(59,staticFive)
(60,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
