-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_12_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
68,71
69,70
70,71
70,72
71,72
73,74
73,75
74,75
74,76
76,77
78,79
78,80
79,80
81,82
81,83
83,84
84,85
84,86
87,88
88,89
88,90
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
98,100
99,100
102,103
102,104
102,105
103,104
104,105
106,107
108,109
109,110
110,111
110,112
111,112
113,114
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,72,75,77,80,82,85,86,91,92,93,97,100,101,105,107,112,114
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
54,55
54,56
70,71
70,72
81,82
81,83
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_12_bad(){    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int_calloc_12_bad()
CWE401_Memory_Leak__int_calloc_12_bad
{    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(30,36,0)
(2,56,0)
(1,29,0)
(21,57,0)
(1,12,0)
(54,46,0)
(1,57,0)
(44,50,0)
(54,29,0)
(56,2,0)
(3,9,0)
(16,47,0)
(50,45,0)
(8,30,0)
(40,50,0)
(32,29,0)
(6,45,0)
(19,27,0)
(56,53,0)
(57,15,0)
(45,43,0)
(23,17,0)
(29,11,0)
(31,5,0)
(5,29,0)
(27,29,0)
(38,47,0)
(5,22,0)
(57,1,0)
(37,22,0)
(29,1,0)
(26,17,0)
(48,36,0)
(54,36,0)
(3,52,0)
(33,5,0)
(18,47,0)
(36,28,0)
(17,22,0)
(10,11,0)
(17,29,0)
(7,28,0)
(36,43,0)
(13,50,0)
(30,45,0)
(28,36,0)
(41,27,0)
(10,17,0)
(28,53,0)
(53,28,0)
(20,56,0)
(28,7,0)
(50,36,0)
(34,47,0)
(49,18,0)
(15,57,0)
(22,11,0)
(58,15,0)
(4,11,0)
(39,18,0)
(14,54,0)
(24,2,0)
(35,30,0)
(12,1,0)
(52,3,0)
(50,13,0)
(53,56,0)
(13,43,0)
(17,10,0)
(25,52,0)
(50,40,1)
(27,41,1)
(17,29,1)
(13,50,1)
(52,25,1)
(51,18,1)
(29,1,1)
(6,30,1)
(54,36,1)
(55,54,1)
(30,35,1)
(20,48,1)
(17,22,1)
(24,20,1)
(40,44,1)
(22,37,1)
(37,5,1)
(28,7,1)
(1,57,1)
(50,36,1)
(45,6,1)
(32,51,1)
(23,26,1)
(3,52,1)
(42,10,1)
(15,58,1)
(27,29,1)
(41,19,1)
(55,42,1)
(28,53,1)
(42,13,1)
(54,29,1)
(10,17,1)
(19,29,1)
(35,8,1)
(5,29,1)
(18,49,1)
(8,36,1)
(1,12,1)
(58,21,1)
(17,23,1)
(56,2,1)
(14,42,1)
(26,22,1)
(2,24,1)
(36,28,1)
(30,36,1)
(44,45,1)
(31,33,1)
(33,3,1)
(48,51,1)
(25,27,1)
(5,31,1)
(50,45,1)
(49,39,1)
(33,27,1)
(53,56,1)
(57,15,1)
(21,32,1)
(54,14,1)
(2,51,2)
(8,51,2)
(50,45,2)
(13,50,2)
(10,51,2)
(3,27,2)
(17,29,2)
(36,28,2)
(22,51,2)
(57,15,2)
(48,51,2)
(31,51,2)
(30,51,2)
(53,51,2)
(5,29,2)
(26,51,2)
(44,51,2)
(1,12,2)
(14,42,2)
(29,51,2)
(54,29,2)
(35,51,2)
(20,51,2)
(36,51,2)
(24,51,2)
(13,51,2)
(27,29,2)
(37,51,2)
(17,22,2)
(33,51,2)
(50,36,2)
(21,51,2)
(10,17,2)
(27,51,2)
(6,51,2)
(50,51,2)
(25,27,2)
(19,51,2)
(32,51,2)
(41,51,2)
(56,51,2)
(29,1,2)
(3,52,2)
(58,51,2)
(54,36,2)
(57,51,2)
(53,56,2)
(45,51,2)
(54,42,2)
(28,53,2)
(56,2,2)
(52,27,2)
(28,51,2)
(17,51,2)
(28,7,2)
(15,51,2)
(40,51,2)
(23,51,2)
(30,36,2)
(1,57,2)
(5,51,2)
(1,51,2)
-----------------------------------
(0, sizeof(int)
(1,(int *)
(2,sizeof(int)
(3,exit(-1)
(4,if (data == NULL)
(5,data[0])
(6,5)
(7,int *)
(8,data)
(9,)
(10,printIntLine(data[0])
(11,)
(12,int *)
(13,printIntLine(data[0])
(14,data)
(15,sizeof(int)
(16,if(globalReturnsTrueOrFalse()
(17,data[0])
(18,data = NULL)
(19,data)
(20,100)
(21,100)
(22,data[0] = 5)
(23,0)
(24,int)
(25,1)
(26,data)
(27,data == NULL)
(28,(int *)
(29,data = (int *)
(30,data[0])
(31,0)
(32,data)
(33,data)
(34,data)
(35,0)
(36,data = (int *)
(37,5)
(38,if(globalReturnsTrueOrFalse()
(39,data)
(40,0)
(41,NULL)
(42,globalReturnsTrueOrFalse()
(43,)
(44,data)
(45,data[0] = 5)
(46,)
(47,)
(48,data)
(49,NULL)
(50,data[0])
(51,globalReturnsTrueOrFalse()
(52,-1)
(53,ALLOCA(100*sizeof(int)
(54,free(data)
(55,RET)
(56,100*sizeof(int)
(57,calloc(100, sizeof(int)
(58,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
