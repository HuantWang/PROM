-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
51,53
51,54
52,53
53,54
53,55
55,56
55,57
55,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
78,79
80,81
82,83
82,84
83,84
84,85
84,86
86,87
86,88
86,89
89,90
90,91
91,92
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,56,57,59,63,66,68,72,74,79,81,85,87,88,92,93
-----computeFrom-----
35,36
35,37
61,62
61,63
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_32_bad()
CWE401_Memory_Leak__strdup_char_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(23,20,0)
(40,27,0)
(21,9,0)
(38,13,0)
(18,34,0)
(31,1,0)
(13,38,0)
(32,34,0)
(27,14,0)
(14,27,0)
(41,30,0)
(35,33,0)
(13,34,0)
(25,32,0)
(41,37,0)
(33,34,0)
(19,11,0)
(9,11,0)
(17,1,0)
(16,13,0)
(15,27,0)
(10,27,0)
(22,34,0)
(26,41,0)
(30,33,0)
(29,37,0)
(33,35,0)
(10,25,0)
(37,34,0)
(12,32,0)
(42,13,0)
(0,14,0)
(8,30,0)
(4,20,0)
(36,25,0)
(7,34,0)
(3,38,0)
(39,16,0)
(28,40,0)
(16,40,0)
(5,33,0)
(2,10,0)
(1,34,0)
(11,13,0)
(20,25,0)
(24,35,0)
(11,9,0)
(14,20,0)
(27,25,0)
(30,41,0)
(40,32,0)
(9,32,0)
(14,20,1)
(40,28,1)
(20,4,1)
(30,33,1)
(3,42,1)
(0,15,1)
(17,33,1)
(14,0,1)
(8,26,1)
(35,24,1)
(13,38,1)
(24,5,1)
(21,1,1)
(11,19,1)
(16,13,1)
(38,3,1)
(19,21,1)
(11,13,1)
(41,30,1)
(1,31,1)
(10,27,1)
(10,2,1)
(6,41,1)
(2,27,1)
(27,14,1)
(39,10,1)
(40,27,1)
(5,13,1)
(31,17,1)
(15,20,1)
(16,39,1)
(28,16,1)
(33,35,1)
(30,8,1)
(4,23,1)
(23,9,1)
(9,11,1)
(26,40,1)
(33,35,2)
(40,27,2)
(27,14,2)
(11,13,2)
(10,27,2)
(41,30,2)
(16,13,2)
(14,20,2)
(9,11,2)
(13,38,2)
(30,33,2)
-----------------------------------
(0,myString)
(1,data = NULL)
(2,data)
(3,data)
(4,"myString")
(5,dataPtr2)
(6,RET)
(7,data)
(8,dataPtr2)
(9,* data = *dataPtr1)
(10,printLine(data)
(11,*dataPtr1)
(12,data)
(13,* *dataPtr1 = &data)
(14,strdup(myString)
(15,data)
(16,*dataPtr1)
(17,data)
(18,dataPtr2)
(19,dataPtr1)
(20,myString[] = "myString")
(21,data)
(22,dataPtr1)
(23,myString)
(24,data)
(25,)
(26,data)
(27,data = strdup(myString)
(28,data)
(29,data)
(30,*dataPtr2)
(31,NULL)
(32,)
(33,* *dataPtr2 = &data)
(34,)
(35,&data)
(36,myString)
(37,)
(38,&data)
(39,dataPtr1)
(40,*dataPtr1 = data)
(41,* data = *dataPtr2)
(42,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
