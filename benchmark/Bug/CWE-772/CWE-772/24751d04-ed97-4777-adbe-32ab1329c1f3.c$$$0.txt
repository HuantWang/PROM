-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_13_bad()
{
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
71,74
72,73
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
89,91
89,92
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,51,52,53,57,60,61,65,68,70,73,75,78,81,82,86,88,94,95,96,100,103,104,108,110
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
48,49
48,50
63,64
63,65
76,77
76,78
84,85
84,86
91,92
91,93
-----guardedBy-----
86,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_13_bad(){    if(GLOBAL_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_13_bad()
CWE401_Memory_Leak__malloc_realloc_int_13_bad
{    if(GLOBAL_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(GLOBAL_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(26,59,0)
(9,59,0)
(0,58,0)
(39,49,0)
(55,54,0)
(30,44,0)
(6,30,0)
(59,41,0)
(31,43,0)
(1,49,0)
(28,44,0)
(56,32,0)
(56,18,0)
(30,13,0)
(46,33,0)
(24,37,0)
(54,35,0)
(7,34,0)
(3,34,0)
(18,56,0)
(12,41,0)
(35,21,0)
(45,42,0)
(49,27,0)
(29,30,0)
(50,39,0)
(43,44,0)
(15,6,0)
(26,37,0)
(60,6,0)
(58,37,0)
(5,24,0)
(50,33,0)
(33,50,0)
(38,42,0)
(43,31,0)
(40,14,0)
(59,58,0)
(13,30,0)
(35,54,0)
(4,1,0)
(41,44,0)
(57,35,0)
(14,1,0)
(14,41,0)
(59,30,0)
(1,44,0)
(16,13,0)
(59,26,0)
(19,44,0)
(49,39,0)
(53,29,0)
(54,13,0)
(25,21,0)
(22,31,0)
(54,1,0)
(8,59,0)
(47,18,0)
(2,23,0)
(21,35,0)
(24,30,0)
(36,14,0)
(17,31,0)
(44,52,0)
(39,50,0)
(48,30,0)
(31,41,0)
(42,1,0)
(11,44,0)
(13,16,0)
(51,50,0)
(49,1,0)
(20,29,0)
(31,1,0)
(6,58,0)
(27,49,0)
(13,54,0)
(8,58,1)
(57,55,1)
(25,57,1)
(47,42,1)
(33,46,1)
(0,6,1)
(51,4,1)
(29,53,1)
(38,1,1)
(41,12,1)
(53,20,1)
(9,8,1)
(30,13,1)
(59,41,1)
(3,7,1)
(10,24,1)
(20,30,1)
(12,14,1)
(48,43,1)
(46,51,1)
(17,22,1)
(24,30,1)
(6,30,1)
(21,25,1)
(4,34,1)
(14,36,1)
(54,1,1)
(54,35,1)
(10,34,1)
(14,1,1)
(40,42,1)
(50,33,1)
(42,1,1)
(1,49,1)
(59,58,1)
(40,56,1)
(39,50,1)
(18,47,1)
(34,3,1)
(59,9,1)
(60,15,1)
(59,30,1)
(6,60,1)
(42,45,1)
(43,31,1)
(26,59,1)
(5,26,1)
(58,0,1)
(10,29,1)
(24,5,1)
(31,41,1)
(29,30,1)
(13,16,1)
(49,39,1)
(35,21,1)
(45,38,1)
(15,29,1)
(49,27,1)
(31,17,1)
(56,18,1)
(36,40,1)
(13,54,1)
(22,41,1)
(55,48,1)
(31,1,1)
(42,1,2)
(51,34,2)
(50,33,2)
(31,34,2)
(13,54,2)
(18,42,2)
(57,34,2)
(25,34,2)
(48,34,2)
(56,42,2)
(55,34,2)
(1,34,2)
(54,1,2)
(12,34,2)
(33,34,2)
(9,29,2)
(35,34,2)
(59,58,2)
(40,34,2)
(22,34,2)
(6,29,2)
(0,29,2)
(29,34,2)
(43,31,2)
(31,41,2)
(42,34,2)
(14,34,2)
(54,34,2)
(38,34,2)
(4,34,2)
(53,34,2)
(26,59,2)
(17,34,2)
(30,34,2)
(29,30,2)
(50,34,2)
(6,30,2)
(21,34,2)
(30,13,2)
(20,34,2)
(60,29,2)
(59,29,2)
(24,30,2)
(41,34,2)
(58,29,2)
(49,27,2)
(47,42,2)
(56,18,2)
(39,50,2)
(36,34,2)
(35,21,2)
(59,30,2)
(46,34,2)
(43,34,2)
(24,29,2)
(31,1,2)
(13,34,2)
(5,29,2)
(13,16,2)
(49,39,2)
(14,1,2)
(45,34,2)
(15,29,2)
(8,29,2)
(1,49,2)
(59,41,2)
(49,34,2)
(54,35,2)
(26,29,2)
(39,34,2)
-----------------------------------
(0,10)
(1,* data = (int *)
(2,if(GLOBAL_CONST_FIVE==5)
(3,5)
(4,data)
(5,data)
(6,data[0])
(7,GLOBAL_CONST_FIVE)
(8,data)
(9,0)
(10,RET)
(11,data)
(12,5)
(13,(int *)
(14,data[0])
(15,data)
(16,int *)
(17,0)
(18,-1)
(19,if (data == NULL)
(20,data)
(21,sizeof(int)
(22,data)
(23,)
(24,free(data)
(25,int)
(26,printIntLine(data[0])
(27,int *)
(28,if (data != NULL)
(29,data != NULL)
(30,data = (int *)
(31,data[0])
(32,)
(33,sizeof(int)
(34,GLOBAL_CONST_FIVE==5)
(35,(130000)
(36,0)
(37,)
(38,data)
(39,malloc(100*sizeof(int)
(40,data)
(41,data[0] = 5)
(42,data == NULL)
(43,printIntLine(data[0])
(44,)
(45,NULL)
(46,int)
(47,1)
(48,data)
(49,(int *)
(50,100*sizeof(int)
(51,100)
(52,)
(53,NULL)
(54,realloc(data, (130000)
(55,data)
(56,exit(-1)
(57,130000)
(58,data[0] = 10)
(59,data[0])
(60,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
