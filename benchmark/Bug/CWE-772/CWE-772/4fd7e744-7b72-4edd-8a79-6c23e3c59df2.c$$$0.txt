-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_18_bad()
{
    char * data;
    data = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
68,69
68,70
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,67,69,70
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_18_bad(){    char * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__char_malloc_18_bad()
CWE401_Memory_Leak__char_malloc_18_bad
{    char * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));
source
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation */    ;
sink
;
-----joern-----
(12,23,0)
(9,23,0)
(5,22,0)
(11,30,0)
(13,23,0)
(2,20,0)
(18,19,0)
(6,12,0)
(30,24,0)
(2,12,0)
(26,23,0)
(4,22,0)
(0,19,0)
(10,23,0)
(2,28,0)
(24,31,0)
(3,12,0)
(27,23,0)
(8,5,0)
(19,12,0)
(7,23,0)
(21,12,0)
(6,23,0)
(25,21,0)
(28,22,0)
(12,2,0)
(15,23,0)
(20,2,0)
(28,2,0)
(16,27,0)
(14,6,0)
(21,23,0)
(22,5,0)
(1,6,0)
(24,30,0)
(22,28,0)
(17,27,0)
(19,0,1)
(21,12,1)
(11,19,1)
(25,6,1)
(3,26,1)
(17,16,1)
(18,12,1)
(1,19,1)
(12,2,1)
(5,8,1)
(28,22,1)
(8,4,1)
(6,12,1)
(2,20,1)
(2,28,1)
(0,18,1)
(1,24,1)
(4,3,1)
(27,17,1)
(21,25,1)
(26,27,1)
(14,1,1)
(6,14,1)
(19,12,1)
(24,30,1)
(29,7,1)
(22,5,1)
(7,21,1)
(30,11,1)
(24,19,2)
(24,30,2)
(2,28,2)
(12,2,2)
(19,12,2)
(22,5,2)
(30,19,2)
(6,12,2)
(2,20,2)
(11,19,2)
(21,12,2)
(28,22,2)
-----------------------------------
(0,NULL)
(1,data)
(2,(char *)
(3,data)
(4,100)
(5,sizeof(char)
(6,strcpy(data, "A String")
(7,goto sink;)
(8,char)
(9,data)
(10,sink:)
(11,1)
(12,data = (char *)
(13,if (data == NULL)
(14,"A String")
(15,source:)
(16,data)
(17,NULL)
(18,data)
(19,data == NULL)
(20,char *)
(21,printLine(data)
(22,100*sizeof(char)
(23,)
(24,exit(-1)
(25,data)
(26,goto source;)
(27,data = NULL)
(28,malloc(100*sizeof(char)
(29,RET)
(30,-1)
(31,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
