-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_17_bad()
{
    int i,j;
    twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
91,92
92,93
92,94
93,94
95,96
96,97
96,98
97,98
100,101
100,102
100,103
100,104
101,102
102,103
102,104
103,104
106,107
106,108
107,108
110,111
111,112
113,114
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,63,65,70,72,78,79,80,81,87,88,89,90,94,98,99,104,105,108,109,112,114
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
74,75
74,76
83,84
83,85
102,103
102,104
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_17_bad(){    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_17_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_17_bad
{    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(40,39,0)
(59,13,0)
(33,25,0)
(7,46,0)
(47,54,0)
(29,6,0)
(27,9,0)
(54,5,0)
(19,33,0)
(17,2,0)
(62,34,0)
(14,59,0)
(38,36,0)
(39,0,0)
(26,25,0)
(39,22,0)
(30,19,0)
(20,9,0)
(31,13,0)
(15,1,0)
(8,58,0)
(1,13,0)
(49,9,0)
(36,38,0)
(7,62,0)
(33,19,0)
(50,9,0)
(44,23,0)
(42,23,0)
(61,54,0)
(56,26,0)
(60,46,0)
(16,29,0)
(41,5,0)
(54,26,0)
(3,6,0)
(25,55,0)
(46,26,0)
(25,26,0)
(51,46,0)
(62,7,0)
(4,9,0)
(0,39,0)
(23,6,0)
(0,26,0)
(5,54,0)
(21,0,0)
(35,2,0)
(28,34,0)
(22,34,0)
(43,34,0)
(57,28,0)
(5,28,0)
(32,9,0)
(25,33,0)
(52,59,0)
(45,13,0)
(58,19,0)
(12,22,0)
(10,50,0)
(24,6,0)
(18,50,0)
(2,26,0)
(53,38,0)
(55,25,0)
(46,7,0)
(19,58,0)
(26,34,0)
(36,11,0)
(37,0,0)
(21,37,1)
(13,31,1)
(12,39,1)
(5,41,1)
(37,28,1)
(17,26,1)
(62,7,1)
(26,25,1)
(56,59,1)
(39,0,1)
(40,0,1)
(19,58,1)
(22,12,1)
(16,23,1)
(6,24,1)
(2,35,1)
(5,54,1)
(14,13,1)
(46,26,1)
(25,55,1)
(29,6,1)
(59,52,1)
(59,13,1)
(1,13,1)
(24,3,1)
(29,16,1)
(47,61,1)
(15,62,1)
(58,8,1)
(61,2,1)
(44,29,1)
(52,14,1)
(25,33,1)
(28,57,1)
(0,21,1)
(30,56,1)
(14,1,1)
(44,6,1)
(35,17,1)
(8,30,1)
(10,18,1)
(1,15,1)
(48,23,1)
(2,26,1)
(36,38,1)
(41,54,1)
(42,44,1)
(54,47,1)
(23,42,1)
(39,40,1)
(46,60,1)
(38,53,1)
(33,19,1)
(3,59,1)
(23,6,1)
(54,26,1)
(45,50,1)
(57,5,1)
(53,2,1)
(61,36,1)
(7,46,1)
(31,45,1)
(51,22,1)
(60,51,1)
(50,10,1)
(0,26,1)
(16,23,2)
(46,59,2)
(2,26,2)
(36,2,2)
(39,59,2)
(15,59,2)
(8,59,2)
(62,7,2)
(60,59,2)
(62,59,2)
(44,23,2)
(23,6,2)
(0,59,2)
(59,13,2)
(35,59,2)
(0,26,2)
(1,13,2)
(51,59,2)
(52,59,2)
(25,59,2)
(5,59,2)
(42,23,2)
(25,55,2)
(19,58,2)
(38,2,2)
(7,59,2)
(33,19,2)
(12,59,2)
(40,59,2)
(57,59,2)
(29,23,2)
(28,59,2)
(2,59,2)
(14,59,2)
(39,0,2)
(17,59,2)
(53,2,2)
(37,59,2)
(7,46,2)
(33,59,2)
(59,59,2)
(46,26,2)
(23,23,2)
(1,59,2)
(47,59,2)
(56,59,2)
(29,6,2)
(61,59,2)
(26,25,2)
(22,59,2)
(36,38,2)
(21,59,2)
(30,59,2)
(54,59,2)
(58,59,2)
(25,33,2)
(54,26,2)
(26,59,2)
(19,59,2)
(41,59,2)
(5,54,2)
-----------------------------------
(0,data[0])
(1,i++)
(2,data == NULL)
(3,j)
(4,for(j = 0; j < 1; j++)
(5,data[0].intOne)
(6,j = 0)
(7,&data[0])
(8,twoIntsStruct)
(9,)
(10,NULL)
(11,)
(12,0)
(13,i = 0)
(14,i)
(15,i)
(16,j)
(17,data)
(18,data)
(19,100*sizeof(twoIntsStruct)
(20,j)
(21,0)
(22,data[0].intTwo = 0)
(23,j < 1)
(24,0)
(25,(twoIntsStruct *)
(26,data = (twoIntsStruct *)
(27,for(i = 0; i < 1; i++)
(28,data[0].intOne = 0)
(29,j++)
(30,100)
(31,0)
(32,data)
(33,malloc(100*sizeof(twoIntsStruct)
(34,)
(35,NULL)
(36,exit(-1)
(37,data)
(38,-1)
(39,data[0].intTwo)
(40,intTwo)
(41,intOne)
(42,1)
(43,if (data == NULL)
(44,j)
(45,i)
(46,data[0])
(47,0)
(48,RET)
(49,i)
(50,data = NULL)
(51,data)
(52,1)
(53,1)
(54,data[0])
(55,twoIntsStruct *)
(56,data)
(57,0)
(58,sizeof(twoIntsStruct)
(59,i < 1)
(60,0)
(61,data)
(62,printStructLine(&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
