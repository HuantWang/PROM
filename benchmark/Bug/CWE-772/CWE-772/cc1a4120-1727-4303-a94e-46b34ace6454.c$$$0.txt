-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_11_bad()
{
    if(globalReturnsTrue())
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105
-----computeFrom-----
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_11_bad(){    if(globalReturnsTrue())    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_11_bad()
CWE401_Memory_Leak__malloc_realloc_char_11_bad
{    if(globalReturnsTrue())    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(globalReturnsTrue())    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(37,10,0)
(26,35,0)
(46,9,0)
(21,25,0)
(27,48,0)
(43,17,0)
(33,17,0)
(27,13,0)
(44,32,0)
(19,4,0)
(24,1,0)
(14,28,0)
(30,35,0)
(19,28,0)
(33,36,0)
(16,17,0)
(30,10,0)
(45,14,0)
(50,13,0)
(25,21,0)
(17,4,0)
(2,30,0)
(22,43,0)
(34,39,0)
(8,30,0)
(43,9,0)
(24,4,0)
(28,12,0)
(15,27,0)
(29,18,0)
(13,27,0)
(17,33,0)
(39,35,0)
(4,28,0)
(4,24,0)
(40,28,0)
(35,28,0)
(49,4,0)
(7,19,0)
(20,18,0)
(18,4,0)
(14,4,0)
(1,24,0)
(23,47,0)
(41,37,0)
(37,35,0)
(36,33,0)
(11,19,0)
(35,33,0)
(33,35,0)
(6,28,0)
(25,3,0)
(0,39,0)
(32,35,0)
(48,27,0)
(9,43,0)
(17,43,0)
(38,28,0)
(24,48,0)
(48,24,0)
(5,21,0)
(32,10,0)
(30,35,1)
(27,13,1)
(11,25,1)
(14,45,1)
(31,32,1)
(13,50,1)
(8,2,1)
(11,18,1)
(31,39,1)
(29,20,1)
(24,1,1)
(33,36,1)
(9,46,1)
(45,19,1)
(2,39,1)
(4,24,1)
(22,16,1)
(19,4,1)
(20,4,1)
(24,48,1)
(32,35,1)
(14,4,1)
(18,29,1)
(17,4,1)
(48,27,1)
(49,42,1)
(21,5,1)
(19,7,1)
(17,43,1)
(39,35,1)
(15,49,1)
(44,37,1)
(25,21,1)
(35,33,1)
(31,42,1)
(34,0,1)
(0,35,1)
(32,44,1)
(37,35,1)
(41,30,1)
(5,18,1)
(50,15,1)
(16,26,1)
(30,8,1)
(18,4,1)
(33,17,1)
(39,34,1)
(26,14,1)
(46,22,1)
(7,11,1)
(43,9,1)
(37,41,1)
(19,42,2)
(14,42,2)
(19,4,2)
(2,39,2)
(33,42,2)
(18,42,2)
(24,48,2)
(37,39,2)
(11,42,2)
(30,35,2)
(7,42,2)
(43,9,2)
(14,4,2)
(25,18,2)
(17,4,2)
(29,42,2)
(35,42,2)
(5,18,2)
(13,42,2)
(24,42,2)
(17,43,2)
(9,42,2)
(15,42,2)
(26,42,2)
(34,42,2)
(48,42,2)
(45,42,2)
(25,21,2)
(33,36,2)
(37,35,2)
(39,42,2)
(41,39,2)
(4,24,2)
(33,17,2)
(50,42,2)
(21,18,2)
(48,27,2)
(8,39,2)
(17,42,2)
(0,42,2)
(4,42,2)
(27,42,2)
(20,42,2)
(46,42,2)
(43,42,2)
(32,35,2)
(35,33,2)
(49,42,2)
(27,13,2)
(39,35,2)
(16,42,2)
(24,1,2)
(18,4,2)
(44,39,2)
(22,42,2)
(32,39,2)
(30,39,2)
-----------------------------------
(0,data)
(1,char *)
(2,data)
(3,)
(4,* data = (char *)
(5,1)
(6,data)
(7,"A String")
(8,"New String")
(9,sizeof(char)
(10,)
(11,data)
(12,)
(13,sizeof(char)
(14,printLine(data)
(15,100)
(16,data)
(17,realloc(data, (130000)
(18,data == NULL)
(19,strcpy(data, "A String")
(20,data)
(21,-1)
(22,130000)
(23,if(globalReturnsTrue()
(24,(char *)
(25,exit(-1)
(26,data)
(27,100*sizeof(char)
(28,)
(29,NULL)
(30,strcpy(data, "New String")
(31,RET)
(32,free(data)
(33,(char *)
(34,NULL)
(35,data = (char *)
(36,char *)
(37,printLine(data)
(38,if (data == NULL)
(39,data != NULL)
(40,if (data != NULL)
(41,data)
(42,globalReturnsTrue()
(43,(130000)
(44,data)
(45,data)
(46,char)
(47,)
(48,malloc(100*sizeof(char)
(49,data)
(50,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
