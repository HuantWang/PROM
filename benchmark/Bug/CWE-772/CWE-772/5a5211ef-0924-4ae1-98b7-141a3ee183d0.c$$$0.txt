-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,69,71
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_11_bad()
CWE401_Memory_Leak__wchar_t_calloc_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(26,20,0)
(4,8,0)
(25,11,0)
(16,0,0)
(2,8,0)
(0,16,0)
(19,0,0)
(5,19,0)
(29,0,0)
(1,12,0)
(28,16,0)
(27,12,0)
(23,11,0)
(23,16,0)
(14,20,0)
(16,28,0)
(1,17,0)
(24,23,0)
(0,19,0)
(3,23,0)
(8,23,0)
(10,20,0)
(16,23,0)
(21,3,0)
(15,20,0)
(12,1,0)
(6,26,0)
(9,26,0)
(3,11,0)
(16,28,1)
(0,19,1)
(1,12,1)
(26,9,1)
(4,2,1)
(27,8,1)
(9,6,1)
(8,4,1)
(13,26,1)
(23,16,1)
(3,23,1)
(24,13,1)
(5,29,1)
(29,24,1)
(21,1,1)
(18,13,1)
(12,27,1)
(7,18,1)
(21,8,1)
(3,21,1)
(16,0,1)
(18,3,1)
(2,23,1)
(19,5,1)
(8,23,1)
(16,28,2)
(2,13,2)
(21,13,2)
(0,13,2)
(8,13,2)
(23,13,2)
(16,0,2)
(16,13,2)
(12,8,2)
(24,13,2)
(29,13,2)
(5,13,2)
(8,23,2)
(1,8,2)
(1,12,2)
(0,19,2)
(3,13,2)
(3,23,2)
(4,13,2)
(27,8,2)
(19,13,2)
(23,16,2)
-----------------------------------
(0,calloc(100, sizeof(wchar_t)
(1,exit(-1)
(2,data)
(3,printWLine(data)
(4,NULL)
(5,wchar_t)
(6,data)
(7,RET)
(8,data == NULL)
(9,NULL)
(10,data)
(11,)
(12,-1)
(13,globalReturnsTrue()
(14,if(globalReturnsTrue()
(15,if(globalReturnsTrue()
(16,(wchar_t *)
(17,)
(18,globalReturnsTrue()
(19,sizeof(wchar_t)
(20,)
(21,data)
(22, sizeof(wchar_t)
(23,data = (wchar_t *)
(24,data)
(25,if (data == NULL)
(26,data = NULL)
(27,1)
(28,wchar_t *)
(29,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
