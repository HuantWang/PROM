-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_14_bad()
{
    char * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_14_bad(){    char * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_14_bad()
CWE401_Memory_Leak__char_calloc_14_bad
{    char * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(5,35,0)
(10,18,0)
(33,8,0)
(30,16,0)
(0,31,0)
(36,33,0)
(19,4,0)
(19,3,0)
(2,3,0)
(6,36,0)
(5,21,0)
(27,9,0)
(35,5,0)
(26,23,0)
(21,5,0)
(15,31,0)
(25,16,0)
(7,21,0)
(4,5,0)
(1,4,0)
(4,3,0)
(14,23,0)
(34,25,0)
(12,16,0)
(11,16,0)
(21,32,0)
(33,36,0)
(5,4,0)
(20,19,0)
(32,21,0)
(13,25,0)
(23,4,0)
(18,4,0)
(24,32,0)
(22,18,0)
(18,3,0)
(29,9,0)
(27,29,1)
(23,4,1)
(0,25,1)
(24,7,1)
(21,32,1)
(29,19,1)
(32,24,1)
(10,33,1)
(15,0,1)
(5,21,1)
(1,31,1)
(19,4,1)
(5,35,1)
(36,6,1)
(10,23,1)
(25,13,1)
(19,20,1)
(22,10,1)
(18,4,1)
(26,14,1)
(14,4,1)
(7,1,1)
(23,26,1)
(29,31,1)
(13,34,1)
(20,18,1)
(9,27,1)
(33,36,1)
(28,9,1)
(18,22,1)
(4,5,1)
(6,23,1)
(31,15,1)
(5,35,2)
(21,32,2)
(10,31,2)
(5,21,2)
(1,31,2)
(20,31,2)
(23,4,2)
(14,31,2)
(7,31,2)
(21,31,2)
(19,4,2)
(18,4,2)
(26,31,2)
(5,31,2)
(4,31,2)
(23,31,2)
(33,36,2)
(19,31,2)
(32,31,2)
(36,23,2)
(24,31,2)
(22,31,2)
(4,5,2)
(6,23,2)
(18,31,2)
(33,23,2)
-----------------------------------
(0,globalFive)
(1,data)
(2,if (data == NULL)
(3,)
(4,data = (char *)
(5,(char *)
(6,1)
(7,100)
(8,)
(9,globalFive==5)
(10,data)
(11,if(globalFive==5)
(12,if(globalFive==5)
(13,NULL)
(14,data)
(15,5)
(16,)
(17, sizeof(char)
(18,strcpy(data, "A String")
(19,printLine(data)
(20,data)
(21,calloc(100, sizeof(char)
(22,"A String")
(23,data == NULL)
(24,char)
(25,data = NULL)
(26,NULL)
(27,5)
(28,RET)
(29,globalFive)
(30,data)
(31,globalFive==5)
(32,sizeof(char)
(33,exit(-1)
(34,data)
(35,char *)
(36,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
