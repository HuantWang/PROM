-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_31_bad()
{
    wchar_t * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
50,53
51,52
53,54
56,57
57,58
57,59
58,59
60,61
62,63
62,64
62,65
63,64
64,65
64,66
66,67
66,68
66,69
69,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
78,79
79,80
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,59,61,65,67,68,71,74,76,77,80,81
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_31_bad(){    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_31_bad()
CWE401_Memory_Leak__wchar_t_malloc_31_bad
{    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(18,2,0)
(5,0,0)
(21,32,0)
(33,6,0)
(29,12,0)
(20,2,0)
(24,9,0)
(6,1,0)
(22,7,0)
(30,4,0)
(25,29,0)
(10,7,0)
(13,31,0)
(29,7,0)
(0,12,0)
(6,12,0)
(12,6,0)
(6,33,0)
(23,4,0)
(1,6,0)
(33,4,0)
(4,33,0)
(28,7,0)
(32,0,0)
(31,14,0)
(14,31,0)
(3,30,0)
(27,9,0)
(14,16,0)
(32,9,0)
(0,9,0)
(2,12,0)
(9,7,0)
(15,12,0)
(12,7,0)
(4,30,0)
(19,0,0)
(11,22,0)
(8,32,0)
(17,22,0)
(29,12,1)
(26,32,1)
(5,29,1)
(15,22,1)
(29,25,1)
(18,20,1)
(2,18,1)
(13,2,1)
(2,12,1)
(6,1,1)
(31,13,1)
(32,0,1)
(21,8,1)
(11,17,1)
(30,3,1)
(4,30,1)
(0,19,1)
(19,5,1)
(25,14,1)
(25,2,1)
(8,0,1)
(32,21,1)
(20,12,1)
(12,6,1)
(6,33,1)
(33,4,1)
(3,23,1)
(23,15,1)
(0,12,1)
(22,11,1)
(14,31,1)
(12,6,2)
(31,2,2)
(14,31,2)
(0,12,2)
(2,12,2)
(33,4,2)
(13,2,2)
(29,12,2)
(6,1,2)
(32,0,2)
(6,33,2)
(4,30,2)
(14,2,2)
-----------------------------------
(0,* dataCopy = data)
(1,wchar_t *)
(2,data == NULL)
(3,wchar_t)
(4,100*sizeof(wchar_t)
(5,dataCopy)
(6,(wchar_t *)
(7,)
(8,data)
(9,)
(10,data)
(11,NULL)
(12,data = (wchar_t *)
(13,1)
(14,exit(-1)
(15,data)
(16,)
(17,data)
(18,NULL)
(19,data)
(20,data)
(21,dataCopy)
(22,data = NULL)
(23,100)
(24,data)
(25,data)
(26,RET)
(27,dataCopy)
(28,if (data == NULL)
(29,printWLine(data)
(30,sizeof(wchar_t)
(31,-1)
(32,* data = dataCopy)
(33,malloc(100*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
