-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_10_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,90,92
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_10_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_10_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_10_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(35,20,0)
(40,4,0)
(40,42,0)
(19,24,0)
(36,28,0)
(33,47,0)
(34,44,0)
(44,47,0)
(22,28,0)
(48,39,0)
(4,10,0)
(47,44,0)
(27,42,0)
(35,14,0)
(0,28,0)
(42,28,0)
(1,26,0)
(42,40,0)
(3,28,0)
(12,31,0)
(6,22,0)
(44,28,0)
(17,0,0)
(41,36,0)
(10,4,0)
(20,35,0)
(38,2,0)
(14,31,0)
(7,39,0)
(11,26,0)
(26,39,0)
(28,31,0)
(15,40,0)
(13,21,0)
(30,0,0)
(45,31,0)
(23,22,0)
(36,24,0)
(25,44,0)
(4,40,0)
(47,21,0)
(2,38,0)
(21,31,0)
(8,35,0)
(24,36,0)
(42,27,0)
(24,12,0)
(9,36,0)
(28,42,0)
(46,12,0)
(32,2,0)
(43,39,0)
(38,18,0)
(35,8,0)
(14,35,0)
(22,20,0)
(20,22,0)
(28,42,1)
(42,27,1)
(2,32,1)
(4,15,1)
(44,28,1)
(23,12,1)
(42,40,1)
(1,11,1)
(3,5,1)
(17,30,1)
(34,0,1)
(40,4,1)
(12,46,1)
(9,41,1)
(20,22,1)
(47,44,1)
(30,28,1)
(36,9,1)
(33,44,1)
(0,28,1)
(26,1,1)
(15,3,1)
(38,2,1)
(22,28,1)
(36,28,1)
(34,38,1)
(21,13,1)
(6,23,1)
(5,26,1)
(0,17,1)
(35,8,1)
(47,33,1)
(16,37,1)
(46,24,1)
(35,20,1)
(24,36,1)
(37,14,1)
(32,0,1)
(24,19,1)
(4,10,1)
(44,25,1)
(19,36,1)
(13,47,1)
(37,5,1)
(14,35,1)
(41,21,1)
(25,34,1)
(22,6,1)
(28,5,2)
(20,22,2)
(19,5,2)
(0,28,2)
(17,5,2)
(15,5,2)
(22,5,2)
(36,5,2)
(38,2,2)
(35,8,2)
(41,5,2)
(35,5,2)
(0,5,2)
(24,5,2)
(21,5,2)
(4,10,2)
(42,40,2)
(23,5,2)
(25,5,2)
(2,0,2)
(24,36,2)
(40,5,2)
(6,5,2)
(3,5,2)
(32,0,2)
(47,44,2)
(9,5,2)
(14,35,2)
(44,5,2)
(40,4,2)
(46,5,2)
(38,0,2)
(42,27,2)
(12,5,2)
(28,42,2)
(36,28,2)
(34,5,2)
(20,5,2)
(4,5,2)
(35,20,2)
(47,5,2)
(44,28,2)
(30,5,2)
(13,5,2)
(22,28,2)
(14,5,2)
(42,5,2)
(33,5,2)
-----------------------------------
(0,data == NULL)
(1,NULL)
(2,-1)
(3,data)
(4,sizeof(struct _twoIntsStruct)
(5,globalTrue)
(6,0)
(7,if(globalTrue)
(8,twoIntsStruct *)
(9,0)
(10,struct _twoIntsStruct)
(11,data)
(12,data[0].intTwo = 0)
(13,0)
(14,printStructLine((twoIntsStruct *)
(15,100)
(16,RET)
(17,NULL)
(18,)
(19,intTwo)
(20,&data[0])
(21,data[0].intOne = 0)
(22,data[0])
(23,data)
(24,data[0].intTwo)
(25,0)
(26,data = NULL)
(27,struct _twoIntsStruct *)
(28,data = (struct _twoIntsStruct *)
(29, sizeof(struct _twoIntsStruct)
(30,data)
(31,)
(32,1)
(33,intOne)
(34,data)
(35,(twoIntsStruct *)
(36,data[0])
(37,globalTrue)
(38,exit(-1)
(39,)
(40,calloc(100, sizeof(struct _twoIntsStruct)
(41,data)
(42,(struct _twoIntsStruct *)
(43,data)
(44,data[0])
(45,if (data == NULL)
(46,0)
(47,data[0].intOne)
(48,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
