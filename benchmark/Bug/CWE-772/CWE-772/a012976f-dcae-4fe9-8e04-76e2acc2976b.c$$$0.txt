-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_08_bad()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,67,68,72,74
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_08_bad(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_08_bad()
CWE401_Memory_Leak__int_malloc_08_bad
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,10,0)
(6,22,0)
(25,27,0)
(35,2,0)
(20,26,0)
(33,36,0)
(19,24,0)
(31,22,0)
(10,24,0)
(10,3,0)
(3,10,0)
(33,28,0)
(24,19,0)
(29,2,0)
(13,31,0)
(23,35,0)
(31,27,0)
(0,5,0)
(17,26,0)
(0,6,0)
(4,2,0)
(32,24,0)
(1,31,0)
(16,28,0)
(12,3,0)
(26,27,0)
(11,5,0)
(14,19,0)
(6,0,0)
(8,22,0)
(30,6,0)
(3,12,0)
(28,33,0)
(27,5,0)
(21,6,0)
(34,35,0)
(18,2,0)
(6,27,0)
(3,27,0)
(22,5,0)
(27,3,0)
(26,27,1)
(31,1,1)
(26,20,1)
(20,17,1)
(13,33,1)
(21,22,1)
(1,13,1)
(34,23,1)
(24,19,1)
(15,7,1)
(14,32,1)
(28,16,1)
(7,35,1)
(31,27,1)
(35,34,1)
(27,3,1)
(22,8,1)
(0,6,1)
(16,26,1)
(13,26,1)
(10,24,1)
(6,22,1)
(19,14,1)
(6,30,1)
(9,15,1)
(15,0,1)
(3,12,1)
(30,21,1)
(33,28,1)
(32,25,1)
(17,27,1)
(6,27,1)
(25,7,1)
(3,10,1)
(8,31,1)
(31,7,2)
(3,10,2)
(16,26,2)
(27,3,2)
(33,26,2)
(0,7,2)
(14,7,2)
(21,7,2)
(17,7,2)
(25,7,2)
(32,7,2)
(10,7,2)
(26,7,2)
(22,7,2)
(33,28,2)
(28,26,2)
(20,7,2)
(10,24,2)
(0,6,2)
(6,7,2)
(3,12,2)
(31,27,2)
(27,7,2)
(3,7,2)
(6,22,2)
(1,7,2)
(8,7,2)
(13,7,2)
(24,7,2)
(6,27,2)
(30,7,2)
(24,19,2)
(26,27,2)
(19,7,2)
-----------------------------------
(0,printIntLine(data[0])
(1,0)
(2,)
(3,(int *)
(4,if(staticReturnsTrue()
(5,)
(6,data[0])
(7,staticReturnsTrue()
(8,5)
(9,RET)
(10,malloc(100*sizeof(int)
(11,if (data == NULL)
(12,int *)
(13,data)
(14,int)
(15,staticReturnsTrue()
(16,1)
(17,data)
(18,if(staticReturnsTrue()
(19,sizeof(int)
(20,NULL)
(21,data)
(22,data[0] = 5)
(23,data)
(24,100*sizeof(int)
(25,data)
(26,data == NULL)
(27,data = (int *)
(28,-1)
(29,data)
(30,0)
(31,data[0])
(32,100)
(33,exit(-1)
(34,NULL)
(35,data = NULL)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
