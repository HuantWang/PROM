-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_13_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
85,87
86,87
89,90
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,87,88,90
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_13_bad(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_13_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_13_bad
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(5,2,0)
(32,33,0)
(46,42,0)
(36,2,0)
(33,0,0)
(17,25,0)
(49,23,0)
(33,32,0)
(44,1,0)
(40,8,0)
(24,21,0)
(14,2,0)
(39,49,0)
(22,14,0)
(6,44,0)
(11,25,0)
(14,32,0)
(12,30,0)
(35,20,0)
(35,14,0)
(48,13,0)
(17,36,0)
(50,23,0)
(28,42,0)
(8,14,0)
(0,33,0)
(3,2,0)
(3,20,0)
(7,35,0)
(45,13,0)
(29,35,0)
(25,14,0)
(19,30,0)
(20,35,0)
(10,32,0)
(1,44,0)
(43,25,0)
(32,14,0)
(13,14,0)
(23,2,0)
(9,0,0)
(16,33,0)
(1,31,0)
(47,36,0)
(8,49,0)
(26,21,0)
(37,27,0)
(4,30,0)
(18,27,0)
(42,30,0)
(38,8,0)
(32,10,0)
(49,8,0)
(15,17,0)
(20,3,0)
(25,17,0)
(24,26,1)
(9,16,1)
(40,36,1)
(13,14,1)
(6,13,1)
(17,25,1)
(46,28,1)
(0,9,1)
(29,7,1)
(11,43,1)
(38,40,1)
(25,11,1)
(20,35,1)
(39,8,1)
(27,18,1)
(32,33,1)
(50,49,1)
(37,3,1)
(33,0,1)
(49,39,1)
(49,8,1)
(36,47,1)
(22,21,1)
(48,14,1)
(13,45,1)
(21,24,1)
(23,50,1)
(1,44,1)
(8,38,1)
(3,20,1)
(43,13,1)
(45,48,1)
(16,22,1)
(35,29,1)
(25,14,1)
(47,17,1)
(44,6,1)
(26,42,1)
(32,10,1)
(8,14,1)
(7,23,1)
(14,32,1)
(43,1,1)
(18,37,1)
(41,27,1)
(35,14,1)
(17,15,1)
(37,21,1)
(15,25,1)
(42,46,1)
(39,21,2)
(9,21,2)
(11,21,2)
(32,10,2)
(23,21,2)
(47,21,2)
(49,21,2)
(20,21,2)
(36,21,2)
(8,21,2)
(8,14,2)
(43,21,2)
(25,21,2)
(13,14,2)
(1,13,2)
(25,14,2)
(38,21,2)
(33,21,2)
(50,21,2)
(1,44,2)
(45,21,2)
(48,21,2)
(22,21,2)
(29,21,2)
(17,25,2)
(13,21,2)
(0,21,2)
(35,21,2)
(14,32,2)
(40,21,2)
(6,13,2)
(33,0,2)
(16,21,2)
(20,35,2)
(14,21,2)
(15,21,2)
(3,20,2)
(17,21,2)
(3,21,2)
(7,21,2)
(35,14,2)
(44,13,2)
(32,33,2)
(49,8,2)
(32,21,2)
-----------------------------------
(0,sizeof(twoIntsStruct)
(1,exit(-1)
(2,)
(3,printStructLine(&data[0])
(4,if(GLOBAL_CONST_FIVE==5)
(5,if (data == NULL)
(6,1)
(7,data)
(8,data[0])
(9,twoIntsStruct)
(10,twoIntsStruct *)
(11,0)
(12,if(GLOBAL_CONST_FIVE==5)
(13,data == NULL)
(14,data = (twoIntsStruct *)
(15,intOne)
(16,100)
(17,data[0].intOne)
(18,5)
(19,data)
(20,&data[0])
(21,GLOBAL_CONST_FIVE==5)
(22,data)
(23,data[0].intTwo = 0)
(24,5)
(25,data[0])
(26,GLOBAL_CONST_FIVE)
(27,GLOBAL_CONST_FIVE==5)
(28,data)
(29,0)
(30,)
(31,)
(32,(twoIntsStruct *)
(33,calloc(100, sizeof(twoIntsStruct)
(34, sizeof(twoIntsStruct)
(35,data[0])
(36,data[0].intOne = 0)
(37,GLOBAL_CONST_FIVE)
(38,0)
(39,intTwo)
(40,data)
(41,RET)
(42,data = NULL)
(43,data)
(44,-1)
(45,NULL)
(46,NULL)
(47,0)
(48,data)
(49,data[0].intTwo)
(50,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
