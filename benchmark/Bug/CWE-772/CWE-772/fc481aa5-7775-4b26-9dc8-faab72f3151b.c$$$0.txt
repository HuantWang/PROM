-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_06_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
95,96
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,94,96
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_06_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_06_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_06_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,5,0)
(29,36,0)
(23,38,0)
(3,40,0)
(52,30,0)
(22,50,0)
(10,51,0)
(45,21,0)
(40,32,0)
(50,36,0)
(41,36,0)
(28,32,0)
(16,9,0)
(48,50,0)
(31,2,0)
(4,47,0)
(21,23,0)
(21,2,0)
(1,40,0)
(46,48,0)
(24,52,0)
(43,5,0)
(38,20,0)
(2,21,0)
(38,42,0)
(25,7,0)
(48,47,0)
(13,32,0)
(38,23,0)
(51,10,0)
(47,48,0)
(37,9,0)
(11,52,0)
(2,29,0)
(6,41,0)
(44,51,0)
(20,34,0)
(9,23,0)
(19,34,0)
(47,23,0)
(30,6,0)
(33,36,0)
(39,21,0)
(52,23,0)
(20,38,0)
(12,20,0)
(23,36,0)
(8,7,0)
(10,18,0)
(34,20,0)
(26,32,0)
(49,29,0)
(42,38,0)
(0,6,0)
(30,52,0)
(6,30,0)
(14,47,0)
(34,19,0)
(27,23,0)
(41,6,0)
(6,0,0)
(14,10,1)
(16,37,1)
(40,3,1)
(51,44,1)
(9,16,1)
(52,23,1)
(49,2,1)
(2,31,1)
(43,41,1)
(4,14,1)
(38,20,1)
(14,9,1)
(11,24,1)
(39,45,1)
(44,9,1)
(31,21,1)
(41,6,1)
(29,49,1)
(2,21,1)
(6,0,1)
(47,23,1)
(17,5,1)
(47,4,1)
(15,43,1)
(34,12,1)
(48,47,1)
(46,47,1)
(34,19,1)
(10,51,1)
(8,25,1)
(30,52,1)
(5,15,1)
(6,30,1)
(27,7,1)
(21,23,1)
(22,48,1)
(23,38,1)
(3,1,1)
(38,42,1)
(24,29,1)
(20,34,1)
(50,22,1)
(37,23,1)
(9,23,1)
(45,50,1)
(25,40,1)
(48,46,1)
(21,39,1)
(43,7,1)
(12,27,1)
(52,11,1)
(7,8,1)
(31,7,2)
(46,7,2)
(21,7,2)
(2,7,2)
(23,7,2)
(2,21,2)
(38,20,2)
(14,7,2)
(12,7,2)
(30,7,2)
(48,47,2)
(47,23,2)
(27,7,2)
(10,9,2)
(6,7,2)
(50,7,2)
(41,6,2)
(34,7,2)
(30,52,2)
(24,7,2)
(52,23,2)
(41,7,2)
(10,51,2)
(45,7,2)
(21,23,2)
(48,7,2)
(22,7,2)
(16,7,2)
(38,42,2)
(6,30,2)
(29,7,2)
(47,7,2)
(6,0,2)
(37,7,2)
(9,23,2)
(38,7,2)
(51,9,2)
(20,34,2)
(44,9,2)
(9,7,2)
(52,7,2)
(39,7,2)
(34,19,2)
(11,7,2)
(23,38,2)
(49,7,2)
(20,7,2)
(4,7,2)
-----------------------------------
(0,twoIntsStruct *)
(1,data)
(2,data[0].intTwo)
(3,NULL)
(4,0)
(5,STATIC_CONST_FIVE==5)
(6,(twoIntsStruct *)
(7,STATIC_CONST_FIVE==5)
(8,5)
(9,data == NULL)
(10,exit(-1)
(11,0)
(12,100)
(13,if(STATIC_CONST_FIVE==5)
(14,data)
(15,5)
(16,NULL)
(17,RET)
(18,)
(19,struct _twoIntsStruct)
(20,calloc(100, sizeof(struct _twoIntsStruct)
(21,data[0])
(22,0)
(23,data = (struct _twoIntsStruct *)
(24,data)
(25,STATIC_CONST_FIVE)
(26,if(STATIC_CONST_FIVE==5)
(27,data)
(28,data)
(29,data[0].intTwo = 0)
(30,&data[0])
(31,intTwo)
(32,)
(33,if (data == NULL)
(34,sizeof(struct _twoIntsStruct)
(35, sizeof(struct _twoIntsStruct)
(36,)
(37,data)
(38,(struct _twoIntsStruct *)
(39,0)
(40,data = NULL)
(41,printStructLine((twoIntsStruct *)
(42,struct _twoIntsStruct *)
(43,STATIC_CONST_FIVE)
(44,1)
(45,data)
(46,intOne)
(47,data[0])
(48,data[0].intOne)
(49,0)
(50,data[0].intOne = 0)
(51,-1)
(52,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
