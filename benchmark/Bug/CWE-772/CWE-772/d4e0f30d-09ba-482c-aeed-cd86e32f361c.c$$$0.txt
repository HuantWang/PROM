-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_bad()
{
    struct _twoIntsStruct * data;
    CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine((twoIntsStruct *)&data[0]);
    myUnion.unionFirst = data;
    {
        struct _twoIntsStruct * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
5,15
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
101,103
102,103
103,104
103,105
104,105
106,107
106,108
106,109
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,97,98,100,105,107,108,112,113,114
-----computeFrom-----
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_bad(){    struct _twoIntsStruct * data;    CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    myUnion.unionFirst = data;    {        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_bad
{    struct _twoIntsStruct * data;    CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    myUnion.unionFirst = data;    {        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_unionType myUnion;
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_unionType myUnion;
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_unionType
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * data = myUnion.unionSecond;
struct _twoIntsStruct * data = myUnion.unionSecond;
struct _twoIntsStruct
_twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(55,34,0)
(13,19,0)
(54,1,0)
(8,19,0)
(32,28,0)
(3,28,0)
(35,32,0)
(43,14,0)
(9,33,0)
(55,27,0)
(41,0,0)
(11,8,0)
(22,30,0)
(47,0,0)
(12,21,0)
(50,30,0)
(27,55,0)
(4,28,0)
(22,52,0)
(39,52,0)
(2,30,0)
(39,25,0)
(1,32,0)
(28,26,0)
(25,28,0)
(21,12,0)
(52,39,0)
(34,20,0)
(52,22,0)
(31,26,0)
(26,31,0)
(26,20,0)
(4,30,0)
(52,24,0)
(18,20,0)
(36,4,0)
(42,25,0)
(29,28,0)
(57,33,0)
(20,34,0)
(38,3,0)
(53,50,0)
(37,32,0)
(1,50,0)
(21,48,0)
(28,30,0)
(20,0,0)
(5,12,0)
(0,30,0)
(20,26,0)
(14,30,0)
(7,44,0)
(6,8,0)
(16,30,0)
(32,1,0)
(45,14,0)
(10,45,0)
(23,10,0)
(19,44,0)
(15,45,0)
(24,52,0)
(56,10,0)
(46,34,0)
(25,39,0)
(10,28,0)
(51,3,0)
(19,8,0)
(26,28,0)
(33,4,0)
(44,30,0)
(34,55,0)
(17,30,0)
(45,10,0)
(49,25,0)
(51,28,1)
(13,4,1)
(19,8,1)
(28,26,1)
(10,28,1)
(20,0,1)
(33,9,1)
(25,28,1)
(35,21,1)
(42,49,1)
(4,28,1)
(12,5,1)
(40,19,1)
(9,57,1)
(41,47,1)
(29,0,1)
(49,14,1)
(39,25,1)
(55,27,1)
(20,34,1)
(53,1,1)
(18,29,1)
(8,11,1)
(1,54,1)
(5,3,1)
(52,24,1)
(3,28,1)
(45,15,1)
(26,31,1)
(45,10,1)
(38,51,1)
(10,23,1)
(37,35,1)
(54,32,1)
(1,32,1)
(23,56,1)
(0,41,1)
(50,53,1)
(43,45,1)
(26,20,1)
(52,39,1)
(35,3,1)
(36,33,1)
(32,28,1)
(57,22,1)
(21,12,1)
(14,43,1)
(32,37,1)
(55,46,1)
(25,42,1)
(22,52,1)
(11,6,1)
(3,38,1)
(15,10,1)
(4,36,1)
(34,55,1)
(6,13,1)
(56,50,1)
(46,18,1)
(34,55,2)
(20,34,2)
(5,3,2)
(26,20,2)
(4,28,2)
(25,28,2)
(32,28,2)
(19,8,2)
(21,12,2)
(20,0,2)
(10,28,2)
(45,10,2)
(22,52,2)
(52,39,2)
(28,26,2)
(39,25,2)
(55,27,2)
(52,24,2)
(12,3,2)
(21,3,2)
(1,32,2)
(26,31,2)
(3,28,2)
-----------------------------------
(0,data = NULL)
(1,data[0].intOne)
(2,data)
(3,data == NULL)
(4,myUnion.unionFirst = data)
(5,1)
(6,myUnion)
(7,data)
(8,myUnion.unionSecond)
(9,unionFirst)
(10,data[0])
(11,unionSecond)
(12,-1)
(13,data)
(14,data[0].intTwo = 0)
(15,intTwo)
(16,if (data == NULL)
(17,myUnion)
(18,data)
(19,* data = myUnion.unionSecond)
(20,realloc(data, 100*sizeof(struct _twoIntsStruct)
(21,exit(-1)
(22,printStructLine((twoIntsStruct *)
(23,0)
(24,twoIntsStruct *)
(25,data[0])
(26,(struct _twoIntsStruct *)
(27,struct _twoIntsStruct)
(28,data = (struct _twoIntsStruct *)
(29,data)
(30,)
(31,struct _twoIntsStruct *)
(32,data[0])
(33,myUnion.unionFirst)
(34,100*sizeof(struct _twoIntsStruct)
(35,data)
(36,data)
(37,0)
(38,NULL)
(39,&data[0])
(40,RET)
(41,NULL)
(42,0)
(43,0)
(44,)
(45,data[0].intTwo)
(46,100)
(47,data)
(48,)
(49,data)
(50,data[0].intOne = 0)
(51,data)
(52,(twoIntsStruct *)
(53,0)
(54,intOne)
(55,sizeof(struct _twoIntsStruct)
(56,data)
(57,myUnion)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
