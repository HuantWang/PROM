-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_03_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
90,92
93,94
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,91,92,94
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_03_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_03_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_03_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(42,10,0)
(35,33,0)
(52,30,0)
(27,31,0)
(52,39,0)
(21,17,0)
(51,7,0)
(20,47,0)
(18,9,0)
(43,52,0)
(24,43,0)
(15,48,0)
(39,52,0)
(36,2,0)
(31,27,0)
(30,52,0)
(12,45,0)
(14,31,0)
(34,12,0)
(11,0,0)
(3,21,0)
(21,3,0)
(12,34,0)
(31,36,0)
(7,43,0)
(6,37,0)
(10,43,0)
(6,1,0)
(16,48,0)
(40,34,0)
(45,2,0)
(36,31,0)
(18,30,0)
(13,45,0)
(8,33,0)
(30,18,0)
(32,3,0)
(46,2,0)
(31,14,0)
(43,2,0)
(50,48,0)
(23,7,0)
(26,3,0)
(34,43,0)
(4,17,0)
(22,1,0)
(5,30,0)
(9,18,0)
(14,10,0)
(49,21,0)
(44,12,0)
(10,14,0)
(47,48,0)
(52,43,0)
(25,0,0)
(1,6,0)
(17,2,0)
(19,47,0)
(38,10,0)
(28,34,0)
(3,43,0)
(26,6,1)
(52,39,1)
(7,51,1)
(12,44,1)
(1,22,1)
(28,17,1)
(3,32,1)
(25,47,1)
(8,0,1)
(13,12,1)
(24,0,1)
(7,43,1)
(11,25,1)
(41,33,1)
(31,14,1)
(18,9,1)
(5,24,1)
(36,31,1)
(34,40,1)
(38,42,1)
(34,43,1)
(20,19,1)
(47,20,1)
(45,13,1)
(49,3,1)
(23,43,1)
(14,10,1)
(35,8,1)
(6,1,1)
(12,34,1)
(42,45,1)
(17,4,1)
(43,52,1)
(10,38,1)
(8,36,1)
(33,35,1)
(51,23,1)
(44,34,1)
(40,28,1)
(21,49,1)
(30,18,1)
(22,7,1)
(18,5,1)
(4,21,1)
(31,27,1)
(52,30,1)
(3,43,1)
(32,26,1)
(21,3,1)
(26,7,1)
(10,43,1)
(0,11,1)
(32,0,2)
(14,10,2)
(36,31,2)
(43,0,2)
(51,0,2)
(34,43,2)
(22,7,2)
(1,7,2)
(44,0,2)
(6,1,2)
(6,7,2)
(31,14,2)
(28,0,2)
(49,0,2)
(3,0,2)
(18,0,2)
(7,43,2)
(45,0,2)
(43,52,2)
(34,0,2)
(24,0,2)
(21,3,2)
(12,0,2)
(18,9,2)
(52,39,2)
(21,0,2)
(38,0,2)
(4,0,2)
(36,0,2)
(7,0,2)
(26,0,2)
(52,30,2)
(30,0,2)
(5,0,2)
(14,0,2)
(12,34,2)
(31,0,2)
(17,0,2)
(23,0,2)
(13,0,2)
(42,0,2)
(52,0,2)
(31,27,2)
(10,43,2)
(3,43,2)
(40,0,2)
(30,18,2)
(10,0,2)
-----------------------------------
(0,5==5)
(1,-1)
(2,)
(3,data[0])
(4,0)
(5,100)
(6,exit(-1)
(7,data == NULL)
(8,5)
(9,struct _twoIntsStruct)
(10,data[0])
(11,5)
(12,data[0].intTwo)
(13,0)
(14,&data[0])
(15,if(5==5)
(16,data)
(17,data[0].intOne = 0)
(18,sizeof(struct _twoIntsStruct)
(19,data)
(20,NULL)
(21,data[0].intOne)
(22,1)
(23,data)
(24,data)
(25,5)
(26,data)
(27,twoIntsStruct *)
(28,data)
(29, sizeof(struct _twoIntsStruct)
(30,calloc(100, sizeof(struct _twoIntsStruct)
(31,(twoIntsStruct *)
(32,0)
(33,5==5)
(34,data[0])
(35,5)
(36,printStructLine((twoIntsStruct *)
(37,)
(38,0)
(39,struct _twoIntsStruct *)
(40,0)
(41,RET)
(42,data)
(43,data = (struct _twoIntsStruct *)
(44,intTwo)
(45,data[0].intTwo = 0)
(46,if (data == NULL)
(47,data = NULL)
(48,)
(49,intOne)
(50,if(5==5)
(51,NULL)
(52,(struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
