-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_01_bad()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
50,51
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,51,53,54,58,60,61
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_01_bad(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__char_calloc_01_bad()
CWE401_Memory_Leak__char_calloc_01_bad
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
;
-----joern-----
(17,7,0)
(9,7,0)
(6,7,0)
(11,5,0)
(23,19,0)
(18,25,0)
(24,7,0)
(0,26,0)
(8,17,0)
(5,11,0)
(14,21,0)
(5,27,0)
(27,5,0)
(3,6,0)
(13,5,0)
(20,27,0)
(10,11,0)
(1,9,0)
(2,7,0)
(27,20,0)
(15,25,0)
(25,21,0)
(16,17,0)
(4,9,0)
(19,0,0)
(21,27,0)
(21,7,0)
(27,21,0)
(9,21,0)
(0,19,0)
(6,21,0)
(9,1,1)
(5,11,1)
(11,10,1)
(3,9,1)
(25,15,1)
(6,21,1)
(4,0,1)
(21,27,1)
(10,13,1)
(1,4,1)
(6,3,1)
(25,21,1)
(13,14,1)
(17,8,1)
(15,18,1)
(4,25,1)
(18,21,1)
(27,20,1)
(19,23,1)
(14,17,1)
(8,16,1)
(22,6,1)
(27,5,1)
(0,19,1)
(9,21,1)
(23,25,1)
(0,19,2)
(0,25,2)
(6,21,2)
(27,20,2)
(21,27,2)
(27,5,2)
(5,11,2)
(19,25,2)
(23,25,2)
(25,21,2)
(9,21,2)
-----------------------------------
(0,exit(-1)
(1,"A String")
(2,data)
(3,data)
(4,data)
(5,calloc(100, sizeof(char)
(6,printLine(data)
(7,)
(8,NULL)
(9,strcpy(data, "A String")
(10,char)
(11,sizeof(char)
(12, sizeof(char)
(13,100)
(14,data)
(15,NULL)
(16,data)
(17,data = NULL)
(18,data)
(19,-1)
(20,char *)
(21,data = (char *)
(22,RET)
(23,1)
(24,if (data == NULL)
(25,data == NULL)
(26,)
(27,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
