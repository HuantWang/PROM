-----label-----
1
-----code-----
static twoIntsStruct * badSource(twoIntsStruct * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
50,52
51,52
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
69,70
70,71
70,72
71,72
74,75
75,76
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,28,32,33,37,39,44,46,52,53,54,55,61,62,63,64,68,72,73,76
-----computeFrom-----
15,16
15,17
27,28
27,29
35,36
35,37
48,49
48,50
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static twoIntsStruct * badSource(twoIntsStruct * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
static twoIntsStruct
twoIntsStruct
* badSource(twoIntsStruct * data)
*
badSource
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
return data;
data
data
-----joern-----
(3,24,0)
(6,23,0)
(39,11,0)
(24,39,0)
(29,10,0)
(6,24,0)
(30,11,0)
(26,8,0)
(16,15,0)
(25,24,0)
(5,6,0)
(33,17,0)
(23,29,0)
(7,39,0)
(40,19,0)
(28,4,0)
(14,33,0)
(35,15,0)
(19,10,0)
(4,31,0)
(38,9,0)
(15,10,0)
(21,25,0)
(13,4,0)
(39,7,0)
(20,25,0)
(12,36,0)
(36,30,0)
(8,24,0)
(27,14,0)
(4,24,0)
(30,36,0)
(29,23,0)
(0,6,0)
(4,32,0)
(25,32,0)
(11,39,0)
(25,34,0)
(1,8,0)
(18,31,0)
(34,25,0)
(23,6,0)
(24,10,0)
(11,30,0)
(39,24,0)
(22,30,0)
(15,24,0)
(24,32,0)
(34,9,0)
(6,32,0)
(9,10,0)
(37,10,0)
(31,19,0)
(33,14,0)
(2,34,0)
(8,32,0)
(31,4,0)
(15,32,0)
(16,29,1)
(9,38,1)
(30,36,1)
(6,32,1)
(24,32,1)
(34,25,1)
(14,27,1)
(24,39,1)
(38,34,1)
(2,25,1)
(28,33,1)
(25,24,1)
(0,5,1)
(31,18,1)
(19,40,1)
(12,22,1)
(18,4,1)
(1,26,1)
(35,15,1)
(13,28,1)
(36,12,1)
(8,32,1)
(27,8,1)
(23,6,1)
(26,24,1)
(29,23,1)
(39,7,1)
(15,24,1)
(4,32,1)
(15,32,1)
(4,13,1)
(8,24,1)
(34,2,1)
(33,14,1)
(25,32,1)
(21,19,1)
(11,30,1)
(8,1,1)
(39,11,1)
(28,8,1)
(6,0,1)
(25,20,1)
(4,24,1)
(5,9,1)
(31,4,1)
(40,31,1)
(6,24,1)
(15,16,1)
(20,21,1)
(22,3,1)
(33,8,2)
(29,23,2)
(4,32,2)
(8,24,2)
(23,6,2)
(15,32,2)
(33,14,2)
(6,24,2)
(8,32,2)
(34,25,2)
(4,24,2)
(25,24,2)
(24,32,2)
(30,36,2)
(39,7,2)
(27,8,2)
(14,8,2)
(24,39,2)
(15,24,2)
(35,15,2)
(11,30,2)
(6,32,2)
(31,4,2)
(39,11,2)
(25,32,2)
-----------------------------------
(0,0)
(1,NULL)
(2,intTwo)
(3,data)
(4,data[0])
(5,data)
(6,data[0])
(7,twoIntsStruct *)
(8,data == NULL)
(9,data[0].intTwo = 0)
(10,)
(11,malloc(100*sizeof(twoIntsStruct)
(12,twoIntsStruct)
(13,0)
(14,-1)
(15,return data;)
(16,data)
(17,)
(18,intOne)
(19,data[0].intOne = 0)
(20,0)
(21,data)
(22,100)
(23,&data[0])
(24,data = (twoIntsStruct *)
(25,data[0])
(26,data)
(27,1)
(28,data)
(29,printStructLine(&data[0])
(30,100*sizeof(twoIntsStruct)
(31,data[0].intOne)
(32,twoIntsStruct * data)
(33,exit(-1)
(34,data[0].intTwo)
(35,RET)
(36,sizeof(twoIntsStruct)
(37,if (data == NULL)
(38,0)
(39,(twoIntsStruct *)
(40,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
