-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_03_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
85,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,86,87,89
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_03_bad(){    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_03_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_03_bad
{    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(33,11,0)
(44,41,0)
(34,22,0)
(48,40,0)
(12,41,0)
(27,23,0)
(27,25,0)
(30,40,0)
(9,12,0)
(28,8,0)
(20,38,0)
(38,20,0)
(17,40,0)
(4,44,0)
(19,49,0)
(20,41,0)
(5,48,0)
(45,21,0)
(36,7,0)
(11,35,0)
(21,45,0)
(24,39,0)
(47,35,0)
(32,40,0)
(41,10,0)
(28,44,0)
(35,11,0)
(13,44,0)
(8,10,0)
(49,34,0)
(0,38,0)
(21,50,0)
(34,49,0)
(42,34,0)
(43,10,0)
(26,46,0)
(21,41,0)
(44,28,0)
(3,49,0)
(6,20,0)
(39,10,0)
(8,28,0)
(41,21,0)
(2,7,0)
(18,23,0)
(49,41,0)
(1,41,0)
(38,39,0)
(16,46,0)
(14,12,0)
(29,22,0)
(50,21,0)
(15,48,0)
(35,50,0)
(23,27,0)
(22,10,0)
(37,20,0)
(50,35,0)
(24,38,1)
(31,7,1)
(6,37,1)
(50,35,1)
(2,46,1)
(20,6,1)
(22,29,1)
(44,13,1)
(12,14,1)
(7,36,1)
(49,3,1)
(29,34,1)
(33,47,1)
(38,0,1)
(46,26,1)
(11,33,1)
(38,20,1)
(35,11,1)
(28,44,1)
(47,1,1)
(41,21,1)
(1,46,1)
(14,9,1)
(42,49,1)
(21,45,1)
(2,8,1)
(4,39,1)
(49,41,1)
(37,22,1)
(13,4,1)
(21,50,1)
(36,2,1)
(23,18,1)
(20,41,1)
(48,5,1)
(12,41,1)
(39,24,1)
(26,16,1)
(3,19,1)
(34,49,1)
(9,41,1)
(16,48,1)
(34,42,1)
(44,41,1)
(5,15,1)
(8,28,1)
(27,23,1)
(0,20,1)
(19,27,1)
(19,12,1)
(18,12,1)
(28,44,2)
(23,12,2)
(50,46,2)
(22,46,2)
(9,46,2)
(8,46,2)
(35,11,2)
(13,46,2)
(3,46,2)
(6,46,2)
(4,46,2)
(14,46,2)
(20,46,2)
(1,46,2)
(41,21,2)
(29,46,2)
(21,46,2)
(33,46,2)
(19,46,2)
(8,28,2)
(41,46,2)
(34,46,2)
(44,41,2)
(47,46,2)
(28,46,2)
(27,12,2)
(12,41,2)
(49,41,2)
(44,46,2)
(42,46,2)
(38,20,2)
(39,46,2)
(18,12,2)
(50,35,2)
(27,23,2)
(21,45,2)
(11,46,2)
(0,46,2)
(35,46,2)
(49,46,2)
(34,49,2)
(20,41,2)
(12,46,2)
(21,50,2)
(37,46,2)
(24,46,2)
(38,46,2)
-----------------------------------
(0,intTwo)
(1,data)
(2,5)
(3,0)
(4,data)
(5,NULL)
(6,0)
(7,5==5)
(8,printStructLine(&data[0])
(9,data)
(10,)
(11,sizeof(twoIntsStruct)
(12,data == NULL)
(13,0)
(14,NULL)
(15,data)
(16,5)
(17,if(5==5)
(18,1)
(19,data)
(20,data[0])
(21,(twoIntsStruct *)
(22,data[0].intOne = 0)
(23,-1)
(24,0)
(25,)
(26,5)
(27,exit(-1)
(28,&data[0])
(29,0)
(30,if(5==5)
(31,RET)
(32,data)
(33,twoIntsStruct)
(34,data[0].intOne)
(35,100*sizeof(twoIntsStruct)
(36,5)
(37,data)
(38,data[0].intTwo)
(39,data[0].intTwo = 0)
(40,)
(41,data = (twoIntsStruct *)
(42,intOne)
(43,if (data == NULL)
(44,data[0])
(45,twoIntsStruct *)
(46,5==5)
(47,100)
(48,data = NULL)
(49,data[0])
(50,malloc(100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
