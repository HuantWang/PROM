-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_05_bad()
{
    if(staticTrue)
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
32,33
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
70,71
71,72
71,73
72,73
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
88,89
90,91
90,92
91,92
93,94
94,95
94,96
95,96
98,99
98,100
99,100
99,101
100,101
102,103
104,105
104,106
104,107
104,108
105,106
106,107
106,108
107,108
107,109
108,109
108,110
109,110
114,115
115,116
115,117
116,117
116,118
117,118
117,119
118,119
123,124
124,125
124,126
125,126
127,128
128,129
128,130
129,130
132,133
133,134
133,135
134,135
136,137
-----nextToken-----
2,4,8,14,16,17,22,24,27,29,33,34,38,40,45,47,53,54,55,56,62,63,64,65,69,73,74,78,82,84,87,89,92,96,97,101,103,110,111,112,113,119,120,121,122,126,130,131,135,137
-----computeFrom-----
28,29
28,30
36,37
36,38
49,50
49,51
58,59
58,60
76,77
76,78
90,91
90,92
99,100
99,101
106,107
106,108
115,116
115,117
-----guardedBy-----
101,137
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_05_bad(){    if(staticTrue)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_05_bad()
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_05_bad
{    if(staticTrue)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }}
if(staticTrue)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
staticTrue
staticTrue
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(56,59,0)
(22,32,0)
(73,74,0)
(18,2,0)
(13,14,0)
(1,48,0)
(3,27,0)
(17,70,0)
(30,34,0)
(14,56,0)
(70,64,0)
(64,2,0)
(43,3,0)
(4,32,0)
(5,12,0)
(47,41,0)
(52,59,0)
(21,73,0)
(62,45,0)
(11,65,0)
(78,64,0)
(10,26,0)
(34,2,0)
(49,18,0)
(15,16,0)
(68,37,0)
(72,69,0)
(39,2,0)
(35,6,0)
(9,37,0)
(59,56,0)
(76,2,0)
(31,5,0)
(4,55,0)
(29,27,0)
(44,74,0)
(66,48,0)
(16,64,0)
(27,3,0)
(24,9,0)
(4,64,0)
(19,12,0)
(26,38,0)
(23,66,0)
(7,16,0)
(59,52,0)
(77,22,0)
(25,71,0)
(16,63,0)
(40,69,0)
(59,5,0)
(5,64,0)
(27,29,0)
(45,64,0)
(48,56,0)
(20,74,0)
(66,47,0)
(3,64,0)
(6,22,0)
(5,59,0)
(56,2,0)
(67,34,0)
(29,2,0)
(61,47,0)
(57,45,0)
(12,19,0)
(64,4,0)
(14,41,0)
(22,6,0)
(32,4,0)
(51,19,0)
(70,67,0)
(36,48,0)
(12,5,0)
(2,50,0)
(74,73,0)
(0,56,0)
(32,22,0)
(28,63,0)
(69,9,0)
(75,12,0)
(65,56,0)
(74,56,0)
(54,67,0)
(37,41,0)
(67,70,0)
(21,41,0)
(42,10,0)
(58,70,0)
(63,16,0)
(60,3,0)
(55,4,0)
(33,2,0)
(73,21,0)
(48,66,0)
(26,10,0)
(9,69,0)
(69,56,0)
(46,65,0)
(63,18,0)
(60,34,1)
(69,72,1)
(16,64,1)
(11,46,1)
(36,1,1)
(5,12,1)
(45,57,1)
(31,0,1)
(19,51,1)
(21,73,1)
(30,67,1)
(49,63,1)
(63,16,1)
(75,31,1)
(65,56,1)
(1,65,1)
(54,70,1)
(47,61,1)
(13,21,1)
(48,56,1)
(9,69,1)
(15,45,1)
(18,49,1)
(65,11,1)
(23,48,1)
(72,40,1)
(51,75,1)
(40,47,1)
(42,45,1)
(46,56,1)
(43,60,1)
(67,70,1)
(4,32,1)
(4,55,1)
(15,26,1)
(34,30,1)
(53,14,1)
(58,17,1)
(45,64,1)
(3,64,1)
(56,59,1)
(14,13,1)
(22,6,1)
(59,52,1)
(53,8,1)
(48,36,1)
(35,77,1)
(44,37,1)
(70,58,1)
(61,66,1)
(27,3,1)
(24,69,1)
(29,27,1)
(63,28,1)
(7,15,1)
(68,9,1)
(70,64,1)
(78,8,1)
(73,74,1)
(74,56,1)
(62,64,1)
(14,56,1)
(67,54,1)
(74,20,1)
(77,78,1)
(17,18,1)
(28,16,1)
(64,4,1)
(26,10,1)
(6,35,1)
(0,29,1)
(3,43,1)
(16,7,1)
(66,23,1)
(12,19,1)
(20,44,1)
(10,42,1)
(9,24,1)
(5,64,1)
(59,5,1)
(37,68,1)
(66,48,1)
(32,22,1)
(53,65,1)
(69,56,1)
(57,62,1)
(6,8,2)
(9,69,2)
(46,8,2)
(65,8,2)
(43,8,2)
(51,8,2)
(34,8,2)
(18,8,2)
(5,64,2)
(70,8,2)
(14,65,2)
(29,8,2)
(22,8,2)
(13,65,2)
(69,65,2)
(64,8,2)
(49,8,2)
(11,8,2)
(7,8,2)
(77,8,2)
(73,74,2)
(69,56,2)
(16,64,2)
(48,65,2)
(66,48,2)
(3,8,2)
(63,8,2)
(54,8,2)
(9,65,2)
(44,65,2)
(56,8,2)
(5,12,2)
(23,65,2)
(37,65,2)
(17,8,2)
(5,8,2)
(57,8,2)
(22,6,2)
(15,8,2)
(14,56,2)
(35,8,2)
(48,56,2)
(56,59,2)
(65,56,2)
(59,52,2)
(30,8,2)
(62,8,2)
(74,65,2)
(72,65,2)
(68,65,2)
(59,8,2)
(31,8,2)
(4,8,2)
(74,56,2)
(27,3,2)
(45,8,2)
(28,8,2)
(60,8,2)
(12,19,2)
(67,70,2)
(10,45,2)
(1,65,2)
(67,8,2)
(40,65,2)
(61,65,2)
(27,8,2)
(73,65,2)
(4,55,2)
(29,27,2)
(47,65,2)
(36,65,2)
(16,8,2)
(59,5,2)
(70,64,2)
(42,45,2)
(26,10,2)
(21,65,2)
(4,32,2)
(32,8,2)
(75,8,2)
(63,16,2)
(32,22,2)
(21,73,2)
(78,8,2)
(19,8,2)
(12,8,2)
(24,65,2)
(20,65,2)
(26,45,2)
(64,4,2)
(45,64,2)
(58,8,2)
(0,8,2)
(66,65,2)
(3,64,2)
-----------------------------------
(0,data)
(1,data)
(2,)
(3,data[0])
(4,(twoIntsStruct *)
(5,realloc(data, (130000)
(6,sizeof(twoIntsStruct)
(7,0)
(8,staticTrue)
(9,data[0].intTwo)
(10,-1)
(11,NULL)
(12,(130000)
(13,data)
(14,free(data)
(15,data)
(16,data[0])
(17,data)
(18,data[0].intOne = 0)
(19,sizeof(twoIntsStruct)
(20,0)
(21,printStructLine(&data[0])
(22,100*sizeof(twoIntsStruct)
(23,intOne)
(24,intTwo)
(25,if(staticTrue)
(26,exit(-1)
(27,&data[0])
(28,intOne)
(29,printStructLine(&data[0])
(30,0)
(31,data)
(32,malloc(100*sizeof(twoIntsStruct)
(33,if (data == NULL)
(34,data[0].intTwo = 0)
(35,twoIntsStruct)
(36,0)
(37,data[0].intTwo = 1)
(38,)
(39,data)
(40,data)
(41,)
(42,1)
(43,0)
(44,data)
(45,data == NULL)
(46,data)
(47,data[0].intOne = 1)
(48,data[0])
(49,0)
(50,)
(51,twoIntsStruct)
(52,twoIntsStruct *)
(53,RET)
(54,intTwo)
(55,twoIntsStruct *)
(56,data = (twoIntsStruct *)
(57,NULL)
(58,0)
(59,(twoIntsStruct *)
(60,data)
(61,1)
(62,data)
(63,data[0].intOne)
(64,* data = (twoIntsStruct *)
(65,data != NULL)
(66,data[0].intOne)
(67,data[0].intTwo)
(68,1)
(69,data[0])
(70,data[0])
(71,)
(72,0)
(73,&data[0])
(74,data[0])
(75,130000)
(76,if (data != NULL)
(77,100)
(78,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
