-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_17_bad()
{
    int i,j;
    char * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
48,51
49,50
51,52
53,54
53,55
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
79,80
80,81
80,82
81,82
83,84
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
91,92
91,93
92,93
95,96
96,97
98,99
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,54,57,58,62,64,69,71,75,77,78,82,84,89,90,93,94,97,99
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
53,54
53,55
60,61
60,62
87,88
87,89
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_17_bad(){    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_17_bad()
CWE401_Memory_Leak__char_realloc_17_bad
{    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,43,0)
(46,43,0)
(12,11,0)
(6,33,0)
(35,2,0)
(6,37,0)
(7,16,0)
(24,45,0)
(36,38,0)
(11,38,0)
(48,17,0)
(16,35,0)
(4,9,0)
(19,41,0)
(49,33,0)
(35,16,0)
(3,38,0)
(40,11,0)
(39,2,0)
(2,45,0)
(21,41,0)
(1,43,0)
(2,35,0)
(42,6,0)
(27,29,0)
(14,37,0)
(23,17,0)
(0,35,0)
(28,43,0)
(13,33,0)
(45,2,0)
(9,33,0)
(2,33,0)
(8,48,0)
(41,19,0)
(26,38,0)
(33,45,0)
(15,43,0)
(25,46,0)
(31,49,0)
(30,9,0)
(5,29,0)
(47,6,0)
(33,37,0)
(45,24,0)
(22,17,0)
(20,43,0)
(45,33,0)
(49,37,0)
(2,46,0)
(29,17,0)
(19,10,0)
(44,46,0)
(18,3,0)
(31,6,1)
(2,46,1)
(22,46,1)
(29,27,1)
(6,42,1)
(33,45,1)
(9,4,1)
(3,38,1)
(42,47,1)
(4,30,1)
(11,40,1)
(44,25,1)
(3,18,1)
(38,36,1)
(23,22,1)
(2,35,1)
(7,0,1)
(5,48,1)
(35,16,1)
(8,49,1)
(40,12,1)
(49,33,1)
(19,41,1)
(9,33,1)
(0,39,1)
(27,5,1)
(18,11,1)
(32,11,1)
(47,19,1)
(30,33,1)
(49,31,1)
(39,13,1)
(12,3,1)
(36,26,1)
(41,21,1)
(13,29,1)
(17,23,1)
(48,17,1)
(45,2,1)
(26,29,1)
(21,9,1)
(12,38,1)
(6,33,1)
(5,17,1)
(47,9,1)
(46,44,1)
(45,24,1)
(29,17,1)
(48,8,1)
(11,38,1)
(2,33,1)
(16,7,1)
(19,41,2)
(9,29,2)
(11,11,2)
(19,9,2)
(27,29,2)
(30,29,2)
(2,33,2)
(35,29,2)
(0,29,2)
(3,11,2)
(12,11,2)
(49,33,2)
(49,29,2)
(41,9,2)
(33,29,2)
(6,29,2)
(2,46,2)
(47,29,2)
(29,29,2)
(16,29,2)
(45,2,2)
(42,29,2)
(39,29,2)
(31,29,2)
(2,29,2)
(35,16,2)
(4,29,2)
(7,29,2)
(29,17,2)
(3,38,2)
(40,11,2)
(5,29,2)
(48,17,2)
(11,38,2)
(6,33,2)
(13,29,2)
(2,35,2)
(33,45,2)
(9,33,2)
(18,11,2)
(45,29,2)
(45,24,2)
(48,29,2)
(21,9,2)
(8,29,2)
-----------------------------------
(0,100)
(1,i)
(2,realloc(data, 100*sizeof(char)
(3,j++)
(4,NULL)
(5,i)
(6,strcpy(data, "A String")
(7,char)
(8,i)
(9,data == NULL)
(10,)
(11,j < 1)
(12,j)
(13,data)
(14,if (data == NULL)
(15,data)
(16,sizeof(char)
(17,i = 0)
(18,j)
(19,exit(-1)
(20,for(i = 0; i < 1; i++)
(21,1)
(22,i)
(23,0)
(24,char *)
(25,data)
(26,j)
(27,1)
(28,for(j = 0; j < 1; j++)
(29,i < 1)
(30,data)
(31,data)
(32,RET)
(33,data = (char *)
(34,j)
(35,100*sizeof(char)
(36,0)
(37,)
(38,j = 0)
(39,data)
(40,1)
(41,-1)
(42,"A String")
(43,)
(44,NULL)
(45,(char *)
(46,data = NULL)
(47,data)
(48,i++)
(49,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
