-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_14_bad()
{
    if(globalFive==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,57,59,63,66,68,71,73,76,79,80,84,86,91,93,94,98,100,104,106
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
61,62
61,63
74,75
74,76
82,83
82,84
-----guardedBy-----
84,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_14_bad(){    if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_14_bad()
CWE401_Memory_Leak__malloc_realloc_char_14_bad
{    if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(22,35,0)
(44,8,0)
(38,39,0)
(28,4,0)
(18,0,0)
(12,45,0)
(47,37,0)
(9,46,0)
(7,16,0)
(10,37,0)
(24,49,0)
(19,27,0)
(45,27,0)
(7,27,0)
(25,10,0)
(49,24,0)
(22,10,0)
(5,7,0)
(27,23,0)
(6,30,0)
(51,4,0)
(37,23,0)
(22,27,0)
(46,16,0)
(43,17,0)
(20,47,0)
(34,19,0)
(15,40,0)
(24,37,0)
(26,23,0)
(8,17,0)
(23,31,0)
(19,16,0)
(33,6,0)
(36,24,0)
(17,8,0)
(4,49,0)
(14,23,0)
(35,22,0)
(29,47,0)
(50,27,0)
(0,37,0)
(10,17,0)
(1,23,0)
(49,4,0)
(14,37,0)
(0,23,0)
(42,14,0)
(24,36,0)
(46,27,0)
(3,23,0)
(6,33,0)
(13,45,0)
(17,10,0)
(48,46,0)
(21,14,0)
(4,28,0)
(27,22,0)
(37,24,0)
(41,37,0)
(11,28,0)
(32,39,0)
(52,33,0)
(10,22,0)
(18,14,1)
(0,18,1)
(8,44,1)
(9,45,1)
(22,10,1)
(5,19,1)
(20,29,1)
(17,8,1)
(6,33,1)
(52,47,1)
(32,38,1)
(51,41,1)
(10,37,1)
(45,13,1)
(37,24,1)
(10,17,1)
(42,47,1)
(45,27,1)
(2,7,1)
(7,27,1)
(29,37,1)
(12,27,1)
(39,32,1)
(14,21,1)
(47,37,1)
(24,36,1)
(48,9,1)
(27,22,1)
(19,27,1)
(46,27,1)
(28,11,1)
(43,25,1)
(25,50,1)
(50,0,1)
(7,5,1)
(41,39,1)
(11,51,1)
(46,48,1)
(34,46,1)
(0,37,1)
(47,20,1)
(22,35,1)
(44,43,1)
(14,37,1)
(33,52,1)
(24,49,1)
(19,34,1)
(49,4,1)
(42,6,1)
(2,45,1)
(21,42,1)
(2,39,1)
(4,28,1)
(13,12,1)
(45,39,2)
(22,39,2)
(22,35,2)
(14,37,2)
(24,49,2)
(4,28,2)
(41,39,2)
(21,39,2)
(47,39,2)
(18,39,2)
(34,45,2)
(6,47,2)
(42,39,2)
(4,39,2)
(14,39,2)
(5,45,2)
(29,39,2)
(10,37,2)
(28,39,2)
(7,27,2)
(0,37,2)
(49,4,2)
(48,45,2)
(17,8,2)
(8,39,2)
(11,39,2)
(49,39,2)
(13,39,2)
(46,45,2)
(6,33,2)
(22,10,2)
(52,47,2)
(45,27,2)
(17,39,2)
(25,39,2)
(47,37,2)
(19,45,2)
(46,27,2)
(10,17,2)
(24,36,2)
(12,39,2)
(43,39,2)
(37,39,2)
(0,39,2)
(7,45,2)
(10,39,2)
(19,27,2)
(27,22,2)
(50,39,2)
(51,39,2)
(37,24,2)
(33,47,2)
(9,45,2)
(24,39,2)
(27,39,2)
(44,39,2)
(20,39,2)
-----------------------------------
(0,printLine(data)
(1,data)
(2,RET)
(3,if (data == NULL)
(4,100*sizeof(char)
(5,data)
(6,exit(-1)
(7,free(data)
(8,sizeof(char)
(9,data)
(10,realloc(data, (130000)
(11,char)
(12,data)
(13,NULL)
(14,strcpy(data, "A String")
(15,if(globalFive==5)
(16,)
(17,(130000)
(18,data)
(19,printLine(data)
(20,NULL)
(21,"A String")
(22,(char *)
(23,)
(24,(char *)
(25,data)
(26,if (data != NULL)
(27,data = (char *)
(28,sizeof(char)
(29,data)
(30,)
(31,)
(32,5)
(33,-1)
(34,data)
(35,char *)
(36,char *)
(37,* data = (char *)
(38,globalFive)
(39,globalFive==5)
(40,)
(41,data)
(42,data)
(43,130000)
(44,char)
(45,data != NULL)
(46,strcpy(data, "New String")
(47,data == NULL)
(48,"New String")
(49,malloc(100*sizeof(char)
(50,data)
(51,100)
(52,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
