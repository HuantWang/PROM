-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_03_bad()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,69,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_03_bad(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_03_bad()
CWE401_Memory_Leak__wchar_t_malloc_03_bad
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,4,0)
(6,7,0)
(25,28,0)
(9,1,0)
(27,1,0)
(8,0,0)
(11,2,0)
(12,4,0)
(30,19,0)
(23,18,0)
(18,27,0)
(29,26,0)
(3,13,0)
(1,5,0)
(27,0,0)
(4,2,0)
(2,9,0)
(9,2,0)
(24,28,0)
(21,15,0)
(13,28,0)
(33,10,0)
(5,1,0)
(19,27,0)
(26,33,0)
(33,26,0)
(31,27,0)
(14,15,0)
(16,28,0)
(18,0,0)
(22,7,0)
(32,19,0)
(20,13,0)
(1,9,0)
(1,27,0)
(32,27,1)
(23,33,1)
(17,7,1)
(1,5,1)
(18,27,1)
(29,19,1)
(27,1,1)
(6,22,1)
(2,4,1)
(13,20,1)
(9,2,1)
(20,3,1)
(11,31,1)
(30,32,1)
(22,15,1)
(19,27,1)
(33,26,1)
(4,12,1)
(31,15,1)
(12,11,1)
(7,6,1)
(21,13,1)
(22,18,1)
(26,29,1)
(18,23,1)
(15,14,1)
(23,19,1)
(1,9,1)
(14,21,1)
(19,30,1)
(2,15,2)
(9,15,2)
(1,9,2)
(33,19,2)
(19,15,2)
(23,15,2)
(31,15,2)
(30,15,2)
(27,15,2)
(2,4,2)
(32,15,2)
(1,5,2)
(12,15,2)
(4,15,2)
(26,19,2)
(11,15,2)
(27,1,2)
(33,26,2)
(1,15,2)
(9,2,2)
(18,15,2)
(18,27,2)
(29,19,2)
(19,27,2)
-----------------------------------
(0,)
(1,(wchar_t *)
(2,100*sizeof(wchar_t)
(3,data)
(4,sizeof(wchar_t)
(5,wchar_t *)
(6,5)
(7,5==5)
(8,if (data == NULL)
(9,malloc(100*sizeof(wchar_t)
(10,)
(11,100)
(12,wchar_t)
(13,data = NULL)
(14,5)
(15,5==5)
(16,data)
(17,RET)
(18,printWLine(data)
(19,data == NULL)
(20,NULL)
(21,5)
(22,5)
(23,data)
(24,if(5==5)
(25,if(5==5)
(26,-1)
(27,data = (wchar_t *)
(28,)
(29,1)
(30,NULL)
(31,data)
(32,data)
(33,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
