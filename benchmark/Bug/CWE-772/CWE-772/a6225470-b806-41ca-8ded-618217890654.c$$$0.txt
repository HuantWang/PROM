-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_09_bad()
{
    if(GLOBAL_CONST_TRUE)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,49,50,51,55,58,59,63,66,68,71,73,76,79,80,84,86,92,93,94,98,101,102,106,108
-----computeFrom-----
26,27
26,28
33,34
33,35
46,47
46,48
61,62
61,63
74,75
74,76
82,83
82,84
89,90
89,91
-----guardedBy-----
84,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_09_bad(){    if(GLOBAL_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_09_bad()
CWE401_Memory_Leak__malloc_realloc_int_09_bad
{    if(GLOBAL_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(GLOBAL_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(54,40,0)
(36,12,0)
(40,58,0)
(19,57,0)
(48,50,0)
(1,8,0)
(0,12,0)
(44,33,0)
(14,39,0)
(56,7,0)
(6,12,0)
(38,24,0)
(57,12,0)
(3,19,0)
(7,0,0)
(21,14,0)
(1,44,0)
(57,35,0)
(53,0,0)
(2,0,0)
(38,0,0)
(19,33,0)
(58,17,0)
(35,57,0)
(58,40,0)
(41,46,0)
(14,0,0)
(24,38,0)
(8,1,0)
(35,42,0)
(9,2,0)
(9,20,0)
(20,9,0)
(1,57,0)
(45,13,0)
(12,31,0)
(23,53,0)
(17,58,0)
(29,2,0)
(39,12,0)
(18,12,0)
(4,38,0)
(26,58,0)
(32,38,0)
(38,39,0)
(22,53,0)
(42,35,0)
(37,39,0)
(46,47,0)
(35,2,0)
(46,41,0)
(10,50,0)
(7,17,0)
(1,39,0)
(2,35,0)
(24,12,0)
(2,9,0)
(49,20,0)
(51,0,0)
(13,44,0)
(16,1,0)
(50,57,0)
(25,1,0)
(15,44,0)
(30,57,0)
(13,57,0)
(8,33,0)
(0,7,0)
(34,41,0)
(11,14,0)
(52,43,0)
(7,56,0)
(17,7,0)
(5,13,0)
(55,9,0)
(13,57,1)
(1,25,1)
(45,50,1)
(44,15,1)
(53,0,1)
(19,3,1)
(2,0,1)
(4,32,1)
(25,16,1)
(38,4,1)
(26,51,1)
(7,17,1)
(54,26,1)
(3,8,1)
(46,41,1)
(1,39,1)
(11,46,1)
(38,39,1)
(5,45,1)
(8,1,1)
(14,21,1)
(57,35,1)
(50,57,1)
(9,20,1)
(0,7,1)
(37,14,1)
(24,38,1)
(22,23,1)
(49,55,1)
(14,0,1)
(15,13,1)
(53,22,1)
(21,11,1)
(19,57,1)
(10,57,1)
(39,37,1)
(1,57,1)
(55,29,1)
(30,24,1)
(1,44,1)
(32,39,1)
(20,49,1)
(11,53,1)
(13,5,1)
(34,53,1)
(28,50,1)
(41,34,1)
(17,58,1)
(48,10,1)
(7,56,1)
(29,30,1)
(35,2,1)
(23,0,1)
(2,9,1)
(51,27,1)
(28,19,1)
(38,0,1)
(58,40,1)
(50,48,1)
(28,27,1)
(16,44,1)
(35,42,1)
(40,54,1)
(13,50,2)
(26,27,2)
(30,27,2)
(44,50,2)
(48,27,2)
(57,35,2)
(2,27,2)
(9,20,2)
(37,27,2)
(2,9,2)
(7,56,2)
(17,58,2)
(53,0,2)
(50,27,2)
(23,27,2)
(38,27,2)
(1,57,2)
(51,27,2)
(7,17,2)
(50,57,2)
(4,27,2)
(45,50,2)
(16,50,2)
(17,27,2)
(20,27,2)
(24,38,2)
(21,27,2)
(7,27,2)
(49,27,2)
(32,27,2)
(10,27,2)
(41,53,2)
(39,27,2)
(25,50,2)
(55,27,2)
(29,27,2)
(9,27,2)
(57,27,2)
(35,42,2)
(0,7,2)
(46,53,2)
(2,0,2)
(58,27,2)
(1,50,2)
(8,50,2)
(19,50,2)
(5,50,2)
(13,57,2)
(0,27,2)
(1,44,2)
(3,50,2)
(24,27,2)
(19,57,2)
(8,1,2)
(35,27,2)
(40,27,2)
(53,27,2)
(1,39,2)
(34,53,2)
(11,27,2)
(15,50,2)
(22,27,2)
(46,41,2)
(35,2,2)
(38,39,2)
(14,0,2)
(38,0,2)
(54,27,2)
(58,40,2)
(14,27,2)
-----------------------------------
(0,* data = (int *)
(1,data[0])
(2,realloc(data, (130000)
(3,data)
(4,0)
(5,0)
(6,data)
(7,(int *)
(8,printIntLine(data[0])
(9,(130000)
(10,data)
(11,data)
(12,)
(13,data[0])
(14,data[0])
(15,10)
(16,data)
(17,malloc(100*sizeof(int)
(18,if (data == NULL)
(19,free(data)
(20,sizeof(int)
(21,0)
(22,NULL)
(23,data)
(24,printIntLine(data[0])
(25,0)
(26,100)
(27,GLOBAL_CONST_TRUE)
(28,RET)
(29,data)
(30,data)
(31,)
(32,data)
(33,)
(34,1)
(35,(int *)
(36,if (data != NULL)
(37,5)
(38,data[0])
(39,data[0] = 5)
(40,sizeof(int)
(41,-1)
(42,int *)
(43,)
(44,data[0] = 10)
(45,data)
(46,exit(-1)
(47,)
(48,NULL)
(49,int)
(50,data != NULL)
(51,data)
(52,if(GLOBAL_CONST_TRUE)
(53,data == NULL)
(54,int)
(55,130000)
(56,int *)
(57,data = (int *)
(58,100*sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
