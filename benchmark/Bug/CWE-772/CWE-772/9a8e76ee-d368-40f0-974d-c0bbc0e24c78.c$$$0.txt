-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105
-----computeFrom-----
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_08_bad(){    if(staticReturnsTrue())    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_08_bad()
CWE401_Memory_Leak__malloc_realloc_char_08_bad
{    if(staticReturnsTrue())    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(staticReturnsTrue())    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(28,2,0)
(0,12,0)
(11,48,0)
(19,23,0)
(39,19,0)
(41,7,0)
(21,10,0)
(16,44,0)
(14,11,0)
(18,8,0)
(29,2,0)
(16,24,0)
(42,14,0)
(37,6,0)
(32,17,0)
(23,19,0)
(6,37,0)
(28,47,0)
(16,28,0)
(27,16,0)
(8,23,0)
(22,24,0)
(8,18,0)
(33,14,0)
(28,16,0)
(12,2,0)
(19,39,0)
(2,28,0)
(13,26,0)
(24,7,0)
(49,2,0)
(44,19,0)
(26,44,0)
(50,8,0)
(43,11,0)
(3,18,0)
(37,1,0)
(24,16,0)
(44,11,0)
(31,12,0)
(19,44,0)
(20,11,0)
(26,11,0)
(23,8,0)
(34,4,0)
(46,49,0)
(38,25,0)
(4,44,0)
(5,49,0)
(15,44,0)
(45,21,0)
(49,10,0)
(7,24,0)
(47,28,0)
(17,2,0)
(21,2,0)
(14,44,0)
(35,6,0)
(17,10,0)
(9,4,0)
(36,11,0)
(2,11,0)
(7,41,1)
(24,7,1)
(6,35,1)
(19,39,1)
(31,2,1)
(13,14,1)
(27,29,1)
(15,40,1)
(50,15,1)
(30,40,1)
(45,49,1)
(21,45,1)
(16,24,1)
(33,37,1)
(33,4,1)
(5,46,1)
(29,26,1)
(4,9,1)
(12,0,1)
(16,44,1)
(41,22,1)
(30,17,1)
(23,8,1)
(34,44,1)
(26,13,1)
(28,16,1)
(32,21,1)
(17,32,1)
(12,2,1)
(28,47,1)
(44,19,1)
(49,2,1)
(8,18,1)
(4,44,1)
(19,23,1)
(18,3,1)
(21,2,1)
(0,31,1)
(46,12,1)
(26,44,1)
(14,42,1)
(2,28,1)
(3,50,1)
(9,34,1)
(30,12,1)
(14,44,1)
(35,4,1)
(49,5,1)
(42,33,1)
(37,6,1)
(22,27,1)
(17,2,1)
(12,40,2)
(3,40,2)
(19,40,2)
(23,8,2)
(4,40,2)
(24,7,2)
(22,40,2)
(46,12,2)
(37,4,2)
(16,40,2)
(34,40,2)
(14,40,2)
(13,40,2)
(9,40,2)
(16,44,2)
(26,40,2)
(37,6,2)
(4,44,2)
(33,40,2)
(44,40,2)
(27,40,2)
(28,16,2)
(28,40,2)
(49,2,2)
(28,47,2)
(23,40,2)
(32,12,2)
(7,40,2)
(5,12,2)
(2,40,2)
(29,40,2)
(19,39,2)
(0,40,2)
(18,40,2)
(24,40,2)
(26,44,2)
(17,12,2)
(45,12,2)
(41,40,2)
(31,40,2)
(12,2,2)
(2,28,2)
(15,40,2)
(8,40,2)
(21,12,2)
(50,40,2)
(21,2,2)
(44,19,2)
(8,18,2)
(14,44,2)
(42,40,2)
(6,4,2)
(49,12,2)
(19,23,2)
(35,4,2)
(16,24,2)
(17,2,2)
-----------------------------------
(0,NULL)
(1,)
(2,data = (char *)
(3,char)
(4,data == NULL)
(5,"New String")
(6,-1)
(7,sizeof(char)
(8,100*sizeof(char)
(9,NULL)
(10,)
(11,)
(12,data != NULL)
(13,data)
(14,strcpy(data, "A String")
(15,data)
(16,realloc(data, (130000)
(17,free(data)
(18,sizeof(char)
(19,(char *)
(20,data)
(21,printLine(data)
(22,130000)
(23,malloc(100*sizeof(char)
(24,(130000)
(25,)
(26,printLine(data)
(27,data)
(28,(char *)
(29,data)
(30,RET)
(31,data)
(32,data)
(33,data)
(34,data)
(35,1)
(36,if (data == NULL)
(37,exit(-1)
(38,if(staticReturnsTrue()
(39,char *)
(40,staticReturnsTrue()
(41,char)
(42,"A String")
(43,if (data != NULL)
(44,* data = (char *)
(45,data)
(46,data)
(47,char *)
(48,)
(49,strcpy(data, "New String")
(50,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
