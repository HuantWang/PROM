-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_04_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,86
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_04_bad(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_04_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_04_bad
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(45,19,0)
(42,24,0)
(14,21,0)
(31,21,0)
(40,13,0)
(10,42,0)
(34,46,0)
(37,19,0)
(20,39,0)
(46,13,0)
(19,24,0)
(32,10,0)
(11,42,0)
(23,31,0)
(18,39,0)
(22,26,0)
(16,0,0)
(41,46,0)
(26,24,0)
(30,33,0)
(21,31,0)
(43,2,0)
(13,46,0)
(15,37,0)
(44,27,0)
(17,24,0)
(28,11,0)
(4,10,0)
(29,16,0)
(36,34,0)
(21,33,0)
(37,2,0)
(26,22,0)
(11,22,0)
(31,42,0)
(7,27,0)
(6,2,0)
(33,24,0)
(12,29,0)
(22,11,0)
(46,34,0)
(2,37,0)
(1,11,0)
(42,34,0)
(34,42,0)
(8,42,0)
(9,39,0)
(27,39,0)
(34,36,0)
(16,29,0)
(3,31,0)
(2,42,0)
(46,13,1)
(8,38,1)
(10,42,1)
(27,44,1)
(12,10,1)
(38,27,1)
(22,11,1)
(14,31,1)
(3,23,1)
(10,32,1)
(25,38,1)
(43,33,1)
(42,34,1)
(16,29,1)
(44,7,1)
(25,26,1)
(29,12,1)
(21,31,1)
(33,30,1)
(19,45,1)
(23,16,1)
(23,10,1)
(31,42,1)
(26,22,1)
(2,42,1)
(32,4,1)
(41,8,1)
(1,19,1)
(45,37,1)
(37,2,1)
(34,36,1)
(31,3,1)
(11,28,1)
(30,21,1)
(4,42,1)
(40,41,1)
(15,2,1)
(13,40,1)
(5,25,1)
(2,6,1)
(11,42,1)
(37,15,1)
(6,43,1)
(28,1,1)
(21,14,1)
(34,46,1)
(10,38,2)
(3,38,2)
(43,38,2)
(37,38,2)
(10,42,2)
(22,38,2)
(45,38,2)
(31,38,2)
(42,38,2)
(12,10,2)
(14,38,2)
(26,38,2)
(29,10,2)
(40,38,2)
(2,42,2)
(13,38,2)
(32,38,2)
(37,2,2)
(11,38,2)
(16,29,2)
(22,11,2)
(30,38,2)
(46,38,2)
(8,38,2)
(46,13,2)
(6,38,2)
(42,34,2)
(34,38,2)
(28,38,2)
(2,38,2)
(4,38,2)
(15,38,2)
(23,38,2)
(33,38,2)
(21,31,2)
(1,38,2)
(34,36,2)
(34,46,2)
(41,38,2)
(31,42,2)
(21,38,2)
(16,10,2)
(19,38,2)
(11,42,2)
(26,22,2)
-----------------------------------
(0,)
(1,data)
(2,data[0])
(3,0)
(4,data)
(5,RET)
(6,0)
(7,data)
(8,data)
(9,data)
(10,data == NULL)
(11,data[0])
(12,1)
(13,sizeof(twoIntsStruct)
(14,intOne)
(15,intTwo)
(16,exit(-1)
(17,if (data == NULL)
(18,if(STATIC_CONST_TRUE)
(19,data[0].intTwo = 0)
(20,if(STATIC_CONST_TRUE)
(21,data[0].intOne)
(22,&data[0])
(23,data)
(24,)
(25,STATIC_CONST_TRUE)
(26,printStructLine(&data[0])
(27,data = NULL)
(28,0)
(29,-1)
(30,0)
(31,data[0])
(32,NULL)
(33,data[0].intOne = 0)
(34,(twoIntsStruct *)
(35, sizeof(twoIntsStruct)
(36,twoIntsStruct *)
(37,data[0].intTwo)
(38,STATIC_CONST_TRUE)
(39,)
(40,twoIntsStruct)
(41,100)
(42,data = (twoIntsStruct *)
(43,data)
(44,NULL)
(45,0)
(46,calloc(100, sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
