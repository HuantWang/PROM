-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_05_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,86
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_05_bad(){    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_05_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_05_bad
{    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,21,0)
(19,45,0)
(45,0,0)
(21,38,0)
(30,18,0)
(18,30,0)
(29,31,0)
(44,25,0)
(20,35,0)
(45,37,0)
(23,5,0)
(30,29,0)
(44,24,0)
(2,31,0)
(17,27,0)
(12,35,0)
(5,4,0)
(16,8,0)
(0,45,0)
(28,6,0)
(42,38,0)
(8,29,0)
(4,5,0)
(7,27,0)
(11,8,0)
(15,38,0)
(2,40,0)
(1,24,0)
(27,7,0)
(13,4,0)
(10,37,0)
(8,40,0)
(26,7,0)
(5,29,0)
(39,21,0)
(30,27,0)
(4,6,0)
(29,30,0)
(0,29,0)
(40,2,0)
(37,31,0)
(41,31,0)
(27,30,0)
(43,0,0)
(9,0,0)
(33,5,0)
(46,29,0)
(40,8,0)
(24,44,0)
(35,29,0)
(6,31,0)
(14,38,0)
(26,17,1)
(4,13,1)
(1,35,1)
(10,45,1)
(35,29,1)
(6,28,1)
(11,16,1)
(33,44,1)
(28,4,1)
(7,26,1)
(8,11,1)
(44,24,1)
(29,30,1)
(0,29,1)
(22,3,1)
(5,23,1)
(39,34,1)
(43,9,1)
(24,1,1)
(30,27,1)
(5,29,1)
(45,19,1)
(35,12,1)
(22,2,1)
(21,39,1)
(0,43,1)
(16,37,1)
(9,6,1)
(4,5,1)
(2,40,1)
(30,18,1)
(8,29,1)
(32,22,1)
(46,3,1)
(13,5,1)
(23,33,1)
(40,8,1)
(19,0,1)
(17,46,1)
(27,7,1)
(12,20,1)
(37,10,1)
(3,21,1)
(20,29,1)
(45,0,1)
(33,35,1)
(33,3,2)
(24,35,2)
(27,7,2)
(30,3,2)
(28,3,2)
(20,3,2)
(40,3,2)
(46,3,2)
(8,29,2)
(6,3,2)
(44,24,2)
(7,3,2)
(23,3,2)
(4,3,2)
(37,3,2)
(43,3,2)
(29,3,2)
(16,3,2)
(2,3,2)
(0,3,2)
(19,3,2)
(1,35,2)
(9,3,2)
(30,18,2)
(35,29,2)
(40,8,2)
(29,30,2)
(30,27,2)
(35,3,2)
(17,3,2)
(12,3,2)
(8,3,2)
(2,40,2)
(11,3,2)
(27,3,2)
(45,3,2)
(5,3,2)
(5,29,2)
(13,3,2)
(0,29,2)
(44,35,2)
(4,5,2)
(10,3,2)
(45,0,2)
(26,3,2)
-----------------------------------
(0,data[0])
(1,1)
(2,printStructLine(&data[0])
(3,staticTrue)
(4,data[0].intOne)
(5,data[0])
(6,data[0].intOne = 0)
(7,sizeof(twoIntsStruct)
(8,data[0])
(9,data)
(10,0)
(11,0)
(12,NULL)
(13,intOne)
(14,data)
(15,if(staticTrue)
(16,data)
(17,100)
(18,twoIntsStruct *)
(19,intTwo)
(20,data)
(21,data = NULL)
(22,staticTrue)
(23,0)
(24,-1)
(25,)
(26,twoIntsStruct)
(27,calloc(100, sizeof(twoIntsStruct)
(28,0)
(29,data = (twoIntsStruct *)
(30,(twoIntsStruct *)
(31,)
(32,RET)
(33,data)
(34,data)
(35,data == NULL)
(36, sizeof(twoIntsStruct)
(37,data[0].intTwo = 0)
(38,)
(39,NULL)
(40,&data[0])
(41,if (data == NULL)
(42,if(staticTrue)
(43,0)
(44,exit(-1)
(45,data[0].intTwo)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
