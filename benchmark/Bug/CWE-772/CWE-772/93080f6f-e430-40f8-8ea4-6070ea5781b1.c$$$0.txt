-----label-----
1
-----code-----
static int64_t * badSource(int64_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int64_t *)calloc(100, sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
24,27
25,26
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,27,31,32,36,38,43,45,50,51,52,56,59,60,63
-----computeFrom-----
15,16
15,17
34,35
34,36
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t * badSource(int64_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)calloc(100, sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
static int64_t
int64_t
* badSource(int64_t * data)
*
badSource
int64_t * data
int64_t
int64_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)calloc(100, sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(25,10,0)
(6,26,0)
(9,25,0)
(16,13,0)
(25,3,0)
(18,26,0)
(4,3,0)
(18,25,0)
(6,3,0)
(1,23,0)
(25,18,0)
(8,6,0)
(11,3,0)
(4,21,0)
(24,6,0)
(23,3,0)
(22,16,0)
(7,5,0)
(3,26,0)
(23,10,0)
(2,26,0)
(21,4,0)
(4,13,0)
(17,25,0)
(12,5,0)
(5,7,0)
(13,16,0)
(3,10,0)
(20,13,0)
(7,14,0)
(6,10,0)
(13,4,0)
(15,26,0)
(3,4,0)
(0,23,0)
(2,23,1)
(5,12,1)
(0,1,1)
(1,3,1)
(7,5,1)
(4,21,1)
(17,2,1)
(9,17,1)
(12,23,1)
(8,6,1)
(20,11,1)
(18,25,1)
(6,24,1)
(25,3,1)
(3,4,1)
(23,10,1)
(4,13,1)
(23,3,1)
(24,18,1)
(16,22,1)
(3,10,1)
(25,10,1)
(23,0,1)
(6,10,1)
(2,7,1)
(25,9,1)
(6,3,1)
(22,20,1)
(13,16,1)
(3,4,2)
(7,5,2)
(7,23,2)
(25,3,2)
(18,25,2)
(23,3,2)
(4,13,2)
(6,10,2)
(25,10,2)
(4,21,2)
(13,16,2)
(3,10,2)
(23,10,2)
(5,23,2)
(12,23,2)
(8,6,2)
(6,3,2)
-----------------------------------
(0,NULL)
(1,data)
(2,L)
(3,data = (int64_t *)
(4,(int64_t *)
(5,-1)
(6,return data;)
(7,exit(-1)
(8,RET)
(9,0)
(10,int64_t * data)
(11,data)
(12,1)
(13,calloc(100, sizeof(int64_t)
(14,)
(15,if (data == NULL)
(16,sizeof(int64_t)
(17,data)
(18,printLongLongLine(data[0])
(19, sizeof(int64_t)
(20,100)
(21,int64_t *)
(22,int64_t)
(23,data == NULL)
(24,data)
(25,data[0])
(26,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
