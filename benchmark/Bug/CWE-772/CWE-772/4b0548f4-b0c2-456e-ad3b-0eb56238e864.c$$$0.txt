-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_05_bad()
{
    if(staticTrue)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,49,50,51,55,58,59,63,66,68,71,73,76,79,80,84,86,92,93,94,98,101,102,106,108
-----computeFrom-----
26,27
26,28
33,34
33,35
46,47
46,48
61,62
61,63
74,75
74,76
82,83
82,84
89,90
89,91
-----guardedBy-----
84,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_05_bad(){    if(staticTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_05_bad()
CWE401_Memory_Leak__malloc_realloc_int_05_bad
{    if(staticTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(staticTrue)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
staticTrue
staticTrue
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(3,31,0)
(1,41,0)
(14,38,0)
(49,3,0)
(7,47,0)
(43,23,0)
(4,49,0)
(29,38,0)
(7,33,0)
(6,23,0)
(25,38,0)
(48,33,0)
(23,38,0)
(51,39,0)
(39,11,0)
(7,3,0)
(24,33,0)
(33,32,0)
(13,22,0)
(41,47,0)
(45,3,0)
(10,46,0)
(53,23,0)
(7,16,0)
(52,3,0)
(12,25,0)
(38,25,0)
(40,31,0)
(38,31,0)
(24,3,0)
(25,11,0)
(39,51,0)
(46,10,0)
(26,22,0)
(11,39,0)
(3,52,0)
(37,39,0)
(41,38,0)
(6,31,0)
(25,12,0)
(8,19,0)
(0,14,0)
(16,7,0)
(31,20,0)
(14,52,0)
(52,5,0)
(27,7,0)
(19,57,0)
(56,41,0)
(42,31,0)
(36,31,0)
(58,3,0)
(23,47,0)
(9,58,0)
(54,47,0)
(14,46,0)
(35,46,0)
(16,32,0)
(22,38,0)
(23,6,0)
(44,2,0)
(30,24,0)
(49,32,0)
(46,14,0)
(52,14,0)
(21,58,0)
(28,10,0)
(47,31,0)
(5,52,0)
(57,19,0)
(18,7,0)
(57,55,0)
(11,25,0)
(17,51,0)
(15,24,0)
(56,22,1)
(57,19,1)
(24,30,1)
(41,1,1)
(7,33,1)
(25,11,1)
(35,0,1)
(18,27,1)
(22,38,1)
(3,52,1)
(9,21,1)
(43,47,1)
(24,3,1)
(37,29,1)
(23,38,1)
(49,3,1)
(38,25,1)
(29,50,1)
(30,15,1)
(27,33,1)
(8,22,1)
(34,58,1)
(23,53,1)
(34,50,1)
(46,10,1)
(7,3,1)
(14,38,1)
(14,46,1)
(11,39,1)
(58,3,1)
(45,6,1)
(26,38,1)
(39,51,1)
(0,45,1)
(51,17,1)
(49,4,1)
(34,49,1)
(23,47,1)
(54,41,1)
(10,28,1)
(17,37,1)
(15,58,1)
(13,26,1)
(22,13,1)
(56,57,1)
(48,24,1)
(58,9,1)
(47,54,1)
(28,35,1)
(33,48,1)
(1,56,1)
(53,43,1)
(41,38,1)
(21,3,1)
(16,7,1)
(52,5,1)
(6,23,1)
(4,16,1)
(25,12,1)
(52,14,1)
(19,8,1)
(7,18,1)
(7,47,1)
(41,50,2)
(0,50,2)
(25,11,2)
(4,58,2)
(23,50,2)
(14,50,2)
(57,19,2)
(39,50,2)
(48,58,2)
(9,50,2)
(58,50,2)
(8,22,2)
(7,58,2)
(41,38,2)
(57,22,2)
(22,50,2)
(13,50,2)
(56,50,2)
(45,50,2)
(25,12,2)
(11,39,2)
(23,47,2)
(47,50,2)
(7,47,2)
(35,50,2)
(30,58,2)
(21,50,2)
(3,52,2)
(17,50,2)
(7,3,2)
(39,51,2)
(52,5,2)
(26,50,2)
(14,46,2)
(43,50,2)
(46,50,2)
(6,23,2)
(27,58,2)
(6,50,2)
(49,3,2)
(29,50,2)
(3,50,2)
(7,33,2)
(16,7,2)
(37,50,2)
(25,50,2)
(49,58,2)
(53,50,2)
(54,50,2)
(10,50,2)
(58,3,2)
(52,14,2)
(19,22,2)
(1,50,2)
(38,25,2)
(51,50,2)
(33,58,2)
(46,10,2)
(22,38,2)
(24,3,2)
(38,50,2)
(28,50,2)
(11,50,2)
(24,58,2)
(16,58,2)
(14,38,2)
(15,58,2)
(23,38,2)
(18,58,2)
(52,50,2)
-----------------------------------
(0,data)
(1,0)
(2,)
(3,data = (int *)
(4,data)
(5,int *)
(6,printIntLine(data[0])
(7,data[0])
(8,1)
(9,NULL)
(10,sizeof(int)
(11,malloc(100*sizeof(int)
(12,int *)
(13,NULL)
(14,realloc(data, (130000)
(15,data)
(16,printIntLine(data[0])
(17,int)
(18,0)
(19,-1)
(20,)
(21,data)
(22,data == NULL)
(23,data[0])
(24,data[0])
(25,(int *)
(26,data)
(27,data)
(28,int)
(29,data)
(30,0)
(31,)
(32,)
(33,data[0] = 10)
(34,RET)
(35,130000)
(36,if (data != NULL)
(37,100)
(38,* data = (int *)
(39,100*sizeof(int)
(40,if (data == NULL)
(41,data[0])
(42,data)
(43,data)
(44,if(staticTrue)
(45,data)
(46,(130000)
(47,data[0] = 5)
(48,10)
(49,free(data)
(50,staticTrue)
(51,sizeof(int)
(52,(int *)
(53,0)
(54,5)
(55,)
(56,data)
(57,exit(-1)
(58,data != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
