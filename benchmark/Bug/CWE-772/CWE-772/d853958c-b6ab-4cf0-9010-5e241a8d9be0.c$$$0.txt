-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_07_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
85,87
86,87
89,90
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,87,88,90
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_07_bad(){    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_07_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_07_bad
{    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(40,42,0)
(34,5,0)
(30,16,0)
(24,32,0)
(6,39,0)
(42,3,0)
(50,45,0)
(10,3,0)
(29,25,0)
(27,12,0)
(21,7,0)
(16,30,0)
(36,42,0)
(26,25,0)
(1,38,0)
(8,25,0)
(34,39,0)
(0,12,0)
(31,14,0)
(17,38,0)
(50,12,0)
(5,34,0)
(3,46,0)
(7,16,0)
(20,1,0)
(40,7,0)
(28,40,0)
(16,38,0)
(2,33,0)
(22,21,0)
(35,34,0)
(11,46,0)
(12,7,0)
(12,50,0)
(41,33,0)
(16,7,0)
(38,1,0)
(45,50,0)
(38,16,0)
(37,7,0)
(48,25,0)
(47,5,0)
(42,40,0)
(39,46,0)
(49,8,0)
(13,8,0)
(23,40,0)
(7,46,0)
(5,7,0)
(4,9,0)
(19,5,0)
(43,21,0)
(15,14,0)
(24,9,0)
(45,46,0)
(9,24,0)
(5,47,1)
(50,12,1)
(12,7,1)
(8,13,1)
(22,43,1)
(43,7,1)
(10,42,1)
(31,8,1)
(14,15,1)
(23,28,1)
(42,36,1)
(18,33,1)
(33,2,1)
(47,19,1)
(16,30,1)
(9,4,1)
(1,20,1)
(19,24,1)
(41,14,1)
(28,39,1)
(34,35,1)
(35,5,1)
(45,50,1)
(15,31,1)
(39,6,1)
(19,21,1)
(7,16,1)
(21,22,1)
(41,45,1)
(12,27,1)
(4,21,1)
(17,37,1)
(20,17,1)
(34,5,1)
(3,10,1)
(21,7,1)
(38,1,1)
(36,40,1)
(0,3,1)
(40,7,1)
(42,40,1)
(13,49,1)
(24,9,1)
(2,41,1)
(6,34,1)
(37,14,1)
(27,0,1)
(16,38,1)
(5,7,1)
(40,23,1)
(42,40,2)
(5,14,2)
(6,14,2)
(34,5,2)
(16,30,2)
(24,9,2)
(20,14,2)
(50,14,2)
(45,14,2)
(40,14,2)
(16,38,2)
(4,21,2)
(38,14,2)
(3,14,2)
(10,14,2)
(0,14,2)
(7,14,2)
(19,14,2)
(45,50,2)
(9,21,2)
(21,7,2)
(23,14,2)
(24,21,2)
(17,14,2)
(42,14,2)
(22,14,2)
(5,7,2)
(12,14,2)
(43,14,2)
(36,14,2)
(38,1,2)
(47,14,2)
(39,14,2)
(12,7,2)
(7,16,2)
(34,14,2)
(21,14,2)
(50,12,2)
(1,14,2)
(37,14,2)
(35,14,2)
(40,7,2)
(16,14,2)
(28,14,2)
(27,14,2)
-----------------------------------
(0,data)
(1,sizeof(twoIntsStruct)
(2,5)
(3,data[0].intTwo = 0)
(4,1)
(5,data[0])
(6,0)
(7,data = (twoIntsStruct *)
(8,data = NULL)
(9,-1)
(10,0)
(11,if (data == NULL)
(12,data[0])
(13,NULL)
(14,staticFive==5)
(15,5)
(16,(twoIntsStruct *)
(17,100)
(18,RET)
(19,data)
(20,twoIntsStruct)
(21,data == NULL)
(22,NULL)
(23,0)
(24,exit(-1)
(25,)
(26,data)
(27,0)
(28,data)
(29,if(staticFive==5)
(30,twoIntsStruct *)
(31,staticFive)
(32,)
(33,staticFive==5)
(34,data[0].intOne)
(35,intOne)
(36,intTwo)
(37,data)
(38,calloc(100, sizeof(twoIntsStruct)
(39,data[0].intOne = 0)
(40,data[0])
(41,staticFive)
(42,data[0].intTwo)
(43,data)
(44, sizeof(twoIntsStruct)
(45,printStructLine(&data[0])
(46,)
(47,0)
(48,if(staticFive==5)
(49,data)
(50,&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
