-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_18_bad()
{
    char * data;
    data = NULL;
    goto source;
source:
    {
        char myString[] = "myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = strdup(myString);
        /* Use data */
        printLine(data);
    }
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation of memory */
    /* no deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
22,24
22,25
23,24
24,25
24,26
26,27
26,28
26,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
46,47
48,49
48,50
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,27,28,30,34,37,39,43,45,47,49,50
-----computeFrom-----
13,14
13,15
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_18_bad(){    char * data;    data = NULL;    goto source;source:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    goto sink;sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__strdup_char_18_bad()
CWE401_Memory_Leak__strdup_char_18_bad
{    char * data;    data = NULL;    goto source;source:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    goto sink;sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }
source
{        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ;
sink
;
-----joern-----
(14,17,0)
(4,19,0)
(17,15,0)
(0,6,0)
(6,12,0)
(7,19,0)
(18,8,0)
(17,19,0)
(4,8,0)
(1,12,0)
(13,12,0)
(16,4,0)
(3,8,0)
(10,12,0)
(15,12,0)
(20,6,0)
(2,15,0)
(19,4,0)
(11,12,0)
(19,15,0)
(5,12,0)
(8,15,0)
(7,8,1)
(18,3,1)
(19,4,1)
(16,7,1)
(14,19,1)
(9,13,1)
(13,17,1)
(17,19,1)
(3,10,1)
(20,0,1)
(4,16,1)
(17,14,1)
(8,18,1)
(10,6,1)
(6,20,1)
(4,8,1)
(17,19,2)
(4,8,2)
(19,4,2)
-----------------------------------
(0,data)
(1,data)
(2,myString)
(3,myString)
(4,strdup(myString)
(5,source:)
(6,data = NULL)
(7,data)
(8,myString[] = "myString")
(9,RET)
(10,goto source;)
(11,sink:)
(12,)
(13,goto sink;)
(14,data)
(15,)
(16,myString)
(17,printLine(data)
(18,"myString")
(19,data = strdup(myString)
(20,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
