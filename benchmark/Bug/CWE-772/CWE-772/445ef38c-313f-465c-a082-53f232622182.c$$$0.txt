-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_05_bad()
{
    if(staticTrue)
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
32,33
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
91,93
91,94
92,93
94,95
96,97
96,98
97,98
99,100
100,101
100,102
101,102
104,105
104,106
105,106
105,107
106,107
108,109
110,111
110,112
110,113
110,114
111,112
112,113
112,114
113,114
113,115
114,115
114,116
115,116
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
129,130
130,131
130,132
131,132
133,134
133,135
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
144,145
145,146
145,147
146,147
148,149
-----nextToken-----
2,4,8,14,16,17,22,24,27,29,33,34,38,40,45,47,53,54,55,56,62,63,64,65,69,73,75,79,80,84,88,90,93,95,98,102,103,107,109,116,117,118,119,125,126,127,128,132,136,138,142,143,147,149
-----computeFrom-----
28,29
28,30
36,37
36,38
49,50
49,51
58,59
58,60
82,83
82,84
96,97
96,98
105,106
105,107
112,113
112,114
121,122
121,123
-----guardedBy-----
107,149
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_05_bad(){    if(staticTrue)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_05_bad()
CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_05_bad
{    if(staticTrue)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }}
if(staticTrue)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }
staticTrue
staticTrue
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(18,65,0)
(4,30,0)
(11,81,0)
(29,34,0)
(57,65,0)
(55,41,0)
(66,77,0)
(32,19,0)
(5,54,0)
(44,71,0)
(27,69,0)
(60,74,0)
(14,63,0)
(17,82,0)
(69,27,0)
(21,81,0)
(30,56,0)
(58,4,0)
(10,20,0)
(67,68,0)
(73,13,0)
(3,20,0)
(77,61,0)
(37,74,0)
(52,16,0)
(47,42,0)
(58,54,0)
(54,19,0)
(20,10,0)
(16,54,0)
(49,19,0)
(8,38,0)
(4,58,0)
(72,31,0)
(62,19,0)
(38,8,0)
(70,71,0)
(81,54,0)
(15,19,0)
(63,42,0)
(7,38,0)
(33,15,0)
(33,78,0)
(24,55,0)
(40,69,0)
(0,40,0)
(15,33,0)
(36,13,0)
(26,8,0)
(22,4,0)
(74,19,0)
(30,4,0)
(13,68,0)
(45,74,0)
(3,80,0)
(28,8,0)
(34,74,0)
(51,16,0)
(59,19,0)
(12,31,0)
(76,32,0)
(20,3,0)
(54,71,0)
(41,55,0)
(65,78,0)
(50,49,0)
(52,49,0)
(34,63,0)
(45,58,0)
(78,65,0)
(19,1,0)
(78,33,0)
(58,45,0)
(68,82,0)
(79,34,0)
(39,58,0)
(69,40,0)
(33,48,0)
(46,52,0)
(45,23,0)
(31,74,0)
(56,30,0)
(68,13,0)
(53,66,0)
(44,40,0)
(64,60,0)
(71,44,0)
(60,80,0)
(40,44,0)
(20,41,0)
(2,16,0)
(8,54,0)
(16,52,0)
(41,20,0)
(9,19,0)
(77,66,0)
(23,45,0)
(55,74,0)
(71,54,0)
(38,32,0)
(74,45,0)
(42,80,0)
(71,70,0)
(82,80,0)
(65,54,0)
(63,34,0)
(6,55,0)
(13,74,0)
(48,33,0)
(25,75,0)
(63,34,1)
(15,33,1)
(28,26,1)
(79,29,1)
(55,74,1)
(34,74,1)
(30,22,1)
(32,76,1)
(11,21,1)
(16,51,1)
(37,15,1)
(64,3,1)
(31,12,1)
(58,54,1)
(0,5,1)
(41,55,1)
(53,81,1)
(81,54,1)
(16,54,1)
(44,40,1)
(71,44,1)
(14,34,1)
(8,54,1)
(7,8,1)
(45,23,1)
(33,78,1)
(55,24,1)
(67,13,1)
(58,4,1)
(38,8,1)
(47,63,1)
(29,31,1)
(34,79,1)
(50,52,1)
(20,10,1)
(52,46,1)
(22,39,1)
(77,66,1)
(74,45,1)
(65,18,1)
(52,16,1)
(38,7,1)
(24,6,1)
(78,65,1)
(35,43,1)
(39,37,1)
(13,73,1)
(68,67,1)
(3,20,1)
(73,36,1)
(26,49,1)
(76,38,1)
(18,57,1)
(8,28,1)
(82,17,1)
(51,2,1)
(31,74,1)
(2,77,1)
(35,31,1)
(36,42,1)
(45,58,1)
(65,54,1)
(72,74,1)
(21,54,1)
(12,72,1)
(49,50,1)
(68,13,1)
(63,14,1)
(30,56,1)
(4,30,1)
(2,81,1)
(60,64,1)
(5,43,1)
(33,48,1)
(60,74,1)
(40,69,1)
(42,47,1)
(69,27,1)
(46,16,1)
(57,32,1)
(71,70,1)
(69,0,1)
(54,71,1)
(35,60,1)
(13,74,1)
(66,53,1)
(6,82,1)
(81,11,1)
(20,41,1)
(17,68,1)
(4,30,2)
(33,78,2)
(41,55,2)
(82,31,2)
(13,31,2)
(47,31,2)
(5,43,2)
(54,43,2)
(40,43,2)
(32,43,2)
(74,43,2)
(68,31,2)
(55,31,2)
(24,31,2)
(13,74,2)
(57,43,2)
(30,43,2)
(71,44,2)
(18,43,2)
(26,43,2)
(71,70,2)
(71,43,2)
(78,43,2)
(34,31,2)
(58,54,2)
(0,43,2)
(55,74,2)
(29,31,2)
(42,31,2)
(69,27,2)
(52,43,2)
(45,43,2)
(45,23,2)
(31,43,2)
(16,54,2)
(68,13,2)
(79,31,2)
(81,43,2)
(34,74,2)
(30,56,2)
(15,33,2)
(2,43,2)
(67,31,2)
(37,43,2)
(46,43,2)
(53,81,2)
(8,54,2)
(38,43,2)
(77,81,2)
(33,43,2)
(72,43,2)
(64,31,2)
(54,71,2)
(17,31,2)
(50,43,2)
(69,43,2)
(20,10,2)
(44,43,2)
(76,43,2)
(60,31,2)
(22,43,2)
(28,43,2)
(49,43,2)
(63,34,2)
(21,43,2)
(38,8,2)
(52,16,2)
(65,43,2)
(20,41,2)
(78,65,2)
(4,43,2)
(14,31,2)
(15,43,2)
(36,31,2)
(77,66,2)
(63,31,2)
(65,54,2)
(11,43,2)
(44,40,2)
(12,43,2)
(81,54,2)
(40,69,2)
(3,31,2)
(51,43,2)
(45,58,2)
(31,74,2)
(20,31,2)
(16,43,2)
(58,4,2)
(60,74,2)
(7,43,2)
(58,43,2)
(74,45,2)
(3,20,2)
(39,43,2)
(66,81,2)
(6,31,2)
(33,48,2)
(41,31,2)
(8,43,2)
(73,31,2)
-----------------------------------
(0,100)
(1,)
(2,data)
(3,printStructLine((twoIntsStruct *)
(4,(130000)
(5,data)
(6,data)
(7,intTwo)
(8,data[0])
(9,data)
(10,twoIntsStruct *)
(11,NULL)
(12,NULL)
(13,data[0])
(14,intOne)
(15,printStructLine((twoIntsStruct *)
(16,data[0])
(17,1)
(18,0)
(19,)
(20,(twoIntsStruct *)
(21,data)
(22,130000)
(23,struct _twoIntsStruct *)
(24,0)
(25,if(staticTrue)
(26,data)
(27,struct _twoIntsStruct)
(28,0)
(29,data)
(30,sizeof(struct _twoIntsStruct)
(31,data != NULL)
(32,data[0].intTwo = 0)
(33,(twoIntsStruct *)
(34,data[0])
(35,RET)
(36,data)
(37,data)
(38,data[0].intTwo)
(39,data)
(40,100*sizeof(struct _twoIntsStruct)
(41,&data[0])
(42,data[0].intOne = 1)
(43,staticTrue)
(44,malloc(100*sizeof(struct _twoIntsStruct)
(45,(struct _twoIntsStruct *)
(46,intOne)
(47,1)
(48,twoIntsStruct *)
(49,data[0].intOne = 0)
(50,0)
(51,0)
(52,data[0].intOne)
(53,1)
(54,* data = (struct _twoIntsStruct *)
(55,data[0])
(56,struct _twoIntsStruct)
(57,data)
(58,realloc(data, (130000)
(59,if (data == NULL)
(60,free(data)
(61,)
(62,if (data != NULL)
(63,data[0].intOne)
(64,data)
(65,data[0])
(66,-1)
(67,intTwo)
(68,data[0].intTwo)
(69,sizeof(struct _twoIntsStruct)
(70,struct _twoIntsStruct *)
(71,(struct _twoIntsStruct *)
(72,data)
(73,0)
(74,data = (struct _twoIntsStruct *)
(75,)
(76,0)
(77,exit(-1)
(78,&data[0])
(79,0)
(80,)
(81,data == NULL)
(82,data[0].intTwo = 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
