-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_11_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
92,93
92,94
93,94
94,95
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,86,90,91,95,97
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_11_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_11_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_11_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(43,36,0)
(16,42,0)
(32,28,0)
(41,33,0)
(44,10,0)
(17,36,0)
(47,18,0)
(18,26,0)
(8,31,0)
(11,18,0)
(19,5,0)
(26,10,0)
(24,42,0)
(27,30,0)
(33,25,0)
(39,7,0)
(10,44,0)
(36,17,0)
(7,26,0)
(20,10,0)
(32,18,0)
(38,36,0)
(21,30,0)
(1,20,0)
(2,28,0)
(10,20,0)
(23,31,0)
(9,1,0)
(43,5,0)
(31,17,0)
(17,31,0)
(45,25,0)
(20,33,0)
(36,43,0)
(21,14,0)
(35,1,0)
(3,35,0)
(4,33,0)
(40,5,0)
(31,26,0)
(49,7,0)
(30,21,0)
(35,3,0)
(29,25,0)
(34,25,0)
(42,26,0)
(20,1,0)
(18,32,0)
(28,5,0)
(48,26,0)
(22,40,0)
(6,40,0)
(13,20,0)
(42,6,0)
(37,32,0)
(26,5,0)
(6,42,0)
(15,6,0)
(10,26,0)
(36,38,0)
(1,35,0)
(27,7,1)
(23,8,1)
(20,1,1)
(42,26,1)
(10,44,1)
(6,42,1)
(35,3,1)
(42,24,1)
(8,40,1)
(31,26,1)
(16,28,1)
(2,32,1)
(35,9,1)
(7,26,1)
(11,21,1)
(12,46,1)
(21,30,1)
(46,43,1)
(32,37,1)
(7,39,1)
(15,42,1)
(28,2,1)
(9,13,1)
(10,20,1)
(22,6,1)
(13,48,1)
(18,26,1)
(49,26,1)
(0,33,1)
(48,0,1)
(6,15,1)
(47,11,1)
(33,41,1)
(26,10,1)
(37,18,1)
(31,23,1)
(32,18,1)
(30,27,1)
(24,16,1)
(40,22,1)
(43,36,1)
(1,35,1)
(39,49,1)
(41,4,1)
(20,33,1)
(17,31,1)
(46,0,1)
(11,7,1)
(18,47,1)
(36,38,1)
(36,17,1)
(43,0,2)
(7,26,2)
(37,0,2)
(36,38,2)
(48,0,2)
(42,0,2)
(17,0,2)
(17,31,2)
(28,0,2)
(39,0,2)
(11,0,2)
(20,1,2)
(13,0,2)
(36,17,2)
(8,0,2)
(21,7,2)
(20,33,2)
(32,18,2)
(18,0,2)
(49,0,2)
(1,0,2)
(2,0,2)
(43,36,2)
(30,7,2)
(10,44,2)
(21,30,2)
(23,0,2)
(10,20,2)
(16,0,2)
(26,10,2)
(32,0,2)
(36,0,2)
(24,0,2)
(22,0,2)
(35,3,2)
(31,26,2)
(26,0,2)
(6,0,2)
(7,0,2)
(9,0,2)
(31,0,2)
(1,35,2)
(10,0,2)
(6,42,2)
(42,26,2)
(47,0,2)
(27,7,2)
(18,26,2)
(15,0,2)
(20,0,2)
(40,0,2)
(35,0,2)
-----------------------------------
(0,globalReturnsTrue()
(1,100*sizeof(struct _twoIntsStruct)
(2,0)
(3,struct _twoIntsStruct)
(4,data)
(5,)
(6,data[0].intTwo)
(7,data == NULL)
(8,data)
(9,100)
(10,(struct _twoIntsStruct *)
(11,data)
(12,RET)
(13,data)
(14,)
(15,intTwo)
(16,data)
(17,&data[0])
(18,data[0])
(19,if (data == NULL)
(20,realloc(data, 100*sizeof(struct _twoIntsStruct)
(21,exit(-1)
(22,0)
(23,0)
(24,0)
(25,)
(26,data = (struct _twoIntsStruct *)
(27,1)
(28,data[0].intOne = 0)
(29,if(globalReturnsTrue()
(30,-1)
(31,data[0])
(32,data[0].intOne)
(33,data = NULL)
(34,data)
(35,sizeof(struct _twoIntsStruct)
(36,(twoIntsStruct *)
(37,intOne)
(38,twoIntsStruct *)
(39,NULL)
(40,data[0].intTwo = 0)
(41,NULL)
(42,data[0])
(43,printStructLine((twoIntsStruct *)
(44,struct _twoIntsStruct *)
(45,if(globalReturnsTrue()
(46,globalReturnsTrue()
(47,0)
(48,data)
(49,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
