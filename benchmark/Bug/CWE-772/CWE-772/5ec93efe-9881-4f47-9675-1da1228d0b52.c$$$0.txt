-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    struct _twoIntsStruct * * dataPtr = (struct _twoIntsStruct * *)dataVoidPtr;
    /* dereference dataPtr into data */
    struct _twoIntsStruct * data = (*dataPtr);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
15,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
24,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
38,39
39,40
-----nextToken-----
2,4,6,8,9,14,16,17,18,23,25,26,28,32,34,35,40,41
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    struct _twoIntsStruct * * dataPtr = (struct _twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    struct _twoIntsStruct * data = (*dataPtr);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_badSink(void * dataVoidPtr)
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    struct _twoIntsStruct * * dataPtr = (struct _twoIntsStruct * *)dataVoidPtr;    /* dereference dataPtr into data */    struct _twoIntsStruct * data = (*dataPtr);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
struct _twoIntsStruct * * dataPtr = (struct _twoIntsStruct * *)dataVoidPtr;
struct _twoIntsStruct * * dataPtr = (struct _twoIntsStruct * *)dataVoidPtr;
struct _twoIntsStruct
_twoIntsStruct
* * dataPtr = (struct _twoIntsStruct * *)dataVoidPtr
*
*
dataPtr
= (struct _twoIntsStruct * *)dataVoidPtr
(struct _twoIntsStruct * *)dataVoidPtr
struct _twoIntsStruct * *
struct _twoIntsStruct
_twoIntsStruct
* *
*
*
dataVoidPtr
dataVoidPtr
struct _twoIntsStruct * data = (*dataPtr);
struct _twoIntsStruct * data = (*dataPtr);
struct _twoIntsStruct
_twoIntsStruct
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
;
-----joern-----
(5,0,0)
(7,8,0)
(2,7,0)
(12,8,0)
(3,9,0)
(13,9,0)
(7,9,0)
(5,11,0)
(5,6,0)
(11,5,0)
(8,7,0)
(4,0,0)
(8,0,0)
(0,5,0)
(1,5,0)
(0,9,0)
(2,0,1)
(5,1,1)
(7,8,1)
(5,6,1)
(10,7,1)
(1,4,1)
(8,12,1)
(5,11,1)
(12,2,1)
(0,5,1)
(8,0,1)
(5,11,2)
(5,6,2)
(7,8,2)
(0,5,2)
(8,0,2)
-----------------------------------
(0,* * dataPtr = (struct _twoIntsStruct * *)
(1,dataVoidPtr)
(2,data)
(3,data)
(4,dataPtr)
(5,(struct _twoIntsStruct * *)
(6,void * dataVoidPtr)
(7,* data = (*dataPtr)
(8,*dataPtr)
(9,)
(10,RET)
(11,struct _twoIntsStruct * *)
(12,dataPtr)
(13,dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
