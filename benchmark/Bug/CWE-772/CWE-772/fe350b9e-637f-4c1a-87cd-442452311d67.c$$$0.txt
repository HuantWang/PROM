-----label-----
1
-----code-----
static int64_t * badSource(int64_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int64_t *)realloc(data, 100*sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
24,27
25,26
27,28
29,30
29,31
31,32
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
65,66
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,28,30,34,35,39,41,46,48,53,54,55,59,62,63,66
-----computeFrom-----
15,16
15,17
29,30
29,31
37,38
37,39
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t * badSource(int64_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)realloc(data, 100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
static int64_t
int64_t
* badSource(int64_t * data)
*
badSource
int64_t * data
int64_t
int64_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)realloc(data, 100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(20,13,0)
(20,22,0)
(12,13,0)
(22,11,0)
(13,20,0)
(1,16,0)
(16,1,0)
(23,25,0)
(14,10,0)
(4,10,0)
(10,4,0)
(25,5,0)
(10,5,0)
(4,9,0)
(15,21,0)
(21,5,0)
(13,6,0)
(27,25,0)
(26,6,0)
(13,12,0)
(0,16,0)
(24,20,0)
(17,9,0)
(1,18,0)
(21,6,0)
(8,22,0)
(19,11,0)
(20,5,0)
(6,13,0)
(22,20,0)
(25,6,0)
(2,21,0)
(10,6,0)
(7,10,0)
(11,22,0)
(3,9,0)
(6,9,0)
(6,5,0)
(25,9,0)
(21,6,1)
(4,10,1)
(17,21,1)
(21,5,1)
(15,6,1)
(20,5,1)
(17,1,1)
(2,15,1)
(10,6,1)
(0,21,1)
(8,24,1)
(7,14,1)
(22,11,1)
(24,26,1)
(1,16,1)
(6,13,1)
(21,2,1)
(13,20,1)
(25,23,1)
(14,17,1)
(25,5,1)
(25,6,1)
(20,22,1)
(19,8,1)
(6,5,1)
(10,7,1)
(27,25,1)
(23,4,1)
(10,5,1)
(16,0,1)
(11,19,1)
(13,12,1)
(6,13,2)
(10,5,2)
(20,5,2)
(1,21,2)
(1,16,2)
(16,21,2)
(13,12,2)
(27,25,2)
(25,6,2)
(21,6,2)
(10,6,2)
(13,20,2)
(22,11,2)
(21,5,2)
(25,5,2)
(0,21,2)
(20,22,2)
(6,5,2)
(4,10,2)
-----------------------------------
(0,1)
(1,exit(-1)
(2,NULL)
(3,if (data == NULL)
(4,printLongLongLine(data[0])
(5,int64_t * data)
(6,data = (int64_t *)
(7,0)
(8,100)
(9,)
(10,data[0])
(11,sizeof(int64_t)
(12,int64_t *)
(13,(int64_t *)
(14,data)
(15,data)
(16,-1)
(17,L)
(18,)
(19,int64_t)
(20,realloc(data, 100*sizeof(int64_t)
(21,data == NULL)
(22,100*sizeof(int64_t)
(23,data)
(24,data)
(25,return data;)
(26,data)
(27,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
