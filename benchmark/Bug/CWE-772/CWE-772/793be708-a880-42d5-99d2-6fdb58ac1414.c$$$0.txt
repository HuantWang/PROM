-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_06_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
28,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
48,50
49,50
49,51
50,51
53,54
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,29,30,32,36,39,41,45,47,51,52,54
-----computeFrom-----
13,14
13,15
19,20
19,21
34,35
34,36
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_06_bad(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_06_bad()
CWE401_Memory_Leak__strdup_char_06_bad
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,22,0)
(19,8,0)
(22,5,0)
(7,22,0)
(14,6,0)
(17,6,0)
(1,5,0)
(12,5,0)
(4,8,0)
(23,21,0)
(3,8,0)
(12,21,0)
(10,23,0)
(16,19,0)
(13,18,0)
(20,8,0)
(2,18,0)
(24,19,0)
(21,5,0)
(11,21,0)
(5,25,0)
(23,22,0)
(15,12,0)
(21,23,0)
(19,24,1)
(15,21,1)
(21,23,1)
(11,22,1)
(17,18,1)
(7,9,1)
(17,12,1)
(10,11,1)
(0,6,1)
(9,18,1)
(23,22,1)
(2,13,1)
(12,15,1)
(22,7,1)
(14,17,1)
(18,2,1)
(23,10,1)
(24,16,1)
(13,19,1)
(6,14,1)
(12,21,1)
(21,23,2)
(22,18,2)
(10,18,2)
(11,18,2)
(15,18,2)
(23,22,2)
(23,18,2)
(7,18,2)
(9,18,2)
(12,21,2)
(12,18,2)
(21,18,2)
-----------------------------------
(0,RET)
(1,myString)
(2,5)
(3,if(STATIC_CONST_FIVE==5)
(4,data)
(5,)
(6,STATIC_CONST_FIVE==5)
(7,"myString")
(8,)
(9,myString)
(10,myString)
(11,data)
(12,printLine(data)
(13,STATIC_CONST_FIVE)
(14,5)
(15,data)
(16,data)
(17,STATIC_CONST_FIVE)
(18,STATIC_CONST_FIVE==5)
(19,data = NULL)
(20,if(STATIC_CONST_FIVE==5)
(21,data = strdup(myString)
(22,myString[] = "myString")
(23,strdup(myString)
(24,NULL)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
