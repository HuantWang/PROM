-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_17_bad()
{
    int i,j;
    char * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
48,51
49,50
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
71,72
73,74
76,77
77,78
77,79
78,79
80,81
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
88,89
88,90
89,90
92,93
93,94
95,96
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,51,54,55,59,61,66,68,72,74,75,79,81,86,87,90,91,94,96
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
57,58
57,59
84,85
84,86
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_17_bad(){    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_17_bad()
CWE401_Memory_Leak__char_calloc_17_bad
{    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,15,0)
(39,1,0)
(16,5,0)
(41,6,0)
(43,10,0)
(8,15,0)
(27,7,0)
(10,43,0)
(46,1,0)
(48,7,0)
(44,15,0)
(6,43,0)
(37,1,0)
(24,41,0)
(4,15,0)
(45,3,0)
(47,45,0)
(14,39,0)
(31,25,0)
(40,21,0)
(6,7,0)
(12,3,0)
(32,8,0)
(29,0,0)
(21,16,0)
(30,7,0)
(35,31,0)
(33,30,0)
(34,3,0)
(22,1,0)
(42,0,0)
(36,4,0)
(31,43,0)
(2,27,0)
(16,21,0)
(38,41,0)
(17,6,0)
(30,6,0)
(27,6,0)
(43,6,0)
(43,31,0)
(13,1,0)
(23,1,0)
(25,31,0)
(11,25,0)
(0,3,0)
(20,39,0)
(26,30,0)
(28,4,0)
(15,9,1)
(43,10,1)
(40,41,1)
(21,40,1)
(31,25,1)
(28,15,1)
(17,0,1)
(30,6,1)
(34,39,1)
(24,6,1)
(9,44,1)
(3,12,1)
(39,14,1)
(41,6,1)
(33,16,1)
(45,47,1)
(29,45,1)
(8,15,1)
(4,36,1)
(4,15,1)
(35,17,1)
(42,29,1)
(36,28,1)
(47,27,1)
(2,30,1)
(6,43,1)
(25,11,1)
(44,0,1)
(45,3,1)
(27,6,1)
(41,38,1)
(43,31,1)
(0,3,1)
(26,33,1)
(38,24,1)
(18,4,1)
(11,35,1)
(14,20,1)
(30,26,1)
(29,3,1)
(12,34,1)
(8,32,1)
(32,4,1)
(0,42,1)
(27,2,1)
(16,21,1)
(28,8,1)
(33,41,1)
(45,0,2)
(32,4,2)
(30,6,2)
(16,41,2)
(45,3,2)
(41,6,2)
(43,31,2)
(8,4,2)
(27,6,2)
(8,15,2)
(6,0,2)
(42,0,2)
(28,4,2)
(40,41,2)
(26,0,2)
(27,0,2)
(24,0,2)
(36,4,2)
(31,25,2)
(43,0,2)
(4,4,2)
(38,0,2)
(47,0,2)
(2,0,2)
(43,10,2)
(0,3,2)
(33,0,2)
(25,0,2)
(41,0,2)
(11,0,2)
(4,15,2)
(30,0,2)
(29,0,2)
(16,21,2)
(31,0,2)
(6,43,2)
(17,0,2)
(21,41,2)
(35,0,2)
(0,0,2)
-----------------------------------
(0,i < 1)
(1,)
(2,data)
(3,i = 0)
(4,j < 1)
(5,)
(6,data = (char *)
(7,)
(8,j++)
(9,0)
(10,char *)
(11,char)
(12,0)
(13,data)
(14,NULL)
(15,j = 0)
(16,exit(-1)
(17,data)
(18,RET)
(19, sizeof(char)
(20,data)
(21,-1)
(22,i)
(23,for(j = 0; j < 1; j++)
(24,data)
(25,sizeof(char)
(26,"A String")
(27,printLine(data)
(28,j)
(29,i)
(30,strcpy(data, "A String")
(31,calloc(100, sizeof(char)
(32,j)
(33,data)
(34,i)
(35,100)
(36,1)
(37,j)
(38,NULL)
(39,data = NULL)
(40,1)
(41,data == NULL)
(42,1)
(43,(char *)
(44,j)
(45,i++)
(46,for(i = 0; i < 1; i++)
(47,i)
(48,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
