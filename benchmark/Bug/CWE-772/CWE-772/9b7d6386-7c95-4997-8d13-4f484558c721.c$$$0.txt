-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_06_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
85,87
86,87
89,90
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,87,88,90
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_06_bad(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_06_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_06_bad
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(23,46,0)
(29,26,0)
(32,30,0)
(12,33,0)
(6,37,0)
(17,27,0)
(46,23,0)
(40,24,0)
(25,44,0)
(27,23,0)
(35,22,0)
(45,50,0)
(13,49,0)
(14,34,0)
(30,32,0)
(23,1,0)
(0,44,0)
(4,18,0)
(47,33,0)
(32,27,0)
(46,5,0)
(26,23,0)
(48,34,0)
(15,26,0)
(38,36,0)
(30,1,0)
(42,22,0)
(44,1,0)
(34,48,0)
(37,5,0)
(41,23,0)
(42,50,0)
(48,43,0)
(22,23,0)
(18,23,0)
(22,42,0)
(0,18,0)
(10,1,0)
(3,0,0)
(27,32,0)
(39,36,0)
(33,24,0)
(7,18,0)
(16,49,0)
(46,2,0)
(21,42,0)
(18,0,0)
(11,27,0)
(8,24,0)
(5,46,0)
(20,5,0)
(19,24,0)
(28,22,0)
(2,46,0)
(5,37,0)
(50,1,0)
(44,25,1)
(20,41,1)
(32,27,1)
(26,29,1)
(42,21,1)
(0,18,1)
(30,32,1)
(27,17,1)
(48,34,1)
(18,4,1)
(38,49,1)
(23,46,1)
(38,30,1)
(6,20,1)
(14,26,1)
(41,49,1)
(29,15,1)
(42,22,1)
(16,33,1)
(27,23,1)
(4,7,1)
(37,6,1)
(5,37,1)
(28,44,1)
(25,0,1)
(13,16,1)
(0,3,1)
(33,47,1)
(47,12,1)
(39,38,1)
(46,2,1)
(26,23,1)
(50,45,1)
(45,42,1)
(22,35,1)
(22,23,1)
(11,50,1)
(36,39,1)
(9,36,1)
(7,26,1)
(17,11,1)
(3,18,1)
(46,5,1)
(35,28,1)
(18,23,1)
(7,48,1)
(15,23,1)
(21,22,1)
(34,14,1)
(49,13,1)
(17,49,2)
(6,49,2)
(26,49,2)
(37,49,2)
(0,49,2)
(25,49,2)
(42,22,2)
(14,26,2)
(48,34,2)
(4,49,2)
(20,49,2)
(23,49,2)
(42,49,2)
(32,49,2)
(30,49,2)
(34,26,2)
(27,23,2)
(44,49,2)
(46,49,2)
(32,27,2)
(50,49,2)
(22,23,2)
(22,49,2)
(21,49,2)
(29,49,2)
(46,5,2)
(27,49,2)
(30,32,2)
(11,49,2)
(15,49,2)
(45,49,2)
(35,49,2)
(0,18,2)
(48,26,2)
(28,49,2)
(3,49,2)
(41,49,2)
(5,49,2)
(7,49,2)
(18,23,2)
(46,2,2)
(18,49,2)
(23,46,2)
(5,37,2)
(26,23,2)
-----------------------------------
(0,data[0].intOne)
(1,)
(2,twoIntsStruct *)
(3,intOne)
(4,0)
(5,calloc(100, sizeof(twoIntsStruct)
(6,twoIntsStruct)
(7,data)
(8,if(STATIC_CONST_FIVE==5)
(9,RET)
(10,if (data == NULL)
(11,data)
(12,data)
(13,5)
(14,1)
(15,data)
(16,STATIC_CONST_FIVE)
(17,0)
(18,data[0])
(19,data)
(20,100)
(21,intTwo)
(22,data[0])
(23,data = (twoIntsStruct *)
(24,)
(25,0)
(26,data == NULL)
(27,data[0])
(28,data)
(29,NULL)
(30,printStructLine(&data[0])
(31, sizeof(twoIntsStruct)
(32,&data[0])
(33,data = NULL)
(34,-1)
(35,0)
(36,STATIC_CONST_FIVE==5)
(37,sizeof(twoIntsStruct)
(38,STATIC_CONST_FIVE)
(39,5)
(40,if(STATIC_CONST_FIVE==5)
(41,data)
(42,data[0].intTwo)
(43,)
(44,data[0].intOne = 0)
(45,0)
(46,(twoIntsStruct *)
(47,NULL)
(48,exit(-1)
(49,STATIC_CONST_FIVE==5)
(50,data[0].intTwo = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
