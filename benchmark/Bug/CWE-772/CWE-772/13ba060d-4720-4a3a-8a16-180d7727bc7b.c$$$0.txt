-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_07_bad()
{
    int * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,61,62,63,67,70,71,75,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_07_bad(){    int * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_07_bad()
CWE401_Memory_Leak__int_realloc_07_bad
{    int * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(7,27,0)
(32,38,0)
(35,25,0)
(24,26,0)
(26,7,0)
(30,16,0)
(1,7,0)
(1,17,0)
(23,36,0)
(41,16,0)
(22,15,0)
(40,3,0)
(2,36,0)
(7,1,0)
(16,32,0)
(5,21,0)
(31,0,0)
(17,3,0)
(37,17,0)
(29,3,0)
(33,32,0)
(34,21,0)
(39,38,0)
(35,38,0)
(16,26,0)
(14,28,0)
(13,25,0)
(25,32,0)
(11,1,0)
(19,0,0)
(15,8,0)
(15,22,0)
(6,11,0)
(18,3,0)
(7,26,0)
(11,28,0)
(12,22,0)
(1,11,0)
(0,26,0)
(28,11,0)
(9,17,0)
(25,35,0)
(25,26,0)
(4,25,0)
(10,1,0)
(26,38,0)
(27,7,0)
(35,25,1)
(0,31,1)
(23,21,1)
(2,23,1)
(12,0,1)
(1,11,1)
(21,5,1)
(30,0,1)
(16,41,1)
(32,33,1)
(24,21,1)
(16,26,1)
(25,4,1)
(7,1,1)
(22,12,1)
(37,9,1)
(17,37,1)
(41,30,1)
(10,24,1)
(5,34,1)
(23,35,1)
(11,28,1)
(25,26,1)
(20,36,1)
(4,13,1)
(26,7,1)
(19,26,1)
(30,15,1)
(15,22,1)
(13,32,1)
(33,16,1)
(0,26,1)
(31,19,1)
(1,17,1)
(25,32,1)
(6,10,1)
(14,6,1)
(7,27,1)
(28,14,1)
(34,17,1)
(36,2,1)
(28,21,2)
(32,21,2)
(14,21,2)
(22,0,2)
(15,22,2)
(16,21,2)
(41,21,2)
(25,26,2)
(25,21,2)
(24,21,2)
(33,21,2)
(12,0,2)
(1,11,2)
(4,21,2)
(26,21,2)
(6,21,2)
(13,21,2)
(15,0,2)
(0,26,2)
(11,28,2)
(31,21,2)
(1,17,2)
(16,26,2)
(0,21,2)
(30,21,2)
(35,21,2)
(7,27,2)
(26,7,2)
(19,21,2)
(10,21,2)
(11,21,2)
(1,21,2)
(35,25,2)
(25,32,2)
(7,21,2)
(7,1,2)
-----------------------------------
(0,data == NULL)
(1,realloc(data, 100*sizeof(int)
(2,5)
(3,)
(4,0)
(5,5)
(6,100)
(7,(int *)
(8,)
(9,data)
(10,data)
(11,100*sizeof(int)
(12,1)
(13,data)
(14,int)
(15,exit(-1)
(16,data[0])
(17,data = NULL)
(18,if(staticFive==5)
(19,data)
(20,RET)
(21,staticFive==5)
(22,-1)
(23,staticFive)
(24,data)
(25,data[0])
(26,data = (int *)
(27,int *)
(28,sizeof(int)
(29,if(staticFive==5)
(30,data)
(31,NULL)
(32,data[0] = 5)
(33,5)
(34,staticFive)
(35,printIntLine(data[0])
(36,staticFive==5)
(37,NULL)
(38,)
(39,if (data == NULL)
(40,data)
(41,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
