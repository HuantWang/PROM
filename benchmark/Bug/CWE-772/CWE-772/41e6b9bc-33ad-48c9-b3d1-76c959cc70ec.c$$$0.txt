-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_10_bad()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,70
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_10_bad(){    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_10_bad()
CWE401_Memory_Leak__char_malloc_10_bad
{    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,18,0)
(24,8,0)
(30,5,0)
(13,27,0)
(32,7,0)
(20,22,0)
(22,31,0)
(18,30,0)
(0,3,0)
(13,31,0)
(19,31,0)
(9,22,0)
(21,16,0)
(5,13,0)
(30,18,0)
(11,8,0)
(0,31,0)
(16,12,0)
(28,8,0)
(31,13,0)
(22,3,0)
(14,8,0)
(13,5,0)
(2,30,0)
(6,3,0)
(23,28,0)
(12,16,0)
(27,13,0)
(12,4,0)
(5,30,0)
(17,28,0)
(15,7,0)
(31,3,0)
(7,31,0)
(26,0,0)
(0,26,1)
(21,7,1)
(29,25,1)
(10,29,1)
(7,32,1)
(29,0,1)
(0,31,1)
(1,2,1)
(5,30,1)
(9,7,1)
(13,5,1)
(32,15,1)
(18,1,1)
(9,12,1)
(26,22,1)
(2,19,1)
(31,13,1)
(28,23,1)
(22,31,1)
(23,17,1)
(7,31,1)
(15,31,1)
(22,20,1)
(20,9,1)
(12,16,1)
(30,18,1)
(19,25,1)
(16,21,1)
(13,27,1)
(25,28,1)
(21,7,2)
(2,25,2)
(22,25,2)
(31,25,2)
(0,31,2)
(12,16,2)
(26,25,2)
(19,25,2)
(16,7,2)
(5,25,2)
(13,25,2)
(0,25,2)
(12,7,2)
(13,27,2)
(18,25,2)
(7,31,2)
(22,31,2)
(15,25,2)
(13,5,2)
(32,25,2)
(30,25,2)
(31,13,2)
(30,18,2)
(5,30,2)
(9,25,2)
(20,25,2)
(7,25,2)
(1,25,2)
-----------------------------------
(0,printLine(data)
(1,char)
(2,100)
(3,)
(4,)
(5,malloc(100*sizeof(char)
(6,if (data == NULL)
(7,data == NULL)
(8,)
(9,data)
(10,RET)
(11,data)
(12,exit(-1)
(13,(char *)
(14,if(globalTrue)
(15,data)
(16,-1)
(17,data)
(18,sizeof(char)
(19,data)
(20,"A String")
(21,1)
(22,strcpy(data, "A String")
(23,NULL)
(24,if(globalTrue)
(25,globalTrue)
(26,data)
(27,char *)
(28,data = NULL)
(29,globalTrue)
(30,100*sizeof(char)
(31,data = (char *)
(32,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
