-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_05_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,87,89
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_05_bad(){    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_05_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_05_bad
{    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(7,21,0)
(38,14,0)
(12,28,0)
(42,7,0)
(12,21,0)
(30,7,0)
(42,35,0)
(21,27,0)
(7,42,0)
(46,12,0)
(20,6,0)
(22,19,0)
(3,0,0)
(29,43,0)
(47,14,0)
(19,24,0)
(1,37,0)
(26,4,0)
(16,28,0)
(4,26,0)
(10,42,0)
(39,43,0)
(32,33,0)
(28,0,0)
(28,12,0)
(26,32,0)
(24,19,0)
(15,35,0)
(47,27,0)
(44,37,0)
(32,37,0)
(14,38,0)
(25,33,0)
(36,6,0)
(2,7,0)
(41,33,0)
(33,6,0)
(38,21,0)
(37,32,0)
(24,34,0)
(17,44,0)
(13,38,0)
(37,44,0)
(32,26,0)
(5,38,0)
(43,21,0)
(26,21,0)
(18,32,0)
(11,12,0)
(14,47,0)
(45,21,0)
(9,27,0)
(35,27,0)
(21,26,0)
(40,6,0)
(0,27,0)
(22,43,1)
(43,29,1)
(7,21,1)
(26,32,1)
(32,37,1)
(39,21,1)
(29,39,1)
(12,21,1)
(0,3,1)
(2,43,1)
(42,10,1)
(38,21,1)
(15,42,1)
(31,8,1)
(42,7,1)
(44,17,1)
(17,1,1)
(5,13,1)
(2,24,1)
(7,30,1)
(16,12,1)
(10,7,1)
(14,38,1)
(30,2,1)
(43,21,1)
(21,26,1)
(38,5,1)
(28,12,1)
(24,19,1)
(19,22,1)
(33,41,1)
(32,33,1)
(12,46,1)
(18,45,1)
(46,11,1)
(11,35,1)
(28,16,1)
(41,25,1)
(31,47,1)
(23,31,1)
(37,44,1)
(35,15,1)
(45,8,1)
(26,4,1)
(47,14,1)
(13,0,1)
(1,18,1)
(8,33,1)
(3,28,1)
(30,8,2)
(21,26,2)
(15,8,2)
(12,21,2)
(42,8,2)
(26,4,2)
(16,8,2)
(22,43,2)
(44,8,2)
(17,8,2)
(7,21,2)
(39,8,2)
(37,44,2)
(42,7,2)
(14,38,2)
(29,8,2)
(14,8,2)
(18,8,2)
(3,8,2)
(12,8,2)
(43,21,2)
(26,8,2)
(28,8,2)
(13,8,2)
(28,12,2)
(38,21,2)
(19,43,2)
(32,37,2)
(5,8,2)
(32,8,2)
(11,8,2)
(38,8,2)
(24,19,2)
(46,8,2)
(0,8,2)
(45,8,2)
(24,43,2)
(7,8,2)
(47,8,2)
(37,8,2)
(35,8,2)
(2,8,2)
(10,8,2)
(1,8,2)
(43,8,2)
(21,8,2)
(26,32,2)
(32,33,2)
(47,14,2)
-----------------------------------
(0,data[0].intTwo = 0)
(1,100)
(2,data)
(3,0)
(4,twoIntsStruct *)
(5,0)
(6,)
(7,data[0])
(8,staticTrue)
(9,if (data == NULL)
(10,intOne)
(11,data)
(12,data[0])
(13,data)
(14,&data[0])
(15,0)
(16,intTwo)
(17,twoIntsStruct)
(18,data)
(19,-1)
(20,if(staticTrue)
(21,data = (twoIntsStruct *)
(22,1)
(23,RET)
(24,exit(-1)
(25,data)
(26,(twoIntsStruct *)
(27,)
(28,data[0].intTwo)
(29,NULL)
(30,0)
(31,staticTrue)
(32,realloc(data, 100*sizeof(twoIntsStruct)
(33,data = NULL)
(34,)
(35,data[0].intOne = 0)
(36,if(staticTrue)
(37,100*sizeof(twoIntsStruct)
(38,data[0])
(39,data)
(40,data)
(41,NULL)
(42,data[0].intOne)
(43,data == NULL)
(44,sizeof(twoIntsStruct)
(45,data)
(46,0)
(47,printStructLine(&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
