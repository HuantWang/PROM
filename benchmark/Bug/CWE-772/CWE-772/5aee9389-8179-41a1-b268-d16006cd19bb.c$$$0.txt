-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_03_bad()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
72,74
75,76
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,38,41,42,46,48,53,55,60,61,62,66,69,70,73,74,76
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
37,38
37,39
44,45
44,46
57,58
57,59
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_03_bad(){    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_03_bad()
CWE401_Memory_Leak__int_realloc_03_bad
{    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(40,19,0)
(37,19,0)
(12,16,0)
(25,3,0)
(13,41,0)
(7,12,0)
(18,33,0)
(31,5,0)
(25,38,0)
(3,6,0)
(18,24,0)
(4,21,0)
(34,9,0)
(37,12,0)
(25,19,0)
(23,41,0)
(22,37,0)
(6,0,0)
(29,37,0)
(6,3,0)
(39,15,0)
(21,41,0)
(0,6,0)
(39,19,0)
(32,0,0)
(26,20,0)
(27,39,0)
(15,39,0)
(36,6,0)
(1,16,0)
(19,16,0)
(35,41,0)
(3,25,0)
(14,24,0)
(19,25,0)
(11,3,0)
(38,25,0)
(2,5,0)
(9,19,0)
(15,16,0)
(30,20,0)
(17,21,0)
(28,39,0)
(8,9,0)
(39,12,0)
(3,21,0)
(24,18,0)
(10,20,1)
(27,28,1)
(2,21,1)
(36,11,1)
(26,30,1)
(9,19,1)
(30,15,1)
(6,0,1)
(40,5,1)
(8,19,1)
(24,14,1)
(18,24,1)
(39,27,1)
(31,2,1)
(12,7,1)
(29,22,1)
(3,6,1)
(14,9,1)
(11,40,1)
(30,5,1)
(7,37,1)
(19,25,1)
(17,4,1)
(32,36,1)
(22,9,1)
(39,12,1)
(0,32,1)
(15,39,1)
(37,19,1)
(37,29,1)
(25,38,1)
(22,18,1)
(28,12,1)
(20,26,1)
(34,8,1)
(9,34,1)
(5,31,1)
(39,19,1)
(25,3,1)
(3,21,1)
(21,17,1)
(28,5,2)
(34,5,2)
(27,5,2)
(18,9,2)
(11,5,2)
(3,5,2)
(40,5,2)
(18,24,2)
(3,6,2)
(15,5,2)
(3,21,2)
(37,19,2)
(12,5,2)
(32,5,2)
(39,19,2)
(9,5,2)
(0,5,2)
(37,5,2)
(25,38,2)
(15,39,2)
(25,5,2)
(39,5,2)
(19,25,2)
(29,5,2)
(19,5,2)
(36,5,2)
(6,0,2)
(7,5,2)
(9,19,2)
(8,5,2)
(14,9,2)
(24,9,2)
(6,5,2)
(39,12,2)
(22,5,2)
(25,3,2)
-----------------------------------
(0,sizeof(int)
(1,if (data == NULL)
(2,5)
(3,realloc(data, 100*sizeof(int)
(4,data)
(5,5==5)
(6,100*sizeof(int)
(7,5)
(8,data)
(9,data == NULL)
(10,RET)
(11,data)
(12,data[0] = 5)
(13,if(5==5)
(14,1)
(15,printIntLine(data[0])
(16,)
(17,NULL)
(18,exit(-1)
(19,data = (int *)
(20,5==5)
(21,data = NULL)
(22,data)
(23,data)
(24,-1)
(25,(int *)
(26,5)
(27,0)
(28,data)
(29,0)
(30,5)
(31,5)
(32,int)
(33,)
(34,NULL)
(35,if(5==5)
(36,100)
(37,data[0])
(38,int *)
(39,data[0])
(40,data)
(41,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
