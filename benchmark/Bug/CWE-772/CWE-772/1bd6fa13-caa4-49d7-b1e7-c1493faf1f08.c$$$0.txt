-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_15_bad()
{
    twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
85,86
86,87
86,88
87,88
91,92
91,93
93,94
93,95
93,96
93,97
93,98
93,99
94,95
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,83,84,88,89,90,92,95,96,97,98,102,103,104
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_15_bad(){    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_15_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_15_bad
{    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(26,50,0)
(8,16,0)
(39,58,0)
(28,33,0)
(37,32,0)
(35,16,0)
(47,56,0)
(18,32,0)
(27,56,0)
(6,56,0)
(51,38,0)
(38,56,0)
(37,31,0)
(38,32,0)
(29,2,0)
(2,55,0)
(53,55,0)
(32,18,0)
(14,24,0)
(45,59,0)
(58,39,0)
(15,59,0)
(16,38,0)
(52,14,0)
(9,14,0)
(54,56,0)
(3,56,0)
(0,20,0)
(34,58,0)
(24,47,0)
(24,14,0)
(50,26,0)
(12,10,0)
(46,56,0)
(33,56,0)
(17,55,0)
(39,33,0)
(19,31,0)
(32,37,0)
(44,7,0)
(11,58,0)
(36,49,0)
(22,50,0)
(14,38,0)
(5,55,0)
(25,44,0)
(16,44,0)
(7,56,0)
(40,7,0)
(21,37,0)
(4,20,0)
(32,38,0)
(47,24,0)
(1,20,0)
(49,56,0)
(43,10,0)
(26,57,0)
(44,16,0)
(59,38,0)
(13,55,0)
(58,38,0)
(31,37,0)
(30,39,0)
(10,20,0)
(31,19,1)
(32,37,1)
(8,26,1)
(47,24,1)
(8,59,1)
(26,50,1)
(39,30,1)
(41,54,1)
(7,40,1)
(14,38,1)
(45,38,1)
(37,31,1)
(44,25,1)
(21,51,1)
(29,41,1)
(17,41,1)
(24,14,1)
(36,42,1)
(16,35,1)
(22,59,1)
(23,5,1)
(41,6,1)
(52,33,1)
(40,44,1)
(5,2,1)
(30,58,1)
(43,12,1)
(34,7,1)
(50,22,1)
(38,32,1)
(39,58,1)
(58,11,1)
(59,38,1)
(11,34,1)
(59,15,1)
(44,16,1)
(23,17,1)
(33,28,1)
(28,39,1)
(19,21,1)
(15,45,1)
(25,16,1)
(49,36,1)
(54,47,1)
(9,52,1)
(2,29,1)
(51,42,1)
(42,10,1)
(14,9,1)
(32,18,1)
(16,38,1)
(58,38,1)
(10,43,1)
(6,49,1)
(35,8,1)
(34,42,2)
(39,42,2)
(19,42,2)
(7,42,2)
(21,42,2)
(54,42,2)
(39,58,2)
(15,42,2)
(49,42,2)
(50,59,2)
(16,38,2)
(11,42,2)
(38,42,2)
(36,42,2)
(30,42,2)
(26,50,2)
(26,59,2)
(6,42,2)
(44,42,2)
(9,42,2)
(24,14,2)
(40,42,2)
(22,59,2)
(51,42,2)
(47,24,2)
(59,42,2)
(37,31,2)
(32,37,2)
(16,42,2)
(24,42,2)
(45,42,2)
(8,42,2)
(32,18,2)
(38,32,2)
(32,42,2)
(59,38,2)
(25,42,2)
(44,16,2)
(2,41,2)
(47,42,2)
(58,38,2)
(58,42,2)
(35,42,2)
(14,38,2)
(52,42,2)
(5,41,2)
(33,42,2)
(31,42,2)
(28,42,2)
(29,41,2)
(14,42,2)
(37,42,2)
(17,41,2)
-----------------------------------
(0,switch(6)
(1,switch(7)
(2,printLine("Benign, fixed string")
(3,default:)
(4,data)
(5,break;)
(6,break;)
(7,data[0].intOne = 0)
(8,data)
(9,0)
(10,data = NULL)
(11,0)
(12,data)
(13,default:)
(14,data[0])
(15,NULL)
(16,data[0])
(17,break;)
(18,twoIntsStruct *)
(19,twoIntsStruct)
(20,)
(21,100)
(22,1)
(23,RET)
(24,&data[0])
(25,intOne)
(26,exit(-1)
(27,if (data == NULL)
(28,0)
(29,"Benign, fixed string")
(30,intTwo)
(31,sizeof(twoIntsStruct)
(32,(twoIntsStruct *)
(33,data[0].intTwo = 0)
(34,data)
(35,0)
(36,"Benign, fixed string")
(37,calloc(100, sizeof(twoIntsStruct)
(38,data = (twoIntsStruct *)
(39,data[0].intTwo)
(40,0)
(41,7)
(42,6)
(43,NULL)
(44,data[0].intOne)
(45,data)
(46,case 6:)
(47,printStructLine(&data[0])
(48, sizeof(twoIntsStruct)
(49,printLine("Benign, fixed string")
(50,-1)
(51,data)
(52,data)
(53,case 7:)
(54,break;)
(55,)
(56,)
(57,)
(58,data[0])
(59,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
