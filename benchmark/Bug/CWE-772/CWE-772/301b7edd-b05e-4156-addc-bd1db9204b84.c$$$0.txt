-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
51,53
51,54
52,53
53,54
53,55
55,56
55,57
55,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
78,79
80,81
82,83
82,84
83,84
84,85
84,86
86,87
86,88
86,89
89,90
90,91
91,92
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,56,57,59,63,66,68,72,74,79,81,85,87,88,92,93
-----computeFrom-----
35,36
35,37
61,62
61,63
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_32_bad()
CWE401_Memory_Leak__strdup_wchar_t_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(8,14,0)
(36,4,0)
(6,26,0)
(17,39,0)
(9,0,0)
(13,1,0)
(1,0,0)
(19,14,0)
(39,13,0)
(19,17,0)
(2,9,0)
(11,0,0)
(32,1,0)
(17,1,0)
(4,0,0)
(12,13,0)
(29,39,0)
(4,21,0)
(7,6,0)
(24,21,0)
(10,0,0)
(16,29,0)
(26,6,0)
(14,22,0)
(33,8,0)
(27,14,0)
(18,13,0)
(38,1,0)
(5,19,0)
(20,0,0)
(35,17,0)
(3,26,0)
(8,38,0)
(30,38,0)
(22,14,0)
(38,8,0)
(37,39,0)
(39,29,0)
(21,4,0)
(26,4,0)
(12,39,0)
(6,20,0)
(23,20,0)
(14,0,0)
(31,9,0)
(34,0,0)
(15,12,0)
(25,22,0)
(3,7,1)
(33,30,1)
(21,24,1)
(8,14,1)
(16,37,1)
(9,2,1)
(7,17,1)
(25,27,1)
(28,6,1)
(17,35,1)
(8,33,1)
(22,25,1)
(6,26,1)
(39,29,1)
(30,9,1)
(19,14,1)
(5,12,1)
(24,36,1)
(12,15,1)
(19,5,1)
(26,4,1)
(36,14,1)
(4,21,1)
(37,18,1)
(18,38,1)
(29,16,1)
(31,4,1)
(38,8,1)
(26,3,1)
(12,39,1)
(17,39,1)
(2,31,1)
(15,39,1)
(14,22,1)
(35,19,1)
(12,39,2)
(8,14,2)
(14,22,2)
(17,39,2)
(4,21,2)
(6,26,2)
(26,4,2)
(38,8,2)
(19,14,2)
(39,29,2)
-----------------------------------
(0,)
(1,)
(2,NULL)
(3,dataPtr2)
(4,* *dataPtr2 = &data)
(5,dataPtr1)
(6,* data = *dataPtr2)
(7,data)
(8,*dataPtr1)
(9,data = NULL)
(10,dataPtr1)
(11,data)
(12,printWLine(data)
(13,)
(14,* *dataPtr1 = &data)
(15,data)
(16,myString)
(17,*dataPtr1 = data)
(18,"myString")
(19,*dataPtr1)
(20,)
(21,&data)
(22,&data)
(23,data)
(24,data)
(25,data)
(26,*dataPtr2)
(27,dataPtr1)
(28,RET)
(29,wcsdup(myString)
(30,data)
(31,data)
(32,data)
(33,dataPtr1)
(34,dataPtr2)
(35,data)
(36,dataPtr2)
(37,data)
(38,* data = *dataPtr1)
(39,data = wcsdup(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
