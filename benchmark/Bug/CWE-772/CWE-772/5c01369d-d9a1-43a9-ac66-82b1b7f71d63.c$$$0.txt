-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_14_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
98,99
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,96,97,99
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_14_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_14_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_14_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(53,24,0)
(13,0,0)
(34,8,0)
(30,38,0)
(8,2,0)
(3,18,0)
(14,16,0)
(8,34,0)
(43,17,0)
(9,2,0)
(31,50,0)
(24,2,0)
(1,47,0)
(42,34,0)
(5,7,0)
(16,14,0)
(41,47,0)
(10,40,0)
(47,17,0)
(42,49,0)
(28,48,0)
(25,19,0)
(19,51,0)
(32,41,0)
(44,8,0)
(27,41,0)
(11,14,0)
(12,17,0)
(52,8,0)
(34,42,0)
(49,42,0)
(15,16,0)
(41,27,0)
(39,51,0)
(37,50,0)
(22,16,0)
(48,2,0)
(45,27,0)
(2,27,0)
(23,17,0)
(49,50,0)
(38,50,0)
(40,48,0)
(26,48,0)
(16,2,0)
(19,25,0)
(41,51,0)
(40,38,0)
(33,47,0)
(48,40,0)
(14,31,0)
(29,7,0)
(46,31,0)
(27,2,0)
(2,50,0)
(35,13,0)
(13,35,0)
(51,19,0)
(51,41,0)
(27,45,0)
(20,18,0)
(4,35,0)
(21,42,0)
(42,21,0)
(36,24,0)
(42,34,1)
(19,39,1)
(26,31,1)
(46,14,1)
(3,20,1)
(13,35,1)
(48,2,1)
(18,3,1)
(29,5,1)
(30,40,1)
(6,18,1)
(16,22,1)
(8,52,1)
(42,21,1)
(49,42,1)
(15,24,1)
(31,46,1)
(4,24,1)
(7,29,1)
(19,25,1)
(39,32,1)
(27,41,1)
(27,45,1)
(10,48,1)
(52,44,1)
(24,36,1)
(9,7,1)
(15,13,1)
(32,9,1)
(11,16,1)
(8,2,1)
(22,15,1)
(14,11,1)
(40,48,1)
(20,7,1)
(2,27,1)
(47,33,1)
(14,16,1)
(35,4,1)
(34,8,1)
(16,2,1)
(41,51,1)
(41,47,1)
(48,28,1)
(44,38,1)
(24,2,1)
(33,1,1)
(36,53,1)
(38,30,1)
(51,19,1)
(5,47,1)
(53,2,1)
(20,49,1)
(40,10,1)
(28,26,1)
(22,7,2)
(41,51,2)
(52,7,2)
(42,21,2)
(42,34,2)
(27,7,2)
(40,48,2)
(19,7,2)
(14,16,2)
(16,7,2)
(51,19,2)
(8,7,2)
(13,24,2)
(27,45,2)
(24,2,2)
(39,7,2)
(28,7,2)
(30,7,2)
(4,24,2)
(9,7,2)
(32,7,2)
(24,7,2)
(48,2,2)
(13,35,2)
(27,41,2)
(35,24,2)
(2,27,2)
(46,7,2)
(15,7,2)
(41,47,2)
(31,7,2)
(11,7,2)
(44,7,2)
(2,7,2)
(34,8,2)
(41,7,2)
(8,2,2)
(16,2,2)
(10,7,2)
(26,7,2)
(36,7,2)
(42,7,2)
(49,7,2)
(14,7,2)
(19,25,2)
(34,7,2)
(40,7,2)
(49,42,2)
(48,7,2)
(51,7,2)
(53,7,2)
(38,7,2)
-----------------------------------
(0,)
(1,data)
(2,data = (struct _twoIntsStruct *)
(3,5)
(4,1)
(5,globalFive)
(6,RET)
(7,globalFive==5)
(8,data[0])
(9,data)
(10,intTwo)
(11,intOne)
(12,data)
(13,exit(-1)
(14,data[0].intOne)
(15,data)
(16,data[0])
(17,)
(18,globalFive==5)
(19,sizeof(struct _twoIntsStruct)
(20,globalFive)
(21,twoIntsStruct *)
(22,0)
(23,if(globalFive==5)
(24,data == NULL)
(25,struct _twoIntsStruct)
(26,data)
(27,(struct _twoIntsStruct *)
(28,0)
(29,5)
(30,0)
(31,data[0].intOne = 0)
(32,data)
(33,NULL)
(34,&data[0])
(35,-1)
(36,NULL)
(37,if (data == NULL)
(38,data[0].intTwo = 0)
(39,100)
(40,data[0].intTwo)
(41,realloc(data, 100*sizeof(struct _twoIntsStruct)
(42,(twoIntsStruct *)
(43,if(globalFive==5)
(44,data)
(45,struct _twoIntsStruct *)
(46,0)
(47,data = NULL)
(48,data[0])
(49,printStructLine((twoIntsStruct *)
(50,)
(51,100*sizeof(struct _twoIntsStruct)
(52,0)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
