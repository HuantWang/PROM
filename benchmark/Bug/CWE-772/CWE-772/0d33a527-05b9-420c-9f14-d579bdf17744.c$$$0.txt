-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_05_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,91,93
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_05_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_05_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_05_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,13,0)
(20,30,0)
(48,5,0)
(21,34,0)
(35,21,0)
(0,30,0)
(36,5,0)
(17,45,0)
(31,13,0)
(11,34,0)
(25,2,0)
(13,24,0)
(37,8,0)
(17,24,0)
(26,2,0)
(2,34,0)
(28,6,0)
(45,17,0)
(30,20,0)
(2,3,0)
(27,15,0)
(40,11,0)
(23,5,0)
(33,35,0)
(39,27,0)
(20,16,0)
(7,30,0)
(30,34,0)
(17,34,0)
(19,5,0)
(42,48,0)
(14,31,0)
(6,29,0)
(27,3,0)
(8,38,0)
(34,38,0)
(3,27,0)
(47,21,0)
(3,2,0)
(27,39,0)
(34,17,0)
(4,28,0)
(43,11,0)
(16,38,0)
(21,35,0)
(39,38,0)
(24,17,0)
(46,13,0)
(9,48,0)
(1,38,0)
(13,31,0)
(35,8,0)
(22,16,0)
(41,34,0)
(15,27,0)
(6,28,0)
(44,21,0)
(12,20,0)
(31,14,0)
(3,2,1)
(7,0,1)
(30,7,1)
(17,24,1)
(37,35,1)
(48,42,1)
(26,16,1)
(21,44,1)
(20,30,1)
(31,14,1)
(24,13,1)
(10,18,1)
(46,41,1)
(39,27,1)
(31,46,1)
(40,34,1)
(35,21,1)
(41,32,1)
(42,9,1)
(17,45,1)
(33,21,1)
(4,11,1)
(22,20,1)
(8,37,1)
(2,34,1)
(47,6,1)
(34,17,1)
(27,15,1)
(2,25,1)
(35,33,1)
(47,11,1)
(44,47,1)
(25,26,1)
(0,8,1)
(21,34,1)
(16,22,1)
(43,40,1)
(27,3,1)
(20,12,1)
(13,31,1)
(28,4,1)
(11,43,1)
(32,48,1)
(18,32,1)
(12,30,1)
(30,34,1)
(6,28,1)
(11,34,1)
(18,39,1)
(46,32,2)
(6,11,2)
(0,32,2)
(35,32,2)
(27,15,2)
(24,32,2)
(22,32,2)
(17,45,2)
(11,34,2)
(44,32,2)
(28,11,2)
(33,32,2)
(30,32,2)
(12,32,2)
(25,32,2)
(27,32,2)
(21,32,2)
(3,32,2)
(13,32,2)
(17,24,2)
(41,32,2)
(39,32,2)
(2,32,2)
(6,28,2)
(27,3,2)
(31,14,2)
(35,21,2)
(13,31,2)
(16,32,2)
(31,32,2)
(39,27,2)
(26,32,2)
(47,32,2)
(2,34,2)
(34,17,2)
(11,32,2)
(17,32,2)
(20,32,2)
(40,32,2)
(30,34,2)
(3,2,2)
(8,32,2)
(34,32,2)
(21,34,2)
(7,32,2)
(20,30,2)
(24,13,2)
(4,11,2)
(37,32,2)
(43,32,2)
-----------------------------------
(0,data)
(1,if (data == NULL)
(2,data[0])
(3,&data[0])
(4,1)
(5,)
(6,exit(-1)
(7,0)
(8,data[0].intOne = 0)
(9,data)
(10,RET)
(11,data == NULL)
(12,intTwo)
(13,100*sizeof(struct _twoIntsStruct)
(14,struct _twoIntsStruct)
(15,twoIntsStruct *)
(16,data[0].intTwo = 0)
(17,(struct _twoIntsStruct *)
(18,staticTrue)
(19,if(staticTrue)
(20,data[0].intTwo)
(21,data[0])
(22,0)
(23,data)
(24,malloc(100*sizeof(struct _twoIntsStruct)
(25,0)
(26,data)
(27,(twoIntsStruct *)
(28,-1)
(29,)
(30,data[0])
(31,sizeof(struct _twoIntsStruct)
(32,staticTrue)
(33,intOne)
(34,data = (struct _twoIntsStruct *)
(35,data[0].intOne)
(36,if(staticTrue)
(37,0)
(38,)
(39,printStructLine((twoIntsStruct *)
(40,data)
(41,data)
(42,NULL)
(43,NULL)
(44,0)
(45,struct _twoIntsStruct *)
(46,100)
(47,data)
(48,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
