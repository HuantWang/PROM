-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_04_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,67,69
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_04_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_04_bad()
CWE401_Memory_Leak__wchar_t_calloc_04_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(16,13,0)
(22,14,0)
(5,7,0)
(2,10,0)
(15,8,0)
(14,22,0)
(10,2,0)
(15,5,0)
(22,28,0)
(4,5,0)
(5,8,0)
(7,10,0)
(1,4,0)
(10,7,0)
(27,13,0)
(11,5,0)
(6,14,0)
(12,8,0)
(26,15,0)
(20,23,0)
(7,5,0)
(24,7,0)
(17,4,0)
(7,24,0)
(25,23,0)
(29,10,0)
(13,23,0)
(0,2,0)
(9,23,0)
(0,29,1)
(26,4,1)
(15,26,1)
(1,5,1)
(7,24,1)
(14,6,1)
(26,22,1)
(3,13,1)
(15,5,1)
(7,10,1)
(17,1,1)
(27,16,1)
(6,4,1)
(4,17,1)
(13,27,1)
(11,3,1)
(18,15,1)
(10,2,1)
(5,7,1)
(19,18,1)
(22,14,1)
(4,5,1)
(18,3,1)
(29,11,1)
(2,0,1)
(5,3,2)
(4,3,2)
(17,3,2)
(10,2,2)
(7,10,2)
(6,4,2)
(15,3,2)
(4,5,2)
(7,3,2)
(10,3,2)
(22,14,2)
(0,3,2)
(15,5,2)
(5,7,2)
(1,3,2)
(29,3,2)
(14,4,2)
(2,3,2)
(26,3,2)
(11,3,2)
(22,4,2)
(7,24,2)
-----------------------------------
(0,wchar_t)
(1,data)
(2,sizeof(wchar_t)
(3,STATIC_CONST_TRUE)
(4,data == NULL)
(5,data = (wchar_t *)
(6,1)
(7,(wchar_t *)
(8,)
(9,data)
(10,calloc(100, sizeof(wchar_t)
(11,data)
(12,if (data == NULL)
(13,data = NULL)
(14,-1)
(15,printWLine(data)
(16,data)
(17,NULL)
(18,STATIC_CONST_TRUE)
(19,RET)
(20,if(STATIC_CONST_TRUE)
(21, sizeof(wchar_t)
(22,exit(-1)
(23,)
(24,wchar_t *)
(25,if(STATIC_CONST_TRUE)
(26,data)
(27,NULL)
(28,)
(29,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
