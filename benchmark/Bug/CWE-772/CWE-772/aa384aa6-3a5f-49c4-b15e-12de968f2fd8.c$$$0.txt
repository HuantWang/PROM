-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_09_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,56,57,58,62,65,66,69,71
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_09_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_09_bad()
CWE401_Memory_Leak__int_calloc_09_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(27,8,0)
(14,2,0)
(8,2,0)
(20,25,0)
(11,2,0)
(21,9,0)
(22,35,0)
(17,3,0)
(34,22,0)
(23,14,0)
(30,31,0)
(2,8,0)
(10,21,0)
(9,21,0)
(22,29,0)
(7,26,0)
(2,15,0)
(32,29,0)
(5,3,0)
(29,15,0)
(18,15,0)
(22,2,0)
(35,22,0)
(31,30,0)
(33,3,0)
(6,26,0)
(35,15,0)
(8,27,0)
(30,8,0)
(0,31,0)
(24,22,0)
(28,14,0)
(4,30,0)
(9,16,0)
(25,2,0)
(14,29,0)
(12,25,0)
(8,30,0)
(26,3,0)
(36,13,1)
(20,12,1)
(32,14,1)
(10,25,1)
(31,0,1)
(19,36,1)
(8,27,1)
(28,9,1)
(25,2,1)
(22,34,1)
(6,7,1)
(25,20,1)
(29,32,1)
(34,24,1)
(12,2,1)
(13,26,1)
(11,13,1)
(2,8,1)
(23,28,1)
(22,29,1)
(22,2,1)
(8,30,1)
(14,23,1)
(4,11,1)
(36,35,1)
(28,25,1)
(14,2,1)
(21,10,1)
(26,6,1)
(0,4,1)
(35,22,1)
(30,31,1)
(9,21,1)
(24,29,1)
(8,27,2)
(30,31,2)
(9,21,2)
(2,13,2)
(0,13,2)
(10,25,2)
(14,13,2)
(24,13,2)
(11,13,2)
(12,13,2)
(29,13,2)
(14,2,2)
(35,22,2)
(22,13,2)
(34,13,2)
(35,13,2)
(20,13,2)
(31,13,2)
(2,8,2)
(4,13,2)
(25,2,2)
(8,30,2)
(28,13,2)
(8,13,2)
(25,13,2)
(23,13,2)
(9,25,2)
(22,29,2)
(32,13,2)
(21,25,2)
(30,13,2)
(22,2,2)
-----------------------------------
(0,int)
(1, sizeof(int)
(2,data = (int *)
(3,)
(4,100)
(5,if(GLOBAL_CONST_TRUE)
(6,NULL)
(7,data)
(8,(int *)
(9,exit(-1)
(10,1)
(11,data)
(12,data)
(13,GLOBAL_CONST_TRUE)
(14,data[0])
(15,)
(16,)
(17,data)
(18,if (data == NULL)
(19,RET)
(20,NULL)
(21,-1)
(22,data[0])
(23,0)
(24,data)
(25,data == NULL)
(26,data = NULL)
(27,int *)
(28,data)
(29,data[0] = 5)
(30,calloc(100, sizeof(int)
(31,sizeof(int)
(32,5)
(33,if(GLOBAL_CONST_TRUE)
(34,0)
(35,printIntLine(data[0])
(36,GLOBAL_CONST_TRUE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
