-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_07_bad()
{
    char * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_07_bad(){    char * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_07_bad()
CWE401_Memory_Leak__char_malloc_07_bad
{    char * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(28,29,0)
(4,29,0)
(21,1,0)
(25,27,0)
(11,16,0)
(17,5,0)
(18,26,0)
(3,31,0)
(9,35,0)
(22,31,0)
(12,22,0)
(34,2,0)
(35,19,0)
(24,2,0)
(3,22,0)
(13,22,0)
(10,33,0)
(19,13,0)
(0,31,0)
(30,33,0)
(36,27,0)
(5,35,0)
(20,13,0)
(23,8,0)
(23,16,0)
(22,13,0)
(33,31,0)
(7,26,0)
(33,22,0)
(13,20,0)
(35,5,0)
(19,35,0)
(14,29,0)
(27,22,0)
(15,3,0)
(13,19,0)
(6,1,0)
(1,29,0)
(16,23,0)
(10,30,1)
(12,2,1)
(26,7,1)
(33,10,1)
(36,22,1)
(25,36,1)
(18,2,1)
(30,23,1)
(9,12,1)
(33,22,1)
(22,13,1)
(15,33,1)
(18,3,1)
(23,16,1)
(11,27,1)
(19,35,1)
(32,26,1)
(16,11,1)
(34,1,1)
(27,25,1)
(35,5,1)
(24,34,1)
(3,22,1)
(2,24,1)
(5,17,1)
(6,21,1)
(1,6,1)
(30,27,1)
(13,19,1)
(27,22,1)
(17,9,1)
(7,18,1)
(3,15,1)
(13,20,1)
(13,20,2)
(11,27,2)
(3,22,2)
(30,2,2)
(25,2,2)
(12,2,2)
(10,2,2)
(23,16,2)
(19,2,2)
(16,27,2)
(19,35,2)
(5,2,2)
(35,2,2)
(35,5,2)
(33,22,2)
(3,2,2)
(22,13,2)
(13,2,2)
(15,2,2)
(9,2,2)
(23,27,2)
(33,2,2)
(13,19,2)
(17,2,2)
(36,2,2)
(22,2,2)
(27,22,2)
(27,2,2)
-----------------------------------
(0,if (data == NULL)
(1,data = NULL)
(2,staticFive==5)
(3,printLine(data)
(4,if(staticFive==5)
(5,sizeof(char)
(6,NULL)
(7,5)
(8,)
(9,100)
(10,"A String")
(11,1)
(12,data)
(13,(char *)
(14,data)
(15,data)
(16,-1)
(17,char)
(18,staticFive)
(19,malloc(100*sizeof(char)
(20,char *)
(21,data)
(22,data = (char *)
(23,exit(-1)
(24,5)
(25,NULL)
(26,staticFive==5)
(27,data == NULL)
(28,if(staticFive==5)
(29,)
(30,data)
(31,)
(32,RET)
(33,strcpy(data, "A String")
(34,staticFive)
(35,100*sizeof(char)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
