-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_13_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,88,89,91
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_13_bad(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_13_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_13_bad
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(48,9,0)
(1,49,0)
(1,20,0)
(45,13,0)
(3,36,0)
(47,7,0)
(24,38,0)
(21,45,0)
(30,11,0)
(49,1,0)
(4,27,0)
(45,21,0)
(7,44,0)
(50,29,0)
(48,35,0)
(23,18,0)
(16,27,0)
(12,35,0)
(39,38,0)
(26,14,0)
(19,45,0)
(36,35,0)
(11,38,0)
(0,6,0)
(9,48,0)
(40,32,0)
(35,37,0)
(42,14,0)
(32,40,0)
(28,48,0)
(32,6,0)
(8,12,0)
(44,6,0)
(34,38,0)
(7,36,0)
(14,40,0)
(25,49,0)
(22,37,0)
(10,36,0)
(33,35,0)
(40,14,0)
(13,45,0)
(36,7,0)
(9,18,0)
(18,6,0)
(31,9,0)
(35,6,0)
(37,21,0)
(46,13,0)
(2,12,0)
(37,35,0)
(43,44,0)
(37,22,0)
(15,11,0)
(14,35,0)
(5,29,0)
(21,37,0)
(17,48,0)
(9,48,1)
(50,27,1)
(50,32,1)
(12,8,1)
(11,30,1)
(45,13,1)
(42,44,1)
(31,48,1)
(12,35,1)
(35,37,1)
(23,9,1)
(26,42,1)
(9,31,1)
(17,28,1)
(4,11,1)
(1,49,1)
(14,35,1)
(41,29,1)
(18,23,1)
(19,33,1)
(7,36,1)
(44,43,1)
(16,4,1)
(25,12,1)
(28,1,1)
(14,26,1)
(36,35,1)
(8,2,1)
(43,7,1)
(49,25,1)
(30,15,1)
(5,50,1)
(29,5,1)
(13,46,1)
(32,40,1)
(7,47,1)
(46,19,1)
(33,27,1)
(37,22,1)
(40,14,1)
(28,12,1)
(48,17,1)
(3,18,1)
(37,21,1)
(2,35,1)
(48,35,1)
(21,45,1)
(27,16,1)
(10,3,1)
(47,36,1)
(36,10,1)
(19,27,2)
(45,13,2)
(46,27,2)
(9,48,2)
(26,27,2)
(42,27,2)
(14,35,2)
(37,22,2)
(14,27,2)
(33,27,2)
(40,27,2)
(1,49,2)
(28,27,2)
(48,35,2)
(36,35,2)
(45,27,2)
(12,35,2)
(7,36,2)
(35,27,2)
(13,27,2)
(37,21,2)
(23,27,2)
(43,27,2)
(17,27,2)
(31,27,2)
(10,27,2)
(37,27,2)
(12,27,2)
(35,37,2)
(44,27,2)
(48,27,2)
(1,12,2)
(2,27,2)
(3,27,2)
(40,14,2)
(18,27,2)
(21,45,2)
(25,12,2)
(32,27,2)
(49,12,2)
(32,40,2)
(47,27,2)
(36,27,2)
(8,27,2)
(7,27,2)
(21,27,2)
(9,27,2)
-----------------------------------
(0,if (data == NULL)
(1,exit(-1)
(2,data)
(3,data)
(4,GLOBAL_CONST_FIVE)
(5,5)
(6,)
(7,data[0].intTwo)
(8,NULL)
(9,data[0].intOne)
(10,0)
(11,data = NULL)
(12,data == NULL)
(13,sizeof(twoIntsStruct)
(14,data[0])
(15,data)
(16,5)
(17,0)
(18,data[0].intOne = 0)
(19,100)
(20,)
(21,malloc(100*sizeof(twoIntsStruct)
(22,twoIntsStruct *)
(23,0)
(24,if(GLOBAL_CONST_FIVE==5)
(25,1)
(26,0)
(27,GLOBAL_CONST_FIVE==5)
(28,data)
(29,GLOBAL_CONST_FIVE==5)
(30,NULL)
(31,intOne)
(32,printStructLine(&data[0])
(33,data)
(34,data)
(35,data = (twoIntsStruct *)
(36,data[0])
(37,(twoIntsStruct *)
(38,)
(39,if(GLOBAL_CONST_FIVE==5)
(40,&data[0])
(41,RET)
(42,data)
(43,0)
(44,data[0].intTwo = 0)
(45,100*sizeof(twoIntsStruct)
(46,twoIntsStruct)
(47,intTwo)
(48,data[0])
(49,-1)
(50,GLOBAL_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
