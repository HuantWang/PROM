-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_10_bad()
{
    int * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,56,57,58,62,65,66,69,71
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_10_bad(){    int * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_10_bad()
CWE401_Memory_Leak__int_calloc_10_bad
{    int * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(30,14,0)
(7,30,0)
(30,29,0)
(19,7,0)
(5,1,0)
(22,30,0)
(3,26,0)
(29,33,0)
(29,26,0)
(20,30,0)
(13,16,0)
(15,17,0)
(9,4,0)
(24,21,0)
(29,30,0)
(34,27,0)
(11,20,0)
(17,26,0)
(2,21,0)
(33,29,0)
(6,14,0)
(9,16,0)
(20,18,0)
(26,17,0)
(18,14,0)
(26,29,0)
(12,14,0)
(25,27,0)
(1,30,0)
(35,20,0)
(7,18,0)
(27,21,0)
(32,18,0)
(28,1,0)
(36,21,0)
(6,7,0)
(7,6,0)
(10,7,0)
(16,9,0)
(8,23,1)
(15,3,1)
(11,35,1)
(26,17,1)
(35,9,1)
(7,10,1)
(28,30,1)
(7,30,1)
(16,13,1)
(31,27,1)
(35,1,1)
(17,15,1)
(13,1,1)
(23,6,1)
(25,34,1)
(10,19,1)
(29,33,1)
(7,18,1)
(22,31,1)
(19,18,1)
(1,30,1)
(30,29,1)
(9,16,1)
(18,32,1)
(6,7,1)
(3,22,1)
(29,26,1)
(20,11,1)
(23,31,1)
(20,30,1)
(1,5,1)
(27,25,1)
(32,20,1)
(5,28,1)
(9,16,2)
(16,1,2)
(29,26,2)
(1,30,2)
(20,31,2)
(29,33,2)
(3,31,2)
(1,31,2)
(13,1,2)
(30,31,2)
(28,31,2)
(17,31,2)
(11,31,2)
(7,31,2)
(22,31,2)
(15,31,2)
(6,7,2)
(19,31,2)
(5,31,2)
(6,31,2)
(18,31,2)
(9,1,2)
(7,18,2)
(26,31,2)
(35,31,2)
(20,30,2)
(10,31,2)
(7,30,2)
(29,31,2)
(26,17,2)
(30,29,2)
(32,31,2)
-----------------------------------
(0, sizeof(int)
(1,data == NULL)
(2,data)
(3,100)
(4,)
(5,NULL)
(6,printIntLine(data[0])
(7,data[0])
(8,RET)
(9,exit(-1)
(10,0)
(11,0)
(12,if (data == NULL)
(13,1)
(14,)
(15,int)
(16,-1)
(17,sizeof(int)
(18,data[0] = 5)
(19,data)
(20,data[0])
(21,)
(22,data)
(23,globalTrue)
(24,if(globalTrue)
(25,NULL)
(26,calloc(100, sizeof(int)
(27,data = NULL)
(28,data)
(29,(int *)
(30,data = (int *)
(31,globalTrue)
(32,5)
(33,int *)
(34,data)
(35,data)
(36,if(globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
