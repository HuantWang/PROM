-----label-----
1
-----code-----
static int64_t * badSource(int64_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int64_t *)malloc(100*sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
63,64
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,28,32,33,37,39,44,46,51,52,53,57,60,61,64
-----computeFrom-----
15,16
15,17
27,28
27,29
35,36
35,37
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t * badSource(int64_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
static int64_t
int64_t
* badSource(int64_t * data)
*
badSource
int64_t * data
int64_t
int64_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(4,22,0)
(14,8,0)
(22,19,0)
(15,16,0)
(22,1,0)
(19,23,0)
(2,24,0)
(2,23,0)
(0,20,0)
(25,19,0)
(17,9,0)
(22,8,0)
(1,9,0)
(5,6,0)
(26,23,0)
(15,6,0)
(7,12,0)
(12,8,0)
(10,14,0)
(23,2,0)
(11,24,0)
(19,9,0)
(12,19,0)
(12,9,0)
(13,9,0)
(14,19,0)
(3,22,0)
(24,20,0)
(23,26,0)
(21,12,0)
(1,22,0)
(18,14,0)
(23,19,0)
(19,8,0)
(24,2,0)
(6,15,0)
(20,24,0)
(11,25,1)
(22,19,1)
(19,23,1)
(4,3,1)
(18,10,1)
(5,14,1)
(12,8,1)
(12,7,1)
(12,19,1)
(22,4,1)
(10,19,1)
(7,1,1)
(22,8,1)
(14,19,1)
(14,8,1)
(17,14,1)
(23,26,1)
(17,15,1)
(20,0,1)
(3,17,1)
(24,20,1)
(19,8,1)
(6,5,1)
(2,24,1)
(21,12,1)
(1,22,1)
(15,6,1)
(23,2,1)
(14,18,1)
(0,11,1)
(15,6,2)
(14,8,2)
(12,8,2)
(14,19,2)
(2,24,2)
(23,2,2)
(12,19,2)
(5,14,2)
(23,26,2)
(21,12,2)
(19,23,2)
(15,14,2)
(19,8,2)
(24,20,2)
(1,22,2)
(22,8,2)
(6,14,2)
(22,19,2)
-----------------------------------
(0,int64_t)
(1,printLongLongLine(data[0])
(2,malloc(100*sizeof(int64_t)
(3,data)
(4,0)
(5,1)
(6,-1)
(7,data)
(8,int64_t * data)
(9,)
(10,data)
(11,100)
(12,return data;)
(13,if (data == NULL)
(14,data == NULL)
(15,exit(-1)
(16,)
(17,L)
(18,NULL)
(19,data = (int64_t *)
(20,sizeof(int64_t)
(21,RET)
(22,data[0])
(23,(int64_t *)
(24,100*sizeof(int64_t)
(25,data)
(26,int64_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
