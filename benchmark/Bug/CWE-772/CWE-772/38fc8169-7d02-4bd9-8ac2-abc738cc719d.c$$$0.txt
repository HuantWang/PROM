-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_10_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,87,89
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_10_bad(){    twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_10_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_10_bad
{    twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,31,0)
(21,27,0)
(42,47,0)
(28,21,0)
(34,7,0)
(35,18,0)
(2,31,0)
(22,10,0)
(40,15,0)
(10,22,0)
(19,24,0)
(41,2,0)
(26,37,0)
(45,41,0)
(15,31,0)
(30,15,0)
(10,20,0)
(3,34,0)
(38,37,0)
(32,28,0)
(18,35,0)
(21,28,0)
(11,24,0)
(35,14,0)
(44,31,0)
(25,2,0)
(16,28,0)
(44,20,0)
(37,31,0)
(7,34,0)
(4,47,0)
(6,14,0)
(37,18,0)
(1,21,0)
(5,14,0)
(46,47,0)
(13,20,0)
(31,14,0)
(28,31,0)
(36,44,0)
(20,10,0)
(20,24,0)
(20,44,0)
(0,2,0)
(41,6,0)
(2,41,0)
(7,29,0)
(31,44,0)
(44,36,0)
(8,27,0)
(9,6,0)
(24,47,0)
(18,37,0)
(12,10,0)
(27,14,0)
(33,22,0)
(21,1,1)
(0,27,1)
(41,45,1)
(25,0,1)
(2,25,1)
(43,35,1)
(45,2,1)
(35,18,1)
(22,33,1)
(16,15,1)
(43,23,1)
(13,17,1)
(38,6,1)
(16,7,1)
(31,44,1)
(27,8,1)
(32,16,1)
(28,31,1)
(30,31,1)
(9,41,1)
(3,15,1)
(10,22,1)
(44,36,1)
(6,9,1)
(8,21,1)
(37,31,1)
(15,31,1)
(33,12,1)
(40,30,1)
(41,2,1)
(44,20,1)
(12,13,1)
(20,10,1)
(24,19,1)
(39,43,1)
(21,28,1)
(26,38,1)
(37,26,1)
(7,34,1)
(20,24,1)
(2,31,1)
(19,11,1)
(23,24,1)
(15,40,1)
(18,37,1)
(17,23,1)
(34,3,1)
(28,32,1)
(1,28,1)
(37,23,2)
(12,23,2)
(15,31,2)
(7,34,2)
(38,23,2)
(13,23,2)
(1,23,2)
(17,23,2)
(41,23,2)
(21,28,2)
(34,15,2)
(31,23,2)
(3,15,2)
(44,36,2)
(21,23,2)
(22,23,2)
(0,23,2)
(8,23,2)
(25,23,2)
(7,15,2)
(10,22,2)
(2,23,2)
(20,24,2)
(41,2,2)
(37,31,2)
(27,23,2)
(35,23,2)
(45,23,2)
(9,23,2)
(33,23,2)
(35,18,2)
(15,23,2)
(16,23,2)
(10,23,2)
(20,23,2)
(20,10,2)
(28,31,2)
(26,23,2)
(44,23,2)
(44,20,2)
(28,23,2)
(31,44,2)
(30,23,2)
(40,23,2)
(32,23,2)
(18,37,2)
(6,23,2)
(18,23,2)
(2,31,2)
-----------------------------------
(0,data)
(1,intOne)
(2,data[0])
(3,1)
(4,if(globalTrue)
(5,if (data == NULL)
(6,data[0].intTwo = 0)
(7,exit(-1)
(8,0)
(9,0)
(10,100*sizeof(twoIntsStruct)
(11,data)
(12,100)
(13,data)
(14,)
(15,data == NULL)
(16,data)
(17,data)
(18,&data[0])
(19,NULL)
(20,realloc(data, 100*sizeof(twoIntsStruct)
(21,data[0].intOne)
(22,sizeof(twoIntsStruct)
(23,globalTrue)
(24,data = NULL)
(25,0)
(26,0)
(27,data[0].intOne = 0)
(28,data[0])
(29,)
(30,data)
(31,data = (twoIntsStruct *)
(32,0)
(33,twoIntsStruct)
(34,-1)
(35,printStructLine(&data[0])
(36,twoIntsStruct *)
(37,data[0])
(38,data)
(39,RET)
(40,NULL)
(41,data[0].intTwo)
(42,data)
(43,globalTrue)
(44,(twoIntsStruct *)
(45,intTwo)
(46,if(globalTrue)
(47,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
