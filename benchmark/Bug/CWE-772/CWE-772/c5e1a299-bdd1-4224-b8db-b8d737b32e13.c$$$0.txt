-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_12_bad()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
71,74
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
82,84
83,84
85,86
85,87
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
94,96
95,96
99,100
100,101
100,102
101,102
103,104
103,105
104,105
107,108
107,109
107,110
108,109
109,110
111,112
113,114
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,75,79,81,84,86,90,91,96,97,98,102,105,106,110,112,117,119
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
73,74
73,75
85,86
85,87
93,94
93,95
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_12_bad(){    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int64_t_calloc_12_bad()
CWE401_Memory_Leak__int64_t_calloc_12_bad
{    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(12,10,0)
(9,48,0)
(23,48,0)
(32,17,0)
(44,10,0)
(10,12,0)
(17,48,0)
(3,23,0)
(10,13,0)
(9,13,0)
(22,16,0)
(15,37,0)
(34,41,0)
(20,13,0)
(5,33,0)
(35,49,0)
(13,15,0)
(16,24,0)
(8,19,0)
(11,23,0)
(48,41,0)
(50,49,0)
(18,7,0)
(9,42,0)
(21,26,0)
(16,22,0)
(37,15,0)
(47,41,0)
(40,18,0)
(30,22,0)
(1,19,0)
(47,23,0)
(4,25,0)
(33,18,0)
(13,25,0)
(46,48,0)
(15,13,0)
(45,41,0)
(15,27,0)
(28,49,0)
(27,15,0)
(18,33,0)
(6,10,0)
(26,49,0)
(19,1,0)
(38,17,0)
(27,1,0)
(43,9,0)
(0,26,0)
(48,33,0)
(23,47,0)
(1,27,0)
(12,25,0)
(36,1,0)
(33,48,0)
(7,18,0)
(33,5,0)
(39,7,0)
(11,3,1)
(0,21,1)
(4,13,1)
(2,47,1)
(40,46,1)
(33,18,1)
(8,36,1)
(15,27,1)
(38,32,1)
(2,12,1)
(27,1,1)
(34,16,1)
(17,38,1)
(44,4,1)
(7,39,1)
(6,44,1)
(13,15,1)
(14,2,1)
(1,19,1)
(9,48,1)
(12,10,1)
(20,31,1)
(9,13,1)
(22,30,1)
(34,17,1)
(43,2,1)
(33,5,1)
(23,48,1)
(10,6,1)
(26,0,1)
(48,33,1)
(17,48,1)
(9,43,1)
(30,17,1)
(10,13,1)
(46,31,1)
(36,20,1)
(15,37,1)
(39,40,1)
(16,22,1)
(23,11,1)
(19,8,1)
(31,26,1)
(47,23,1)
(18,7,1)
(14,9,1)
(32,48,1)
(3,34,1)
(4,31,2)
(20,31,2)
(48,33,2)
(27,1,2)
(15,31,2)
(9,2,2)
(8,31,2)
(12,10,2)
(46,31,2)
(18,7,2)
(13,15,2)
(17,31,2)
(15,37,2)
(36,31,2)
(10,31,2)
(33,18,2)
(15,27,2)
(30,17,2)
(23,48,2)
(39,31,2)
(33,5,2)
(1,31,2)
(10,13,2)
(6,31,2)
(7,31,2)
(19,31,2)
(9,13,2)
(47,23,2)
(1,19,2)
(13,31,2)
(32,31,2)
(18,31,2)
(3,31,2)
(11,31,2)
(16,17,2)
(27,31,2)
(44,31,2)
(16,22,2)
(40,31,2)
(9,48,2)
(12,31,2)
(38,31,2)
(23,31,2)
(22,17,2)
(33,31,2)
(43,2,2)
(17,48,2)
(34,31,2)
(47,31,2)
(48,31,2)
-----------------------------------
(0,NULL)
(1,100*sizeof(int64_t)
(2,globalReturnsTrueOrFalse()
(3,data)
(4,L)
(5,int64_t *)
(6,0)
(7,sizeof(int64_t)
(8,int64_t)
(9,free(data)
(10,data[0])
(11,0)
(12,printLongLongLine(data[0])
(13,data = (int64_t *)
(14,RET)
(15,(int64_t *)
(16,exit(-1)
(17,data == NULL)
(18,calloc(100, sizeof(int64_t)
(19,sizeof(int64_t)
(20,data)
(21,data)
(22,-1)
(23,data[0])
(24,)
(25,)
(26,data = NULL)
(27,ALLOCA(100*sizeof(int64_t)
(28,data)
(29, sizeof(int64_t)
(30,1)
(31,globalReturnsTrueOrFalse()
(32,data)
(33,(int64_t *)
(34,L)
(35,if(globalReturnsTrueOrFalse()
(36,100)
(37,int64_t *)
(38,NULL)
(39,int64_t)
(40,100)
(41,)
(42,)
(43,data)
(44,data)
(45,if (data == NULL)
(46,data)
(47,printLongLongLine(data[0])
(48,data = (int64_t *)
(49,)
(50,if(globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
