-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
98,99
100,101
102,103
102,104
103,104
104,105
104,106
106,107
106,108
106,109
109,110
110,111
111,112
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,85,87,88,92,94,99,101,105,107,108,112,113
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_32_bad()
CWE401_Memory_Leak__wchar_t_malloc_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(13,27,0)
(28,11,0)
(49,1,0)
(3,6,0)
(26,32,0)
(30,40,0)
(31,34,0)
(6,3,0)
(50,40,0)
(45,42,0)
(12,1,0)
(7,1,0)
(26,24,0)
(35,34,0)
(47,26,0)
(14,36,0)
(14,19,0)
(15,1,0)
(20,24,0)
(21,49,0)
(25,3,0)
(29,1,0)
(16,36,0)
(23,24,0)
(3,25,0)
(32,24,0)
(31,40,0)
(42,2,0)
(44,42,0)
(2,1,0)
(25,11,0)
(27,24,0)
(40,50,0)
(42,44,0)
(13,40,0)
(24,1,0)
(18,27,0)
(38,12,0)
(8,3,0)
(36,14,0)
(43,49,0)
(9,13,0)
(10,48,0)
(11,25,0)
(48,32,0)
(12,38,0)
(34,31,0)
(40,1,0)
(17,2,0)
(4,44,0)
(44,12,0)
(27,32,0)
(22,12,0)
(34,24,0)
(33,50,0)
(5,6,0)
(32,11,0)
(11,28,0)
(46,32,0)
(41,48,0)
(11,32,0)
(39,38,0)
(0,31,0)
(35,49,1)
(10,32,1)
(45,27,1)
(49,43,1)
(21,12,1)
(26,32,1)
(11,28,1)
(47,48,1)
(11,25,1)
(27,32,1)
(12,38,1)
(44,12,1)
(22,40,1)
(43,21,1)
(42,44,1)
(14,36,1)
(27,18,1)
(46,34,1)
(8,46,1)
(32,11,1)
(40,50,1)
(26,47,1)
(31,40,1)
(18,13,1)
(13,9,1)
(39,22,1)
(5,8,1)
(50,33,1)
(31,0,1)
(3,6,1)
(47,14,1)
(9,26,1)
(41,10,1)
(13,40,1)
(4,45,1)
(34,31,1)
(33,30,1)
(6,5,1)
(48,32,1)
(16,48,1)
(44,4,1)
(38,39,1)
(0,35,1)
(37,42,1)
(48,41,1)
(25,3,1)
(36,16,1)
(31,40,2)
(32,11,2)
(34,31,2)
(14,48,2)
(25,3,2)
(16,48,2)
(40,50,2)
(12,38,2)
(13,40,2)
(27,32,2)
(11,25,2)
(48,32,2)
(14,36,2)
(26,32,2)
(3,6,2)
(36,48,2)
(44,12,2)
(11,28,2)
(42,44,2)
-----------------------------------
(0,dataPtr1)
(1,)
(2,)
(3,100*sizeof(wchar_t)
(4,dataPtr2)
(5,wchar_t)
(6,sizeof(wchar_t)
(7,dataPtr1)
(8,100)
(9,dataPtr1)
(10,data)
(11,(wchar_t *)
(12,* *dataPtr2 = &data)
(13,*dataPtr1)
(14,exit(-1)
(15,dataPtr2)
(16,1)
(17,data)
(18,data)
(19,)
(20,data)
(21,data)
(22,dataPtr2)
(23,if (data == NULL)
(24,)
(25,malloc(100*sizeof(wchar_t)
(26,printWLine(data)
(27,*dataPtr1 = data)
(28,wchar_t *)
(29,data)
(30,dataPtr1)
(31,*dataPtr1)
(32,data = (wchar_t *)
(33,data)
(34,* data = *dataPtr1)
(35,data)
(36,-1)
(37,RET)
(38,&data)
(39,data)
(40,* *dataPtr1 = &data)
(41,NULL)
(42,* data = *dataPtr2)
(43,NULL)
(44,*dataPtr2)
(45,data)
(46,data)
(47,data)
(48,data == NULL)
(49,data = NULL)
(50,&data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
