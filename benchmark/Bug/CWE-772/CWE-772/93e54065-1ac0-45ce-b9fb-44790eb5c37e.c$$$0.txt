-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_02_bad()
{
    if(1)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
45,48
46,47
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
66,69
67,68
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
84,87
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,50,54,56,60,63,65,68,70,73,76,77,81,83,88,90,91,95,97,101,103
-----computeFrom-----
25,26
25,27
32,33
32,34
58,59
58,60
71,72
71,73
79,80
79,81
-----guardedBy-----
81,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_02_bad(){    if(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_02_bad()
CWE401_Memory_Leak__malloc_realloc_char_02_bad
{    if(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
1
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(49,32,0)
(1,41,0)
(12,32,0)
(44,0,0)
(34,20,0)
(50,8,0)
(19,26,0)
(28,2,0)
(6,29,0)
(17,44,0)
(31,25,0)
(2,21,0)
(43,26,0)
(47,21,0)
(22,8,0)
(16,25,0)
(20,25,0)
(28,29,0)
(38,42,0)
(44,21,0)
(10,6,0)
(26,43,0)
(32,29,0)
(29,25,0)
(41,21,0)
(11,21,0)
(38,43,0)
(26,29,0)
(39,6,0)
(40,41,0)
(47,0,0)
(42,38,0)
(13,2,0)
(26,19,0)
(29,26,0)
(8,50,0)
(27,29,0)
(20,29,0)
(43,38,0)
(24,0,0)
(4,50,0)
(24,21,0)
(9,47,0)
(21,25,0)
(6,25,0)
(3,38,0)
(46,15,0)
(21,2,0)
(25,5,0)
(30,37,0)
(33,42,0)
(2,28,0)
(28,50,0)
(18,44,0)
(23,28,0)
(30,15,0)
(45,24,0)
(7,35,0)
(2,13,0)
(48,25,0)
(15,30,0)
(50,28,0)
(22,4,1)
(41,21,1)
(34,6,1)
(18,17,1)
(46,32,1)
(17,41,1)
(36,41,1)
(24,21,1)
(36,14,1)
(10,32,1)
(11,20,1)
(28,50,1)
(4,23,1)
(6,39,1)
(10,30,1)
(49,29,1)
(3,27,1)
(38,42,1)
(47,21,1)
(39,10,1)
(30,15,1)
(36,47,1)
(8,22,1)
(20,29,1)
(2,28,1)
(44,18,1)
(20,34,1)
(15,46,1)
(2,13,1)
(26,43,1)
(26,19,1)
(32,29,1)
(41,1,1)
(42,33,1)
(40,21,1)
(43,38,1)
(28,29,1)
(47,9,1)
(33,3,1)
(44,21,1)
(23,11,1)
(27,14,1)
(6,29,1)
(1,40,1)
(12,49,1)
(32,12,1)
(21,2,1)
(24,45,1)
(9,24,1)
(50,8,1)
(29,26,1)
(45,44,1)
(2,28,2)
(41,21,2)
(15,32,2)
(30,15,2)
(29,14,2)
(46,32,2)
(47,21,2)
(27,14,2)
(32,14,2)
(26,43,2)
(4,14,2)
(8,14,2)
(21,2,2)
(24,41,2)
(22,14,2)
(41,14,2)
(3,14,2)
(40,14,2)
(50,14,2)
(43,38,2)
(10,14,2)
(6,29,2)
(26,14,2)
(38,42,2)
(28,29,2)
(38,14,2)
(21,14,2)
(9,41,2)
(42,14,2)
(26,19,2)
(47,41,2)
(23,14,2)
(43,14,2)
(44,41,2)
(2,14,2)
(49,14,2)
(28,50,2)
(28,14,2)
(44,21,2)
(30,32,2)
(11,14,2)
(18,41,2)
(20,14,2)
(29,26,2)
(34,14,2)
(45,41,2)
(20,29,2)
(1,14,2)
(6,14,2)
(39,14,2)
(12,14,2)
(2,13,2)
(50,8,2)
(17,41,2)
(24,21,2)
(33,14,2)
(32,29,2)
-----------------------------------
(0,)
(1,NULL)
(2,(char *)
(3,100)
(4,130000)
(5,)
(6,strcpy(data, "A String")
(7,if(1)
(8,sizeof(char)
(9,data)
(10,data)
(11,data)
(12,NULL)
(13,char *)
(14,1)
(15,-1)
(16,if (data != NULL)
(17,data)
(18,"New String")
(19,char *)
(20,printLine(data)
(21,data = (char *)
(22,char)
(23,data)
(24,printLine(data)
(25,)
(26,(char *)
(27,data)
(28,realloc(data, (130000)
(29,* data = (char *)
(30,exit(-1)
(31,data)
(32,data == NULL)
(33,char)
(34,data)
(35,)
(36,RET)
(37,)
(38,100*sizeof(char)
(39,"A String")
(40,data)
(41,data != NULL)
(42,sizeof(char)
(43,malloc(100*sizeof(char)
(44,strcpy(data, "New String")
(45,data)
(46,1)
(47,free(data)
(48,if (data == NULL)
(49,data)
(50,(130000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
