-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
69,70
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,57,59,60,64,66,68,70
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_02_bad(){    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_02_bad()
CWE401_Memory_Leak__char_realloc_02_bad
{    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,17,0)
(10,11,0)
(20,3,0)
(14,19,0)
(21,17,0)
(11,10,0)
(15,9,0)
(22,1,0)
(14,31,0)
(33,14,0)
(9,31,0)
(23,17,0)
(25,23,0)
(5,24,0)
(23,19,0)
(17,24,0)
(17,23,0)
(8,10,0)
(29,1,0)
(11,16,0)
(33,31,0)
(13,3,0)
(30,2,0)
(2,1,0)
(19,14,0)
(0,2,0)
(26,33,0)
(23,2,0)
(19,23,0)
(19,7,0)
(12,1,0)
(28,31,0)
(32,14,0)
(7,19,0)
(3,14,0)
(9,14,0)
(6,9,0)
(13,20,1)
(15,3,1)
(21,25,1)
(25,32,1)
(9,6,1)
(9,14,1)
(18,27,1)
(32,27,1)
(33,14,1)
(19,23,1)
(10,8,1)
(3,14,1)
(17,24,1)
(20,14,1)
(33,26,1)
(24,5,1)
(27,2,1)
(8,3,1)
(6,15,1)
(15,11,1)
(23,17,1)
(11,10,1)
(2,0,1)
(19,7,1)
(18,33,1)
(5,21,1)
(23,2,1)
(14,19,1)
(3,13,1)
(0,30,1)
(4,18,1)
(26,9,1)
(32,27,2)
(11,10,2)
(13,27,2)
(26,27,2)
(5,27,2)
(9,27,2)
(17,27,2)
(10,3,2)
(23,17,2)
(20,27,2)
(14,27,2)
(19,7,2)
(21,27,2)
(3,27,2)
(33,27,2)
(3,14,2)
(6,27,2)
(11,3,2)
(24,27,2)
(17,24,2)
(8,3,2)
(19,23,2)
(25,27,2)
(9,14,2)
(23,2,2)
(19,27,2)
(14,19,2)
(23,27,2)
(33,14,2)
(15,27,2)
-----------------------------------
(0,NULL)
(1,)
(2,data = NULL)
(3,data == NULL)
(4,RET)
(5,char)
(6,"A String")
(7,char *)
(8,1)
(9,strcpy(data, "A String")
(10,-1)
(11,exit(-1)
(12,if(1)
(13,NULL)
(14,data = (char *)
(15,data)
(16,)
(17,100*sizeof(char)
(18,1)
(19,(char *)
(20,data)
(21,100)
(22,if(1)
(23,realloc(data, 100*sizeof(char)
(24,sizeof(char)
(25,data)
(26,data)
(27,1)
(28,if (data == NULL)
(29,data)
(30,data)
(31,)
(32,data)
(33,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
