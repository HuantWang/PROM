-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_44_bad()
{
    int * data;
    /* define a function pointer */
    void (*funcPtr) (int *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,49,50,54,56,61,63,68,69,70,74,77,78,82,84
-----computeFrom-----
28,29
28,30
34,35
34,36
45,46
45,47
52,53
52,54
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_44_bad(){    int * data;    /* define a function pointer */    void (*funcPtr) (int *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__int_malloc_44_bad()
CWE401_Memory_Leak__int_malloc_44_bad
{    int * data;    /* define a function pointer */    void (*funcPtr) (int *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* use the function pointer */    funcPtr(data);}
int * data;
int * data;
int
* data
*
data
void (*funcPtr) (int *) = badSink;
void (*funcPtr) (int *) = badSink;
void
(*funcPtr) (int *) = badSink
*funcPtr
*
funcPtr
int *
int
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(24,21,0)
(35,27,0)
(10,7,0)
(7,19,0)
(13,21,0)
(24,9,0)
(25,14,0)
(0,18,0)
(32,14,0)
(27,14,0)
(11,8,0)
(30,21,0)
(3,14,0)
(13,19,0)
(18,17,0)
(2,14,0)
(4,25,0)
(24,11,0)
(11,24,0)
(23,21,0)
(6,0,0)
(37,14,0)
(37,7,0)
(3,21,0)
(9,24,0)
(21,24,0)
(12,13,0)
(19,14,0)
(31,3,0)
(28,19,0)
(1,25,0)
(34,30,0)
(22,36,0)
(18,0,0)
(36,8,0)
(7,21,0)
(8,36,0)
(8,11,0)
(20,27,0)
(29,13,0)
(26,7,0)
(7,37,0)
(21,14,0)
(33,14,0)
(5,30,0)
(15,8,0)
(21,24,1)
(24,9,1)
(26,10,1)
(34,21,1)
(30,21,1)
(0,6,1)
(29,30,1)
(37,7,1)
(11,8,1)
(7,21,1)
(13,21,1)
(31,37,1)
(19,28,1)
(12,29,1)
(28,13,1)
(16,3,1)
(1,4,1)
(24,11,1)
(15,23,1)
(5,34,1)
(27,20,1)
(6,30,1)
(30,5,1)
(20,35,1)
(23,25,1)
(13,12,1)
(3,21,1)
(18,0,1)
(7,19,1)
(4,27,1)
(25,1,1)
(3,31,1)
(22,15,1)
(10,19,1)
(7,26,1)
(8,36,1)
(29,18,1)
(36,22,1)
(8,36,2)
(13,21,2)
(11,8,2)
(6,30,2)
(18,30,2)
(18,0,2)
(0,30,2)
(37,7,2)
(30,21,2)
(7,21,2)
(24,9,2)
(7,19,2)
(21,24,2)
(3,21,2)
(24,11,2)
-----------------------------------
(0,-1)
(1,NULL)
(2,data)
(3,funcPtr(data)
(4,data)
(5,NULL)
(6,1)
(7,data[0])
(8,100*sizeof(int)
(9,int *)
(10,data)
(11,malloc(100*sizeof(int)
(12,0)
(13,data[0])
(14,)
(15,100)
(16,RET)
(17,)
(18,exit(-1)
(19,data[0] = 5)
(20,badSink)
(21,data = (int *)
(22,int)
(23,data)
(24,(int *)
(25,data = NULL)
(26,0)
(27,(*funcPtr)
(28,5)
(29,data)
(30,data == NULL)
(31,data)
(32,if (data == NULL)
(33,funcPtr)
(34,data)
(35,funcPtr)
(36,sizeof(int)
(37,printIntLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
