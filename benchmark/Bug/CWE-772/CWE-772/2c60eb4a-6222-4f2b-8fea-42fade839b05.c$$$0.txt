-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
98,99
100,101
102,103
102,104
103,104
104,105
104,106
106,107
106,108
106,109
109,110
110,111
111,112
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,85,87,88,92,94,99,101,105,107,108,112,113
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_32_bad()
CWE401_Memory_Leak__char_malloc_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(18,3,0)
(5,40,0)
(34,15,0)
(37,10,0)
(27,8,0)
(19,12,0)
(13,2,0)
(15,34,0)
(11,37,0)
(21,34,0)
(15,37,0)
(44,52,0)
(31,15,0)
(38,52,0)
(2,40,0)
(23,10,0)
(24,3,0)
(20,2,0)
(40,2,0)
(1,26,0)
(30,44,0)
(8,52,0)
(50,51,0)
(4,44,0)
(45,37,0)
(26,44,0)
(6,38,0)
(28,5,0)
(43,36,0)
(34,44,0)
(22,52,0)
(40,44,0)
(49,7,0)
(51,13,0)
(5,44,0)
(12,44,0)
(13,51,0)
(3,18,0)
(9,52,0)
(3,8,0)
(16,18,0)
(36,8,0)
(25,52,0)
(46,52,0)
(41,12,0)
(0,38,0)
(2,20,0)
(26,40,0)
(35,25,0)
(14,33,0)
(8,36,0)
(39,40,0)
(51,50,0)
(53,50,0)
(29,7,0)
(12,40,0)
(48,51,0)
(10,37,0)
(2,13,0)
(18,25,0)
(45,26,0)
(42,45,0)
(14,47,0)
(7,40,0)
(37,52,0)
(17,33,0)
(33,14,0)
(6,0,1)
(26,1,1)
(36,43,1)
(15,31,1)
(12,40,1)
(14,33,1)
(53,48,1)
(13,51,1)
(40,2,1)
(12,19,1)
(17,7,1)
(7,49,1)
(3,24,1)
(5,40,1)
(29,40,1)
(39,34,1)
(27,37,1)
(2,13,1)
(7,40,1)
(26,40,1)
(38,6,1)
(18,3,1)
(21,38,1)
(33,17,1)
(34,15,1)
(49,29,1)
(48,39,1)
(24,16,1)
(42,5,1)
(41,7,1)
(23,11,1)
(19,41,1)
(50,53,1)
(5,28,1)
(8,36,1)
(45,42,1)
(45,37,1)
(16,26,1)
(41,14,1)
(15,37,1)
(0,8,1)
(3,8,1)
(31,21,1)
(2,20,1)
(43,27,1)
(10,23,1)
(37,10,1)
(51,50,1)
(1,45,1)
(28,12,1)
(32,18,1)
(13,51,2)
(34,15,2)
(7,40,2)
(8,36,2)
(26,40,2)
(2,20,2)
(2,13,2)
(51,50,2)
(45,37,2)
(14,7,2)
(33,7,2)
(18,3,2)
(37,10,2)
(17,7,2)
(14,33,2)
(40,2,2)
(15,37,2)
(12,40,2)
(3,8,2)
(5,40,2)
-----------------------------------
(0,data)
(1,data)
(2,(char *)
(3,*dataPtr2)
(4,data)
(5,printLine(data)
(6,NULL)
(7,data == NULL)
(8,* *dataPtr2 = &data)
(9,dataPtr1)
(10,&data)
(11,dataPtr1)
(12,strcpy(data, "A String")
(13,malloc(100*sizeof(char)
(14,exit(-1)
(15,*dataPtr1)
(16,data)
(17,1)
(18,* data = *dataPtr2)
(19,"A String")
(20,char *)
(21,data)
(22,dataPtr2)
(23,data)
(24,dataPtr2)
(25,)
(26,*dataPtr1 = data)
(27,dataPtr2)
(28,data)
(29,data)
(30,if (data == NULL)
(31,dataPtr1)
(32,RET)
(33,-1)
(34,* data = *dataPtr1)
(35,data)
(36,&data)
(37,* *dataPtr1 = &data)
(38,data = NULL)
(39,data)
(40,data = (char *)
(41,data)
(42,dataPtr1)
(43,data)
(44,)
(45,*dataPtr1)
(46,data)
(47,)
(48,100)
(49,NULL)
(50,sizeof(char)
(51,100*sizeof(char)
(52,)
(53,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
