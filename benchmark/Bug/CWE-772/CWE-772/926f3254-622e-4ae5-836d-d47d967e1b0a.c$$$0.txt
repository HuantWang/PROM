-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_10_bad()
{
    if(globalTrue)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_10_bad(){    if(globalTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_10_bad()
CWE401_Memory_Leak__malloc_realloc_char_10_bad
{    if(globalTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(globalTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
globalTrue
globalTrue
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,46,0)
(7,31,0)
(25,33,0)
(5,19,0)
(49,22,0)
(46,19,0)
(10,23,0)
(27,31,0)
(37,46,0)
(26,46,0)
(23,42,0)
(31,7,0)
(50,5,0)
(41,7,0)
(29,19,0)
(6,14,0)
(46,26,0)
(28,1,0)
(1,11,0)
(1,7,0)
(42,23,0)
(15,19,0)
(22,47,0)
(39,37,0)
(31,35,0)
(42,27,0)
(8,25,0)
(4,19,0)
(24,11,0)
(47,22,0)
(16,24,0)
(34,44,0)
(49,26,0)
(27,42,0)
(19,38,0)
(27,46,0)
(33,25,0)
(43,41,0)
(7,19,0)
(26,49,0)
(21,42,0)
(3,14,0)
(40,27,0)
(35,31,0)
(14,46,0)
(48,24,0)
(18,26,0)
(45,47,0)
(31,27,0)
(14,19,0)
(26,18,0)
(30,11,0)
(33,9,0)
(17,41,0)
(30,7,0)
(22,49,0)
(5,46,0)
(13,22,0)
(20,37,0)
(24,7,0)
(36,30,0)
(12,7,0)
(41,43,1)
(3,37,1)
(48,41,1)
(47,45,1)
(2,32,1)
(28,24,1)
(5,50,1)
(0,32,1)
(37,20,1)
(33,25,1)
(1,7,1)
(8,37,1)
(40,12,1)
(12,5,1)
(14,46,1)
(21,40,1)
(22,47,1)
(23,10,1)
(24,16,1)
(36,1,1)
(17,7,1)
(31,35,1)
(20,39,1)
(27,42,1)
(37,46,1)
(41,7,1)
(42,23,1)
(5,46,1)
(7,31,1)
(24,7,1)
(0,41,1)
(30,7,1)
(3,33,1)
(14,6,1)
(50,14,1)
(39,46,1)
(10,21,1)
(0,30,1)
(13,2,1)
(26,18,1)
(31,27,1)
(27,46,1)
(25,8,1)
(6,3,1)
(45,13,1)
(1,28,1)
(16,48,1)
(46,26,1)
(30,36,1)
(49,22,1)
(26,49,1)
(43,17,1)
(49,22,2)
(23,32,2)
(50,32,2)
(26,18,2)
(46,26,2)
(39,32,2)
(37,46,2)
(27,42,2)
(47,32,2)
(42,23,2)
(14,32,2)
(41,7,2)
(8,37,2)
(22,47,2)
(26,32,2)
(27,46,2)
(49,32,2)
(2,32,2)
(1,41,2)
(30,41,2)
(22,32,2)
(36,41,2)
(31,27,2)
(20,32,2)
(25,37,2)
(13,32,2)
(1,7,2)
(12,32,2)
(27,32,2)
(33,25,2)
(24,7,2)
(24,41,2)
(46,32,2)
(33,37,2)
(21,32,2)
(6,32,2)
(31,32,2)
(28,41,2)
(16,41,2)
(41,32,2)
(26,49,2)
(31,35,2)
(40,32,2)
(42,32,2)
(30,7,2)
(7,32,2)
(48,41,2)
(17,32,2)
(14,46,2)
(45,32,2)
(37,32,2)
(43,32,2)
(7,31,2)
(3,32,2)
(5,32,2)
(5,46,2)
(10,32,2)
-----------------------------------
(0,RET)
(1,printLine(data)
(2,data)
(3,data)
(4,if (data == NULL)
(5,printLine(data)
(6,"A String")
(7,data = (char *)
(8,1)
(9,)
(10,char)
(11,)
(12,data)
(13,100)
(14,strcpy(data, "A String")
(15,data)
(16,"New String")
(17,data)
(18,char *)
(19,)
(20,NULL)
(21,130000)
(22,100*sizeof(char)
(23,sizeof(char)
(24,strcpy(data, "New String")
(25,-1)
(26,(char *)
(27,realloc(data, (130000)
(28,data)
(29,if (data != NULL)
(30,free(data)
(31,(char *)
(32,globalTrue)
(33,exit(-1)
(34,if(globalTrue)
(35,char *)
(36,data)
(37,data == NULL)
(38,)
(39,data)
(40,data)
(41,data != NULL)
(42,(130000)
(43,NULL)
(44,)
(45,char)
(46,* data = (char *)
(47,sizeof(char)
(48,data)
(49,malloc(100*sizeof(char)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
