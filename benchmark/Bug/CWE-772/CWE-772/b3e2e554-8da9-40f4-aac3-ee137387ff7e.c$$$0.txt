-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_12_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
71,74
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
79,80
81,82
81,83
82,83
84,85
84,86
86,87
87,88
87,89
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
105,107
105,108
106,107
107,108
109,110
111,112
112,113
113,114
113,115
114,115
116,117
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,60,61,62,66,69,70,75,78,80,83,85,88,89,94,95,96,100,103,104,108,110,115,117
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
57,58
57,59
73,74
73,75
84,85
84,86
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_12_bad(){    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int_realloc_12_bad()
CWE401_Memory_Leak__int_realloc_12_bad
{    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(36,0,0)
(54,34,0)
(35,6,0)
(24,41,0)
(29,5,0)
(56,54,0)
(54,5,0)
(9,55,0)
(50,48,0)
(21,23,0)
(12,51,0)
(43,53,0)
(55,31,0)
(0,36,0)
(27,57,0)
(23,38,0)
(17,23,0)
(19,56,0)
(32,23,0)
(52,41,0)
(58,35,0)
(12,43,0)
(0,12,0)
(39,53,0)
(20,5,0)
(26,57,0)
(6,51,0)
(25,48,0)
(12,0,0)
(55,6,0)
(45,53,0)
(32,34,0)
(28,51,0)
(11,53,0)
(14,56,0)
(37,6,0)
(24,35,0)
(7,38,0)
(37,47,0)
(51,12,0)
(35,24,0)
(10,31,0)
(8,37,0)
(42,6,0)
(35,31,0)
(57,26,0)
(3,6,0)
(5,29,0)
(5,54,0)
(23,32,0)
(30,54,0)
(29,26,0)
(16,26,0)
(31,41,0)
(56,38,0)
(59,43,0)
(44,35,0)
(15,43,0)
(51,28,0)
(46,12,0)
(25,40,0)
(49,36,0)
(6,41,0)
(5,20,0)
(37,54,0)
(18,42,0)
(38,34,0)
(33,42,0)
(2,55,0)
(23,54,0)
(13,0,0)
(51,6,0)
(26,29,0)
(48,25,0)
(23,38,1)
(37,8,1)
(23,54,1)
(12,43,1)
(44,31,1)
(17,38,1)
(56,54,1)
(14,19,1)
(9,42,1)
(36,49,1)
(57,27,1)
(35,6,1)
(55,2,1)
(10,55,1)
(15,59,1)
(38,7,1)
(19,54,1)
(25,48,1)
(24,35,1)
(54,5,1)
(35,31,1)
(5,29,1)
(2,9,1)
(42,18,1)
(49,13,1)
(55,6,1)
(31,10,1)
(42,6,1)
(23,21,1)
(18,33,1)
(35,58,1)
(16,30,1)
(0,36,1)
(37,6,1)
(8,4,1)
(13,46,1)
(30,1,1)
(5,20,1)
(12,0,1)
(29,26,1)
(3,1,1)
(22,37,1)
(32,23,1)
(50,42,1)
(43,15,1)
(6,51,1)
(48,50,1)
(26,57,1)
(1,43,1)
(51,12,1)
(58,44,1)
(37,54,1)
(22,4,1)
(33,6,1)
(7,56,1)
(46,3,1)
(9,25,1)
(21,17,1)
(27,16,1)
(51,28,1)
(4,24,1)
(56,14,1)
(4,32,1)
(19,1,2)
(27,1,2)
(0,36,2)
(18,1,2)
(25,48,2)
(12,1,2)
(46,1,2)
(9,1,2)
(26,57,2)
(5,29,2)
(29,26,2)
(56,1,2)
(13,1,2)
(7,1,2)
(6,1,2)
(32,1,2)
(16,1,2)
(29,1,2)
(21,1,2)
(55,1,2)
(36,1,2)
(37,54,2)
(23,1,2)
(54,1,2)
(54,5,2)
(2,1,2)
(12,0,2)
(56,54,2)
(55,6,2)
(6,51,2)
(51,12,2)
(0,1,2)
(42,6,2)
(25,42,2)
(10,1,2)
(51,28,2)
(12,43,2)
(17,1,2)
(58,1,2)
(5,20,2)
(37,4,2)
(5,1,2)
(8,4,2)
(51,1,2)
(48,42,2)
(42,1,2)
(32,23,2)
(35,6,2)
(35,1,2)
(24,35,2)
(38,1,2)
(37,6,2)
(26,1,2)
(31,1,2)
(50,42,2)
(24,1,2)
(30,1,2)
(23,54,2)
(23,38,2)
(44,1,2)
(35,31,2)
(14,1,2)
(49,1,2)
(3,1,2)
(57,1,2)
(33,1,2)
-----------------------------------
(0,100*sizeof(int)
(1,globalReturnsTrueOrFalse()
(2,0)
(3,data)
(4,globalReturnsTrueOrFalse()
(5,(int *)
(6,data = (int *)
(7,5)
(8,data)
(9,data)
(10,5)
(11,if(globalReturnsTrueOrFalse()
(12,realloc(data, 100*sizeof(int)
(13,100)
(14,0)
(15,NULL)
(16,100)
(17,data)
(18,NULL)
(19,data)
(20,int *)
(21,0)
(22,RET)
(23,data[0])
(24,printIntLine(data[0])
(25,exit(-1)
(26,100*sizeof(int)
(27,int)
(28,int *)
(29,ALLOCA(100*sizeof(int)
(30,data)
(31,data[0] = 5)
(32,printIntLine(data[0])
(33,data)
(34,)
(35,data[0])
(36,sizeof(int)
(37,free(data)
(38,data[0] = 5)
(39,data)
(40,)
(41,)
(42,data == NULL)
(43,data = NULL)
(44,data)
(45,if(globalReturnsTrueOrFalse()
(46,data)
(47,)
(48,-1)
(49,int)
(50,1)
(51,(int *)
(52,if (data == NULL)
(53,)
(54,data = (int *)
(55,data[0])
(56,data[0])
(57,sizeof(int)
(58,0)
(59,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
