-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_03_bad()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
69,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,70,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
41,42
41,43
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_03_bad(){    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_03_bad()
CWE401_Memory_Leak__int_calloc_03_bad
{    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,34,0)
(12,14,0)
(13,22,0)
(4,14,0)
(6,32,0)
(33,40,0)
(24,38,0)
(24,34,0)
(29,37,0)
(15,25,0)
(25,34,0)
(27,30,0)
(34,40,0)
(32,6,0)
(0,24,0)
(28,31,0)
(36,24,0)
(32,11,0)
(34,37,0)
(24,7,0)
(31,37,0)
(20,38,0)
(26,2,0)
(37,29,0)
(7,24,0)
(39,22,0)
(37,34,0)
(23,30,0)
(22,38,0)
(31,18,0)
(7,40,0)
(35,18,0)
(19,8,0)
(38,40,0)
(5,8,0)
(8,30,0)
(3,2,0)
(18,31,0)
(9,6,0)
(16,30,0)
(37,31,0)
(17,34,0)
(10,25,0)
(24,38,1)
(13,25,1)
(25,34,1)
(28,17,1)
(21,2,1)
(9,25,1)
(38,20,1)
(14,12,1)
(19,5,1)
(22,34,1)
(4,8,1)
(34,37,1)
(17,14,1)
(35,28,1)
(31,18,1)
(0,38,1)
(20,22,1)
(3,26,1)
(32,6,1)
(37,31,1)
(13,32,1)
(24,34,1)
(26,14,1)
(2,3,1)
(6,9,1)
(39,13,1)
(22,39,1)
(36,0,1)
(24,36,1)
(37,29,1)
(12,4,1)
(8,19,1)
(15,10,1)
(18,35,1)
(25,15,1)
(7,24,1)
(26,7,1)
(10,34,1)
(34,14,2)
(13,14,2)
(6,25,2)
(32,6,2)
(20,14,2)
(22,34,2)
(17,14,2)
(39,14,2)
(37,29,2)
(32,25,2)
(38,14,2)
(28,14,2)
(34,37,2)
(31,14,2)
(9,25,2)
(24,14,2)
(25,34,2)
(22,14,2)
(0,14,2)
(35,14,2)
(7,14,2)
(18,14,2)
(10,14,2)
(24,34,2)
(24,38,2)
(37,14,2)
(25,14,2)
(15,14,2)
(7,24,2)
(37,31,2)
(36,14,2)
(31,18,2)
-----------------------------------
(0,data)
(1, sizeof(int)
(2,5==5)
(3,5)
(4,5)
(5,data)
(6,-1)
(7,printIntLine(data[0])
(8,data = NULL)
(9,1)
(10,data)
(11,)
(12,5)
(13,data)
(14,5==5)
(15,NULL)
(16,if(5==5)
(17,data)
(18,sizeof(int)
(19,NULL)
(20,5)
(21,RET)
(22,data[0])
(23,data)
(24,data[0])
(25,data == NULL)
(26,5)
(27,if(5==5)
(28,100)
(29,int *)
(30,)
(31,calloc(100, sizeof(int)
(32,exit(-1)
(33,if (data == NULL)
(34,data = (int *)
(35,int)
(36,0)
(37,(int *)
(38,data[0] = 5)
(39,0)
(40,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
