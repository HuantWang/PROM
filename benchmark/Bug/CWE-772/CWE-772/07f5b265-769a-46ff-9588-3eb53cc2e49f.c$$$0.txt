-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_08_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
85,86
87,88
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,86,88
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_08_bad(){    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_08_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_08_bad
{    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(4,3,0)
(10,7,0)
(36,33,0)
(23,41,0)
(9,0,0)
(21,10,0)
(12,19,0)
(0,3,0)
(18,34,0)
(31,42,0)
(33,36,0)
(24,34,0)
(27,3,0)
(34,15,0)
(39,41,0)
(42,34,0)
(14,11,0)
(43,18,0)
(32,0,0)
(28,4,0)
(15,19,0)
(42,32,0)
(46,34,0)
(45,24,0)
(7,10,0)
(22,15,0)
(5,36,0)
(6,41,0)
(17,7,0)
(32,42,0)
(35,11,0)
(25,24,0)
(10,34,0)
(2,42,0)
(28,24,0)
(11,41,0)
(24,28,0)
(33,40,0)
(17,3,0)
(29,18,0)
(19,12,0)
(20,19,0)
(34,3,0)
(7,17,0)
(19,15,0)
(30,4,0)
(15,22,0)
(13,12,0)
(15,34,0)
(1,32,0)
(8,28,0)
(26,10,0)
(45,0,1)
(12,13,1)
(30,28,1)
(32,42,1)
(31,2,1)
(7,10,1)
(8,24,1)
(13,20,1)
(9,32,1)
(10,34,1)
(32,1,1)
(44,11,1)
(33,36,1)
(10,26,1)
(46,44,1)
(4,30,1)
(5,18,1)
(28,8,1)
(43,29,1)
(11,14,1)
(42,34,1)
(38,44,1)
(17,7,1)
(2,18,1)
(1,42,1)
(15,19,1)
(18,34,1)
(18,43,1)
(24,25,1)
(21,4,1)
(16,38,1)
(0,9,1)
(20,46,1)
(38,17,1)
(25,45,1)
(28,24,1)
(42,31,1)
(15,22,1)
(26,21,1)
(34,15,1)
(36,5,1)
(29,34,1)
(19,12,1)
(2,33,1)
(14,35,1)
(24,34,1)
(25,44,2)
(24,44,2)
(10,34,2)
(34,15,2)
(18,44,2)
(43,44,2)
(31,44,2)
(42,34,2)
(26,44,2)
(0,44,2)
(42,44,2)
(24,34,2)
(46,44,2)
(32,44,2)
(20,44,2)
(1,44,2)
(33,36,2)
(7,10,2)
(29,44,2)
(36,18,2)
(28,24,2)
(8,44,2)
(17,44,2)
(18,34,2)
(7,44,2)
(12,44,2)
(21,44,2)
(15,22,2)
(19,44,2)
(34,44,2)
(15,44,2)
(13,44,2)
(30,44,2)
(5,18,2)
(10,44,2)
(9,44,2)
(28,44,2)
(17,7,2)
(33,18,2)
(4,44,2)
(15,19,2)
(32,42,2)
(2,44,2)
(19,12,2)
(45,44,2)
-----------------------------------
(0,data[0].intOne = 0)
(1,intOne)
(2,data)
(3,)
(4,data[0].intTwo = 0)
(5,1)
(6,if(staticReturnsTrue()
(7,&data[0])
(8,intTwo)
(9,0)
(10,data[0])
(11,data = NULL)
(12,sizeof(twoIntsStruct)
(13,twoIntsStruct)
(14,NULL)
(15,(twoIntsStruct *)
(16,RET)
(17,printStructLine(&data[0])
(18,data == NULL)
(19,calloc(100, sizeof(twoIntsStruct)
(20,100)
(21,data)
(22,twoIntsStruct *)
(23,data)
(24,data[0])
(25,0)
(26,0)
(27,if (data == NULL)
(28,data[0].intTwo)
(29,data)
(30,0)
(31,0)
(32,data[0].intOne)
(33,exit(-1)
(34,data = (twoIntsStruct *)
(35,data)
(36,-1)
(37, sizeof(twoIntsStruct)
(38,staticReturnsTrue()
(39,if(staticReturnsTrue()
(40,)
(41,)
(42,data[0])
(43,NULL)
(44,staticReturnsTrue()
(45,data)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
