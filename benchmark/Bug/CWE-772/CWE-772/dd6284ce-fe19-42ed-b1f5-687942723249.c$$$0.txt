-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_12_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
101,103
102,103
104,105
104,106
106,107
107,108
107,109
108,109
111,112
112,113
112,114
113,114
113,115
114,115
114,116
115,116
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
129,130
130,131
130,132
131,132
133,134
133,135
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
144,145
144,146
144,147
145,146
146,147
148,149
150,151
151,152
152,153
152,154
153,154
155,156
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,94,98,100,103,105,109,110,116,117,118,119,125,126,127,128,132,136,138,142,143,147,149,154,156
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
92,93
92,94
104,105
104,106
112,113
112,114
121,122
121,123
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_12_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_12_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_12_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(32,29,0)
(20,28,0)
(19,9,0)
(12,2,0)
(23,50,0)
(47,16,0)
(31,40,0)
(22,80,0)
(57,71,0)
(17,38,0)
(82,49,0)
(27,82,0)
(41,38,0)
(25,28,0)
(40,62,0)
(29,32,0)
(80,23,0)
(64,75,0)
(21,37,0)
(50,23,0)
(23,80,0)
(57,19,0)
(26,1,0)
(54,37,0)
(73,1,0)
(78,37,0)
(44,74,0)
(51,35,0)
(66,53,0)
(75,62,0)
(24,15,0)
(55,49,0)
(60,14,0)
(56,3,0)
(71,57,0)
(70,62,0)
(32,2,0)
(48,32,0)
(2,1,0)
(3,56,0)
(82,2,0)
(38,41,0)
(77,7,0)
(71,62,0)
(56,43,0)
(16,75,0)
(39,78,0)
(14,28,0)
(63,40,0)
(5,19,0)
(0,15,0)
(10,71,0)
(74,51,0)
(59,29,0)
(62,28,0)
(50,2,0)
(45,62,0)
(0,26,0)
(72,38,0)
(18,20,0)
(16,20,0)
(19,5,0)
(41,14,0)
(56,62,0)
(35,51,0)
(65,37,0)
(30,82,0)
(42,7,0)
(8,71,0)
(36,80,0)
(75,16,0)
(49,82,0)
(55,73,0)
(33,78,0)
(74,3,0)
(62,56,0)
(73,55,0)
(13,36,0)
(69,55,0)
(51,74,0)
(38,62,0)
(9,19,0)
(11,41,0)
(34,50,0)
(53,1,0)
(81,26,0)
(77,46,0)
(36,13,0)
(55,69,0)
(61,0,0)
(50,34,0)
(70,52,0)
(43,56,0)
(58,70,0)
(3,74,0)
(76,15,0)
(49,55,0)
(68,75,0)
(29,53,0)
(7,77,0)
(15,2,0)
(19,57,0)
(2,50,0)
(70,2,0)
(80,36,0)
(15,0,0)
(6,32,0)
(5,28,0)
(62,56,1)
(0,15,1)
(71,8,1)
(16,75,1)
(32,2,1)
(76,53,1)
(22,12,1)
(23,80,1)
(82,30,1)
(7,42,1)
(44,45,1)
(5,19,1)
(19,9,1)
(3,74,1)
(59,32,1)
(45,67,1)
(48,2,1)
(72,20,1)
(12,67,1)
(73,55,1)
(60,41,1)
(68,40,1)
(24,76,1)
(68,77,1)
(8,10,1)
(11,38,1)
(36,13,1)
(42,40,1)
(18,16,1)
(64,68,1)
(75,64,1)
(61,15,1)
(19,57,1)
(79,73,1)
(67,78,1)
(63,31,1)
(51,44,1)
(6,48,1)
(80,36,1)
(58,79,1)
(47,75,1)
(0,61,1)
(10,14,1)
(74,51,1)
(40,63,1)
(31,62,1)
(51,35,1)
(17,72,1)
(41,38,1)
(4,70,1)
(55,49,1)
(39,33,1)
(56,43,1)
(50,23,1)
(41,11,1)
(50,34,1)
(53,66,1)
(15,24,1)
(27,26,1)
(4,79,1)
(30,27,1)
(2,50,1)
(70,62,1)
(78,39,1)
(40,62,1)
(81,0,1)
(70,2,1)
(29,59,1)
(38,17,1)
(36,22,1)
(66,29,1)
(29,32,1)
(71,62,1)
(16,47,1)
(56,3,1)
(82,2,1)
(75,62,1)
(26,81,1)
(49,82,1)
(20,18,1)
(14,60,1)
(77,7,1)
(70,58,1)
(57,71,1)
(32,6,1)
(79,5,1)
(15,2,1)
(38,62,1)
(55,69,1)
(38,62,2)
(30,67,2)
(50,67,2)
(50,34,2)
(15,2,2)
(45,67,2)
(36,67,2)
(53,67,2)
(2,50,2)
(19,57,2)
(82,2,2)
(57,67,2)
(18,67,2)
(68,67,2)
(32,2,2)
(3,74,2)
(31,67,2)
(6,67,2)
(72,67,2)
(63,67,2)
(60,67,2)
(48,67,2)
(0,15,2)
(19,67,2)
(29,32,2)
(64,67,2)
(50,23,2)
(20,67,2)
(2,67,2)
(47,67,2)
(71,67,2)
(38,67,2)
(74,67,2)
(57,71,2)
(74,51,2)
(36,13,2)
(11,67,2)
(22,67,2)
(70,2,2)
(59,67,2)
(62,67,2)
(12,67,2)
(61,67,2)
(44,67,2)
(23,67,2)
(62,56,2)
(75,67,2)
(73,55,2)
(56,3,2)
(58,79,2)
(41,38,2)
(82,67,2)
(29,67,2)
(77,40,2)
(80,36,2)
(51,67,2)
(40,62,2)
(17,67,2)
(70,62,2)
(16,67,2)
(75,62,2)
(77,7,2)
(3,67,2)
(42,40,2)
(15,67,2)
(66,67,2)
(5,67,2)
(49,82,2)
(55,49,2)
(8,67,2)
(55,69,2)
(70,79,2)
(19,9,2)
(0,67,2)
(55,67,2)
(5,19,2)
(76,67,2)
(49,67,2)
(56,67,2)
(16,75,2)
(23,80,2)
(81,67,2)
(71,62,2)
(51,35,2)
(10,67,2)
(26,67,2)
(14,67,2)
(41,67,2)
(40,67,2)
(7,40,2)
(27,67,2)
(24,67,2)
(56,43,2)
(32,67,2)
(73,67,2)
(80,67,2)
-----------------------------------
(0,data[0].intTwo)
(1,)
(2,data = (struct _twoIntsStruct *)
(3,malloc(100*sizeof(struct _twoIntsStruct)
(4,RET)
(5,printStructLine((twoIntsStruct *)
(6,0)
(7,-1)
(8,0)
(9,twoIntsStruct *)
(10,data)
(11,intTwo)
(12,data)
(13,struct _twoIntsStruct)
(14,data[0].intTwo = 0)
(15,data[0])
(16,data[0].intOne)
(17,0)
(18,0)
(19,(twoIntsStruct *)
(20,data[0].intOne = 0)
(21,if(globalReturnsTrueOrFalse()
(22,100)
(23,ALLOCA(100*sizeof(struct _twoIntsStruct)
(24,0)
(25,if (data == NULL)
(26,data[0].intTwo = 0)
(27,data)
(28,)
(29,data[0].intOne)
(30,0)
(31,data)
(32,data[0])
(33,data)
(34,struct _twoIntsStruct *)
(35,struct _twoIntsStruct)
(36,sizeof(struct _twoIntsStruct)
(37,)
(38,data[0])
(39,NULL)
(40,data == NULL)
(41,data[0].intTwo)
(42,1)
(43,struct _twoIntsStruct *)
(44,100)
(45,data)
(46,)
(47,intOne)
(48,data)
(49,&data[0])
(50,(struct _twoIntsStruct *)
(51,sizeof(struct _twoIntsStruct)
(52,)
(53,data[0].intOne = 0)
(54,data)
(55,(twoIntsStruct *)
(56,(struct _twoIntsStruct *)
(57,&data[0])
(58,data)
(59,intOne)
(60,0)
(61,intTwo)
(62,data = (struct _twoIntsStruct *)
(63,NULL)
(64,0)
(65,if(globalReturnsTrueOrFalse()
(66,0)
(67,globalReturnsTrueOrFalse()
(68,data)
(69,twoIntsStruct *)
(70,free(data)
(71,data[0])
(72,data)
(73,printStructLine((twoIntsStruct *)
(74,100*sizeof(struct _twoIntsStruct)
(75,data[0])
(76,data)
(77,exit(-1)
(78,data = NULL)
(79,globalReturnsTrueOrFalse()
(80,100*sizeof(struct _twoIntsStruct)
(81,0)
(82,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
