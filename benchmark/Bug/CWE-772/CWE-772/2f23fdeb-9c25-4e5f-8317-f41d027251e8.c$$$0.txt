-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_08_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
91,92
93,94
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,92,94
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_08_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_08_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_08_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(36,27,0)
(5,16,0)
(19,32,0)
(27,13,0)
(2,46,0)
(26,36,0)
(19,27,0)
(10,34,0)
(34,9,0)
(11,13,0)
(30,36,0)
(14,27,0)
(8,9,0)
(42,25,0)
(32,25,0)
(21,0,0)
(6,31,0)
(40,31,0)
(3,9,0)
(38,43,0)
(16,27,0)
(16,0,0)
(25,3,0)
(29,8,0)
(0,16,0)
(25,32,0)
(11,20,0)
(37,8,0)
(18,23,0)
(39,16,0)
(20,11,0)
(46,31,0)
(0,34,0)
(23,45,0)
(3,25,0)
(1,46,0)
(32,19,0)
(4,19,0)
(48,11,0)
(43,37,0)
(15,37,0)
(28,43,0)
(33,31,0)
(25,42,0)
(23,18,0)
(35,20,0)
(13,27,0)
(37,43,0)
(27,9,0)
(13,7,0)
(43,27,0)
(13,11,0)
(44,9,0)
(12,18,0)
(20,35,0)
(7,13,0)
(22,19,0)
(46,2,1)
(20,35,1)
(25,32,1)
(10,0,1)
(4,22,1)
(37,15,1)
(18,12,1)
(15,43,1)
(14,41,1)
(36,27,1)
(25,42,1)
(32,19,1)
(36,30,1)
(43,27,1)
(30,26,1)
(34,10,1)
(11,20,1)
(13,11,1)
(16,5,1)
(47,3,1)
(2,1,1)
(12,36,1)
(0,21,1)
(23,18,1)
(38,23,1)
(22,34,1)
(3,25,1)
(38,36,1)
(41,46,1)
(19,4,1)
(39,8,1)
(26,27,1)
(20,48,1)
(13,7,1)
(0,16,1)
(43,28,1)
(37,43,1)
(47,41,1)
(5,39,1)
(48,14,1)
(29,37,1)
(27,13,1)
(8,29,1)
(21,16,1)
(17,47,1)
(19,27,1)
(16,27,1)
(28,38,1)
(23,18,2)
(23,36,2)
(11,41,2)
(26,41,2)
(3,41,2)
(15,41,2)
(13,11,2)
(29,41,2)
(43,27,2)
(13,7,2)
(22,41,2)
(25,32,2)
(16,41,2)
(13,41,2)
(28,41,2)
(16,27,2)
(36,41,2)
(37,43,2)
(14,41,2)
(3,25,2)
(12,36,2)
(19,41,2)
(36,27,2)
(43,41,2)
(8,41,2)
(30,41,2)
(34,41,2)
(0,41,2)
(25,41,2)
(10,41,2)
(19,27,2)
(4,41,2)
(20,41,2)
(20,35,2)
(25,42,2)
(39,41,2)
(38,41,2)
(27,41,2)
(32,41,2)
(5,41,2)
(27,13,2)
(21,41,2)
(37,41,2)
(32,19,2)
(0,16,2)
(11,20,2)
(48,41,2)
(18,36,2)
-----------------------------------
(0,data[0].intTwo)
(1,data)
(2,NULL)
(3,printStructLine((twoIntsStruct *)
(4,0)
(5,0)
(6,if(staticReturnsTrue()
(7,struct _twoIntsStruct *)
(8,data[0].intOne = 0)
(9,)
(10,0)
(11,calloc(100, sizeof(struct _twoIntsStruct)
(12,1)
(13,(struct _twoIntsStruct *)
(14,data)
(15,intOne)
(16,data[0])
(17,RET)
(18,-1)
(19,data[0])
(20,sizeof(struct _twoIntsStruct)
(21,intTwo)
(22,data)
(23,exit(-1)
(24, sizeof(struct _twoIntsStruct)
(25,(twoIntsStruct *)
(26,data)
(27,data = (struct _twoIntsStruct *)
(28,0)
(29,0)
(30,NULL)
(31,)
(32,&data[0])
(33,if(staticReturnsTrue()
(34,data[0].intTwo = 0)
(35,struct _twoIntsStruct)
(36,data == NULL)
(37,data[0].intOne)
(38,data)
(39,data)
(40,data)
(41,staticReturnsTrue()
(42,twoIntsStruct *)
(43,data[0])
(44,if (data == NULL)
(45,)
(46,data = NULL)
(47,staticReturnsTrue()
(48,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
