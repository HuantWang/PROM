-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_34_bad()
{
    wchar_t * data;
    CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)calloc(100, sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
69,70
69,71
70,71
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
83,85
84,85
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,71,72,74,78,80,81,85,86,87
-----computeFrom-----
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_34_bad(){    wchar_t * data;    CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_34_bad()
CWE401_Memory_Leak__wchar_t_calloc_34_bad
{    wchar_t * data;    CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;
CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;
CWE401_Memory_Leak__wchar_t_calloc_34_unionType
CWE401_Memory_Leak__wchar_t_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(8,1,0)
(2,28,0)
(24,25,0)
(16,33,0)
(5,26,0)
(33,37,0)
(22,11,0)
(18,14,0)
(0,27,0)
(24,26,0)
(26,24,0)
(35,28,0)
(4,27,0)
(10,19,0)
(31,19,0)
(17,18,0)
(12,30,0)
(27,11,0)
(14,18,0)
(30,28,0)
(1,28,0)
(26,5,0)
(14,36,0)
(37,9,0)
(6,37,0)
(15,9,0)
(7,31,0)
(9,28,0)
(32,24,0)
(3,25,0)
(19,28,0)
(23,28,0)
(19,11,0)
(25,24,0)
(26,11,0)
(20,33,0)
(13,31,0)
(34,1,0)
(11,28,0)
(30,11,0)
(37,33,0)
(11,26,0)
(21,37,1)
(19,10,1)
(37,33,1)
(31,13,1)
(22,1,1)
(32,22,1)
(16,20,1)
(26,24,1)
(13,7,1)
(30,12,1)
(6,19,1)
(30,11,1)
(10,31,1)
(7,30,1)
(27,0,1)
(18,17,1)
(26,5,1)
(24,25,1)
(3,32,1)
(19,11,1)
(8,34,1)
(25,3,1)
(11,26,1)
(17,27,1)
(0,4,1)
(33,16,1)
(14,18,1)
(12,27,1)
(12,14,1)
(20,6,1)
(27,11,1)
(4,11,1)
(1,8,1)
(26,24,2)
(37,33,2)
(26,5,2)
(14,18,2)
(14,27,2)
(27,11,2)
(17,27,2)
(19,11,2)
(18,27,2)
(11,26,2)
(24,25,2)
(30,11,2)
-----------------------------------
(0,NULL)
(1,data = NULL)
(2,if (data == NULL)
(3,wchar_t)
(4,data)
(5,wchar_t *)
(6,data)
(7,myUnion)
(8,NULL)
(9,)
(10,data)
(11,data = (wchar_t *)
(12,data)
(13,unionFirst)
(14,exit(-1)
(15,data)
(16,unionSecond)
(17,1)
(18,-1)
(19,myUnion.unionFirst = data)
(20,myUnion)
(21,RET)
(22,data)
(23,myUnion)
(24,calloc(100, sizeof(wchar_t)
(25,sizeof(wchar_t)
(26,(wchar_t *)
(27,data == NULL)
(28,)
(29, sizeof(wchar_t)
(30,printWLine(data)
(31,myUnion.unionFirst)
(32,100)
(33,myUnion.unionSecond)
(34,data)
(35,data)
(36,)
(37,* data = myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
