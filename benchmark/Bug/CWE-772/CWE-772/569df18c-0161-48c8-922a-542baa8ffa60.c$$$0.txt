-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_10_bad()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,58,60,61,65,67,70,72
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_10_bad(){    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_10_bad()
CWE401_Memory_Leak__char_realloc_10_bad
{    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,27,0)
(27,20,0)
(8,23,0)
(28,8,0)
(13,31,0)
(15,32,0)
(23,12,0)
(22,29,0)
(31,22,0)
(1,19,0)
(8,12,0)
(2,31,0)
(29,14,0)
(0,32,0)
(31,2,0)
(29,22,0)
(14,29,0)
(33,8,0)
(29,23,0)
(25,19,0)
(23,29,0)
(9,10,0)
(22,31,0)
(30,1,0)
(21,22,0)
(7,2,0)
(5,12,0)
(17,11,0)
(22,1,0)
(27,10,0)
(26,19,0)
(24,23,0)
(4,19,0)
(32,23,0)
(3,1,0)
(11,12,0)
(11,23,0)
(31,2,1)
(16,1,1)
(8,33,1)
(22,1,1)
(32,23,1)
(13,21,1)
(0,23,1)
(11,23,1)
(7,13,1)
(33,28,1)
(10,9,1)
(8,23,1)
(29,14,1)
(3,30,1)
(29,22,1)
(27,10,1)
(32,15,1)
(18,11,1)
(24,16,1)
(2,7,1)
(18,16,1)
(17,8,1)
(23,29,1)
(1,3,1)
(11,17,1)
(21,24,1)
(28,32,1)
(6,18,1)
(28,27,1)
(22,31,1)
(9,32,1)
(15,0,1)
(22,1,2)
(22,16,2)
(29,14,2)
(21,16,2)
(10,32,2)
(31,16,2)
(8,23,2)
(2,16,2)
(23,29,2)
(11,23,2)
(32,16,2)
(32,23,2)
(8,16,2)
(0,16,2)
(29,16,2)
(15,16,2)
(9,32,2)
(28,16,2)
(24,16,2)
(7,16,2)
(11,16,2)
(23,16,2)
(31,2,2)
(33,16,2)
(27,10,2)
(27,32,2)
(13,16,2)
(17,16,2)
(29,22,2)
(22,31,2)
-----------------------------------
(0,data)
(1,data = NULL)
(2,sizeof(char)
(3,NULL)
(4,if(globalTrue)
(5,if (data == NULL)
(6,RET)
(7,char)
(8,strcpy(data, "A String")
(9,1)
(10,-1)
(11,printLine(data)
(12,)
(13,100)
(14,char *)
(15,NULL)
(16,globalTrue)
(17,data)
(18,globalTrue)
(19,)
(20,)
(21,data)
(22,realloc(data, 100*sizeof(char)
(23,data = (char *)
(24,data)
(25,data)
(26,if(globalTrue)
(27,exit(-1)
(28,data)
(29,(char *)
(30,data)
(31,100*sizeof(char)
(32,data == NULL)
(33,"A String")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
