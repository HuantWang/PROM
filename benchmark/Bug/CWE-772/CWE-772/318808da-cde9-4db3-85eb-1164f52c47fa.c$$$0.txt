-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_18_bad()
{
    wchar_t * data;
    data = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
68,69
68,70
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,67,69,70
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_18_bad(){    wchar_t * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__wchar_t_malloc_18_bad()
CWE401_Memory_Leak__wchar_t_malloc_18_bad
{    wchar_t * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));
source
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation */    ;
sink
;
-----joern-----
(10,0,0)
(5,7,0)
(24,4,0)
(26,9,0)
(26,17,0)
(7,8,0)
(28,6,0)
(27,17,0)
(15,0,0)
(5,6,0)
(19,4,0)
(8,12,0)
(16,5,0)
(12,8,0)
(21,19,0)
(0,6,0)
(6,5,0)
(1,4,0)
(13,4,0)
(2,4,0)
(7,5,0)
(8,7,0)
(17,26,0)
(5,16,0)
(23,2,0)
(20,19,0)
(6,4,0)
(25,12,0)
(14,4,0)
(18,4,0)
(3,4,0)
(11,8,0)
(2,6,0)
(8,12,1)
(2,23,1)
(11,28,1)
(23,0,1)
(27,0,1)
(0,6,1)
(15,10,1)
(23,26,1)
(21,20,1)
(7,8,1)
(10,6,1)
(28,14,1)
(3,2,1)
(26,17,1)
(25,11,1)
(14,19,1)
(6,5,1)
(22,3,1)
(0,15,1)
(17,27,1)
(5,16,1)
(12,25,1)
(19,21,1)
(5,7,1)
(2,6,1)
(6,5,2)
(27,0,2)
(26,0,2)
(7,8,2)
(0,6,2)
(2,6,2)
(8,12,2)
(5,7,2)
(17,0,2)
(26,17,2)
(5,16,2)
-----------------------------------
(0,data == NULL)
(1,source:)
(2,printWLine(data)
(3,goto sink;)
(4,)
(5,(wchar_t *)
(6,data = (wchar_t *)
(7,malloc(100*sizeof(wchar_t)
(8,100*sizeof(wchar_t)
(9,)
(10,data)
(11,100)
(12,sizeof(wchar_t)
(13,if (data == NULL)
(14,goto source;)
(15,NULL)
(16,wchar_t *)
(17,-1)
(18,sink:)
(19,data = NULL)
(20,data)
(21,NULL)
(22,RET)
(23,data)
(24,data)
(25,wchar_t)
(26,exit(-1)
(27,1)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
