-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        char myString[] = "myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = strdup(myString);
        /* Use data */
        printLine(data);
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
16,17
16,18
16,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
-----nextToken-----
2,4,5,7,9,10,15,17,18,20,24,27,29,33,35,38
-----computeFrom-----
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    return data;}
{        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
return data;
data
data
-----joern-----
(5,9,0)
(14,6,0)
(7,5,0)
(15,5,0)
(12,8,0)
(1,3,0)
(10,1,0)
(0,13,0)
(4,6,0)
(11,1,0)
(1,9,0)
(7,3,0)
(13,7,0)
(8,7,0)
(13,6,0)
(1,7,0)
(8,3,0)
(6,5,0)
(7,13,0)
(8,5,0)
(2,7,0)
(10,1,1)
(12,7,1)
(0,2,1)
(2,6,1)
(1,7,1)
(8,3,1)
(8,7,1)
(13,0,1)
(8,12,1)
(7,13,1)
(13,6,1)
(6,4,1)
(11,8,1)
(1,11,1)
(1,3,1)
(4,14,1)
(7,3,1)
(13,6,2)
(7,13,2)
(10,1,2)
(7,3,2)
(8,3,2)
(8,7,2)
(1,3,2)
(1,7,2)
-----------------------------------
(0,myString)
(1,return data;)
(2,data)
(3,char * data)
(4,"myString")
(5,)
(6,myString[] = "myString")
(7,data = strdup(myString)
(8,printLine(data)
(9,)
(10,RET)
(11,data)
(12,data)
(13,strdup(myString)
(14,myString)
(15,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
