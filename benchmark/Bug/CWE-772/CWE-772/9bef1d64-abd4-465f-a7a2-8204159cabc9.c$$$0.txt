-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
67,68
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,62,64,66,68
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_02_bad(){    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_02_bad()
CWE401_Memory_Leak__char_malloc_02_bad
{    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,22,0)
(27,31,0)
(20,22,0)
(28,31,0)
(5,18,0)
(0,5,0)
(8,13,0)
(18,5,0)
(5,0,0)
(9,7,0)
(1,5,0)
(2,1,0)
(31,28,0)
(2,15,0)
(30,13,0)
(6,15,0)
(23,7,0)
(19,1,0)
(13,1,0)
(32,19,0)
(0,22,0)
(10,20,0)
(1,15,0)
(22,0,0)
(3,9,0)
(13,15,0)
(16,7,0)
(28,4,0)
(21,9,0)
(5,1,0)
(17,19,0)
(11,7,0)
(25,1,0)
(22,20,0)
(12,2,0)
(25,29,1)
(21,3,1)
(19,1,1)
(5,0,1)
(17,32,1)
(13,8,1)
(19,17,1)
(31,27,1)
(29,9,1)
(8,30,1)
(9,21,1)
(13,1,1)
(27,19,1)
(28,31,1)
(14,26,1)
(2,1,1)
(0,22,1)
(32,1,1)
(20,10,1)
(24,25,1)
(12,13,1)
(2,12,1)
(1,5,1)
(26,2,1)
(10,24,1)
(30,28,1)
(22,20,1)
(5,18,1)
(30,19,1)
(26,29,1)
(27,19,2)
(8,29,2)
(2,1,2)
(28,31,2)
(24,29,2)
(13,1,2)
(2,29,2)
(22,29,2)
(5,29,2)
(1,5,2)
(0,22,2)
(17,29,2)
(13,29,2)
(32,29,2)
(25,29,2)
(1,29,2)
(5,18,2)
(19,1,2)
(20,29,2)
(5,0,2)
(19,29,2)
(28,19,2)
(22,20,2)
(30,29,2)
(10,29,2)
(31,19,2)
(0,29,2)
(12,29,2)
-----------------------------------
(0,malloc(100*sizeof(char)
(1,data = (char *)
(2,printLine(data)
(3,data)
(4,)
(5,(char *)
(6,if (data == NULL)
(7,)
(8,"A String")
(9,data = NULL)
(10,char)
(11,data)
(12,data)
(13,strcpy(data, "A String")
(14,RET)
(15,)
(16,if(1)
(17,NULL)
(18,char *)
(19,data == NULL)
(20,sizeof(char)
(21,NULL)
(22,100*sizeof(char)
(23,if(1)
(24,100)
(25,data)
(26,1)
(27,1)
(28,exit(-1)
(29,1)
(30,data)
(31,-1)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
