-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_02_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
87,88
87,89
89,90
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,81,85,86,88,90
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_02_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_02_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_02_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(42,37,0)
(12,40,0)
(4,2,0)
(25,3,0)
(40,18,0)
(8,14,0)
(29,13,0)
(43,14,0)
(23,31,0)
(26,29,0)
(0,32,0)
(3,25,0)
(1,43,0)
(6,33,0)
(20,32,0)
(47,20,0)
(42,15,0)
(43,40,0)
(46,19,0)
(42,36,0)
(7,34,0)
(44,9,0)
(37,42,0)
(9,37,0)
(39,19,0)
(3,12,0)
(19,2,0)
(1,31,0)
(5,14,0)
(40,12,0)
(37,9,0)
(29,26,0)
(9,43,0)
(22,12,0)
(32,14,0)
(24,1,0)
(35,1,0)
(41,9,0)
(48,2,0)
(15,42,0)
(31,1,0)
(34,43,0)
(16,33,0)
(38,34,0)
(45,26,0)
(20,33,0)
(31,5,0)
(15,14,0)
(11,43,0)
(18,40,0)
(30,5,0)
(17,2,0)
(36,42,0)
(33,20,0)
(40,43,0)
(33,43,0)
(12,3,0)
(19,39,1)
(21,10,1)
(42,36,1)
(29,26,1)
(1,43,1)
(31,1,1)
(45,34,1)
(33,16,1)
(9,41,1)
(38,7,1)
(20,47,1)
(12,3,1)
(26,45,1)
(40,18,1)
(23,1,1)
(28,21,1)
(33,43,1)
(39,46,1)
(42,37,1)
(43,40,1)
(0,20,1)
(1,24,1)
(22,11,1)
(6,5,1)
(34,43,1)
(16,6,1)
(15,42,1)
(11,10,1)
(40,12,1)
(20,33,1)
(7,43,1)
(21,15,1)
(30,31,1)
(44,32,1)
(34,38,1)
(41,44,1)
(9,43,1)
(35,29,1)
(47,33,1)
(31,23,1)
(35,34,1)
(24,35,1)
(37,9,1)
(5,30,1)
(3,25,1)
(3,22,1)
(10,19,1)
(32,0,1)
(40,18,2)
(9,10,2)
(7,10,2)
(16,10,2)
(11,10,2)
(40,10,2)
(22,10,2)
(43,40,2)
(31,1,2)
(1,10,2)
(32,10,2)
(45,34,2)
(31,10,2)
(40,12,2)
(6,10,2)
(30,10,2)
(38,10,2)
(42,37,2)
(3,10,2)
(34,43,2)
(24,10,2)
(1,43,2)
(33,43,2)
(35,10,2)
(12,10,2)
(3,25,2)
(12,3,2)
(42,10,2)
(26,34,2)
(41,10,2)
(44,10,2)
(15,10,2)
(43,10,2)
(5,10,2)
(33,10,2)
(29,26,2)
(37,10,2)
(0,10,2)
(20,33,2)
(15,42,2)
(34,10,2)
(9,43,2)
(20,10,2)
(37,9,2)
(29,34,2)
(23,10,2)
(42,36,2)
(47,10,2)
-----------------------------------
(0,0)
(1,data[0])
(2,)
(3,sizeof(struct _twoIntsStruct)
(4,data)
(5,data[0].intOne = 0)
(6,data)
(7,data)
(8,if (data == NULL)
(9,data[0])
(10,1)
(11,data)
(12,calloc(100, sizeof(struct _twoIntsStruct)
(13,)
(14,)
(15,printStructLine((twoIntsStruct *)
(16,0)
(17,if(1)
(18,struct _twoIntsStruct *)
(19,data = NULL)
(20,data[0].intTwo)
(21,1)
(22,100)
(23,intOne)
(24,0)
(25,struct _twoIntsStruct)
(26,-1)
(27, sizeof(struct _twoIntsStruct)
(28,RET)
(29,exit(-1)
(30,0)
(31,data[0].intOne)
(32,data[0].intTwo = 0)
(33,data[0])
(34,data == NULL)
(35,data)
(36,twoIntsStruct *)
(37,&data[0])
(38,NULL)
(39,NULL)
(40,(struct _twoIntsStruct *)
(41,0)
(42,(twoIntsStruct *)
(43,data = (struct _twoIntsStruct *)
(44,data)
(45,1)
(46,data)
(47,intTwo)
(48,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
