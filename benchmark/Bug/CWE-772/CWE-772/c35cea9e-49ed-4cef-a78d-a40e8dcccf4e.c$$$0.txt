-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_06_bad()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
75,76
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,60,62,63,67,69,73,74,76
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_06_bad(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_06_bad()
CWE401_Memory_Leak__char_realloc_06_bad
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,27,0)
(21,6,0)
(24,19,0)
(28,18,0)
(7,36,0)
(4,35,0)
(15,11,0)
(37,0,0)
(5,36,0)
(1,12,0)
(29,0,0)
(0,37,0)
(14,28,0)
(13,27,0)
(22,6,0)
(10,19,0)
(3,37,0)
(31,12,0)
(31,33,0)
(17,18,0)
(35,4,0)
(8,32,0)
(9,32,0)
(20,17,0)
(0,4,0)
(18,4,0)
(23,18,0)
(17,27,0)
(2,37,0)
(6,19,0)
(36,18,0)
(37,3,0)
(0,6,0)
(26,3,0)
(16,19,0)
(4,0,0)
(12,31,0)
(34,11,0)
(25,28,0)
(36,27,0)
(4,18,0)
(7,5,1)
(0,37,1)
(9,6,1)
(32,8,1)
(15,32,1)
(36,18,1)
(28,18,1)
(17,18,1)
(30,11,1)
(34,15,1)
(29,23,1)
(37,3,1)
(15,17,1)
(23,32,1)
(28,25,1)
(26,2,1)
(17,20,1)
(21,22,1)
(5,28,1)
(4,0,1)
(14,18,1)
(18,4,1)
(25,14,1)
(31,12,1)
(4,35,1)
(12,1,1)
(6,21,1)
(2,29,1)
(11,34,1)
(1,28,1)
(0,6,1)
(5,31,1)
(20,36,1)
(36,7,1)
(3,26,1)
(8,9,1)
(0,6,2)
(4,35,2)
(14,32,2)
(5,32,2)
(2,32,2)
(4,32,2)
(18,32,2)
(37,32,2)
(4,0,2)
(3,32,2)
(37,3,2)
(12,28,2)
(28,32,2)
(29,32,2)
(25,32,2)
(18,4,2)
(1,28,2)
(36,18,2)
(0,37,2)
(28,18,2)
(17,32,2)
(0,32,2)
(31,12,2)
(31,28,2)
(36,32,2)
(7,32,2)
(23,32,2)
(26,32,2)
(20,32,2)
(17,18,2)
-----------------------------------
(0,realloc(data, 100*sizeof(char)
(1,1)
(2,100)
(3,sizeof(char)
(4,(char *)
(5,data)
(6,data = NULL)
(7,"A String")
(8,5)
(9,STATIC_CONST_FIVE)
(10,if(STATIC_CONST_FIVE==5)
(11,STATIC_CONST_FIVE==5)
(12,-1)
(13,if (data == NULL)
(14,data)
(15,STATIC_CONST_FIVE)
(16,if(STATIC_CONST_FIVE==5)
(17,printLine(data)
(18,data = (char *)
(19,)
(20,data)
(21,NULL)
(22,data)
(23,data)
(24,data)
(25,NULL)
(26,char)
(27,)
(28,data == NULL)
(29,data)
(30,RET)
(31,exit(-1)
(32,STATIC_CONST_FIVE==5)
(33,)
(34,5)
(35,char *)
(36,strcpy(data, "A String")
(37,100*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
