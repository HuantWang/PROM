-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_08_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
86,87
86,88
87,88
88,89
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,85,89,91
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_08_bad(){    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_08_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_08_bad
{    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(3,27,0)
(16,5,0)
(11,19,0)
(46,43,0)
(16,7,0)
(35,4,0)
(6,44,0)
(34,25,0)
(18,30,0)
(7,47,0)
(15,38,0)
(19,12,0)
(29,12,0)
(14,16,0)
(10,19,0)
(22,27,0)
(38,35,0)
(13,29,0)
(23,43,0)
(41,20,0)
(44,35,0)
(35,12,0)
(17,38,0)
(20,38,0)
(32,23,0)
(42,47,0)
(43,35,0)
(9,5,0)
(5,16,0)
(1,44,0)
(44,10,0)
(33,47,0)
(0,30,0)
(39,10,0)
(27,35,0)
(25,34,0)
(25,21,0)
(4,28,0)
(43,23,0)
(7,4,0)
(37,7,0)
(4,35,0)
(36,30,0)
(23,29,0)
(8,34,0)
(4,7,0)
(2,12,0)
(38,20,0)
(28,4,0)
(7,16,0)
(47,30,0)
(41,12,0)
(31,43,0)
(10,44,0)
(45,35,0)
(20,41,0)
(25,34,1)
(43,35,1)
(27,35,1)
(9,14,1)
(38,17,1)
(35,4,1)
(40,41,1)
(10,39,1)
(16,5,1)
(14,37,1)
(24,47,1)
(1,6,1)
(4,7,1)
(20,38,1)
(38,35,1)
(29,13,1)
(15,29,1)
(6,25,1)
(44,1,1)
(7,47,1)
(31,19,1)
(19,11,1)
(23,43,1)
(46,31,1)
(22,3,1)
(41,20,1)
(42,33,1)
(39,44,1)
(32,43,1)
(7,16,1)
(26,40,1)
(23,32,1)
(47,42,1)
(37,45,1)
(13,23,1)
(44,35,1)
(17,15,1)
(45,24,1)
(10,44,1)
(8,27,1)
(5,9,1)
(27,22,1)
(6,27,1)
(11,10,1)
(3,35,1)
(34,8,1)
(43,46,1)
(40,24,1)
(4,28,1)
(7,47,2)
(8,27,2)
(7,24,2)
(1,24,2)
(23,24,2)
(22,24,2)
(27,35,2)
(7,16,2)
(35,24,2)
(37,24,2)
(39,24,2)
(5,24,2)
(43,24,2)
(20,24,2)
(25,27,2)
(45,24,2)
(44,24,2)
(23,43,2)
(14,24,2)
(44,35,2)
(10,24,2)
(4,28,2)
(20,38,2)
(15,24,2)
(13,24,2)
(19,24,2)
(31,24,2)
(41,24,2)
(38,24,2)
(35,4,2)
(41,20,2)
(6,24,2)
(46,24,2)
(4,24,2)
(4,7,2)
(27,24,2)
(17,24,2)
(11,24,2)
(34,27,2)
(32,24,2)
(25,34,2)
(9,24,2)
(38,35,2)
(16,5,2)
(3,24,2)
(43,35,2)
(10,44,2)
(16,24,2)
(29,24,2)
-----------------------------------
(0,if(staticReturnsTrue()
(1,0)
(2,if (data == NULL)
(3,data)
(4,(twoIntsStruct *)
(5,sizeof(twoIntsStruct)
(6,data)
(7,realloc(data, 100*sizeof(twoIntsStruct)
(8,1)
(9,twoIntsStruct)
(10,data[0].intOne)
(11,0)
(12,)
(13,0)
(14,100)
(15,data)
(16,100*sizeof(twoIntsStruct)
(17,0)
(18,data)
(19,data[0].intOne = 0)
(20,&data[0])
(21,)
(22,NULL)
(23,data[0].intTwo)
(24,staticReturnsTrue()
(25,exit(-1)
(26,RET)
(27,data == NULL)
(28,twoIntsStruct *)
(29,data[0].intTwo = 0)
(30,)
(31,data)
(32,intTwo)
(33,data)
(34,-1)
(35,data = (twoIntsStruct *)
(36,if(staticReturnsTrue()
(37,data)
(38,data[0])
(39,intOne)
(40,staticReturnsTrue()
(41,printStructLine(&data[0])
(42,NULL)
(43,data[0])
(44,data[0])
(45,data)
(46,0)
(47,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
