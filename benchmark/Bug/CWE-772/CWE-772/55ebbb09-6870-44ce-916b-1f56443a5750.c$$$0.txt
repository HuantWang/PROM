-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_05_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,67,69
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_05_bad(){    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_05_bad()
CWE401_Memory_Leak__wchar_t_calloc_05_bad
{    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,10,0)
(1,28,0)
(0,20,0)
(21,14,0)
(7,29,0)
(11,24,0)
(27,26,0)
(26,15,0)
(20,5,0)
(5,20,0)
(9,13,0)
(13,24,0)
(5,28,0)
(22,9,0)
(29,14,0)
(28,1,0)
(3,27,0)
(13,28,0)
(16,13,0)
(19,29,0)
(6,5,0)
(28,5,0)
(17,10,0)
(12,14,0)
(10,13,0)
(28,13,0)
(25,14,0)
(9,24,0)
(26,27,0)
(8,2,1)
(5,20,1)
(2,4,1)
(2,9,1)
(27,3,1)
(0,6,1)
(6,16,1)
(19,7,1)
(20,0,1)
(29,19,1)
(22,10,1)
(22,26,1)
(26,27,1)
(3,10,1)
(16,4,1)
(13,28,1)
(28,1,1)
(10,13,1)
(9,13,1)
(4,29,1)
(9,22,1)
(17,13,1)
(10,18,1)
(28,5,1)
(18,17,1)
(26,27,2)
(6,4,2)
(28,5,2)
(10,4,2)
(5,4,2)
(16,4,2)
(27,10,2)
(9,4,2)
(17,4,2)
(18,4,2)
(10,13,2)
(0,4,2)
(28,1,2)
(5,20,2)
(13,28,2)
(20,4,2)
(28,4,2)
(13,4,2)
(26,10,2)
(3,10,2)
(22,4,2)
(9,13,2)
-----------------------------------
(0,wchar_t)
(1,wchar_t *)
(2,staticTrue)
(3,1)
(4,staticTrue)
(5,calloc(100, sizeof(wchar_t)
(6,100)
(7,data)
(8,RET)
(9,printWLine(data)
(10,data == NULL)
(11,if (data == NULL)
(12,data)
(13,data = (wchar_t *)
(14,)
(15,)
(16,data)
(17,data)
(18,NULL)
(19,NULL)
(20,sizeof(wchar_t)
(21,if(staticTrue)
(22,data)
(23, sizeof(wchar_t)
(24,)
(25,if(staticTrue)
(26,exit(-1)
(27,-1)
(28,(wchar_t *)
(29,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
