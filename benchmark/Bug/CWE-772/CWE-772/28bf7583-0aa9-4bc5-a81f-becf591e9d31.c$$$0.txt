-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_01_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
56,57
56,58
57,58
59,60
59,61
60,61
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,52,53,54,58,61,62,63
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_01_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_calloc_01_bad()
CWE401_Memory_Leak__int_calloc_01_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
;
-----joern-----
(31,7,0)
(25,23,0)
(8,21,0)
(20,7,0)
(19,18,0)
(1,2,0)
(21,23,0)
(22,21,0)
(2,31,0)
(24,23,0)
(7,31,0)
(30,23,0)
(18,27,0)
(28,21,0)
(21,2,0)
(29,31,0)
(2,1,0)
(10,28,0)
(11,23,0)
(18,19,0)
(13,30,0)
(15,25,0)
(12,25,0)
(16,23,0)
(9,19,0)
(11,13,0)
(13,11,0)
(4,30,0)
(3,8,0)
(13,21,0)
(14,28,0)
(5,13,0)
(6,8,0)
(17,13,0)
(2,21,0)
(31,2,0)
(28,30,0)
(15,12,1)
(14,18,1)
(29,22,1)
(7,20,1)
(17,30,1)
(9,8,1)
(18,19,1)
(25,15,1)
(28,21,1)
(30,4,1)
(8,21,1)
(22,25,1)
(13,30,1)
(14,8,1)
(2,31,1)
(6,3,1)
(4,28,1)
(20,29,1)
(5,17,1)
(3,21,1)
(13,21,1)
(13,5,1)
(26,11,1)
(19,9,1)
(2,1,1)
(11,13,1)
(31,7,1)
(21,2,1)
(28,10,1)
(10,14,1)
(8,6,1)
(13,21,2)
(13,30,2)
(8,21,2)
(28,21,2)
(21,2,2)
(2,31,2)
(9,8,2)
(18,8,2)
(18,19,2)
(11,13,2)
(31,7,2)
(19,8,2)
(2,1,2)
-----------------------------------
(0, sizeof(int)
(1,int *)
(2,(int *)
(3,data)
(4,5)
(5,0)
(6,NULL)
(7,sizeof(int)
(8,data == NULL)
(9,1)
(10,0)
(11,printIntLine(data[0])
(12,data)
(13,data[0])
(14,data)
(15,NULL)
(16,if (data == NULL)
(17,data)
(18,exit(-1)
(19,-1)
(20,int)
(21,data = (int *)
(22,data)
(23,)
(24,data)
(25,data = NULL)
(26,RET)
(27,)
(28,data[0])
(29,100)
(30,data[0] = 5)
(31,calloc(100, sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
