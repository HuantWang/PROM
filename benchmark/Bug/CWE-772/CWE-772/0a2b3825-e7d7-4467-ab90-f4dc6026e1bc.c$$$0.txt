-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
74,75
74,76
76,77
76,78
76,79
76,80
76,81
76,82
77,78
82,83
83,84
83,85
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,66,67,71,72,73,75,78,79,80,81,85,86,87
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__wchar_t_calloc_15_bad()
CWE401_Memory_Leak__wchar_t_calloc_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(7,25,0)
(11,30,0)
(5,2,0)
(24,40,0)
(40,21,0)
(16,21,0)
(0,40,0)
(21,40,0)
(2,5,0)
(40,24,0)
(27,32,0)
(17,5,0)
(16,13,0)
(42,21,0)
(0,30,0)
(40,0,0)
(1,32,0)
(34,19,0)
(2,6,0)
(14,0,0)
(30,0,0)
(21,13,0)
(33,13,0)
(18,32,0)
(4,42,0)
(28,13,0)
(15,13,0)
(41,13,0)
(31,13,0)
(26,16,0)
(23,32,0)
(39,18,0)
(8,28,0)
(38,25,0)
(37,42,0)
(29,19,0)
(20,32,0)
(3,25,0)
(19,25,0)
(22,21,0)
(12,13,0)
(35,19,1)
(21,40,1)
(5,17,1)
(20,10,1)
(0,30,1)
(40,0,1)
(37,4,1)
(17,42,1)
(42,21,1)
(41,16,1)
(9,20,1)
(4,21,1)
(34,29,1)
(16,26,1)
(18,39,1)
(14,22,1)
(15,28,1)
(42,37,1)
(26,2,1)
(30,11,1)
(27,18,1)
(9,27,1)
(40,24,1)
(2,5,1)
(11,14,1)
(19,34,1)
(16,21,1)
(22,35,1)
(28,8,1)
(39,10,1)
(8,35,1)
(10,15,1)
(26,42,1)
(10,41,1)
(26,35,2)
(40,0,2)
(15,35,2)
(2,42,2)
(0,30,2)
(17,42,2)
(27,10,2)
(4,35,2)
(41,35,2)
(30,35,2)
(11,35,2)
(18,10,2)
(28,35,2)
(40,35,2)
(39,10,2)
(2,5,2)
(20,10,2)
(37,35,2)
(22,35,2)
(42,35,2)
(8,35,2)
(40,24,2)
(16,35,2)
(21,40,2)
(16,21,2)
(21,35,2)
(5,42,2)
(42,21,2)
(14,35,2)
(0,35,2)
-----------------------------------
(0,calloc(100, sizeof(wchar_t)
(1,default:)
(2,exit(-1)
(3,switch(7)
(4,data)
(5,-1)
(6,)
(7,data)
(8,"Benign, fixed string")
(9,RET)
(10,7)
(11,wchar_t)
(12,case 6:)
(13,)
(14,100)
(15,break;)
(16,printWLine(data)
(17,1)
(18,printLine("Benign, fixed string")
(19,data = NULL)
(20,break;)
(21,data = (wchar_t *)
(22,data)
(23,case 7:)
(24,wchar_t *)
(25,)
(26,data)
(27,break;)
(28,printLine("Benign, fixed string")
(29,data)
(30,sizeof(wchar_t)
(31,if (data == NULL)
(32,)
(33,default:)
(34,NULL)
(35,6)
(36, sizeof(wchar_t)
(37,NULL)
(38,switch(6)
(39,"Benign, fixed string")
(40,(wchar_t *)
(41,break;)
(42,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
