-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_31_bad()
{
    wchar_t * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)calloc(100, sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
50,51
52,53
55,56
56,57
56,58
57,58
59,60
61,62
61,63
61,64
62,63
63,64
63,65
65,66
65,67
65,68
68,69
69,70
71,72
72,73
72,74
74,75
74,76
74,77
77,78
78,79
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,51,53,54,58,60,64,66,67,70,73,75,76,79,80
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_31_bad(){    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_31_bad()
CWE401_Memory_Leak__wchar_t_calloc_31_bad
{    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(0,8,0)
(11,1,0)
(8,32,0)
(3,12,0)
(5,2,0)
(20,10,0)
(17,0,0)
(33,13,0)
(33,12,0)
(15,10,0)
(7,30,0)
(26,33,0)
(27,2,0)
(2,13,0)
(15,18,0)
(23,13,0)
(22,5,0)
(13,33,0)
(13,23,0)
(9,30,0)
(10,18,0)
(4,24,0)
(1,30,0)
(18,30,0)
(2,30,0)
(8,0,0)
(13,2,0)
(5,30,0)
(16,18,0)
(14,15,0)
(19,18,0)
(6,15,0)
(31,1,0)
(10,2,0)
(21,24,0)
(12,33,0)
(28,10,0)
(24,2,0)
(15,6,1)
(28,20,1)
(31,11,1)
(27,1,1)
(25,15,1)
(20,5,1)
(5,2,1)
(8,0,1)
(22,24,1)
(10,2,1)
(4,21,1)
(5,22,1)
(24,2,1)
(12,3,1)
(24,4,1)
(10,28,1)
(1,31,1)
(2,13,1)
(13,23,1)
(0,17,1)
(14,10,1)
(3,26,1)
(22,8,1)
(6,14,1)
(15,10,1)
(21,2,1)
(33,12,1)
(17,24,1)
(26,27,1)
(13,33,1)
(8,24,2)
(10,2,2)
(24,2,2)
(0,24,2)
(13,23,2)
(13,33,2)
(15,10,2)
(5,2,2)
(2,13,2)
(17,24,2)
(8,0,2)
(33,12,2)
-----------------------------------
(0,-1)
(1,data = NULL)
(2,data = (wchar_t *)
(3,wchar_t)
(4,NULL)
(5,printWLine(data)
(6,dataCopy)
(7,if (data == NULL)
(8,exit(-1)
(9,data)
(10,* dataCopy = data)
(11,data)
(12,sizeof(wchar_t)
(13,(wchar_t *)
(14,data)
(15,* data = dataCopy)
(16,dataCopy)
(17,1)
(18,)
(19,data)
(20,dataCopy)
(21,data)
(22,data)
(23,wchar_t *)
(24,data == NULL)
(25,RET)
(26,100)
(27,data)
(28,data)
(29, sizeof(wchar_t)
(30,)
(31,NULL)
(32,)
(33,calloc(100, sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
