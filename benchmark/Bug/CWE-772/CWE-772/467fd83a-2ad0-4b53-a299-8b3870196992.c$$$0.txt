-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_01_bad()
{
    {
        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            wcscpy(data, L"New String");
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
7,8
8,9
8,10
10,11
10,12
10,13
13,14
14,15
14,16
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
24,25
25,26
25,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
63,66
64,65
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
81,84
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,9,11,12,16,18,21,23,26,27,31,33,38,40,44,46,47,51,53,57,60,62,65,67,70,73,74,78,80,85,87,88,92,94,98,100
-----computeFrom-----
22,23
22,24
29,30
29,31
55,56
55,57
68,69
68,70
76,77
76,78
-----guardedBy-----
78,100
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_01_bad(){    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_01_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_01_bad
{    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }}
{        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(12,24,0)
(25,29,0)
(38,36,0)
(17,11,0)
(11,4,0)
(41,1,0)
(2,29,0)
(40,16,0)
(6,13,0)
(7,1,0)
(18,2,0)
(23,26,0)
(1,35,0)
(9,35,0)
(3,16,0)
(0,12,0)
(2,18,0)
(39,36,0)
(29,6,0)
(26,11,0)
(20,3,0)
(24,12,0)
(28,41,0)
(27,40,0)
(4,11,0)
(19,2,0)
(29,26,0)
(32,41,0)
(10,21,0)
(40,1,0)
(5,31,0)
(35,15,0)
(26,35,0)
(11,17,0)
(37,18,0)
(33,35,0)
(13,6,0)
(10,31,0)
(31,10,0)
(29,2,0)
(1,6,0)
(3,1,0)
(6,29,0)
(11,26,0)
(22,35,0)
(6,1,0)
(36,26,0)
(14,23,0)
(23,35,0)
(30,26,0)
(12,4,0)
(34,24,0)
(4,12,0)
(38,39,1)
(6,29,1)
(6,13,1)
(11,17,1)
(11,4,1)
(29,26,1)
(2,18,1)
(27,41,1)
(36,38,1)
(10,31,1)
(24,34,1)
(40,27,1)
(36,26,1)
(8,3,1)
(4,12,1)
(14,10,1)
(1,6,1)
(25,7,1)
(19,25,1)
(29,2,1)
(32,1,1)
(41,1,1)
(20,40,1)
(7,23,1)
(3,1,1)
(23,26,1)
(37,19,1)
(0,30,1)
(5,36,1)
(41,28,1)
(12,24,1)
(28,32,1)
(40,1,1)
(26,11,1)
(39,26,1)
(23,14,1)
(34,0,1)
(14,36,1)
(18,37,1)
(8,41,1)
(3,20,1)
(31,5,1)
(6,29,2)
(23,26,2)
(36,26,2)
(41,1,2)
(27,41,2)
(11,17,2)
(3,41,2)
(20,41,2)
(5,36,2)
(3,1,2)
(40,41,2)
(29,26,2)
(40,1,2)
(11,4,2)
(31,36,2)
(1,6,2)
(26,11,2)
(2,18,2)
(12,24,2)
(4,12,2)
(6,13,2)
(10,31,2)
(10,36,2)
(29,2,2)
-----------------------------------
(0,100)
(1,data = (wchar_t *)
(2,(130000)
(3,free(data)
(4,malloc(100*sizeof(wchar_t)
(5,1)
(6,(wchar_t *)
(7,data)
(8,RET)
(9,if (data == NULL)
(10,exit(-1)
(11,(wchar_t *)
(12,100*sizeof(wchar_t)
(13,wchar_t *)
(14,data)
(15,)
(16,)
(17,wchar_t *)
(18,sizeof(wchar_t)
(19,130000)
(20,data)
(21,)
(22,data)
(23,printWLine(data)
(24,sizeof(wchar_t)
(25,data)
(26,* data = (wchar_t *)
(27,data)
(28,NULL)
(29,realloc(data, (130000)
(30,data)
(31,-1)
(32,data)
(33,if (data != NULL)
(34,wchar_t)
(35,)
(36,data == NULL)
(37,wchar_t)
(38,NULL)
(39,data)
(40,printWLine(data)
(41,data != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
