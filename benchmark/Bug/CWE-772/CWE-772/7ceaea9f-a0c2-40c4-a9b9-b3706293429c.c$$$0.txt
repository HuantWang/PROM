-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_14_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
95,96
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,94,96
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_14_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_14_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_14_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(4,36,0)
(45,35,0)
(42,18,0)
(28,40,0)
(12,52,0)
(0,39,0)
(14,42,0)
(29,49,0)
(24,42,0)
(15,19,0)
(49,18,0)
(39,2,0)
(20,39,0)
(32,18,0)
(18,43,0)
(2,23,0)
(2,39,0)
(21,34,0)
(22,43,0)
(8,2,0)
(7,25,0)
(25,34,0)
(44,26,0)
(45,18,0)
(14,38,0)
(36,44,0)
(39,18,0)
(1,49,0)
(23,43,0)
(44,36,0)
(35,45,0)
(47,42,0)
(27,34,0)
(10,43,0)
(9,34,0)
(38,11,0)
(50,5,0)
(40,17,0)
(11,38,0)
(22,38,0)
(5,48,0)
(3,23,0)
(17,10,0)
(33,52,0)
(50,45,0)
(6,50,0)
(30,25,0)
(46,43,0)
(45,50,0)
(42,14,0)
(13,19,0)
(5,50,0)
(48,5,0)
(51,40,0)
(16,17,0)
(40,18,0)
(38,22,0)
(41,10,0)
(17,40,0)
(18,45,0)
(38,14,0)
(51,49,1)
(25,7,1)
(17,16,1)
(32,52,1)
(44,36,1)
(40,18,1)
(8,39,1)
(13,15,1)
(42,18,1)
(17,40,1)
(52,33,1)
(37,19,1)
(24,47,1)
(28,51,1)
(38,11,1)
(38,14,1)
(0,20,1)
(49,18,1)
(5,48,1)
(40,28,1)
(18,45,1)
(15,22,1)
(22,38,1)
(29,18,1)
(2,8,1)
(14,42,1)
(36,4,1)
(49,1,1)
(39,0,1)
(15,52,1)
(10,41,1)
(50,5,1)
(4,49,1)
(33,12,1)
(5,6,1)
(20,10,1)
(19,13,1)
(16,40,1)
(42,24,1)
(7,30,1)
(39,18,1)
(51,44,1)
(1,29,1)
(45,50,1)
(3,2,1)
(12,25,1)
(45,35,1)
(6,32,1)
(47,23,1)
(41,17,1)
(2,39,1)
(23,3,1)
(20,52,2)
(10,52,2)
(17,40,2)
(14,52,2)
(0,52,2)
(39,18,2)
(38,11,2)
(40,52,2)
(51,52,2)
(24,52,2)
(22,38,2)
(4,49,2)
(41,52,2)
(45,35,2)
(17,52,2)
(32,52,2)
(1,52,2)
(22,52,2)
(3,52,2)
(45,52,2)
(8,52,2)
(18,52,2)
(29,52,2)
(2,52,2)
(28,52,2)
(50,52,2)
(44,49,2)
(16,52,2)
(23,52,2)
(49,18,2)
(18,45,2)
(5,52,2)
(5,48,2)
(42,52,2)
(42,18,2)
(2,39,2)
(36,49,2)
(14,42,2)
(49,52,2)
(39,52,2)
(47,52,2)
(38,14,2)
(40,18,2)
(6,52,2)
(50,5,2)
(45,50,2)
(44,36,2)
(38,52,2)
-----------------------------------
(0,0)
(1,NULL)
(2,data[0].intTwo)
(3,0)
(4,1)
(5,sizeof(struct _twoIntsStruct)
(6,100)
(7,NULL)
(8,intTwo)
(9,if(globalFive==5)
(10,data[0].intOne = 0)
(11,twoIntsStruct *)
(12,globalFive)
(13,5)
(14,&data[0])
(15,globalFive)
(16,intOne)
(17,data[0].intOne)
(18,data = (struct _twoIntsStruct *)
(19,globalFive==5)
(20,data)
(21,if(globalFive==5)
(22,printStructLine((twoIntsStruct *)
(23,data[0].intTwo = 0)
(24,0)
(25,data = NULL)
(26,)
(27,data)
(28,0)
(29,data)
(30,data)
(31, sizeof(struct _twoIntsStruct)
(32,data)
(33,5)
(34,)
(35,struct _twoIntsStruct *)
(36,-1)
(37,RET)
(38,(twoIntsStruct *)
(39,data[0])
(40,data[0])
(41,0)
(42,data[0])
(43,)
(44,exit(-1)
(45,(struct _twoIntsStruct *)
(46,if (data == NULL)
(47,data)
(48,struct _twoIntsStruct)
(49,data == NULL)
(50,calloc(100, sizeof(struct _twoIntsStruct)
(51,data)
(52,globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
