-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
74,75
74,76
76,77
76,78
76,79
76,80
76,81
76,82
77,78
82,83
83,84
83,85
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,66,67,71,72,73,75,78,79,80,81,85,86,87
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__char_calloc_15_bad()
CWE401_Memory_Leak__char_calloc_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(24,29,0)
(5,8,0)
(39,26,0)
(2,1,0)
(16,36,0)
(19,26,0)
(12,1,0)
(44,42,0)
(26,39,0)
(7,42,0)
(17,42,0)
(29,36,0)
(0,36,0)
(20,7,0)
(38,9,0)
(38,33,0)
(8,42,0)
(21,1,0)
(33,38,0)
(14,17,0)
(6,36,0)
(17,39,0)
(32,30,0)
(31,28,0)
(42,17,0)
(11,7,0)
(22,8,0)
(17,14,0)
(28,27,0)
(10,33,0)
(23,27,0)
(35,39,0)
(45,36,0)
(39,17,0)
(4,41,0)
(41,1,0)
(42,36,0)
(40,27,0)
(15,27,0)
(18,28,0)
(30,42,0)
(37,36,0)
(34,1,0)
(7,36,0)
(30,36,0)
(11,20,1)
(42,17,1)
(24,25,1)
(8,42,1)
(17,39,1)
(35,44,1)
(44,25,1)
(29,24,1)
(3,45,1)
(7,42,1)
(32,7,1)
(26,19,1)
(10,8,1)
(4,3,1)
(20,38,1)
(30,42,1)
(31,18,1)
(22,42,1)
(38,33,1)
(45,29,1)
(41,4,1)
(43,2,1)
(33,10,1)
(30,32,1)
(5,22,1)
(7,11,1)
(3,16,1)
(20,8,1)
(28,31,1)
(34,41,1)
(19,35,1)
(39,26,1)
(8,5,1)
(25,28,1)
(2,3,1)
(17,14,1)
(43,34,1)
(16,30,1)
(30,42,2)
(32,25,2)
(22,25,2)
(17,14,2)
(41,3,2)
(24,25,2)
(17,39,2)
(44,25,2)
(38,8,2)
(10,8,2)
(2,3,2)
(20,25,2)
(5,25,2)
(30,25,2)
(19,25,2)
(26,25,2)
(35,25,2)
(16,25,2)
(39,26,2)
(7,42,2)
(17,25,2)
(38,33,2)
(34,3,2)
(7,25,2)
(42,17,2)
(39,25,2)
(33,8,2)
(8,42,2)
(4,3,2)
(29,25,2)
(11,25,2)
(8,25,2)
(42,25,2)
(45,25,2)
-----------------------------------
(0,if (data == NULL)
(1,)
(2,break;)
(3,7)
(4,"Benign, fixed string")
(5,NULL)
(6,default:)
(7,strcpy(data, "A String")
(8,data == NULL)
(9,)
(10,1)
(11,"A String")
(12,default:)
(13, sizeof(char)
(14,char *)
(15,data)
(16,break;)
(17,(char *)
(18,data)
(19,char)
(20,data)
(21,case 7:)
(22,data)
(23,switch(7)
(24,"Benign, fixed string")
(25,6)
(26,sizeof(char)
(27,)
(28,data = NULL)
(29,printLine("Benign, fixed string")
(30,printLine(data)
(31,NULL)
(32,data)
(33,-1)
(34,break;)
(35,100)
(36,)
(37,case 6:)
(38,exit(-1)
(39,calloc(100, sizeof(char)
(40,switch(6)
(41,printLine("Benign, fixed string")
(42,data = (char *)
(43,RET)
(44,data)
(45,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
