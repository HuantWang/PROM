-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_09_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,87,89
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_09_bad(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_09_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_09_bad
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(38,17,0)
(44,5,0)
(26,47,0)
(19,9,0)
(27,8,0)
(11,35,0)
(27,16,0)
(8,27,0)
(47,32,0)
(17,18,0)
(9,0,0)
(2,18,0)
(31,8,0)
(7,38,0)
(12,31,0)
(30,9,0)
(0,9,0)
(24,35,0)
(9,18,0)
(0,37,0)
(36,31,0)
(31,18,0)
(28,16,0)
(32,47,0)
(3,28,0)
(41,17,0)
(45,13,0)
(39,38,0)
(25,35,0)
(17,38,0)
(5,7,0)
(33,7,0)
(23,28,0)
(42,16,0)
(7,5,0)
(14,13,0)
(38,25,0)
(15,2,0)
(43,18,0)
(4,3,0)
(18,16,0)
(18,17,0)
(13,3,0)
(46,25,0)
(22,0,0)
(38,7,0)
(10,37,0)
(17,41,0)
(1,25,0)
(13,18,0)
(8,31,0)
(21,35,0)
(3,13,0)
(37,16,0)
(40,2,0)
(32,29,0)
(19,30,1)
(0,9,1)
(38,25,1)
(43,34,1)
(6,27,1)
(27,8,1)
(36,28,1)
(25,46,1)
(44,33,1)
(37,10,1)
(4,13,1)
(14,45,1)
(22,9,1)
(39,43,1)
(23,3,1)
(46,1,1)
(7,5,1)
(33,39,1)
(47,26,1)
(20,6,1)
(9,19,1)
(2,15,1)
(13,14,1)
(2,18,1)
(13,18,1)
(31,18,1)
(3,13,1)
(0,22,1)
(17,41,1)
(10,0,1)
(26,2,1)
(12,36,1)
(38,7,1)
(30,32,1)
(17,38,1)
(6,34,1)
(32,47,1)
(40,18,1)
(18,17,1)
(28,23,1)
(3,4,1)
(45,37,1)
(15,40,1)
(30,2,1)
(34,25,1)
(5,44,1)
(8,31,1)
(9,18,1)
(31,12,1)
(12,34,2)
(8,31,2)
(36,34,2)
(18,17,2)
(33,34,2)
(43,34,2)
(4,34,2)
(0,34,2)
(37,34,2)
(38,25,2)
(17,38,2)
(44,34,2)
(15,34,2)
(38,34,2)
(10,34,2)
(32,47,2)
(27,34,2)
(3,34,2)
(2,18,2)
(5,34,2)
(40,34,2)
(17,41,2)
(7,34,2)
(47,2,2)
(18,34,2)
(22,34,2)
(26,2,2)
(30,34,2)
(39,34,2)
(3,13,2)
(28,34,2)
(27,8,2)
(31,34,2)
(31,18,2)
(14,34,2)
(13,34,2)
(45,34,2)
(38,7,2)
(13,18,2)
(32,2,2)
(19,34,2)
(9,18,2)
(8,34,2)
(9,34,2)
(23,34,2)
(17,34,2)
(0,9,2)
(2,34,2)
(7,5,2)
-----------------------------------
(0,data[0].intOne)
(1,data)
(2,data == NULL)
(3,data[0].intTwo)
(4,intTwo)
(5,sizeof(twoIntsStruct)
(6,GLOBAL_CONST_TRUE)
(7,100*sizeof(twoIntsStruct)
(8,&data[0])
(9,data[0])
(10,0)
(11,if(GLOBAL_CONST_TRUE)
(12,0)
(13,data[0])
(14,0)
(15,NULL)
(16,)
(17,(twoIntsStruct *)
(18,data = (twoIntsStruct *)
(19,0)
(20,RET)
(21,data)
(22,intOne)
(23,0)
(24,if(GLOBAL_CONST_TRUE)
(25,data = NULL)
(26,1)
(27,printStructLine(&data[0])
(28,data[0].intTwo = 0)
(29,)
(30,data)
(31,data[0])
(32,exit(-1)
(33,100)
(34,GLOBAL_CONST_TRUE)
(35,)
(36,data)
(37,data[0].intOne = 0)
(38,realloc(data, 100*sizeof(twoIntsStruct)
(39,data)
(40,data)
(41,twoIntsStruct *)
(42,if (data == NULL)
(43,data)
(44,twoIntsStruct)
(45,data)
(46,NULL)
(47,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
