-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
82,84
84,85
85,86
85,87
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
101,103
101,104
102,103
103,104
105,106
107,108
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,73,76,78,81,83,86,87,91,93,94,98,100,104,106,111,113
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
71,72
71,73
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__wchar_t_realloc_12_bad()
CWE401_Memory_Leak__wchar_t_realloc_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(1,6,0)
(14,32,0)
(13,34,0)
(38,32,0)
(12,43,0)
(0,9,0)
(32,14,0)
(11,44,0)
(15,34,0)
(37,38,0)
(43,18,0)
(42,2,0)
(9,34,0)
(4,6,0)
(14,17,0)
(8,3,0)
(41,29,0)
(21,44,0)
(43,32,0)
(19,38,0)
(13,14,0)
(3,8,0)
(7,42,0)
(32,18,0)
(45,20,0)
(16,35,0)
(28,2,0)
(8,29,0)
(31,13,0)
(13,6,0)
(10,22,0)
(27,29,0)
(6,44,0)
(14,13,0)
(42,33,0)
(33,42,0)
(29,39,0)
(16,20,0)
(2,42,0)
(22,40,0)
(22,32,0)
(26,41,0)
(17,14,0)
(20,16,0)
(33,8,0)
(23,18,0)
(41,39,0)
(5,44,0)
(29,8,0)
(36,32,0)
(34,9,0)
(8,33,0)
(34,13,0)
(22,29,0)
(13,6,1)
(7,27,1)
(45,38,1)
(37,32,1)
(22,32,1)
(8,33,1)
(24,41,1)
(2,28,1)
(26,29,1)
(16,20,1)
(29,8,1)
(4,1,1)
(34,9,1)
(38,19,1)
(25,6,1)
(15,31,1)
(22,10,1)
(30,24,1)
(38,32,1)
(28,7,1)
(43,12,1)
(41,29,1)
(13,34,1)
(24,43,1)
(31,36,1)
(22,29,1)
(32,14,1)
(27,25,1)
(19,37,1)
(0,15,1)
(12,16,1)
(14,17,1)
(12,38,1)
(8,3,1)
(20,45,1)
(42,2,1)
(6,4,1)
(10,24,1)
(33,42,1)
(36,25,1)
(9,0,1)
(41,26,1)
(43,32,1)
(30,22,1)
(14,13,1)
(7,25,2)
(28,25,2)
(14,25,2)
(8,33,2)
(13,34,2)
(27,25,2)
(22,32,2)
(0,25,2)
(15,25,2)
(33,42,2)
(43,32,2)
(9,25,2)
(37,25,2)
(14,13,2)
(33,25,2)
(8,3,2)
(22,29,2)
(32,14,2)
(13,6,2)
(19,25,2)
(34,9,2)
(10,24,2)
(26,25,2)
(16,20,2)
(38,32,2)
(12,25,2)
(42,25,2)
(8,25,2)
(41,25,2)
(13,25,2)
(36,25,2)
(20,38,2)
(32,25,2)
(45,38,2)
(16,38,2)
(29,8,2)
(22,24,2)
(2,25,2)
(41,29,2)
(14,17,2)
(43,25,2)
(29,25,2)
(34,25,2)
(31,25,2)
(42,2,2)
(38,25,2)
-----------------------------------
(0,wchar_t)
(1,data)
(2,sizeof(wchar_t)
(3,wchar_t *)
(4,NULL)
(5,if(globalReturnsTrueOrFalse()
(6,data = NULL)
(7,100)
(8,(wchar_t *)
(9,sizeof(wchar_t)
(10,data)
(11,if(globalReturnsTrueOrFalse()
(12,data)
(13,realloc(data, 100*sizeof(wchar_t)
(14,(wchar_t *)
(15,100)
(16,exit(-1)
(17,wchar_t *)
(18,)
(19,NULL)
(20,-1)
(21,data)
(22,free(data)
(23,if (data == NULL)
(24,globalReturnsTrueOrFalse()
(25,globalReturnsTrueOrFalse()
(26,data)
(27,data)
(28,wchar_t)
(29,data = (wchar_t *)
(30,RET)
(31,data)
(32,data = (wchar_t *)
(33,ALLOCA(100*sizeof(wchar_t)
(34,100*sizeof(wchar_t)
(35,)
(36,data)
(37,data)
(38,data == NULL)
(39,)
(40,)
(41,printWLine(data)
(42,100*sizeof(wchar_t)
(43,printWLine(data)
(44,)
(45,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
