-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_14_bad()
{
    if(globalFive==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
69,70
71,72
71,73
71,74
72,73
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
89,91
89,92
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,51,52,53,57,60,61,65,68,70,73,75,78,81,82,86,88,94,95,96,100,103,104,108,110
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
48,49
48,50
63,64
63,65
76,77
76,78
84,85
84,86
91,92
91,93
-----guardedBy-----
86,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_14_bad(){    if(globalFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_14_bad()
CWE401_Memory_Leak__malloc_realloc_int_14_bad
{    if(globalFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(globalFive==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(13,30,0)
(55,57,0)
(49,45,0)
(42,25,0)
(26,25,0)
(52,43,0)
(18,16,0)
(18,50,0)
(3,55,0)
(7,10,0)
(44,49,0)
(41,31,0)
(10,57,0)
(59,22,0)
(4,52,0)
(39,57,0)
(60,58,0)
(54,9,0)
(43,53,0)
(35,55,0)
(52,4,0)
(28,49,0)
(0,49,0)
(19,54,0)
(11,8,0)
(8,54,0)
(24,14,0)
(25,0,0)
(40,31,0)
(25,13,0)
(37,53,0)
(57,49,0)
(57,52,0)
(9,54,0)
(54,49,0)
(34,16,0)
(36,54,0)
(12,36,0)
(36,13,0)
(39,0,0)
(6,10,0)
(33,1,0)
(48,8,0)
(29,49,0)
(2,0,0)
(21,49,0)
(50,18,0)
(9,50,0)
(20,30,0)
(27,13,0)
(32,57,0)
(16,18,0)
(58,53,0)
(10,0,0)
(25,54,0)
(52,57,0)
(15,54,0)
(29,10,0)
(53,58,0)
(17,39,0)
(19,30,0)
(56,39,0)
(10,29,0)
(38,50,0)
(50,57,0)
(46,9,0)
(51,19,0)
(53,43,0)
(50,9,0)
(22,24,0)
(5,36,0)
(9,46,0)
(23,18,0)
(43,52,0)
(20,25,0)
(24,22,0)
(25,20,0)
(52,43,1)
(35,3,1)
(12,8,1)
(18,16,1)
(19,54,1)
(60,37,1)
(17,55,1)
(17,24,1)
(57,52,1)
(56,17,1)
(16,34,1)
(38,15,1)
(48,54,1)
(8,54,1)
(24,22,1)
(36,54,1)
(47,31,1)
(55,57,1)
(10,6,1)
(32,31,1)
(9,46,1)
(59,55,1)
(8,11,1)
(20,25,1)
(19,51,1)
(29,10,1)
(43,53,1)
(53,58,1)
(10,57,1)
(25,13,1)
(2,39,1)
(5,12,1)
(42,13,1)
(23,38,1)
(25,26,1)
(25,0,1)
(47,19,1)
(51,20,1)
(10,0,1)
(27,36,1)
(31,40,1)
(9,50,1)
(37,32,1)
(11,48,1)
(7,0,1)
(50,57,1)
(52,4,1)
(50,18,1)
(55,35,1)
(36,5,1)
(6,7,1)
(47,8,1)
(34,23,1)
(0,2,1)
(25,54,1)
(54,9,1)
(39,57,1)
(22,59,1)
(26,42,1)
(15,29,1)
(40,41,1)
(13,27,1)
(3,57,1)
(39,56,1)
(58,60,1)
(18,31,2)
(60,31,2)
(57,52,2)
(3,31,2)
(23,31,2)
(22,55,2)
(55,31,2)
(53,31,2)
(26,8,2)
(20,25,2)
(36,54,2)
(10,0,2)
(55,57,2)
(8,54,2)
(56,31,2)
(35,31,2)
(52,43,2)
(16,31,2)
(25,13,2)
(25,8,2)
(52,4,2)
(7,31,2)
(43,31,2)
(11,31,2)
(37,31,2)
(39,57,2)
(39,31,2)
(8,31,2)
(50,57,2)
(54,31,2)
(13,8,2)
(24,22,2)
(29,31,2)
(50,18,2)
(18,16,2)
(0,31,2)
(51,8,2)
(19,8,2)
(10,57,2)
(12,8,2)
(5,8,2)
(9,31,2)
(20,8,2)
(10,31,2)
(50,31,2)
(9,46,2)
(34,31,2)
(9,50,2)
(27,8,2)
(15,31,2)
(19,54,2)
(54,9,2)
(36,8,2)
(43,53,2)
(52,31,2)
(59,55,2)
(6,31,2)
(48,31,2)
(2,31,2)
(32,31,2)
(57,31,2)
(38,31,2)
(25,54,2)
(24,55,2)
(42,8,2)
(53,58,2)
(25,0,2)
(17,31,2)
(58,31,2)
(29,10,2)
-----------------------------------
(0,data[0] = 5)
(1,)
(2,5)
(3,data)
(4,int *)
(5,0)
(6,0)
(7,data)
(8,data != NULL)
(9,(int *)
(10,data[0])
(11,NULL)
(12,data)
(13,data[0] = 10)
(14,)
(15,data)
(16,sizeof(int)
(17,data)
(18,(130000)
(19,free(data)
(20,printIntLine(data[0])
(21,if (data == NULL)
(22,-1)
(23,130000)
(24,exit(-1)
(25,data[0])
(26,0)
(27,10)
(28,if (data != NULL)
(29,printIntLine(data[0])
(30,)
(31,globalFive==5)
(32,data)
(33,if(globalFive==5)
(34,int)
(35,NULL)
(36,data[0])
(37,100)
(38,data)
(39,data[0])
(40,5)
(41,globalFive)
(42,data)
(43,malloc(100*sizeof(int)
(44,data)
(45,)
(46,int *)
(47,RET)
(48,data)
(49,)
(50,realloc(data, (130000)
(51,data)
(52,(int *)
(53,100*sizeof(int)
(54,data = (int *)
(55,data == NULL)
(56,0)
(57,* data = (int *)
(58,sizeof(int)
(59,1)
(60,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
