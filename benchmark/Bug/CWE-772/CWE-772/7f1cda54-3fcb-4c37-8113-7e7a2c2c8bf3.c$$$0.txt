-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_02_bad()
{
    int64_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
70,72
72,73
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,59,60,61,65,68,69,71,73
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_02_bad(){    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_02_bad()
CWE401_Memory_Leak__int64_t_malloc_02_bad
{    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(20,11,0)
(22,29,0)
(23,11,0)
(7,32,0)
(30,16,0)
(25,8,0)
(8,25,0)
(16,30,0)
(8,17,0)
(24,4,0)
(15,1,0)
(26,31,0)
(29,22,0)
(2,32,0)
(12,22,0)
(16,3,0)
(13,4,0)
(31,8,0)
(5,10,0)
(32,7,0)
(19,30,0)
(28,1,0)
(10,31,0)
(14,29,0)
(8,31,0)
(31,1,0)
(11,4,0)
(32,31,0)
(9,4,0)
(29,25,0)
(18,10,0)
(21,32,0)
(7,1,0)
(17,8,0)
(25,29,0)
(0,6,1)
(30,19,1)
(6,27,1)
(32,31,1)
(19,10,1)
(11,23,1)
(7,32,1)
(18,5,1)
(29,22,1)
(27,11,1)
(32,21,1)
(10,31,1)
(8,25,1)
(21,2,1)
(16,30,1)
(22,12,1)
(10,18,1)
(12,14,1)
(14,26,1)
(25,29,1)
(26,27,1)
(23,20,1)
(28,16,1)
(5,31,1)
(31,8,1)
(8,17,1)
(28,10,1)
(6,7,1)
(2,28,1)
(21,27,2)
(22,27,2)
(8,27,2)
(7,32,2)
(12,27,2)
(32,31,2)
(10,31,2)
(28,27,2)
(16,10,2)
(25,27,2)
(16,30,2)
(8,25,2)
(30,10,2)
(10,27,2)
(32,27,2)
(25,29,2)
(19,10,2)
(29,22,2)
(8,17,2)
(26,27,2)
(2,27,2)
(14,27,2)
(31,27,2)
(31,8,2)
(18,27,2)
(5,27,2)
(29,27,2)
(7,27,2)
-----------------------------------
(0,RET)
(1,)
(2,data)
(3,)
(4,)
(5,data)
(6,1)
(7,printLongLongLine(data[0])
(8,(int64_t *)
(9,if(1)
(10,data == NULL)
(11,data = NULL)
(12,int64_t)
(13,data)
(14,100)
(15,if (data == NULL)
(16,exit(-1)
(17,int64_t *)
(18,NULL)
(19,1)
(20,data)
(21,0)
(22,sizeof(int64_t)
(23,NULL)
(24,if(1)
(25,malloc(100*sizeof(int64_t)
(26,data)
(27,1)
(28,L)
(29,100*sizeof(int64_t)
(30,-1)
(31,data = (int64_t *)
(32,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
