-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_05_bad()
{
    char * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,67,69
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_05_bad(){    char * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_05_bad()
CWE401_Memory_Leak__char_calloc_05_bad
{    char * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(6,2,0)
(9,14,0)
(11,2,0)
(4,28,0)
(31,2,0)
(2,17,0)
(32,28,0)
(20,27,0)
(14,2,0)
(0,12,0)
(23,12,0)
(3,26,0)
(14,17,0)
(21,14,0)
(6,17,0)
(2,19,0)
(27,20,0)
(15,31,0)
(19,29,0)
(19,13,0)
(29,19,0)
(27,8,0)
(25,6,0)
(16,17,0)
(13,26,0)
(13,19,0)
(24,13,0)
(19,2,0)
(18,20,0)
(26,13,0)
(1,31,0)
(28,12,0)
(5,12,0)
(4,32,1)
(15,2,1)
(6,25,1)
(28,4,1)
(26,3,1)
(21,27,1)
(2,19,1)
(20,18,1)
(27,20,1)
(30,6,1)
(14,2,1)
(6,2,1)
(19,13,1)
(18,31,1)
(31,2,1)
(1,15,1)
(14,9,1)
(30,7,1)
(22,30,1)
(31,1,1)
(11,7,1)
(25,14,1)
(3,24,1)
(24,11,1)
(19,29,1)
(21,31,1)
(7,28,1)
(9,21,1)
(13,26,1)
(19,29,2)
(25,7,2)
(2,7,2)
(14,2,2)
(20,31,2)
(31,7,2)
(11,7,2)
(18,31,2)
(19,7,2)
(2,19,2)
(26,7,2)
(3,7,2)
(13,7,2)
(24,7,2)
(19,13,2)
(27,31,2)
(21,7,2)
(31,2,2)
(6,7,2)
(9,7,2)
(15,7,2)
(13,26,2)
(27,20,2)
(1,7,2)
(14,7,2)
(6,2,2)
-----------------------------------
(0,if(staticTrue)
(1,NULL)
(2,data = (char *)
(3,char)
(4,NULL)
(5,if(staticTrue)
(6,printLine(data)
(7,staticTrue)
(8,)
(9,"A String")
(10, sizeof(char)
(11,data)
(12,)
(13,calloc(100, sizeof(char)
(14,strcpy(data, "A String")
(15,data)
(16,if (data == NULL)
(17,)
(18,1)
(19,(char *)
(20,-1)
(21,data)
(22,RET)
(23,data)
(24,100)
(25,data)
(26,sizeof(char)
(27,exit(-1)
(28,data = NULL)
(29,char *)
(30,staticTrue)
(31,data == NULL)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
