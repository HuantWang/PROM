-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_15_bad()
{
    switch(6)
    {
    case 6:
    {
        struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            data[0].intOne = 1;
            data[0].intTwo = 1;
            printStructLine((twoIntsStruct *)&data[0]);
            free(data);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
29,31
31,32
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
52,54
53,54
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
92,94
92,95
93,94
95,96
97,98
97,99
98,99
100,101
101,102
101,103
102,103
105,106
105,107
106,107
106,108
107,108
109,110
111,112
111,113
111,114
111,115
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
121,122
122,123
122,124
123,124
123,125
124,125
124,126
125,126
130,131
131,132
131,133
132,133
134,135
134,136
135,136
135,137
136,137
138,139
140,141
141,142
141,143
142,143
145,146
146,147
146,148
147,148
149,150
153,154
154,155
154,156
155,156
-----nextToken-----
2,4,7,10,15,17,18,23,25,28,30,34,35,39,41,46,48,54,55,56,57,63,64,65,66,70,74,76,80,81,85,89,91,94,96,99,103,104,108,110,117,118,119,120,126,127,128,129,133,137,139,143,144,148,150,151,152,156,157,158
-----computeFrom-----
29,30
29,31
37,38
37,39
50,51
50,52
59,60
59,61
83,84
83,85
97,98
97,99
106,107
106,108
113,114
113,115
122,123
122,124
-----guardedBy-----
108,150
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_15_bad(){    switch(6)    {    case 6:    {        struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine((twoIntsStruct *)&data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_15_bad()
CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_15_bad
{    switch(6)    {    case 6:    {        struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine((twoIntsStruct *)&data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine((twoIntsStruct *)&data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine((twoIntsStruct *)&data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine((twoIntsStruct *)&data[0]);            free(data);        }    }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine((twoIntsStruct *)&data[0]);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine((twoIntsStruct *)&data[0]);            free(data);        }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(51,34,0)
(88,81,0)
(19,52,0)
(63,22,0)
(77,36,0)
(2,50,0)
(58,65,0)
(57,36,0)
(32,2,0)
(84,34,0)
(73,86,0)
(43,65,0)
(3,58,0)
(70,20,0)
(33,65,0)
(59,80,0)
(75,73,0)
(4,84,0)
(8,20,0)
(67,63,0)
(60,29,0)
(77,50,0)
(49,58,0)
(22,68,0)
(68,36,0)
(63,58,0)
(62,66,0)
(47,26,0)
(61,6,0)
(76,57,0)
(81,87,0)
(10,72,0)
(20,8,0)
(13,65,0)
(25,53,0)
(74,16,0)
(80,58,0)
(53,36,0)
(27,8,0)
(2,32,0)
(12,68,0)
(46,30,0)
(7,73,0)
(22,42,0)
(16,54,0)
(50,77,0)
(69,58,0)
(36,66,0)
(73,75,0)
(5,87,0)
(42,22,0)
(22,63,0)
(73,7,0)
(34,63,0)
(68,8,0)
(26,60,0)
(30,39,0)
(78,54,0)
(11,63,0)
(75,67,0)
(67,75,0)
(86,73,0)
(39,30,0)
(40,58,0)
(55,65,0)
(21,11,0)
(59,57,0)
(17,65,0)
(87,63,0)
(54,16,0)
(62,54,0)
(9,67,0)
(23,80,0)
(2,40,0)
(24,77,0)
(86,35,0)
(41,77,0)
(20,70,0)
(36,58,0)
(15,39,0)
(18,67,0)
(82,34,0)
(84,72,0)
(50,2,0)
(37,63,0)
(81,52,0)
(11,35,0)
(66,62,0)
(8,68,0)
(85,57,0)
(68,22,0)
(48,39,0)
(14,53,0)
(16,74,0)
(45,87,0)
(30,69,0)
(87,81,0)
(52,35,0)
(54,62,0)
(64,6,0)
(60,26,0)
(72,35,0)
(40,2,0)
(57,59,0)
(71,38,0)
(28,17,0)
(79,69,0)
(39,36,0)
(1,59,0)
(66,36,0)
(66,31,0)
(0,36,0)
(31,66,0)
(6,63,0)
(34,84,0)
(83,58,0)
(84,34,1)
(16,74,1)
(20,70,1)
(14,25,1)
(11,21,1)
(81,87,1)
(68,8,1)
(23,59,1)
(77,36,1)
(67,18,1)
(16,78,1)
(59,57,1)
(46,39,1)
(47,53,1)
(34,82,1)
(53,14,1)
(36,66,1)
(69,79,1)
(78,0,1)
(15,80,1)
(11,63,1)
(8,20,1)
(63,22,1)
(39,36,1)
(67,63,1)
(50,77,1)
(76,53,1)
(12,37,1)
(79,30,1)
(52,19,1)
(73,7,1)
(64,61,1)
(20,27,1)
(85,76,1)
(17,28,1)
(43,17,1)
(27,12,1)
(22,68,1)
(26,47,1)
(22,42,1)
(88,87,1)
(30,39,1)
(60,26,1)
(57,85,1)
(39,48,1)
(73,75,1)
(66,31,1)
(18,9,1)
(77,24,1)
(54,16,1)
(72,10,1)
(56,13,1)
(48,15,1)
(59,1,1)
(6,64,1)
(53,36,1)
(87,5,1)
(1,57,1)
(30,46,1)
(80,23,1)
(76,60,1)
(87,63,1)
(61,63,1)
(24,41,1)
(82,51,1)
(68,36,1)
(10,84,1)
(84,4,1)
(75,67,1)
(51,6,1)
(6,63,1)
(2,32,1)
(41,69,1)
(34,63,1)
(19,81,1)
(62,54,1)
(45,72,1)
(2,50,1)
(66,62,1)
(9,52,1)
(40,2,1)
(0,44,1)
(25,36,1)
(57,36,1)
(81,88,1)
(13,11,1)
(21,86,1)
(4,34,1)
(28,44,1)
(13,6,1)
(37,40,1)
(86,73,1)
(5,45,1)
(56,43,1)
(16,74,2)
(43,44,2)
(59,44,2)
(54,16,2)
(52,6,2)
(6,44,2)
(84,34,2)
(62,44,2)
(51,6,2)
(17,44,2)
(81,87,2)
(8,44,2)
(61,44,2)
(57,44,2)
(34,6,2)
(88,6,2)
(8,20,2)
(86,6,2)
(36,66,2)
(45,6,2)
(41,44,2)
(40,44,2)
(39,44,2)
(66,31,2)
(4,6,2)
(10,6,2)
(57,36,2)
(9,6,2)
(68,36,2)
(62,54,2)
(22,44,2)
(12,44,2)
(28,44,2)
(78,44,2)
(20,70,2)
(66,44,2)
(36,44,2)
(54,44,2)
(79,44,2)
(63,44,2)
(73,7,2)
(81,6,2)
(11,63,2)
(80,44,2)
(14,44,2)
(18,6,2)
(63,22,2)
(53,44,2)
(46,44,2)
(86,73,2)
(67,63,2)
(0,44,2)
(73,6,2)
(11,6,2)
(75,67,2)
(73,75,2)
(66,62,2)
(64,44,2)
(59,57,2)
(75,6,2)
(20,44,2)
(13,44,2)
(23,44,2)
(82,6,2)
(67,6,2)
(26,53,2)
(84,6,2)
(77,44,2)
(16,44,2)
(85,44,2)
(24,44,2)
(6,63,2)
(60,26,2)
(2,50,2)
(27,44,2)
(34,63,2)
(87,6,2)
(15,44,2)
(2,32,2)
(30,39,2)
(22,42,2)
(68,44,2)
(25,44,2)
(77,36,2)
(2,44,2)
(21,6,2)
(22,68,2)
(5,6,2)
(19,6,2)
(1,44,2)
(68,8,2)
(76,44,2)
(30,44,2)
(39,36,2)
(50,44,2)
(48,44,2)
(87,63,2)
(69,44,2)
(60,53,2)
(72,6,2)
(37,44,2)
(50,77,2)
(40,2,2)
(53,36,2)
(47,53,2)
-----------------------------------
(0,data)
(1,intOne)
(2,(twoIntsStruct *)
(3,data)
(4,intOne)
(5,0)
(6,data != NULL)
(7,twoIntsStruct *)
(8,(130000)
(9,data)
(10,1)
(11,free(data)
(12,data)
(13,break;)
(14,NULL)
(15,data)
(16,sizeof(struct _twoIntsStruct)
(17,printLine("Benign, fixed string")
(18,0)
(19,1)
(20,sizeof(struct _twoIntsStruct)
(21,data)
(22,(struct _twoIntsStruct *)
(23,0)
(24,0)
(25,data)
(26,-1)
(27,130000)
(28,"Benign, fixed string")
(29,)
(30,data[0].intTwo)
(31,struct _twoIntsStruct *)
(32,twoIntsStruct *)
(33,default:)
(34,data[0])
(35,)
(36,* data = (struct _twoIntsStruct *)
(37,data)
(38,)
(39,data[0])
(40,printStructLine((twoIntsStruct *)
(41,data)
(42,struct _twoIntsStruct *)
(43,break;)
(44,6)
(45,data)
(46,intTwo)
(47,1)
(48,0)
(49,if (data == NULL)
(50,&data[0])
(51,data)
(52,data[0].intTwo = 1)
(53,data == NULL)
(54,100*sizeof(struct _twoIntsStruct)
(55,case 6:)
(56,RET)
(57,data[0])
(58,)
(59,data[0].intOne)
(60,exit(-1)
(61,data)
(62,malloc(100*sizeof(struct _twoIntsStruct)
(63,data = (struct _twoIntsStruct *)
(64,NULL)
(65,)
(66,(struct _twoIntsStruct *)
(67,data[0])
(68,realloc(data, (130000)
(69,data[0].intTwo = 0)
(70,struct _twoIntsStruct)
(71,switch(6)
(72,data[0].intOne = 1)
(73,(twoIntsStruct *)
(74,struct _twoIntsStruct)
(75,&data[0])
(76,data)
(77,data[0])
(78,100)
(79,0)
(80,data[0].intOne = 0)
(81,data[0].intTwo)
(82,0)
(83,if (data != NULL)
(84,data[0].intOne)
(85,0)
(86,printStructLine((twoIntsStruct *)
(87,data[0])
(88,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
