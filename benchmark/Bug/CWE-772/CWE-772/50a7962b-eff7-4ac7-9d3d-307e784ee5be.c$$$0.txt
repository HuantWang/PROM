-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_10_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,93,95
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_10_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_10_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_10_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,45,0)
(48,40,0)
(44,21,0)
(39,35,0)
(17,25,0)
(4,16,0)
(37,8,0)
(48,35,0)
(25,3,0)
(10,16,0)
(27,37,0)
(14,39,0)
(32,8,0)
(45,8,0)
(23,7,0)
(9,0,0)
(4,33,0)
(28,9,0)
(38,37,0)
(3,25,0)
(11,28,0)
(28,25,0)
(11,45,0)
(31,43,0)
(25,28,0)
(31,29,0)
(48,19,0)
(20,43,0)
(6,7,0)
(43,31,0)
(21,38,0)
(45,11,0)
(28,11,0)
(33,4,0)
(41,0,0)
(19,48,0)
(16,8,0)
(40,8,0)
(21,45,0)
(34,33,0)
(18,28,0)
(35,48,0)
(7,45,0)
(38,21,0)
(1,11,0)
(30,21,0)
(22,38,0)
(2,9,0)
(39,45,0)
(35,39,0)
(36,3,0)
(33,45,0)
(40,48,0)
(11,1,0)
(42,9,0)
(15,0,0)
(46,39,0)
(5,4,0)
(3,36,0)
(12,0,0)
(49,33,0)
(38,21,1)
(37,27,1)
(27,38,1)
(28,25,1)
(43,20,1)
(44,31,1)
(11,28,1)
(39,45,1)
(2,42,1)
(26,9,1)
(23,6,1)
(40,48,1)
(33,49,1)
(17,18,1)
(33,45,1)
(16,10,1)
(10,4,1)
(20,7,1)
(21,30,1)
(48,19,1)
(5,33,1)
(14,16,1)
(6,45,1)
(28,9,1)
(13,26,1)
(38,22,1)
(11,1,1)
(3,36,1)
(31,43,1)
(45,11,1)
(9,2,1)
(46,14,1)
(18,24,1)
(4,5,1)
(49,34,1)
(44,7,1)
(48,35,1)
(25,3,1)
(3,17,1)
(22,21,1)
(35,39,1)
(7,45,1)
(39,46,1)
(13,40,1)
(4,33,1)
(34,37,1)
(7,23,1)
(47,13,1)
(24,26,1)
(21,45,1)
(30,44,1)
(37,26,2)
(25,26,2)
(48,26,2)
(33,45,2)
(14,26,2)
(35,39,2)
(21,26,2)
(3,36,2)
(28,25,2)
(20,7,2)
(7,26,2)
(11,1,2)
(7,45,2)
(28,9,2)
(16,26,2)
(11,26,2)
(6,26,2)
(25,3,2)
(33,26,2)
(40,26,2)
(31,43,2)
(46,26,2)
(4,33,2)
(45,26,2)
(35,26,2)
(39,45,2)
(17,26,2)
(4,26,2)
(5,26,2)
(43,7,2)
(18,26,2)
(48,19,2)
(27,26,2)
(38,21,2)
(22,26,2)
(31,7,2)
(49,26,2)
(23,26,2)
(10,26,2)
(40,48,2)
(44,26,2)
(3,26,2)
(24,26,2)
(48,35,2)
(34,26,2)
(38,26,2)
(11,28,2)
(45,11,2)
(28,26,2)
(39,26,2)
(21,45,2)
(30,26,2)
-----------------------------------
(0,)
(1,struct _twoIntsStruct *)
(2,NULL)
(3,sizeof(struct _twoIntsStruct)
(4,data[0].intTwo)
(5,intTwo)
(6,data)
(7,data == NULL)
(8,)
(9,data = NULL)
(10,0)
(11,(struct _twoIntsStruct *)
(12,if(globalTrue)
(13,globalTrue)
(14,data)
(15,data)
(16,data[0].intTwo = 0)
(17,100)
(18,data)
(19,twoIntsStruct *)
(20,1)
(21,data[0])
(22,intOne)
(23,NULL)
(24,data)
(25,100*sizeof(struct _twoIntsStruct)
(26,globalTrue)
(27,0)
(28,realloc(data, 100*sizeof(struct _twoIntsStruct)
(29,)
(30,0)
(31,exit(-1)
(32,if (data == NULL)
(33,data[0])
(34,data)
(35,&data[0])
(36,struct _twoIntsStruct)
(37,data[0].intOne = 0)
(38,data[0].intOne)
(39,data[0])
(40,printStructLine((twoIntsStruct *)
(41,if(globalTrue)
(42,data)
(43,-1)
(44,data)
(45,data = (struct _twoIntsStruct *)
(46,0)
(47,RET)
(48,(twoIntsStruct *)
(49,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
