-----label-----
1
-----code-----
void CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    FILE * * dataPtr = (FILE * *)dataVoidPtr;
    /* dereference dataPtr into data */
    FILE * data = (*dataPtr);
    /* FLAW: No attempt to close the file */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
15,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
24,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
38,39
39,40
-----nextToken-----
2,4,6,8,9,14,16,17,18,23,25,26,28,32,34,35,40,41
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    FILE * * dataPtr = (FILE * *)dataVoidPtr;    /* dereference dataPtr into data */    FILE * data = (*dataPtr);    /* FLAW: No attempt to close the file */    ; /* empty statement needed for some flow variants */}
void
CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_64b_badSink(void * dataVoidPtr)
CWE775_Missing_Release_of_File_Descriptor_or_Handle__fopen_no_close_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    FILE * * dataPtr = (FILE * *)dataVoidPtr;    /* dereference dataPtr into data */    FILE * data = (*dataPtr);    /* FLAW: No attempt to close the file */    ; /* empty statement needed for some flow variants */}
FILE * * dataPtr = (FILE * *)dataVoidPtr;
FILE * * dataPtr = (FILE * *)dataVoidPtr;
FILE
FILE
* * dataPtr = (FILE * *)dataVoidPtr
*
*
dataPtr
= (FILE * *)dataVoidPtr
(FILE * *)dataVoidPtr
FILE * *
FILE
FILE
* *
*
*
dataVoidPtr
dataVoidPtr
FILE * data = (*dataPtr);
FILE * data = (*dataPtr);
FILE
FILE
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
;
-----joern-----
(9,6,0)
(10,3,0)
(8,0,0)
(9,13,0)
(13,7,0)
(5,7,0)
(13,9,0)
(3,13,0)
(6,9,0)
(1,7,0)
(0,7,0)
(2,9,0)
(9,12,0)
(3,0,0)
(11,13,0)
(0,3,0)
(9,6,1)
(4,0,1)
(8,13,1)
(2,11,1)
(10,8,1)
(0,3,1)
(9,2,1)
(3,13,1)
(3,10,1)
(13,9,1)
(9,12,1)
(13,9,2)
(0,3,2)
(3,13,2)
(9,6,2)
(9,12,2)
-----------------------------------
(0,* data = (*dataPtr)
(1,dataPtr)
(2,dataVoidPtr)
(3,*dataPtr)
(4,RET)
(5,data)
(6,FILE * *)
(7,)
(8,data)
(9,(FILE * *)
(10,dataPtr)
(11,dataPtr)
(12,void * dataVoidPtr)
(13,* * dataPtr = (FILE * *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
