-----label-----
1
-----code-----
int * CWE401_Memory_Leak__int_malloc_61b_badSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
45,47
46,47
50,51
51,52
51,53
52,53
54,55
54,56
55,56
58,59
59,60
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,47,48,49,53,56,57,60
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
int * CWE401_Memory_Leak__int_malloc_61b_badSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
int
* CWE401_Memory_Leak__int_malloc_61b_badSource(int * data)
*
CWE401_Memory_Leak__int_malloc_61b_badSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(2,8,0)
(12,13,0)
(0,1,0)
(0,10,0)
(25,5,0)
(26,23,0)
(24,28,0)
(8,16,0)
(15,10,0)
(22,9,0)
(16,17,0)
(5,15,0)
(6,8,0)
(21,24,0)
(8,6,0)
(27,5,0)
(13,15,0)
(10,15,0)
(23,1,0)
(30,17,0)
(4,22,0)
(10,11,0)
(19,8,0)
(13,17,0)
(15,17,0)
(9,22,0)
(29,1,0)
(8,15,0)
(7,15,0)
(6,17,0)
(15,28,0)
(10,0,0)
(14,13,0)
(1,0,0)
(11,10,0)
(8,28,0)
(24,15,0)
(24,16,0)
(13,28,0)
(5,28,0)
(9,20,0)
(3,24,0)
(1,23,0)
(18,16,0)
(21,9,1)
(4,5,1)
(18,24,1)
(6,8,1)
(27,15,1)
(9,22,1)
(24,28,1)
(15,10,1)
(14,6,1)
(16,18,1)
(19,2,1)
(26,29,1)
(23,26,1)
(1,23,1)
(2,16,1)
(29,7,1)
(5,28,1)
(24,15,1)
(3,21,1)
(24,3,1)
(25,27,1)
(5,15,1)
(21,5,1)
(8,19,1)
(5,25,1)
(10,0,1)
(22,4,1)
(8,16,1)
(12,13,1)
(10,11,1)
(13,15,1)
(13,14,1)
(8,15,1)
(8,28,1)
(0,1,1)
(15,28,1)
(13,28,1)
(9,5,2)
(8,15,2)
(8,28,2)
(8,16,2)
(24,28,2)
(10,11,2)
(4,5,2)
(1,23,2)
(10,0,2)
(15,10,2)
(24,15,2)
(0,1,2)
(5,15,2)
(6,8,2)
(9,22,2)
(13,15,2)
(12,13,2)
(22,5,2)
(13,28,2)
(15,28,2)
(5,28,2)
-----------------------------------
(0,malloc(100*sizeof(int)
(1,100*sizeof(int)
(2,data)
(3,0)
(4,1)
(5,data == NULL)
(6,printIntLine(data[0])
(7,data)
(8,data[0])
(9,exit(-1)
(10,(int *)
(11,int *)
(12,RET)
(13,return data;)
(14,data)
(15,data = (int *)
(16,data[0] = 5)
(17,)
(18,5)
(19,0)
(20,)
(21,data)
(22,-1)
(23,sizeof(int)
(24,data[0])
(25,NULL)
(26,int)
(27,data)
(28,int * data)
(29,100)
(30,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
