-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
71,72
72,73
72,74
73,74
77,78
77,79
79,80
79,81
79,82
79,83
79,84
79,85
80,81
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,69,70,74,75,76,78,81,82,83,84,88,89,90
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__char_realloc_15_bad()
CWE401_Memory_Leak__char_realloc_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(36,2,0)
(2,36,0)
(33,23,0)
(14,28,0)
(19,2,0)
(21,42,0)
(28,2,0)
(10,42,0)
(25,19,0)
(27,38,0)
(36,23,0)
(2,42,0)
(7,38,0)
(44,10,0)
(35,41,0)
(23,18,0)
(32,38,0)
(12,4,0)
(20,26,0)
(34,30,0)
(18,26,0)
(26,18,0)
(28,42,0)
(18,23,0)
(39,36,0)
(15,42,0)
(46,42,0)
(43,17,0)
(37,41,0)
(5,38,0)
(43,13,0)
(0,42,0)
(45,17,0)
(3,19,0)
(8,2,0)
(1,28,0)
(31,18,0)
(24,21,0)
(29,42,0)
(4,41,0)
(23,4,0)
(30,38,0)
(21,2,0)
(11,41,0)
(36,39,0)
(17,43,0)
(23,36,0)
(6,4,0)
(40,42,0)
(24,28,1)
(22,29,1)
(30,34,1)
(5,22,1)
(1,19,1)
(36,23,1)
(9,5,1)
(17,45,1)
(10,44,1)
(8,16,1)
(23,4,1)
(12,6,1)
(43,17,1)
(32,30,1)
(31,33,1)
(33,8,1)
(18,26,1)
(20,31,1)
(36,39,1)
(19,25,1)
(46,10,1)
(44,16,1)
(1,43,1)
(2,36,1)
(14,1,1)
(26,20,1)
(16,4,1)
(22,46,1)
(21,24,1)
(9,32,1)
(23,18,1)
(45,19,1)
(21,2,1)
(28,14,1)
(19,2,1)
(28,2,1)
(3,2,1)
(29,21,1)
(34,22,1)
(4,12,1)
(25,3,1)
(43,19,2)
(24,16,2)
(36,16,2)
(20,16,2)
(25,16,2)
(18,16,2)
(19,16,2)
(19,2,2)
(10,16,2)
(21,16,2)
(18,26,2)
(32,22,2)
(46,16,2)
(2,36,2)
(23,4,2)
(43,17,2)
(28,2,2)
(5,22,2)
(29,16,2)
(8,16,2)
(30,22,2)
(23,16,2)
(31,16,2)
(34,22,2)
(3,16,2)
(36,23,2)
(1,16,2)
(26,16,2)
(36,39,2)
(44,16,2)
(45,19,2)
(14,16,2)
(21,2,2)
(2,16,2)
(33,16,2)
(23,18,2)
(17,19,2)
(28,16,2)
-----------------------------------
(0,default:)
(1,data)
(2,data = (char *)
(3,data)
(4,data = NULL)
(5,break;)
(6,data)
(7,case 7:)
(8,data)
(9,RET)
(10,printLine("Benign, fixed string")
(11,data)
(12,NULL)
(13,)
(14,"A String")
(15,if (data == NULL)
(16,6)
(17,-1)
(18,100*sizeof(char)
(19,data == NULL)
(20,char)
(21,printLine(data)
(22,7)
(23,realloc(data, 100*sizeof(char)
(24,data)
(25,NULL)
(26,sizeof(char)
(27,default:)
(28,strcpy(data, "A String")
(29,break;)
(30,printLine("Benign, fixed string")
(31,100)
(32,break;)
(33,data)
(34,"Benign, fixed string")
(35,switch(6)
(36,(char *)
(37,switch(7)
(38,)
(39,char *)
(40,case 6:)
(41,)
(42,)
(43,exit(-1)
(44,"Benign, fixed string")
(45,1)
(46,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
