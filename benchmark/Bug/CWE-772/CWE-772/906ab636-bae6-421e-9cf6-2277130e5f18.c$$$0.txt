-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_02_bad()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
64,66
66,67
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,54,56,57,61,63,65,67
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_02_bad(){    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_02_bad()
CWE401_Memory_Leak__wchar_t_calloc_02_bad
{    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,15,0)
(1,8,0)
(28,3,0)
(5,4,0)
(29,15,0)
(0,8,0)
(11,4,0)
(28,24,0)
(13,8,0)
(12,10,0)
(7,29,0)
(17,1,0)
(20,6,0)
(6,19,0)
(10,19,0)
(10,15,0)
(19,23,0)
(6,27,0)
(24,28,0)
(16,8,0)
(4,10,0)
(29,10,0)
(23,19,0)
(18,27,0)
(14,24,0)
(19,6,0)
(27,6,0)
(21,1,0)
(19,10,0)
(6,27,1)
(7,4,1)
(25,1,1)
(22,9,1)
(7,28,1)
(20,12,1)
(27,18,1)
(29,7,1)
(9,29,1)
(11,5,1)
(4,11,1)
(4,10,1)
(28,24,1)
(10,19,1)
(29,10,1)
(9,25,1)
(18,20,1)
(21,17,1)
(12,25,1)
(19,6,1)
(5,10,1)
(14,4,1)
(19,23,1)
(24,14,1)
(1,21,1)
(29,10,2)
(4,25,2)
(20,25,2)
(28,24,2)
(4,10,2)
(6,27,2)
(11,25,2)
(29,25,2)
(10,25,2)
(27,25,2)
(19,23,2)
(24,4,2)
(18,25,2)
(12,25,2)
(7,25,2)
(19,6,2)
(6,25,2)
(28,4,2)
(10,19,2)
(19,25,2)
(14,4,2)
(5,25,2)
-----------------------------------
(0,data)
(1,data = NULL)
(2,if (data == NULL)
(3,)
(4,data == NULL)
(5,data)
(6,calloc(100, sizeof(wchar_t)
(7,data)
(8,)
(9,1)
(10,data = (wchar_t *)
(11,NULL)
(12,data)
(13,if(1)
(14,1)
(15,)
(16,if(1)
(17,data)
(18,wchar_t)
(19,(wchar_t *)
(20,100)
(21,NULL)
(22,RET)
(23,wchar_t *)
(24,-1)
(25,1)
(26, sizeof(wchar_t)
(27,sizeof(wchar_t)
(28,exit(-1)
(29,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
