-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_32_bad()
{
    int * data;
    int * *dataPtr1 = &data;
    int * *dataPtr2 = &data;
    data = NULL;
    {
        int * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
92,94
93,94
96,97
97,98
97,99
98,99
99,100
101,102
103,104
103,105
104,105
105,106
105,107
107,108
107,109
107,110
110,111
111,112
112,113
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,63,66,67,71,73,78,80,85,86,87,91,94,95,100,102,106,108,109,113,114
-----computeFrom-----
35,36
35,37
52,53
52,54
69,70
69,71
82,83
82,84
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_32_bad(){    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_32_bad()
CWE401_Memory_Leak__int_calloc_32_bad
{    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
int * *dataPtr1 = &data;
int * *dataPtr1 = &data;
int
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int * *dataPtr2 = &data;
int * *dataPtr2 = &data;
int
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }
int * data = *dataPtr1;
int * data = *dataPtr1;
int
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = *dataPtr2;
int * data = *dataPtr2;
int
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(40,10,0)
(37,4,0)
(32,35,0)
(32,21,0)
(48,34,0)
(55,25,0)
(56,10,0)
(20,6,0)
(53,35,0)
(36,4,0)
(23,33,0)
(34,48,0)
(21,34,0)
(16,21,0)
(27,52,0)
(15,28,0)
(29,12,0)
(57,4,0)
(42,51,0)
(44,43,0)
(21,35,0)
(9,16,0)
(22,12,0)
(18,16,0)
(22,30,0)
(13,32,0)
(34,49,0)
(56,4,0)
(46,30,0)
(17,22,0)
(5,47,0)
(43,49,0)
(24,57,0)
(4,36,0)
(39,2,0)
(47,21,0)
(25,52,0)
(52,30,0)
(47,5,0)
(28,35,0)
(47,28,0)
(11,47,0)
(10,56,0)
(8,56,0)
(33,25,0)
(10,35,0)
(49,43,0)
(51,30,0)
(1,2,0)
(45,35,0)
(12,22,0)
(33,22,0)
(41,47,0)
(5,35,0)
(38,51,0)
(54,21,0)
(49,34,0)
(35,30,0)
(2,21,0)
(14,30,0)
(4,30,0)
(34,21,0)
(2,28,0)
(6,20,0)
(7,20,0)
(25,33,0)
(57,32,0)
(6,31,0)
(19,30,0)
(50,49,0)
(0,36,0)
(51,42,1)
(34,49,1)
(0,37,1)
(54,10,1)
(20,7,1)
(32,21,1)
(12,29,1)
(57,4,1)
(47,21,1)
(4,36,1)
(41,28,1)
(6,20,1)
(50,54,1)
(43,44,1)
(1,6,1)
(42,38,1)
(28,15,1)
(49,43,1)
(17,4,1)
(29,17,1)
(33,23,1)
(21,34,1)
(32,13,1)
(55,32,1)
(56,8,1)
(9,18,1)
(34,48,1)
(57,24,1)
(24,5,1)
(16,21,1)
(10,56,1)
(33,22,1)
(5,47,1)
(44,50,1)
(38,22,1)
(2,39,1)
(11,41,1)
(15,2,1)
(36,0,1)
(40,51,1)
(39,1,1)
(13,57,1)
(56,4,1)
(18,21,1)
(23,55,1)
(1,16,1)
(47,28,1)
(22,12,1)
(16,9,1)
(25,33,1)
(26,25,1)
(47,11,1)
(2,21,1)
(8,40,1)
(7,16,1)
(7,16,2)
(32,21,2)
(5,47,2)
(57,4,2)
(47,21,2)
(25,33,2)
(34,48,2)
(21,34,2)
(33,22,2)
(16,21,2)
(56,4,2)
(49,43,2)
(47,28,2)
(2,21,2)
(22,12,2)
(6,16,2)
(10,56,2)
(6,20,2)
(20,16,2)
(4,36,2)
(34,49,2)
-----------------------------------
(0,data)
(1,data)
(2,data[0])
(3, sizeof(int)
(4,* *dataPtr1 = &data)
(5,printIntLine(data[0])
(6,exit(-1)
(7,1)
(8,dataPtr1)
(9,NULL)
(10,* data = *dataPtr1)
(11,0)
(12,&data)
(13,data)
(14,dataPtr1)
(15,5)
(16,data == NULL)
(17,dataPtr2)
(18,data)
(19,dataPtr2)
(20,-1)
(21,data = (int *)
(22,* *dataPtr2 = &data)
(23,dataPtr2)
(24,dataPtr1)
(25,* data = *dataPtr2)
(26,RET)
(27,data)
(28,data[0] = 5)
(29,data)
(30,)
(31,)
(32,*dataPtr1 = data)
(33,*dataPtr2)
(34,(int *)
(35,)
(36,&data)
(37,dataPtr1)
(38,data)
(39,0)
(40,data)
(41,data)
(42,NULL)
(43,sizeof(int)
(44,int)
(45,if (data == NULL)
(46,data)
(47,data[0])
(48,int *)
(49,calloc(100, sizeof(int)
(50,100)
(51,data = NULL)
(52,)
(53,data)
(54,data)
(55,data)
(56,*dataPtr1)
(57,*dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
