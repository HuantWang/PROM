-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_16_bad()
{
    int * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
68,69
68,70
70,71
70,72
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,56,57,58,62,65,66,67,69,71,72
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_16_bad(){    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__int_malloc_16_bad()
CWE401_Memory_Leak__int_malloc_16_bad
{    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(28,39,0)
(2,4,0)
(5,25,0)
(4,2,0)
(19,16,0)
(39,25,0)
(37,8,0)
(31,2,0)
(22,8,0)
(25,5,0)
(7,23,0)
(32,23,0)
(34,38,0)
(29,33,0)
(25,36,0)
(6,33,0)
(25,39,0)
(30,24,0)
(18,4,0)
(1,34,0)
(27,23,0)
(9,29,0)
(21,16,0)
(4,36,0)
(10,33,0)
(24,23,0)
(34,1,0)
(0,1,0)
(11,17,0)
(16,29,0)
(39,33,0)
(16,39,0)
(12,33,0)
(36,4,0)
(17,39,0)
(8,29,0)
(13,15,0)
(12,16,0)
(20,24,0)
(16,12,0)
(8,39,0)
(14,17,0)
(36,25,0)
(35,10,1)
(20,30,1)
(39,25,1)
(37,17,1)
(16,39,1)
(9,8,1)
(26,13,1)
(3,24,1)
(24,20,1)
(16,29,1)
(1,0,1)
(16,21,1)
(34,1,1)
(36,4,1)
(17,14,1)
(14,11,1)
(35,3,1)
(37,34,1)
(28,3,1)
(22,37,1)
(19,29,1)
(21,19,1)
(29,9,1)
(11,39,1)
(10,12,1)
(17,39,1)
(12,16,1)
(18,28,1)
(26,35,1)
(25,5,1)
(4,2,1)
(25,36,1)
(8,22,1)
(8,39,1)
(13,35,1)
(2,31,1)
(31,18,1)
(0,17,1)
(9,3,2)
(8,39,2)
(10,3,2)
(2,3,2)
(12,3,2)
(31,3,2)
(16,3,2)
(13,35,2)
(12,16,2)
(17,3,2)
(16,39,2)
(37,3,2)
(28,3,2)
(4,3,2)
(25,36,2)
(36,4,2)
(18,3,2)
(11,3,2)
(29,3,2)
(0,17,2)
(17,39,2)
(25,3,2)
(14,3,2)
(36,3,2)
(4,2,2)
(25,5,2)
(34,1,2)
(19,3,2)
(21,3,2)
(1,17,2)
(16,29,2)
(34,17,2)
(39,25,2)
(22,3,2)
(39,3,2)
(8,3,2)
-----------------------------------
(0,1)
(1,-1)
(2,sizeof(int)
(3,1)
(4,100*sizeof(int)
(5,int *)
(6,if (data == NULL)
(7,data)
(8,data[0])
(9,5)
(10,break;)
(11,data)
(12,printIntLine(data[0])
(13,break;)
(14,NULL)
(15,)
(16,data[0])
(17,data == NULL)
(18,100)
(19,data)
(20,NULL)
(21,0)
(22,0)
(23,)
(24,data = NULL)
(25,(int *)
(26,RET)
(27,while(1)
(28,data)
(29,data[0] = 5)
(30,data)
(31,int)
(32,while(1)
(33,)
(34,exit(-1)
(35,1)
(36,malloc(100*sizeof(int)
(37,data)
(38,)
(39,data = (int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
