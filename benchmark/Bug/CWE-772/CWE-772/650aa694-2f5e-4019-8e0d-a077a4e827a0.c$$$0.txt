-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_34_bad()
{
    char * data;
    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)realloc(data, 100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
72,74
73,74
76,77
78,79
78,80
79,80
80,81
80,82
82,83
82,84
82,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,39,42,43,47,49,54,56,60,62,63,67,69,74,75,77,81,83,84,88,89,90
-----computeFrom-----
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_34_bad(){    char * data;    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_34_bad()
CWE401_Memory_Leak__char_realloc_34_bad
{    char * data;    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
CWE401_Memory_Leak__char_realloc_34_unionType
CWE401_Memory_Leak__char_realloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(30,34,0)
(40,26,0)
(9,19,0)
(26,0,0)
(26,37,0)
(23,37,0)
(22,0,0)
(36,21,0)
(31,10,0)
(25,37,0)
(0,37,0)
(38,11,0)
(8,22,0)
(10,31,0)
(2,22,0)
(39,12,0)
(15,0,0)
(13,0,0)
(3,37,0)
(35,34,0)
(21,36,0)
(28,31,0)
(19,37,0)
(24,21,0)
(16,35,0)
(17,41,0)
(21,11,0)
(34,19,0)
(11,12,0)
(36,0,0)
(33,26,0)
(4,17,0)
(14,15,0)
(7,35,0)
(21,25,0)
(11,21,0)
(18,25,0)
(41,0,0)
(5,41,0)
(34,35,0)
(10,29,0)
(12,11,0)
(0,36,0)
(6,17,0)
(15,37,0)
(36,20,0)
(1,25,0)
(20,36,0)
(27,37,0)
(41,37,0)
(40,22,1)
(8,2,1)
(11,12,1)
(0,36,1)
(21,11,1)
(22,0,1)
(7,30,1)
(13,25,1)
(35,16,1)
(12,39,1)
(30,41,1)
(26,0,1)
(22,8,1)
(39,38,1)
(28,22,1)
(38,24,1)
(34,35,1)
(5,17,1)
(15,14,1)
(1,18,1)
(10,31,1)
(24,13,1)
(26,33,1)
(17,6,1)
(41,5,1)
(6,4,1)
(41,0,1)
(15,0,1)
(32,34,1)
(40,10,1)
(2,0,1)
(21,25,1)
(36,20,1)
(33,40,1)
(4,15,1)
(31,28,1)
(36,21,1)
(25,1,1)
(14,26,1)
(16,7,1)
(21,25,2)
(34,35,2)
(22,0,2)
(10,22,2)
(41,0,2)
(21,11,2)
(31,22,2)
(11,12,2)
(36,21,2)
(36,20,2)
(15,0,2)
(28,22,2)
(0,36,2)
(10,31,2)
(26,0,2)
-----------------------------------
(0,data = (char *)
(1,NULL)
(2,data)
(3,if (data == NULL)
(4,myUnion)
(5,data)
(6,unionFirst)
(7,myUnion)
(8,NULL)
(9,data)
(10,exit(-1)
(11,100*sizeof(char)
(12,sizeof(char)
(13,data)
(14,data)
(15,printLine(data)
(16,unionSecond)
(17,myUnion.unionFirst)
(18,data)
(19,)
(20,char *)
(21,realloc(data, 100*sizeof(char)
(22,data == NULL)
(23,myUnion)
(24,data)
(25,data = NULL)
(26,strcpy(data, "A String")
(27,data)
(28,1)
(29,)
(30,data)
(31,-1)
(32,RET)
(33,"A String")
(34,* data = myUnion.unionSecond)
(35,myUnion.unionSecond)
(36,(char *)
(37,)
(38,100)
(39,char)
(40,data)
(41,myUnion.unionFirst = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
