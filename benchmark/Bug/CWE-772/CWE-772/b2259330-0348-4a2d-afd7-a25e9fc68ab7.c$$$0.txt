-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_10_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,91,93
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_10_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_10_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_10_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(48,8,0)
(40,7,0)
(8,46,0)
(34,38,0)
(24,26,0)
(48,0,0)
(13,3,0)
(21,38,0)
(12,44,0)
(46,8,0)
(35,39,0)
(31,16,0)
(27,16,0)
(3,13,0)
(42,37,0)
(22,5,0)
(46,5,0)
(48,16,0)
(13,19,0)
(5,46,0)
(13,41,0)
(23,28,0)
(6,27,0)
(41,20,0)
(15,31,0)
(5,22,0)
(37,20,0)
(4,46,0)
(10,7,0)
(14,39,0)
(19,13,0)
(41,13,0)
(38,16,0)
(29,42,0)
(7,19,0)
(43,31,0)
(47,2,0)
(17,2,0)
(1,37,0)
(45,39,0)
(17,9,0)
(16,48,0)
(19,7,0)
(38,26,0)
(42,31,0)
(44,20,0)
(30,16,0)
(0,48,0)
(26,38,0)
(8,48,0)
(7,16,0)
(28,39,0)
(36,20,0)
(31,42,0)
(26,44,0)
(11,28,0)
(25,27,0)
(16,20,0)
(2,17,0)
(27,16,1)
(10,44,1)
(13,19,1)
(47,27,1)
(16,48,1)
(15,43,1)
(6,16,1)
(21,34,1)
(2,47,1)
(38,21,1)
(42,29,1)
(48,8,1)
(31,16,1)
(7,16,1)
(32,41,1)
(31,15,1)
(43,17,1)
(1,42,1)
(24,38,1)
(43,27,1)
(28,11,1)
(26,24,1)
(5,4,1)
(40,10,1)
(5,22,1)
(27,25,1)
(33,28,1)
(7,40,1)
(30,33,1)
(29,31,1)
(11,23,1)
(25,6,1)
(32,33,1)
(18,32,1)
(46,5,1)
(19,7,1)
(44,12,1)
(13,3,1)
(41,13,1)
(12,26,1)
(8,46,1)
(38,16,1)
(37,1,1)
(17,2,1)
(26,38,1)
(48,0,1)
(4,30,1)
(42,31,1)
(34,37,1)
(38,16,2)
(46,33,2)
(42,33,2)
(13,3,2)
(26,33,2)
(48,33,2)
(37,33,2)
(15,33,2)
(6,33,2)
(16,33,2)
(24,33,2)
(19,33,2)
(30,33,2)
(44,33,2)
(38,33,2)
(8,33,2)
(17,2,2)
(43,33,2)
(2,27,2)
(1,33,2)
(8,46,2)
(48,0,2)
(7,33,2)
(25,33,2)
(29,33,2)
(27,33,2)
(42,31,2)
(31,16,2)
(7,16,2)
(16,48,2)
(4,33,2)
(13,19,2)
(46,5,2)
(48,8,2)
(17,27,2)
(5,33,2)
(26,38,2)
(13,33,2)
(41,33,2)
(34,33,2)
(10,33,2)
(27,16,2)
(19,7,2)
(5,22,2)
(12,33,2)
(31,33,2)
(41,13,2)
(21,33,2)
(47,27,2)
(40,33,2)
-----------------------------------
(0,struct _twoIntsStruct *)
(1,0)
(2,-1)
(3,twoIntsStruct *)
(4,100)
(5,sizeof(struct _twoIntsStruct)
(6,data)
(7,data[0])
(8,malloc(100*sizeof(struct _twoIntsStruct)
(9,)
(10,data)
(11,NULL)
(12,0)
(13,(twoIntsStruct *)
(14,data)
(15,0)
(16,data = (struct _twoIntsStruct *)
(17,exit(-1)
(18,RET)
(19,&data[0])
(20,)
(21,0)
(22,struct _twoIntsStruct)
(23,data)
(24,intTwo)
(25,NULL)
(26,data[0].intTwo)
(27,data == NULL)
(28,data = NULL)
(29,intOne)
(30,data)
(31,data[0])
(32,globalTrue)
(33,globalTrue)
(34,data)
(35,if(globalTrue)
(36,if (data == NULL)
(37,data[0].intOne = 0)
(38,data[0])
(39,)
(40,0)
(41,printStructLine((twoIntsStruct *)
(42,data[0].intOne)
(43,data)
(44,data[0].intTwo = 0)
(45,if(globalTrue)
(46,100*sizeof(struct _twoIntsStruct)
(47,1)
(48,(struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
