-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
75,76
75,77
77,78
77,79
77,80
77,81
77,82
77,83
78,79
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,67,68,72,73,74,76,79,80,81,82,86,87,88
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__wchar_t_malloc_15_bad()
CWE401_Memory_Leak__wchar_t_malloc_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(38,36,0)
(31,13,0)
(9,2,0)
(26,2,0)
(37,2,0)
(34,16,0)
(10,13,0)
(38,32,0)
(37,36,0)
(3,12,0)
(19,32,0)
(12,32,0)
(32,38,0)
(8,2,0)
(29,40,0)
(24,15,0)
(6,36,0)
(36,38,0)
(30,0,0)
(1,16,0)
(33,27,0)
(28,0,0)
(23,13,0)
(24,40,0)
(11,2,0)
(17,27,0)
(7,26,0)
(39,11,0)
(40,24,0)
(0,13,0)
(32,12,0)
(22,2,0)
(42,2,0)
(27,37,0)
(11,37,0)
(21,37,0)
(18,2,0)
(14,16,0)
(36,37,0)
(36,6,0)
(20,16,0)
(25,41,0)
(41,16,0)
(40,29,1)
(20,5,1)
(24,40,1)
(29,27,1)
(14,41,1)
(26,7,1)
(11,39,1)
(22,26,1)
(39,27,1)
(21,4,1)
(11,37,1)
(35,20,1)
(36,38,1)
(36,6,1)
(19,21,1)
(4,0,1)
(27,17,1)
(18,11,1)
(25,5,1)
(7,4,1)
(5,22,1)
(39,24,1)
(33,37,1)
(3,19,1)
(5,18,1)
(30,28,1)
(12,3,1)
(27,37,1)
(32,12,1)
(37,36,1)
(17,33,1)
(35,14,1)
(38,32,1)
(0,30,1)
(41,25,1)
(25,5,2)
(21,4,2)
(36,38,2)
(19,4,2)
(14,5,2)
(26,4,2)
(33,4,2)
(32,12,2)
(39,4,2)
(37,36,2)
(11,37,2)
(24,40,2)
(32,4,2)
(3,4,2)
(12,4,2)
(24,27,2)
(38,4,2)
(29,27,2)
(11,4,2)
(18,4,2)
(22,4,2)
(20,5,2)
(40,27,2)
(17,4,2)
(27,37,2)
(37,4,2)
(7,4,2)
(41,5,2)
(36,6,2)
(36,4,2)
(27,4,2)
(38,32,2)
-----------------------------------
(0,data = NULL)
(1,case 7:)
(2,)
(3,wchar_t)
(4,6)
(5,7)
(6,wchar_t *)
(7,"Benign, fixed string")
(8,case 6:)
(9,default:)
(10,switch(7)
(11,printWLine(data)
(12,sizeof(wchar_t)
(13,)
(14,break;)
(15,)
(16,)
(17,NULL)
(18,break;)
(19,100)
(20,break;)
(21,data)
(22,break;)
(23,data)
(24,exit(-1)
(25,"Benign, fixed string")
(26,printLine("Benign, fixed string")
(27,data == NULL)
(28,data)
(29,1)
(30,NULL)
(31,switch(6)
(32,100*sizeof(wchar_t)
(33,data)
(34,default:)
(35,RET)
(36,(wchar_t *)
(37,data = (wchar_t *)
(38,malloc(100*sizeof(wchar_t)
(39,data)
(40,-1)
(41,printLine("Benign, fixed string")
(42,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
