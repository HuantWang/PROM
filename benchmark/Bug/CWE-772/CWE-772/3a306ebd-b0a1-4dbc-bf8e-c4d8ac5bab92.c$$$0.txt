-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_07_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
95,96
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,94,96
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_07_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_07_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_07_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(44,27,0)
(34,49,0)
(33,43,0)
(47,38,0)
(47,41,0)
(39,48,0)
(20,36,0)
(21,49,0)
(1,13,0)
(27,40,0)
(48,36,0)
(10,36,0)
(4,21,0)
(11,29,0)
(40,36,0)
(6,43,0)
(5,48,0)
(45,29,0)
(40,27,0)
(30,24,0)
(21,36,0)
(8,52,0)
(42,8,0)
(23,43,0)
(13,50,0)
(7,34,0)
(49,21,0)
(40,0,0)
(2,9,0)
(15,33,0)
(36,40,0)
(18,21,0)
(28,50,0)
(19,50,0)
(14,33,0)
(36,52,0)
(50,36,0)
(34,35,0)
(51,11,0)
(37,27,0)
(12,10,0)
(35,34,0)
(34,7,0)
(50,13,0)
(38,47,0)
(29,52,0)
(35,52,0)
(48,11,0)
(17,37,0)
(3,52,0)
(27,37,0)
(11,48,0)
(16,24,0)
(26,10,0)
(32,9,0)
(46,43,0)
(13,8,0)
(0,40,0)
(31,38,0)
(49,34,0)
(37,17,0)
(12,26,1)
(50,28,1)
(28,19,1)
(34,7,1)
(32,33,1)
(39,10,1)
(15,14,1)
(38,31,1)
(26,36,1)
(45,11,1)
(44,20,1)
(51,48,1)
(48,5,1)
(2,32,1)
(21,36,1)
(11,48,1)
(16,35,1)
(1,50,1)
(19,29,1)
(11,51,1)
(10,12,1)
(10,36,1)
(35,34,1)
(8,42,1)
(16,9,1)
(21,18,1)
(4,8,1)
(27,37,1)
(49,21,1)
(29,45,1)
(5,39,1)
(37,17,1)
(40,27,1)
(18,4,1)
(30,16,1)
(33,15,1)
(40,0,1)
(9,2,1)
(39,47,1)
(13,1,1)
(34,49,1)
(31,10,1)
(36,40,1)
(24,30,1)
(42,13,1)
(22,24,1)
(50,36,1)
(37,44,1)
(20,9,1)
(13,50,1)
(47,38,1)
(48,36,1)
(48,36,2)
(34,7,2)
(1,9,2)
(12,9,2)
(36,9,2)
(35,9,2)
(34,49,2)
(20,9,2)
(40,27,2)
(47,10,2)
(34,9,2)
(49,21,2)
(31,10,2)
(50,36,2)
(35,34,2)
(11,48,2)
(51,9,2)
(27,37,2)
(49,9,2)
(50,9,2)
(21,36,2)
(40,0,2)
(39,9,2)
(18,9,2)
(36,40,2)
(37,9,2)
(48,9,2)
(10,9,2)
(29,9,2)
(40,9,2)
(21,9,2)
(42,9,2)
(27,9,2)
(8,9,2)
(13,50,2)
(45,9,2)
(44,9,2)
(10,36,2)
(28,9,2)
(13,9,2)
(5,9,2)
(38,10,2)
(37,17,2)
(19,9,2)
(4,9,2)
(47,38,2)
(11,9,2)
(26,9,2)
-----------------------------------
(0,struct _twoIntsStruct *)
(1,intTwo)
(2,5)
(3,if (data == NULL)
(4,data)
(5,0)
(6,if(staticFive==5)
(7,twoIntsStruct *)
(8,data[0].intTwo = 0)
(9,staticFive==5)
(10,data == NULL)
(11,data[0].intOne)
(12,NULL)
(13,data[0].intTwo)
(14,data)
(15,NULL)
(16,staticFive)
(17,struct _twoIntsStruct)
(18,0)
(19,data)
(20,data)
(21,data[0])
(22,RET)
(23,if(staticFive==5)
(24,staticFive==5)
(25, sizeof(struct _twoIntsStruct)
(26,data)
(27,calloc(100, sizeof(struct _twoIntsStruct)
(28,0)
(29,data[0].intOne = 0)
(30,5)
(31,1)
(32,staticFive)
(33,data = NULL)
(34,(twoIntsStruct *)
(35,printStructLine((twoIntsStruct *)
(36,data = (struct _twoIntsStruct *)
(37,sizeof(struct _twoIntsStruct)
(38,-1)
(39,data)
(40,(struct _twoIntsStruct *)
(41,)
(42,0)
(43,)
(44,100)
(45,0)
(46,data)
(47,exit(-1)
(48,data[0])
(49,&data[0])
(50,data[0])
(51,intOne)
(52,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
