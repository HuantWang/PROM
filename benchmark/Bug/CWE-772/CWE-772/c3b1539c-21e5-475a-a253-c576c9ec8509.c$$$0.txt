-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_17_bad()
{
    int i,j;
    char * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
71,74
72,73
74,75
77,78
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
93,94
94,95
96,97
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,67,69,73,75,76,80,82,87,88,91,92,95,97
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
58,59
58,60
85,86
85,87
89,90
89,91
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_17_bad(){    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_17_bad()
CWE401_Memory_Leak__char_malloc_17_bad
{    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(29,36,0)
(36,32,0)
(27,6,0)
(43,44,0)
(11,13,0)
(1,6,0)
(44,37,0)
(7,24,0)
(17,19,0)
(5,8,0)
(12,18,0)
(13,47,0)
(2,28,0)
(0,12,0)
(23,18,0)
(30,37,0)
(32,36,0)
(19,47,0)
(40,1,0)
(3,24,0)
(31,37,0)
(39,37,0)
(9,18,0)
(4,18,0)
(36,29,0)
(45,8,0)
(21,3,0)
(22,24,0)
(25,39,0)
(47,6,0)
(33,44,0)
(47,36,0)
(8,5,0)
(34,24,0)
(41,24,0)
(19,6,0)
(42,24,0)
(28,29,0)
(28,2,0)
(48,9,0)
(1,47,0)
(5,10,0)
(46,3,0)
(14,9,0)
(36,47,0)
(26,28,0)
(35,2,0)
(15,13,0)
(38,19,0)
(20,47,0)
(29,28,0)
(18,23,1)
(44,37,1)
(0,9,1)
(39,37,1)
(37,30,1)
(45,13,1)
(48,18,1)
(47,36,1)
(9,14,1)
(12,18,1)
(1,40,1)
(13,47,1)
(30,31,1)
(19,47,1)
(21,46,1)
(25,1,1)
(26,20,1)
(43,37,1)
(2,35,1)
(23,4,1)
(15,11,1)
(13,15,1)
(38,17,1)
(19,38,1)
(17,13,1)
(33,43,1)
(36,32,1)
(9,18,1)
(14,48,1)
(28,2,1)
(48,12,1)
(16,9,1)
(43,39,1)
(31,3,1)
(36,29,1)
(39,25,1)
(20,44,1)
(3,21,1)
(8,45,1)
(1,47,1)
(29,28,1)
(35,26,1)
(44,33,1)
(4,44,1)
(17,5,1)
(40,19,1)
(11,47,1)
(12,0,1)
(5,8,1)
(26,44,2)
(8,13,2)
(38,44,2)
(45,13,2)
(13,47,2)
(1,44,2)
(19,44,2)
(39,37,2)
(44,37,2)
(9,18,2)
(17,44,2)
(9,9,2)
(44,44,2)
(36,29,2)
(33,44,2)
(35,44,2)
(39,44,2)
(2,44,2)
(48,9,2)
(29,28,2)
(1,47,2)
(25,44,2)
(29,44,2)
(19,47,2)
(40,44,2)
(11,44,2)
(43,44,2)
(12,9,2)
(5,13,2)
(28,2,2)
(36,32,2)
(15,44,2)
(47,44,2)
(13,44,2)
(28,44,2)
(0,9,2)
(36,44,2)
(14,9,2)
(12,18,2)
(47,36,2)
(20,44,2)
(5,8,2)
-----------------------------------
(0,j)
(1,printLine(data)
(2,sizeof(char)
(3,data = NULL)
(4,j)
(5,exit(-1)
(6,)
(7,i)
(8,-1)
(9,j < 1)
(10,)
(11,data)
(12,j++)
(13,data == NULL)
(14,1)
(15,NULL)
(16,RET)
(17,data)
(18,j = 0)
(19,strcpy(data, "A String")
(20,data)
(21,NULL)
(22,for(j = 0; j < 1; j++)
(23,0)
(24,)
(25,i)
(26,100)
(27,if (data == NULL)
(28,100*sizeof(char)
(29,malloc(100*sizeof(char)
(30,0)
(31,i)
(32,char *)
(33,1)
(34,data)
(35,char)
(36,(char *)
(37,i = 0)
(38,"A String")
(39,i++)
(40,data)
(41,j)
(42,for(i = 0; i < 1; i++)
(43,i)
(44,i < 1)
(45,1)
(46,data)
(47,data = (char *)
(48,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
