-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_bad()
{
    struct _twoIntsStruct * data;
    CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine((twoIntsStruct *)&data[0]);
    myUnion.unionFirst = data;
    {
        struct _twoIntsStruct * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
5,15
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
92,93
92,94
93,94
93,95
94,95
97,98
99,100
99,101
100,101
101,102
101,103
102,103
104,105
104,106
104,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,95,96,98,103,105,106,110,111,112
-----computeFrom-----
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_bad(){    struct _twoIntsStruct * data;    CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    myUnion.unionFirst = data;    {        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_bad
{    struct _twoIntsStruct * data;    CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    myUnion.unionFirst = data;    {        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_unionType myUnion;
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_unionType myUnion;
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_unionType
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        struct _twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * data = myUnion.unionSecond;
struct _twoIntsStruct * data = myUnion.unionSecond;
struct _twoIntsStruct
_twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(9,21,0)
(5,35,0)
(51,49,0)
(2,52,0)
(11,47,0)
(26,47,0)
(24,44,0)
(37,30,0)
(3,35,0)
(56,49,0)
(14,2,0)
(21,28,0)
(25,43,0)
(46,35,0)
(49,51,0)
(44,24,0)
(32,24,0)
(40,39,0)
(48,56,0)
(42,30,0)
(23,46,0)
(17,15,0)
(39,41,0)
(54,30,0)
(8,12,0)
(0,27,0)
(19,5,0)
(46,30,0)
(50,31,0)
(56,40,0)
(7,35,0)
(47,35,0)
(24,32,0)
(53,52,0)
(15,30,0)
(29,5,0)
(42,24,0)
(33,7,0)
(52,2,0)
(12,44,0)
(40,56,0)
(18,31,0)
(10,7,0)
(39,40,0)
(22,30,0)
(49,56,0)
(21,7,0)
(35,30,0)
(45,30,0)
(28,30,0)
(4,47,0)
(20,15,0)
(47,4,0)
(43,25,0)
(24,42,0)
(44,12,0)
(34,52,0)
(27,30,0)
(2,27,0)
(35,39,0)
(6,43,0)
(55,22,0)
(4,22,0)
(38,4,0)
(31,46,0)
(41,39,0)
(7,21,0)
(1,28,0)
(16,12,0)
(12,35,0)
(25,13,0)
(39,35,0)
(1,21,1)
(8,22,1)
(33,10,1)
(17,20,1)
(29,19,1)
(21,9,1)
(47,26,1)
(21,7,1)
(11,28,1)
(16,8,1)
(42,24,1)
(4,47,1)
(7,35,1)
(12,16,1)
(44,12,1)
(5,35,1)
(43,6,1)
(52,34,1)
(46,35,1)
(47,35,1)
(6,5,1)
(3,15,1)
(24,44,1)
(14,46,1)
(36,2,1)
(46,23,1)
(40,56,1)
(53,14,1)
(15,17,1)
(39,40,1)
(49,48,1)
(56,49,1)
(38,47,1)
(5,29,1)
(31,50,1)
(49,51,1)
(12,35,1)
(25,43,1)
(23,31,1)
(26,11,1)
(10,25,1)
(7,33,1)
(34,53,1)
(55,4,1)
(9,7,1)
(2,52,1)
(48,3,1)
(18,42,1)
(39,41,1)
(28,1,1)
(35,39,1)
(22,55,1)
(24,32,1)
(19,35,1)
(10,5,1)
(4,38,1)
(50,18,1)
(47,35,2)
(2,52,2)
(43,5,2)
(25,43,2)
(6,5,2)
(39,41,2)
(39,40,2)
(42,24,2)
(12,35,2)
(49,51,2)
(24,44,2)
(44,12,2)
(4,47,2)
(35,39,2)
(25,5,2)
(21,7,2)
(46,35,2)
(40,56,2)
(24,32,2)
(56,49,2)
(5,35,2)
(7,35,2)
-----------------------------------
(0,data)
(1,0)
(2,* data = myUnion.unionSecond)
(3,data)
(4,data[0].intTwo)
(5,data == NULL)
(6,1)
(7,data[0])
(8,data)
(9,intOne)
(10,data)
(11,data)
(12,data[0])
(13,)
(14,data)
(15,data = NULL)
(16,0)
(17,NULL)
(18,myUnion)
(19,data)
(20,data)
(21,data[0].intOne)
(22,data[0].intTwo = 0)
(23,data)
(24,(twoIntsStruct *)
(25,exit(-1)
(26,0)
(27,)
(28,data[0].intOne = 0)
(29,NULL)
(30,)
(31,myUnion.unionFirst)
(32,twoIntsStruct *)
(33,0)
(34,unionSecond)
(35,data = (struct _twoIntsStruct *)
(36,RET)
(37,myUnion)
(38,intTwo)
(39,(struct _twoIntsStruct *)
(40,malloc(100*sizeof(struct _twoIntsStruct)
(41,struct _twoIntsStruct *)
(42,printStructLine((twoIntsStruct *)
(43,-1)
(44,&data[0])
(45,data)
(46,myUnion.unionFirst = data)
(47,data[0])
(48,100)
(49,sizeof(struct _twoIntsStruct)
(50,unionFirst)
(51,struct _twoIntsStruct)
(52,myUnion.unionSecond)
(53,myUnion)
(54,if (data == NULL)
(55,0)
(56,100*sizeof(struct _twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
