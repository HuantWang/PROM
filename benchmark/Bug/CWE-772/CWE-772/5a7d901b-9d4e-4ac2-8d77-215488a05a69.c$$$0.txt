-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_44_bad()
{
    wchar_t * data;
    /* define a function pointer */
    void (*funcPtr) (wchar_t *) = badSink;
    data = NULL;
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
35,36
35,37
37,38
37,39
37,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,38,39,41,45,48,50,54,56,60,62
-----computeFrom-----
28,29
28,30
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_44_bad(){    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__strdup_wchar_t_44_bad()
CWE401_Memory_Leak__strdup_wchar_t_44_bad
{    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    /* use the function pointer */    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = badSink;
void (*funcPtr) (wchar_t *) = badSink;
void
(*funcPtr) (wchar_t *) = badSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(2,12,0)
(11,5,0)
(15,12,0)
(6,12,0)
(18,1,0)
(19,0,0)
(0,12,0)
(4,0,0)
(10,3,0)
(16,5,0)
(3,14,0)
(17,2,0)
(9,8,0)
(13,14,0)
(1,3,0)
(8,14,0)
(14,12,0)
(3,1,0)
(8,3,0)
(2,3,0)
(5,12,0)
(3,1,1)
(18,10,1)
(7,2,1)
(10,13,1)
(2,17,1)
(8,9,1)
(5,16,1)
(8,3,1)
(9,3,1)
(17,8,1)
(16,11,1)
(4,5,1)
(0,19,1)
(13,0,1)
(2,3,1)
(1,18,1)
(19,4,1)
(8,3,2)
(3,1,2)
(2,3,2)
-----------------------------------
(0,data = NULL)
(1,wcsdup(myString)
(2,funcPtr(data)
(3,data = wcsdup(myString)
(4,data)
(5,(*funcPtr)
(6,funcPtr)
(7,RET)
(8,printWLine(data)
(9,data)
(10,data)
(11,funcPtr)
(12,)
(13,"myString")
(14,)
(15,data)
(16,badSink)
(17,data)
(18,myString)
(19,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
