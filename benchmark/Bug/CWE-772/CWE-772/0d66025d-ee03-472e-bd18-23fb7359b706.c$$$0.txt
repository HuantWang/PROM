-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_31_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
70,71
71,72
71,73
72,73
74,75
75,76
75,77
76,77
79,80
79,81
79,82
80,81
81,82
81,83
82,83
84,85
84,86
84,87
87,88
88,89
90,91
91,92
91,93
92,93
94,95
94,96
94,97
97,98
98,99
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,57,58,59,60,66,67,68,69,73,77,78,83,85,86,89,93,95,96,99,100
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_31_bad(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_31_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_31_bad
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(2,20,0)
(25,44,0)
(12,3,0)
(49,48,0)
(0,48,0)
(7,24,0)
(1,44,0)
(43,44,0)
(7,25,0)
(10,49,0)
(17,18,0)
(38,21,0)
(24,7,0)
(24,46,0)
(46,24,0)
(32,49,0)
(9,2,0)
(9,25,0)
(23,40,0)
(22,15,0)
(39,12,0)
(14,43,0)
(47,19,0)
(42,43,0)
(30,2,0)
(8,25,0)
(50,7,0)
(33,19,0)
(19,48,0)
(12,39,0)
(8,3,0)
(34,12,0)
(20,44,0)
(5,18,0)
(37,9,0)
(40,44,0)
(48,44,0)
(6,21,0)
(21,25,0)
(36,22,0)
(21,14,0)
(3,12,0)
(49,19,0)
(8,13,0)
(28,40,0)
(2,9,0)
(14,21,0)
(18,25,0)
(25,8,0)
(46,44,0)
(31,25,0)
(35,7,0)
(11,48,0)
(4,9,0)
(15,22,0)
(19,25,0)
(26,20,0)
(41,39,0)
(29,14,0)
(15,16,0)
(13,8,0)
(3,8,0)
(27,44,0)
(32,19,1)
(45,49,1)
(18,25,1)
(49,19,1)
(15,22,1)
(14,29,1)
(37,43,1)
(35,20,1)
(36,18,1)
(25,8,1)
(23,28,1)
(20,26,1)
(19,47,1)
(40,23,1)
(2,30,1)
(43,42,1)
(17,25,1)
(46,24,1)
(8,3,1)
(7,25,1)
(50,35,1)
(42,14,1)
(2,9,1)
(19,25,1)
(3,12,1)
(41,34,1)
(18,5,1)
(7,50,1)
(6,15,1)
(10,32,1)
(5,17,1)
(9,25,1)
(34,31,1)
(21,25,1)
(31,40,1)
(8,13,1)
(6,18,1)
(33,46,1)
(47,33,1)
(38,6,1)
(30,9,1)
(22,36,1)
(26,2,1)
(9,4,1)
(24,7,1)
(21,38,1)
(39,41,1)
(12,39,1)
(49,10,1)
(14,21,1)
(4,37,1)
(29,21,1)
(7,25,2)
(21,25,2)
(9,25,2)
(2,9,2)
(15,18,2)
(36,18,2)
(18,25,2)
(19,25,2)
(22,18,2)
(25,8,2)
(46,24,2)
(3,12,2)
(8,3,2)
(49,19,2)
(24,7,2)
(14,21,2)
(8,13,2)
(15,22,2)
(12,39,2)
-----------------------------------
(0,data)
(1,data)
(2,data[0].intTwo)
(3,malloc(100*sizeof(twoIntsStruct)
(4,0)
(5,NULL)
(6,data)
(7,data[0])
(8,(twoIntsStruct *)
(9,data[0])
(10,dataCopy)
(11,dataCopy)
(12,100*sizeof(twoIntsStruct)
(13,twoIntsStruct *)
(14,data[0].intOne)
(15,exit(-1)
(16,)
(17,data)
(18,data == NULL)
(19,* dataCopy = data)
(20,data[0].intTwo = 0)
(21,data[0])
(22,-1)
(23,NULL)
(24,&data[0])
(25,data = (twoIntsStruct *)
(26,0)
(27,if (data == NULL)
(28,data)
(29,intOne)
(30,intTwo)
(31,data)
(32,data)
(33,dataCopy)
(34,100)
(35,data)
(36,1)
(37,data)
(38,0)
(39,sizeof(twoIntsStruct)
(40,data = NULL)
(41,twoIntsStruct)
(42,0)
(43,data[0].intOne = 0)
(44,)
(45,RET)
(46,printStructLine(&data[0])
(47,data)
(48,)
(49,* data = dataCopy)
(50,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
