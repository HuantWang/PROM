-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_13_bad()
{
    int64_t * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,61,62,63,67,70,71,75,76,78
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_13_bad(){    int64_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_13_bad()
CWE401_Memory_Leak__int64_t_calloc_13_bad
{    int64_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,12,0)
(22,31,0)
(35,17,0)
(3,31,0)
(27,28,0)
(32,35,0)
(6,29,0)
(33,4,0)
(17,4,0)
(14,35,0)
(0,25,0)
(13,30,0)
(2,30,0)
(16,23,0)
(19,1,0)
(29,8,0)
(15,12,0)
(4,17,0)
(30,4,0)
(31,3,0)
(24,25,0)
(36,29,0)
(4,23,0)
(17,35,0)
(8,23,0)
(26,1,0)
(9,17,0)
(5,28,0)
(11,1,0)
(3,10,0)
(29,4,0)
(8,29,0)
(20,32,0)
(7,23,0)
(12,1,0)
(35,32,0)
(17,9,0)
(17,9,1)
(29,4,1)
(16,3,1)
(20,14,1)
(13,2,1)
(25,0,1)
(34,25,1)
(35,32,1)
(17,35,1)
(30,13,1)
(33,28,1)
(30,4,1)
(6,16,1)
(27,5,1)
(5,12,1)
(4,17,1)
(36,6,1)
(3,31,1)
(28,27,1)
(24,28,1)
(24,8,1)
(15,18,1)
(0,24,1)
(29,36,1)
(16,30,1)
(22,30,1)
(14,33,1)
(12,15,1)
(2,4,1)
(31,22,1)
(8,29,1)
(32,20,1)
(30,4,2)
(33,28,2)
(8,28,2)
(16,28,2)
(8,29,2)
(3,30,2)
(32,28,2)
(36,28,2)
(17,35,2)
(22,30,2)
(17,28,2)
(30,28,2)
(20,28,2)
(2,28,2)
(6,28,2)
(35,32,2)
(35,28,2)
(31,30,2)
(17,9,2)
(29,28,2)
(13,28,2)
(4,17,2)
(3,31,2)
(14,28,2)
(29,4,2)
(4,28,2)
-----------------------------------
(0,5)
(1,)
(2,data)
(3,exit(-1)
(4,data = (int64_t *)
(5,GLOBAL_CONST_FIVE)
(6,data)
(7,if (data == NULL)
(8,printLongLongLine(data[0])
(9,int64_t *)
(10,)
(11,if(GLOBAL_CONST_FIVE==5)
(12,data = NULL)
(13,NULL)
(14,100)
(15,NULL)
(16,L)
(17,(int64_t *)
(18,data)
(19,if(GLOBAL_CONST_FIVE==5)
(20,int64_t)
(21, sizeof(int64_t)
(22,1)
(23,)
(24,GLOBAL_CONST_FIVE)
(25,GLOBAL_CONST_FIVE==5)
(26,data)
(27,5)
(28,GLOBAL_CONST_FIVE==5)
(29,data[0])
(30,data == NULL)
(31,-1)
(32,sizeof(int64_t)
(33,data)
(34,RET)
(35,calloc(100, sizeof(int64_t)
(36,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
