-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
    else
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            wchar_t * tmpData;
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
107,110
107,111
107,112
107,113
107,114
107,115
108,109
109,110
109,111
111,112
111,113
111,114
114,115
115,116
115,117
116,117
116,118
118,119
120,121
120,122
121,122
123,124
123,125
125,126
126,127
126,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
136,137
137,138
137,139
138,139
140,141
142,143
143,144
143,145
145,146
145,147
148,149
149,150
149,151
149,152
150,151
152,153
155,156
156,157
156,158
157,158
159,160
161,162
162,163
162,164
163,164
165,166
165,167
166,167
166,168
168,169
170,171
170,172
170,173
171,172
173,174
175,176
175,177
176,177
178,179
179,180
179,181
182,183
182,184
183,184
183,185
184,185
186,187
188,189
188,190
188,191
189,190
190,191
190,192
191,192
193,194
195,196
196,197
196,198
196,199
197,198
199,200
202,203
203,204
203,205
204,205
206,207
208,209
209,210
209,211
210,211
212,213
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105,110,112,113,117,119,122,124,127,128,132,134,139,141,144,146,147,151,153,154,158,160,164,167,169,172,174,177,180,181,185,187,192,194,198,200,201,205,207,211,213
-----computeFrom-----
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
123,124
123,125
130,131
130,132
162,163
162,164
175,176
175,177
183,184
183,185
190,191
190,192
-----guardedBy-----
83,105
185,194
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }    else    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_12_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }    else    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }    }}
if(globalReturnsTrueOrFalse())    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }    else    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            wchar_t * tmpData;            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }            free(data);        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wchar_t * tmpData;
wchar_t * tmpData;
wchar_t
* tmpData
*
tmpData
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
tmpData
tmpData
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,77,0)
(83,65,0)
(14,82,0)
(17,8,0)
(46,87,0)
(72,75,0)
(36,78,0)
(74,3,0)
(1,39,0)
(60,83,0)
(89,61,0)
(54,41,0)
(18,21,0)
(25,72,0)
(78,53,0)
(75,52,0)
(12,57,0)
(81,19,0)
(80,14,0)
(65,45,0)
(48,5,0)
(5,48,0)
(63,8,0)
(55,44,0)
(10,87,0)
(62,14,0)
(57,12,0)
(72,65,0)
(66,61,0)
(12,72,0)
(9,52,0)
(58,70,0)
(70,23,0)
(31,64,0)
(11,43,0)
(87,48,0)
(86,43,0)
(68,12,0)
(3,87,0)
(39,1,0)
(45,50,0)
(2,54,0)
(40,65,0)
(19,4,0)
(45,65,0)
(77,15,0)
(59,79,0)
(41,54,0)
(49,1,0)
(61,86,0)
(37,53,0)
(48,87,0)
(52,14,0)
(39,7,0)
(20,64,0)
(48,38,0)
(34,86,0)
(0,14,0)
(76,75,0)
(52,75,0)
(87,43,0)
(38,48,0)
(8,52,0)
(88,2,0)
(43,35,0)
(26,65,0)
(33,37,0)
(55,86,0)
(3,55,0)
(16,43,0)
(41,45,0)
(64,38,0)
(29,20,0)
(40,14,0)
(78,86,0)
(30,24,0)
(72,12,0)
(37,86,0)
(45,41,0)
(24,14,0)
(75,76,0)
(40,70,0)
(44,55,0)
(54,2,0)
(6,77,0)
(71,70,0)
(77,3,0)
(84,40,0)
(70,52,0)
(24,65,0)
(4,28,0)
(46,43,0)
(42,83,0)
(75,72,0)
(86,55,0)
(69,54,0)
(22,15,0)
(32,43,0)
(79,70,0)
(73,14,0)
(38,64,0)
(64,20,0)
(47,10,0)
(65,14,0)
(4,19,0)
(51,87,0)
(55,3,0)
(15,77,0)
(79,23,0)
(13,57,0)
(56,10,0)
(67,46,0)
(50,45,0)
(27,37,1)
(61,86,1)
(3,77,1)
(56,87,1)
(60,65,1)
(39,1,1)
(40,70,1)
(47,56,1)
(34,46,1)
(38,64,1)
(19,81,1)
(48,38,1)
(88,69,1)
(15,22,1)
(68,25,1)
(1,49,1)
(78,86,1)
(65,45,1)
(75,72,1)
(31,51,1)
(24,30,1)
(72,65,1)
(10,87,1)
(9,24,1)
(25,9,1)
(83,42,1)
(66,86,1)
(78,36,1)
(41,54,1)
(17,52,1)
(61,89,1)
(59,70,1)
(45,50,1)
(79,70,1)
(72,12,1)
(70,52,1)
(20,29,1)
(4,19,1)
(81,83,1)
(8,63,1)
(30,4,1)
(24,65,1)
(6,74,1)
(40,84,1)
(30,83,1)
(75,76,1)
(27,61,1)
(49,10,1)
(84,79,1)
(64,20,1)
(55,3,1)
(67,10,1)
(86,55,1)
(42,60,1)
(54,2,1)
(26,85,1)
(67,39,1)
(83,65,1)
(46,87,1)
(79,59,1)
(36,61,1)
(40,65,1)
(71,8,1)
(8,52,1)
(27,40,1)
(13,68,1)
(29,31,1)
(63,17,1)
(84,8,1)
(57,13,1)
(10,47,1)
(45,41,1)
(48,5,1)
(52,75,1)
(87,48,1)
(70,58,1)
(22,6,1)
(12,57,1)
(2,88,1)
(69,26,1)
(89,66,1)
(77,15,1)
(74,34,1)
(58,71,1)
(33,78,1)
(37,33,1)
(55,44,1)
(37,86,1)
(3,87,1)
(51,85,1)
(46,67,1)
(65,85,2)
(68,85,2)
(61,86,2)
(74,85,2)
(30,85,2)
(40,65,2)
(40,85,2)
(3,85,2)
(8,52,2)
(39,10,2)
(25,85,2)
(34,85,2)
(17,85,2)
(54,2,2)
(81,83,2)
(55,44,2)
(75,72,2)
(37,86,2)
(1,10,2)
(45,85,2)
(54,85,2)
(83,65,2)
(59,8,2)
(15,85,2)
(52,75,2)
(64,20,2)
(87,85,2)
(31,85,2)
(3,87,2)
(77,85,2)
(20,85,2)
(12,57,2)
(42,85,2)
(51,85,2)
(79,8,2)
(8,85,2)
(83,85,2)
(22,85,2)
(10,85,2)
(46,85,2)
(3,77,2)
(45,50,2)
(55,85,2)
(39,1,2)
(75,85,2)
(75,76,2)
(41,85,2)
(69,85,2)
(78,86,2)
(36,61,2)
(12,85,2)
(38,64,2)
(89,85,2)
(48,5,2)
(72,65,2)
(29,85,2)
(71,8,2)
(78,61,2)
(56,85,2)
(33,61,2)
(4,19,2)
(24,85,2)
(87,48,2)
(70,52,2)
(10,87,2)
(41,54,2)
(6,85,2)
(26,85,2)
(65,45,2)
(72,12,2)
(72,85,2)
(40,70,2)
(2,85,2)
(37,61,2)
(48,85,2)
(86,85,2)
(88,85,2)
(19,83,2)
(79,70,2)
(84,85,2)
(55,3,2)
(48,38,2)
(45,41,2)
(86,55,2)
(13,85,2)
(63,85,2)
(52,85,2)
(57,85,2)
(24,65,2)
(67,85,2)
(61,85,2)
(66,85,2)
(9,85,2)
(60,85,2)
(4,83,2)
(49,10,2)
(46,87,2)
(64,85,2)
(70,8,2)
(77,15,2)
(47,85,2)
(58,8,2)
(38,85,2)
-----------------------------------
(0,if (tmpData != NULL)
(1,-1)
(2,sizeof(wchar_t)
(3,realloc(data, (130000)
(4,exit(-1)
(5,wchar_t *)
(6,130000)
(7,)
(8,tmpData != NULL)
(9,tmpData)
(10,data == NULL)
(11,if (data != NULL)
(12,(130000)
(13,wchar_t)
(14,)
(15,sizeof(wchar_t)
(16,if (data == NULL)
(17,tmpData)
(18,if(globalReturnsTrueOrFalse()
(19,-1)
(20,sizeof(wchar_t)
(21,)
(22,wchar_t)
(23,)
(24,printWLine(data)
(25,data)
(26,data)
(27,RET)
(28,)
(29,wchar_t)
(30,data)
(31,100)
(32,data)
(33,data)
(34,data)
(35,)
(36,data)
(37,free(data)
(38,malloc(100*sizeof(wchar_t)
(39,exit(-1)
(40,free(data)
(41,malloc(100*sizeof(wchar_t)
(42,NULL)
(43,)
(44,wchar_t *)
(45,(wchar_t *)
(46,printWLine(data)
(47,NULL)
(48,(wchar_t *)
(49,1)
(50,wchar_t *)
(51,data)
(52,tmpData = (wchar_t *)
(53,)
(54,100*sizeof(wchar_t)
(55,(wchar_t *)
(56,data)
(57,sizeof(wchar_t)
(58,tmpData)
(59,data)
(60,data)
(61,data != NULL)
(62,if (data == NULL)
(63,NULL)
(64,100*sizeof(wchar_t)
(65,* data = (wchar_t *)
(66,data)
(67,data)
(68,130000)
(69,100)
(70,data = tmpData)
(71,data)
(72,realloc(data, (130000)
(73,data)
(74,data)
(75,(wchar_t *)
(76,wchar_t *)
(77,(130000)
(78,printWLine(data)
(79,printWLine(data)
(80,tmpData)
(81,1)
(82,)
(83,data == NULL)
(84,data)
(85,globalReturnsTrueOrFalse()
(86,data = (wchar_t *)
(87,* data = (wchar_t *)
(88,wchar_t)
(89,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
