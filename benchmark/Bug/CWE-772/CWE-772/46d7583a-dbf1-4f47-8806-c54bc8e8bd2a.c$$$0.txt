-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
81,82
82,83
82,84
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
100,101
102,103
104,105
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,70,73,75,78,80,83,84,88,90,91,95,97,101,103,108,110
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
68,69
68,70
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__wchar_t_calloc_12_bad()
CWE401_Memory_Leak__wchar_t_calloc_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(42,1,0)
(31,12,0)
(21,11,0)
(2,22,0)
(33,35,0)
(20,15,0)
(30,12,0)
(27,42,0)
(4,13,0)
(28,1,0)
(40,43,0)
(13,7,0)
(7,13,0)
(0,10,0)
(28,20,0)
(29,31,0)
(5,31,0)
(25,12,0)
(14,3,0)
(19,8,0)
(2,16,0)
(34,37,0)
(35,12,0)
(25,3,0)
(20,28,0)
(12,13,0)
(1,42,0)
(35,8,0)
(8,20,0)
(43,7,0)
(39,11,0)
(38,25,0)
(18,1,0)
(7,43,0)
(17,22,0)
(10,23,0)
(8,23,0)
(41,11,0)
(20,8,0)
(22,2,0)
(35,6,0)
(24,37,0)
(37,11,0)
(15,20,0)
(10,8,0)
(13,4,0)
(13,12,0)
(9,7,0)
(12,3,0)
(1,28,0)
(28,1,1)
(44,35,1)
(30,26,1)
(20,28,1)
(40,9,1)
(8,20,1)
(24,34,1)
(7,43,1)
(9,30,1)
(18,19,1)
(32,10,1)
(13,4,1)
(10,0,1)
(31,5,1)
(35,33,1)
(38,2,1)
(44,32,1)
(42,27,1)
(35,12,1)
(2,22,1)
(35,8,1)
(33,32,1)
(5,29,1)
(17,31,1)
(31,12,1)
(12,13,1)
(0,8,1)
(1,42,1)
(38,31,1)
(10,8,1)
(25,38,1)
(22,17,1)
(29,12,1)
(13,7,1)
(25,12,1)
(19,26,1)
(26,37,1)
(43,40,1)
(32,25,1)
(37,24,1)
(27,18,1)
(20,15,1)
(1,26,2)
(20,15,2)
(43,26,2)
(40,26,2)
(12,26,2)
(9,26,2)
(13,7,2)
(35,12,2)
(25,26,2)
(31,26,2)
(7,43,2)
(31,12,2)
(13,26,2)
(28,26,2)
(0,26,2)
(27,26,2)
(28,1,2)
(2,22,2)
(33,32,2)
(5,26,2)
(20,28,2)
(1,42,2)
(10,26,2)
(38,26,2)
(19,26,2)
(13,4,2)
(8,26,2)
(35,8,2)
(12,13,2)
(18,26,2)
(35,32,2)
(7,26,2)
(20,26,2)
(22,31,2)
(25,12,2)
(42,26,2)
(29,26,2)
(17,31,2)
(2,31,2)
(8,20,2)
(30,26,2)
(10,8,2)
-----------------------------------
(0,data)
(1,100*sizeof(wchar_t)
(2,exit(-1)
(3,)
(4,wchar_t *)
(5,NULL)
(6,)
(7,calloc(100, sizeof(wchar_t)
(8,data = (wchar_t *)
(9,100)
(10,printWLine(data)
(11,)
(12,data = (wchar_t *)
(13,(wchar_t *)
(14,if (data == NULL)
(15,wchar_t *)
(16,)
(17,1)
(18,100)
(19,data)
(20,(wchar_t *)
(21,if(globalReturnsTrueOrFalse()
(22,-1)
(23,)
(24,NULL)
(25,printWLine(data)
(26,globalReturnsTrueOrFalse()
(27,wchar_t)
(28,ALLOCA(100*sizeof(wchar_t)
(29,data)
(30,data)
(31,data == NULL)
(32,globalReturnsTrueOrFalse()
(33,data)
(34,data)
(35,free(data)
(36, sizeof(wchar_t)
(37,data = NULL)
(38,data)
(39,if(globalReturnsTrueOrFalse()
(40,wchar_t)
(41,data)
(42,sizeof(wchar_t)
(43,sizeof(wchar_t)
(44,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
