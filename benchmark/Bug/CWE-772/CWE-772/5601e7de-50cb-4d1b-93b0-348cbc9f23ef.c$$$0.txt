-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_14_bad()
{
    char * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
75,76
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,60,62,63,67,69,73,74,76
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_14_bad(){    char * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_14_bad()
CWE401_Memory_Leak__char_realloc_14_bad
{    char * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(5,11,0)
(21,17,0)
(16,22,0)
(24,20,0)
(17,21,0)
(5,12,0)
(4,19,0)
(19,4,0)
(3,21,0)
(26,11,0)
(11,34,0)
(28,2,0)
(6,36,0)
(12,5,0)
(27,8,0)
(17,35,0)
(3,36,0)
(31,21,0)
(32,12,0)
(11,17,0)
(30,8,0)
(1,21,0)
(9,3,0)
(0,22,0)
(7,2,0)
(11,5,0)
(23,31,0)
(13,22,0)
(37,19,0)
(33,34,0)
(2,36,0)
(14,31,0)
(34,22,0)
(2,21,0)
(4,15,0)
(21,36,0)
(18,5,0)
(17,11,0)
(29,34,0)
(25,20,0)
(35,17,0)
(25,34,1)
(21,17,1)
(27,3,1)
(11,34,1)
(10,8,1)
(17,11,1)
(9,2,1)
(2,28,1)
(34,33,1)
(8,30,1)
(31,23,1)
(3,21,1)
(19,37,1)
(28,7,1)
(31,21,1)
(1,20,1)
(4,19,1)
(5,12,1)
(37,31,1)
(7,4,1)
(26,1,1)
(32,18,1)
(11,5,1)
(12,32,1)
(33,29,1)
(30,27,1)
(18,26,1)
(23,14,1)
(2,21,1)
(3,9,1)
(27,20,1)
(14,21,1)
(17,35,1)
(20,24,1)
(24,25,1)
(7,31,1)
(3,20,2)
(17,11,2)
(11,34,2)
(21,20,2)
(3,21,2)
(5,20,2)
(5,12,2)
(31,21,2)
(4,31,2)
(28,20,2)
(18,20,2)
(21,17,2)
(1,20,2)
(17,35,2)
(4,19,2)
(23,20,2)
(11,5,2)
(19,31,2)
(11,20,2)
(12,20,2)
(17,20,2)
(7,20,2)
(9,20,2)
(32,20,2)
(26,20,2)
(2,21,2)
(37,31,2)
(31,20,2)
(2,20,2)
(14,20,2)
-----------------------------------
(0,data)
(1,data)
(2,strcpy(data, "A String")
(3,printLine(data)
(4,exit(-1)
(5,100*sizeof(char)
(6,if (data == NULL)
(7,data)
(8,globalFive==5)
(9,data)
(10,RET)
(11,realloc(data, 100*sizeof(char)
(12,sizeof(char)
(13,if(globalFive==5)
(14,data)
(15,)
(16,if(globalFive==5)
(17,(char *)
(18,100)
(19,-1)
(20,globalFive==5)
(21,data = (char *)
(22,)
(23,NULL)
(24,5)
(25,globalFive)
(26,data)
(27,globalFive)
(28,"A String")
(29,data)
(30,5)
(31,data == NULL)
(32,char)
(33,NULL)
(34,data = NULL)
(35,char *)
(36,)
(37,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
