-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_09_bad()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,58,60,61,65,67,70,72
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_09_bad(){    char * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_09_bad()
CWE401_Memory_Leak__char_realloc_09_bad
{    char * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(30,32,0)
(32,15,0)
(20,6,0)
(26,5,0)
(7,5,0)
(18,29,0)
(24,4,0)
(33,15,0)
(1,33,0)
(16,11,0)
(23,19,0)
(5,8,0)
(25,6,0)
(23,26,0)
(26,6,0)
(3,8,0)
(10,23,0)
(32,19,0)
(6,31,0)
(33,19,0)
(8,5,0)
(19,15,0)
(29,24,0)
(17,31,0)
(28,32,0)
(14,11,0)
(23,10,0)
(9,19,0)
(2,26,0)
(26,23,0)
(22,31,0)
(5,26,0)
(11,19,0)
(27,31,0)
(19,23,0)
(24,29,0)
(12,15,0)
(0,33,1)
(8,3,1)
(26,6,1)
(6,20,1)
(33,19,1)
(7,2,1)
(1,32,1)
(19,23,1)
(16,19,1)
(11,19,1)
(33,1,1)
(32,19,1)
(13,6,1)
(21,0,1)
(14,16,1)
(20,25,1)
(5,8,1)
(29,18,1)
(28,30,1)
(9,13,1)
(26,5,1)
(3,7,1)
(30,11,1)
(24,29,1)
(11,14,1)
(2,9,1)
(30,24,1)
(32,28,1)
(18,11,1)
(23,10,1)
(23,26,1)
(0,13,1)
(11,19,2)
(28,13,2)
(24,29,2)
(32,13,2)
(26,13,2)
(32,19,2)
(3,13,2)
(23,10,2)
(14,13,2)
(29,11,2)
(33,13,2)
(33,19,2)
(24,11,2)
(9,13,2)
(5,13,2)
(7,13,2)
(18,11,2)
(2,13,2)
(16,13,2)
(23,13,2)
(8,13,2)
(1,13,2)
(19,23,2)
(11,13,2)
(26,5,2)
(30,13,2)
(19,13,2)
(23,26,2)
(26,6,2)
(5,8,2)
-----------------------------------
(0,GLOBAL_CONST_TRUE)
(1,data)
(2,data)
(3,char)
(4,)
(5,100*sizeof(char)
(6,data = NULL)
(7,100)
(8,sizeof(char)
(9,data)
(10,char *)
(11,data == NULL)
(12,if (data == NULL)
(13,GLOBAL_CONST_TRUE)
(14,NULL)
(15,)
(16,data)
(17,if(GLOBAL_CONST_TRUE)
(18,1)
(19,data = (char *)
(20,NULL)
(21,RET)
(22,data)
(23,(char *)
(24,exit(-1)
(25,data)
(26,realloc(data, 100*sizeof(char)
(27,if(GLOBAL_CONST_TRUE)
(28,"A String")
(29,-1)
(30,data)
(31,)
(32,strcpy(data, "A String")
(33,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
