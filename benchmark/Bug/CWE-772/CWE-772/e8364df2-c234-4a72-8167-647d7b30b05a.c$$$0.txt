-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_16_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
89,90
89,91
91,92
91,93
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,88,90,92,93
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_16_bad(){    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_16_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_16_bad
{    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(31,16,0)
(47,3,0)
(15,36,0)
(10,36,0)
(43,7,0)
(9,3,0)
(20,23,0)
(23,20,0)
(14,26,0)
(4,49,0)
(43,18,0)
(13,35,0)
(8,20,0)
(25,37,0)
(44,40,0)
(48,20,0)
(2,49,0)
(50,22,0)
(44,6,0)
(27,22,0)
(21,40,0)
(1,44,0)
(5,40,0)
(36,23,0)
(46,6,0)
(24,16,0)
(36,15,0)
(35,14,0)
(7,43,0)
(39,34,0)
(23,26,0)
(37,38,0)
(20,48,0)
(8,33,0)
(34,33,0)
(20,8,0)
(16,3,0)
(37,49,0)
(49,23,0)
(35,15,0)
(38,26,0)
(22,23,0)
(14,35,0)
(28,36,0)
(42,26,0)
(33,8,0)
(33,34,0)
(11,3,0)
(34,39,0)
(12,7,0)
(30,19,0)
(40,44,0)
(45,33,0)
(41,26,0)
(35,13,0)
(15,35,0)
(0,23,0)
(40,23,0)
(49,37,0)
(32,38,0)
(6,26,0)
(5,22,1)
(36,23,1)
(17,30,1)
(32,37,1)
(8,33,1)
(35,15,1)
(15,36,1)
(43,7,1)
(36,10,1)
(34,39,1)
(4,2,1)
(27,50,1)
(51,29,1)
(29,16,1)
(20,48,1)
(24,31,1)
(50,23,1)
(49,23,1)
(14,35,1)
(40,21,1)
(16,24,1)
(44,1,1)
(37,49,1)
(0,29,1)
(7,12,1)
(21,5,1)
(44,40,1)
(51,41,1)
(5,43,1)
(45,0,1)
(34,45,1)
(22,27,1)
(22,23,1)
(17,51,1)
(37,25,1)
(46,44,1)
(30,51,1)
(10,28,1)
(49,4,1)
(40,23,1)
(38,32,1)
(25,49,1)
(2,6,1)
(6,46,1)
(23,20,1)
(41,14,1)
(12,22,1)
(1,40,1)
(28,38,1)
(35,13,1)
(20,8,1)
(33,34,1)
(8,29,2)
(22,29,2)
(15,29,2)
(40,29,2)
(14,29,2)
(23,29,2)
(35,13,2)
(30,51,2)
(22,23,2)
(1,29,2)
(20,8,2)
(5,29,2)
(15,36,2)
(21,29,2)
(14,35,2)
(34,29,2)
(49,23,2)
(45,29,2)
(23,20,2)
(20,29,2)
(8,33,2)
(43,22,2)
(36,23,2)
(4,29,2)
(20,48,2)
(32,29,2)
(49,29,2)
(43,7,2)
(6,29,2)
(36,29,2)
(44,29,2)
(25,29,2)
(34,39,2)
(41,29,2)
(0,29,2)
(40,23,2)
(33,29,2)
(7,22,2)
(12,22,2)
(33,34,2)
(38,29,2)
(2,29,2)
(35,29,2)
(44,40,2)
(37,49,2)
(27,29,2)
(28,29,2)
(46,29,2)
(10,29,2)
(35,15,2)
(37,29,2)
(50,29,2)
-----------------------------------
(0,data)
(1,intOne)
(2,data)
(3,)
(4,0)
(5,data)
(6,data[0].intOne = 0)
(7,-1)
(8,malloc(100*sizeof(struct _twoIntsStruct)
(9,data)
(10,0)
(11,while(1)
(12,1)
(13,twoIntsStruct *)
(14,printStructLine((twoIntsStruct *)
(15,&data[0])
(16,data = NULL)
(17,RET)
(18,)
(19,)
(20,(struct _twoIntsStruct *)
(21,0)
(22,data == NULL)
(23,data = (struct _twoIntsStruct *)
(24,NULL)
(25,intTwo)
(26,)
(27,NULL)
(28,data)
(29,1)
(30,break;)
(31,data)
(32,0)
(33,100*sizeof(struct _twoIntsStruct)
(34,sizeof(struct _twoIntsStruct)
(35,(twoIntsStruct *)
(36,data[0])
(37,data[0].intTwo)
(38,data[0].intTwo = 0)
(39,struct _twoIntsStruct)
(40,data[0])
(41,break;)
(42,if (data == NULL)
(43,exit(-1)
(44,data[0].intOne)
(45,100)
(46,0)
(47,while(1)
(48,struct _twoIntsStruct *)
(49,data[0])
(50,data)
(51,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
