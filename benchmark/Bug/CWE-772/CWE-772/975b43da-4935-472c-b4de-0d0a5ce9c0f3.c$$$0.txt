-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,49,50,51,55,58,59,63,66,68,71,73,76,79,80,84,86,92,93,94,98,101,102,106,108
-----computeFrom-----
26,27
26,28
33,34
33,35
46,47
46,48
61,62
61,63
74,75
74,76
82,83
82,84
89,90
89,91
-----guardedBy-----
84,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_04_bad(){    if(STATIC_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_04_bad()
CWE401_Memory_Leak__malloc_realloc_int_04_bad
{    if(STATIC_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(STATIC_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(35,43,0)
(41,21,0)
(31,43,0)
(22,11,0)
(19,31,0)
(51,17,0)
(34,45,0)
(12,55,0)
(56,50,0)
(51,2,0)
(40,45,0)
(17,51,0)
(2,55,0)
(6,35,0)
(3,5,0)
(33,3,0)
(50,56,0)
(27,37,0)
(42,5,0)
(42,34,0)
(39,42,0)
(46,30,0)
(50,43,0)
(15,5,0)
(35,15,0)
(56,37,0)
(55,2,0)
(43,37,0)
(43,17,0)
(9,38,0)
(38,45,0)
(24,41,0)
(3,34,0)
(25,3,0)
(0,5,0)
(7,5,0)
(13,31,0)
(28,30,0)
(29,50,0)
(11,22,0)
(50,21,0)
(20,11,0)
(49,0,0)
(5,37,0)
(5,15,0)
(48,37,0)
(4,2,0)
(47,28,0)
(42,40,0)
(38,5,0)
(17,53,0)
(17,43,0)
(15,10,0)
(35,30,0)
(1,37,0)
(21,37,0)
(36,21,0)
(52,0,0)
(14,58,0)
(57,42,0)
(23,50,0)
(30,28,0)
(30,35,0)
(22,54,0)
(42,21,0)
(53,17,0)
(2,51,0)
(8,41,0)
(44,43,0)
(10,15,0)
(40,42,0)
(15,35,0)
(41,43,0)
(37,16,0)
(18,34,0)
(42,21,1)
(23,21,1)
(4,44,1)
(18,3,1)
(20,31,1)
(38,9,1)
(15,10,1)
(55,12,1)
(31,43,1)
(50,21,1)
(46,6,1)
(17,51,1)
(40,42,1)
(42,5,1)
(5,15,1)
(33,0,1)
(41,8,1)
(21,36,1)
(24,31,1)
(49,52,1)
(15,35,1)
(34,18,1)
(32,0,1)
(0,49,1)
(32,26,1)
(12,4,1)
(50,43,1)
(52,5,1)
(44,26,1)
(29,23,1)
(25,33,1)
(0,5,1)
(42,57,1)
(43,17,1)
(41,43,1)
(50,29,1)
(28,47,1)
(7,56,1)
(36,41,1)
(31,19,1)
(3,5,1)
(2,55,1)
(24,22,1)
(9,40,1)
(6,7,1)
(11,20,1)
(30,28,1)
(39,34,1)
(56,50,1)
(32,38,1)
(47,46,1)
(38,5,1)
(42,34,1)
(57,39,1)
(13,43,1)
(22,11,1)
(51,2,1)
(3,25,1)
(19,13,1)
(17,53,1)
(35,30,1)
(35,43,1)
(8,24,1)
(50,21,2)
(35,43,2)
(35,30,2)
(15,26,2)
(3,0,2)
(56,26,2)
(42,21,2)
(17,53,2)
(29,26,2)
(25,0,2)
(36,26,2)
(51,26,2)
(20,31,2)
(31,43,2)
(35,26,2)
(49,26,2)
(22,11,2)
(30,26,2)
(17,26,2)
(43,26,2)
(30,28,2)
(21,26,2)
(46,26,2)
(5,15,2)
(34,0,2)
(42,0,2)
(51,2,2)
(19,26,2)
(3,5,2)
(42,34,2)
(5,26,2)
(7,26,2)
(17,51,2)
(31,26,2)
(6,26,2)
(28,26,2)
(38,0,2)
(52,26,2)
(4,26,2)
(23,26,2)
(15,35,2)
(11,31,2)
(15,10,2)
(2,55,2)
(33,0,2)
(40,42,2)
(50,26,2)
(57,0,2)
(42,5,2)
(50,43,2)
(40,0,2)
(56,50,2)
(9,0,2)
(0,5,2)
(24,26,2)
(39,0,2)
(55,26,2)
(22,31,2)
(41,43,2)
(13,26,2)
(2,26,2)
(41,26,2)
(38,5,2)
(18,0,2)
(12,26,2)
(47,26,2)
(0,26,2)
(44,26,2)
(43,17,2)
(8,26,2)
-----------------------------------
(0,data != NULL)
(1,data)
(2,100*sizeof(int)
(3,data[0])
(4,100)
(5,data = (int *)
(6,data)
(7,data)
(8,0)
(9,data)
(10,int *)
(11,-1)
(12,int)
(13,data)
(14,if(STATIC_CONST_TRUE)
(15,(int *)
(16,)
(17,(int *)
(18,10)
(19,NULL)
(20,1)
(21,data[0] = 5)
(22,exit(-1)
(23,data)
(24,data)
(25,0)
(26,STATIC_CONST_TRUE)
(27,if (data == NULL)
(28,sizeof(int)
(29,0)
(30,(130000)
(31,data == NULL)
(32,RET)
(33,data)
(34,data[0] = 10)
(35,realloc(data, (130000)
(36,5)
(37,)
(38,free(data)
(39,data)
(40,printIntLine(data[0])
(41,data[0])
(42,data[0])
(43,* data = (int *)
(44,data)
(45,)
(46,130000)
(47,int)
(48,if (data != NULL)
(49,NULL)
(50,data[0])
(51,malloc(100*sizeof(int)
(52,data)
(53,int *)
(54,)
(55,sizeof(int)
(56,printIntLine(data[0])
(57,0)
(58,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
