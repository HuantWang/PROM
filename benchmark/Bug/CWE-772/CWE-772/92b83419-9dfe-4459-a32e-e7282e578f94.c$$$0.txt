-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_05_bad()
{
    if(staticTrue)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_05_bad(){    if(staticTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_05_bad()
CWE401_Memory_Leak__malloc_realloc_char_05_bad
{    if(staticTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(staticTrue)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
staticTrue
staticTrue
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(18,30,0)
(46,5,0)
(30,18,0)
(14,36,0)
(34,22,0)
(27,20,0)
(20,3,0)
(11,22,0)
(13,39,0)
(39,13,0)
(3,29,0)
(46,2,0)
(39,18,0)
(43,3,0)
(20,15,0)
(41,48,0)
(18,39,0)
(30,24,0)
(18,15,0)
(37,14,0)
(12,20,0)
(23,11,0)
(22,39,0)
(49,11,0)
(15,33,0)
(33,15,0)
(39,22,0)
(33,16,0)
(15,3,0)
(47,21,0)
(8,30,0)
(11,36,0)
(0,18,0)
(24,30,0)
(21,15,0)
(22,3,0)
(33,5,0)
(25,9,0)
(35,50,0)
(50,36,0)
(4,21,0)
(50,22,0)
(44,15,0)
(28,34,0)
(16,33,0)
(31,3,0)
(2,46,0)
(26,46,0)
(14,22,0)
(5,33,0)
(48,41,0)
(7,34,0)
(40,15,0)
(6,41,0)
(38,3,0)
(44,3,0)
(17,44,0)
(19,2,0)
(48,32,0)
(45,22,0)
(5,46,0)
(10,24,0)
(17,20,1)
(12,27,1)
(39,13,1)
(1,34,1)
(37,50,1)
(35,11,1)
(50,35,1)
(45,44,1)
(40,42,1)
(14,37,1)
(10,8,1)
(48,41,1)
(1,14,1)
(26,40,1)
(46,2,1)
(11,22,1)
(33,5,1)
(24,10,1)
(18,15,1)
(23,49,1)
(34,22,1)
(11,23,1)
(49,34,1)
(27,48,1)
(14,22,1)
(18,30,1)
(21,15,1)
(20,12,1)
(50,22,1)
(19,26,1)
(5,46,1)
(21,47,1)
(39,18,1)
(6,21,1)
(1,42,1)
(15,33,1)
(44,15,1)
(41,6,1)
(28,22,1)
(8,0,1)
(22,39,1)
(0,45,1)
(34,7,1)
(2,19,1)
(30,24,1)
(20,15,1)
(47,4,1)
(7,28,1)
(27,21,1)
(33,16,1)
(44,17,1)
(4,15,1)
(19,42,2)
(18,15,2)
(30,42,2)
(15,42,2)
(26,42,2)
(48,21,2)
(48,41,2)
(22,39,2)
(34,42,2)
(44,15,2)
(20,15,2)
(4,42,2)
(21,42,2)
(0,42,2)
(11,34,2)
(22,42,2)
(40,42,2)
(5,42,2)
(46,2,2)
(39,42,2)
(12,42,2)
(37,34,2)
(11,22,2)
(24,42,2)
(18,30,2)
(33,16,2)
(50,22,2)
(20,42,2)
(23,34,2)
(6,21,2)
(33,42,2)
(47,42,2)
(5,46,2)
(21,15,2)
(50,34,2)
(7,42,2)
(17,42,2)
(14,34,2)
(45,42,2)
(34,22,2)
(49,34,2)
(27,42,2)
(2,42,2)
(41,21,2)
(35,34,2)
(39,18,2)
(39,13,2)
(18,42,2)
(28,42,2)
(44,42,2)
(10,42,2)
(30,24,2)
(14,22,2)
(33,5,2)
(15,33,2)
(8,42,2)
(46,42,2)
-----------------------------------
(0,data)
(1,RET)
(2,sizeof(char)
(3,)
(4,data)
(5,malloc(100*sizeof(char)
(6,1)
(7,NULL)
(8,130000)
(9,)
(10,char)
(11,strcpy(data, "New String")
(12,"A String")
(13,char *)
(14,free(data)
(15,* data = (char *)
(16,char *)
(17,data)
(18,realloc(data, (130000)
(19,char)
(20,strcpy(data, "A String")
(21,data == NULL)
(22,data = (char *)
(23,"New String")
(24,sizeof(char)
(25,if(staticTrue)
(26,100)
(27,data)
(28,data)
(29,)
(30,(130000)
(31,if (data == NULL)
(32,)
(33,(char *)
(34,data != NULL)
(35,data)
(36,)
(37,data)
(38,data)
(39,(char *)
(40,data)
(41,-1)
(42,staticTrue)
(43,if (data != NULL)
(44,printLine(data)
(45,data)
(46,100*sizeof(char)
(47,NULL)
(48,exit(-1)
(49,data)
(50,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
