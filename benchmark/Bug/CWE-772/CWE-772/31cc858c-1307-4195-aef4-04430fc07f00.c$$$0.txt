-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_17_bad()
{
    int i,j;
    int64_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
80,81
81,82
81,83
82,83
84,85
84,86
85,86
88,89
88,90
88,91
88,92
89,90
90,91
90,92
91,92
94,95
94,96
95,96
98,99
99,100
101,102
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,63,65,70,72,77,78,79,83,86,87,92,93,96,97,100,102
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
74,75
74,76
90,91
90,92
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_17_bad(){    int i,j;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_17_bad()
CWE401_Memory_Leak__int64_t_malloc_17_bad
{    int i,j;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(19,44,0)
(25,21,0)
(19,33,0)
(21,25,0)
(42,34,0)
(8,17,0)
(41,25,0)
(48,3,0)
(23,44,0)
(25,41,0)
(9,44,0)
(36,32,0)
(43,35,0)
(10,47,0)
(0,20,0)
(4,32,0)
(40,9,0)
(37,9,0)
(23,18,0)
(29,1,0)
(33,19,0)
(18,17,0)
(15,41,0)
(24,23,0)
(5,35,0)
(26,34,0)
(21,19,0)
(32,4,0)
(4,12,0)
(13,44,0)
(22,34,0)
(44,19,0)
(6,47,0)
(16,25,0)
(38,7,0)
(31,6,0)
(44,17,0)
(20,47,0)
(7,34,0)
(46,17,0)
(1,35,0)
(3,35,0)
(39,34,0)
(45,34,0)
(11,20,0)
(18,23,0)
(30,3,0)
(27,7,0)
(14,47,0)
(19,21,0)
(28,23,0)
(20,11,1)
(2,20,1)
(5,7,1)
(16,13,1)
(41,15,1)
(6,47,1)
(8,9,1)
(8,4,1)
(37,44,1)
(30,35,1)
(13,3,1)
(24,28,1)
(19,21,1)
(9,40,1)
(4,32,1)
(0,6,1)
(14,3,1)
(6,31,1)
(40,37,1)
(30,1,1)
(15,16,1)
(25,41,1)
(44,19,1)
(32,36,1)
(48,30,1)
(10,14,1)
(31,20,1)
(23,24,1)
(7,27,1)
(35,43,1)
(29,18,1)
(3,35,1)
(21,25,1)
(20,47,1)
(1,35,1)
(43,5,1)
(36,9,1)
(19,33,1)
(11,0,1)
(3,48,1)
(23,44,1)
(28,8,1)
(18,23,1)
(0,47,1)
(9,44,1)
(27,38,1)
(1,29,1)
(47,10,1)
(16,3,2)
(25,41,2)
(6,47,2)
(18,3,2)
(1,3,2)
(3,35,2)
(4,32,2)
(37,3,2)
(0,20,2)
(1,35,2)
(41,3,2)
(19,3,2)
(32,9,2)
(19,33,2)
(48,3,2)
(18,23,2)
(9,44,2)
(21,3,2)
(40,3,2)
(11,20,2)
(23,3,2)
(19,21,2)
(30,3,2)
(6,20,2)
(44,3,2)
(20,20,2)
(13,3,2)
(4,9,2)
(21,25,2)
(23,44,2)
(9,3,2)
(24,3,2)
(31,20,2)
(15,3,2)
(8,3,2)
(3,3,2)
(44,19,2)
(36,9,2)
(29,3,2)
(20,47,2)
(28,3,2)
(25,3,2)
-----------------------------------
(0,j)
(1,i++)
(2,RET)
(3,i < 1)
(4,exit(-1)
(5,i)
(6,j++)
(7,data = NULL)
(8,L)
(9,data == NULL)
(10,0)
(11,1)
(12,)
(13,data)
(14,j)
(15,int64_t)
(16,100)
(17,)
(18,printLongLongLine(data[0])
(19,(int64_t *)
(20,j < 1)
(21,malloc(100*sizeof(int64_t)
(22,for(j = 0; j < 1; j++)
(23,data[0])
(24,0)
(25,100*sizeof(int64_t)
(26,i)
(27,NULL)
(28,data)
(29,i)
(30,i)
(31,j)
(32,-1)
(33,int64_t *)
(34,)
(35,i = 0)
(36,1)
(37,data)
(38,data)
(39,for(i = 0; i < 1; i++)
(40,NULL)
(41,sizeof(int64_t)
(42,data)
(43,0)
(44,data = (int64_t *)
(45,j)
(46,if (data == NULL)
(47,j = 0)
(48,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
