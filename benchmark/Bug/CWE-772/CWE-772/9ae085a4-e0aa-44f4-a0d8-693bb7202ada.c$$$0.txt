-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_44_bad()
{
    int * data;
    /* define a function pointer */
    void (*funcPtr) (int *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
42,45
43,44
46,47
47,48
47,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
65,67
66,67
70,71
71,72
71,73
72,73
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,45,48,49,53,55,60,62,67,68,69,73,76,77,81,83
-----computeFrom-----
28,29
28,30
34,35
34,36
51,52
51,53
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_44_bad(){    int * data;    /* define a function pointer */    void (*funcPtr) (int *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__int_calloc_44_bad()
CWE401_Memory_Leak__int_calloc_44_bad
{    int * data;    /* define a function pointer */    void (*funcPtr) (int *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* use the function pointer */    funcPtr(data);}
int * data;
int * data;
int
* data
*
data
void (*funcPtr) (int *) = badSink;
void (*funcPtr) (int *) = badSink;
void
(*funcPtr) (int *) = badSink
*funcPtr
*
funcPtr
int *
int
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(10,21,0)
(34,21,0)
(28,12,0)
(4,21,0)
(33,27,0)
(18,15,0)
(18,8,0)
(12,8,0)
(0,27,0)
(37,10,0)
(0,36,0)
(29,28,0)
(24,18,0)
(32,6,0)
(11,12,0)
(30,14,0)
(13,8,0)
(12,11,0)
(25,16,0)
(8,21,0)
(18,6,0)
(8,12,0)
(22,8,0)
(3,8,0)
(22,6,0)
(28,26,0)
(31,22,0)
(19,18,0)
(12,28,0)
(23,14,0)
(9,22,0)
(27,0,0)
(26,28,0)
(35,13,0)
(5,21,0)
(17,16,0)
(15,18,0)
(10,8,0)
(14,21,0)
(15,21,0)
(7,13,0)
(2,26,0)
(6,21,0)
(16,21,0)
(12,11,1)
(16,17,1)
(12,28,1)
(2,29,1)
(10,8,1)
(27,33,1)
(19,24,1)
(33,13,1)
(37,15,1)
(23,16,1)
(3,14,1)
(22,9,1)
(35,8,1)
(22,8,1)
(31,13,1)
(32,22,1)
(10,37,1)
(8,12,1)
(15,18,1)
(6,32,1)
(31,0,1)
(28,26,1)
(24,6,1)
(29,3,1)
(20,10,1)
(18,19,1)
(0,27,1)
(18,8,1)
(18,6,1)
(30,23,1)
(26,2,1)
(14,30,1)
(13,7,1)
(13,8,1)
(7,35,1)
(9,31,1)
(17,25,1)
(15,18,2)
(33,13,2)
(28,26,2)
(0,13,2)
(18,8,2)
(12,11,2)
(8,12,2)
(0,27,2)
(10,8,2)
(13,8,2)
(27,13,2)
(22,8,2)
(18,6,2)
(12,28,2)
-----------------------------------
(0,exit(-1)
(1, sizeof(int)
(2,int)
(3,data)
(4,data)
(5,if (data == NULL)
(6,data[0] = 5)
(7,NULL)
(8,data = (int *)
(9,0)
(10,funcPtr(data)
(11,int *)
(12,(int *)
(13,data == NULL)
(14,data = NULL)
(15,printIntLine(data[0])
(16,(*funcPtr)
(17,badSink)
(18,data[0])
(19,0)
(20,RET)
(21,)
(22,data[0])
(23,data)
(24,data)
(25,funcPtr)
(26,sizeof(int)
(27,-1)
(28,calloc(100, sizeof(int)
(29,100)
(30,NULL)
(31,data)
(32,5)
(33,1)
(34,funcPtr)
(35,data)
(36,)
(37,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
