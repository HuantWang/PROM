-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_08_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
92,93
92,94
93,94
94,95
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,86,90,91,95,97
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_08_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_08_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_08_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(6,3,0)
(34,40,0)
(21,0,0)
(17,47,0)
(13,23,0)
(32,23,0)
(48,27,0)
(36,6,0)
(39,28,0)
(10,46,0)
(2,37,0)
(20,12,0)
(31,6,0)
(43,28,0)
(30,11,0)
(33,3,0)
(38,11,0)
(43,5,0)
(15,41,0)
(45,47,0)
(24,18,0)
(3,47,0)
(48,37,0)
(15,3,0)
(37,48,0)
(0,21,0)
(0,45,0)
(0,41,0)
(3,43,0)
(8,29,0)
(41,0,0)
(12,16,0)
(28,12,0)
(34,18,0)
(16,7,0)
(44,15,0)
(28,43,0)
(49,11,0)
(5,43,0)
(7,16,0)
(43,3,0)
(28,29,0)
(12,28,0)
(32,3,0)
(16,12,0)
(42,15,0)
(4,32,0)
(45,0,0)
(19,34,0)
(14,29,0)
(22,32,0)
(40,47,0)
(29,11,0)
(9,40,0)
(18,3,0)
(18,34,0)
(23,32,0)
(41,15,0)
(23,46,0)
(46,47,0)
(26,18,0)
(29,8,1)
(15,3,1)
(42,40,1)
(12,16,1)
(18,26,1)
(20,39,1)
(41,15,1)
(0,41,1)
(28,12,1)
(34,19,1)
(28,29,1)
(32,3,1)
(18,3,1)
(6,31,1)
(16,7,1)
(24,46,1)
(1,35,1)
(25,1,1)
(3,43,1)
(40,9,1)
(23,32,1)
(13,32,1)
(36,3,1)
(43,5,1)
(35,29,1)
(22,4,1)
(4,6,1)
(43,28,1)
(1,45,1)
(10,23,1)
(15,44,1)
(23,13,1)
(6,3,1)
(33,35,1)
(45,0,1)
(48,37,1)
(34,18,1)
(19,18,1)
(16,20,1)
(4,48,1)
(39,33,1)
(31,36,1)
(8,14,1)
(26,24,1)
(2,6,1)
(44,42,1)
(0,21,1)
(9,34,1)
(37,2,1)
(46,10,1)
(32,22,1)
(28,35,2)
(13,35,2)
(34,18,2)
(33,35,2)
(43,5,2)
(20,35,2)
(6,35,2)
(44,35,2)
(15,3,2)
(40,35,2)
(23,32,2)
(31,35,2)
(45,35,2)
(9,35,2)
(4,35,2)
(28,29,2)
(41,15,2)
(45,0,2)
(12,35,2)
(22,35,2)
(43,28,2)
(43,35,2)
(37,6,2)
(3,35,2)
(16,7,2)
(42,35,2)
(39,35,2)
(28,12,2)
(6,3,2)
(0,21,2)
(19,35,2)
(41,35,2)
(2,6,2)
(16,35,2)
(32,3,2)
(48,37,2)
(10,35,2)
(18,35,2)
(23,35,2)
(12,16,2)
(24,35,2)
(48,6,2)
(26,35,2)
(34,35,2)
(3,43,2)
(46,35,2)
(15,35,2)
(36,35,2)
(0,35,2)
(18,3,2)
(32,35,2)
(0,41,2)
-----------------------------------
(0,(twoIntsStruct *)
(1,staticReturnsTrue()
(2,1)
(3,data = (struct _twoIntsStruct *)
(4,data)
(5,struct _twoIntsStruct *)
(6,data == NULL)
(7,struct _twoIntsStruct)
(8,NULL)
(9,0)
(10,0)
(11,)
(12,100*sizeof(struct _twoIntsStruct)
(13,intOne)
(14,data)
(15,data[0])
(16,sizeof(struct _twoIntsStruct)
(17,if (data == NULL)
(18,data[0])
(19,intTwo)
(20,100)
(21,twoIntsStruct *)
(22,0)
(23,data[0].intOne)
(24,data)
(25,RET)
(26,0)
(27,)
(28,realloc(data, 100*sizeof(struct _twoIntsStruct)
(29,data = NULL)
(30,if(staticReturnsTrue()
(31,NULL)
(32,data[0])
(33,data)
(34,data[0].intTwo)
(35,staticReturnsTrue()
(36,data)
(37,-1)
(38,data)
(39,data)
(40,data[0].intTwo = 0)
(41,&data[0])
(42,data)
(43,(struct _twoIntsStruct *)
(44,0)
(45,printStructLine((twoIntsStruct *)
(46,data[0].intOne = 0)
(47,)
(48,exit(-1)
(49,if(staticReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
