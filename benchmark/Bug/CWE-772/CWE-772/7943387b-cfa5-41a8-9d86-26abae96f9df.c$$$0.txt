-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_32_bad()
{
    int * data;
    int * *dataPtr1 = &data;
    int * *dataPtr2 = &data;
    data = NULL;
    {
        int * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
84,86
85,86
89,90
90,91
90,92
91,92
93,94
93,95
94,95
97,98
98,99
98,100
99,100
100,101
102,103
104,105
104,106
105,106
106,107
106,108
108,109
108,110
108,111
111,112
112,113
113,114
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,79,81,86,87,88,92,95,96,101,103,107,109,110,114,115
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
70,71
70,72
83,84
83,85
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_32_bad(){    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_32_bad()
CWE401_Memory_Leak__int_malloc_32_bad
{    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
int * *dataPtr1 = &data;
int * *dataPtr1 = &data;
int
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int * *dataPtr2 = &data;
int * *dataPtr2 = &data;
int
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }
int * data = *dataPtr1;
int * data = *dataPtr1;
int
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = *dataPtr2;
int * data = *dataPtr2;
int
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(46,16,0)
(42,56,0)
(32,12,0)
(48,38,0)
(34,38,0)
(38,34,0)
(41,19,0)
(45,19,0)
(8,41,0)
(33,6,0)
(29,6,0)
(19,27,0)
(49,32,0)
(44,57,0)
(7,27,0)
(51,32,0)
(6,34,0)
(39,50,0)
(36,51,0)
(14,24,0)
(33,27,0)
(48,16,0)
(34,6,0)
(15,12,0)
(40,11,0)
(9,48,0)
(32,30,0)
(26,29,0)
(2,39,0)
(25,47,0)
(52,11,0)
(27,12,0)
(24,27,0)
(16,48,0)
(11,12,0)
(53,33,0)
(24,14,0)
(1,41,0)
(14,39,0)
(47,33,0)
(0,29,0)
(29,19,0)
(28,14,0)
(10,24,0)
(34,55,0)
(13,44,0)
(30,32,0)
(22,50,0)
(35,12,0)
(31,51,0)
(54,36,0)
(50,39,0)
(37,27,0)
(38,48,0)
(18,56,0)
(43,12,0)
(4,13,0)
(36,5,0)
(5,12,0)
(29,37,0)
(47,39,0)
(39,12,0)
(37,29,0)
(56,6,0)
(21,5,0)
(51,36,0)
(41,6,0)
(23,27,0)
(44,13,0)
(55,34,0)
(3,30,0)
(6,27,0)
(20,6,0)
(33,6,1)
(8,1,1)
(9,20,1)
(26,19,1)
(56,6,1)
(29,19,1)
(11,40,1)
(24,14,1)
(30,3,1)
(40,52,1)
(28,10,1)
(32,30,1)
(4,56,1)
(17,36,1)
(1,44,1)
(14,28,1)
(31,54,1)
(44,13,1)
(19,45,1)
(13,4,1)
(52,32,1)
(48,16,1)
(34,55,1)
(47,25,1)
(10,11,1)
(51,32,1)
(50,22,1)
(56,18,1)
(51,31,1)
(16,46,1)
(36,51,1)
(25,37,1)
(38,48,1)
(18,42,1)
(29,0,1)
(33,53,1)
(3,49,1)
(1,56,1)
(45,41,1)
(46,9,1)
(49,39,1)
(41,8,1)
(39,50,1)
(14,39,1)
(20,24,1)
(41,6,1)
(54,33,1)
(29,6,1)
(22,2,1)
(47,39,1)
(0,26,1)
(37,29,1)
(42,6,1)
(53,47,1)
(34,38,1)
(6,34,1)
(47,39,2)
(56,6,2)
(41,6,2)
(33,6,2)
(44,56,2)
(44,13,2)
(29,6,2)
(29,19,2)
(13,56,2)
(34,55,2)
(36,51,2)
(14,39,2)
(6,34,2)
(39,50,2)
(37,29,2)
(24,14,2)
(48,16,2)
(32,30,2)
(34,38,2)
(51,32,2)
(4,56,2)
(38,48,2)
-----------------------------------
(0,0)
(1,data)
(2,dataPtr1)
(3,data)
(4,1)
(5,)
(6,data = (int *)
(7,if (data == NULL)
(8,0)
(9,100)
(10,data)
(11,data = NULL)
(12,)
(13,-1)
(14,*dataPtr1)
(15,data)
(16,sizeof(int)
(17,RET)
(18,NULL)
(19,data[0] = 5)
(20,data)
(21,data)
(22,data)
(23,data)
(24,* data = *dataPtr1)
(25,dataPtr1)
(26,data)
(27,)
(28,dataPtr1)
(29,data[0])
(30,&data)
(31,dataPtr2)
(32,* *dataPtr2 = &data)
(33,*dataPtr1 = data)
(34,(int *)
(35,dataPtr1)
(36,* data = *dataPtr2)
(37,printIntLine(data[0])
(38,malloc(100*sizeof(int)
(39,* *dataPtr1 = &data)
(40,NULL)
(41,data[0])
(42,data)
(43,dataPtr2)
(44,exit(-1)
(45,5)
(46,int)
(47,*dataPtr1)
(48,100*sizeof(int)
(49,dataPtr2)
(50,&data)
(51,*dataPtr2)
(52,data)
(53,data)
(54,data)
(55,int *)
(56,data == NULL)
(57,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
