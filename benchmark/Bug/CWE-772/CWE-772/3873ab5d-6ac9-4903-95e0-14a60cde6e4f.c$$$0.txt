-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_31_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    {
        int * dataCopy = data;
        int * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
56,57
56,58
57,58
59,60
59,61
60,61
63,64
63,65
63,66
64,65
65,66
65,67
67,68
67,69
67,70
70,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
79,80
80,81
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,52,53,54,58,61,62,66,68,69,72,75,77,78,81,82
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_31_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    {        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_31_bad()
CWE401_Memory_Leak__int_calloc_31_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    {        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
{        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * dataCopy = data;
int * dataCopy = data;
int
* dataCopy = data
*
dataCopy
= data
data
data
int * data = dataCopy;
int * data = dataCopy;
int
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(26,37,0)
(27,13,0)
(14,7,0)
(22,10,0)
(4,34,0)
(4,0,0)
(0,2,0)
(0,4,0)
(32,4,0)
(35,34,0)
(20,33,0)
(12,11,0)
(22,4,0)
(13,7,0)
(32,39,0)
(22,39,0)
(7,33,0)
(28,6,0)
(3,12,0)
(6,0,0)
(18,34,0)
(23,32,0)
(21,4,0)
(39,34,0)
(11,12,0)
(10,34,0)
(5,21,0)
(38,21,0)
(24,25,0)
(19,4,0)
(25,34,0)
(36,7,0)
(40,22,0)
(13,33,0)
(8,32,0)
(7,4,0)
(10,22,0)
(6,37,0)
(0,6,0)
(16,25,0)
(33,34,0)
(9,13,0)
(29,33,0)
(11,30,0)
(15,22,0)
(31,39,0)
(37,6,0)
(2,0,0)
(32,8,1)
(12,3,1)
(38,4,1)
(8,23,1)
(15,40,1)
(5,38,1)
(28,19,1)
(37,26,1)
(4,0,1)
(11,12,1)
(22,15,1)
(39,31,1)
(13,27,1)
(31,32,1)
(32,4,1)
(22,4,1)
(17,13,1)
(9,7,1)
(27,9,1)
(3,21,1)
(36,10,1)
(0,2,1)
(21,4,1)
(40,39,1)
(19,25,1)
(23,21,1)
(21,5,1)
(23,11,1)
(7,4,1)
(22,39,1)
(26,28,1)
(0,6,1)
(6,37,1)
(13,7,1)
(24,16,1)
(10,22,1)
(25,24,1)
(7,14,1)
(14,36,1)
(7,4,2)
(22,39,2)
(22,4,2)
(6,37,2)
(0,2,2)
(12,21,2)
(11,21,2)
(21,4,2)
(11,12,2)
(13,7,2)
(4,0,2)
(32,4,2)
(10,22,2)
(0,6,2)
(3,21,2)
-----------------------------------
(0,(int *)
(1, sizeof(int)
(2,int *)
(3,1)
(4,data = (int *)
(5,NULL)
(6,calloc(100, sizeof(int)
(7,* dataCopy = data)
(8,0)
(9,data)
(10,printIntLine(data[0])
(11,exit(-1)
(12,-1)
(13,* data = dataCopy)
(14,data)
(15,0)
(16,data)
(17,RET)
(18,data)
(19,data)
(20,dataCopy)
(21,data == NULL)
(22,data[0])
(23,data)
(24,NULL)
(25,data = NULL)
(26,int)
(27,dataCopy)
(28,100)
(29,data)
(30,)
(31,5)
(32,data[0])
(33,)
(34,)
(35,if (data == NULL)
(36,dataCopy)
(37,sizeof(int)
(38,data)
(39,data[0] = 5)
(40,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
