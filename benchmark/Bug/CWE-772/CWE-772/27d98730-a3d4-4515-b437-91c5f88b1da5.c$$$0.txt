-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_03_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
91,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,92,93,95
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_03_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_03_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_03_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(16,5,0)
(21,28,0)
(19,41,0)
(28,21,0)
(35,49,0)
(20,44,0)
(34,11,0)
(50,11,0)
(4,2,0)
(9,16,0)
(51,41,0)
(17,16,0)
(36,17,0)
(26,24,0)
(6,29,0)
(28,5,0)
(17,36,0)
(36,21,0)
(22,45,0)
(27,21,0)
(4,25,0)
(45,18,0)
(34,32,0)
(21,36,0)
(51,9,0)
(25,4,0)
(12,51,0)
(0,24,0)
(46,29,0)
(25,16,0)
(14,2,0)
(22,23,0)
(18,45,0)
(42,23,0)
(23,22,0)
(11,34,0)
(37,16,0)
(7,24,0)
(48,9,0)
(39,5,0)
(16,45,0)
(45,16,0)
(44,20,0)
(23,44,0)
(2,5,0)
(43,17,0)
(31,33,0)
(41,5,0)
(3,25,0)
(13,17,0)
(10,4,0)
(29,24,0)
(47,25,0)
(1,33,0)
(40,38,0)
(52,9,0)
(45,22,0)
(15,49,0)
(8,38,0)
(44,23,0)
(49,16,0)
(21,27,0)
(9,51,0)
(4,25,1)
(48,52,1)
(43,2,1)
(45,22,1)
(41,19,1)
(29,46,1)
(50,49,1)
(22,23,1)
(17,16,1)
(23,44,1)
(52,49,1)
(36,17,1)
(38,8,1)
(1,29,1)
(44,20,1)
(44,42,1)
(3,41,1)
(2,14,1)
(13,43,1)
(4,10,1)
(30,38,1)
(51,9,1)
(10,25,1)
(51,12,1)
(11,50,1)
(9,16,1)
(45,18,1)
(16,45,1)
(46,6,1)
(15,16,1)
(35,15,1)
(14,4,1)
(40,33,1)
(17,13,1)
(33,31,1)
(37,33,1)
(21,36,1)
(28,21,1)
(9,48,1)
(42,37,1)
(25,16,1)
(12,9,1)
(49,35,1)
(34,11,1)
(52,34,1)
(31,1,1)
(21,27,1)
(40,28,1)
(49,16,1)
(19,51,1)
(8,40,1)
(47,3,1)
(25,47,1)
(23,33,2)
(45,33,2)
(11,49,2)
(48,33,2)
(51,33,2)
(45,18,2)
(49,16,2)
(9,33,2)
(42,33,2)
(3,33,2)
(35,33,2)
(17,33,2)
(23,44,2)
(25,33,2)
(2,33,2)
(49,33,2)
(36,33,2)
(21,33,2)
(10,33,2)
(44,20,2)
(47,33,2)
(28,21,2)
(44,33,2)
(51,9,2)
(9,16,2)
(28,33,2)
(15,33,2)
(16,33,2)
(43,33,2)
(21,36,2)
(52,33,2)
(14,33,2)
(41,33,2)
(17,16,2)
(21,27,2)
(34,11,2)
(25,16,2)
(4,25,2)
(16,45,2)
(12,33,2)
(22,23,2)
(37,33,2)
(13,33,2)
(19,33,2)
(4,33,2)
(50,49,2)
(22,33,2)
(36,17,2)
(34,49,2)
(45,22,2)
-----------------------------------
(0,if(5==5)
(1,5)
(2,data[0].intTwo = 0)
(3,data)
(4,data[0].intTwo)
(5,)
(6,data)
(7,data)
(8,5)
(9,data[0])
(10,intTwo)
(11,-1)
(12,intOne)
(13,0)
(14,0)
(15,data)
(16,data = (struct _twoIntsStruct *)
(17,data[0])
(18,struct _twoIntsStruct *)
(19,0)
(20,struct _twoIntsStruct)
(21,(twoIntsStruct *)
(22,malloc(100*sizeof(struct _twoIntsStruct)
(23,100*sizeof(struct _twoIntsStruct)
(24,)
(25,data[0])
(26,if(5==5)
(27,twoIntsStruct *)
(28,printStructLine((twoIntsStruct *)
(29,data = NULL)
(30,RET)
(31,5)
(32,)
(33,5==5)
(34,exit(-1)
(35,NULL)
(36,&data[0])
(37,data)
(38,5==5)
(39,if (data == NULL)
(40,5)
(41,data[0].intOne = 0)
(42,100)
(43,data)
(44,sizeof(struct _twoIntsStruct)
(45,(struct _twoIntsStruct *)
(46,NULL)
(47,0)
(48,0)
(49,data == NULL)
(50,1)
(51,data[0].intOne)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
