-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_06_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
98,99
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,96,97,99
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_06_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_06_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_06_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(8,38,0)
(1,25,0)
(13,38,0)
(44,9,0)
(2,35,0)
(51,17,0)
(36,52,0)
(27,3,0)
(42,52,0)
(43,32,0)
(20,9,0)
(15,49,0)
(43,52,0)
(14,10,0)
(48,13,0)
(53,29,0)
(50,26,0)
(4,29,0)
(10,14,0)
(25,39,0)
(45,16,0)
(30,38,0)
(52,3,0)
(49,15,0)
(15,13,0)
(14,37,0)
(51,32,0)
(35,1,0)
(22,37,0)
(24,46,0)
(16,43,0)
(50,41,0)
(25,34,0)
(40,10,0)
(18,35,0)
(19,14,0)
(49,37,0)
(25,1,0)
(37,38,0)
(28,15,0)
(17,51,0)
(1,35,0)
(11,3,0)
(0,49,0)
(23,46,0)
(21,41,0)
(33,49,0)
(35,37,0)
(10,8,0)
(34,38,0)
(32,43,0)
(16,37,0)
(12,8,0)
(5,32,0)
(43,16,0)
(37,16,0)
(7,14,0)
(39,25,0)
(16,45,0)
(32,51,0)
(34,25,0)
(31,3,0)
(41,50,0)
(47,43,0)
(9,37,0)
(6,46,1)
(0,8,1)
(9,44,1)
(52,42,1)
(14,7,1)
(9,37,1)
(35,2,1)
(46,24,1)
(15,49,1)
(10,14,1)
(24,23,1)
(47,22,1)
(43,32,1)
(13,48,1)
(23,34,1)
(1,35,1)
(37,16,1)
(29,4,1)
(20,37,1)
(51,5,1)
(5,47,1)
(53,52,1)
(14,37,1)
(50,41,1)
(41,21,1)
(19,9,1)
(44,20,1)
(21,9,1)
(2,18,1)
(16,43,1)
(23,29,1)
(48,15,1)
(49,37,1)
(43,52,1)
(18,13,1)
(19,50,1)
(25,1,1)
(35,37,1)
(25,39,1)
(22,29,1)
(16,45,1)
(15,28,1)
(51,17,1)
(4,53,1)
(34,25,1)
(28,49,1)
(40,14,1)
(42,36,1)
(8,12,1)
(49,33,1)
(7,19,1)
(33,0,1)
(12,10,1)
(10,40,1)
(32,51,1)
(9,37,2)
(7,29,2)
(47,29,2)
(12,29,2)
(51,29,2)
(37,16,2)
(34,29,2)
(20,29,2)
(44,29,2)
(43,32,2)
(35,37,2)
(8,29,2)
(51,17,2)
(10,29,2)
(16,45,2)
(10,14,2)
(21,9,2)
(48,29,2)
(28,29,2)
(13,29,2)
(15,29,2)
(16,29,2)
(32,51,2)
(32,29,2)
(25,1,2)
(41,9,2)
(18,29,2)
(49,37,2)
(14,37,2)
(34,25,2)
(37,29,2)
(50,41,2)
(43,29,2)
(9,29,2)
(25,39,2)
(1,29,2)
(16,43,2)
(22,29,2)
(43,52,2)
(0,29,2)
(50,9,2)
(19,29,2)
(2,29,2)
(33,29,2)
(49,29,2)
(1,35,2)
(15,49,2)
(35,29,2)
(25,29,2)
(14,29,2)
(5,29,2)
(40,29,2)
-----------------------------------
(0,data)
(1,&data[0])
(2,0)
(3,)
(4,5)
(5,100)
(6,RET)
(7,0)
(8,data[0].intOne = 0)
(9,data == NULL)
(10,data[0].intOne)
(11,if(STATIC_CONST_FIVE==5)
(12,0)
(13,data[0].intTwo = 0)
(14,data[0])
(15,data[0].intTwo)
(16,(struct _twoIntsStruct *)
(17,struct _twoIntsStruct)
(18,data)
(19,data)
(20,data)
(21,1)
(22,data)
(23,STATIC_CONST_FIVE)
(24,5)
(25,(twoIntsStruct *)
(26,)
(27,data)
(28,intTwo)
(29,STATIC_CONST_FIVE==5)
(30,if (data == NULL)
(31,if(STATIC_CONST_FIVE==5)
(32,100*sizeof(struct _twoIntsStruct)
(33,0)
(34,printStructLine((twoIntsStruct *)
(35,data[0])
(36,data)
(37,data = (struct _twoIntsStruct *)
(38,)
(39,twoIntsStruct *)
(40,intOne)
(41,-1)
(42,NULL)
(43,realloc(data, 100*sizeof(struct _twoIntsStruct)
(44,NULL)
(45,struct _twoIntsStruct *)
(46,STATIC_CONST_FIVE==5)
(47,data)
(48,0)
(49,data[0])
(50,exit(-1)
(51,sizeof(struct _twoIntsStruct)
(52,data = NULL)
(53,STATIC_CONST_FIVE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
