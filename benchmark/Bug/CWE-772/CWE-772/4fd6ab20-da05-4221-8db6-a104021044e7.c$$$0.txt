-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_07_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,88,89,91
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_07_bad(){    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_07_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_07_bad
{    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,37,0)
(21,40,0)
(4,38,0)
(11,32,0)
(0,36,0)
(22,39,0)
(12,17,0)
(21,16,0)
(26,39,0)
(31,9,0)
(6,30,0)
(32,15,0)
(29,23,0)
(34,36,0)
(8,36,0)
(2,27,0)
(28,32,0)
(40,36,0)
(38,37,0)
(44,15,0)
(20,33,0)
(50,16,0)
(28,23,0)
(49,6,0)
(5,0,0)
(18,40,0)
(1,14,0)
(37,34,0)
(37,38,0)
(17,31,0)
(24,16,0)
(17,0,0)
(25,41,0)
(35,33,0)
(43,21,0)
(10,33,0)
(47,27,0)
(13,17,0)
(7,9,0)
(15,32,0)
(27,0,0)
(31,17,0)
(41,33,0)
(46,31,0)
(3,38,0)
(16,0,0)
(30,6,0)
(32,28,0)
(23,28,0)
(45,14,0)
(9,36,0)
(0,23,0)
(16,21,0)
(23,29,0)
(30,48,0)
(42,41,0)
(38,0,0)
(23,0,0)
(11,5,1)
(5,14,1)
(26,34,1)
(37,38,1)
(23,28,1)
(17,0,1)
(46,17,1)
(38,4,1)
(13,12,1)
(18,21,1)
(7,31,1)
(31,46,1)
(31,17,1)
(24,9,1)
(16,0,1)
(19,39,1)
(17,13,1)
(50,24,1)
(38,0,1)
(27,47,1)
(27,0,1)
(21,43,1)
(0,23,1)
(44,11,1)
(6,49,1)
(41,42,1)
(2,0,1)
(47,2,1)
(3,40,1)
(32,15,1)
(45,41,1)
(4,3,1)
(28,32,1)
(42,25,1)
(49,27,1)
(9,7,1)
(15,44,1)
(40,18,1)
(43,16,1)
(21,16,1)
(1,45,1)
(39,22,1)
(16,50,1)
(30,6,1)
(26,14,1)
(14,1,1)
(12,27,1)
(34,37,1)
(23,29,1)
(22,26,1)
(12,30,1)
(24,14,2)
(0,23,2)
(18,14,2)
(16,0,2)
(30,27,2)
(16,14,2)
(21,14,2)
(49,27,2)
(31,14,2)
(47,14,2)
(28,14,2)
(50,14,2)
(11,14,2)
(3,14,2)
(15,14,2)
(17,0,2)
(13,14,2)
(34,14,2)
(32,14,2)
(38,0,2)
(30,6,2)
(46,14,2)
(43,14,2)
(0,14,2)
(4,14,2)
(7,14,2)
(27,0,2)
(9,14,2)
(37,38,2)
(40,14,2)
(44,14,2)
(5,14,2)
(38,14,2)
(28,32,2)
(23,28,2)
(21,16,2)
(12,14,2)
(2,14,2)
(23,14,2)
(37,14,2)
(31,17,2)
(32,15,2)
(27,14,2)
(23,29,2)
(6,27,2)
(17,14,2)
(34,37,2)
-----------------------------------
(0,data = (twoIntsStruct *)
(1,5)
(2,data)
(3,data)
(4,0)
(5,data)
(6,-1)
(7,0)
(8,if (data == NULL)
(9,data[0].intOne = 0)
(10,if(staticFive==5)
(11,100)
(12,data)
(13,0)
(14,staticFive==5)
(15,sizeof(twoIntsStruct)
(16,data[0])
(17,data[0])
(18,0)
(19,RET)
(20,data)
(21,data[0].intTwo)
(22,5)
(23,(twoIntsStruct *)
(24,data)
(25,data)
(26,staticFive)
(27,data == NULL)
(28,malloc(100*sizeof(twoIntsStruct)
(29,twoIntsStruct *)
(30,exit(-1)
(31,data[0].intOne)
(32,100*sizeof(twoIntsStruct)
(33,)
(34,printStructLine(&data[0])
(35,if(staticFive==5)
(36,)
(37,&data[0])
(38,data[0])
(39,staticFive==5)
(40,data[0].intTwo = 0)
(41,data = NULL)
(42,NULL)
(43,intTwo)
(44,twoIntsStruct)
(45,staticFive)
(46,intOne)
(47,NULL)
(48,)
(49,1)
(50,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
