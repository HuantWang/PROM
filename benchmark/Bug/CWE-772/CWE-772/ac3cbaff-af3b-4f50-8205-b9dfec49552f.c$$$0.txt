-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_15_bad()
{
    switch(6)
    {
    case 6:
    {
        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            wcscpy(data, L"New String");
            printWLine(data);
            free(data);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,7,10,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105,106,107,111,112,113
-----computeFrom-----
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_15_bad(){    switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_15_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_15_bad
{    switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(15,36,0)
(12,22,0)
(38,5,0)
(22,12,0)
(16,5,0)
(14,35,0)
(9,44,0)
(19,40,0)
(37,49,0)
(1,38,0)
(39,23,0)
(32,25,0)
(17,41,0)
(10,39,0)
(43,3,0)
(43,36,0)
(29,50,0)
(28,45,0)
(38,11,0)
(41,28,0)
(40,41,0)
(45,28,0)
(0,36,0)
(5,38,0)
(31,44,0)
(11,38,0)
(34,41,0)
(8,34,0)
(27,3,0)
(33,3,0)
(26,35,0)
(47,40,0)
(12,11,0)
(50,23,0)
(50,36,0)
(30,37,0)
(11,12,0)
(36,3,0)
(41,3,0)
(3,35,0)
(23,39,0)
(4,35,0)
(20,3,0)
(34,49,0)
(28,50,0)
(24,35,0)
(46,23,0)
(12,36,0)
(6,35,0)
(50,28,0)
(44,9,0)
(18,14,0)
(37,41,0)
(21,43,0)
(42,0,0)
(23,50,0)
(9,2,0)
(48,0,0)
(36,12,0)
(28,41,0)
(34,8,1)
(12,22,1)
(18,13,1)
(39,10,1)
(8,37,1)
(23,39,1)
(16,1,1)
(38,5,1)
(40,41,1)
(34,41,1)
(28,50,1)
(37,41,1)
(50,36,1)
(4,34,1)
(7,4,1)
(48,42,1)
(21,9,1)
(40,19,1)
(37,30,1)
(5,16,1)
(42,36,1)
(17,43,1)
(21,0,1)
(9,44,1)
(31,0,1)
(4,40,1)
(19,47,1)
(46,29,1)
(0,48,1)
(24,14,1)
(15,13,1)
(43,21,1)
(36,12,1)
(30,40,1)
(28,45,1)
(14,18,1)
(44,31,1)
(47,41,1)
(12,11,1)
(7,24,1)
(41,28,1)
(1,15,1)
(0,36,1)
(11,38,1)
(29,17,1)
(43,36,1)
(50,23,1)
(10,46,1)
(34,41,2)
(28,50,2)
(42,13,2)
(43,36,2)
(11,13,2)
(29,13,2)
(36,13,2)
(38,13,2)
(21,13,2)
(34,40,2)
(37,41,2)
(18,13,2)
(28,45,2)
(9,44,2)
(10,13,2)
(14,13,2)
(44,0,2)
(37,40,2)
(16,13,2)
(30,40,2)
(28,13,2)
(17,13,2)
(40,41,2)
(23,39,2)
(4,13,2)
(19,13,2)
(1,13,2)
(47,13,2)
(0,36,2)
(48,13,2)
(31,0,2)
(24,13,2)
(9,0,2)
(38,5,2)
(12,11,2)
(41,13,2)
(11,38,2)
(50,23,2)
(46,13,2)
(43,13,2)
(5,13,2)
(50,36,2)
(39,13,2)
(8,40,2)
(12,13,2)
(15,13,2)
(41,28,2)
(50,13,2)
(36,12,2)
(0,13,2)
(12,22,2)
(40,13,2)
(23,13,2)
-----------------------------------
(0,data == NULL)
(1,100)
(2,)
(3,)
(4,break;)
(5,sizeof(wchar_t)
(6,default:)
(7,RET)
(8,data)
(9,exit(-1)
(10,wchar_t)
(11,malloc(100*sizeof(wchar_t)
(12,(wchar_t *)
(13,6)
(14,printLine("Benign, fixed string")
(15,data)
(16,wchar_t)
(17,data)
(18,"Benign, fixed string")
(19,NULL)
(20,data)
(21,data)
(22,wchar_t *)
(23,(130000)
(24,break;)
(25,)
(26,case 6:)
(27,if (data != NULL)
(28,(wchar_t *)
(29,data)
(30,data)
(31,1)
(32,switch(6)
(33,if (data == NULL)
(34,free(data)
(35,)
(36,* data = (wchar_t *)
(37,printWLine(data)
(38,100*sizeof(wchar_t)
(39,sizeof(wchar_t)
(40,data != NULL)
(41,data = (wchar_t *)
(42,data)
(43,printWLine(data)
(44,-1)
(45,wchar_t *)
(46,130000)
(47,data)
(48,NULL)
(49,)
(50,realloc(data, (130000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
