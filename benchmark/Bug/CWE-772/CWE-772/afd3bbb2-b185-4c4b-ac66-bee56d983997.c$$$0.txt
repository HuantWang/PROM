-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_08_bad()
{
    int * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
73,74
75,76
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,60,61,62,66,69,70,74,76
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_08_bad(){    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_08_bad()
CWE401_Memory_Leak__int_realloc_08_bad
{    int * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,15,0)
(26,10,0)
(3,37,0)
(17,19,0)
(27,13,0)
(18,4,0)
(5,34,0)
(27,23,0)
(1,5,0)
(30,37,0)
(16,19,0)
(35,9,0)
(20,27,0)
(36,27,0)
(4,37,0)
(2,37,0)
(0,11,0)
(33,10,0)
(14,3,0)
(24,19,0)
(23,27,0)
(4,13,0)
(27,37,0)
(6,15,0)
(11,15,0)
(3,11,0)
(11,10,0)
(32,4,0)
(7,30,0)
(15,9,0)
(22,13,0)
(3,14,0)
(23,8,0)
(25,8,0)
(11,3,0)
(37,8,0)
(10,19,0)
(13,8,0)
(21,30,0)
(37,3,0)
(29,1,0)
(15,11,0)
(5,1,0)
(5,1,1)
(0,2,1)
(18,5,1)
(31,28,1)
(30,7,1)
(27,20,1)
(23,27,1)
(13,22,1)
(10,26,1)
(30,37,1)
(18,30,1)
(22,4,1)
(27,13,1)
(11,10,1)
(9,35,1)
(15,9,1)
(12,10,1)
(28,23,1)
(21,37,1)
(3,11,1)
(11,15,1)
(7,21,1)
(28,12,1)
(27,37,1)
(6,0,1)
(4,37,1)
(1,29,1)
(37,3,1)
(20,36,1)
(32,18,1)
(26,33,1)
(4,32,1)
(35,6,1)
(29,30,1)
(3,14,1)
(2,12,1)
(36,13,1)
(13,12,2)
(4,12,2)
(3,14,2)
(15,12,2)
(27,37,2)
(11,15,2)
(37,12,2)
(9,12,2)
(3,11,2)
(6,12,2)
(7,12,2)
(2,12,2)
(23,27,2)
(1,30,2)
(3,12,2)
(5,1,2)
(27,12,2)
(11,10,2)
(29,30,2)
(36,12,2)
(4,37,2)
(5,30,2)
(37,3,2)
(30,12,2)
(32,12,2)
(15,9,2)
(35,12,2)
(0,12,2)
(23,12,2)
(20,12,2)
(21,12,2)
(22,12,2)
(27,13,2)
(30,37,2)
(18,12,2)
(11,12,2)
-----------------------------------
(0,data)
(1,-1)
(2,data)
(3,(int *)
(4,data[0])
(5,exit(-1)
(6,100)
(7,NULL)
(8,)
(9,sizeof(int)
(10,data = NULL)
(11,realloc(data, 100*sizeof(int)
(12,staticReturnsTrue()
(13,data[0] = 5)
(14,int *)
(15,100*sizeof(int)
(16,data)
(17,if(staticReturnsTrue()
(18,data)
(19,)
(20,0)
(21,data)
(22,5)
(23,printIntLine(data[0])
(24,if(staticReturnsTrue()
(25,if (data == NULL)
(26,NULL)
(27,data[0])
(28,staticReturnsTrue()
(29,1)
(30,data == NULL)
(31,RET)
(32,0)
(33,data)
(34,)
(35,int)
(36,data)
(37,data = (int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
