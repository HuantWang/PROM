-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_34_bad()
{
    twoIntsStruct * data;
    CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    myUnion.unionFirst = data;
    {
        twoIntsStruct * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
5,15
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
92,94
93,94
94,95
94,96
95,96
97,98
97,99
97,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,88,89,91,96,98,99,103,104,105
-----computeFrom-----
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_34_bad(){    twoIntsStruct * data;    CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_34_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_34_bad
{    twoIntsStruct * data;    CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;
CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType myUnion;
CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType
CWE401_Memory_Leak__twoIntsStruct_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct
twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(29,27,0)
(46,54,0)
(25,52,0)
(44,10,0)
(3,46,0)
(24,39,0)
(4,24,0)
(11,6,0)
(9,38,0)
(15,50,0)
(46,50,0)
(5,38,0)
(49,2,0)
(9,50,0)
(26,39,0)
(10,41,0)
(29,54,0)
(17,28,0)
(8,10,0)
(16,15,0)
(7,14,0)
(45,9,0)
(17,42,0)
(41,50,0)
(35,41,0)
(0,54,0)
(1,50,0)
(38,14,0)
(48,6,0)
(52,47,0)
(52,2,0)
(30,54,0)
(27,29,0)
(20,54,0)
(12,54,0)
(21,15,0)
(50,54,0)
(43,0,0)
(34,47,0)
(47,50,0)
(51,9,0)
(19,20,0)
(41,35,0)
(22,42,0)
(10,8,0)
(53,8,0)
(39,24,0)
(32,1,0)
(39,0,0)
(14,54,0)
(2,54,0)
(27,1,0)
(18,24,0)
(41,10,0)
(47,52,0)
(13,54,0)
(38,9,0)
(1,27,0)
(37,1,0)
(50,41,0)
(42,17,0)
(31,50,0)
(40,20,0)
(6,46,0)
(33,47,0)
(18,26,1)
(51,2,1)
(25,47,1)
(49,52,1)
(52,47,1)
(21,16,1)
(34,33,1)
(1,50,1)
(52,25,1)
(5,9,1)
(4,18,1)
(29,27,1)
(41,10,1)
(17,42,1)
(38,9,1)
(45,51,1)
(2,49,1)
(10,8,1)
(39,24,1)
(48,29,1)
(16,50,1)
(46,50,1)
(47,50,1)
(31,20,1)
(9,50,1)
(26,46,1)
(20,19,1)
(42,22,1)
(46,3,1)
(3,6,1)
(14,7,1)
(11,48,1)
(7,38,1)
(15,21,1)
(47,34,1)
(1,32,1)
(22,15,1)
(27,1,1)
(33,15,1)
(15,50,1)
(41,35,1)
(32,37,1)
(6,11,1)
(8,53,1)
(44,31,1)
(9,45,1)
(19,40,1)
(38,5,1)
(37,14,1)
(24,4,1)
(23,39,1)
(50,41,1)
(53,44,1)
(33,17,1)
(52,47,2)
(42,15,2)
(15,50,2)
(41,35,2)
(29,27,2)
(22,15,2)
(39,24,2)
(17,42,2)
(27,1,2)
(1,50,2)
(50,41,2)
(38,9,2)
(47,50,2)
(46,50,2)
(17,15,2)
(9,50,2)
(10,8,2)
(41,10,2)
-----------------------------------
(0,)
(1,data[0])
(2,data[0].intOne = 0)
(3,data)
(4,unionSecond)
(5,intTwo)
(6,myUnion.unionFirst)
(7,0)
(8,sizeof(twoIntsStruct)
(9,data[0])
(10,calloc(100, sizeof(twoIntsStruct)
(11,unionFirst)
(12,if (data == NULL)
(13,data)
(14,data[0].intTwo = 0)
(15,data == NULL)
(16,data)
(17,exit(-1)
(18,myUnion)
(19,NULL)
(20,data = NULL)
(21,NULL)
(22,1)
(23,RET)
(24,myUnion.unionSecond)
(25,intOne)
(26,data)
(27,&data[0])
(28,)
(29,printStructLine(&data[0])
(30,myUnion)
(31,data)
(32,0)
(33,data)
(34,0)
(35,twoIntsStruct *)
(36, sizeof(twoIntsStruct)
(37,data)
(38,data[0].intTwo)
(39,* data = myUnion.unionSecond)
(40,data)
(41,(twoIntsStruct *)
(42,-1)
(43,data)
(44,100)
(45,0)
(46,myUnion.unionFirst = data)
(47,data[0])
(48,myUnion)
(49,0)
(50,data = (twoIntsStruct *)
(51,data)
(52,data[0].intOne)
(53,twoIntsStruct)
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
