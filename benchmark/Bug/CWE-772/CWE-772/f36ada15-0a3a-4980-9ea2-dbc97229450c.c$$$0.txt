-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_11_bad()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
74,75
76,77
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,61,62,63,67,70,71,75,77
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_11_bad(){    int64_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_11_bad()
CWE401_Memory_Leak__int64_t_malloc_11_bad
{    int64_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(4,27,0)
(25,3,0)
(18,7,0)
(16,7,0)
(2,30,0)
(29,23,0)
(23,8,0)
(14,2,0)
(7,18,0)
(19,24,0)
(23,4,0)
(3,25,0)
(9,26,0)
(5,30,0)
(8,23,0)
(26,9,0)
(26,20,0)
(25,18,0)
(7,24,0)
(22,27,0)
(24,7,0)
(6,4,0)
(11,2,0)
(17,6,0)
(28,27,0)
(12,9,0)
(32,6,0)
(8,27,0)
(31,4,0)
(4,25,0)
(21,30,0)
(18,25,0)
(25,4,0)
(1,30,0)
(0,23,0)
(22,6,1)
(13,15,1)
(13,8,1)
(12,6,1)
(18,7,1)
(17,4,1)
(2,11,1)
(26,9,1)
(16,31,1)
(11,14,1)
(6,4,1)
(19,16,1)
(7,24,1)
(6,32,1)
(24,19,1)
(0,29,1)
(23,0,1)
(15,2,1)
(10,13,1)
(9,12,1)
(31,15,1)
(22,26,1)
(29,22,1)
(25,3,1)
(25,18,1)
(23,4,1)
(8,23,1)
(4,25,1)
(32,17,1)
(16,15,2)
(24,15,2)
(23,4,2)
(17,15,2)
(25,18,2)
(0,15,2)
(9,6,2)
(32,15,2)
(23,15,2)
(29,15,2)
(8,15,2)
(4,25,2)
(7,15,2)
(26,9,2)
(8,23,2)
(22,15,2)
(4,15,2)
(19,15,2)
(18,15,2)
(18,7,2)
(12,6,2)
(25,15,2)
(6,4,2)
(26,6,2)
(7,24,2)
(25,3,2)
(6,15,2)
(31,15,2)
-----------------------------------
(0,0)
(1,data)
(2,data = NULL)
(3,int64_t *)
(4,data = (int64_t *)
(5,if(globalReturnsTrue()
(6,data == NULL)
(7,100*sizeof(int64_t)
(8,printLongLongLine(data[0])
(9,-1)
(10,RET)
(11,NULL)
(12,1)
(13,globalReturnsTrue()
(14,data)
(15,globalReturnsTrue()
(16,100)
(17,data)
(18,malloc(100*sizeof(int64_t)
(19,int64_t)
(20,)
(21,if(globalReturnsTrue()
(22,L)
(23,data[0])
(24,sizeof(int64_t)
(25,(int64_t *)
(26,exit(-1)
(27,)
(28,if (data == NULL)
(29,data)
(30,)
(31,data)
(32,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
