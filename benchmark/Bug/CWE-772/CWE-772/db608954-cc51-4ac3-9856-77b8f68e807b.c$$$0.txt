-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_06_bad()
{
    int * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,61,62,63,67,70,71,75,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_06_bad(){    int * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_06_bad()
CWE401_Memory_Leak__int_realloc_06_bad
{    int * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,4,0)
(29,41,0)
(39,38,0)
(21,13,0)
(21,8,0)
(38,12,0)
(7,13,0)
(6,25,0)
(25,22,0)
(24,39,0)
(36,1,0)
(35,12,0)
(12,32,0)
(30,32,0)
(32,4,0)
(5,38,0)
(13,35,0)
(40,33,0)
(19,13,0)
(33,13,0)
(15,4,0)
(38,39,0)
(33,8,0)
(17,33,0)
(2,4,0)
(35,3,0)
(31,41,0)
(37,14,0)
(8,1,0)
(0,19,0)
(3,35,0)
(23,32,0)
(34,8,0)
(12,38,0)
(27,14,0)
(11,19,0)
(18,1,0)
(20,21,0)
(16,21,0)
(35,13,0)
(13,1,0)
(12,35,0)
(22,28,0)
(18,33,0)
(10,12,0)
(22,25,0)
(33,18,0)
(7,41,1)
(21,20,1)
(0,13,1)
(39,24,1)
(27,37,1)
(38,39,1)
(14,27,1)
(5,10,1)
(12,32,1)
(33,17,1)
(18,33,1)
(33,13,1)
(19,11,1)
(41,29,1)
(20,16,1)
(16,19,1)
(21,13,1)
(33,8,1)
(40,8,1)
(32,23,1)
(26,14,1)
(12,38,1)
(8,34,1)
(34,21,1)
(11,0,1)
(17,40,1)
(35,3,1)
(22,25,1)
(13,35,1)
(10,7,1)
(16,22,1)
(25,6,1)
(31,32,1)
(19,13,1)
(37,18,1)
(6,19,1)
(23,30,1)
(29,31,1)
(35,12,1)
(37,41,1)
(24,5,1)
(38,41,2)
(22,25,2)
(12,41,2)
(25,19,2)
(7,41,2)
(21,13,2)
(13,41,2)
(11,41,2)
(8,41,2)
(35,41,2)
(0,41,2)
(18,33,2)
(17,41,2)
(34,41,2)
(13,35,2)
(39,41,2)
(40,41,2)
(33,13,2)
(35,3,2)
(35,12,2)
(12,32,2)
(21,41,2)
(19,13,2)
(18,41,2)
(19,41,2)
(33,41,2)
(20,41,2)
(22,19,2)
(24,41,2)
(12,38,2)
(38,39,2)
(5,41,2)
(16,41,2)
(10,41,2)
(33,8,2)
(6,19,2)
-----------------------------------
(0,data)
(1,)
(2,data)
(3,int *)
(4,)
(5,100)
(6,1)
(7,data)
(8,data[0] = 5)
(9,if(STATIC_CONST_FIVE==5)
(10,data)
(11,NULL)
(12,realloc(data, 100*sizeof(int)
(13,data = (int *)
(14,STATIC_CONST_FIVE==5)
(15,if(STATIC_CONST_FIVE==5)
(16,data)
(17,0)
(18,printIntLine(data[0])
(19,data == NULL)
(20,0)
(21,data[0])
(22,exit(-1)
(23,NULL)
(24,int)
(25,-1)
(26,RET)
(27,5)
(28,)
(29,5)
(30,data)
(31,STATIC_CONST_FIVE)
(32,data = NULL)
(33,data[0])
(34,5)
(35,(int *)
(36,if (data == NULL)
(37,STATIC_CONST_FIVE)
(38,100*sizeof(int)
(39,sizeof(int)
(40,data)
(41,STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
