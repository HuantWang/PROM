-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_09_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,85,87
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_09_bad(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_09_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_09_bad
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,29,0)
(40,24,0)
(29,23,0)
(25,42,0)
(12,4,0)
(44,16,0)
(32,14,0)
(2,4,0)
(21,33,0)
(7,29,0)
(20,43,0)
(15,35,0)
(34,30,0)
(4,2,0)
(43,10,0)
(0,19,0)
(10,42,0)
(13,35,0)
(17,10,0)
(41,23,0)
(26,10,0)
(12,33,0)
(24,30,0)
(4,12,0)
(23,42,0)
(11,36,0)
(33,12,0)
(33,16,0)
(39,17,0)
(5,37,0)
(24,40,0)
(29,17,0)
(16,33,0)
(35,15,0)
(30,10,0)
(6,43,0)
(40,42,0)
(31,10,0)
(28,26,0)
(10,4,0)
(18,17,0)
(43,36,0)
(1,37,0)
(30,24,0)
(46,26,0)
(19,42,0)
(36,19,0)
(36,43,0)
(4,10,0)
(38,14,0)
(15,9,0)
(45,37,0)
(14,37,0)
(3,30,0)
(14,38,1)
(18,39,1)
(17,10,1)
(26,10,1)
(13,26,1)
(3,23,1)
(26,46,1)
(24,30,1)
(22,14,1)
(43,10,1)
(38,32,1)
(28,10,1)
(39,19,1)
(36,43,1)
(35,13,1)
(10,4,1)
(23,41,1)
(44,21,1)
(8,27,1)
(12,33,1)
(20,6,1)
(21,31,1)
(43,20,1)
(30,34,1)
(29,17,1)
(27,22,1)
(36,11,1)
(6,15,1)
(17,18,1)
(19,0,1)
(30,10,1)
(16,44,1)
(11,43,1)
(46,28,1)
(29,7,1)
(41,29,1)
(34,3,1)
(15,35,1)
(27,40,1)
(6,26,1)
(0,36,1)
(4,2,1)
(33,16,1)
(7,17,1)
(31,22,1)
(4,12,1)
(40,24,1)
(26,10,2)
(18,22,2)
(40,22,2)
(29,17,2)
(10,22,2)
(39,22,2)
(17,22,2)
(7,22,2)
(35,26,2)
(15,26,2)
(31,22,2)
(6,22,2)
(23,22,2)
(24,22,2)
(3,22,2)
(20,22,2)
(11,22,2)
(19,22,2)
(17,10,2)
(33,16,2)
(16,22,2)
(4,2,2)
(43,22,2)
(44,22,2)
(0,22,2)
(36,43,2)
(13,26,2)
(36,22,2)
(41,22,2)
(28,22,2)
(33,22,2)
(21,22,2)
(4,12,2)
(43,10,2)
(15,35,2)
(30,22,2)
(30,10,2)
(40,24,2)
(10,4,2)
(24,30,2)
(34,22,2)
(46,22,2)
(26,22,2)
(12,22,2)
(12,33,2)
(4,22,2)
(29,22,2)
-----------------------------------
(0,0)
(1,if(GLOBAL_CONST_TRUE)
(2,twoIntsStruct *)
(3,data)
(4,(twoIntsStruct *)
(5,data)
(6,data)
(7,intTwo)
(8,RET)
(9,)
(10,data = (twoIntsStruct *)
(11,intOne)
(12,malloc(100*sizeof(twoIntsStruct)
(13,1)
(14,data = NULL)
(15,exit(-1)
(16,sizeof(twoIntsStruct)
(17,data[0])
(18,0)
(19,data[0].intOne = 0)
(20,0)
(21,100)
(22,GLOBAL_CONST_TRUE)
(23,data[0].intTwo = 0)
(24,&data[0])
(25,if (data == NULL)
(26,data == NULL)
(27,GLOBAL_CONST_TRUE)
(28,data)
(29,data[0].intTwo)
(30,data[0])
(31,data)
(32,data)
(33,100*sizeof(twoIntsStruct)
(34,0)
(35,-1)
(36,data[0].intOne)
(37,)
(38,NULL)
(39,data)
(40,printStructLine(&data[0])
(41,0)
(42,)
(43,data[0])
(44,twoIntsStruct)
(45,if(GLOBAL_CONST_TRUE)
(46,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
