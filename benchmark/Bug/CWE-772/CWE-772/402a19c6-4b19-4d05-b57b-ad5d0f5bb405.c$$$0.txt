-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_09_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,57,58,59,63,66,67,70,72
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_09_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_09_bad()
CWE401_Memory_Leak__int_malloc_09_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(19,29,0)
(2,16,0)
(5,35,0)
(12,3,0)
(32,22,0)
(7,19,0)
(4,29,0)
(3,20,0)
(18,29,0)
(9,26,0)
(30,31,0)
(3,19,0)
(8,26,0)
(32,19,0)
(6,32,0)
(22,16,0)
(10,32,0)
(11,26,0)
(29,19,0)
(14,24,0)
(18,24,0)
(23,31,0)
(29,18,0)
(32,20,0)
(20,16,0)
(35,5,0)
(0,14,0)
(29,4,0)
(34,11,0)
(28,11,0)
(19,16,0)
(24,18,0)
(21,3,0)
(31,19,0)
(1,5,0)
(24,14,0)
(36,24,0)
(13,26,0)
(25,20,0)
(22,32,0)
(35,27,0)
(25,3,1)
(32,10,1)
(6,20,1)
(3,21,1)
(17,11,1)
(31,30,1)
(21,12,1)
(30,23,1)
(33,22,1)
(34,28,1)
(29,4,1)
(15,33,1)
(12,35,1)
(0,36,1)
(1,31,1)
(5,1,1)
(22,32,1)
(19,29,1)
(10,6,1)
(14,0,1)
(32,19,1)
(35,5,1)
(29,18,1)
(18,24,1)
(11,34,1)
(3,19,1)
(7,17,1)
(24,14,1)
(32,20,1)
(20,25,1)
(23,19,1)
(31,19,1)
(12,31,1)
(36,7,1)
(33,17,1)
(19,17,2)
(22,17,2)
(6,17,2)
(0,17,2)
(18,24,2)
(32,17,2)
(30,17,2)
(12,17,2)
(20,17,2)
(35,5,2)
(25,17,2)
(32,20,2)
(29,18,2)
(7,17,2)
(23,17,2)
(5,31,2)
(10,17,2)
(29,17,2)
(31,19,2)
(1,31,2)
(22,32,2)
(14,17,2)
(24,17,2)
(21,17,2)
(3,17,2)
(3,19,2)
(19,29,2)
(35,31,2)
(32,19,2)
(29,4,2)
(31,17,2)
(36,17,2)
(18,17,2)
(24,14,2)
-----------------------------------
(0,int)
(1,1)
(2,if (data == NULL)
(3,data[0])
(4,int *)
(5,-1)
(6,data)
(7,data)
(8,if(GLOBAL_CONST_TRUE)
(9,if(GLOBAL_CONST_TRUE)
(10,0)
(11,data = NULL)
(12,data)
(13,data)
(14,sizeof(int)
(15,RET)
(16,)
(17,GLOBAL_CONST_TRUE)
(18,malloc(100*sizeof(int)
(19,data = (int *)
(20,data[0] = 5)
(21,0)
(22,printIntLine(data[0])
(23,data)
(24,100*sizeof(int)
(25,5)
(26,)
(27,)
(28,data)
(29,(int *)
(30,NULL)
(31,data == NULL)
(32,data[0])
(33,GLOBAL_CONST_TRUE)
(34,NULL)
(35,exit(-1)
(36,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
