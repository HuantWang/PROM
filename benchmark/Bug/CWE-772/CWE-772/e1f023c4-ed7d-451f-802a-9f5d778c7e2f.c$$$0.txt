-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_14_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
85,87
86,87
89,90
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,87,88,90
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_14_bad(){    twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_14_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_14_bad
{    twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(4,8,0)
(35,33,0)
(45,40,0)
(19,16,0)
(16,24,0)
(25,44,0)
(46,33,0)
(21,42,0)
(20,5,0)
(3,50,0)
(37,40,0)
(9,44,0)
(5,20,0)
(40,24,0)
(12,33,0)
(4,12,0)
(1,24,0)
(48,36,0)
(14,7,0)
(13,2,0)
(28,17,0)
(36,42,0)
(24,33,0)
(27,20,0)
(30,2,0)
(50,33,0)
(49,6,0)
(38,6,0)
(26,2,0)
(39,42,0)
(36,48,0)
(7,15,0)
(15,7,0)
(0,4,0)
(47,12,0)
(22,20,0)
(44,2,0)
(31,8,0)
(43,16,0)
(37,35,0)
(5,50,0)
(34,8,0)
(23,39,0)
(42,39,0)
(24,36,0)
(20,24,0)
(36,24,0)
(8,24,0)
(29,40,0)
(42,36,0)
(15,11,0)
(8,4,0)
(10,5,0)
(35,37,0)
(40,37,0)
(32,17,0)
(28,6,1)
(17,32,1)
(27,15,1)
(15,7,1)
(28,35,1)
(20,24,1)
(45,29,1)
(0,8,1)
(32,28,1)
(16,43,1)
(50,3,1)
(4,8,1)
(10,20,1)
(9,25,1)
(36,42,1)
(49,44,1)
(34,50,1)
(38,49,1)
(36,48,1)
(27,16,1)
(18,17,1)
(6,38,1)
(22,27,1)
(23,21,1)
(35,37,1)
(24,36,1)
(31,34,1)
(47,4,1)
(12,47,1)
(4,0,1)
(8,24,1)
(40,45,1)
(42,39,1)
(5,10,1)
(21,1,1)
(7,14,1)
(3,5,1)
(44,9,1)
(8,31,1)
(37,40,1)
(5,20,1)
(1,6,1)
(29,12,1)
(40,24,1)
(39,23,1)
(20,22,1)
(19,24,1)
(16,24,1)
(43,19,1)
(14,16,1)
(39,6,2)
(14,16,2)
(27,6,2)
(43,6,2)
(16,24,2)
(34,6,2)
(37,40,2)
(40,6,2)
(8,6,2)
(36,48,2)
(1,6,2)
(42,39,2)
(7,16,2)
(3,6,2)
(29,6,2)
(10,6,2)
(15,7,2)
(15,16,2)
(4,6,2)
(22,6,2)
(35,6,2)
(35,37,2)
(31,6,2)
(42,6,2)
(36,6,2)
(50,6,2)
(12,6,2)
(5,6,2)
(45,6,2)
(47,6,2)
(24,36,2)
(21,6,2)
(20,6,2)
(20,24,2)
(24,6,2)
(5,20,2)
(16,6,2)
(37,6,2)
(23,6,2)
(40,24,2)
(19,6,2)
(36,42,2)
(8,24,2)
(0,6,2)
(4,8,2)
-----------------------------------
(0,intTwo)
(1,data)
(2,)
(3,0)
(4,data[0].intTwo)
(5,data[0].intOne)
(6,globalFive==5)
(7,-1)
(8,data[0])
(9,NULL)
(10,intOne)
(11,)
(12,data[0].intTwo = 0)
(13,data)
(14,1)
(15,exit(-1)
(16,data == NULL)
(17,globalFive==5)
(18,RET)
(19,data)
(20,data[0])
(21,100)
(22,0)
(23,twoIntsStruct)
(24,data = (twoIntsStruct *)
(25,data)
(26,if(globalFive==5)
(27,data)
(28,globalFive)
(29,data)
(30,if(globalFive==5)
(31,0)
(32,5)
(33,)
(34,data)
(35,printStructLine(&data[0])
(36,(twoIntsStruct *)
(37,&data[0])
(38,5)
(39,sizeof(twoIntsStruct)
(40,data[0])
(41, sizeof(twoIntsStruct)
(42,calloc(100, sizeof(twoIntsStruct)
(43,NULL)
(44,data = NULL)
(45,0)
(46,if (data == NULL)
(47,0)
(48,twoIntsStruct *)
(49,globalFive)
(50,data[0].intOne = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
