-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_32_bad()
{
    int64_t * data;
    int64_t * *dataPtr1 = &data;
    int64_t * *dataPtr2 = &data;
    data = NULL;
    {
        int64_t * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int64_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
69,70
70,71
70,72
71,72
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
98,100
99,100
102,103
103,104
103,105
104,105
105,106
107,108
109,110
109,111
110,111
111,112
111,113
112,113
114,115
114,116
114,117
117,118
118,119
119,120
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,68,72,73,77,79,84,86,91,92,93,97,100,101,106,108,113,115,116,120,121
-----computeFrom-----
38,39
38,40
56,57
56,58
75,76
75,77
88,89
88,90
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_32_bad(){    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    data = NULL;    {        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_32_bad()
CWE401_Memory_Leak__int64_t_calloc_32_bad
{    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    data = NULL;    {        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
int64_t * *dataPtr1 = &data;
int64_t * *dataPtr1 = &data;
int64_t
int64_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int64_t * *dataPtr2 = &data;
int64_t * *dataPtr2 = &data;
int64_t
int64_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }
int64_t * data = *dataPtr1;
int64_t * data = *dataPtr1;
int64_t
int64_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int64_t * data = *dataPtr2;
int64_t * data = *dataPtr2;
int64_t
int64_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(4,34,0)
(7,0,0)
(43,13,0)
(46,17,0)
(20,43,0)
(15,23,0)
(2,15,0)
(10,43,0)
(35,48,0)
(6,23,0)
(21,8,0)
(11,10,0)
(32,47,0)
(29,23,0)
(0,7,0)
(35,17,0)
(40,53,0)
(13,23,0)
(12,13,0)
(19,13,0)
(49,8,0)
(42,35,0)
(38,11,0)
(37,47,0)
(48,35,0)
(10,13,0)
(39,52,0)
(5,43,0)
(24,23,0)
(17,23,0)
(27,52,0)
(51,29,0)
(28,49,0)
(20,36,0)
(43,20,0)
(7,50,0)
(45,40,0)
(33,13,0)
(20,8,0)
(53,13,0)
(22,29,0)
(14,48,0)
(11,15,0)
(52,43,0)
(16,53,0)
(24,34,0)
(53,40,0)
(9,15,0)
(15,9,0)
(44,24,0)
(34,24,0)
(1,0,0)
(32,13,0)
(31,47,0)
(25,10,0)
(36,20,0)
(26,23,0)
(47,43,0)
(48,24,0)
(3,23,0)
(18,9,0)
(8,49,0)
(47,32,0)
(40,15,0)
(8,20,0)
(11,38,1)
(28,21,1)
(39,27,1)
(31,12,1)
(47,37,1)
(11,15,1)
(48,14,1)
(0,1,1)
(25,11,1)
(15,9,1)
(34,4,1)
(44,15,1)
(10,43,1)
(35,48,1)
(1,52,1)
(40,15,1)
(38,32,1)
(52,43,1)
(9,18,1)
(18,2,1)
(4,44,1)
(29,22,1)
(49,28,1)
(51,24,1)
(21,5,1)
(16,29,1)
(40,45,1)
(24,34,1)
(27,43,1)
(20,36,1)
(53,40,1)
(41,35,1)
(7,0,1)
(8,49,1)
(52,39,1)
(22,51,1)
(32,47,1)
(37,31,1)
(42,10,1)
(5,53,1)
(48,24,1)
(43,20,1)
(12,7,1)
(12,52,1)
(47,43,1)
(14,42,1)
(20,8,1)
(45,16,1)
(10,25,1)
(1,52,2)
(48,24,2)
(11,15,2)
(43,20,2)
(20,36,2)
(40,15,2)
(53,40,2)
(20,8,2)
(24,34,2)
(7,52,2)
(7,0,2)
(8,49,2)
(0,52,2)
(32,47,2)
(35,48,2)
(47,43,2)
(10,43,2)
(52,43,2)
(15,9,2)
-----------------------------------
(0,-1)
(1,1)
(2,dataPtr1)
(3,data)
(4,data)
(5,data)
(6,dataPtr1)
(7,exit(-1)
(8,calloc(100, sizeof(int64_t)
(9,&data)
(10,*dataPtr1 = data)
(11,*dataPtr1)
(12,L)
(13,)
(14,dataPtr2)
(15,* *dataPtr1 = &data)
(16,data)
(17,)
(18,data)
(19,data)
(20,(int64_t *)
(21,100)
(22,NULL)
(23,)
(24,* *dataPtr2 = &data)
(25,data)
(26,dataPtr2)
(27,data)
(28,int64_t)
(29,data = NULL)
(30, sizeof(int64_t)
(31,data)
(32,printLongLongLine(data[0])
(33,if (data == NULL)
(34,&data)
(35,* data = *dataPtr2)
(36,int64_t *)
(37,0)
(38,dataPtr1)
(39,NULL)
(40,*dataPtr1)
(41,RET)
(42,data)
(43,data = (int64_t *)
(44,dataPtr2)
(45,dataPtr1)
(46,data)
(47,data[0])
(48,*dataPtr2)
(49,sizeof(int64_t)
(50,)
(51,data)
(52,data == NULL)
(53,* data = *dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
