-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
80,81
82,83
82,84
82,85
83,84
85,86
87,88
87,89
88,89
90,91
91,92
91,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
102,103
102,104
102,105
103,104
105,106
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,31,35,37,40,42,45,46,50,52,57,59,63,65,66,70,72,76,79,81,84,86,89,92,93,97,99,104,106,107,111,113,117,119
-----computeFrom-----
13,14
13,15
17,18
17,19
41,42
41,43
48,49
48,50
74,75
74,76
87,88
87,89
95,96
95,97
-----guardedBy-----
97,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_17_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(47,18,0)
(45,17,0)
(4,3,0)
(47,43,0)
(50,49,0)
(7,37,0)
(44,39,0)
(16,19,0)
(38,49,0)
(33,37,0)
(9,45,0)
(28,43,0)
(26,21,0)
(47,33,0)
(48,39,0)
(1,48,0)
(17,23,0)
(48,16,0)
(30,37,0)
(12,43,0)
(35,19,0)
(37,33,0)
(39,45,0)
(21,45,0)
(39,48,0)
(33,47,0)
(20,8,0)
(52,9,0)
(8,34,0)
(36,51,0)
(46,6,0)
(49,6,0)
(22,46,0)
(16,48,0)
(9,34,0)
(2,16,0)
(19,16,0)
(13,5,0)
(45,39,0)
(51,25,0)
(0,5,0)
(12,17,0)
(18,47,0)
(43,47,0)
(31,6,0)
(40,45,0)
(51,36,0)
(10,21,0)
(43,17,0)
(27,12,0)
(11,30,0)
(37,30,0)
(15,17,0)
(3,43,0)
(8,45,0)
(24,17,0)
(32,17,0)
(41,3,0)
(42,6,0)
(39,44,0)
(48,43,0)
(14,36,0)
(4,43,1)
(30,11,1)
(9,52,1)
(21,26,1)
(2,1,1)
(22,9,1)
(19,35,1)
(22,21,1)
(27,51,1)
(35,2,1)
(33,37,1)
(52,8,1)
(3,41,1)
(8,20,1)
(46,22,1)
(47,33,1)
(39,44,1)
(36,14,1)
(37,30,1)
(46,6,1)
(38,46,1)
(6,31,1)
(51,36,1)
(38,6,1)
(31,42,1)
(49,50,1)
(11,7,1)
(16,19,1)
(10,45,1)
(1,40,1)
(29,49,1)
(3,43,1)
(12,27,1)
(7,28,1)
(21,45,1)
(43,47,1)
(47,18,1)
(45,39,1)
(9,45,1)
(27,3,1)
(28,49,1)
(48,43,1)
(20,21,1)
(48,16,1)
(49,6,1)
(50,38,1)
(14,3,1)
(39,48,1)
(8,45,1)
(26,10,1)
(40,12,1)
(12,43,1)
(41,4,1)
(38,49,2)
(10,49,2)
(51,36,2)
(36,3,2)
(12,43,2)
(40,49,2)
(9,21,2)
(12,49,2)
(37,30,2)
(51,3,2)
(48,49,2)
(47,18,2)
(3,43,2)
(48,43,2)
(43,49,2)
(3,49,2)
(39,44,2)
(16,19,2)
(8,21,2)
(45,39,2)
(47,33,2)
(33,37,2)
(1,49,2)
(47,49,2)
(21,45,2)
(19,49,2)
(9,45,2)
(28,49,2)
(48,16,2)
(45,49,2)
(52,21,2)
(35,49,2)
(16,49,2)
(22,49,2)
(41,49,2)
(49,49,2)
(26,49,2)
(20,21,2)
(46,49,2)
(7,49,2)
(2,49,2)
(43,47,2)
(49,6,2)
(27,49,2)
(30,49,2)
(39,49,2)
(33,49,2)
(37,49,2)
(4,49,2)
(14,3,2)
(11,49,2)
(39,48,2)
(50,49,2)
(46,6,2)
(21,49,2)
(8,45,2)
-----------------------------------
(0,j)
(1,data)
(2,130000)
(3,data == NULL)
(4,data)
(5,)
(6,j = 0)
(7,100)
(8,printWLine(data)
(9,free(data)
(10,data)
(11,wchar_t)
(12,printWLine(data)
(13,for(j = 0; j < 1; j++)
(14,1)
(15,if (data != NULL)
(16,(130000)
(17,)
(18,wchar_t *)
(19,sizeof(wchar_t)
(20,data)
(21,data != NULL)
(22,j)
(23,)
(24,data)
(25,)
(26,NULL)
(27,data)
(28,data)
(29,RET)
(30,sizeof(wchar_t)
(31,0)
(32,if (data == NULL)
(33,malloc(100*sizeof(wchar_t)
(34,)
(35,wchar_t)
(36,-1)
(37,100*sizeof(wchar_t)
(38,j)
(39,(wchar_t *)
(40,data)
(41,NULL)
(42,j)
(43,* data = (wchar_t *)
(44,wchar_t *)
(45,data = (wchar_t *)
(46,j++)
(47,(wchar_t *)
(48,realloc(data, (130000)
(49,j < 1)
(50,1)
(51,exit(-1)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
