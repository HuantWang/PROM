-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_32_bad()
{
    struct _twoIntsStruct * data;
    struct _twoIntsStruct * *dataPtr1 = &data;
    struct _twoIntsStruct * *dataPtr2 = &data;
    data = NULL;
    {
        struct _twoIntsStruct * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        *dataPtr1 = data;
    }
    {
        struct _twoIntsStruct * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
68,69
70,71
70,72
72,73
73,74
73,75
74,75
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
92,94
93,94
93,95
94,95
99,100
100,101
100,102
101,102
101,103
102,103
102,104
103,104
108,109
109,110
109,111
110,111
112,113
112,114
113,114
113,115
114,115
116,117
118,119
119,120
119,121
120,121
123,124
124,125
124,126
125,126
126,127
128,129
130,131
130,132
131,132
132,133
132,134
133,134
135,136
135,137
135,138
138,139
139,140
140,141
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,71,75,76,80,82,87,89,95,96,97,98,104,105,106,107,111,115,117,121,122,127,129,134,136,137,141,142
-----computeFrom-----
38,39
38,40
56,57
56,58
70,71
70,72
78,79
78,80
91,92
91,93
100,101
100,102
124,125
124,126
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_32_bad(){    struct _twoIntsStruct * data;    struct _twoIntsStruct * *dataPtr1 = &data;    struct _twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }    {        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_32_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_32_bad
{    struct _twoIntsStruct * data;    struct _twoIntsStruct * *dataPtr1 = &data;    struct _twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }    {        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
struct _twoIntsStruct * *dataPtr1 = &data;
struct _twoIntsStruct * *dataPtr1 = &data;
struct _twoIntsStruct
_twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
struct _twoIntsStruct * *dataPtr2 = &data;
struct _twoIntsStruct * *dataPtr2 = &data;
struct _twoIntsStruct
_twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }
struct _twoIntsStruct * data = *dataPtr1;
struct _twoIntsStruct * data = *dataPtr1;
struct _twoIntsStruct
_twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * data = *dataPtr2;
struct _twoIntsStruct * data = *dataPtr2;
struct _twoIntsStruct
_twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(68,34,0)
(22,3,0)
(1,22,0)
(27,59,0)
(35,8,0)
(33,13,0)
(12,68,0)
(60,5,0)
(32,66,0)
(51,5,0)
(63,31,0)
(15,32,0)
(56,10,0)
(63,34,0)
(55,22,0)
(17,29,0)
(35,62,0)
(3,13,0)
(34,57,0)
(37,3,0)
(5,60,0)
(57,70,0)
(9,68,0)
(65,12,0)
(6,60,0)
(21,35,0)
(59,3,0)
(50,13,0)
(13,8,0)
(15,13,0)
(43,3,0)
(14,39,0)
(57,13,0)
(38,13,0)
(42,29,0)
(53,52,0)
(29,17,0)
(34,68,0)
(68,12,0)
(25,16,0)
(20,49,0)
(29,69,0)
(12,65,0)
(32,64,0)
(39,8,0)
(39,67,0)
(7,13,0)
(45,59,0)
(61,7,0)
(4,5,0)
(3,63,0)
(5,3,0)
(10,7,0)
(19,52,0)
(54,37,0)
(67,39,0)
(22,64,0)
(47,28,0)
(48,8,0)
(70,57,0)
(18,38,0)
(11,67,0)
(58,17,0)
(25,49,0)
(26,57,0)
(52,8,0)
(10,39,0)
(23,69,0)
(0,8,0)
(46,70,0)
(36,34,0)
(44,8,0)
(31,63,0)
(40,45,0)
(62,35,0)
(59,45,0)
(60,38,0)
(70,39,0)
(34,63,0)
(63,3,0)
(28,13,0)
(41,59,0)
(24,62,0)
(69,8,0)
(32,15,0)
(17,35,0)
(64,32,0)
(45,28,0)
(30,37,0)
(7,3,0)
(49,25,0)
(64,22,0)
(66,32,0)
(41,27,1)
(63,34,1)
(12,65,1)
(37,3,1)
(39,67,1)
(37,54,1)
(4,51,1)
(45,40,1)
(27,37,1)
(53,35,1)
(24,21,1)
(45,59,1)
(17,35,1)
(20,37,1)
(7,3,1)
(55,1,1)
(34,68,1)
(18,60,1)
(15,32,1)
(70,46,1)
(27,25,1)
(9,36,1)
(6,5,1)
(36,43,1)
(1,38,1)
(38,18,1)
(30,3,1)
(60,5,1)
(49,20,1)
(35,62,1)
(43,57,1)
(51,28,1)
(5,4,1)
(19,53,1)
(60,6,1)
(25,49,1)
(32,66,1)
(54,30,1)
(67,11,1)
(29,17,1)
(42,7,1)
(56,15,1)
(5,3,1)
(10,39,1)
(68,12,1)
(22,55,1)
(46,26,1)
(10,56,1)
(17,58,1)
(7,61,1)
(63,31,1)
(70,39,1)
(59,41,1)
(32,64,1)
(47,45,1)
(40,59,1)
(11,14,1)
(22,3,1)
(58,42,1)
(26,52,1)
(21,39,1)
(52,19,1)
(57,70,1)
(3,63,1)
(12,9,1)
(64,22,1)
(61,10,1)
(59,3,1)
(28,47,1)
(34,57,1)
(62,24,1)
(2,29,1)
(29,17,2)
(57,70,2)
(63,34,2)
(34,68,2)
(68,12,2)
(64,22,2)
(7,3,2)
(5,3,2)
(37,3,2)
(45,59,2)
(59,3,2)
(35,62,2)
(70,39,2)
(15,32,2)
(17,35,2)
(20,37,2)
(63,31,2)
(12,65,2)
(49,37,2)
(32,64,2)
(39,67,2)
(22,3,2)
(32,66,2)
(25,37,2)
(34,57,2)
(25,49,2)
(10,39,2)
(60,5,2)
(3,63,2)
-----------------------------------
(0,dataPtr2)
(1,data)
(2,RET)
(3,data = (struct _twoIntsStruct *)
(4,0)
(5,data[0])
(6,intTwo)
(7,*dataPtr1 = data)
(8,)
(9,100)
(10,*dataPtr1)
(11,data)
(12,sizeof(struct _twoIntsStruct)
(13,)
(14,dataPtr1)
(15,printStructLine((twoIntsStruct *)
(16,)
(17,*dataPtr2)
(18,0)
(19,NULL)
(20,1)
(21,dataPtr2)
(22,data[0])
(23,data)
(24,data)
(25,exit(-1)
(26,data)
(27,data)
(28,data[0].intOne = 0)
(29,* data = *dataPtr2)
(30,data)
(31,struct _twoIntsStruct *)
(32,(twoIntsStruct *)
(33,if (data == NULL)
(34,realloc(data, 100*sizeof(struct _twoIntsStruct)
(35,* *dataPtr2 = &data)
(36,data)
(37,data == NULL)
(38,data[0].intTwo = 0)
(39,* *dataPtr1 = &data)
(40,intOne)
(41,0)
(42,data)
(43,data)
(44,data)
(45,data[0].intOne)
(46,dataPtr1)
(47,0)
(48,dataPtr1)
(49,-1)
(50,data)
(51,data)
(52,data = NULL)
(53,data)
(54,NULL)
(55,0)
(56,dataPtr1)
(57,* data = *dataPtr1)
(58,dataPtr2)
(59,data[0])
(60,data[0].intTwo)
(61,data)
(62,&data)
(63,(struct _twoIntsStruct *)
(64,&data[0])
(65,struct _twoIntsStruct)
(66,twoIntsStruct *)
(67,&data)
(68,100*sizeof(struct _twoIntsStruct)
(69,)
(70,*dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
