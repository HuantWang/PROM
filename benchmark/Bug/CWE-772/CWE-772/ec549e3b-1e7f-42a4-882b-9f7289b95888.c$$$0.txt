-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_06_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
75,76
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,60,62,63,67,69,73,74,76
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_06_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_06_bad()
CWE401_Memory_Leak__wchar_t_realloc_06_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(16,26,0)
(10,25,0)
(1,27,0)
(11,22,0)
(14,5,0)
(33,29,0)
(21,27,0)
(15,21,0)
(17,4,0)
(27,22,0)
(7,32,0)
(3,29,0)
(12,26,0)
(12,18,0)
(34,22,0)
(21,12,0)
(23,22,0)
(26,12,0)
(30,25,0)
(20,7,0)
(7,21,0)
(17,6,0)
(29,26,0)
(28,5,0)
(10,26,0)
(26,25,0)
(18,12,0)
(0,19,0)
(2,27,0)
(12,21,0)
(21,7,0)
(9,4,0)
(8,32,0)
(13,19,0)
(4,17,0)
(24,10,0)
(32,7,0)
(31,19,1)
(9,29,1)
(27,2,1)
(8,20,1)
(15,16,1)
(32,8,1)
(21,27,1)
(2,1,1)
(10,26,1)
(4,9,1)
(19,13,1)
(29,3,1)
(12,21,1)
(0,10,1)
(3,33,1)
(14,28,1)
(16,5,1)
(17,4,1)
(10,24,1)
(33,26,1)
(24,29,1)
(13,0,1)
(20,15,1)
(5,14,1)
(12,18,1)
(24,17,1)
(21,7,1)
(0,5,1)
(28,27,1)
(7,32,1)
(29,26,1)
(26,12,1)
(26,12,2)
(21,27,2)
(20,5,2)
(7,5,2)
(24,5,2)
(15,5,2)
(29,5,2)
(21,5,2)
(16,5,2)
(33,5,2)
(26,5,2)
(4,29,2)
(17,29,2)
(17,4,2)
(21,7,2)
(9,29,2)
(8,5,2)
(12,5,2)
(10,26,2)
(32,5,2)
(10,5,2)
(3,5,2)
(7,32,2)
(29,26,2)
(12,21,2)
(12,18,2)
-----------------------------------
(0,STATIC_CONST_FIVE)
(1,data)
(2,NULL)
(3,NULL)
(4,-1)
(5,STATIC_CONST_FIVE==5)
(6,)
(7,100*sizeof(wchar_t)
(8,wchar_t)
(9,1)
(10,printWLine(data)
(11,data)
(12,(wchar_t *)
(13,5)
(14,5)
(15,data)
(16,data)
(17,exit(-1)
(18,wchar_t *)
(19,STATIC_CONST_FIVE==5)
(20,100)
(21,realloc(data, 100*sizeof(wchar_t)
(22,)
(23,if(STATIC_CONST_FIVE==5)
(24,data)
(25,)
(26,data = (wchar_t *)
(27,data = NULL)
(28,STATIC_CONST_FIVE)
(29,data == NULL)
(30,if (data == NULL)
(31,RET)
(32,sizeof(wchar_t)
(33,data)
(34,if(STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
