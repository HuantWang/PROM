-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_13_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
38,39
40,41
40,42
42,43
43,44
43,45
44,45
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
98,99
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,41,45,46,50,52,57,59,65,66,67,68,74,75,76,77,81,85,87,91,92,96,97,99
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
40,41
40,42
48,49
48,50
61,62
61,63
70,71
70,72
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_13_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_13_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_13_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(23,20,0)
(32,31,0)
(38,1,0)
(13,20,0)
(10,50,0)
(53,27,0)
(45,35,0)
(44,7,0)
(35,4,0)
(24,37,0)
(50,10,0)
(30,13,0)
(4,35,0)
(28,27,0)
(18,35,0)
(37,27,0)
(31,27,0)
(28,1,0)
(2,28,0)
(1,28,0)
(16,24,0)
(48,9,0)
(11,40,0)
(46,14,0)
(1,38,0)
(26,28,0)
(52,20,0)
(19,13,0)
(25,2,0)
(48,26,0)
(7,44,0)
(21,44,0)
(9,48,0)
(7,42,0)
(1,8,0)
(12,9,0)
(39,26,0)
(38,14,0)
(5,26,0)
(6,4,0)
(4,31,0)
(24,16,0)
(38,13,0)
(16,28,0)
(0,2,0)
(51,38,0)
(22,16,0)
(14,50,0)
(43,37,0)
(26,48,0)
(14,38,0)
(3,40,0)
(47,24,0)
(33,16,0)
(17,15,0)
(53,9,0)
(41,15,0)
(35,28,0)
(36,27,0)
(9,53,0)
(34,20,0)
(8,1,0)
(50,14,0)
(9,12,0)
(29,28,0)
(26,28,1)
(4,6,1)
(11,53,1)
(0,28,1)
(51,29,1)
(21,2,1)
(49,40,1)
(44,21,1)
(31,32,1)
(45,18,1)
(32,4,1)
(16,33,1)
(50,10,1)
(50,46,1)
(13,19,1)
(43,24,1)
(15,17,1)
(41,13,1)
(22,2,1)
(19,30,1)
(25,0,1)
(47,16,1)
(48,26,1)
(17,41,1)
(1,8,1)
(28,1,1)
(7,44,1)
(39,31,1)
(2,28,1)
(2,25,1)
(24,47,1)
(18,37,1)
(16,28,1)
(3,11,1)
(46,51,1)
(5,39,1)
(26,5,1)
(9,48,1)
(1,38,1)
(53,9,1)
(38,13,1)
(24,16,1)
(9,12,1)
(37,43,1)
(22,7,1)
(38,14,1)
(6,35,1)
(29,15,1)
(35,28,1)
(4,35,1)
(33,22,1)
(40,3,1)
(11,15,1)
(35,45,1)
(14,50,1)
(7,44,2)
(2,15,2)
(18,15,2)
(6,15,2)
(28,15,2)
(1,15,2)
(0,15,2)
(53,15,2)
(24,15,2)
(7,2,2)
(2,28,2)
(22,15,2)
(43,15,2)
(50,10,2)
(32,15,2)
(39,15,2)
(45,15,2)
(35,28,2)
(29,15,2)
(44,2,2)
(26,15,2)
(46,15,2)
(1,38,2)
(48,15,2)
(31,15,2)
(38,14,2)
(9,48,2)
(51,15,2)
(16,15,2)
(25,15,2)
(26,28,2)
(38,13,2)
(9,15,2)
(21,2,2)
(33,15,2)
(53,9,2)
(1,8,2)
(47,15,2)
(5,15,2)
(14,50,2)
(28,1,2)
(35,15,2)
(4,35,2)
(50,15,2)
(24,16,2)
(38,15,2)
(37,15,2)
(48,26,2)
(16,28,2)
(14,15,2)
(4,15,2)
(9,12,2)
-----------------------------------
(0,data)
(1,(struct _twoIntsStruct *)
(2,data == NULL)
(3,5)
(4,data[0].intTwo)
(5,0)
(6,intTwo)
(7,exit(-1)
(8,struct _twoIntsStruct *)
(9,(twoIntsStruct *)
(10,struct _twoIntsStruct)
(11,GLOBAL_CONST_FIVE)
(12,twoIntsStruct *)
(13,data = NULL)
(14,100*sizeof(struct _twoIntsStruct)
(15,GLOBAL_CONST_FIVE==5)
(16,data[0])
(17,5)
(18,data)
(19,NULL)
(20,)
(21,1)
(22,data)
(23,if(GLOBAL_CONST_FIVE==5)
(24,data[0].intOne)
(25,NULL)
(26,data[0])
(27,)
(28,data = (struct _twoIntsStruct *)
(29,data)
(30,data)
(31,data[0].intTwo = 0)
(32,0)
(33,0)
(34,data)
(35,data[0])
(36,if (data == NULL)
(37,data[0].intOne = 0)
(38,realloc(data, 100*sizeof(struct _twoIntsStruct)
(39,data)
(40,GLOBAL_CONST_FIVE==5)
(41,GLOBAL_CONST_FIVE)
(42,)
(43,0)
(44,-1)
(45,0)
(46,100)
(47,intOne)
(48,&data[0])
(49,RET)
(50,sizeof(struct _twoIntsStruct)
(51,data)
(52,if(GLOBAL_CONST_FIVE==5)
(53,printStructLine((twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
