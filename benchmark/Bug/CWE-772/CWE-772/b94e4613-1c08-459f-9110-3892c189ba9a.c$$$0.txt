-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_17_bad()
{
    int i,j;
    struct _twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
51,52
53,54
53,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
91,92
92,93
92,94
93,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
106,107
106,108
106,109
106,110
107,108
108,109
108,110
109,110
112,113
112,114
113,114
116,117
117,118
119,120
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,58,59,63,65,70,72,78,79,80,81,87,88,89,90,94,98,100,104,105,110,111,114,115,118,120
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
53,54
53,55
61,62
61,63
74,75
74,76
83,84
83,85
108,109
108,110
112,113
112,114
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_17_bad(){    int i,j;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_17_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_17_bad
{    int i,j;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(52,35,0)
(3,21,0)
(39,21,0)
(40,43,0)
(12,63,0)
(49,35,0)
(64,38,0)
(18,2,0)
(8,60,0)
(36,21,0)
(46,48,0)
(42,15,0)
(33,1,0)
(28,34,0)
(34,41,0)
(60,9,0)
(4,63,0)
(27,9,0)
(7,58,0)
(10,49,0)
(17,41,0)
(5,38,0)
(29,0,0)
(45,34,0)
(37,21,0)
(56,47,0)
(16,61,0)
(19,23,0)
(31,62,0)
(27,50,0)
(53,18,0)
(9,27,0)
(38,64,0)
(49,10,0)
(51,2,0)
(1,50,0)
(18,1,0)
(62,21,0)
(24,62,0)
(58,47,0)
(44,43,0)
(14,1,0)
(63,50,0)
(30,58,0)
(2,0,0)
(43,19,0)
(64,54,0)
(48,47,0)
(1,18,0)
(10,26,0)
(10,11,0)
(6,23,0)
(20,41,0)
(9,60,0)
(25,21,0)
(55,19,0)
(32,50,0)
(50,27,0)
(15,60,0)
(60,15,0)
(23,0,0)
(61,41,0)
(35,49,0)
(11,10,0)
(57,47,0)
(27,59,0)
(11,0,0)
(15,42,0)
(35,50,0)
(26,10,0)
(59,27,0)
(43,50,0)
(50,0,0)
(19,43,0)
(22,35,0)
(5,63,1)
(28,45,1)
(60,15,1)
(17,62,1)
(18,53,1)
(41,20,1)
(4,12,1)
(53,1,1)
(48,47,1)
(43,40,1)
(8,32,1)
(20,17,1)
(35,52,1)
(55,43,1)
(31,24,1)
(19,55,1)
(2,51,1)
(27,9,1)
(12,50,1)
(45,41,1)
(64,38,1)
(35,50,1)
(46,58,1)
(33,63,1)
(57,56,1)
(14,33,1)
(11,10,1)
(33,64,1)
(13,58,1)
(45,61,1)
(52,22,1)
(10,26,1)
(27,59,1)
(50,27,1)
(49,35,1)
(51,18,1)
(62,31,1)
(18,1,1)
(7,47,1)
(34,41,1)
(1,14,1)
(63,4,1)
(58,47,1)
(15,42,1)
(56,34,1)
(22,23,1)
(9,60,1)
(43,50,1)
(15,8,1)
(61,41,1)
(19,43,1)
(1,50,1)
(34,28,1)
(30,7,1)
(10,49,1)
(47,57,1)
(58,30,1)
(61,16,1)
(23,6,1)
(40,44,1)
(32,34,1)
(38,5,1)
(6,19,1)
(16,11,1)
(63,50,1)
(48,46,1)
(44,2,1)
(7,48,1)
(27,9,2)
(51,34,2)
(19,34,2)
(22,34,2)
(44,34,2)
(11,34,2)
(48,47,2)
(40,34,2)
(60,15,2)
(27,34,2)
(34,41,2)
(6,34,2)
(8,34,2)
(35,34,2)
(48,58,2)
(11,10,2)
(64,63,2)
(1,34,2)
(63,50,2)
(53,34,2)
(32,34,2)
(4,34,2)
(16,34,2)
(46,58,2)
(5,63,2)
(15,42,2)
(49,35,2)
(9,60,2)
(33,34,2)
(34,34,2)
(55,34,2)
(12,34,2)
(45,34,2)
(18,1,2)
(52,34,2)
(50,27,2)
(63,34,2)
(19,43,2)
(43,50,2)
(43,34,2)
(61,41,2)
(61,34,2)
(18,34,2)
(60,34,2)
(23,34,2)
(27,59,2)
(28,34,2)
(10,26,2)
(35,50,2)
(10,49,2)
(38,63,2)
(14,34,2)
(58,47,2)
(58,58,2)
(1,50,2)
(7,58,2)
(2,34,2)
(9,34,2)
(30,58,2)
(15,34,2)
(50,34,2)
(10,34,2)
(64,38,2)
(49,34,2)
-----------------------------------
(0,)
(1,data[0])
(2,data[0].intOne = 0)
(3,for(i = 0; i < 1; i++)
(4,NULL)
(5,1)
(6,0)
(7,j)
(8,100)
(9,malloc(100*sizeof(struct _twoIntsStruct)
(10,(twoIntsStruct *)
(11,printStructLine((twoIntsStruct *)
(12,data)
(13,RET)
(14,0)
(15,sizeof(struct _twoIntsStruct)
(16,i)
(17,i)
(18,data[0].intOne)
(19,data[0].intTwo)
(20,0)
(21,)
(22,data)
(23,data[0].intTwo = 0)
(24,data)
(25,for(j = 0; j < 1; j++)
(26,twoIntsStruct *)
(27,(struct _twoIntsStruct *)
(28,1)
(29,if (data == NULL)
(30,1)
(31,NULL)
(32,data)
(33,data)
(34,i < 1)
(35,data[0])
(36,data)
(37,i)
(38,-1)
(39,j)
(40,0)
(41,i = 0)
(42,struct _twoIntsStruct)
(43,data[0])
(44,data)
(45,i)
(46,j)
(47,j = 0)
(48,j++)
(49,&data[0])
(50,data = (struct _twoIntsStruct *)
(51,0)
(52,0)
(53,intOne)
(54,)
(55,intTwo)
(56,j)
(57,0)
(58,j < 1)
(59,struct _twoIntsStruct *)
(60,100*sizeof(struct _twoIntsStruct)
(61,i++)
(62,data = NULL)
(63,data == NULL)
(64,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
