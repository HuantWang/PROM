-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_11_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,95
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_11_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_11_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_11_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(37,14,0)
(6,24,0)
(27,42,0)
(45,3,0)
(28,36,0)
(8,11,0)
(12,34,0)
(30,34,0)
(24,6,0)
(42,4,0)
(14,37,0)
(40,4,0)
(34,4,0)
(2,5,0)
(11,16,0)
(9,0,0)
(20,36,0)
(10,38,0)
(38,10,0)
(48,16,0)
(5,20,0)
(31,40,0)
(23,11,0)
(1,38,0)
(10,44,0)
(15,41,0)
(3,36,0)
(7,29,0)
(42,39,0)
(46,36,0)
(41,46,0)
(0,18,0)
(46,41,0)
(4,36,0)
(14,3,0)
(29,4,0)
(17,16,0)
(13,37,0)
(0,24,0)
(34,5,0)
(24,0,0)
(39,42,0)
(41,15,0)
(37,4,0)
(41,39,0)
(43,16,0)
(39,41,0)
(40,18,0)
(40,31,0)
(35,20,0)
(18,40,0)
(4,40,0)
(18,0,0)
(33,4,0)
(25,42,0)
(32,14,0)
(5,34,0)
(26,29,0)
(22,37,0)
(12,30,1)
(30,10,1)
(0,24,1)
(29,4,1)
(26,7,1)
(19,46,1)
(4,40,1)
(5,2,1)
(32,37,1)
(41,15,1)
(42,27,1)
(24,6,1)
(30,29,1)
(34,4,1)
(40,18,1)
(10,38,1)
(46,41,1)
(41,39,1)
(14,32,1)
(33,47,1)
(7,4,1)
(25,3,1)
(13,22,1)
(20,35,1)
(24,9,1)
(1,29,1)
(47,11,1)
(14,37,1)
(37,13,1)
(34,12,1)
(35,5,1)
(11,8,1)
(27,25,1)
(42,4,1)
(39,42,1)
(21,19,1)
(19,47,1)
(3,45,1)
(18,0,1)
(29,26,1)
(2,34,1)
(45,14,1)
(22,20,1)
(5,34,1)
(37,4,1)
(40,31,1)
(8,23,1)
(9,33,1)
(38,1,1)
(46,41,2)
(34,4,2)
(2,47,2)
(46,47,2)
(40,31,2)
(9,47,2)
(10,38,2)
(5,47,2)
(27,47,2)
(41,39,2)
(45,47,2)
(22,47,2)
(40,18,2)
(41,47,2)
(0,47,2)
(32,47,2)
(24,47,2)
(13,47,2)
(42,4,2)
(24,6,2)
(7,47,2)
(25,47,2)
(29,4,2)
(14,37,2)
(0,24,2)
(20,47,2)
(42,47,2)
(14,47,2)
(26,47,2)
(37,4,2)
(29,47,2)
(18,0,2)
(41,15,2)
(40,47,2)
(4,40,2)
(4,47,2)
(37,47,2)
(33,47,2)
(18,47,2)
(39,47,2)
(3,47,2)
(34,47,2)
(35,47,2)
(38,29,2)
(10,29,2)
(39,42,2)
(1,29,2)
(12,47,2)
(30,47,2)
(5,34,2)
-----------------------------------
(0,100*sizeof(struct _twoIntsStruct)
(1,1)
(2,intOne)
(3,data[0].intTwo = 0)
(4,data = (struct _twoIntsStruct *)
(5,data[0].intOne)
(6,struct _twoIntsStruct)
(7,data)
(8,NULL)
(9,100)
(10,exit(-1)
(11,data = NULL)
(12,0)
(13,0)
(14,data[0].intTwo)
(15,twoIntsStruct *)
(16,)
(17,data)
(18,malloc(100*sizeof(struct _twoIntsStruct)
(19,globalReturnsTrue()
(20,data[0].intOne = 0)
(21,RET)
(22,data)
(23,data)
(24,sizeof(struct _twoIntsStruct)
(25,data)
(26,NULL)
(27,0)
(28,if (data == NULL)
(29,data == NULL)
(30,data)
(31,struct _twoIntsStruct *)
(32,intTwo)
(33,data)
(34,data[0])
(35,0)
(36,)
(37,data[0])
(38,-1)
(39,&data[0])
(40,(struct _twoIntsStruct *)
(41,(twoIntsStruct *)
(42,data[0])
(43,if(globalReturnsTrue()
(44,)
(45,0)
(46,printStructLine((twoIntsStruct *)
(47,globalReturnsTrue()
(48,if(globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
