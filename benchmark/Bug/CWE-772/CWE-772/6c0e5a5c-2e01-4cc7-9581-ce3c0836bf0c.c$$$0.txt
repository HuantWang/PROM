-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_12_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
95,97
96,97
98,99
98,100
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
108,110
109,110
114,115
115,116
115,117
116,117
116,118
117,118
117,119
118,119
123,124
124,125
124,126
125,126
127,128
128,129
128,130
129,130
132,133
132,134
132,135
133,134
134,135
136,137
138,139
139,140
140,141
140,142
141,142
143,144
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,88,92,94,97,99,103,104,110,111,112,113,119,120,121,122,126,130,131,135,137,142,144
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
86,87
86,88
98,99
98,100
106,107
106,108
115,116
115,117
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_12_bad(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_12_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_12_bad
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(0,72,0)
(63,34,0)
(34,63,0)
(72,31,0)
(40,63,0)
(31,34,0)
(24,68,0)
(77,63,0)
(1,13,0)
(70,45,0)
(25,42,0)
(2,57,0)
(20,23,0)
(15,25,0)
(55,2,0)
(54,69,0)
(17,73,0)
(72,47,0)
(76,39,0)
(42,25,0)
(3,24,0)
(7,14,0)
(57,2,0)
(34,50,0)
(23,37,0)
(77,37,0)
(64,1,0)
(43,39,0)
(39,37,0)
(38,9,0)
(44,54,0)
(32,8,0)
(13,1,0)
(14,8,0)
(8,14,0)
(31,72,0)
(65,73,0)
(10,68,0)
(22,45,0)
(9,23,0)
(23,9,0)
(4,77,0)
(74,61,0)
(38,30,0)
(9,38,0)
(24,3,0)
(73,65,0)
(39,43,0)
(51,42,0)
(18,49,0)
(5,26,0)
(67,37,0)
(19,47,0)
(75,48,0)
(35,23,0)
(52,69,0)
(25,63,0)
(3,49,0)
(58,78,0)
(54,26,0)
(36,49,0)
(16,26,0)
(27,57,0)
(56,48,0)
(62,41,0)
(47,72,0)
(69,30,0)
(46,25,0)
(37,30,0)
(37,39,0)
(49,3,0)
(14,37,0)
(50,34,0)
(8,41,0)
(45,63,0)
(11,78,0)
(53,65,0)
(49,63,0)
(71,68,0)
(21,14,0)
(42,10,0)
(2,63,0)
(61,68,0)
(48,78,0)
(41,30,0)
(13,66,0)
(6,2,0)
(57,61,0)
(65,76,0)
(26,54,0)
(77,29,0)
(59,78,0)
(26,37,0)
(76,65,0)
(39,76,0)
(63,68,0)
(34,31,0)
(33,10,0)
(12,28,1)
(8,32,1)
(26,37,1)
(37,39,1)
(55,13,1)
(73,17,1)
(48,56,1)
(69,52,1)
(2,6,1)
(35,20,1)
(45,63,1)
(14,37,1)
(57,27,1)
(46,15,1)
(4,28,1)
(40,60,1)
(13,1,1)
(72,47,1)
(19,0,1)
(61,74,1)
(51,25,1)
(44,26,1)
(54,26,1)
(56,75,1)
(57,2,1)
(36,18,1)
(1,64,1)
(34,50,1)
(77,63,1)
(77,37,1)
(0,40,1)
(23,37,1)
(54,44,1)
(38,9,1)
(6,55,1)
(47,19,1)
(21,7,1)
(32,14,1)
(62,8,1)
(55,45,1)
(45,22,1)
(28,24,1)
(20,41,1)
(49,36,1)
(7,69,1)
(64,45,1)
(67,60,1)
(14,21,1)
(42,25,1)
(2,63,1)
(53,67,1)
(41,62,1)
(24,3,1)
(8,14,1)
(10,33,1)
(9,23,1)
(76,65,1)
(17,53,1)
(34,31,1)
(63,34,1)
(60,48,1)
(15,61,1)
(70,63,1)
(25,63,1)
(3,49,1)
(23,35,1)
(22,70,1)
(26,16,1)
(65,73,1)
(25,46,1)
(77,4,1)
(42,51,1)
(5,37,1)
(74,57,1)
(16,5,1)
(12,77,1)
(49,63,1)
(27,2,1)
(39,76,1)
(33,42,1)
(39,43,1)
(52,54,1)
(18,10,1)
(31,72,1)
(28,38,1)
(49,60,2)
(16,60,2)
(14,60,2)
(49,63,2)
(7,60,2)
(8,14,2)
(23,37,2)
(2,60,2)
(24,3,2)
(31,72,2)
(72,47,2)
(20,60,2)
(76,65,2)
(15,60,2)
(70,60,2)
(5,60,2)
(57,2,2)
(9,23,2)
(37,39,2)
(3,49,2)
(54,60,2)
(22,60,2)
(25,60,2)
(47,60,2)
(72,60,2)
(36,60,2)
(67,60,2)
(51,60,2)
(64,45,2)
(9,60,2)
(52,60,2)
(63,60,2)
(53,60,2)
(74,60,2)
(77,63,2)
(38,9,2)
(17,60,2)
(8,60,2)
(37,60,2)
(44,60,2)
(32,60,2)
(34,50,2)
(45,63,2)
(25,63,2)
(18,60,2)
(19,60,2)
(39,76,2)
(55,60,2)
(41,60,2)
(73,60,2)
(33,60,2)
(31,60,2)
(21,60,2)
(77,28,2)
(13,45,2)
(34,60,2)
(0,60,2)
(1,45,2)
(38,60,2)
(46,60,2)
(34,31,2)
(63,34,2)
(24,60,2)
(54,26,2)
(62,60,2)
(39,43,2)
(13,1,2)
(14,37,2)
(42,60,2)
(6,60,2)
(45,60,2)
(26,37,2)
(65,60,2)
(27,60,2)
(39,60,2)
(35,60,2)
(3,60,2)
(69,60,2)
(61,60,2)
(42,25,2)
(10,60,2)
(40,60,2)
(57,60,2)
(2,63,2)
(23,60,2)
(26,60,2)
(4,28,2)
(65,73,2)
(76,60,2)
(77,37,2)
-----------------------------------
(0,100)
(1,-1)
(2,data[0])
(3,&data[0])
(4,data)
(5,data)
(6,0)
(7,data)
(8,data[0].intTwo)
(9,&data[0])
(10,data[0].intTwo = 0)
(11,if(globalReturnsTrueOrFalse()
(12,RET)
(13,exit(-1)
(14,data[0])
(15,data)
(16,0)
(17,twoIntsStruct)
(18,data)
(19,twoIntsStruct)
(20,data)
(21,0)
(22,NULL)
(23,data[0])
(24,printStructLine(&data[0])
(25,data[0])
(26,data[0])
(27,intOne)
(28,globalReturnsTrueOrFalse()
(29,)
(30,)
(31,malloc(100*sizeof(twoIntsStruct)
(32,intTwo)
(33,0)
(34,(twoIntsStruct *)
(35,0)
(36,0)
(37,data = (twoIntsStruct *)
(38,printStructLine(&data[0])
(39,(twoIntsStruct *)
(40,data)
(41,data[0].intTwo = 0)
(42,data[0].intTwo)
(43,twoIntsStruct *)
(44,intOne)
(45,data == NULL)
(46,0)
(47,sizeof(twoIntsStruct)
(48,data = NULL)
(49,data[0])
(50,twoIntsStruct *)
(51,intTwo)
(52,0)
(53,100)
(54,data[0].intOne)
(55,data)
(56,NULL)
(57,data[0].intOne)
(58,if(globalReturnsTrueOrFalse()
(59,data)
(60,globalReturnsTrueOrFalse()
(61,data[0].intOne = 0)
(62,0)
(63,data = (twoIntsStruct *)
(64,1)
(65,100*sizeof(twoIntsStruct)
(66,)
(67,data)
(68,)
(69,data[0].intOne = 0)
(70,data)
(71,if (data == NULL)
(72,100*sizeof(twoIntsStruct)
(73,sizeof(twoIntsStruct)
(74,0)
(75,data)
(76,ALLOCA(100*sizeof(twoIntsStruct)
(77,free(data)
(78,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
