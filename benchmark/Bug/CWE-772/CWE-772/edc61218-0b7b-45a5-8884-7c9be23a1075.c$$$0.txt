-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_16_bad()
{
    while(1)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
45,48
46,47
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
66,69
67,68
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
84,87
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,50,54,56,60,63,65,68,70,73,76,77,81,83,88,90,91,95,97,101,103,104
-----computeFrom-----
25,26
25,27
32,33
32,34
58,59
58,60
71,72
71,73
79,80
79,81
-----guardedBy-----
81,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_16_bad(){    while(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_16_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_16_bad
{    while(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }        break;    }}
while(1)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }        break;    }
1
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }        break;    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(27,22,0)
(16,22,0)
(4,27,0)
(43,11,0)
(11,15,0)
(9,30,0)
(27,4,0)
(31,1,0)
(42,18,0)
(30,9,0)
(21,7,0)
(9,23,0)
(30,4,0)
(18,0,0)
(23,9,0)
(1,31,0)
(17,42,0)
(22,37,0)
(3,9,0)
(42,27,0)
(40,36,0)
(15,18,0)
(12,5,0)
(5,15,0)
(20,15,0)
(15,22,0)
(24,23,0)
(36,22,0)
(0,18,0)
(34,32,0)
(20,28,0)
(10,5,0)
(18,42,0)
(18,15,0)
(44,32,0)
(33,4,0)
(35,22,0)
(36,27,0)
(11,28,0)
(13,37,0)
(2,19,0)
(8,1,0)
(14,31,0)
(45,22,0)
(4,33,0)
(31,42,0)
(21,6,0)
(39,20,0)
(41,6,0)
(4,30,0)
(6,21,0)
(25,27,0)
(42,31,0)
(38,15,0)
(32,27,0)
(18,42,1)
(25,29,1)
(41,32,1)
(5,10,1)
(11,15,1)
(4,30,1)
(42,27,1)
(27,4,1)
(38,36,1)
(1,8,1)
(13,5,1)
(4,33,1)
(15,18,1)
(20,39,1)
(36,40,1)
(36,27,1)
(17,38,1)
(3,25,1)
(43,5,1)
(20,15,1)
(9,23,1)
(44,27,1)
(21,6,1)
(26,29,1)
(8,14,1)
(18,0,1)
(12,15,1)
(11,43,1)
(30,9,1)
(31,1,1)
(39,11,1)
(34,44,1)
(10,12,1)
(14,17,1)
(5,15,1)
(32,27,1)
(40,32,1)
(23,24,1)
(24,3,1)
(26,13,1)
(32,34,1)
(42,31,1)
(40,21,1)
(13,20,1)
(6,41,1)
(32,29,2)
(17,29,2)
(34,29,2)
(36,29,2)
(5,15,2)
(24,29,2)
(39,5,2)
(9,29,2)
(4,33,2)
(20,15,2)
(30,29,2)
(4,30,2)
(1,29,2)
(31,29,2)
(18,0,2)
(15,29,2)
(42,27,2)
(27,4,2)
(41,32,2)
(23,29,2)
(38,29,2)
(13,29,2)
(25,29,2)
(21,6,2)
(32,27,2)
(9,23,2)
(6,32,2)
(27,29,2)
(4,29,2)
(8,29,2)
(11,15,2)
(36,27,2)
(14,29,2)
(18,29,2)
(20,5,2)
(5,29,2)
(21,32,2)
(44,29,2)
(11,5,2)
(10,29,2)
(31,1,2)
(18,42,2)
(3,29,2)
(42,31,2)
(43,5,2)
(12,29,2)
(30,9,2)
(40,29,2)
(15,18,2)
(42,29,2)
-----------------------------------
(0,wchar_t *)
(1,sizeof(wchar_t)
(2,while(1)
(3,100)
(4,(wchar_t *)
(5,data != NULL)
(6,-1)
(7,)
(8,wchar_t)
(9,100*sizeof(wchar_t)
(10,NULL)
(11,printWLine(data)
(12,data)
(13,break;)
(14,130000)
(15,data = (wchar_t *)
(16,if (data == NULL)
(17,data)
(18,(wchar_t *)
(19,)
(20,free(data)
(21,exit(-1)
(22,)
(23,sizeof(wchar_t)
(24,wchar_t)
(25,data)
(26,RET)
(27,* data = (wchar_t *)
(28,)
(29,1)
(30,malloc(100*sizeof(wchar_t)
(31,(130000)
(32,data == NULL)
(33,wchar_t *)
(34,NULL)
(35,if (data != NULL)
(36,printWLine(data)
(37,)
(38,data)
(39,data)
(40,data)
(41,1)
(42,realloc(data, (130000)
(43,data)
(44,data)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
