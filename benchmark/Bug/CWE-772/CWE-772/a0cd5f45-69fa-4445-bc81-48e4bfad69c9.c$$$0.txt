-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_10_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,67,69
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_10_bad(){    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_10_bad()
CWE401_Memory_Leak__wchar_t_calloc_10_bad
{    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(12,14,0)
(11,9,0)
(6,16,0)
(1,2,0)
(22,26,0)
(5,2,0)
(21,17,0)
(3,14,0)
(0,25,0)
(14,3,0)
(17,14,0)
(10,16,0)
(17,26,0)
(8,15,0)
(20,25,0)
(19,25,0)
(5,27,0)
(7,9,0)
(16,6,0)
(3,16,0)
(2,5,0)
(28,3,0)
(18,15,0)
(14,26,0)
(4,6,0)
(15,25,0)
(3,28,0)
(16,3,0)
(9,14,0)
(6,4,1)
(21,9,1)
(1,9,1)
(17,14,1)
(2,1,1)
(13,15,1)
(29,17,1)
(11,7,1)
(8,18,1)
(21,5,1)
(12,13,1)
(7,14,1)
(24,29,1)
(29,13,1)
(9,14,1)
(5,2,1)
(3,28,1)
(16,6,1)
(9,11,1)
(15,8,1)
(3,16,1)
(17,21,1)
(10,12,1)
(4,10,1)
(14,3,1)
(11,13,2)
(5,2,2)
(5,9,2)
(9,13,2)
(3,28,2)
(14,13,2)
(14,3,2)
(17,14,2)
(4,13,2)
(12,13,2)
(3,16,2)
(9,14,2)
(21,13,2)
(16,13,2)
(1,9,2)
(2,9,2)
(7,13,2)
(16,6,2)
(3,13,2)
(10,13,2)
(17,13,2)
(6,13,2)
-----------------------------------
(0,if(globalTrue)
(1,1)
(2,-1)
(3,(wchar_t *)
(4,wchar_t)
(5,exit(-1)
(6,sizeof(wchar_t)
(7,data)
(8,NULL)
(9,data == NULL)
(10,100)
(11,NULL)
(12,data)
(13,globalTrue)
(14,data = (wchar_t *)
(15,data = NULL)
(16,calloc(100, sizeof(wchar_t)
(17,printWLine(data)
(18,data)
(19,if(globalTrue)
(20,data)
(21,data)
(22,if (data == NULL)
(23, sizeof(wchar_t)
(24,RET)
(25,)
(26,)
(27,)
(28,wchar_t *)
(29,globalTrue)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
