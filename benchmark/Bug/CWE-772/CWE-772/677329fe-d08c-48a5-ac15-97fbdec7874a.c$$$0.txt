-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_01_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
29,32
30,31
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,32,36,37,41,43,48,50,56,57,58,59,65,66,67,68,72,76,77,78
-----computeFrom-----
14,15
14,16
20,21
20,22
39,40
39,41
52,53
52,54
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_01_bad(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_01_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_01_bad
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
;
-----joern-----
(32,35,0)
(36,29,0)
(31,22,0)
(28,7,0)
(2,8,0)
(33,38,0)
(6,12,0)
(0,29,0)
(7,5,0)
(10,36,0)
(27,9,0)
(36,26,0)
(26,36,0)
(8,29,0)
(29,8,0)
(40,6,0)
(21,29,0)
(11,16,0)
(8,9,0)
(37,39,0)
(38,22,0)
(3,26,0)
(18,9,0)
(26,38,0)
(15,6,0)
(1,0,0)
(29,22,0)
(12,30,0)
(17,27,0)
(6,29,0)
(5,7,0)
(14,5,0)
(5,29,0)
(23,36,0)
(13,5,0)
(35,4,0)
(39,22,0)
(7,39,0)
(16,22,0)
(12,6,0)
(34,22,0)
(41,0,0)
(30,22,0)
(19,16,0)
(9,27,0)
(30,12,0)
(9,8,0)
(8,2,0)
(4,24,0)
(4,35,0)
(12,6,1)
(30,12,1)
(37,7,1)
(21,16,1)
(18,21,1)
(36,29,1)
(9,27,1)
(1,29,1)
(5,14,1)
(6,29,1)
(6,15,1)
(7,5,1)
(13,4,1)
(32,0,1)
(16,19,1)
(13,0,1)
(20,30,1)
(5,29,1)
(26,36,1)
(27,17,1)
(39,37,1)
(4,35,1)
(38,33,1)
(7,28,1)
(23,39,1)
(8,2,1)
(0,41,1)
(28,5,1)
(29,8,1)
(17,18,1)
(8,9,1)
(0,29,1)
(41,1,1)
(3,36,1)
(35,32,1)
(19,11,1)
(15,40,1)
(36,10,1)
(14,13,1)
(26,3,1)
(10,23,1)
(40,38,1)
(33,26,1)
(32,0,2)
(26,36,2)
(36,29,2)
(5,29,2)
(8,9,2)
(0,29,2)
(12,6,2)
(9,27,2)
(8,2,2)
(4,35,2)
(30,12,2)
(6,29,2)
(4,0,2)
(7,5,2)
(35,0,2)
(29,8,2)
-----------------------------------
(0,data == NULL)
(1,data)
(2,twoIntsStruct *)
(3,intTwo)
(4,exit(-1)
(5,data[0])
(6,data[0])
(7,data[0].intOne)
(8,(twoIntsStruct *)
(9,calloc(100, sizeof(twoIntsStruct)
(10,0)
(11,data)
(12,&data[0])
(13,data)
(14,0)
(15,0)
(16,data = NULL)
(17,twoIntsStruct)
(18,100)
(19,NULL)
(20,RET)
(21,data)
(22,)
(23,data)
(24,)
(25, sizeof(twoIntsStruct)
(26,data[0].intTwo)
(27,sizeof(twoIntsStruct)
(28,intOne)
(29,data = (twoIntsStruct *)
(30,printStructLine(&data[0])
(31,data)
(32,1)
(33,0)
(34,if (data == NULL)
(35,-1)
(36,data[0])
(37,0)
(38,data[0].intTwo = 0)
(39,data[0].intOne = 0)
(40,data)
(41,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
