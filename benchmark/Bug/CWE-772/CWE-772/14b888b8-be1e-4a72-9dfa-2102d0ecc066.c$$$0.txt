-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,70,72
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_08_bad()
CWE401_Memory_Leak__char_malloc_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,32,0)
(0,2,0)
(30,31,0)
(29,31,0)
(5,26,0)
(17,3,0)
(1,21,0)
(28,24,0)
(3,17,0)
(22,15,0)
(24,20,0)
(21,17,0)
(32,2,0)
(18,8,0)
(32,14,0)
(24,28,0)
(21,15,0)
(16,24,0)
(11,23,0)
(10,20,0)
(26,15,0)
(25,26,0)
(28,17,0)
(22,21,0)
(9,8,0)
(7,31,0)
(20,24,0)
(23,31,0)
(8,21,0)
(12,15,0)
(17,28,0)
(17,21,0)
(26,21,0)
(27,23,0)
(13,22,0)
(17,28,1)
(2,0,1)
(4,6,1)
(8,18,1)
(18,9,1)
(17,3,1)
(16,1,1)
(21,17,1)
(25,5,1)
(22,13,1)
(13,26,1)
(1,19,1)
(8,21,1)
(26,25,1)
(28,24,1)
(0,8,1)
(5,32,1)
(6,22,1)
(32,2,1)
(10,16,1)
(24,20,1)
(5,8,1)
(22,21,1)
(27,11,1)
(20,10,1)
(19,23,1)
(26,21,1)
(6,19,1)
(23,27,1)
(9,21,1)
(17,28,2)
(17,19,2)
(28,19,2)
(2,8,2)
(8,21,2)
(22,19,2)
(13,19,2)
(20,19,2)
(32,2,2)
(1,19,2)
(9,19,2)
(10,19,2)
(25,19,2)
(16,19,2)
(21,19,2)
(24,19,2)
(26,19,2)
(5,19,2)
(17,3,2)
(24,20,2)
(8,19,2)
(32,8,2)
(28,24,2)
(18,19,2)
(21,17,2)
(22,21,2)
(26,21,2)
(0,8,2)
-----------------------------------
(0,1)
(1,data)
(2,-1)
(3,char *)
(4,RET)
(5,data)
(6,staticReturnsTrue()
(7,if(staticReturnsTrue()
(8,data == NULL)
(9,data)
(10,char)
(11,data)
(12,if (data == NULL)
(13,data)
(14,)
(15,)
(16,100)
(17,(char *)
(18,NULL)
(19,staticReturnsTrue()
(20,sizeof(char)
(21,data = (char *)
(22,printLine(data)
(23,data = NULL)
(24,100*sizeof(char)
(25,"A String")
(26,strcpy(data, "A String")
(27,NULL)
(28,malloc(100*sizeof(char)
(29,data)
(30,if(staticReturnsTrue()
(31,)
(32,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
