-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_17_bad()
{
    int i,j;
    int64_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
54,55
55,56
55,57
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
79,80
80,81
80,82
81,82
83,84
83,85
84,85
87,88
87,89
87,90
87,91
88,89
89,90
89,91
90,91
93,94
93,95
94,95
97,98
98,99
100,101
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,53,57,58,62,64,69,71,76,77,78,82,85,86,91,92,95,96,99,101
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
60,61
60,62
73,74
73,75
89,90
89,91
93,94
93,95
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_17_bad(){    int i,j;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_17_bad()
CWE401_Memory_Leak__int64_t_calloc_17_bad
{    int i,j;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(43,23,0)
(40,22,0)
(42,43,0)
(9,3,0)
(11,46,0)
(15,22,0)
(41,22,0)
(39,3,0)
(20,36,0)
(28,30,0)
(13,28,0)
(40,23,0)
(35,2,0)
(38,30,0)
(18,29,0)
(19,48,0)
(5,0,0)
(26,0,0)
(29,0,0)
(30,28,0)
(37,42,0)
(1,46,0)
(22,43,0)
(16,14,0)
(10,29,0)
(17,23,0)
(43,16,0)
(36,12,0)
(30,16,0)
(8,20,0)
(36,20,0)
(45,3,0)
(33,5,0)
(14,16,0)
(47,3,0)
(25,21,0)
(7,23,0)
(2,3,0)
(24,0,0)
(16,43,0)
(44,48,0)
(27,42,0)
(48,46,0)
(22,40,0)
(21,46,0)
(6,2,0)
(31,3,0)
(16,30,0)
(4,43,0)
(29,10,1)
(16,30,1)
(1,11,1)
(43,16,1)
(38,4,1)
(21,25,1)
(11,29,1)
(4,29,1)
(21,46,1)
(24,2,1)
(7,42,1)
(16,14,1)
(10,18,1)
(20,8,1)
(22,41,1)
(44,19,1)
(46,1,1)
(33,40,1)
(37,43,1)
(29,0,1)
(34,48,1)
(48,44,1)
(36,20,1)
(35,6,1)
(40,22,1)
(41,15,1)
(28,13,1)
(7,36,1)
(8,42,1)
(2,35,1)
(26,24,1)
(25,48,1)
(27,37,1)
(22,43,1)
(19,46,1)
(5,0,1)
(15,7,1)
(5,33,1)
(13,38,1)
(18,5,1)
(0,26,1)
(42,27,1)
(19,21,1)
(42,43,1)
(18,0,1)
(48,46,1)
(30,28,1)
(5,29,2)
(48,46,2)
(13,29,2)
(19,48,2)
(25,48,2)
(41,29,2)
(40,22,2)
(10,29,2)
(7,29,2)
(27,29,2)
(4,29,2)
(21,48,2)
(30,29,2)
(29,0,2)
(16,30,2)
(5,0,2)
(42,43,2)
(42,29,2)
(22,43,2)
(36,20,2)
(16,14,2)
(15,29,2)
(18,29,2)
(43,16,2)
(29,29,2)
(33,29,2)
(40,29,2)
(43,29,2)
(30,28,2)
(38,29,2)
(21,46,2)
(22,29,2)
(48,48,2)
(28,29,2)
(36,42,2)
(20,42,2)
(16,29,2)
(8,42,2)
(37,29,2)
(44,48,2)
-----------------------------------
(0,i = 0)
(1,0)
(2,data = NULL)
(3,)
(4,data)
(5,i++)
(6,data)
(7,L)
(8,1)
(9,j)
(10,1)
(11,j)
(12,)
(13,int64_t)
(14,int64_t *)
(15,data)
(16,(int64_t *)
(17,if (data == NULL)
(18,i)
(19,j)
(20,-1)
(21,j++)
(22,data[0])
(23,)
(24,i)
(25,j)
(26,0)
(27,NULL)
(28,sizeof(int64_t)
(29,i < 1)
(30,calloc(100, sizeof(int64_t)
(31,data)
(32, sizeof(int64_t)
(33,i)
(34,RET)
(35,NULL)
(36,exit(-1)
(37,data)
(38,100)
(39,i)
(40,printLongLongLine(data[0])
(41,0)
(42,data == NULL)
(43,data = (int64_t *)
(44,1)
(45,for(j = 0; j < 1; j++)
(46,j = 0)
(47,for(i = 0; i < 1; i++)
(48,j < 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
