-----label-----
1
-----code-----
static char * badSource(char * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
25,26
26,27
26,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,24,27,28,32,34,39,41,45,47,48,52,54,57
-----computeFrom-----
13,14
13,15
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
return data;
data
data
-----joern-----
(21,14,0)
(14,22,0)
(6,0,0)
(20,1,0)
(26,4,0)
(0,3,0)
(8,2,0)
(24,13,0)
(4,2,0)
(17,0,0)
(21,3,0)
(22,9,0)
(18,7,0)
(21,2,0)
(25,13,0)
(4,21,0)
(4,3,0)
(12,1,0)
(15,22,0)
(7,18,0)
(1,2,0)
(13,21,0)
(16,21,0)
(14,21,0)
(11,14,0)
(7,23,0)
(9,22,0)
(14,11,0)
(1,3,0)
(5,9,0)
(13,3,0)
(13,2,0)
(19,18,0)
(22,14,0)
(1,21,0)
(0,21,0)
(14,11,1)
(5,15,1)
(14,22,1)
(15,16,1)
(0,21,1)
(19,0,1)
(7,18,1)
(13,24,1)
(9,5,1)
(12,7,1)
(1,3,1)
(17,21,1)
(22,9,1)
(4,26,1)
(13,21,1)
(18,19,1)
(13,3,1)
(6,17,1)
(4,3,1)
(1,20,1)
(1,21,1)
(21,14,1)
(4,21,1)
(20,12,1)
(12,0,1)
(0,3,1)
(26,1,1)
(21,3,1)
(25,13,1)
(24,4,1)
(0,6,1)
(21,14,2)
(7,0,2)
(4,21,2)
(14,11,2)
(14,22,2)
(25,13,2)
(4,3,2)
(7,18,2)
(0,3,2)
(21,3,2)
(19,0,2)
(13,21,2)
(0,21,2)
(1,3,2)
(22,9,2)
(1,21,2)
(18,0,2)
(13,3,2)
-----------------------------------
(0,data == NULL)
(1,strcpy(data, "A String")
(2,)
(3,char * data)
(4,printLine(data)
(5,char)
(6,NULL)
(7,exit(-1)
(8,if (data == NULL)
(9,sizeof(char)
(10, sizeof(char)
(11,char *)
(12,data)
(13,return data;)
(14,(char *)
(15,100)
(16,data)
(17,data)
(18,-1)
(19,1)
(20,"A String")
(21,data = (char *)
(22,calloc(100, sizeof(char)
(23,)
(24,data)
(25,RET)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
