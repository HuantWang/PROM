-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_13_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
70,72
71,72
74,75
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,72,73,75
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_13_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_13_bad()
CWE401_Memory_Leak__int_calloc_13_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(14,3,0)
(26,10,0)
(25,26,0)
(7,6,0)
(12,40,0)
(40,32,0)
(37,9,0)
(21,40,0)
(9,6,0)
(32,1,0)
(31,17,0)
(28,22,0)
(29,3,0)
(27,6,0)
(20,3,0)
(34,32,0)
(29,1,0)
(39,18,0)
(17,1,0)
(8,15,0)
(32,28,0)
(18,28,0)
(10,26,0)
(24,30,0)
(28,18,0)
(5,32,0)
(19,18,0)
(22,28,0)
(35,9,0)
(23,5,0)
(38,15,0)
(3,32,0)
(4,19,0)
(33,6,0)
(13,5,0)
(5,17,0)
(28,32,0)
(36,1,0)
(3,29,0)
(16,30,0)
(18,19,0)
(10,11,0)
(3,17,0)
(5,13,1)
(28,22,1)
(17,31,1)
(3,20,1)
(16,15,1)
(12,32,1)
(21,12,1)
(20,14,1)
(4,39,1)
(40,32,1)
(10,26,1)
(28,18,1)
(18,19,1)
(37,35,1)
(15,38,1)
(3,32,1)
(24,16,1)
(40,21,1)
(8,9,1)
(39,34,1)
(13,23,1)
(32,28,1)
(3,17,1)
(19,4,1)
(23,10,1)
(26,25,1)
(29,3,1)
(31,5,1)
(34,15,1)
(30,24,1)
(9,37,1)
(25,40,1)
(38,8,1)
(14,17,1)
(2,30,1)
(23,40,1)
(16,29,1)
(5,32,1)
(23,15,2)
(39,15,2)
(13,15,2)
(28,15,2)
(5,15,2)
(28,18,2)
(28,22,2)
(5,32,2)
(10,26,2)
(29,15,2)
(14,15,2)
(32,28,2)
(3,32,2)
(18,15,2)
(21,15,2)
(32,15,2)
(20,15,2)
(3,15,2)
(4,15,2)
(40,32,2)
(18,19,2)
(3,17,2)
(26,40,2)
(19,15,2)
(40,15,2)
(17,15,2)
(34,15,2)
(12,15,2)
(31,15,2)
(25,40,2)
(29,3,2)
(10,40,2)
-----------------------------------
(0, sizeof(int)
(1,)
(2,RET)
(3,data[0])
(4,int)
(5,data[0])
(6,)
(7,if(GLOBAL_CONST_FIVE==5)
(8,GLOBAL_CONST_FIVE)
(9,data = NULL)
(10,exit(-1)
(11,)
(12,data)
(13,0)
(14,data)
(15,GLOBAL_CONST_FIVE==5)
(16,GLOBAL_CONST_FIVE)
(17,data[0] = 5)
(18,calloc(100, sizeof(int)
(19,sizeof(int)
(20,0)
(21,NULL)
(22,int *)
(23,data)
(24,5)
(25,1)
(26,-1)
(27,data)
(28,(int *)
(29,printIntLine(data[0])
(30,GLOBAL_CONST_FIVE==5)
(31,5)
(32,data = (int *)
(33,if(GLOBAL_CONST_FIVE==5)
(34,data)
(35,data)
(36,if (data == NULL)
(37,NULL)
(38,5)
(39,100)
(40,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
