-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_32_bad()
{
    struct _twoIntsStruct * data;
    struct _twoIntsStruct * *dataPtr1 = &data;
    struct _twoIntsStruct * *dataPtr2 = &data;
    data = NULL;
    {
        struct _twoIntsStruct * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        *dataPtr1 = data;
    }
    {
        struct _twoIntsStruct * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
69,70
70,71
70,72
71,72
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
89,91
90,91
90,92
91,92
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
105,106
106,107
106,108
107,108
109,110
109,111
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
123,124
125,126
127,128
127,129
128,129
129,130
129,131
130,131
132,133
132,134
132,135
135,136
136,137
137,138
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,68,72,73,77,79,84,86,92,93,94,95,101,102,103,104,108,112,114,118,119,124,126,131,133,134,138,139
-----computeFrom-----
38,39
38,40
56,57
56,58
75,76
75,77
88,89
88,90
97,98
97,99
121,122
121,123
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_32_bad(){    struct _twoIntsStruct * data;    struct _twoIntsStruct * *dataPtr1 = &data;    struct _twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }    {        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_32_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_32_bad
{    struct _twoIntsStruct * data;    struct _twoIntsStruct * *dataPtr1 = &data;    struct _twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }    {        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
struct _twoIntsStruct * *dataPtr1 = &data;
struct _twoIntsStruct * *dataPtr1 = &data;
struct _twoIntsStruct
_twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
struct _twoIntsStruct * *dataPtr2 = &data;
struct _twoIntsStruct * *dataPtr2 = &data;
struct _twoIntsStruct
_twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }
struct _twoIntsStruct * data = *dataPtr1;
struct _twoIntsStruct * data = *dataPtr1;
struct _twoIntsStruct
_twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * data = *dataPtr2;
struct _twoIntsStruct * data = *dataPtr2;
struct _twoIntsStruct
_twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(68,60,0)
(47,56,0)
(56,14,0)
(56,66,0)
(54,14,0)
(43,47,0)
(19,28,0)
(5,36,0)
(10,63,0)
(37,56,0)
(69,56,0)
(57,19,0)
(45,60,0)
(50,5,0)
(53,56,0)
(29,36,0)
(20,37,0)
(7,60,0)
(47,43,0)
(62,7,0)
(17,50,0)
(44,7,0)
(66,60,0)
(12,16,0)
(54,67,0)
(9,45,0)
(67,54,0)
(46,66,0)
(22,64,0)
(9,4,0)
(17,66,0)
(48,53,0)
(52,5,0)
(37,16,0)
(64,56,0)
(1,19,0)
(61,17,0)
(16,15,0)
(38,9,0)
(28,13,0)
(6,47,0)
(3,14,0)
(13,66,0)
(52,53,0)
(0,60,0)
(4,7,0)
(34,4,0)
(65,52,0)
(4,9,0)
(23,64,0)
(50,17,0)
(51,59,0)
(30,60,0)
(67,33,0)
(59,43,0)
(2,0,0)
(46,59,0)
(21,28,0)
(35,0,0)
(36,5,0)
(14,54,0)
(8,54,0)
(39,66,0)
(26,27,0)
(53,66,0)
(55,44,0)
(11,45,0)
(58,37,0)
(26,63,0)
(43,59,0)
(31,5,0)
(59,51,0)
(5,60,0)
(14,3,0)
(40,66,0)
(25,13,0)
(7,44,0)
(16,37,0)
(14,56,0)
(32,47,0)
(19,56,0)
(28,19,0)
(33,67,0)
(24,60,0)
(63,26,0)
(41,50,0)
(15,66,0)
(18,15,0)
(59,46,0)
(34,38,1)
(36,29,1)
(4,7,1)
(26,63,1)
(61,0,1)
(47,32,1)
(37,20,1)
(6,13,1)
(62,5,1)
(65,46,1)
(20,58,1)
(15,18,1)
(54,67,1)
(69,17,1)
(47,56,1)
(52,65,1)
(7,44,1)
(28,19,1)
(23,56,1)
(1,57,1)
(10,64,1)
(53,56,1)
(67,8,1)
(49,9,1)
(46,59,1)
(48,52,1)
(32,6,1)
(22,23,1)
(28,21,1)
(58,64,1)
(25,28,1)
(50,41,1)
(18,16,1)
(17,50,1)
(9,4,1)
(50,5,1)
(67,33,1)
(14,3,1)
(2,7,1)
(16,37,1)
(44,55,1)
(8,69,1)
(58,26,1)
(21,19,1)
(64,56,1)
(53,48,1)
(56,14,1)
(19,56,1)
(55,62,1)
(52,5,1)
(19,1,1)
(12,37,1)
(63,10,1)
(41,61,1)
(38,53,1)
(57,15,1)
(29,31,1)
(5,36,1)
(0,35,1)
(59,51,1)
(64,22,1)
(16,12,1)
(35,2,1)
(37,56,1)
(43,47,1)
(13,25,1)
(4,34,1)
(14,54,1)
(59,43,1)
(14,54,2)
(50,5,2)
(26,63,2)
(46,59,2)
(7,44,2)
(10,64,2)
(14,3,2)
(19,56,2)
(63,64,2)
(59,43,2)
(54,67,2)
(43,47,2)
(67,33,2)
(9,4,2)
(37,56,2)
(64,56,2)
(47,56,2)
(59,51,2)
(28,19,2)
(52,5,2)
(4,7,2)
(16,37,2)
(26,64,2)
(17,50,2)
(5,36,2)
(56,14,2)
(53,56,2)
-----------------------------------
(0,data = NULL)
(1,0)
(2,data)
(3,struct _twoIntsStruct *)
(4,*dataPtr2)
(5,* *dataPtr1 = &data)
(6,data)
(7,* *dataPtr2 = &data)
(8,100)
(9,* data = *dataPtr2)
(10,1)
(11,data)
(12,intOne)
(13,data[0].intTwo = 0)
(14,(struct _twoIntsStruct *)
(15,data[0].intOne = 0)
(16,data[0].intOne)
(17,* data = *dataPtr1)
(18,0)
(19,data[0])
(20,0)
(21,intTwo)
(22,NULL)
(23,data)
(24,dataPtr2)
(25,0)
(26,exit(-1)
(27,)
(28,data[0].intTwo)
(29,data)
(30,dataPtr1)
(31,dataPtr1)
(32,0)
(33,struct _twoIntsStruct)
(34,dataPtr2)
(35,NULL)
(36,&data)
(37,data[0])
(38,data)
(39,if (data == NULL)
(40,data)
(41,dataPtr1)
(42, sizeof(struct _twoIntsStruct)
(43,&data[0])
(44,&data)
(45,)
(46,printStructLine((twoIntsStruct *)
(47,data[0])
(48,data)
(49,RET)
(50,*dataPtr1)
(51,twoIntsStruct *)
(52,*dataPtr1)
(53,*dataPtr1 = data)
(54,calloc(100, sizeof(struct _twoIntsStruct)
(55,data)
(56,data = (struct _twoIntsStruct *)
(57,data)
(58,data)
(59,(twoIntsStruct *)
(60,)
(61,data)
(62,dataPtr2)
(63,-1)
(64,data == NULL)
(65,dataPtr1)
(66,)
(67,sizeof(struct _twoIntsStruct)
(68,data)
(69,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
