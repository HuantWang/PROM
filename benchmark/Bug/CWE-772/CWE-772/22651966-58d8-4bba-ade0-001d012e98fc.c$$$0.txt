-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_08_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,72,74
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_08_bad(){    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_08_bad()
CWE401_Memory_Leak__wchar_t_realloc_08_bad
{    wchar_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(13,11,0)
(15,22,0)
(11,25,0)
(13,18,0)
(30,13,0)
(6,22,0)
(25,22,0)
(28,7,0)
(11,13,0)
(9,23,0)
(24,7,0)
(0,18,0)
(14,21,0)
(23,18,0)
(26,11,0)
(2,23,0)
(16,29,0)
(10,12,0)
(18,13,0)
(7,24,0)
(29,12,0)
(18,12,0)
(3,25,0)
(13,30,0)
(11,26,0)
(4,11,0)
(21,26,0)
(27,26,0)
(17,25,0)
(1,22,0)
(26,21,0)
(24,19,0)
(29,18,0)
(4,0,1)
(20,8,1)
(23,9,1)
(28,23,1)
(21,14,1)
(13,30,1)
(3,17,1)
(11,25,1)
(7,28,1)
(25,3,1)
(23,18,1)
(14,27,1)
(2,18,1)
(29,16,1)
(9,2,1)
(24,7,1)
(8,5,1)
(11,26,1)
(16,24,1)
(13,11,1)
(26,21,1)
(5,25,1)
(0,5,1)
(16,23,1)
(18,13,1)
(8,29,1)
(27,4,1)
(29,18,1)
(0,5,2)
(23,18,2)
(29,5,2)
(26,5,2)
(11,26,2)
(7,23,2)
(18,5,2)
(28,23,2)
(18,13,2)
(24,7,2)
(24,23,2)
(16,5,2)
(26,21,2)
(13,5,2)
(29,18,2)
(11,25,2)
(4,5,2)
(23,5,2)
(14,5,2)
(27,5,2)
(11,5,2)
(13,30,2)
(13,11,2)
(9,5,2)
(2,5,2)
(21,5,2)
-----------------------------------
(0,data)
(1,if(staticReturnsTrue()
(2,data)
(3,NULL)
(4,data)
(5,staticReturnsTrue()
(6,if(staticReturnsTrue()
(7,-1)
(8,staticReturnsTrue()
(9,NULL)
(10,if (data == NULL)
(11,realloc(data, 100*sizeof(wchar_t)
(12,)
(13,(wchar_t *)
(14,wchar_t)
(15,data)
(16,data)
(17,data)
(18,data = (wchar_t *)
(19,)
(20,RET)
(21,sizeof(wchar_t)
(22,)
(23,data == NULL)
(24,exit(-1)
(25,data = NULL)
(26,100*sizeof(wchar_t)
(27,100)
(28,1)
(29,printWLine(data)
(30,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
