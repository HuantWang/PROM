-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_31_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine((twoIntsStruct *)&data[0]);
    {
        struct _twoIntsStruct * dataCopy = data;
        struct _twoIntsStruct * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
29,32
30,31
32,33
34,35
34,36
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
87,88
87,89
87,90
88,89
89,90
89,91
90,91
92,93
92,94
92,95
95,96
96,97
98,99
99,100
99,101
100,101
102,103
102,104
102,105
105,106
106,107
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,81,85,86,91,93,94,97,101,103,104,107,108
-----computeFrom-----
14,15
14,16
20,21
20,22
34,35
34,36
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_31_bad(){    struct _twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    {        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_31_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_31_bad
{    struct _twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    {        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
{        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * dataCopy = data;
struct _twoIntsStruct * dataCopy = data;
struct _twoIntsStruct
_twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
struct _twoIntsStruct * data = dataCopy;
struct _twoIntsStruct * data = dataCopy;
struct _twoIntsStruct
_twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(13,33,0)
(42,2,0)
(0,43,0)
(21,43,0)
(51,2,0)
(49,24,0)
(35,5,0)
(19,30,0)
(7,37,0)
(16,32,0)
(23,21,0)
(38,29,0)
(5,35,0)
(44,3,0)
(43,30,0)
(8,43,0)
(39,21,0)
(8,21,0)
(10,22,0)
(6,18,0)
(20,9,0)
(2,33,0)
(47,8,0)
(29,33,0)
(21,33,0)
(4,12,0)
(25,46,0)
(4,7,0)
(7,4,0)
(48,30,0)
(48,7,0)
(45,10,0)
(10,29,0)
(24,49,0)
(1,13,0)
(49,33,0)
(53,5,0)
(9,49,0)
(17,13,0)
(5,53,0)
(52,33,0)
(9,53,0)
(32,18,0)
(32,13,0)
(12,4,0)
(50,46,0)
(33,49,0)
(53,9,0)
(49,9,0)
(22,30,0)
(37,7,0)
(3,34,0)
(28,29,0)
(41,30,0)
(3,44,0)
(12,33,0)
(14,8,0)
(13,32,0)
(46,30,0)
(27,43,0)
(40,53,0)
(11,44,0)
(31,12,0)
(18,30,0)
(15,22,0)
(9,46,0)
(33,30,0)
(26,12,0)
(29,10,0)
(7,48,0)
(9,53,1)
(12,33,1)
(21,33,1)
(20,52,1)
(33,49,1)
(10,29,1)
(49,9,1)
(11,2,1)
(15,10,1)
(13,1,1)
(21,39,1)
(28,38,1)
(7,37,1)
(9,46,1)
(8,21,1)
(6,32,1)
(51,42,1)
(29,33,1)
(12,26,1)
(22,15,1)
(18,6,1)
(50,25,1)
(47,21,1)
(38,18,1)
(49,24,1)
(45,29,1)
(7,4,1)
(26,31,1)
(13,33,1)
(4,12,1)
(42,33,1)
(31,22,1)
(1,17,1)
(5,35,1)
(14,47,1)
(39,23,1)
(17,3,1)
(36,8,1)
(48,7,1)
(32,13,1)
(2,51,1)
(32,16,1)
(29,28,1)
(53,5,1)
(40,20,1)
(23,48,1)
(52,46,1)
(44,11,1)
(3,44,1)
(17,2,1)
(10,45,1)
(8,14,1)
(46,50,1)
(2,33,1)
(5,40,1)
(16,13,1)
(44,2,2)
(33,49,2)
(10,29,2)
(12,33,2)
(2,33,2)
(32,13,2)
(49,24,2)
(3,44,2)
(5,35,2)
(8,21,2)
(9,53,2)
(53,5,2)
(11,2,2)
(13,33,2)
(3,2,2)
(21,33,2)
(7,4,2)
(49,9,2)
(7,37,2)
(4,12,2)
(9,46,2)
(48,7,2)
(29,33,2)
-----------------------------------
(0,data)
(1,0)
(2,data == NULL)
(3,exit(-1)
(4,&data[0])
(5,sizeof(struct _twoIntsStruct)
(6,0)
(7,(twoIntsStruct *)
(8,* data = dataCopy)
(9,realloc(data, 100*sizeof(struct _twoIntsStruct)
(10,data[0].intTwo)
(11,1)
(12,data[0])
(13,data[0])
(14,dataCopy)
(15,0)
(16,intOne)
(17,data)
(18,data[0].intOne = 0)
(19,if (data == NULL)
(20,data)
(21,* dataCopy = data)
(22,data[0].intTwo = 0)
(23,dataCopy)
(24,struct _twoIntsStruct *)
(25,data)
(26,0)
(27,dataCopy)
(28,0)
(29,data[0])
(30,)
(31,data)
(32,data[0].intOne)
(33,data = (struct _twoIntsStruct *)
(34,)
(35,struct _twoIntsStruct)
(36,RET)
(37,twoIntsStruct *)
(38,data)
(39,data)
(40,100)
(41,data)
(42,data)
(43,)
(44,-1)
(45,intTwo)
(46,data = NULL)
(47,data)
(48,printStructLine((twoIntsStruct *)
(49,(struct _twoIntsStruct *)
(50,NULL)
(51,NULL)
(52,data)
(53,100*sizeof(struct _twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
