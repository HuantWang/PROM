-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
67,70
68,69
69,70
69,71
70,71
72,73
72,74
73,74
73,75
75,76
77,78
77,79
78,79
80,81
80,82
82,83
83,84
83,85
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
99,101
99,102
100,101
101,102
103,104
105,106
106,107
107,108
107,109
108,109
110,111
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,71,74,76,79,81,84,85,89,91,92,96,98,102,104,109,111
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
69,70
69,71
80,81
80,82
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__char_malloc_12_bad()
CWE401_Memory_Leak__char_malloc_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(42,12,0)
(26,33,0)
(36,28,0)
(35,40,0)
(7,38,0)
(24,3,0)
(18,22,0)
(10,5,0)
(32,28,0)
(38,11,0)
(47,33,0)
(34,3,0)
(25,4,0)
(1,49,0)
(14,40,0)
(33,22,0)
(30,39,0)
(19,12,0)
(28,38,0)
(38,7,0)
(4,35,0)
(23,36,0)
(28,22,0)
(35,4,0)
(38,28,0)
(8,35,0)
(27,30,0)
(16,9,0)
(36,16,0)
(50,49,0)
(19,11,0)
(25,16,0)
(29,27,0)
(46,3,0)
(36,0,0)
(48,28,0)
(13,9,0)
(11,38,0)
(43,48,0)
(44,13,0)
(41,5,0)
(5,16,0)
(11,19,0)
(45,32,0)
(12,19,0)
(17,25,0)
(4,25,0)
(31,16,0)
(5,9,0)
(48,22,0)
(33,28,0)
(49,3,0)
(30,27,0)
(25,17,0)
(16,25,0)
(20,32,0)
(40,35,0)
(2,28,0)
(37,19,0)
(13,16,0)
(1,50,1)
(25,17,1)
(28,38,1)
(5,16,1)
(27,29,1)
(13,44,1)
(35,40,1)
(8,31,1)
(49,1,1)
(37,2,1)
(42,37,1)
(38,11,1)
(2,21,1)
(5,10,1)
(20,28,1)
(48,43,1)
(26,30,1)
(38,7,1)
(36,16,1)
(10,41,1)
(31,21,1)
(36,28,1)
(4,35,1)
(25,4,1)
(36,23,1)
(13,16,1)
(33,47,1)
(19,12,1)
(43,33,1)
(26,32,1)
(12,42,1)
(16,25,1)
(32,45,1)
(47,26,1)
(44,5,1)
(6,15,1)
(6,36,1)
(23,15,1)
(14,8,1)
(45,20,1)
(15,48,1)
(15,13,1)
(29,32,1)
(48,28,1)
(32,28,1)
(11,19,1)
(41,16,1)
(33,28,1)
(30,27,1)
(21,49,1)
(40,14,1)
(26,21,2)
(20,21,2)
(2,21,2)
(23,15,2)
(28,21,2)
(47,21,2)
(5,16,2)
(31,21,2)
(36,28,2)
(19,12,2)
(4,21,2)
(25,21,2)
(12,21,2)
(43,21,2)
(35,21,2)
(25,4,2)
(44,21,2)
(38,21,2)
(13,16,2)
(19,21,2)
(16,25,2)
(40,21,2)
(27,32,2)
(14,21,2)
(45,21,2)
(30,32,2)
(16,21,2)
(11,21,2)
(13,21,2)
(29,32,2)
(37,21,2)
(5,21,2)
(35,40,2)
(38,11,2)
(30,27,2)
(38,7,2)
(42,21,2)
(25,17,2)
(48,28,2)
(32,21,2)
(32,28,2)
(4,35,2)
(48,21,2)
(28,38,2)
(11,19,2)
(36,16,2)
(36,15,2)
(33,28,2)
(8,21,2)
(10,21,2)
(41,21,2)
(33,21,2)
-----------------------------------
(0,)
(1,NULL)
(2,data)
(3,)
(4,ALLOCA(100*sizeof(char)
(5,strcpy(data, "A String")
(6,RET)
(7,char *)
(8,100)
(9,)
(10,"A String")
(11,malloc(100*sizeof(char)
(12,sizeof(char)
(13,printLine(data)
(14,char)
(15,globalReturnsTrueOrFalse()
(16,data = (char *)
(17,char *)
(18,if (data == NULL)
(19,100*sizeof(char)
(20,data)
(21,globalReturnsTrueOrFalse()
(22,)
(23,data)
(24,data)
(25,(char *)
(26,data)
(27,-1)
(28,data = (char *)
(29,1)
(30,exit(-1)
(31,data)
(32,data == NULL)
(33,strcpy(data, "A String")
(34,if(globalReturnsTrueOrFalse()
(35,100*sizeof(char)
(36,free(data)
(37,100)
(38,(char *)
(39,)
(40,sizeof(char)
(41,data)
(42,char)
(43,data)
(44,data)
(45,NULL)
(46,if(globalReturnsTrueOrFalse()
(47,"A String")
(48,printLine(data)
(49,data = NULL)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
