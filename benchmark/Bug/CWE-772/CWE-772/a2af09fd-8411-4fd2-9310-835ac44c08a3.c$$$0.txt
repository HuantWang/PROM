-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_31_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    {
        int * dataCopy = data;
        int * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
64,66
64,67
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,59,62,63,67,69,70,73,76,78,79,82,83
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_31_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    {        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_31_bad()
CWE401_Memory_Leak__int_malloc_31_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    {        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
{        int * dataCopy = data;        int * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * dataCopy = data;
int * dataCopy = data;
int
* dataCopy = data
*
dataCopy
= data
data
data
int * data = dataCopy;
int * data = dataCopy;
int
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(37,20,0)
(25,23,0)
(14,23,0)
(29,22,0)
(16,40,0)
(31,8,0)
(28,19,0)
(32,11,0)
(11,8,0)
(7,22,0)
(40,16,0)
(22,29,0)
(27,8,0)
(8,23,0)
(22,7,0)
(4,14,0)
(11,19,0)
(19,23,0)
(17,23,0)
(36,7,0)
(15,11,0)
(6,20,0)
(38,23,0)
(34,27,0)
(20,8,0)
(16,18,0)
(4,8,0)
(12,27,0)
(2,35,0)
(30,0,0)
(33,38,0)
(3,40,0)
(7,36,0)
(0,20,0)
(35,29,0)
(0,38,0)
(9,17,0)
(21,0,0)
(4,19,0)
(7,8,0)
(10,4,0)
(29,35,0)
(14,4,0)
(8,7,0)
(20,38,0)
(13,38,0)
(39,23,0)
(24,4,0)
(1,17,0)
(5,29,0)
(21,20,1)
(27,8,1)
(24,19,1)
(6,37,1)
(37,14,1)
(2,5,1)
(10,24,1)
(40,3,1)
(7,36,1)
(0,20,1)
(28,11,1)
(27,34,1)
(17,9,1)
(14,4,1)
(8,7,1)
(35,2,1)
(11,32,1)
(11,8,1)
(30,21,1)
(26,0,1)
(29,35,1)
(4,10,1)
(20,6,1)
(16,40,1)
(15,16,1)
(34,12,1)
(19,28,1)
(9,1,1)
(20,8,1)
(4,8,1)
(15,27,1)
(4,19,1)
(3,27,1)
(31,17,1)
(5,31,1)
(7,22,1)
(0,30,1)
(32,15,1)
(22,29,1)
(12,8,1)
(20,8,2)
(7,36,2)
(16,40,2)
(14,4,2)
(40,27,2)
(4,8,2)
(8,7,2)
(16,27,2)
(3,27,2)
(27,8,2)
(29,35,2)
(11,8,2)
(7,22,2)
(22,29,2)
(0,20,2)
(4,19,2)
-----------------------------------
(0,* data = dataCopy)
(1,data)
(2,int)
(3,1)
(4,data[0])
(5,100)
(6,data)
(7,(int *)
(8,data = (int *)
(9,NULL)
(10,0)
(11,data[0])
(12,data)
(13,data)
(14,printIntLine(data[0])
(15,data)
(16,exit(-1)
(17,data = NULL)
(18,)
(19,data[0] = 5)
(20,* dataCopy = data)
(21,data)
(22,malloc(100*sizeof(int)
(23,)
(24,data)
(25,data)
(26,RET)
(27,data == NULL)
(28,5)
(29,100*sizeof(int)
(30,dataCopy)
(31,data)
(32,0)
(33,dataCopy)
(34,NULL)
(35,sizeof(int)
(36,int *)
(37,dataCopy)
(38,)
(39,if (data == NULL)
(40,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
