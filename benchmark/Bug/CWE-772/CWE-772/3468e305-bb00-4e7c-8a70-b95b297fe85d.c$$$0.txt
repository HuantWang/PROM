-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_18_bad()
{
    int * data;
    data = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
69,70
69,71
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,34,37,38,42,44,49,51,56,57,58,62,65,66,68,70,71
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_18_bad(){    int * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_calloc_18_bad()
CWE401_Memory_Leak__int_calloc_18_bad
{    int * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));
source
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation */    ;
sink
;
-----joern-----
(1,4,0)
(35,7,0)
(33,10,0)
(24,14,0)
(9,35,0)
(20,8,0)
(34,14,0)
(11,15,0)
(22,4,0)
(26,34,0)
(11,29,0)
(21,8,0)
(20,33,0)
(35,14,0)
(33,1,0)
(10,33,0)
(7,8,0)
(1,33,0)
(14,8,0)
(35,20,0)
(32,20,0)
(16,23,0)
(7,35,0)
(25,23,0)
(12,34,0)
(30,8,0)
(34,20,0)
(27,8,0)
(18,17,0)
(23,8,0)
(6,35,0)
(13,1,0)
(29,11,0)
(5,17,0)
(2,8,0)
(17,20,0)
(33,20,0)
(31,8,0)
(4,1,0)
(3,8,0)
(19,29,0)
(29,19,1)
(14,24,1)
(35,6,1)
(33,1,1)
(19,17,1)
(31,23,1)
(13,32,1)
(32,31,1)
(5,18,1)
(17,5,1)
(20,33,1)
(2,7,1)
(11,29,1)
(26,12,1)
(24,34,1)
(28,2,1)
(33,10,1)
(16,25,1)
(22,13,1)
(34,20,1)
(12,11,1)
(7,35,1)
(1,4,1)
(35,20,1)
(6,9,1)
(9,14,1)
(35,14,1)
(4,22,1)
(18,20,1)
(17,20,1)
(34,26,1)
(23,16,1)
(12,17,1)
(33,1,2)
(17,20,2)
(29,17,2)
(11,17,2)
(7,35,2)
(35,20,2)
(20,33,2)
(33,10,2)
(35,14,2)
(19,17,2)
(1,4,2)
(34,20,2)
(11,29,2)
-----------------------------------
(0, sizeof(int)
(1,calloc(100, sizeof(int)
(2,goto sink;)
(3,source:)
(4,sizeof(int)
(5,NULL)
(6,0)
(7,printIntLine(data[0])
(8,)
(9,data)
(10,int *)
(11,exit(-1)
(12,data)
(13,100)
(14,data[0] = 5)
(15,)
(16,NULL)
(17,data == NULL)
(18,data)
(19,1)
(20,data = (int *)
(21,if (data == NULL)
(22,int)
(23,data = NULL)
(24,5)
(25,data)
(26,0)
(27,sink:)
(28,RET)
(29,-1)
(30,data)
(31,goto source;)
(32,data)
(33,(int *)
(34,data[0])
(35,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
