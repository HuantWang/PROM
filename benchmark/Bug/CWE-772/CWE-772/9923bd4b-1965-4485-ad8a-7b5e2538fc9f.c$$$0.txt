-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
81,82
82,83
82,84
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
100,101
102,103
104,105
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,70,73,75,78,80,83,84,88,90,91,95,97,101,103,108,110
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
68,69
68,70
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__char_calloc_12_bad()
CWE401_Memory_Leak__char_calloc_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(8,12,0)
(45,40,0)
(33,38,0)
(27,40,0)
(13,26,0)
(48,41,0)
(38,31,0)
(16,11,0)
(24,31,0)
(41,11,0)
(40,45,0)
(44,34,0)
(22,46,0)
(43,4,0)
(25,28,0)
(23,38,0)
(50,30,0)
(6,26,0)
(29,23,0)
(31,9,0)
(10,32,0)
(31,24,0)
(24,6,0)
(46,30,0)
(8,38,0)
(10,4,0)
(15,1,0)
(28,7,0)
(5,41,0)
(31,38,0)
(2,34,0)
(20,45,0)
(34,45,0)
(0,23,0)
(8,45,0)
(36,6,0)
(9,31,0)
(1,11,0)
(3,8,0)
(23,7,0)
(1,45,0)
(26,6,0)
(4,10,0)
(40,46,0)
(37,18,0)
(41,45,0)
(28,38,0)
(38,7,0)
(49,19,0)
(30,46,0)
(47,18,0)
(40,27,0)
(46,40,0)
(6,24,0)
(19,18,0)
(45,11,0)
(42,19,0)
(35,18,0)
(8,38,1)
(48,5,1)
(20,14,1)
(25,23,1)
(1,45,1)
(30,50,1)
(31,24,1)
(31,9,1)
(28,25,1)
(50,22,1)
(49,42,1)
(1,15,1)
(41,45,1)
(34,44,1)
(45,40,1)
(17,28,1)
(14,19,1)
(26,13,1)
(23,29,1)
(8,3,1)
(33,14,1)
(39,17,1)
(36,33,1)
(23,38,1)
(39,8,1)
(10,4,1)
(17,1,1)
(24,6,1)
(2,45,1)
(40,27,1)
(38,31,1)
(22,20,1)
(0,38,1)
(5,34,1)
(19,49,1)
(41,48,1)
(43,34,1)
(15,41,1)
(46,30,1)
(29,0,1)
(5,10,1)
(34,45,1)
(6,26,1)
(40,46,1)
(13,36,1)
(28,38,1)
(4,43,1)
(8,45,1)
(3,17,1)
(44,2,1)
(46,30,2)
(24,14,2)
(13,14,2)
(1,45,2)
(41,14,2)
(28,14,2)
(44,14,2)
(22,14,2)
(8,45,2)
(8,17,2)
(40,27,2)
(1,14,2)
(40,14,2)
(31,14,2)
(24,6,2)
(45,14,2)
(48,14,2)
(46,14,2)
(28,38,2)
(31,9,2)
(43,34,2)
(41,45,2)
(34,14,2)
(30,14,2)
(38,31,2)
(20,14,2)
(36,14,2)
(6,14,2)
(26,14,2)
(4,34,2)
(23,38,2)
(45,40,2)
(33,14,2)
(50,14,2)
(38,14,2)
(29,14,2)
(23,14,2)
(6,26,2)
(31,24,2)
(34,45,2)
(3,17,2)
(10,34,2)
(0,14,2)
(5,14,2)
(25,14,2)
(2,14,2)
(40,46,2)
(8,38,2)
(15,14,2)
(10,4,2)
-----------------------------------
(0,data)
(1,printLine(data)
(2,data)
(3,data)
(4,-1)
(5,data)
(6,100*sizeof(char)
(7,)
(8,free(data)
(9,char *)
(10,exit(-1)
(11,)
(12,)
(13,char)
(14,globalReturnsTrueOrFalse()
(15,data)
(16,if (data == NULL)
(17,globalReturnsTrueOrFalse()
(18,)
(19,data = NULL)
(20,data)
(21, sizeof(char)
(22,100)
(23,strcpy(data, "A String")
(24,ALLOCA(100*sizeof(char)
(25,data)
(26,sizeof(char)
(27,char *)
(28,printLine(data)
(29,"A String")
(30,sizeof(char)
(31,(char *)
(32,)
(33,data)
(34,data == NULL)
(35,data)
(36,100)
(37,if(globalReturnsTrueOrFalse()
(38,data = (char *)
(39,RET)
(40,(char *)
(41,strcpy(data, "A String")
(42,data)
(43,1)
(44,NULL)
(45,data = (char *)
(46,calloc(100, sizeof(char)
(47,if(globalReturnsTrueOrFalse()
(48,"A String")
(49,NULL)
(50,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
