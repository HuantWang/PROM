-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
63,64
65,66
65,67
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
100,101
102,103
104,105
104,106
105,106
106,107
106,108
108,109
108,110
108,111
111,112
112,113
113,114
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,66,69,70,74,76,81,83,87,89,90,94,96,101,103,107,109,110,114,115
-----computeFrom-----
35,36
35,37
52,53
52,54
65,66
65,67
72,73
72,74
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_32_bad()
CWE401_Memory_Leak__wchar_t_realloc_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(37,38,0)
(18,19,0)
(19,18,0)
(8,25,0)
(9,18,0)
(33,35,0)
(26,8,0)
(42,35,0)
(39,35,0)
(15,46,0)
(7,14,0)
(42,20,0)
(32,51,0)
(28,32,0)
(22,0,0)
(17,36,0)
(34,22,0)
(2,26,0)
(1,7,0)
(14,35,0)
(44,46,0)
(50,11,0)
(24,2,0)
(4,48,0)
(13,28,0)
(21,42,0)
(3,20,0)
(26,14,0)
(46,15,0)
(49,8,0)
(16,32,0)
(48,7,0)
(30,14,0)
(7,48,0)
(25,19,0)
(28,0,0)
(2,42,0)
(31,51,0)
(19,7,0)
(0,22,0)
(5,36,0)
(48,42,0)
(32,28,0)
(41,18,0)
(40,26,0)
(38,8,0)
(36,8,0)
(6,35,0)
(38,14,0)
(29,11,0)
(25,8,0)
(43,14,0)
(25,27,0)
(11,35,0)
(20,42,0)
(19,25,0)
(45,19,0)
(51,35,0)
(27,25,0)
(15,12,0)
(8,14,0)
(10,0,0)
(0,35,0)
(18,41,0)
(23,41,0)
(47,32,1)
(29,50,1)
(34,10,1)
(13,16,1)
(37,36,1)
(25,19,1)
(40,2,1)
(8,25,1)
(38,8,1)
(26,8,1)
(7,48,1)
(18,41,1)
(28,0,1)
(24,38,1)
(23,9,1)
(17,5,1)
(45,49,1)
(11,29,1)
(4,1,1)
(0,22,1)
(36,17,1)
(37,15,1)
(15,46,1)
(10,42,1)
(28,13,1)
(48,42,1)
(5,8,1)
(38,37,1)
(20,3,1)
(2,24,1)
(49,7,1)
(2,42,1)
(1,11,1)
(16,26,1)
(44,36,1)
(41,23,1)
(19,7,1)
(46,44,1)
(26,40,1)
(3,21,1)
(9,45,1)
(42,20,1)
(22,34,1)
(36,8,1)
(48,4,1)
(32,28,1)
(19,18,1)
(50,0,1)
(25,27,1)
(26,8,2)
(25,19,2)
(19,7,2)
(19,18,2)
(15,36,2)
(38,8,2)
(44,36,2)
(48,42,2)
(2,42,2)
(8,25,2)
(0,22,2)
(15,46,2)
(46,36,2)
(25,27,2)
(36,8,2)
(42,20,2)
(18,41,2)
(32,28,2)
(7,48,2)
(28,0,2)
-----------------------------------
(0,* *dataPtr2 = &data)
(1,data)
(2,*dataPtr1)
(3,data)
(4,dataPtr1)
(5,data)
(6,dataPtr1)
(7,* data = *dataPtr1)
(8,data = (wchar_t *)
(9,100)
(10,dataPtr2)
(11,data = NULL)
(12,)
(13,dataPtr2)
(14,)
(15,exit(-1)
(16,data)
(17,NULL)
(18,100*sizeof(wchar_t)
(19,realloc(data, 100*sizeof(wchar_t)
(20,&data)
(21,dataPtr1)
(22,&data)
(23,wchar_t)
(24,dataPtr1)
(25,(wchar_t *)
(26,*dataPtr1 = data)
(27,wchar_t *)
(28,*dataPtr2)
(29,NULL)
(30,data)
(31,data)
(32,* data = *dataPtr2)
(33,data)
(34,data)
(35,)
(36,data == NULL)
(37,data)
(38,printWLine(data)
(39,dataPtr2)
(40,data)
(41,sizeof(wchar_t)
(42,* *dataPtr1 = &data)
(43,if (data == NULL)
(44,1)
(45,data)
(46,-1)
(47,RET)
(48,*dataPtr1)
(49,data)
(50,data)
(51,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
