-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_16_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
91,92
91,93
93,94
93,95
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,90,92,94,95
-----computeFrom-----
14,15
14,16
23,24
23,25
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_16_bad(){    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_16_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_16_bad
{    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(27,48,0)
(13,48,0)
(21,4,0)
(40,19,0)
(39,52,0)
(0,18,0)
(47,5,0)
(16,22,0)
(24,10,0)
(9,1,0)
(24,46,0)
(45,4,0)
(39,1,0)
(3,0,0)
(31,51,0)
(5,35,0)
(35,37,0)
(3,28,0)
(22,48,0)
(15,2,0)
(43,48,0)
(28,3,0)
(7,6,0)
(52,48,0)
(50,2,0)
(18,0,0)
(6,25,0)
(37,11,0)
(1,35,0)
(8,18,0)
(12,35,0)
(42,18,0)
(0,3,0)
(3,27,0)
(51,4,0)
(1,39,0)
(32,2,0)
(11,37,0)
(14,4,0)
(11,7,0)
(36,52,0)
(44,7,0)
(18,35,0)
(11,51,0)
(49,5,0)
(23,46,0)
(41,15,0)
(29,11,0)
(15,22,0)
(37,35,0)
(6,7,0)
(27,3,0)
(46,24,0)
(34,39,0)
(17,51,0)
(2,35,0)
(2,15,0)
(30,37,0)
(35,48,0)
(37,30,0)
(25,6,0)
(33,1,0)
(7,11,0)
(35,37,1)
(13,27,1)
(33,9,1)
(44,29,1)
(15,41,1)
(27,3,1)
(29,12,1)
(52,36,1)
(49,35,1)
(9,24,1)
(39,1,1)
(40,20,1)
(34,1,1)
(39,34,1)
(6,44,1)
(46,23,1)
(18,35,1)
(20,13,1)
(15,2,1)
(18,42,1)
(42,8,1)
(2,50,1)
(3,28,1)
(11,7,1)
(5,47,1)
(12,26,1)
(6,25,1)
(51,31,1)
(41,2,1)
(3,0,1)
(38,20,1)
(5,35,1)
(26,51,1)
(31,17,1)
(47,49,1)
(24,46,1)
(8,22,1)
(20,26,1)
(37,30,1)
(1,33,1)
(11,51,1)
(1,35,1)
(50,32,1)
(22,16,1)
(0,18,1)
(32,52,1)
(23,5,1)
(9,5,1)
(38,40,1)
(36,39,1)
(7,6,1)
(2,35,1)
(16,15,1)
(37,11,1)
(6,25,2)
(16,26,2)
(33,26,2)
(11,26,2)
(34,26,2)
(37,26,2)
(11,51,2)
(6,26,2)
(0,26,2)
(35,26,2)
(41,26,2)
(37,30,2)
(3,28,2)
(32,26,2)
(52,26,2)
(1,35,2)
(15,2,2)
(49,26,2)
(37,11,2)
(35,37,2)
(7,26,2)
(27,3,2)
(15,26,2)
(39,1,2)
(3,0,2)
(24,5,2)
(46,5,2)
(27,26,2)
(29,26,2)
(22,26,2)
(7,6,2)
(42,26,2)
(11,7,2)
(24,46,2)
(2,26,2)
(13,26,2)
(47,26,2)
(50,26,2)
(18,35,2)
(3,26,2)
(2,35,2)
(5,35,2)
(18,26,2)
(1,26,2)
(9,26,2)
(12,26,2)
(5,26,2)
(0,18,2)
(36,26,2)
(23,5,2)
(40,20,2)
(44,26,2)
(39,26,2)
(8,26,2)
-----------------------------------
(0,&data[0])
(1,data[0])
(2,data[0])
(3,(twoIntsStruct *)
(4,)
(5,data == NULL)
(6,sizeof(struct _twoIntsStruct)
(7,100*sizeof(struct _twoIntsStruct)
(8,data)
(9,data)
(10,)
(11,realloc(data, 100*sizeof(struct _twoIntsStruct)
(12,data)
(13,break;)
(14,while(1)
(15,data[0].intTwo)
(16,0)
(17,data)
(18,data[0])
(19,)
(20,1)
(21,while(1)
(22,data[0].intTwo = 0)
(23,1)
(24,exit(-1)
(25,struct _twoIntsStruct)
(26,1)
(27,printStructLine((twoIntsStruct *)
(28,twoIntsStruct *)
(29,data)
(30,struct _twoIntsStruct *)
(31,NULL)
(32,data)
(33,0)
(34,intOne)
(35,data = (struct _twoIntsStruct *)
(36,0)
(37,(struct _twoIntsStruct *)
(38,RET)
(39,data[0].intOne)
(40,break;)
(41,intTwo)
(42,0)
(43,if (data == NULL)
(44,100)
(45,data)
(46,-1)
(47,NULL)
(48,)
(49,data)
(50,0)
(51,data = NULL)
(52,data[0].intOne = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
