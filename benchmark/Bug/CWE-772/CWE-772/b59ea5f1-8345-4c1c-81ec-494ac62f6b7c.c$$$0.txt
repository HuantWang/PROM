-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_16_bad()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
68,69
68,70
70,71
70,72
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,57,59,60,64,66,67,69,71,72
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_16_bad(){    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__wchar_t_realloc_16_bad()
CWE401_Memory_Leak__wchar_t_realloc_16_bad
{    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(15,6,0)
(11,5,0)
(17,6,0)
(16,31,0)
(18,4,0)
(23,31,0)
(30,7,0)
(8,29,0)
(5,29,0)
(1,19,0)
(22,19,0)
(20,29,0)
(7,29,0)
(6,19,0)
(19,31,0)
(25,8,0)
(7,27,0)
(3,15,0)
(26,8,0)
(15,3,0)
(9,15,0)
(28,3,0)
(33,31,0)
(2,18,0)
(5,6,0)
(6,15,0)
(29,27,0)
(18,2,0)
(12,14,0)
(6,5,0)
(5,11,0)
(0,27,0)
(32,2,0)
(10,27,0)
(29,5,0)
(8,29,1)
(5,6,1)
(6,19,1)
(26,29,1)
(18,2,1)
(3,28,1)
(29,5,1)
(21,24,1)
(30,8,1)
(1,22,1)
(20,13,1)
(15,3,1)
(12,24,1)
(24,10,1)
(6,15,1)
(10,7,1)
(13,19,1)
(2,32,1)
(19,1,1)
(9,17,1)
(21,12,1)
(28,9,1)
(24,13,1)
(7,30,1)
(25,26,1)
(17,20,1)
(32,8,1)
(5,11,1)
(7,29,1)
(8,25,1)
(30,18,1)
(9,13,2)
(18,8,2)
(10,13,2)
(2,8,2)
(25,13,2)
(6,13,2)
(15,3,2)
(29,13,2)
(5,6,2)
(7,13,2)
(8,13,2)
(5,13,2)
(8,29,2)
(6,15,2)
(26,13,2)
(18,2,2)
(12,24,2)
(7,29,2)
(5,11,2)
(6,19,2)
(30,13,2)
(15,13,2)
(32,8,2)
(28,13,2)
(3,13,2)
(29,5,2)
(17,13,2)
(20,13,2)
-----------------------------------
(0,if (data == NULL)
(1,NULL)
(2,-1)
(3,sizeof(wchar_t)
(4,)
(5,(wchar_t *)
(6,realloc(data, 100*sizeof(wchar_t)
(7,printWLine(data)
(8,data == NULL)
(9,100)
(10,break;)
(11,wchar_t *)
(12,break;)
(13,1)
(14,)
(15,100*sizeof(wchar_t)
(16,while(1)
(17,data)
(18,exit(-1)
(19,data = NULL)
(20,data)
(21,RET)
(22,data)
(23,data)
(24,1)
(25,NULL)
(26,data)
(27,)
(28,wchar_t)
(29,data = (wchar_t *)
(30,data)
(31,)
(32,1)
(33,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
