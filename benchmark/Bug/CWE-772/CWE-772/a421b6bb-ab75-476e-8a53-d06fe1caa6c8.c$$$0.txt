-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_07_bad()
{
    wchar_t * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_07_bad(){    wchar_t * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_07_bad()
CWE401_Memory_Leak__wchar_t_calloc_07_bad
{    wchar_t * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(13,3,0)
(19,3,0)
(0,15,0)
(11,13,0)
(10,15,0)
(23,4,0)
(10,13,0)
(6,18,0)
(21,15,0)
(14,15,0)
(28,12,0)
(10,20,0)
(15,16,0)
(1,14,0)
(20,10,0)
(33,23,0)
(14,16,0)
(25,8,0)
(5,8,0)
(13,10,0)
(22,7,0)
(24,4,0)
(27,12,0)
(3,13,0)
(18,22,0)
(31,23,0)
(32,21,0)
(17,4,0)
(15,10,0)
(29,16,0)
(30,21,0)
(9,4,0)
(22,18,0)
(18,6,1)
(25,5,1)
(21,15,1)
(32,30,1)
(10,20,1)
(0,8,1)
(14,1,1)
(15,10,1)
(28,14,1)
(1,22,1)
(22,18,1)
(21,32,1)
(14,15,1)
(30,15,1)
(3,19,1)
(23,31,1)
(1,21,1)
(31,33,1)
(27,28,1)
(10,13,1)
(2,12,1)
(13,3,1)
(28,8,1)
(5,23,1)
(19,11,1)
(12,27,1)
(6,21,1)
(11,0,1)
(8,25,1)
(3,8,2)
(32,8,2)
(1,8,2)
(13,8,2)
(30,8,2)
(11,8,2)
(22,18,2)
(21,8,2)
(22,21,2)
(15,10,2)
(10,8,2)
(10,13,2)
(6,21,2)
(13,3,2)
(15,8,2)
(21,15,2)
(0,8,2)
(18,21,2)
(14,15,2)
(10,20,2)
(19,8,2)
(14,8,2)
-----------------------------------
(0,data)
(1,data)
(2,RET)
(3,sizeof(wchar_t)
(4,)
(5,staticFive)
(6,1)
(7,)
(8,staticFive==5)
(9,if(staticFive==5)
(10,(wchar_t *)
(11,100)
(12,staticFive==5)
(13,calloc(100, sizeof(wchar_t)
(14,printWLine(data)
(15,data = (wchar_t *)
(16,)
(17,data)
(18,-1)
(19,wchar_t)
(20,wchar_t *)
(21,data == NULL)
(22,exit(-1)
(23,data = NULL)
(24,if(staticFive==5)
(25,5)
(26, sizeof(wchar_t)
(27,5)
(28,staticFive)
(29,if (data == NULL)
(30,data)
(31,NULL)
(32,NULL)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
