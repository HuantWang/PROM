-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
34,35
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
52,54
53,54
53,55
54,55
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
90,91
92,93
92,94
93,94
95,96
96,97
96,98
97,98
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
106,109
106,110
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
125,126
126,127
126,128
127,128
129,130
130,131
130,132
131,132
134,135
135,136
135,137
136,137
138,139
-----nextToken-----
2,4,9,10,16,18,19,24,26,29,31,35,36,40,42,47,49,55,56,57,58,64,65,66,67,71,75,76,80,84,86,89,91,94,98,99,103,105,112,113,114,115,121,122,123,124,128,132,133,137,139
-----computeFrom-----
7,8
7,9
30,31
30,32
38,39
38,40
51,52
51,53
60,61
60,62
78,79
78,80
92,93
92,94
101,102
101,103
108,109
108,110
117,118
117,119
-----guardedBy-----
103,139
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_06_bad()
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }}
if(STATIC_CONST_FIVE==5)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(2,6,0)
(27,48,0)
(64,1,0)
(67,80,0)
(31,6,0)
(43,10,0)
(56,1,0)
(64,55,0)
(48,6,0)
(49,1,0)
(32,54,0)
(76,72,0)
(14,34,0)
(45,56,0)
(52,45,0)
(58,1,0)
(61,7,0)
(1,62,0)
(5,0,0)
(46,38,0)
(60,48,0)
(74,0,0)
(7,40,0)
(65,1,0)
(44,80,0)
(20,78,0)
(20,74,0)
(39,15,0)
(59,23,0)
(66,15,0)
(69,22,0)
(80,6,0)
(0,26,0)
(22,50,0)
(29,2,0)
(57,60,0)
(0,5,0)
(17,49,0)
(71,11,0)
(9,35,0)
(4,74,0)
(10,50,0)
(41,74,0)
(68,54,0)
(19,1,0)
(16,56,0)
(7,15,0)
(47,20,0)
(12,63,0)
(24,8,0)
(78,20,0)
(46,42,0)
(34,50,0)
(72,5,0)
(72,23,0)
(75,41,0)
(40,13,0)
(8,6,0)
(63,74,0)
(55,63,0)
(30,8,0)
(0,74,0)
(60,34,0)
(54,50,0)
(7,74,0)
(45,52,0)
(40,6,0)
(28,2,0)
(26,0,0)
(51,78,0)
(48,60,0)
(78,49,0)
(74,1,0)
(77,20,0)
(18,39,0)
(13,40,0)
(6,40,0)
(15,7,0)
(21,68,0)
(5,72,0)
(37,45,0)
(68,8,0)
(23,72,0)
(40,7,0)
(22,69,0)
(10,6,0)
(79,63,0)
(80,69,0)
(70,52,0)
(25,48,0)
(55,64,0)
(33,41,0)
(53,52,0)
(15,39,0)
(6,1,0)
(38,46,0)
(8,68,0)
(63,55,0)
(36,35,0)
(52,74,0)
(3,38,0)
(69,80,0)
(6,40,1)
(8,6,1)
(32,68,1)
(23,59,1)
(27,54,1)
(46,38,1)
(10,6,1)
(8,30,1)
(80,44,1)
(41,75,1)
(7,74,1)
(29,28,1)
(45,52,1)
(22,69,1)
(17,78,1)
(52,53,1)
(41,74,1)
(69,80,1)
(20,74,1)
(30,24,1)
(3,41,1)
(0,26,1)
(43,22,1)
(33,74,1)
(76,4,1)
(2,6,1)
(53,70,1)
(37,52,1)
(74,0,1)
(59,76,1)
(14,60,1)
(77,46,1)
(44,67,1)
(75,33,1)
(78,20,1)
(45,37,1)
(70,49,1)
(24,2,1)
(60,57,1)
(40,7,1)
(49,17,1)
(4,35,1)
(40,13,1)
(54,32,1)
(79,12,1)
(48,6,1)
(12,56,1)
(28,6,1)
(18,66,1)
(0,5,1)
(72,23,1)
(64,55,1)
(68,21,1)
(63,74,1)
(73,35,1)
(7,15,1)
(55,63,1)
(21,8,1)
(66,61,1)
(68,8,1)
(52,74,1)
(51,20,1)
(39,18,1)
(80,6,1)
(56,16,1)
(73,10,1)
(16,45,1)
(77,41,1)
(36,9,1)
(20,47,1)
(78,51,1)
(48,25,1)
(35,36,1)
(10,43,1)
(73,2,1)
(25,27,1)
(47,77,1)
(67,34,1)
(63,79,1)
(2,29,1)
(61,31,1)
(34,14,1)
(5,72,1)
(38,3,1)
(57,48,1)
(15,39,1)
(31,64,1)
(60,48,1)
(28,35,2)
(33,35,2)
(76,35,2)
(27,2,2)
(47,35,2)
(31,35,2)
(40,13,2)
(38,41,2)
(70,35,2)
(40,7,2)
(0,5,2)
(63,35,2)
(40,35,2)
(53,35,2)
(24,2,2)
(52,35,2)
(60,48,2)
(6,35,2)
(78,20,2)
(7,35,2)
(23,35,2)
(80,6,2)
(8,2,2)
(15,35,2)
(7,15,2)
(69,80,2)
(2,6,2)
(39,35,2)
(45,52,2)
(3,41,2)
(75,35,2)
(44,2,2)
(21,2,2)
(43,2,2)
(55,63,2)
(51,35,2)
(69,2,2)
(12,35,2)
(2,35,2)
(66,35,2)
(80,2,2)
(10,2,2)
(10,6,2)
(74,35,2)
(8,6,2)
(54,2,2)
(0,35,2)
(67,2,2)
(56,35,2)
(4,35,2)
(79,35,2)
(63,74,2)
(16,35,2)
(5,35,2)
(48,6,2)
(20,35,2)
(46,38,2)
(20,74,2)
(29,35,2)
(68,2,2)
(32,2,2)
(41,35,2)
(18,35,2)
(7,74,2)
(49,35,2)
(60,2,2)
(0,26,2)
(5,72,2)
(25,2,2)
(48,2,2)
(74,0,2)
(64,55,2)
(77,35,2)
(15,39,2)
(68,8,2)
(37,35,2)
(55,35,2)
(46,41,2)
(22,2,2)
(72,35,2)
(59,35,2)
(6,40,2)
(34,2,2)
(61,35,2)
(30,2,2)
(52,74,2)
(45,35,2)
(41,74,2)
(14,2,2)
(57,2,2)
(72,23,2)
(22,69,2)
(64,35,2)
(17,35,2)
(78,35,2)
-----------------------------------
(0,(twoIntsStruct *)
(1,)
(2,data != NULL)
(3,1)
(4,data)
(5,malloc(100*sizeof(twoIntsStruct)
(6,data = (twoIntsStruct *)
(7,realloc(data, (130000)
(8,data[0])
(9,STATIC_CONST_FIVE)
(10,free(data)
(11,)
(12,data)
(13,twoIntsStruct *)
(14,1)
(15,(130000)
(16,0)
(17,0)
(18,twoIntsStruct)
(19,data)
(20,data[0])
(21,intOne)
(22,printStructLine(&data[0])
(23,sizeof(twoIntsStruct)
(24,data)
(25,0)
(26,twoIntsStruct *)
(27,data)
(28,data)
(29,NULL)
(30,0)
(31,data)
(32,1)
(33,data)
(34,data[0].intTwo = 1)
(35,STATIC_CONST_FIVE==5)
(36,5)
(37,intTwo)
(38,-1)
(39,sizeof(twoIntsStruct)
(40,(twoIntsStruct *)
(41,data == NULL)
(42,)
(43,data)
(44,0)
(45,data[0].intTwo)
(46,exit(-1)
(47,0)
(48,data[0])
(49,data[0].intOne = 0)
(50,)
(51,intOne)
(52,data[0])
(53,0)
(54,data[0].intOne = 1)
(55,&data[0])
(56,data[0].intTwo = 0)
(57,intTwo)
(58,if (data == NULL)
(59,twoIntsStruct)
(60,data[0].intTwo)
(61,data)
(62,)
(63,data[0])
(64,printStructLine(&data[0])
(65,if (data != NULL)
(66,130000)
(67,data)
(68,data[0].intOne)
(69,&data[0])
(70,data)
(71,if(STATIC_CONST_FIVE==5)
(72,100*sizeof(twoIntsStruct)
(73,RET)
(74,* data = (twoIntsStruct *)
(75,NULL)
(76,100)
(77,data)
(78,data[0].intOne)
(79,0)
(80,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
