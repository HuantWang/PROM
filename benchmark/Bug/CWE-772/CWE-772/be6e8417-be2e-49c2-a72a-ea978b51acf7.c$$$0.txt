-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_13_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
95,96
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,94,96
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
67,68
67,69
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_13_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_13_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_13_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(19,28,0)
(51,10,0)
(17,23,0)
(44,38,0)
(28,15,0)
(44,35,0)
(27,43,0)
(26,44,0)
(9,11,0)
(3,38,0)
(12,43,0)
(50,35,0)
(48,2,0)
(36,10,0)
(45,43,0)
(6,26,0)
(9,44,0)
(33,38,0)
(16,42,0)
(26,28,0)
(48,45,0)
(18,24,0)
(20,9,0)
(43,45,0)
(3,5,0)
(24,25,0)
(2,48,0)
(49,48,0)
(21,44,0)
(47,42,0)
(11,9,0)
(5,3,0)
(39,3,0)
(1,44,0)
(22,5,0)
(4,1,0)
(31,9,0)
(49,35,0)
(11,40,0)
(25,24,0)
(23,37,0)
(38,33,0)
(52,37,0)
(28,26,0)
(30,37,0)
(15,35,0)
(29,15,0)
(41,40,0)
(45,48,0)
(13,11,0)
(38,3,0)
(5,22,0)
(38,44,0)
(48,49,0)
(43,44,0)
(46,23,0)
(25,14,0)
(34,1,0)
(40,35,0)
(7,26,0)
(8,37,0)
(20,31,1)
(21,42,1)
(12,27,1)
(45,43,1)
(16,23,1)
(48,45,1)
(29,28,1)
(43,44,1)
(31,15,1)
(38,3,1)
(49,48,1)
(1,4,1)
(28,19,1)
(36,51,1)
(46,17,1)
(6,25,1)
(34,44,1)
(10,36,1)
(9,44,1)
(1,44,1)
(6,1,1)
(11,9,1)
(25,24,1)
(24,18,1)
(9,20,1)
(4,34,1)
(0,10,1)
(3,5,1)
(18,1,1)
(11,13,1)
(41,11,1)
(42,47,1)
(26,7,1)
(43,12,1)
(44,38,1)
(39,21,1)
(27,40,1)
(23,46,1)
(47,16,1)
(5,39,1)
(26,44,1)
(28,26,1)
(7,6,1)
(48,2,1)
(51,42,1)
(15,29,1)
(19,26,1)
(13,9,1)
(5,22,1)
(51,49,1)
(38,33,1)
(40,41,1)
(45,42,2)
(24,1,2)
(43,44,2)
(1,44,2)
(44,38,2)
(28,26,2)
(38,33,2)
(3,42,2)
(9,44,2)
(1,42,2)
(20,42,2)
(38,3,2)
(3,5,2)
(48,45,2)
(48,2,2)
(21,42,2)
(38,42,2)
(29,42,2)
(39,42,2)
(4,42,2)
(44,42,2)
(12,42,2)
(26,42,2)
(15,42,2)
(49,42,2)
(43,42,2)
(11,42,2)
(41,42,2)
(40,42,2)
(9,42,2)
(27,42,2)
(11,9,2)
(25,24,2)
(19,42,2)
(7,42,2)
(31,42,2)
(48,42,2)
(28,42,2)
(5,42,2)
(26,44,2)
(49,48,2)
(25,1,2)
(18,1,2)
(45,43,2)
(5,22,2)
(13,42,2)
(6,42,2)
(34,42,2)
-----------------------------------
(0,RET)
(1,data == NULL)
(2,twoIntsStruct *)
(3,calloc(100, sizeof(struct _twoIntsStruct)
(4,NULL)
(5,sizeof(struct _twoIntsStruct)
(6,data)
(7,0)
(8,if(GLOBAL_CONST_FIVE==5)
(9,data[0])
(10,GLOBAL_CONST_FIVE==5)
(11,data[0].intTwo)
(12,0)
(13,intTwo)
(14,)
(15,data[0].intOne = 0)
(16,GLOBAL_CONST_FIVE)
(17,data)
(18,1)
(19,intOne)
(20,0)
(21,data)
(22,struct _twoIntsStruct)
(23,data = NULL)
(24,-1)
(25,exit(-1)
(26,data[0])
(27,data)
(28,data[0].intOne)
(29,0)
(30,if(GLOBAL_CONST_FIVE==5)
(31,data)
(32, sizeof(struct _twoIntsStruct)
(33,struct _twoIntsStruct *)
(34,data)
(35,)
(36,5)
(37,)
(38,(struct _twoIntsStruct *)
(39,100)
(40,data[0].intTwo = 0)
(41,0)
(42,GLOBAL_CONST_FIVE==5)
(43,data[0])
(44,data = (struct _twoIntsStruct *)
(45,&data[0])
(46,NULL)
(47,5)
(48,(twoIntsStruct *)
(49,printStructLine((twoIntsStruct *)
(50,if (data == NULL)
(51,GLOBAL_CONST_FIVE)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
