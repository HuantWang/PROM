-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_16_bad()
{
    while(1)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
45,48
46,47
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
66,69
67,68
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
84,87
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,50,54,56,60,63,65,68,70,73,76,77,81,83,88,90,91,95,97,101,103,104
-----computeFrom-----
25,26
25,27
32,33
32,34
58,59
58,60
71,72
71,73
79,80
79,81
-----guardedBy-----
81,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_16_bad(){    while(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_char_16_bad()
CWE401_Memory_Leak__malloc_realloc_char_16_bad
{    while(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }        break;    }}
while(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }        break;    }
1
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }        break;    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(7,45,0)
(24,17,0)
(5,39,0)
(15,17,0)
(27,42,0)
(42,44,0)
(49,41,0)
(23,36,0)
(39,24,0)
(31,29,0)
(14,18,0)
(50,40,0)
(15,42,0)
(29,0,0)
(26,34,0)
(0,29,0)
(33,24,0)
(17,20,0)
(12,25,0)
(0,33,0)
(11,4,0)
(21,17,0)
(27,24,0)
(27,25,0)
(36,24,0)
(19,31,0)
(6,32,0)
(37,24,0)
(29,31,0)
(35,37,0)
(16,20,0)
(13,17,0)
(32,15,0)
(43,1,0)
(25,27,0)
(40,25,0)
(25,40,0)
(4,14,0)
(33,48,0)
(10,43,0)
(14,4,0)
(39,17,0)
(3,15,0)
(42,15,0)
(48,33,0)
(9,17,0)
(44,42,0)
(45,15,0)
(38,32,0)
(33,0,0)
(8,27,0)
(30,45,0)
(34,15,0)
(24,33,0)
(43,15,0)
(36,17,0)
(28,39,0)
(34,1,0)
(42,27,0)
(2,24,0)
(45,1,0)
(46,37,0)
(51,29,0)
(43,10,1)
(33,0,1)
(10,34,1)
(32,6,1)
(23,39,1)
(27,25,1)
(37,24,1)
(25,40,1)
(36,24,1)
(28,5,1)
(42,44,1)
(50,12,1)
(39,24,1)
(43,15,1)
(27,24,1)
(42,27,1)
(5,14,1)
(36,23,1)
(16,32,1)
(45,15,1)
(8,3,1)
(16,43,1)
(0,29,1)
(24,33,1)
(4,11,1)
(3,36,1)
(19,51,1)
(12,8,1)
(5,37,1)
(7,32,1)
(45,30,1)
(15,42,1)
(47,16,1)
(31,19,1)
(39,28,1)
(2,22,1)
(33,48,1)
(51,2,1)
(37,46,1)
(34,26,1)
(29,31,1)
(14,4,1)
(34,15,1)
(38,15,1)
(47,22,1)
(6,38,1)
(26,45,1)
(32,15,1)
(46,35,1)
(11,37,1)
(35,24,1)
(30,7,1)
(40,50,1)
(4,37,2)
(35,22,2)
(28,22,2)
(43,32,2)
(7,32,2)
(0,22,2)
(25,22,2)
(6,22,2)
(27,22,2)
(24,33,2)
(11,37,2)
(27,24,2)
(29,22,2)
(50,22,2)
(42,44,2)
(2,22,2)
(39,22,2)
(10,32,2)
(25,40,2)
(31,22,2)
(30,32,2)
(51,22,2)
(29,31,2)
(36,24,2)
(42,22,2)
(36,22,2)
(16,22,2)
(24,22,2)
(26,32,2)
(34,32,2)
(14,4,2)
(38,22,2)
(43,15,2)
(37,24,2)
(46,22,2)
(14,37,2)
(12,22,2)
(45,15,2)
(15,22,2)
(32,15,2)
(3,22,2)
(0,29,2)
(42,27,2)
(33,0,2)
(45,32,2)
(8,22,2)
(37,22,2)
(40,22,2)
(27,25,2)
(23,22,2)
(32,22,2)
(5,22,2)
(19,22,2)
(39,24,2)
(34,15,2)
(33,48,2)
(33,22,2)
(15,42,2)
-----------------------------------
(0,malloc(100*sizeof(char)
(1,)
(2,data)
(3,data)
(4,-1)
(5,data)
(6,NULL)
(7,data)
(8,data)
(9,if (data == NULL)
(10,data)
(11,1)
(12,130000)
(13,data)
(14,exit(-1)
(15,data = (char *)
(16,break;)
(17,)
(18,)
(19,char)
(20,)
(21,if (data != NULL)
(22,1)
(23,data)
(24,* data = (char *)
(25,(130000)
(26,data)
(27,realloc(data, (130000)
(28,"A String")
(29,100*sizeof(char)
(30,"New String")
(31,sizeof(char)
(32,data != NULL)
(33,(char *)
(34,printLine(data)
(35,data)
(36,printLine(data)
(37,data == NULL)
(38,data)
(39,strcpy(data, "A String")
(40,sizeof(char)
(41,)
(42,(char *)
(43,free(data)
(44,char *)
(45,strcpy(data, "New String")
(46,NULL)
(47,RET)
(48,char *)
(49,while(1)
(50,char)
(51,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
