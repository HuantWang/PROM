-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_realloc_17_bad()
{
    int i,j;
    int64_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)realloc(data, 100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
53,54
55,56
55,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
77,79
78,79
82,83
83,84
83,85
84,85
86,87
86,88
87,88
90,91
90,92
90,93
90,94
91,92
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
103,104
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,56,60,61,65,67,72,74,79,80,81,85,88,89,94,95,98,99,102,104
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
55,56
55,57
63,64
63,65
76,77
76,78
92,93
92,94
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_realloc_17_bad(){    int i,j;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_realloc_17_bad()
CWE401_Memory_Leak__int64_t_realloc_17_bad
{    int i,j;    int64_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(26,35,0)
(8,42,0)
(44,38,0)
(31,36,0)
(35,27,0)
(13,0,0)
(15,49,0)
(45,44,0)
(7,28,0)
(41,45,0)
(31,35,0)
(2,22,0)
(40,23,0)
(36,31,0)
(48,15,0)
(4,43,0)
(17,28,0)
(37,23,0)
(19,36,0)
(36,19,0)
(5,0,0)
(25,49,0)
(18,13,0)
(23,0,0)
(31,8,0)
(16,8,0)
(36,15,0)
(30,49,0)
(48,25,0)
(11,42,0)
(15,36,0)
(24,28,0)
(33,0,0)
(9,42,0)
(34,42,0)
(14,15,0)
(43,15,0)
(3,43,0)
(20,17,0)
(31,15,0)
(32,31,0)
(47,22,0)
(22,28,0)
(46,49,0)
(39,48,0)
(35,31,0)
(44,45,0)
(10,8,0)
(27,35,0)
(29,42,0)
(25,48,0)
(21,48,0)
(1,42,0)
(6,27,0)
(3,15,1)
(13,0,1)
(48,15,1)
(17,28,1)
(47,2,1)
(8,10,1)
(25,48,1)
(31,35,1)
(46,44,1)
(15,36,1)
(41,43,1)
(2,17,1)
(2,28,1)
(5,22,1)
(10,16,1)
(46,43,1)
(37,0,1)
(23,0,1)
(31,15,1)
(22,28,1)
(6,26,1)
(17,20,1)
(13,18,1)
(18,23,1)
(40,37,1)
(26,32,1)
(24,8,1)
(45,41,1)
(22,47,1)
(4,3,1)
(21,46,1)
(39,21,1)
(35,27,1)
(48,39,1)
(28,7,1)
(43,4,1)
(23,40,1)
(36,19,1)
(7,24,1)
(43,15,1)
(31,8,1)
(0,33,1)
(37,13,1)
(14,22,1)
(33,5,1)
(44,45,1)
(20,25,1)
(32,14,1)
(27,6,1)
(12,23,1)
(36,31,1)
(17,22,2)
(15,22,2)
(3,22,2)
(25,22,2)
(32,22,2)
(46,22,2)
(43,22,2)
(14,22,2)
(4,22,2)
(44,43,2)
(21,22,2)
(35,22,2)
(43,15,2)
(15,36,2)
(44,45,2)
(31,22,2)
(40,23,2)
(27,22,2)
(25,48,2)
(36,31,2)
(23,0,2)
(48,22,2)
(36,19,2)
(39,22,2)
(37,23,2)
(31,35,2)
(41,43,2)
(45,43,2)
(48,15,2)
(22,28,2)
(13,23,2)
(31,15,2)
(36,22,2)
(6,22,2)
(17,28,2)
(22,22,2)
(35,27,2)
(23,23,2)
(2,22,2)
(20,22,2)
(13,0,2)
(31,8,2)
(26,22,2)
(18,23,2)
(47,22,2)
-----------------------------------
(0,j = 0)
(1,data)
(2,i)
(3,data)
(4,NULL)
(5,j)
(6,int64_t)
(7,0)
(8,data = NULL)
(9,i)
(10,NULL)
(11,for(j = 0; j < 1; j++)
(12,RET)
(13,j++)
(14,data)
(15,data = (int64_t *)
(16,data)
(17,i++)
(18,j)
(19,int64_t *)
(20,i)
(21,data)
(22,i < 1)
(23,j < 1)
(24,i)
(25,printLongLongLine(data[0])
(26,100)
(27,sizeof(int64_t)
(28,i = 0)
(29,j)
(30,if (data == NULL)
(31,realloc(data, 100*sizeof(int64_t)
(32,data)
(33,0)
(34,for(i = 0; i < 1; i++)
(35,100*sizeof(int64_t)
(36,(int64_t *)
(37,j)
(38,)
(39,0)
(40,1)
(41,1)
(42,)
(43,data == NULL)
(44,exit(-1)
(45,-1)
(46,L)
(47,1)
(48,data[0])
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
