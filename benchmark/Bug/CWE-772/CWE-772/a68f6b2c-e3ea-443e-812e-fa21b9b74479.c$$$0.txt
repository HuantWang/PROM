-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_02_bad()
{
    if(1)
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
9,16
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
50,52
51,52
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
90,93
91,92
93,94
95,96
95,97
96,97
98,99
99,100
99,101
100,101
103,104
103,105
104,105
104,106
105,106
107,108
109,110
109,111
109,112
109,113
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
128,129
129,130
129,131
130,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
143,144
144,145
144,146
145,146
147,148
-----nextToken-----
2,4,7,13,15,16,21,23,26,28,32,33,37,39,44,46,52,53,54,55,61,62,63,64,68,72,74,78,79,83,87,89,92,94,97,101,102,106,108,115,116,117,118,124,125,126,127,131,135,137,141,142,146,148
-----computeFrom-----
27,28
27,29
35,36
35,37
48,49
48,50
57,58
57,59
81,82
81,83
95,96
95,97
104,105
104,106
111,112
111,113
120,121
120,122
-----guardedBy-----
106,148
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_02_bad(){    if(1)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_02_bad()
CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_02_bad
{    if(1)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }}
if(1)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }
1
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(71,12,0)
(60,10,0)
(43,65,0)
(11,79,0)
(31,52,0)
(21,39,0)
(40,36,0)
(31,44,0)
(77,43,0)
(43,7,0)
(67,64,0)
(54,2,0)
(62,7,0)
(42,71,0)
(12,71,0)
(75,24,0)
(13,81,0)
(3,65,0)
(70,22,0)
(22,70,0)
(53,47,0)
(24,47,0)
(33,58,0)
(63,4,0)
(25,4,0)
(26,40,0)
(65,4,0)
(6,22,0)
(22,45,0)
(2,55,0)
(26,68,0)
(36,40,0)
(10,61,0)
(14,10,0)
(46,27,0)
(72,5,0)
(57,67,0)
(17,78,0)
(44,9,0)
(17,46,0)
(66,17,0)
(68,39,0)
(19,59,0)
(51,78,0)
(45,10,0)
(79,78,0)
(46,17,0)
(34,73,0)
(35,65,0)
(59,10,0)
(45,22,0)
(74,69,0)
(76,47,0)
(81,78,0)
(47,24,0)
(49,74,0)
(70,79,0)
(15,79,0)
(7,0,0)
(71,42,0)
(58,33,0)
(67,4,0)
(78,10,0)
(74,5,0)
(52,58,0)
(56,25,0)
(64,71,0)
(47,78,0)
(55,30,0)
(18,17,0)
(1,63,0)
(65,43,0)
(39,78,0)
(16,10,0)
(23,46,0)
(38,31,0)
(20,5,0)
(55,2,0)
(41,52,0)
(58,52,0)
(63,0,0)
(22,6,0)
(32,26,0)
(82,69,0)
(27,10,0)
(5,4,0)
(79,70,0)
(8,4,0)
(44,4,0)
(44,31,0)
(64,67,0)
(69,0,0)
(28,25,0)
(52,31,0)
(71,64,0)
(24,59,0)
(4,10,0)
(9,44,0)
(29,67,0)
(50,81,0)
(68,26,0)
(12,0,0)
(78,39,0)
(80,27,0)
(31,78,0)
(39,21,0)
(39,68,0)
(4,44,0)
(5,74,0)
(40,26,0)
(59,19,1)
(32,51,1)
(43,77,1)
(31,52,1)
(28,4,1)
(23,17,1)
(24,75,1)
(46,17,1)
(41,38,1)
(26,40,1)
(25,56,1)
(17,18,1)
(48,63,1)
(64,67,1)
(80,46,1)
(3,35,1)
(75,47,1)
(63,4,1)
(22,70,1)
(76,81,1)
(44,31,1)
(77,65,1)
(48,25,1)
(81,50,1)
(19,24,1)
(40,32,1)
(67,57,1)
(81,78,1)
(24,47,1)
(11,27,1)
(45,22,1)
(1,12,1)
(15,11,1)
(69,82,1)
(13,78,1)
(22,6,1)
(31,78,1)
(8,45,1)
(43,65,1)
(39,68,1)
(55,2,1)
(52,58,1)
(4,44,1)
(82,74,1)
(20,72,1)
(5,4,1)
(71,64,1)
(5,20,1)
(44,9,1)
(79,78,1)
(76,55,1)
(62,43,1)
(49,5,1)
(2,54,1)
(58,33,1)
(47,78,1)
(63,1,1)
(18,66,1)
(65,4,1)
(17,78,1)
(12,71,1)
(53,76,1)
(27,80,1)
(74,49,1)
(50,13,1)
(72,7,1)
(40,36,1)
(66,59,1)
(74,5,1)
(54,81,1)
(48,37,1)
(67,4,1)
(46,23,1)
(35,25,1)
(57,29,1)
(51,37,1)
(79,15,1)
(38,8,1)
(70,79,1)
(29,69,1)
(25,4,1)
(7,62,1)
(71,42,1)
(68,26,1)
(47,53,1)
(65,3,1)
(78,39,1)
(56,28,1)
(58,41,1)
(39,21,1)
(39,68,2)
(18,37,2)
(58,33,2)
(55,2,2)
(80,37,2)
(78,39,2)
(4,44,2)
(19,37,2)
(63,25,2)
(4,37,2)
(64,67,2)
(39,37,2)
(75,37,2)
(44,31,2)
(40,36,2)
(64,25,2)
(71,42,2)
(58,37,2)
(72,25,2)
(51,37,2)
(56,37,2)
(29,25,2)
(13,37,2)
(44,37,2)
(47,37,2)
(52,37,2)
(31,78,2)
(22,37,2)
(71,64,2)
(49,25,2)
(27,37,2)
(22,70,2)
(12,25,2)
(79,78,2)
(50,37,2)
(45,22,2)
(25,4,2)
(74,25,2)
(23,37,2)
(3,25,2)
(22,6,2)
(76,37,2)
(41,37,2)
(20,25,2)
(26,37,2)
(44,9,2)
(47,78,2)
(53,37,2)
(1,25,2)
(70,79,2)
(5,4,2)
(81,37,2)
(79,37,2)
(78,37,2)
(17,37,2)
(7,25,2)
(67,25,2)
(25,37,2)
(31,37,2)
(74,5,2)
(70,37,2)
(43,25,2)
(52,58,2)
(35,25,2)
(66,37,2)
(39,21,2)
(43,65,2)
(31,52,2)
(63,4,2)
(15,37,2)
(62,25,2)
(46,37,2)
(57,25,2)
(65,25,2)
(12,71,2)
(77,25,2)
(28,37,2)
(2,81,2)
(67,4,2)
(26,40,2)
(46,17,2)
(11,37,2)
(81,78,2)
(82,25,2)
(54,81,2)
(17,78,2)
(38,37,2)
(24,47,2)
(65,4,2)
(32,37,2)
(55,81,2)
(24,37,2)
(69,25,2)
(5,25,2)
(45,37,2)
(59,37,2)
(8,37,2)
(71,25,2)
(68,26,2)
(68,37,2)
(40,37,2)
-----------------------------------
(0,)
(1,data)
(2,-1)
(3,0)
(4,data = (struct _twoIntsStruct *)
(5,data[0])
(6,twoIntsStruct *)
(7,data[0].intOne = 1)
(8,data)
(9,struct _twoIntsStruct *)
(10,)
(11,data)
(12,printStructLine((twoIntsStruct *)
(13,data)
(14,if (data == NULL)
(15,0)
(16,if (data != NULL)
(17,data[0])
(18,0)
(19,0)
(20,0)
(21,struct _twoIntsStruct *)
(22,(twoIntsStruct *)
(23,intTwo)
(24,data[0].intOne)
(25,data != NULL)
(26,100*sizeof(struct _twoIntsStruct)
(27,data[0].intTwo = 0)
(28,data)
(29,data)
(30,)
(31,realloc(data, (130000)
(32,100)
(33,struct _twoIntsStruct)
(34,if(1)
(35,data)
(36,struct _twoIntsStruct)
(37,1)
(38,data)
(39,(struct _twoIntsStruct *)
(40,sizeof(struct _twoIntsStruct)
(41,130000)
(42,twoIntsStruct *)
(43,data[0].intOne)
(44,(struct _twoIntsStruct *)
(45,printStructLine((twoIntsStruct *)
(46,data[0].intTwo)
(47,data[0])
(48,RET)
(49,intTwo)
(50,NULL)
(51,data)
(52,(130000)
(53,0)
(54,1)
(55,exit(-1)
(56,NULL)
(57,0)
(58,sizeof(struct _twoIntsStruct)
(59,data[0].intOne = 0)
(60,data)
(61,)
(62,1)
(63,free(data)
(64,&data[0])
(65,data[0])
(66,data)
(67,data[0])
(68,malloc(100*sizeof(struct _twoIntsStruct)
(69,data[0].intTwo = 1)
(70,&data[0])
(71,(twoIntsStruct *)
(72,data)
(73,)
(74,data[0].intTwo)
(75,intOne)
(76,data)
(77,intOne)
(78,* data = (struct _twoIntsStruct *)
(79,data[0])
(80,0)
(81,data == NULL)
(82,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
