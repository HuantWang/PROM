-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_04_bad(){    if(STATIC_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_04_bad()
CWE401_Memory_Leak__malloc_realloc_char_04_bad
{    if(STATIC_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(STATIC_CONST_TRUE)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(30,13,0)
(12,44,0)
(42,41,0)
(10,38,0)
(34,18,0)
(19,16,0)
(36,13,0)
(19,21,0)
(32,38,0)
(49,32,0)
(5,21,0)
(20,17,0)
(50,46,0)
(4,36,0)
(22,29,0)
(44,12,0)
(17,12,0)
(27,21,0)
(44,48,0)
(40,19,0)
(12,17,0)
(1,18,0)
(15,29,0)
(46,16,0)
(35,34,0)
(23,13,0)
(47,27,0)
(31,18,0)
(44,36,0)
(33,19,0)
(30,38,0)
(13,23,0)
(41,21,0)
(13,30,0)
(38,30,0)
(48,37,0)
(9,12,0)
(24,25,0)
(24,6,0)
(8,44,0)
(7,1,0)
(21,18,0)
(21,48,0)
(14,6,0)
(2,39,0)
(34,36,0)
(48,44,0)
(37,48,0)
(46,21,0)
(26,18,0)
(27,16,0)
(29,36,0)
(48,21,0)
(38,32,0)
(6,24,0)
(43,18,0)
(18,11,0)
(1,36,0)
(13,36,0)
(0,41,0)
(45,1,0)
(36,18,0)
(14,29,1)
(21,48,1)
(44,12,1)
(42,0,1)
(4,28,1)
(34,36,1)
(20,9,1)
(1,7,1)
(33,40,1)
(48,37,1)
(7,45,1)
(24,6,1)
(41,21,1)
(19,21,1)
(27,47,1)
(44,36,1)
(30,38,1)
(22,36,1)
(38,32,1)
(8,5,1)
(12,17,1)
(48,44,1)
(46,50,1)
(3,27,1)
(3,28,1)
(10,4,1)
(13,30,1)
(1,36,1)
(5,34,1)
(17,20,1)
(49,10,1)
(50,19,1)
(34,35,1)
(3,41,1)
(29,15,1)
(0,21,1)
(29,36,1)
(6,14,1)
(41,42,1)
(32,49,1)
(19,33,1)
(15,22,1)
(27,21,1)
(9,8,1)
(35,1,1)
(40,41,1)
(45,24,1)
(46,21,1)
(36,13,1)
(47,46,1)
(45,29,1)
(13,23,1)
(9,28,2)
(0,28,2)
(19,41,2)
(12,28,2)
(35,28,2)
(29,28,2)
(50,41,2)
(30,28,2)
(13,23,2)
(41,28,2)
(48,28,2)
(24,29,2)
(45,28,2)
(13,30,2)
(46,41,2)
(14,29,2)
(10,28,2)
(49,28,2)
(1,36,2)
(42,28,2)
(30,38,2)
(24,6,2)
(48,44,2)
(27,41,2)
(19,21,2)
(17,28,2)
(38,32,2)
(13,28,2)
(36,13,2)
(32,28,2)
(44,12,2)
(34,28,2)
(38,28,2)
(7,28,2)
(6,29,2)
(47,41,2)
(41,21,2)
(27,21,2)
(21,48,2)
(5,28,2)
(1,28,2)
(48,37,2)
(12,17,2)
(22,28,2)
(15,28,2)
(4,28,2)
(21,28,2)
(34,36,2)
(8,28,2)
(44,36,2)
(44,28,2)
(36,28,2)
(20,28,2)
(29,36,2)
(33,41,2)
(46,21,2)
(40,41,2)
-----------------------------------
(0,data)
(1,strcpy(data, "A String")
(2,if(STATIC_CONST_TRUE)
(3,RET)
(4,data)
(5,data)
(6,-1)
(7,"A String")
(8,data)
(9,130000)
(10,100)
(11,)
(12,(130000)
(13,(char *)
(14,1)
(15,NULL)
(16,)
(17,sizeof(char)
(18,)
(19,strcpy(data, "New String")
(20,char)
(21,data = (char *)
(22,data)
(23,char *)
(24,exit(-1)
(25,)
(26,if (data == NULL)
(27,free(data)
(28,STATIC_CONST_TRUE)
(29,data == NULL)
(30,malloc(100*sizeof(char)
(31,data)
(32,sizeof(char)
(33,"New String")
(34,printLine(data)
(35,data)
(36,* data = (char *)
(37,char *)
(38,100*sizeof(char)
(39,)
(40,data)
(41,data != NULL)
(42,NULL)
(43,if (data != NULL)
(44,realloc(data, (130000)
(45,data)
(46,printLine(data)
(47,data)
(48,(char *)
(49,char)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
