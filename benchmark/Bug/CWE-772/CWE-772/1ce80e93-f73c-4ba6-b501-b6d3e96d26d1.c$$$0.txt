-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_34_bad()
{
    wchar_t * data;
    CWE401_Memory_Leak__strdup_wchar_t_34_unionType myUnion;
    data = NULL;
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
28,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
54,55
56,57
56,58
57,58
58,59
58,60
60,61
60,62
60,63
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,29,30,32,36,39,41,45,47,52,53,55,59,61,62,66,67,68
-----computeFrom-----
19,20
19,21
34,35
34,36
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_34_bad(){    wchar_t * data;    CWE401_Memory_Leak__strdup_wchar_t_34_unionType myUnion;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_34_bad()
CWE401_Memory_Leak__strdup_wchar_t_34_bad
{    wchar_t * data;    CWE401_Memory_Leak__strdup_wchar_t_34_unionType myUnion;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE401_Memory_Leak__strdup_wchar_t_34_unionType myUnion;
CWE401_Memory_Leak__strdup_wchar_t_34_unionType myUnion;
CWE401_Memory_Leak__strdup_wchar_t_34_unionType
CWE401_Memory_Leak__strdup_wchar_t_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(22,23,0)
(24,7,0)
(23,17,0)
(25,20,0)
(19,6,0)
(16,8,0)
(7,17,0)
(26,25,0)
(9,20,0)
(13,23,0)
(10,20,0)
(4,2,0)
(0,22,0)
(3,6,0)
(12,2,0)
(14,2,0)
(1,23,0)
(5,17,0)
(8,22,0)
(7,23,0)
(23,1,0)
(25,4,0)
(18,8,0)
(17,2,0)
(22,2,0)
(6,2,0)
(11,1,0)
(21,4,0)
(20,25,0)
(0,8,1)
(9,10,1)
(5,6,1)
(23,1,1)
(18,7,1)
(8,16,1)
(24,23,1)
(16,18,1)
(26,22,1)
(11,13,1)
(25,20,1)
(7,23,1)
(13,5,1)
(15,25,1)
(1,11,1)
(6,3,1)
(3,19,1)
(10,26,1)
(20,9,1)
(22,23,1)
(22,0,1)
(7,24,1)
(22,23,2)
(23,1,2)
(7,23,2)
(25,20,2)
-----------------------------------
(0,data)
(1,wcsdup(myString)
(2,)
(3,NULL)
(4,)
(5,"myString")
(6,data = NULL)
(7,printWLine(data)
(8,myUnion.unionFirst)
(9,unionSecond)
(10,myUnion)
(11,myString)
(12,data)
(13,data)
(14,myUnion)
(15,RET)
(16,unionFirst)
(17,)
(18,myUnion)
(19,data)
(20,myUnion.unionSecond)
(21,data)
(22,myUnion.unionFirst = data)
(23,data = wcsdup(myString)
(24,data)
(25,* data = myUnion.unionSecond)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
