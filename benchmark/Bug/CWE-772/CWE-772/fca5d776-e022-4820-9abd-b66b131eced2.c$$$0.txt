-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_11_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
49,50
51,52
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,31,35,38,40,44,46,50,52
-----computeFrom-----
13,14
13,15
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_11_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_11_bad()
CWE401_Memory_Leak__strdup_wchar_t_11_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,14,0)
(12,4,0)
(11,14,0)
(5,2,0)
(0,11,0)
(17,11,0)
(5,4,0)
(2,5,0)
(4,6,0)
(3,4,0)
(7,12,0)
(13,14,0)
(15,2,0)
(12,5,0)
(10,14,0)
(1,5,0)
(11,17,1)
(1,3,1)
(15,1,1)
(8,16,1)
(5,2,1)
(16,9,1)
(16,12,1)
(7,5,1)
(3,9,1)
(12,7,1)
(2,15,1)
(12,5,1)
(9,11,1)
(17,0,1)
(2,9,2)
(3,9,2)
(1,9,2)
(5,9,2)
(15,9,2)
(12,9,2)
(5,2,2)
(12,5,2)
(7,9,2)
-----------------------------------
(0,data)
(1,data)
(2,wcsdup(myString)
(3,"myString")
(4,)
(5,data = wcsdup(myString)
(6,)
(7,data)
(8,RET)
(9,globalReturnsTrue()
(10,data)
(11,data = NULL)
(12,printWLine(data)
(13,if(globalReturnsTrue()
(14,)
(15,myString)
(16,globalReturnsTrue()
(17,NULL)
(18,if(globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
