-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_03_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
92,93
92,94
93,94
93,95
96,97
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,86,90,91,94,95,97
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
93,94
93,95
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_03_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_03_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_03_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(5,31,0)
(5,45,0)
(9,11,0)
(52,49,0)
(31,34,0)
(50,30,0)
(42,50,0)
(21,42,0)
(11,9,0)
(29,49,0)
(37,34,0)
(11,10,0)
(48,20,0)
(27,28,0)
(41,18,0)
(32,16,0)
(50,42,0)
(2,24,0)
(33,15,0)
(1,37,0)
(53,22,0)
(12,21,0)
(25,45,0)
(1,47,0)
(51,5,0)
(40,15,0)
(42,34,0)
(16,32,0)
(20,34,0)
(36,31,0)
(14,28,0)
(45,5,0)
(38,50,0)
(45,42,0)
(30,22,0)
(28,14,0)
(39,32,0)
(44,10,0)
(22,18,0)
(17,18,0)
(30,10,0)
(14,26,0)
(21,47,0)
(35,34,0)
(50,38,0)
(46,45,0)
(16,42,0)
(32,20,0)
(23,30,0)
(24,42,0)
(30,50,0)
(0,22,0)
(47,21,0)
(10,11,0)
(43,1,0)
(7,16,0)
(47,1,0)
(13,42,0)
(10,30,0)
(37,1,0)
(4,21,0)
(3,18,0)
(1,43,0)
(19,16,0)
(8,24,0)
(0,53,1)
(45,46,1)
(51,45,1)
(21,12,1)
(36,5,1)
(13,15,1)
(4,31,1)
(5,51,1)
(6,49,1)
(1,43,1)
(16,19,1)
(11,44,1)
(25,20,1)
(47,21,1)
(19,7,1)
(8,2,1)
(28,27,1)
(5,45,1)
(31,36,1)
(39,16,1)
(52,37,1)
(24,42,1)
(32,16,1)
(50,38,1)
(24,8,1)
(27,24,1)
(14,28,1)
(44,23,1)
(46,25,1)
(50,30,1)
(45,42,1)
(1,47,1)
(10,11,1)
(42,50,1)
(52,15,1)
(33,40,1)
(22,0,1)
(30,22,1)
(49,29,1)
(2,42,1)
(37,1,1)
(11,9,1)
(21,42,1)
(7,24,1)
(32,39,1)
(12,4,1)
(29,52,1)
(48,32,1)
(40,22,1)
(20,48,1)
(15,33,1)
(23,13,1)
(7,14,1)
(30,10,1)
(16,42,1)
(45,15,2)
(7,15,2)
(50,38,2)
(13,15,2)
(37,1,2)
(5,15,2)
(27,24,2)
(11,9,2)
(21,15,2)
(28,24,2)
(46,15,2)
(30,15,2)
(14,28,2)
(21,42,2)
(30,10,2)
(39,15,2)
(4,15,2)
(42,50,2)
(24,15,2)
(47,15,2)
(37,15,2)
(31,15,2)
(16,15,2)
(42,15,2)
(32,16,2)
(1,15,2)
(10,15,2)
(45,42,2)
(23,15,2)
(1,47,2)
(20,15,2)
(5,45,2)
(14,24,2)
(50,15,2)
(32,15,2)
(16,42,2)
(1,43,2)
(2,15,2)
(30,22,2)
(25,15,2)
(36,15,2)
(24,42,2)
(19,15,2)
(51,15,2)
(50,30,2)
(44,15,2)
(48,15,2)
(11,15,2)
(47,21,2)
(8,15,2)
(10,11,2)
(12,15,2)
-----------------------------------
(0,NULL)
(1,(twoIntsStruct *)
(2,data)
(3,data)
(4,data)
(5,data[0].intTwo)
(6,RET)
(7,data)
(8,NULL)
(9,struct _twoIntsStruct)
(10,100*sizeof(struct _twoIntsStruct)
(11,sizeof(struct _twoIntsStruct)
(12,0)
(13,data)
(14,exit(-1)
(15,5==5)
(16,data[0])
(17,if(5==5)
(18,)
(19,0)
(20,data[0].intOne = 0)
(21,data[0])
(22,data = NULL)
(23,data)
(24,data == NULL)
(25,data)
(26,)
(27,1)
(28,-1)
(29,5)
(30,realloc(data, 100*sizeof(struct _twoIntsStruct)
(31,data[0].intTwo = 0)
(32,data[0].intOne)
(33,5)
(34,)
(35,if (data == NULL)
(36,0)
(37,printStructLine((twoIntsStruct *)
(38,struct _twoIntsStruct *)
(39,intOne)
(40,5)
(41,if(5==5)
(42,data = (struct _twoIntsStruct *)
(43,twoIntsStruct *)
(44,100)
(45,data[0])
(46,0)
(47,&data[0])
(48,0)
(49,5==5)
(50,(struct _twoIntsStruct *)
(51,intTwo)
(52,5)
(53,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
