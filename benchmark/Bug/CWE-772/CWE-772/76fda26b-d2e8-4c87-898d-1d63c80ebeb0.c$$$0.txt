-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_02_bad()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
66,67
66,68
68,69
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,55,56,57,61,64,65,67,69
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_02_bad(){    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_02_bad()
CWE401_Memory_Leak__int_calloc_02_bad
{    int * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(12,23,0)
(14,33,0)
(9,34,0)
(10,13,0)
(13,18,0)
(33,21,0)
(4,14,0)
(29,26,0)
(0,30,0)
(19,14,0)
(30,28,0)
(20,18,0)
(5,32,0)
(7,34,0)
(32,18,0)
(22,0,0)
(26,21,0)
(30,0,0)
(15,27,0)
(18,32,0)
(18,13,0)
(16,21,0)
(36,8,0)
(8,26,0)
(3,23,0)
(24,8,0)
(1,32,0)
(23,27,0)
(18,20,0)
(25,27,0)
(13,21,0)
(14,26,0)
(34,13,0)
(35,1,0)
(8,13,0)
(11,27,0)
(14,13,0)
(33,14,0)
(32,1,0)
(18,20,1)
(1,35,1)
(32,1,1)
(31,6,1)
(14,26,1)
(26,29,1)
(34,13,1)
(13,18,1)
(7,9,1)
(5,10,1)
(29,8,1)
(22,34,1)
(14,4,1)
(33,14,1)
(35,5,1)
(4,19,1)
(18,32,1)
(0,22,1)
(6,33,1)
(9,13,1)
(23,3,1)
(24,34,1)
(34,7,1)
(3,12,1)
(8,13,1)
(10,17,1)
(8,36,1)
(30,0,1)
(19,26,1)
(36,24,1)
(6,17,1)
(14,13,1)
(17,23,1)
(24,30,1)
(33,14,2)
(19,17,2)
(8,13,2)
(29,17,2)
(5,17,2)
(14,26,2)
(18,32,2)
(13,18,2)
(26,17,2)
(8,17,2)
(24,17,2)
(13,17,2)
(4,17,2)
(18,17,2)
(36,17,2)
(18,20,2)
(1,17,2)
(22,34,2)
(7,17,2)
(30,0,2)
(33,17,2)
(30,34,2)
(14,17,2)
(9,17,2)
(14,13,2)
(34,17,2)
(34,13,2)
(35,17,2)
(32,1,2)
(32,17,2)
(10,17,2)
(0,34,2)
-----------------------------------
(0,-1)
(1,sizeof(int)
(2, sizeof(int)
(3,NULL)
(4,0)
(5,100)
(6,1)
(7,NULL)
(8,data[0])
(9,data)
(10,data)
(11,if(1)
(12,data)
(13,data = (int *)
(14,data[0])
(15,data)
(16,if (data == NULL)
(17,1)
(18,(int *)
(19,data)
(20,int *)
(21,)
(22,1)
(23,data = NULL)
(24,data)
(25,if(1)
(26,data[0] = 5)
(27,)
(28,)
(29,5)
(30,exit(-1)
(31,RET)
(32,calloc(100, sizeof(int)
(33,printIntLine(data[0])
(34,data == NULL)
(35,int)
(36,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
