-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_41_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
70,71
71,72
71,73
72,73
74,75
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,57,58,59,60,66,67,68,69,73,77,78,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_41_bad(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    badSink(data);}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_41_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_41_bad
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    badSink(data);}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
badSink(data);
badSink(data)
badSink
badSink
data
data
-----joern-----
(12,39,0)
(30,18,0)
(18,23,0)
(28,26,0)
(26,8,0)
(38,16,0)
(29,7,0)
(29,1,0)
(26,10,0)
(40,10,0)
(22,8,0)
(31,37,0)
(42,14,0)
(23,18,0)
(16,36,0)
(30,10,0)
(36,16,0)
(2,27,0)
(40,21,0)
(13,16,0)
(4,14,0)
(7,29,0)
(27,14,0)
(43,32,0)
(11,26,0)
(33,10,0)
(32,43,0)
(25,7,0)
(3,36,0)
(42,10,0)
(19,30,0)
(9,43,0)
(23,14,0)
(41,35,0)
(8,37,0)
(10,14,0)
(10,40,0)
(24,14,0)
(21,40,0)
(43,35,0)
(5,14,0)
(15,42,0)
(16,10,0)
(0,27,0)
(40,32,0)
(36,24,0)
(8,26,0)
(32,40,0)
(6,39,0)
(18,30,0)
(37,14,0)
(39,10,0)
(20,24,0)
(34,30,0)
(35,43,0)
(30,34,1)
(13,29,1)
(31,8,1)
(30,10,1)
(13,39,1)
(26,10,1)
(6,10,1)
(40,21,1)
(19,37,1)
(39,10,1)
(25,39,1)
(12,6,1)
(20,36,1)
(16,10,1)
(36,16,1)
(3,16,1)
(18,30,1)
(43,35,1)
(32,43,1)
(26,11,1)
(36,3,1)
(38,13,1)
(28,24,1)
(27,0,1)
(15,23,1)
(34,19,1)
(0,2,1)
(7,25,1)
(42,10,1)
(17,42,1)
(35,41,1)
(16,38,1)
(8,22,1)
(41,9,1)
(22,26,1)
(11,28,1)
(24,20,1)
(9,33,1)
(37,31,1)
(39,12,1)
(23,18,1)
(10,40,1)
(29,7,1)
(42,15,1)
(8,26,1)
(40,32,1)
(33,27,1)
(39,10,2)
(29,7,2)
(8,26,2)
(36,16,2)
(16,10,2)
(30,10,2)
(32,43,2)
(18,30,2)
(42,10,2)
(7,39,2)
(43,35,2)
(10,40,2)
(29,39,2)
(23,18,2)
(40,21,2)
(25,39,2)
(40,32,2)
(26,10,2)
-----------------------------------
(0,NULL)
(1,)
(2,data)
(3,intOne)
(4,data)
(5,if (data == NULL)
(6,data)
(7,-1)
(8,data[0].intTwo)
(9,100)
(10,data = (twoIntsStruct *)
(11,0)
(12,NULL)
(13,data)
(14,)
(15,data)
(16,data[0])
(17,RET)
(18,&data[0])
(19,data)
(20,0)
(21,twoIntsStruct *)
(22,intTwo)
(23,printStructLine(&data[0])
(24,data[0].intOne = 0)
(25,1)
(26,data[0])
(27,data = NULL)
(28,data)
(29,exit(-1)
(30,data[0])
(31,0)
(32,malloc(100*sizeof(twoIntsStruct)
(33,data)
(34,0)
(35,sizeof(twoIntsStruct)
(36,data[0].intOne)
(37,data[0].intTwo = 0)
(38,0)
(39,data == NULL)
(40,(twoIntsStruct *)
(41,twoIntsStruct)
(42,badSink(data)
(43,100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
