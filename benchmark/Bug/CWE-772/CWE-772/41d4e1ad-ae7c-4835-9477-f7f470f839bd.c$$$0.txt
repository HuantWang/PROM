-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_13_bad()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_13_bad(){    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_13_bad()
CWE401_Memory_Leak__char_malloc_13_bad
{    char * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,16,0)
(7,28,0)
(31,2,0)
(12,9,0)
(15,36,0)
(3,6,0)
(35,34,0)
(33,13,0)
(11,22,0)
(20,6,0)
(26,36,0)
(2,13,0)
(23,18,0)
(36,13,0)
(33,0,0)
(22,11,0)
(28,34,0)
(19,34,0)
(12,29,0)
(8,1,0)
(16,22,0)
(29,12,0)
(17,1,0)
(10,2,0)
(14,8,0)
(30,0,0)
(13,0,0)
(24,13,0)
(25,34,0)
(27,29,0)
(2,0,0)
(16,8,0)
(5,33,0)
(8,16,0)
(32,28,0)
(22,13,0)
(13,22,0)
(4,18,0)
(1,8,0)
(16,8,1)
(17,14,1)
(28,32,1)
(2,13,1)
(27,36,1)
(31,12,1)
(4,23,1)
(21,18,1)
(8,1,1)
(22,16,1)
(24,6,1)
(29,27,1)
(1,17,1)
(2,10,1)
(31,36,1)
(36,13,1)
(18,4,1)
(36,15,1)
(15,26,1)
(3,28,1)
(10,31,1)
(12,29,1)
(6,20,1)
(23,6,1)
(13,22,1)
(23,33,1)
(33,13,1)
(32,7,1)
(33,5,1)
(5,2,1)
(14,24,1)
(26,13,1)
(22,11,1)
(20,3,1)
(22,16,2)
(36,13,2)
(12,36,2)
(17,6,2)
(2,6,2)
(13,22,2)
(27,36,2)
(1,6,2)
(16,6,2)
(8,6,2)
(33,6,2)
(31,6,2)
(22,11,2)
(33,13,2)
(29,36,2)
(2,13,2)
(16,8,2)
(14,6,2)
(13,6,2)
(36,6,2)
(5,6,2)
(12,29,2)
(8,1,2)
(10,6,2)
(15,6,2)
(24,6,2)
(26,6,2)
(22,6,2)
-----------------------------------
(0,)
(1,sizeof(char)
(2,strcpy(data, "A String")
(3,GLOBAL_CONST_FIVE)
(4,5)
(5,data)
(6,GLOBAL_CONST_FIVE==5)
(7,data)
(8,100*sizeof(char)
(9,)
(10,"A String")
(11,char *)
(12,exit(-1)
(13,data = (char *)
(14,100)
(15,NULL)
(16,malloc(100*sizeof(char)
(17,char)
(18,GLOBAL_CONST_FIVE==5)
(19,if(GLOBAL_CONST_FIVE==5)
(20,5)
(21,RET)
(22,(char *)
(23,GLOBAL_CONST_FIVE)
(24,data)
(25,if(GLOBAL_CONST_FIVE==5)
(26,data)
(27,1)
(28,data = NULL)
(29,-1)
(30,if (data == NULL)
(31,data)
(32,NULL)
(33,printLine(data)
(34,)
(35,data)
(36,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
