-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
80,81
82,83
82,84
82,85
83,84
85,86
87,88
87,89
88,89
90,91
91,92
91,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
102,103
102,104
102,105
103,104
105,106
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,31,35,37,40,42,45,46,50,52,57,59,63,65,66,70,72,76,79,81,84,86,89,92,93,97,99,104,106,107,111,113,117,119
-----computeFrom-----
13,14
13,15
17,18
17,19
41,42
41,43
48,49
48,50
74,75
74,76
87,88
87,89
95,96
95,97
-----guardedBy-----
97,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_17_bad()
CWE401_Memory_Leak__malloc_realloc_char_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(36,54,0)
(28,52,0)
(29,45,0)
(12,56,0)
(47,33,0)
(42,31,0)
(57,56,0)
(26,48,0)
(23,55,0)
(39,13,0)
(21,27,0)
(58,33,0)
(23,11,0)
(6,22,0)
(39,28,0)
(16,13,0)
(25,49,0)
(54,13,0)
(46,45,0)
(0,37,0)
(3,17,0)
(8,44,0)
(20,58,0)
(27,45,0)
(17,3,0)
(53,25,0)
(27,28,0)
(21,33,0)
(55,23,0)
(56,49,0)
(1,47,0)
(51,21,0)
(18,3,0)
(13,45,0)
(34,35,0)
(30,48,0)
(39,31,0)
(13,8,0)
(40,49,0)
(28,39,0)
(15,58,0)
(10,3,0)
(41,31,0)
(8,13,0)
(10,8,0)
(19,55,0)
(32,37,0)
(38,49,0)
(47,27,0)
(35,27,0)
(31,42,0)
(3,10,0)
(37,13,0)
(45,24,0)
(50,17,0)
(8,10,0)
(9,39,0)
(52,28,0)
(7,45,0)
(4,35,0)
(48,13,0)
(37,45,0)
(54,45,0)
(58,27,0)
(43,42,0)
(14,27,0)
(44,8,0)
(28,27,0)
(31,39,0)
(5,22,0)
(48,30,1)
(10,3,1)
(56,57,1)
(2,56,1)
(47,1,1)
(41,9,1)
(36,37,1)
(57,12,1)
(31,42,1)
(58,20,1)
(32,23,1)
(21,27,1)
(42,43,1)
(35,4,1)
(51,58,1)
(47,27,1)
(1,21,1)
(27,28,1)
(39,13,1)
(32,48,1)
(30,26,1)
(18,16,1)
(8,44,1)
(13,8,1)
(48,13,1)
(16,56,1)
(54,13,1)
(0,32,1)
(58,27,1)
(28,39,1)
(53,47,1)
(43,41,1)
(4,34,1)
(39,31,1)
(15,35,1)
(55,19,1)
(21,51,1)
(50,18,1)
(34,27,1)
(19,48,1)
(20,15,1)
(56,49,1)
(12,49,1)
(26,13,1)
(40,38,1)
(49,40,1)
(25,53,1)
(3,17,1)
(54,36,1)
(17,50,1)
(25,49,1)
(23,55,1)
(35,27,1)
(28,52,1)
(8,10,1)
(9,14,1)
(37,0,1)
(12,25,1)
(53,35,1)
(14,54,1)
(37,13,1)
(41,56,2)
(3,17,2)
(32,56,2)
(10,3,2)
(37,13,2)
(56,56,2)
(34,56,2)
(25,56,2)
(23,48,2)
(8,10,2)
(35,27,2)
(50,56,2)
(54,56,2)
(10,56,2)
(28,39,2)
(13,8,2)
(58,35,2)
(58,27,2)
(48,13,2)
(20,35,2)
(21,35,2)
(57,56,2)
(23,55,2)
(25,49,2)
(31,56,2)
(17,56,2)
(36,56,2)
(39,13,2)
(47,35,2)
(3,56,2)
(37,56,2)
(28,52,2)
(43,56,2)
(19,48,2)
(16,56,2)
(14,56,2)
(28,56,2)
(54,13,2)
(4,56,2)
(8,56,2)
(42,56,2)
(8,44,2)
(26,56,2)
(56,49,2)
(48,56,2)
(15,35,2)
(39,56,2)
(21,27,2)
(30,56,2)
(51,35,2)
(35,56,2)
(0,56,2)
(12,56,2)
(31,42,2)
(55,48,2)
(27,56,2)
(39,31,2)
(27,28,2)
(53,56,2)
(47,27,2)
(9,56,2)
(18,56,2)
(1,35,2)
(13,56,2)
-----------------------------------
(0,"A String")
(1,data)
(2,RET)
(3,100*sizeof(char)
(4,NULL)
(5,j)
(6,for(j = 0; j < 1; j++)
(7,data)
(8,(char *)
(9,data)
(10,malloc(100*sizeof(char)
(11,)
(12,j)
(13,* data = (char *)
(14,data)
(15,data)
(16,data)
(17,sizeof(char)
(18,100)
(19,1)
(20,"New String")
(21,printLine(data)
(22,)
(23,exit(-1)
(24,)
(25,j++)
(26,data)
(27,data = (char *)
(28,(char *)
(29,if (data == NULL)
(30,NULL)
(31,(130000)
(32,data)
(33,)
(34,data)
(35,data != NULL)
(36,data)
(37,strcpy(data, "A String")
(38,j)
(39,realloc(data, (130000)
(40,0)
(41,130000)
(42,sizeof(char)
(43,char)
(44,char *)
(45,)
(46,if (data != NULL)
(47,free(data)
(48,data == NULL)
(49,j = 0)
(50,char)
(51,data)
(52,char *)
(53,j)
(54,printLine(data)
(55,-1)
(56,j < 1)
(57,1)
(58,strcpy(data, "New String")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
