-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_13_bad()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_13_bad(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_13_bad()
CWE401_Memory_Leak__wchar_t_calloc_13_bad
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(23,18,0)
(17,14,0)
(28,2,0)
(31,7,0)
(5,19,0)
(7,32,0)
(13,18,0)
(13,20,0)
(6,11,0)
(11,24,0)
(19,26,0)
(20,9,0)
(16,7,0)
(1,26,0)
(29,2,0)
(3,32,0)
(30,20,0)
(9,12,0)
(0,30,0)
(26,19,0)
(12,9,0)
(4,20,0)
(19,9,0)
(24,27,0)
(33,30,0)
(10,32,0)
(21,14,0)
(9,20,0)
(22,13,0)
(24,11,0)
(20,18,0)
(9,19,0)
(15,32,0)
(19,26,1)
(11,6,1)
(21,17,1)
(13,20,1)
(8,2,1)
(9,12,1)
(1,5,1)
(29,14,1)
(22,30,1)
(2,28,1)
(22,24,1)
(0,33,1)
(30,0,1)
(20,9,1)
(33,20,1)
(17,7,1)
(29,13,1)
(4,14,1)
(30,20,1)
(24,11,1)
(6,30,1)
(5,4,1)
(16,31,1)
(9,19,1)
(7,16,1)
(13,22,1)
(26,1,1)
(14,21,1)
(28,29,1)
(30,14,2)
(20,9,2)
(30,20,2)
(24,11,2)
(1,14,2)
(19,14,2)
(19,26,2)
(22,14,2)
(5,14,2)
(9,19,2)
(6,30,2)
(9,12,2)
(11,30,2)
(24,30,2)
(26,14,2)
(9,14,2)
(13,20,2)
(13,14,2)
(4,14,2)
(0,14,2)
(33,14,2)
(20,14,2)
-----------------------------------
(0,NULL)
(1,wchar_t)
(2,GLOBAL_CONST_FIVE==5)
(3,if(GLOBAL_CONST_FIVE==5)
(4,data)
(5,100)
(6,1)
(7,data = NULL)
(8,RET)
(9,(wchar_t *)
(10,if(GLOBAL_CONST_FIVE==5)
(11,-1)
(12,wchar_t *)
(13,printWLine(data)
(14,GLOBAL_CONST_FIVE==5)
(15,data)
(16,NULL)
(17,GLOBAL_CONST_FIVE)
(18,)
(19,calloc(100, sizeof(wchar_t)
(20,data = (wchar_t *)
(21,5)
(22,data)
(23,if (data == NULL)
(24,exit(-1)
(25, sizeof(wchar_t)
(26,sizeof(wchar_t)
(27,)
(28,5)
(29,GLOBAL_CONST_FIVE)
(30,data == NULL)
(31,data)
(32,)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
