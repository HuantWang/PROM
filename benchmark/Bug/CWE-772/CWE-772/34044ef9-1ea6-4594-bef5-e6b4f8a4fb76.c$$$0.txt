-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_11_bad()
{
    if(globalReturnsTrue())
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
29,31
31,32
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
52,54
53,54
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
71,72
72,73
72,74
73,74
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
89,90
91,92
91,93
92,93
94,95
95,96
95,97
96,97
99,100
99,101
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
108,110
109,110
109,111
110,111
115,116
116,117
116,118
117,118
117,119
118,119
118,120
119,120
124,125
125,126
125,127
126,127
128,129
129,130
129,131
130,131
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,9,15,17,18,23,25,28,30,34,35,39,41,46,48,54,55,56,57,63,64,65,66,70,74,75,79,83,85,88,90,93,97,98,102,104,111,112,113,114,120,121,122,123,127,131,132,136,138
-----computeFrom-----
29,30
29,31
37,38
37,39
50,51
50,52
59,60
59,61
77,78
77,79
91,92
91,93
100,101
100,102
107,108
107,109
116,117
116,118
-----guardedBy-----
102,138
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_11_bad(){    if(globalReturnsTrue())    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_11_bad()
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_11_bad
{    if(globalReturnsTrue())    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }}
if(globalReturnsTrue())    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(72,47,0)
(62,56,0)
(50,45,0)
(41,45,0)
(36,13,0)
(27,76,0)
(33,46,0)
(54,24,0)
(68,67,0)
(74,71,0)
(58,65,0)
(73,59,0)
(28,17,0)
(74,3,0)
(23,47,0)
(1,20,0)
(53,46,0)
(48,78,0)
(20,1,0)
(66,1,0)
(53,66,0)
(73,71,0)
(22,43,0)
(16,31,0)
(3,55,0)
(38,16,0)
(37,71,0)
(38,34,0)
(8,25,0)
(78,24,0)
(16,38,0)
(12,13,0)
(56,71,0)
(34,38,0)
(13,71,0)
(1,56,0)
(9,68,0)
(72,5,0)
(34,17,0)
(60,18,0)
(77,63,0)
(40,73,0)
(32,68,0)
(35,25,0)
(3,74,0)
(39,74,0)
(10,68,0)
(35,56,0)
(76,7,0)
(43,22,0)
(55,68,0)
(25,35,0)
(11,68,0)
(7,46,0)
(16,71,0)
(22,33,0)
(24,66,0)
(51,9,0)
(59,73,0)
(66,68,0)
(15,59,0)
(2,74,0)
(45,76,0)
(4,63,0)
(49,66,0)
(52,58,0)
(76,45,0)
(19,7,0)
(29,43,0)
(71,68,0)
(0,46,0)
(17,34,0)
(43,66,0)
(13,58,0)
(24,78,0)
(33,22,0)
(78,0,0)
(30,71,0)
(42,43,0)
(71,16,0)
(58,13,0)
(47,72,0)
(65,68,0)
(59,9,0)
(1,66,0)
(55,3,0)
(57,65,0)
(31,16,0)
(26,53,0)
(45,66,0)
(21,73,0)
(6,34,0)
(63,66,0)
(56,35,0)
(56,1,0)
(75,24,0)
(61,0,0)
(44,37,0)
(70,35,0)
(69,37,0)
(13,71,1)
(7,19,1)
(8,70,1)
(15,73,1)
(54,75,1)
(59,15,1)
(34,17,1)
(2,39,1)
(36,72,1)
(61,78,1)
(14,63,1)
(66,1,1)
(75,63,1)
(14,53,1)
(21,40,1)
(33,22,1)
(26,33,1)
(56,71,1)
(73,21,1)
(38,34,1)
(78,24,1)
(0,61,1)
(45,50,1)
(4,66,1)
(58,52,1)
(73,71,1)
(42,29,1)
(30,64,1)
(76,27,1)
(28,6,1)
(22,43,1)
(44,69,1)
(39,9,1)
(58,13,1)
(16,38,1)
(19,76,1)
(6,30,1)
(29,7,1)
(24,66,1)
(12,36,1)
(48,24,1)
(25,8,1)
(74,71,1)
(47,23,1)
(77,4,1)
(16,31,1)
(74,2,1)
(49,55,1)
(78,48,1)
(1,56,1)
(50,41,1)
(76,45,1)
(17,28,1)
(63,66,1)
(13,12,1)
(14,64,1)
(59,73,1)
(41,0,1)
(65,57,1)
(53,26,1)
(27,45,1)
(62,49,1)
(52,13,1)
(51,59,1)
(43,42,1)
(56,35,1)
(57,58,1)
(40,65,1)
(70,62,1)
(23,37,1)
(53,66,1)
(35,25,1)
(71,16,1)
(1,20,1)
(55,3,1)
(45,66,1)
(43,66,1)
(3,74,1)
(36,37,1)
(37,71,1)
(63,77,1)
(24,54,1)
(69,71,1)
(72,47,1)
(9,51,1)
(37,44,1)
(16,38,2)
(24,63,2)
(6,64,2)
(34,17,2)
(56,64,2)
(2,64,2)
(9,64,2)
(57,64,2)
(78,24,2)
(35,25,2)
(56,35,2)
(74,71,2)
(52,64,2)
(22,63,2)
(16,31,2)
(73,71,2)
(44,64,2)
(13,71,2)
(1,56,2)
(72,47,2)
(40,64,2)
(66,1,2)
(63,64,2)
(3,74,2)
(33,63,2)
(27,63,2)
(53,63,2)
(7,63,2)
(28,64,2)
(71,16,2)
(21,64,2)
(55,64,2)
(76,63,2)
(49,64,2)
(39,64,2)
(72,37,2)
(45,66,2)
(51,64,2)
(53,66,2)
(19,63,2)
(66,64,2)
(47,37,2)
(30,64,2)
(61,63,2)
(37,64,2)
(70,64,2)
(17,64,2)
(36,64,2)
(76,45,2)
(71,64,2)
(63,66,2)
(50,63,2)
(59,73,2)
(58,64,2)
(16,64,2)
(62,64,2)
(74,64,2)
(58,13,2)
(59,64,2)
(56,71,2)
(75,63,2)
(54,63,2)
(1,64,2)
(41,63,2)
(42,63,2)
(43,66,2)
(78,63,2)
(12,64,2)
(65,64,2)
(23,37,2)
(38,34,2)
(3,64,2)
(33,22,2)
(37,71,2)
(35,64,2)
(34,64,2)
(8,64,2)
(24,66,2)
(73,64,2)
(22,43,2)
(13,64,2)
(26,63,2)
(55,3,2)
(69,64,2)
(38,64,2)
(43,63,2)
(15,64,2)
(1,20,2)
(29,63,2)
(77,64,2)
(45,63,2)
(48,63,2)
(0,63,2)
(25,64,2)
(4,64,2)
-----------------------------------
(0,data[0].intOne = 1)
(1,(twoIntsStruct *)
(2,0)
(3,&data[0])
(4,data)
(5,)
(6,100)
(7,data[0].intTwo = 1)
(8,twoIntsStruct)
(9,data[0].intTwo = 0)
(10,data)
(11,if (data != NULL)
(12,0)
(13,data[0])
(14,RET)
(15,intTwo)
(16,(twoIntsStruct *)
(17,sizeof(twoIntsStruct)
(18,)
(19,1)
(20,twoIntsStruct *)
(21,0)
(22,&data[0])
(23,1)
(24,data[0])
(25,sizeof(twoIntsStruct)
(26,data)
(27,intTwo)
(28,twoIntsStruct)
(29,data)
(30,data)
(31,twoIntsStruct *)
(32,if (data == NULL)
(33,printStructLine(&data[0])
(34,100*sizeof(twoIntsStruct)
(35,(130000)
(36,data)
(37,data == NULL)
(38,malloc(100*sizeof(twoIntsStruct)
(39,data)
(40,data)
(41,data)
(42,0)
(43,data[0])
(44,NULL)
(45,data[0])
(46,)
(47,-1)
(48,intOne)
(49,data)
(50,0)
(51,0)
(52,intOne)
(53,free(data)
(54,0)
(55,printStructLine(&data[0])
(56,realloc(data, (130000)
(57,0)
(58,data[0].intOne)
(59,data[0].intTwo)
(60,if(globalReturnsTrue()
(61,1)
(62,data)
(63,data != NULL)
(64,globalReturnsTrue()
(65,data[0].intOne = 0)
(66,data = (twoIntsStruct *)
(67,)
(68,)
(69,data)
(70,130000)
(71,* data = (twoIntsStruct *)
(72,exit(-1)
(73,data[0])
(74,data[0])
(75,data)
(76,data[0].intTwo)
(77,NULL)
(78,data[0].intOne)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
