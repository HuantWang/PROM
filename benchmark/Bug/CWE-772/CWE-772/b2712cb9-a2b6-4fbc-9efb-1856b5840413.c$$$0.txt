-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_03_bad()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
70,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,67,68,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_03_bad(){    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_03_bad()
CWE401_Memory_Leak__int_malloc_03_bad
{    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,27,0)
(2,20,0)
(31,27,0)
(1,35,0)
(0,8,0)
(12,28,0)
(39,38,0)
(5,38,0)
(28,12,0)
(20,30,0)
(11,38,0)
(23,31,0)
(12,30,0)
(28,20,0)
(23,8,0)
(24,23,0)
(14,19,0)
(27,10,0)
(25,2,0)
(20,27,0)
(4,11,0)
(35,20,0)
(34,15,0)
(15,13,0)
(7,6,0)
(16,21,0)
(26,28,0)
(35,21,0)
(29,11,0)
(18,6,0)
(40,28,0)
(32,34,0)
(3,35,0)
(9,19,0)
(37,38,0)
(28,21,0)
(15,34,0)
(21,30,0)
(36,2,0)
(27,31,0)
(33,30,0)
(17,20,0)
(8,23,0)
(31,23,0)
(27,20,0)
(35,3,1)
(2,20,1)
(22,19,1)
(26,21,1)
(14,12,1)
(18,11,1)
(21,16,1)
(4,29,1)
(1,2,1)
(28,40,1)
(28,20,1)
(28,21,1)
(3,1,1)
(1,15,1)
(32,2,1)
(34,32,1)
(12,28,1)
(9,14,1)
(40,26,1)
(36,20,1)
(14,6,1)
(17,6,1)
(7,18,1)
(6,7,1)
(24,17,1)
(2,25,1)
(0,24,1)
(20,27,1)
(16,35,1)
(27,31,1)
(19,9,1)
(31,23,1)
(27,10,1)
(35,20,1)
(23,8,1)
(8,0,1)
(25,36,1)
(11,4,1)
(15,34,1)
(32,2,2)
(27,31,2)
(27,10,2)
(2,6,2)
(23,8,2)
(0,6,2)
(31,6,2)
(31,23,2)
(1,6,2)
(12,28,2)
(17,6,2)
(2,20,2)
(35,6,2)
(20,27,2)
(8,6,2)
(12,6,2)
(28,6,2)
(26,6,2)
(40,6,2)
(28,21,2)
(25,6,2)
(35,20,2)
(28,20,2)
(15,2,2)
(15,34,2)
(24,6,2)
(20,6,2)
(34,2,2)
(36,6,2)
(21,6,2)
(23,6,2)
(27,6,2)
(16,6,2)
(3,6,2)
-----------------------------------
(0,int)
(1,data)
(2,data == NULL)
(3,0)
(4,NULL)
(5,if(5==5)
(6,5==5)
(7,5)
(8,sizeof(int)
(9,5)
(10,int *)
(11,data = NULL)
(12,printIntLine(data[0])
(13,)
(14,5)
(15,exit(-1)
(16,5)
(17,data)
(18,5)
(19,5==5)
(20,data = (int *)
(21,data[0] = 5)
(22,RET)
(23,100*sizeof(int)
(24,100)
(25,NULL)
(26,data)
(27,(int *)
(28,data[0])
(29,data)
(30,)
(31,malloc(100*sizeof(int)
(32,1)
(33,if (data == NULL)
(34,-1)
(35,data[0])
(36,data)
(37,data)
(38,)
(39,if(5==5)
(40,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
