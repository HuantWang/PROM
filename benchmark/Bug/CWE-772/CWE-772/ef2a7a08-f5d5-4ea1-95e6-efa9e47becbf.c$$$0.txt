-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_17_bad()
{
    int i,j;
    wchar_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
71,74
72,73
74,75
77,78
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
93,94
94,95
96,97
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,67,69,73,75,76,80,82,87,88,91,92,95,97
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
58,59
58,60
85,86
85,87
89,90
89,91
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_17_bad(){    int i,j;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_17_bad()
CWE401_Memory_Leak__wchar_t_malloc_17_bad
{    int i,j;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(42,27,0)
(13,19,0)
(44,35,0)
(40,23,0)
(0,22,0)
(34,36,0)
(10,22,0)
(11,21,0)
(19,6,0)
(2,1,0)
(1,22,0)
(33,7,0)
(4,19,0)
(8,4,0)
(43,22,0)
(9,45,0)
(37,1,0)
(35,6,0)
(38,45,0)
(28,30,0)
(12,15,0)
(26,22,0)
(14,12,0)
(36,45,0)
(29,31,0)
(17,9,0)
(19,30,0)
(29,7,0)
(30,28,0)
(39,22,0)
(12,23,0)
(21,27,0)
(30,15,0)
(3,6,0)
(32,27,0)
(30,19,0)
(23,12,0)
(41,9,0)
(7,29,0)
(35,19,0)
(18,4,0)
(16,20,0)
(25,20,0)
(20,27,0)
(15,12,0)
(24,45,0)
(15,30,0)
(44,4,1)
(12,23,1)
(16,21,1)
(20,25,1)
(42,9,1)
(36,34,1)
(29,7,1)
(4,19,1)
(20,27,1)
(23,40,1)
(32,42,1)
(24,1,1)
(38,24,1)
(4,18,1)
(14,13,1)
(35,44,1)
(16,27,1)
(36,45,1)
(30,28,1)
(41,45,1)
(45,38,1)
(9,17,1)
(44,29,1)
(34,35,1)
(19,30,1)
(21,27,1)
(8,19,1)
(11,20,1)
(15,12,1)
(21,11,1)
(7,33,1)
(18,8,1)
(13,9,1)
(40,14,1)
(1,37,1)
(25,16,1)
(33,4,1)
(35,19,1)
(30,15,1)
(27,32,1)
(37,2,1)
(9,45,1)
(41,36,1)
(5,20,1)
(17,41,1)
(19,9,2)
(25,20,2)
(29,4,2)
(41,9,2)
(44,9,2)
(14,9,2)
(12,9,2)
(17,9,2)
(11,20,2)
(4,9,2)
(20,27,2)
(20,20,2)
(30,28,2)
(33,4,2)
(36,9,2)
(34,9,2)
(16,20,2)
(21,27,2)
(30,9,2)
(9,9,2)
(13,9,2)
(12,23,2)
(19,30,2)
(40,9,2)
(35,9,2)
(23,9,2)
(21,20,2)
(9,45,2)
(4,19,2)
(8,9,2)
(36,45,2)
(15,9,2)
(29,7,2)
(35,19,2)
(30,15,2)
(7,4,2)
(18,9,2)
(15,12,2)
-----------------------------------
(0,j)
(1,data = NULL)
(2,data)
(3,if (data == NULL)
(4,data == NULL)
(5,RET)
(6,)
(7,-1)
(8,data)
(9,i < 1)
(10,for(i = 0; i < 1; i++)
(11,j)
(12,100*sizeof(wchar_t)
(13,data)
(14,100)
(15,malloc(100*sizeof(wchar_t)
(16,j)
(17,1)
(18,NULL)
(19,data = (wchar_t *)
(20,j < 1)
(21,j++)
(22,)
(23,sizeof(wchar_t)
(24,i)
(25,1)
(26,for(j = 0; j < 1; j++)
(27,j = 0)
(28,wchar_t *)
(29,exit(-1)
(30,(wchar_t *)
(31,)
(32,0)
(33,1)
(34,i)
(35,printWLine(data)
(36,i++)
(37,NULL)
(38,0)
(39,i)
(40,wchar_t)
(41,i)
(42,j)
(43,data)
(44,data)
(45,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
