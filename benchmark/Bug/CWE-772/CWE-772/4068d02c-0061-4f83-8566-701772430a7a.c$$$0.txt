-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_02_bad()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
69,70
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,57,59,60,64,66,68,70
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_02_bad(){    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_02_bad()
CWE401_Memory_Leak__wchar_t_realloc_02_bad
{    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,10,0)
(2,28,0)
(20,24,0)
(3,28,0)
(5,15,0)
(11,8,0)
(8,19,0)
(26,22,0)
(19,8,0)
(12,5,0)
(4,15,0)
(1,19,0)
(22,26,0)
(28,8,0)
(26,14,0)
(23,24,0)
(5,2,0)
(4,5,0)
(8,28,0)
(2,30,0)
(10,5,0)
(29,24,0)
(27,20,0)
(9,10,0)
(25,4,0)
(28,20,0)
(6,24,0)
(30,2,0)
(18,20,0)
(28,2,0)
(21,15,0)
(16,22,0)
(2,5,0)
(26,22,1)
(12,0,1)
(11,3,1)
(4,25,1)
(16,10,1)
(0,20,1)
(19,1,1)
(2,28,1)
(7,4,1)
(9,17,1)
(1,11,1)
(17,5,1)
(10,9,1)
(25,26,1)
(20,18,1)
(28,8,1)
(2,30,1)
(18,27,1)
(8,19,1)
(25,10,1)
(13,7,1)
(10,5,1)
(22,16,1)
(3,12,1)
(5,2,1)
(4,5,1)
(28,20,1)
(7,0,1)
(26,10,2)
(2,0,2)
(1,0,2)
(28,0,2)
(11,0,2)
(2,28,2)
(8,0,2)
(5,0,2)
(16,10,2)
(12,0,2)
(28,20,2)
(3,0,2)
(10,0,2)
(8,19,2)
(5,2,2)
(26,22,2)
(19,0,2)
(10,5,2)
(28,8,2)
(22,10,2)
(4,5,2)
(2,30,2)
(4,0,2)
(25,0,2)
(17,0,2)
(9,0,2)
-----------------------------------
(0,1)
(1,wchar_t)
(2,(wchar_t *)
(3,data)
(4,printWLine(data)
(5,data = (wchar_t *)
(6,if(1)
(7,1)
(8,100*sizeof(wchar_t)
(9,NULL)
(10,data == NULL)
(11,100)
(12,data)
(13,RET)
(14,)
(15,)
(16,1)
(17,data)
(18,NULL)
(19,sizeof(wchar_t)
(20,data = NULL)
(21,if (data == NULL)
(22,-1)
(23,data)
(24,)
(25,data)
(26,exit(-1)
(27,data)
(28,realloc(data, 100*sizeof(wchar_t)
(29,if(1)
(30,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
