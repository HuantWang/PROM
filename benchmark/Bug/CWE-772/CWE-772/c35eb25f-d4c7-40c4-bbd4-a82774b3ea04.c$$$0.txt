-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_07_bad()
{
    int * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
70,72
71,72
74,75
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,72,73,75
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_07_bad(){    int * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_07_bad()
CWE401_Memory_Leak__int_calloc_07_bad
{    int * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(23,27,0)
(22,7,0)
(14,7,0)
(1,14,0)
(14,2,0)
(16,9,0)
(34,20,0)
(9,34,0)
(31,22,0)
(8,19,0)
(28,5,0)
(17,1,0)
(6,19,0)
(40,3,0)
(25,35,0)
(1,5,0)
(29,22,0)
(11,4,0)
(39,35,0)
(26,19,0)
(35,34,0)
(11,36,0)
(4,11,0)
(2,14,0)
(18,4,0)
(35,25,0)
(5,1,0)
(27,19,0)
(7,14,0)
(14,1,0)
(32,37,0)
(15,7,0)
(30,34,0)
(25,20,0)
(7,20,0)
(21,27,0)
(38,37,0)
(35,7,0)
(9,7,0)
(12,3,0)
(13,9,0)
(33,20,0)
(24,35,0)
(12,27,1)
(34,30,1)
(30,9,1)
(13,16,1)
(31,29,1)
(16,22,1)
(21,23,1)
(5,28,1)
(35,34,1)
(35,39,1)
(39,24,1)
(4,18,1)
(16,11,1)
(29,7,1)
(38,25,1)
(24,34,1)
(28,17,1)
(9,7,1)
(32,38,1)
(17,15,1)
(11,4,1)
(22,31,1)
(25,35,1)
(22,7,1)
(18,22,1)
(14,1,1)
(14,2,1)
(1,5,1)
(35,7,1)
(40,12,1)
(3,40,1)
(15,3,1)
(27,21,1)
(7,14,1)
(9,13,1)
(10,37,1)
(38,3,1)
(37,32,1)
(1,3,2)
(1,5,2)
(17,3,2)
(9,3,2)
(39,3,2)
(16,3,2)
(28,3,2)
(5,3,2)
(18,22,2)
(14,1,2)
(11,4,2)
(14,3,2)
(35,34,2)
(13,3,2)
(35,7,2)
(9,7,2)
(4,22,2)
(11,22,2)
(15,3,2)
(14,2,2)
(24,3,2)
(35,3,2)
(25,35,2)
(22,3,2)
(7,14,2)
(22,7,2)
(7,3,2)
(29,3,2)
(25,3,2)
(31,3,2)
(30,3,2)
(34,3,2)
-----------------------------------
(0, sizeof(int)
(1,calloc(100, sizeof(int)
(2,int *)
(3,staticFive==5)
(4,-1)
(5,sizeof(int)
(6,if(staticFive==5)
(7,data = (int *)
(8,if(staticFive==5)
(9,data[0])
(10,RET)
(11,exit(-1)
(12,staticFive)
(13,0)
(14,(int *)
(15,data)
(16,data)
(17,100)
(18,1)
(19,)
(20,)
(21,NULL)
(22,data == NULL)
(23,data)
(24,data)
(25,printIntLine(data[0])
(26,data)
(27,data = NULL)
(28,int)
(29,data)
(30,5)
(31,NULL)
(32,5)
(33,if (data == NULL)
(34,data[0] = 5)
(35,data[0])
(36,)
(37,staticFive==5)
(38,staticFive)
(39,0)
(40,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
