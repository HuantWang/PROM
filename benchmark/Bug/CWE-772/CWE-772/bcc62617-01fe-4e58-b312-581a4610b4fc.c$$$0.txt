-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_15_bad()
{
    int * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
73,74
74,75
74,76
75,76
79,80
79,81
81,82
81,83
81,84
81,85
81,86
81,87
82,83
87,88
88,89
88,90
89,90
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,38,41,42,46,48,53,55,60,61,62,66,69,70,71,72,76,77,78,80,83,84,85,86,90,91,92
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_15_bad(){    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__int_realloc_15_bad()
CWE401_Memory_Leak__int_realloc_15_bad
{    int * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(1,14,0)
(39,6,0)
(20,14,0)
(6,46,0)
(50,33,0)
(34,2,0)
(44,47,0)
(32,14,0)
(25,19,0)
(17,15,0)
(16,14,0)
(30,14,0)
(21,38,0)
(41,17,0)
(4,18,0)
(9,46,0)
(49,13,0)
(40,38,0)
(17,33,0)
(43,46,0)
(34,13,0)
(15,38,0)
(13,33,0)
(3,34,0)
(7,46,0)
(19,11,0)
(23,14,0)
(37,38,0)
(5,15,0)
(35,46,0)
(8,34,0)
(13,14,0)
(10,17,0)
(24,28,0)
(28,31,0)
(26,10,0)
(0,2,0)
(18,13,0)
(19,2,0)
(11,19,0)
(33,13,0)
(33,17,0)
(47,10,0)
(19,13,0)
(27,15,0)
(28,24,0)
(36,24,0)
(48,18,0)
(17,10,0)
(11,14,0)
(10,47,0)
(12,23,0)
(2,14,0)
(33,50,0)
(29,19,0)
(22,9,1)
(2,0,1)
(45,1,1)
(19,13,1)
(6,39,1)
(19,2,1)
(34,13,1)
(44,26,1)
(34,3,1)
(28,24,1)
(9,6,1)
(26,41,1)
(16,23,1)
(17,10,1)
(19,29,1)
(3,8,1)
(45,16,1)
(8,18,1)
(1,11,1)
(15,5,1)
(18,4,1)
(17,15,1)
(48,13,1)
(22,7,1)
(12,42,1)
(10,47,1)
(0,34,1)
(33,17,1)
(47,44,1)
(33,50,1)
(11,19,1)
(39,45,1)
(7,45,1)
(23,12,1)
(24,36,1)
(8,28,1)
(18,13,1)
(36,18,1)
(29,25,1)
(49,42,1)
(13,33,1)
(25,2,1)
(41,49,1)
(4,48,1)
(5,27,1)
(42,15,1)
(19,13,2)
(1,42,2)
(17,42,2)
(13,42,2)
(13,33,2)
(18,42,2)
(33,50,2)
(39,45,2)
(11,19,2)
(7,45,2)
(10,47,2)
(23,42,2)
(34,42,2)
(41,42,2)
(2,42,2)
(47,42,2)
(18,13,2)
(10,42,2)
(4,42,2)
(17,15,2)
(16,42,2)
(36,18,2)
(33,42,2)
(28,24,2)
(3,42,2)
(0,42,2)
(19,2,2)
(9,45,2)
(33,17,2)
(6,45,2)
(28,18,2)
(26,42,2)
(8,42,2)
(25,42,2)
(12,42,2)
(44,42,2)
(49,42,2)
(19,42,2)
(48,42,2)
(11,42,2)
(17,10,2)
(24,18,2)
(29,42,2)
(34,13,2)
-----------------------------------
(0,5)
(1,break;)
(2,data[0] = 5)
(3,0)
(4,NULL)
(5,NULL)
(6,printLine("Benign, fixed string")
(7,break;)
(8,data)
(9,break;)
(10,100*sizeof(int)
(11,printIntLine(data[0])
(12,"Benign, fixed string")
(13,data = (int *)
(14,)
(15,data = NULL)
(16,break;)
(17,realloc(data, 100*sizeof(int)
(18,data == NULL)
(19,data[0])
(20,case 6:)
(21,switch(7)
(22,RET)
(23,printLine("Benign, fixed string")
(24,-1)
(25,data)
(26,100)
(27,data)
(28,exit(-1)
(29,0)
(30,if (data == NULL)
(31,)
(32,default:)
(33,(int *)
(34,data[0])
(35,case 7:)
(36,1)
(37,data)
(38,)
(39,"Benign, fixed string")
(40,switch(6)
(41,data)
(42,6)
(43,default:)
(44,int)
(45,7)
(46,)
(47,sizeof(int)
(48,data)
(49,data)
(50,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
