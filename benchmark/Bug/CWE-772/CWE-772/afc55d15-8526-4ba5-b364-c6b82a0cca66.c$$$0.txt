-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_16_bad()
{
    while(1)
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
                free(data);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
9,16
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
50,52
51,52
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
84,87
85,86
87,88
89,90
89,91
90,91
92,93
93,94
93,95
94,95
97,98
97,99
98,99
98,100
99,100
101,102
103,104
103,105
103,106
103,107
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
122,123
123,124
123,125
124,125
126,127
127,128
127,129
128,129
131,132
132,133
132,134
133,134
135,136
-----nextToken-----
2,4,7,13,15,16,21,23,26,28,32,33,37,39,44,46,52,53,54,55,61,62,63,64,68,72,73,77,81,83,86,88,91,95,96,100,102,109,110,111,112,118,119,120,121,125,129,130,134,136,137
-----computeFrom-----
27,28
27,29
35,36
35,37
48,49
48,50
57,58
57,59
75,76
75,77
89,90
89,91
98,99
98,100
105,106
105,107
114,115
114,116
-----guardedBy-----
100,136
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_16_bad(){    while(1)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_16_bad()
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_16_bad
{    while(1)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }        break;    }}
while(1)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }        break;    }
1
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }        break;    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(74,78,0)
(63,50,0)
(21,55,0)
(43,70,0)
(22,65,0)
(70,47,0)
(6,61,0)
(46,23,0)
(74,45,0)
(38,55,0)
(73,39,0)
(23,46,0)
(32,77,0)
(4,75,0)
(61,29,0)
(29,45,0)
(58,73,0)
(46,79,0)
(39,17,0)
(31,38,0)
(66,16,0)
(42,15,0)
(17,39,0)
(69,39,0)
(40,76,0)
(61,65,0)
(5,0,0)
(73,55,0)
(57,17,0)
(10,55,0)
(20,24,0)
(50,62,0)
(44,55,0)
(13,53,0)
(16,54,0)
(68,55,0)
(43,78,0)
(19,47,0)
(9,29,0)
(1,24,0)
(32,48,0)
(7,30,0)
(8,53,0)
(49,70,0)
(65,61,0)
(65,78,0)
(33,79,0)
(18,12,0)
(77,32,0)
(79,78,0)
(32,78,0)
(39,69,0)
(0,5,0)
(64,44,0)
(64,12,0)
(54,38,0)
(23,45,0)
(12,64,0)
(79,46,0)
(16,73,0)
(55,15,0)
(25,43,0)
(56,54,0)
(72,34,0)
(28,43,0)
(0,77,0)
(60,79,0)
(41,12,0)
(3,50,0)
(47,45,0)
(77,73,0)
(37,16,0)
(75,57,0)
(51,65,0)
(34,7,0)
(78,55,0)
(52,62,0)
(39,73,0)
(2,5,0)
(57,75,0)
(78,32,0)
(62,68,0)
(50,73,0)
(44,64,0)
(24,78,0)
(35,77,0)
(77,0,0)
(12,73,0)
(53,73,0)
(36,57,0)
(7,34,0)
(54,16,0)
(71,74,0)
(26,0,0)
(48,32,0)
(14,78,0)
(17,57,0)
(11,55,0)
(70,43,0)
(59,68,0)
(62,50,0)
(59,62,1)
(53,13,1)
(77,0,1)
(16,73,1)
(47,19,1)
(35,14,1)
(58,67,1)
(54,16,1)
(1,20,1)
(49,43,1)
(74,78,1)
(29,9,1)
(24,1,1)
(65,78,1)
(66,68,1)
(75,4,1)
(18,38,1)
(4,36,1)
(68,59,1)
(6,65,1)
(9,61,1)
(7,34,1)
(2,26,1)
(78,32,1)
(62,52,1)
(28,24,1)
(77,73,1)
(64,12,1)
(8,73,1)
(71,23,1)
(63,3,1)
(65,51,1)
(50,63,1)
(46,79,1)
(62,50,1)
(50,73,1)
(39,17,1)
(39,69,1)
(54,56,1)
(37,66,1)
(57,75,1)
(72,53,1)
(74,71,1)
(56,16,1)
(5,2,1)
(70,43,1)
(36,58,1)
(52,50,1)
(24,78,1)
(12,73,1)
(3,53,1)
(43,78,1)
(0,5,1)
(79,78,1)
(23,46,1)
(14,44,1)
(38,31,1)
(26,35,1)
(32,48,1)
(25,28,1)
(60,29,1)
(73,39,1)
(17,57,1)
(79,33,1)
(27,42,1)
(27,67,1)
(61,6,1)
(53,73,1)
(16,37,1)
(61,65,1)
(12,41,1)
(41,18,1)
(34,72,1)
(22,47,1)
(31,54,1)
(19,70,1)
(42,24,1)
(20,78,1)
(51,22,1)
(32,77,1)
(3,7,1)
(70,49,1)
(13,8,1)
(42,74,1)
(33,60,1)
(43,25,1)
(44,64,1)
(7,53,2)
(41,67,2)
(68,67,2)
(46,79,2)
(46,24,2)
(2,67,2)
(36,67,2)
(63,67,2)
(54,16,2)
(32,77,2)
(12,67,2)
(16,67,2)
(53,73,2)
(29,24,2)
(62,50,2)
(16,73,2)
(64,12,2)
(79,24,2)
(47,24,2)
(50,67,2)
(39,17,2)
(61,65,2)
(20,67,2)
(57,75,2)
(4,67,2)
(18,67,2)
(44,67,2)
(77,67,2)
(75,67,2)
(25,24,2)
(23,24,2)
(33,24,2)
(74,78,2)
(71,24,2)
(65,78,2)
(79,78,2)
(57,67,2)
(52,67,2)
(78,32,2)
(62,67,2)
(9,24,2)
(61,24,2)
(51,24,2)
(17,67,2)
(54,67,2)
(32,48,2)
(32,67,2)
(17,57,2)
(77,0,2)
(24,78,2)
(49,24,2)
(24,67,2)
(73,67,2)
(19,24,2)
(70,43,2)
(8,67,2)
(39,67,2)
(73,39,2)
(43,78,2)
(26,67,2)
(6,24,2)
(28,24,2)
(1,67,2)
(14,67,2)
(74,24,2)
(31,67,2)
(65,24,2)
(37,67,2)
(12,73,2)
(60,24,2)
(58,67,2)
(56,67,2)
(39,69,2)
(77,73,2)
(66,67,2)
(22,24,2)
(44,64,2)
(78,67,2)
(64,67,2)
(13,67,2)
(72,53,2)
(70,24,2)
(35,67,2)
(0,67,2)
(23,46,2)
(50,73,2)
(7,34,2)
(59,67,2)
(0,5,2)
(43,24,2)
(34,53,2)
(53,67,2)
(38,67,2)
(5,67,2)
(42,67,2)
(3,67,2)
-----------------------------------
(0,(130000)
(1,NULL)
(2,twoIntsStruct)
(3,data)
(4,twoIntsStruct)
(5,sizeof(twoIntsStruct)
(6,intTwo)
(7,exit(-1)
(8,data)
(9,1)
(10,data)
(11,if (data != NULL)
(12,data[0])
(13,NULL)
(14,data)
(15,)
(16,data[0])
(17,malloc(100*sizeof(twoIntsStruct)
(18,data)
(19,1)
(20,data)
(21,if (data == NULL)
(22,data)
(23,printStructLine(&data[0])
(24,data != NULL)
(25,0)
(26,130000)
(27,RET)
(28,data)
(29,data[0].intTwo = 1)
(30,)
(31,0)
(32,(twoIntsStruct *)
(33,0)
(34,-1)
(35,data)
(36,100)
(37,0)
(38,data[0].intTwo = 0)
(39,(twoIntsStruct *)
(40,while(1)
(41,0)
(42,break;)
(43,data[0])
(44,printStructLine(&data[0])
(45,)
(46,&data[0])
(47,data[0].intOne = 1)
(48,twoIntsStruct *)
(49,intOne)
(50,data[0])
(51,0)
(52,intOne)
(53,data == NULL)
(54,data[0].intTwo)
(55,)
(56,intTwo)
(57,100*sizeof(twoIntsStruct)
(58,data)
(59,0)
(60,data)
(61,data[0].intTwo)
(62,data[0].intOne)
(63,0)
(64,&data[0])
(65,data[0])
(66,data)
(67,1)
(68,data[0].intOne = 0)
(69,twoIntsStruct *)
(70,data[0].intOne)
(71,data)
(72,1)
(73,* data = (twoIntsStruct *)
(74,free(data)
(75,sizeof(twoIntsStruct)
(76,)
(77,realloc(data, (130000)
(78,data = (twoIntsStruct *)
(79,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
