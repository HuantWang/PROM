-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_17_bad()
{
    int i,j;
    twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
53,54
55,56
55,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
94,95
94,96
95,96
97,98
98,99
98,100
99,100
102,103
102,104
102,105
102,106
103,104
104,105
104,106
105,106
108,109
108,110
109,110
112,113
113,114
115,116
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,54,56,60,61,65,67,72,74,80,81,82,83,89,90,91,92,96,100,101,106,107,110,111,114,116
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
55,56
55,57
63,64
63,65
76,77
76,78
85,86
85,87
104,105
104,106
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_17_bad(){    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_17_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_17_bad
{    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,62,0)
(10,26,0)
(53,26,0)
(31,8,0)
(44,7,0)
(48,28,0)
(22,25,0)
(6,28,0)
(12,8,0)
(7,8,0)
(13,7,0)
(58,46,0)
(16,2,0)
(59,9,0)
(27,42,0)
(40,18,0)
(53,54,0)
(36,42,0)
(0,16,0)
(33,9,0)
(26,53,0)
(55,2,0)
(5,26,0)
(54,9,0)
(63,51,0)
(14,15,0)
(39,53,0)
(41,52,0)
(24,45,0)
(18,2,0)
(4,22,0)
(43,11,0)
(19,46,0)
(52,2,0)
(11,28,0)
(0,49,0)
(25,22,0)
(45,2,0)
(3,59,0)
(63,29,0)
(38,51,0)
(34,15,0)
(18,22,0)
(50,62,0)
(2,45,0)
(30,15,0)
(21,52,0)
(35,46,0)
(60,8,0)
(15,2,0)
(17,14,0)
(16,0,0)
(45,18,0)
(56,16,0)
(2,9,0)
(15,14,0)
(18,42,0)
(49,0,0)
(18,45,0)
(61,46,0)
(26,2,0)
(22,18,0)
(49,9,0)
(37,12,0)
(51,63,0)
(47,16,0)
(62,28,0)
(23,46,0)
(42,46,0)
(45,24,0)
(20,54,0)
(32,25,0)
(14,59,0)
(31,62,1)
(40,55,1)
(39,26,1)
(60,31,1)
(37,7,1)
(15,34,1)
(26,2,1)
(59,3,1)
(54,20,1)
(43,49,1)
(42,36,1)
(6,42,1)
(25,32,1)
(13,12,1)
(1,50,1)
(52,41,1)
(21,2,1)
(26,5,1)
(17,15,1)
(32,4,1)
(11,43,1)
(16,56,1)
(4,40,1)
(20,53,1)
(45,24,1)
(51,38,1)
(18,42,1)
(7,8,1)
(18,22,1)
(11,28,1)
(57,7,1)
(41,21,1)
(18,2,1)
(55,62,1)
(13,8,1)
(30,52,1)
(50,28,1)
(48,6,1)
(63,51,1)
(49,0,1)
(7,44,1)
(8,60,1)
(12,8,1)
(10,59,1)
(15,2,1)
(36,27,1)
(47,54,1)
(30,63,1)
(62,28,1)
(16,2,1)
(22,25,1)
(34,30,1)
(5,10,1)
(12,37,1)
(14,17,1)
(44,13,1)
(38,52,1)
(50,11,1)
(52,2,1)
(28,48,1)
(45,18,1)
(14,15,1)
(0,16,1)
(53,39,1)
(56,47,1)
(53,26,1)
(2,45,1)
(3,14,1)
(62,1,1)
(14,62,2)
(16,2,2)
(43,62,2)
(4,62,2)
(14,15,2)
(52,62,2)
(7,7,2)
(0,62,2)
(51,52,2)
(11,62,2)
(62,62,2)
(34,62,2)
(25,62,2)
(22,25,2)
(49,0,2)
(18,42,2)
(5,62,2)
(50,62,2)
(3,62,2)
(32,62,2)
(47,62,2)
(18,2,2)
(54,62,2)
(2,62,2)
(10,62,2)
(63,51,2)
(21,62,2)
(37,7,2)
(17,62,2)
(44,7,2)
(18,62,2)
(49,62,2)
(2,45,2)
(30,62,2)
(56,62,2)
(7,8,2)
(53,26,2)
(40,62,2)
(20,62,2)
(53,62,2)
(45,18,2)
(52,2,2)
(18,22,2)
(55,62,2)
(22,62,2)
(12,7,2)
(15,62,2)
(0,16,2)
(12,8,2)
(63,52,2)
(38,52,2)
(11,28,2)
(26,2,2)
(13,7,2)
(45,24,2)
(39,62,2)
(26,62,2)
(45,62,2)
(59,62,2)
(41,62,2)
(16,62,2)
(15,2,2)
(62,28,2)
(1,62,2)
-----------------------------------
(0,&data[0])
(1,1)
(2,data = (twoIntsStruct *)
(3,0)
(4,100)
(5,0)
(6,i)
(7,j < 1)
(8,j = 0)
(9,)
(10,data)
(11,i++)
(12,j++)
(13,j)
(14,data[0].intOne)
(15,data[0])
(16,data[0])
(17,intOne)
(18,realloc(data, 100*sizeof(twoIntsStruct)
(19,j)
(20,0)
(21,data)
(22,100*sizeof(twoIntsStruct)
(23,for(j = 0; j < 1; j++)
(24,twoIntsStruct *)
(25,sizeof(twoIntsStruct)
(26,data[0])
(27,data)
(28,i = 0)
(29,)
(30,data)
(31,j)
(32,twoIntsStruct)
(33,if (data == NULL)
(34,0)
(35,for(i = 0; i < 1; i++)
(36,NULL)
(37,j)
(38,1)
(39,intTwo)
(40,data)
(41,NULL)
(42,data = NULL)
(43,i)
(44,1)
(45,(twoIntsStruct *)
(46,)
(47,data)
(48,0)
(49,printStructLine(&data[0])
(50,i)
(51,-1)
(52,data == NULL)
(53,data[0].intTwo)
(54,data[0].intTwo = 0)
(55,data)
(56,0)
(57,RET)
(58,data)
(59,data[0].intOne = 0)
(60,0)
(61,i)
(62,i < 1)
(63,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
