-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_07_bad()
{
    char * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_07_bad(){    char * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_07_bad()
CWE401_Memory_Leak__char_calloc_07_bad
{    char * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,9,0)
(28,33,0)
(4,28,0)
(14,0,0)
(32,22,0)
(6,2,0)
(13,23,0)
(34,28,0)
(23,13,0)
(1,28,0)
(4,9,0)
(3,2,0)
(18,23,0)
(5,4,0)
(21,33,0)
(30,13,0)
(22,15,0)
(29,9,0)
(26,10,0)
(33,23,0)
(22,32,0)
(28,9,0)
(24,4,0)
(8,34,0)
(33,28,0)
(31,10,0)
(12,0,0)
(16,0,0)
(33,21,0)
(19,11,0)
(27,11,0)
(2,28,0)
(7,12,0)
(36,12,0)
(35,0,0)
(23,33,0)
(20,32,0)
(1,11,1)
(26,34,1)
(11,19,1)
(3,6,1)
(34,8,1)
(28,33,1)
(24,5,1)
(19,27,1)
(34,28,1)
(32,20,1)
(30,18,1)
(31,26,1)
(23,13,1)
(22,32,1)
(26,11,1)
(5,22,1)
(10,31,1)
(18,1,1)
(20,2,1)
(2,3,1)
(8,4,1)
(2,28,1)
(4,24,1)
(13,30,1)
(4,28,1)
(27,12,1)
(33,21,1)
(33,23,1)
(6,28,1)
(12,36,1)
(5,2,1)
(36,7,1)
(25,10,1)
(23,11,2)
(24,11,2)
(18,11,2)
(3,11,2)
(23,13,2)
(33,21,2)
(28,11,2)
(4,11,2)
(13,11,2)
(33,11,2)
(5,11,2)
(2,11,2)
(34,28,2)
(2,28,2)
(34,11,2)
(1,11,2)
(28,33,2)
(30,11,2)
(32,2,2)
(22,2,2)
(22,32,2)
(6,11,2)
(8,11,2)
(33,23,2)
(4,28,2)
(20,2,2)
-----------------------------------
(0,)
(1,data)
(2,data == NULL)
(3,NULL)
(4,strcpy(data, "A String")
(5,data)
(6,data)
(7,data)
(8,data)
(9,)
(10,staticFive==5)
(11,staticFive==5)
(12,data = NULL)
(13,sizeof(char)
(14,data)
(15,)
(16,if(staticFive==5)
(17, sizeof(char)
(18,100)
(19,5)
(20,1)
(21,char *)
(22,exit(-1)
(23,calloc(100, sizeof(char)
(24,"A String")
(25,RET)
(26,staticFive)
(27,staticFive)
(28,data = (char *)
(29,if (data == NULL)
(30,char)
(31,5)
(32,-1)
(33,(char *)
(34,printLine(data)
(35,if(staticFive==5)
(36,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
