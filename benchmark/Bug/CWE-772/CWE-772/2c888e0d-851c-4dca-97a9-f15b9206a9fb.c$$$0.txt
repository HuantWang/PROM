-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_16_bad()
{
    int * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
70,71
70,72
72,73
72,74
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,58,59,60,64,67,68,69,71,73,74
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_16_bad(){    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__int_realloc_16_bad()
CWE401_Memory_Leak__int_realloc_16_bad
{    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(37,38,0)
(30,4,0)
(25,14,0)
(11,31,0)
(1,3,0)
(18,2,0)
(5,2,0)
(32,12,0)
(40,20,0)
(24,33,0)
(13,21,0)
(13,29,0)
(6,33,0)
(9,31,0)
(23,15,0)
(8,4,0)
(39,3,0)
(35,28,0)
(25,12,0)
(9,5,0)
(33,38,0)
(0,2,0)
(17,9,0)
(25,38,0)
(38,2,0)
(9,38,0)
(4,30,0)
(34,20,0)
(19,30,0)
(3,20,0)
(36,20,0)
(14,25,0)
(12,25,0)
(22,21,0)
(33,31,0)
(12,3,0)
(26,15,0)
(4,12,0)
(7,9,0)
(38,25,0)
(21,13,0)
(15,38,0)
(5,9,0)
(31,2,0)
(12,4,0)
(5,9,1)
(11,33,1)
(7,31,1)
(39,1,1)
(37,27,1)
(9,17,1)
(10,0,1)
(24,13,1)
(6,24,1)
(12,3,1)
(9,31,1)
(31,11,1)
(16,10,1)
(32,37,1)
(22,15,1)
(21,22,1)
(16,35,1)
(13,21,1)
(9,38,1)
(26,38,1)
(10,27,1)
(15,38,1)
(25,14,1)
(8,32,1)
(30,19,1)
(23,26,1)
(33,38,1)
(35,10,1)
(17,7,1)
(0,5,1)
(12,4,1)
(27,3,1)
(38,25,1)
(25,12,1)
(24,15,1)
(19,8,1)
(3,39,1)
(33,6,1)
(15,23,1)
(4,30,1)
(23,27,2)
(33,27,2)
(9,38,2)
(4,30,2)
(9,27,2)
(15,38,2)
(19,27,2)
(21,15,2)
(15,27,2)
(5,27,2)
(12,27,2)
(38,25,2)
(30,27,2)
(17,27,2)
(13,21,2)
(12,3,2)
(8,27,2)
(7,27,2)
(22,15,2)
(0,27,2)
(5,9,2)
(25,14,2)
(32,27,2)
(12,4,2)
(11,27,2)
(6,27,2)
(35,10,2)
(25,12,2)
(24,27,2)
(26,27,2)
(9,31,2)
(4,27,2)
(37,27,2)
(25,27,2)
(31,27,2)
(33,38,2)
(38,27,2)
(13,15,2)
-----------------------------------
(0,break;)
(1,data)
(2,)
(3,data = NULL)
(4,100*sizeof(int)
(5,printIntLine(data[0])
(6,0)
(7,data)
(8,100)
(9,data[0])
(10,1)
(11,5)
(12,realloc(data, 100*sizeof(int)
(13,exit(-1)
(14,int *)
(15,data == NULL)
(16,RET)
(17,0)
(18,if (data == NULL)
(19,int)
(20,)
(21,-1)
(22,1)
(23,NULL)
(24,data)
(25,(int *)
(26,data)
(27,1)
(28,)
(29,)
(30,sizeof(int)
(31,data[0] = 5)
(32,data)
(33,data[0])
(34,while(1)
(35,break;)
(36,data)
(37,data)
(38,data = (int *)
(39,NULL)
(40,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
