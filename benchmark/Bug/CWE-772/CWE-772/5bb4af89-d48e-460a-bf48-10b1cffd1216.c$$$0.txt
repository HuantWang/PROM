-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_02_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
77,78
77,79
78,79
81,82
81,83
83,84
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,80,82,84
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_02_bad(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_02_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_02_bad
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(30,12,0)
(10,2,0)
(8,20,0)
(31,17,0)
(42,17,0)
(3,7,0)
(40,28,0)
(35,22,0)
(7,28,0)
(18,20,0)
(19,34,0)
(4,40,0)
(20,37,0)
(21,13,0)
(43,3,0)
(5,28,0)
(22,21,0)
(12,7,0)
(7,21,0)
(12,36,0)
(13,21,0)
(9,28,0)
(37,9,0)
(21,22,0)
(27,2,0)
(22,33,0)
(23,26,0)
(41,3,0)
(38,37,0)
(6,17,0)
(26,46,0)
(32,28,0)
(15,7,0)
(21,7,0)
(25,34,0)
(11,36,0)
(20,7,0)
(33,22,0)
(37,20,0)
(34,17,0)
(1,33,0)
(36,12,0)
(44,12,0)
(2,7,0)
(36,40,0)
(45,2,0)
(46,0,0)
(29,9,0)
(10,32,0)
(46,26,0)
(32,10,0)
(2,10,0)
(1,35,1)
(40,4,1)
(24,14,1)
(35,15,1)
(33,1,1)
(23,3,1)
(3,43,1)
(7,21,1)
(20,7,1)
(38,20,1)
(12,7,1)
(2,27,1)
(21,22,1)
(32,10,1)
(36,12,1)
(21,13,1)
(37,20,1)
(24,32,1)
(14,34,1)
(2,7,1)
(36,11,1)
(8,18,1)
(22,33,1)
(18,40,1)
(9,29,1)
(10,2,1)
(15,14,1)
(25,19,1)
(20,8,1)
(44,46,1)
(29,37,1)
(37,38,1)
(4,36,1)
(34,25,1)
(27,45,1)
(30,44,1)
(43,41,1)
(45,9,1)
(26,23,1)
(12,30,1)
(44,3,1)
(11,12,1)
(3,7,1)
(16,24,1)
(41,7,1)
(46,26,1)
(10,14,2)
(43,14,2)
(7,21,2)
(32,14,2)
(15,14,2)
(7,14,2)
(32,10,2)
(29,14,2)
(2,7,2)
(21,22,2)
(21,14,2)
(36,12,2)
(10,2,2)
(11,14,2)
(22,14,2)
(3,7,2)
(8,14,2)
(45,14,2)
(44,14,2)
(18,14,2)
(4,14,2)
(1,14,2)
(26,3,2)
(20,14,2)
(35,14,2)
(33,14,2)
(46,3,2)
(22,33,2)
(12,14,2)
(40,14,2)
(46,26,2)
(30,14,2)
(37,14,2)
(36,14,2)
(23,3,2)
(20,7,2)
(27,14,2)
(41,14,2)
(3,14,2)
(21,13,2)
(37,20,2)
(38,14,2)
(9,14,2)
(12,7,2)
(2,14,2)
-----------------------------------
(0,)
(1,twoIntsStruct)
(2,data[0])
(3,data == NULL)
(4,0)
(5,if (data == NULL)
(6,if(1)
(7,data = (twoIntsStruct *)
(8,0)
(9,data[0].intTwo = 0)
(10,&data[0])
(11,intOne)
(12,data[0])
(13,twoIntsStruct *)
(14,1)
(15,data)
(16,RET)
(17,)
(18,data)
(19,data)
(20,data[0])
(21,(twoIntsStruct *)
(22,calloc(100, sizeof(twoIntsStruct)
(23,1)
(24,1)
(25,NULL)
(26,-1)
(27,0)
(28,)
(29,0)
(30,0)
(31,if(1)
(32,printStructLine(&data[0])
(33,sizeof(twoIntsStruct)
(34,data = NULL)
(35,100)
(36,data[0].intOne)
(37,data[0].intTwo)
(38,intTwo)
(39, sizeof(twoIntsStruct)
(40,data[0].intOne = 0)
(41,data)
(42,data)
(43,NULL)
(44,data)
(45,data)
(46,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
