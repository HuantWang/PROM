-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_04_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,70
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_04_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_04_bad()
CWE401_Memory_Leak__wchar_t_malloc_04_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(28,10,0)
(14,18,0)
(0,29,0)
(22,18,0)
(3,27,0)
(26,27,0)
(10,25,0)
(18,22,0)
(24,29,0)
(22,13,0)
(21,8,0)
(17,1,0)
(10,7,0)
(2,27,0)
(5,29,0)
(25,10,0)
(9,0,0)
(12,24,0)
(17,7,0)
(20,2,0)
(7,17,0)
(16,27,0)
(11,25,0)
(8,24,0)
(1,17,0)
(23,2,0)
(19,8,0)
(7,10,0)
(24,17,0)
(0,24,0)
(17,24,0)
(15,6,1)
(25,11,1)
(18,14,1)
(22,18,1)
(9,8,1)
(15,0,1)
(14,8,1)
(24,17,1)
(19,24,1)
(0,24,1)
(21,19,1)
(7,10,1)
(9,22,1)
(8,21,1)
(17,1,1)
(6,2,1)
(0,9,1)
(4,15,1)
(17,7,1)
(28,12,1)
(12,6,1)
(8,24,1)
(10,25,1)
(11,28,1)
(23,20,1)
(2,23,1)
(7,6,2)
(8,6,2)
(17,1,2)
(24,17,2)
(0,6,2)
(14,8,2)
(17,7,2)
(10,25,2)
(11,6,2)
(9,6,2)
(22,8,2)
(22,18,2)
(21,6,2)
(8,24,2)
(17,6,2)
(28,6,2)
(19,6,2)
(18,8,2)
(10,6,2)
(12,6,2)
(7,10,2)
(0,24,2)
(24,6,2)
(25,6,2)
-----------------------------------
(0,printWLine(data)
(1,wchar_t *)
(2,data = NULL)
(3,if(STATIC_CONST_TRUE)
(4,RET)
(5,if (data == NULL)
(6,STATIC_CONST_TRUE)
(7,malloc(100*sizeof(wchar_t)
(8,data == NULL)
(9,data)
(10,100*sizeof(wchar_t)
(11,wchar_t)
(12,data)
(13,)
(14,1)
(15,STATIC_CONST_TRUE)
(16,data)
(17,(wchar_t *)
(18,-1)
(19,data)
(20,data)
(21,NULL)
(22,exit(-1)
(23,NULL)
(24,data = (wchar_t *)
(25,sizeof(wchar_t)
(26,if(STATIC_CONST_TRUE)
(27,)
(28,100)
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
