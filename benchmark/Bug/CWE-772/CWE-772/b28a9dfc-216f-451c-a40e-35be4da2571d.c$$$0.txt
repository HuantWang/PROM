-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_17_bad()
{
    int i,j;
    struct _twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
54,55
55,56
55,57
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
81,82
82,83
82,84
83,84
83,85
84,85
84,86
85,86
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
111,112
111,113
112,113
115,116
116,117
118,119
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,53,57,58,62,64,69,71,77,78,79,80,86,87,88,89,93,97,99,103,104,109,110,113,114,117,119
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
60,61
60,62
73,74
73,75
82,83
82,84
107,108
107,109
111,112
111,113
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_17_bad(){    int i,j;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_17_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_17_bad
{    int i,j;    struct _twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(51,16,0)
(52,10,0)
(36,25,0)
(1,14,0)
(3,31,0)
(53,26,0)
(5,43,0)
(62,34,0)
(23,10,0)
(39,44,0)
(36,4,0)
(56,43,0)
(13,18,0)
(6,0,0)
(61,59,0)
(8,16,0)
(21,16,0)
(9,37,0)
(46,33,0)
(19,11,0)
(12,27,0)
(31,44,0)
(22,60,0)
(12,63,0)
(41,18,0)
(63,26,0)
(50,31,0)
(20,0,0)
(0,59,0)
(60,26,0)
(34,54,0)
(31,50,0)
(58,12,0)
(44,39,0)
(44,31,0)
(33,18,0)
(24,4,0)
(55,50,0)
(37,14,0)
(42,59,0)
(18,33,0)
(44,14,0)
(50,55,0)
(29,37,0)
(47,1,0)
(30,8,0)
(48,14,0)
(15,16,0)
(38,16,0)
(18,14,0)
(14,44,0)
(10,56,0)
(40,16,0)
(37,27,0)
(49,8,0)
(64,1,0)
(2,56,0)
(12,58,0)
(4,36,0)
(43,26,0)
(7,11,0)
(63,12,0)
(45,54,0)
(14,26,0)
(10,14,0)
(11,54,0)
(27,12,0)
(33,60,0)
(27,37,0)
(35,61,0)
(57,54,0)
(56,10,0)
(17,59,0)
(41,43,1)
(23,36,1)
(4,24,1)
(64,14,1)
(44,31,1)
(0,59,1)
(56,2,1)
(33,18,1)
(54,45,1)
(62,11,1)
(36,4,1)
(5,56,1)
(3,48,1)
(1,14,1)
(37,29,1)
(50,3,1)
(24,1,1)
(50,55,1)
(47,64,1)
(29,9,1)
(34,54,1)
(42,17,1)
(52,23,1)
(8,49,1)
(59,42,1)
(49,30,1)
(44,39,1)
(7,19,1)
(63,12,1)
(61,59,1)
(56,10,1)
(46,18,1)
(35,63,1)
(12,58,1)
(13,41,1)
(22,33,1)
(57,0,1)
(17,8,1)
(6,59,1)
(2,10,1)
(34,62,1)
(33,46,1)
(1,47,1)
(9,60,1)
(23,1,1)
(14,44,1)
(48,0,1)
(60,22,1)
(19,34,1)
(6,61,1)
(18,13,1)
(43,5,1)
(45,57,1)
(10,14,1)
(18,14,1)
(27,37,1)
(31,50,1)
(11,7,1)
(61,35,1)
(28,11,1)
(10,52,1)
(19,54,1)
(12,27,1)
(0,20,1)
(20,6,1)
(11,54,1)
(37,14,1)
(7,11,2)
(9,0,2)
(1,14,2)
(14,0,2)
(19,11,2)
(33,0,2)
(27,0,2)
(61,59,2)
(44,0,2)
(62,11,2)
(18,0,2)
(11,54,2)
(44,31,2)
(34,54,2)
(48,0,2)
(5,0,2)
(56,10,2)
(37,14,2)
(12,58,2)
(56,0,2)
(22,0,2)
(29,0,2)
(27,37,2)
(34,11,2)
(31,0,2)
(20,0,2)
(50,55,2)
(36,1,2)
(23,0,2)
(36,4,2)
(52,0,2)
(37,0,2)
(10,14,2)
(47,0,2)
(14,44,2)
(11,11,2)
(2,0,2)
(43,0,2)
(3,0,2)
(4,1,2)
(12,0,2)
(44,39,2)
(0,59,2)
(35,0,2)
(33,18,2)
(64,0,2)
(63,0,2)
(31,50,2)
(61,0,2)
(60,0,2)
(63,12,2)
(24,1,2)
(0,0,2)
(6,0,2)
(12,27,2)
(13,0,2)
(50,0,2)
(41,0,2)
(18,14,2)
(10,0,2)
(46,0,2)
(1,0,2)
-----------------------------------
(0,i < 1)
(1,data == NULL)
(2,intOne)
(3,100)
(4,-1)
(5,0)
(6,i)
(7,1)
(8,data = NULL)
(9,data)
(10,data[0])
(11,j < 1)
(12,(twoIntsStruct *)
(13,0)
(14,data = (struct _twoIntsStruct *)
(15,i)
(16,)
(17,i)
(18,data[0])
(19,j)
(20,1)
(21,j)
(22,0)
(23,data)
(24,1)
(25,)
(26,)
(27,&data[0])
(28,RET)
(29,0)
(30,data)
(31,calloc(100, sizeof(struct _twoIntsStruct)
(32, sizeof(struct _twoIntsStruct)
(33,data[0].intTwo)
(34,j++)
(35,i)
(36,exit(-1)
(37,data[0])
(38,data)
(39,struct _twoIntsStruct *)
(40,for(j = 0; j < 1; j++)
(41,data)
(42,0)
(43,data[0].intOne = 0)
(44,(struct _twoIntsStruct *)
(45,0)
(46,intTwo)
(47,NULL)
(48,data)
(49,NULL)
(50,sizeof(struct _twoIntsStruct)
(51,for(i = 0; i < 1; i++)
(52,0)
(53,if (data == NULL)
(54,j = 0)
(55,struct _twoIntsStruct)
(56,data[0].intOne)
(57,j)
(58,twoIntsStruct *)
(59,i = 0)
(60,data[0].intTwo = 0)
(61,i++)
(62,j)
(63,printStructLine((twoIntsStruct *)
(64,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
