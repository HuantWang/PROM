-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_01_bad()
{
    {
        char * data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (char *)realloc(data, (130000)*sizeof(char));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            strcpy(data, "New String");
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
7,8
8,9
8,10
10,11
10,12
10,13
13,14
14,15
14,16
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
24,25
25,26
25,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
63,66
64,65
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
81,84
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,9,11,12,16,18,21,23,26,27,31,33,38,40,44,46,47,51,53,57,60,62,65,67,70,73,74,78,80,85,87,88,92,94,98,100
-----computeFrom-----
22,23
22,24
29,30
29,31
55,56
55,57
68,69
68,70
76,77
76,78
-----guardedBy-----
78,100
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_01_bad(){    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_01_bad()
CWE401_Memory_Leak__malloc_realloc_char_01_bad
{    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }}
{        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(44,27,0)
(45,28,0)
(35,27,0)
(27,11,0)
(24,6,0)
(36,27,0)
(17,25,0)
(31,9,0)
(29,17,0)
(22,17,0)
(2,15,0)
(34,18,0)
(30,28,0)
(9,17,0)
(7,5,0)
(11,42,0)
(3,15,0)
(43,12,0)
(28,27,0)
(11,27,0)
(25,28,0)
(14,30,0)
(42,11,0)
(40,32,0)
(6,32,0)
(6,24,0)
(15,3,0)
(20,6,0)
(16,22,0)
(27,12,0)
(37,47,0)
(3,33,0)
(12,41,0)
(23,5,0)
(38,0,0)
(17,12,0)
(18,12,0)
(18,27,0)
(32,6,0)
(26,25,0)
(13,18,0)
(4,36,0)
(37,17,0)
(44,12,0)
(28,25,0)
(24,11,0)
(8,36,0)
(39,12,0)
(19,9,0)
(21,12,0)
(10,44,0)
(5,17,0)
(25,17,0)
(0,30,0)
(11,24,0)
(1,37,0)
(5,47,0)
(28,30,0)
(30,0,0)
(22,47,0)
(25,26,0)
(19,31,1)
(44,10,1)
(8,4,1)
(28,27,1)
(9,19,1)
(36,27,1)
(28,30,1)
(13,34,1)
(20,35,1)
(46,37,1)
(11,42,1)
(36,8,1)
(22,16,1)
(9,17,1)
(2,36,1)
(34,36,1)
(30,0,1)
(44,27,1)
(3,15,1)
(40,20,1)
(29,44,1)
(11,24,1)
(27,11,1)
(1,22,1)
(18,27,1)
(22,17,1)
(32,40,1)
(5,23,1)
(6,32,1)
(45,29,1)
(24,6,1)
(38,14,1)
(25,28,1)
(37,17,1)
(4,27,1)
(14,45,1)
(15,2,1)
(16,5,1)
(10,18,1)
(5,17,1)
(17,25,1)
(25,26,1)
(34,3,1)
(46,9,1)
(0,38,1)
(37,1,1)
(18,13,1)
(23,7,1)
(7,9,1)
(31,17,1)
(37,17,2)
(25,26,2)
(17,25,2)
(5,9,2)
(5,17,2)
(2,36,2)
(11,24,2)
(27,11,2)
(18,27,2)
(3,15,2)
(28,27,2)
(16,9,2)
(23,9,2)
(1,9,2)
(11,42,2)
(22,17,2)
(22,9,2)
(3,36,2)
(25,28,2)
(24,6,2)
(15,36,2)
(7,9,2)
(44,27,2)
(37,9,2)
(30,0,2)
(28,30,2)
(9,17,2)
(36,27,2)
(6,32,2)
-----------------------------------
(0,sizeof(char)
(1,data)
(2,1)
(3,exit(-1)
(4,data)
(5,strcpy(data, "New String")
(6,100*sizeof(char)
(7,data)
(8,NULL)
(9,data != NULL)
(10,data)
(11,(char *)
(12,)
(13,"A String")
(14,130000)
(15,-1)
(16,data)
(17,data = (char *)
(18,strcpy(data, "A String")
(19,NULL)
(20,100)
(21,data)
(22,printLine(data)
(23,"New String")
(24,malloc(100*sizeof(char)
(25,(char *)
(26,char *)
(27,* data = (char *)
(28,realloc(data, (130000)
(29,data)
(30,(130000)
(31,data)
(32,sizeof(char)
(33,)
(34,data)
(35,data)
(36,data == NULL)
(37,free(data)
(38,char)
(39,if (data == NULL)
(40,char)
(41,)
(42,char *)
(43,if (data != NULL)
(44,printLine(data)
(45,data)
(46,RET)
(47,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
