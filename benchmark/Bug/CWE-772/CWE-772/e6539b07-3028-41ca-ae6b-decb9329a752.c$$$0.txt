-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_02_bad()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
67,68
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,62,64,66,68
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_02_bad(){    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_02_bad()
CWE401_Memory_Leak__wchar_t_malloc_02_bad
{    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,7,0)
(14,4,0)
(22,5,0)
(28,29,0)
(27,18,0)
(17,4,0)
(24,20,0)
(18,28,0)
(15,5,0)
(11,22,0)
(1,14,0)
(28,18,0)
(19,13,0)
(8,13,0)
(29,28,0)
(18,27,0)
(9,4,0)
(8,12,0)
(10,20,0)
(20,28,0)
(21,4,0)
(13,8,0)
(25,27,0)
(16,14,0)
(28,20,0)
(27,7,0)
(2,10,0)
(22,20,0)
(3,10,0)
(7,27,0)
(20,5,0)
(25,24,1)
(2,20,1)
(19,10,1)
(22,11,1)
(8,13,1)
(6,26,1)
(3,2,1)
(0,25,1)
(7,0,1)
(10,3,1)
(22,20,1)
(28,29,1)
(27,7,1)
(23,14,1)
(28,18,1)
(10,20,1)
(16,1,1)
(11,8,1)
(26,23,1)
(14,16,1)
(24,23,1)
(20,28,1)
(18,27,1)
(26,22,1)
(11,10,1)
(13,19,1)
(10,23,2)
(8,13,2)
(22,23,2)
(2,23,2)
(20,23,2)
(8,10,2)
(13,10,2)
(10,20,2)
(11,23,2)
(22,20,2)
(28,29,2)
(18,23,2)
(27,23,2)
(19,10,2)
(0,23,2)
(3,23,2)
(18,27,2)
(27,7,2)
(25,23,2)
(7,23,2)
(28,18,2)
(28,23,2)
(24,23,2)
(20,28,2)
-----------------------------------
(0,wchar_t)
(1,data)
(2,data)
(3,NULL)
(4,)
(5,)
(6,RET)
(7,sizeof(wchar_t)
(8,exit(-1)
(9,if(1)
(10,data == NULL)
(11,data)
(12,)
(13,-1)
(14,data = NULL)
(15,if (data == NULL)
(16,NULL)
(17,data)
(18,malloc(100*sizeof(wchar_t)
(19,1)
(20,data = (wchar_t *)
(21,if(1)
(22,printWLine(data)
(23,1)
(24,data)
(25,100)
(26,1)
(27,100*sizeof(wchar_t)
(28,(wchar_t *)
(29,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
