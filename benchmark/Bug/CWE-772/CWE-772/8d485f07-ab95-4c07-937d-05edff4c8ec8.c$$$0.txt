-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_04_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,58,60,61,65,67,70,72
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_04_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_04_bad()
CWE401_Memory_Leak__wchar_t_realloc_04_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(28,1,0)
(16,7,0)
(22,30,0)
(1,14,0)
(4,14,0)
(11,21,0)
(3,6,0)
(15,21,0)
(20,30,0)
(21,11,0)
(21,15,0)
(3,8,0)
(24,10,0)
(30,1,0)
(11,26,0)
(13,11,0)
(2,1,0)
(23,8,0)
(5,26,0)
(26,10,0)
(8,3,0)
(29,10,0)
(27,2,0)
(0,26,0)
(1,7,0)
(19,21,0)
(7,16,0)
(7,11,0)
(11,7,0)
(12,15,0)
(2,14,0)
(9,10,0)
(7,1,0)
(30,1,1)
(20,1,1)
(3,8,1)
(17,2,1)
(11,21,1)
(12,19,1)
(25,17,1)
(22,20,1)
(2,27,1)
(8,23,1)
(21,15,1)
(30,22,1)
(2,1,1)
(17,18,1)
(28,18,1)
(23,30,1)
(7,11,1)
(11,26,1)
(13,28,1)
(18,26,1)
(0,5,1)
(15,12,1)
(26,0,1)
(27,3,1)
(19,13,1)
(27,30,1)
(7,16,1)
(1,7,1)
(1,18,2)
(7,16,2)
(11,18,2)
(7,18,2)
(23,30,2)
(20,18,2)
(1,7,2)
(27,18,2)
(19,18,2)
(2,1,2)
(30,18,2)
(3,8,2)
(11,21,2)
(7,11,2)
(30,1,2)
(3,30,2)
(28,18,2)
(12,18,2)
(22,18,2)
(13,18,2)
(21,15,2)
(11,26,2)
(2,18,2)
(8,30,2)
(15,18,2)
(21,18,2)
-----------------------------------
(0,NULL)
(1,data = (wchar_t *)
(2,printWLine(data)
(3,exit(-1)
(4,if (data == NULL)
(5,data)
(6,)
(7,(wchar_t *)
(8,-1)
(9,if(STATIC_CONST_TRUE)
(10,)
(11,realloc(data, 100*sizeof(wchar_t)
(12,wchar_t)
(13,data)
(14,)
(15,sizeof(wchar_t)
(16,wchar_t *)
(17,STATIC_CONST_TRUE)
(18,STATIC_CONST_TRUE)
(19,100)
(20,data)
(21,100*sizeof(wchar_t)
(22,NULL)
(23,1)
(24,data)
(25,RET)
(26,data = NULL)
(27,data)
(28,data)
(29,if(STATIC_CONST_TRUE)
(30,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
