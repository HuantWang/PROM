-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_11_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
85,86
87,88
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,86,88
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_11_bad(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_11_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_11_bad
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(39,31,0)
(15,14,0)
(41,23,0)
(6,7,0)
(23,41,0)
(20,33,0)
(44,19,0)
(23,30,0)
(0,32,0)
(36,31,0)
(38,32,0)
(19,33,0)
(45,20,0)
(41,33,0)
(17,24,0)
(25,21,0)
(31,45,0)
(21,40,0)
(40,21,0)
(45,31,0)
(21,41,0)
(29,21,0)
(4,40,0)
(16,20,0)
(46,24,0)
(13,7,0)
(11,1,0)
(3,23,0)
(23,3,0)
(34,33,0)
(7,32,0)
(43,41,0)
(9,24,0)
(27,3,0)
(12,14,0)
(24,9,0)
(30,23,0)
(28,45,0)
(42,32,0)
(3,26,0)
(24,41,0)
(11,35,0)
(22,33,0)
(2,26,0)
(26,3,0)
(31,41,0)
(8,35,0)
(35,11,0)
(14,41,0)
(9,22,0)
(22,9,0)
(40,19,0)
(29,25,1)
(39,14,1)
(26,2,1)
(45,31,1)
(21,41,1)
(14,15,1)
(12,41,1)
(46,17,1)
(13,6,1)
(15,12,1)
(40,21,1)
(3,26,1)
(16,45,1)
(20,16,1)
(36,39,1)
(41,23,1)
(22,9,1)
(43,10,1)
(7,13,1)
(9,24,1)
(40,4,1)
(21,29,1)
(2,27,1)
(31,41,1)
(18,10,1)
(23,3,1)
(24,46,1)
(11,35,1)
(23,30,1)
(14,41,1)
(27,43,1)
(35,8,1)
(39,11,1)
(28,31,1)
(4,21,1)
(19,44,1)
(45,28,1)
(10,7,1)
(44,40,1)
(31,36,1)
(5,18,1)
(18,22,1)
(25,20,1)
(24,41,1)
(17,19,1)
(8,14,1)
(31,41,2)
(41,23,2)
(43,10,2)
(35,14,2)
(36,10,2)
(11,35,2)
(4,10,2)
(2,10,2)
(22,10,2)
(3,10,2)
(15,10,2)
(23,30,2)
(41,10,2)
(8,14,2)
(11,14,2)
(14,10,2)
(45,10,2)
(24,41,2)
(31,10,2)
(17,10,2)
(3,26,2)
(40,10,2)
(45,31,2)
(23,10,2)
(21,10,2)
(39,10,2)
(40,21,2)
(46,10,2)
(9,24,2)
(12,10,2)
(25,10,2)
(19,10,2)
(24,10,2)
(21,41,2)
(27,10,2)
(20,10,2)
(14,41,2)
(29,10,2)
(26,10,2)
(22,9,2)
(44,10,2)
(28,10,2)
(9,10,2)
(23,3,2)
(16,10,2)
-----------------------------------
(0,if(globalReturnsTrue()
(1,)
(2,twoIntsStruct)
(3,calloc(100, sizeof(twoIntsStruct)
(4,intTwo)
(5,RET)
(6,data)
(7,data = NULL)
(8,1)
(9,&data[0])
(10,globalReturnsTrue()
(11,exit(-1)
(12,data)
(13,NULL)
(14,data == NULL)
(15,NULL)
(16,0)
(17,data)
(18,globalReturnsTrue()
(19,data[0].intTwo = 0)
(20,data[0].intOne = 0)
(21,data[0])
(22,printStructLine(&data[0])
(23,(twoIntsStruct *)
(24,data[0])
(25,data)
(26,sizeof(twoIntsStruct)
(27,100)
(28,intOne)
(29,0)
(30,twoIntsStruct *)
(31,data[0])
(32,)
(33,)
(34,if (data == NULL)
(35,-1)
(36,0)
(37, sizeof(twoIntsStruct)
(38,data)
(39,data)
(40,data[0].intTwo)
(41,data = (twoIntsStruct *)
(42,if(globalReturnsTrue()
(43,data)
(44,0)
(45,data[0].intOne)
(46,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
