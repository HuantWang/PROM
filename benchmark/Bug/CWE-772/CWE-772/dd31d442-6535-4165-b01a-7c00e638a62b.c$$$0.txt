-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_31_bad()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
29,32
30,31
33,34
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
78,80
78,81
79,80
80,81
80,82
81,82
83,84
83,85
83,86
86,87
87,88
89,90
90,91
90,92
91,92
93,94
93,95
93,96
96,97
97,98
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,32,36,37,41,43,48,50,56,57,58,59,65,66,67,68,72,76,77,82,84,85,88,92,94,95,98,99
-----computeFrom-----
14,15
14,16
20,21
20,22
39,40
39,41
52,53
52,54
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_31_bad(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_31_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_31_bad
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(8,5,0)
(24,14,0)
(7,46,0)
(27,45,0)
(0,1,0)
(9,15,0)
(17,23,0)
(32,15,0)
(22,33,0)
(31,48,0)
(30,17,0)
(39,9,0)
(23,28,0)
(31,15,0)
(25,31,0)
(12,9,0)
(21,29,0)
(34,28,0)
(40,17,0)
(42,21,0)
(50,23,0)
(0,48,0)
(4,49,0)
(13,15,0)
(23,17,0)
(47,22,0)
(47,48,0)
(5,49,0)
(3,19,0)
(11,31,0)
(17,48,0)
(36,47,0)
(20,46,0)
(19,29,0)
(9,31,0)
(43,33,0)
(33,29,0)
(15,29,0)
(49,0,0)
(48,29,0)
(44,14,0)
(22,47,0)
(6,29,0)
(1,0,0)
(10,22,0)
(46,42,0)
(16,19,0)
(2,18,0)
(28,29,0)
(45,2,0)
(46,48,0)
(49,5,0)
(37,29,0)
(38,47,0)
(0,49,0)
(48,0,0)
(42,46,0)
(21,42,0)
(26,48,0)
(2,45,0)
(14,48,0)
(2,45,1)
(38,14,1)
(31,48,1)
(46,48,1)
(25,11,1)
(19,3,1)
(50,17,1)
(17,30,1)
(9,31,1)
(34,23,1)
(8,4,1)
(0,1,1)
(46,20,1)
(42,46,1)
(12,31,1)
(11,21,1)
(45,27,1)
(9,39,1)
(14,48,1)
(14,24,1)
(36,38,1)
(4,26,1)
(5,8,1)
(7,28,1)
(24,44,1)
(3,16,1)
(31,25,1)
(23,17,1)
(41,9,1)
(44,48,1)
(26,19,1)
(47,48,1)
(17,48,1)
(38,2,1)
(40,33,1)
(23,50,1)
(0,49,1)
(20,7,1)
(47,36,1)
(10,47,1)
(21,42,1)
(27,14,1)
(48,0,1)
(39,12,1)
(30,40,1)
(28,34,1)
(33,43,1)
(49,5,1)
(22,47,1)
(22,10,1)
(43,22,1)
(2,45,2)
(14,48,2)
(23,17,2)
(9,31,2)
(2,14,2)
(46,48,2)
(21,42,2)
(27,14,2)
(31,48,2)
(49,5,2)
(47,48,2)
(0,49,2)
(48,0,2)
(0,1,2)
(45,14,2)
(17,48,2)
(42,46,2)
(22,47,2)
-----------------------------------
(0,(twoIntsStruct *)
(1,twoIntsStruct *)
(2,exit(-1)
(3,NULL)
(4,100)
(5,sizeof(twoIntsStruct)
(6,data)
(7,data)
(8,twoIntsStruct)
(9,* data = dataCopy)
(10,intOne)
(11,dataCopy)
(12,data)
(13,data)
(14,data == NULL)
(15,)
(16,data)
(17,data[0])
(18,)
(19,data = NULL)
(20,0)
(21,printStructLine(&data[0])
(22,data[0].intOne)
(23,data[0].intTwo)
(24,NULL)
(25,data)
(26,data)
(27,1)
(28,data[0].intTwo = 0)
(29,)
(30,0)
(31,* dataCopy = data)
(32,dataCopy)
(33,data[0].intOne = 0)
(34,0)
(35, sizeof(twoIntsStruct)
(36,0)
(37,if (data == NULL)
(38,data)
(39,dataCopy)
(40,data)
(41,RET)
(42,&data[0])
(43,0)
(44,data)
(45,-1)
(46,data[0])
(47,data[0])
(48,data = (twoIntsStruct *)
(49,calloc(100, sizeof(twoIntsStruct)
(50,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
