-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_03_bad()
{
    int64_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
72,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,73,74,76
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
44,45
44,46
57,58
57,59
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_03_bad(){    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_03_bad()
CWE401_Memory_Leak__int64_t_calloc_03_bad
{    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,30,0)
(7,36,0)
(31,19,0)
(27,4,0)
(2,8,0)
(28,3,0)
(26,35,0)
(22,28,0)
(0,17,0)
(11,1,0)
(28,22,0)
(6,28,0)
(22,19,0)
(1,9,0)
(32,9,0)
(16,9,0)
(18,1,0)
(24,20,0)
(10,9,0)
(17,8,0)
(14,12,0)
(4,3,0)
(34,28,0)
(5,4,0)
(23,36,0)
(20,3,0)
(3,19,0)
(3,20,0)
(21,3,0)
(12,26,0)
(20,8,0)
(20,24,0)
(8,20,0)
(8,17,0)
(26,12,0)
(29,30,0)
(33,19,0)
(29,15,1)
(6,34,1)
(28,3,1)
(28,6,1)
(2,21,1)
(4,27,1)
(18,11,1)
(30,29,1)
(17,0,1)
(7,23,1)
(31,4,1)
(0,2,1)
(13,30,1)
(15,36,1)
(22,28,1)
(34,31,1)
(1,18,1)
(20,8,1)
(5,3,1)
(36,7,1)
(26,12,1)
(14,4,1)
(4,3,1)
(27,5,1)
(15,22,1)
(3,20,1)
(21,36,1)
(8,17,1)
(12,14,1)
(20,24,1)
(23,1,1)
(31,26,1)
(21,36,2)
(26,12,2)
(17,36,2)
(5,36,2)
(8,17,2)
(2,36,2)
(20,8,2)
(26,4,2)
(8,36,2)
(28,36,2)
(4,36,2)
(20,36,2)
(4,3,2)
(3,36,2)
(14,4,2)
(0,36,2)
(31,36,2)
(27,36,2)
(22,36,2)
(3,20,2)
(34,36,2)
(22,28,2)
(20,24,2)
(12,4,2)
(28,3,2)
(6,36,2)
-----------------------------------
(0,int64_t)
(1,data = NULL)
(2,100)
(3,data = (int64_t *)
(4,data == NULL)
(5,data)
(6,0)
(7,5)
(8,calloc(100, sizeof(int64_t)
(9,)
(10,if(5==5)
(11,data)
(12,-1)
(13,RET)
(14,1)
(15,5)
(16,data)
(17,sizeof(int64_t)
(18,NULL)
(19,)
(20,(int64_t *)
(21,data)
(22,printLongLongLine(data[0])
(23,5)
(24,int64_t *)
(25, sizeof(int64_t)
(26,exit(-1)
(27,NULL)
(28,data[0])
(29,5)
(30,5==5)
(31,L)
(32,if(5==5)
(33,if (data == NULL)
(34,data)
(35,)
(36,5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
