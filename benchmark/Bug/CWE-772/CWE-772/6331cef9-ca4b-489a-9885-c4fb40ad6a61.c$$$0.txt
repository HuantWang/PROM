-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_11_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,72,74
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_11_bad(){    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_11_bad()
CWE401_Memory_Leak__char_realloc_11_bad
{    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,17,0)
(29,6,0)
(13,25,0)
(7,18,0)
(2,0,0)
(31,7,0)
(30,18,0)
(22,32,0)
(26,16,0)
(30,24,0)
(7,30,0)
(16,26,0)
(16,25,0)
(25,24,0)
(12,6,0)
(11,30,0)
(4,18,0)
(24,30,0)
(0,2,0)
(28,26,0)
(15,6,0)
(23,24,0)
(10,19,0)
(25,16,0)
(9,30,0)
(14,16,0)
(21,9,0)
(32,30,0)
(24,23,0)
(1,7,0)
(33,9,0)
(25,19,0)
(19,6,0)
(3,19,0)
(20,0,0)
(24,25,0)
(32,18,0)
(20,9,1)
(1,2,1)
(19,10,1)
(8,19,1)
(21,30,1)
(9,33,1)
(27,8,1)
(9,30,1)
(7,30,1)
(28,14,1)
(30,24,1)
(27,32,1)
(0,20,1)
(22,7,1)
(25,19,1)
(32,22,1)
(10,3,1)
(7,31,1)
(5,27,1)
(13,11,1)
(31,1,1)
(24,23,1)
(25,16,1)
(2,0,1)
(26,28,1)
(11,8,1)
(14,13,1)
(24,25,1)
(16,26,1)
(1,9,1)
(32,30,1)
(33,21,1)
(22,8,2)
(20,9,2)
(24,23,2)
(32,30,2)
(24,25,2)
(25,8,2)
(9,8,2)
(30,8,2)
(13,8,2)
(16,26,2)
(7,30,2)
(26,8,2)
(33,8,2)
(0,9,2)
(9,30,2)
(31,8,2)
(2,0,2)
(16,8,2)
(25,16,2)
(25,19,2)
(32,8,2)
(2,9,2)
(1,8,2)
(7,8,2)
(28,8,2)
(11,8,2)
(21,8,2)
(24,8,2)
(14,8,2)
(30,24,2)
-----------------------------------
(0,-1)
(1,data)
(2,exit(-1)
(3,data)
(4,if (data == NULL)
(5,RET)
(6,)
(7,strcpy(data, "A String")
(8,globalReturnsTrue()
(9,data == NULL)
(10,NULL)
(11,data)
(12,if(globalReturnsTrue()
(13,data)
(14,100)
(15,if(globalReturnsTrue()
(16,100*sizeof(char)
(17,)
(18,)
(19,data = NULL)
(20,1)
(21,data)
(22,data)
(23,char *)
(24,(char *)
(25,realloc(data, 100*sizeof(char)
(26,sizeof(char)
(27,globalReturnsTrue()
(28,char)
(29,data)
(30,data = (char *)
(31,"A String")
(32,printLine(data)
(33,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
