-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_12_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
97,98
97,99
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
122,123
123,124
123,125
124,125
126,127
127,128
127,129
128,129
131,132
131,133
131,134
132,133
133,134
135,136
137,138
138,139
139,140
139,141
140,141
142,143
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,87,91,93,96,98,102,103,109,110,111,112,118,119,120,121,125,129,130,134,136,141,143
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
85,86
85,87
97,98
97,99
105,106
105,107
114,115
114,116
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_12_bad(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_12_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_12_bad
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(53,15,0)
(46,68,0)
(46,63,0)
(72,15,0)
(55,11,0)
(14,63,0)
(8,11,0)
(36,40,0)
(25,46,0)
(21,56,0)
(36,42,0)
(12,21,0)
(9,23,0)
(75,22,0)
(30,32,0)
(72,50,0)
(43,32,0)
(22,75,0)
(50,11,0)
(41,75,0)
(15,72,0)
(48,64,0)
(67,66,0)
(32,30,0)
(38,64,0)
(35,25,0)
(33,25,0)
(47,15,0)
(7,38,0)
(51,68,0)
(17,25,0)
(5,48,0)
(65,3,0)
(38,21,0)
(66,73,0)
(48,5,0)
(22,8,0)
(74,23,0)
(78,54,0)
(4,29,0)
(45,46,0)
(40,68,0)
(70,42,0)
(45,64,0)
(39,45,0)
(73,66,0)
(69,10,0)
(64,11,0)
(64,48,0)
(69,48,0)
(8,22,0)
(71,38,0)
(2,50,0)
(48,69,0)
(75,64,0)
(6,32,0)
(25,33,0)
(77,36,0)
(63,44,0)
(66,14,0)
(16,75,0)
(54,29,0)
(51,33,0)
(33,51,0)
(76,40,0)
(59,30,0)
(18,69,0)
(34,64,0)
(61,10,0)
(3,64,0)
(26,3,0)
(30,37,0)
(45,62,0)
(1,56,0)
(13,29,0)
(15,64,0)
(42,46,0)
(44,63,0)
(31,29,0)
(52,73,0)
(10,69,0)
(9,19,0)
(21,38,0)
(63,46,0)
(37,68,0)
(56,11,0)
(0,46,0)
(49,37,0)
(14,66,0)
(23,9,0)
(32,46,0)
(42,36,0)
(27,72,0)
(63,14,0)
(58,42,0)
(20,54,0)
(43,40,1)
(0,60,1)
(75,64,1)
(14,66,1)
(32,46,1)
(46,63,1)
(42,46,1)
(51,33,1)
(40,76,1)
(61,18,1)
(63,14,1)
(34,60,1)
(18,34,1)
(52,67,1)
(16,41,1)
(35,37,1)
(1,21,1)
(42,70,1)
(39,28,1)
(74,3,1)
(24,45,1)
(67,0,1)
(12,38,1)
(77,42,1)
(3,65,1)
(38,64,1)
(71,7,1)
(7,50,1)
(3,64,1)
(30,32,1)
(53,47,1)
(9,23,1)
(32,6,1)
(66,73,1)
(72,15,1)
(63,44,1)
(45,39,1)
(76,36,1)
(6,43,1)
(8,22,1)
(75,16,1)
(15,53,1)
(36,42,1)
(28,51,1)
(33,25,1)
(24,28,1)
(58,46,1)
(72,27,1)
(38,71,1)
(25,17,1)
(54,20,1)
(47,9,1)
(2,72,1)
(47,3,1)
(22,75,1)
(21,12,1)
(17,35,1)
(48,5,1)
(37,49,1)
(59,32,1)
(21,38,1)
(41,56,1)
(73,52,1)
(45,64,1)
(20,78,1)
(15,64,1)
(36,77,1)
(10,61,1)
(45,46,1)
(30,59,1)
(65,26,1)
(50,2,1)
(64,48,1)
(23,74,1)
(69,10,1)
(28,8,1)
(26,64,1)
(48,69,1)
(25,46,1)
(27,15,1)
(70,58,1)
(49,30,1)
(56,1,1)
(60,54,1)
(45,46,2)
(33,60,2)
(33,25,2)
(30,60,2)
(45,64,2)
(69,10,2)
(71,60,2)
(46,63,2)
(6,60,2)
(56,60,2)
(41,60,2)
(42,46,2)
(37,60,2)
(59,60,2)
(74,3,2)
(72,60,2)
(3,60,2)
(51,60,2)
(39,28,2)
(49,60,2)
(45,28,2)
(52,60,2)
(65,60,2)
(77,60,2)
(12,60,2)
(15,64,2)
(22,75,2)
(38,60,2)
(53,60,2)
(73,60,2)
(25,46,2)
(48,69,2)
(72,15,2)
(32,46,2)
(75,60,2)
(63,60,2)
(17,60,2)
(35,60,2)
(46,60,2)
(1,60,2)
(3,64,2)
(14,60,2)
(8,60,2)
(14,66,2)
(50,60,2)
(36,60,2)
(58,60,2)
(16,60,2)
(63,44,2)
(0,60,2)
(75,64,2)
(25,60,2)
(48,60,2)
(64,48,2)
(70,60,2)
(64,60,2)
(43,60,2)
(9,3,2)
(66,73,2)
(38,64,2)
(36,42,2)
(8,22,2)
(48,5,2)
(66,60,2)
(42,60,2)
(30,32,2)
(2,60,2)
(26,60,2)
(21,38,2)
(61,60,2)
(32,60,2)
(22,60,2)
(10,60,2)
(76,60,2)
(9,23,2)
(18,60,2)
(21,60,2)
(47,60,2)
(67,60,2)
(63,14,2)
(27,60,2)
(34,60,2)
(23,3,2)
(7,60,2)
(15,60,2)
(69,60,2)
(51,33,2)
(40,60,2)
-----------------------------------
(0,data)
(1,0)
(2,0)
(3,data == NULL)
(4,data)
(5,twoIntsStruct *)
(6,0)
(7,data)
(8,printStructLine(&data[0])
(9,exit(-1)
(10,sizeof(twoIntsStruct)
(11,)
(12,intTwo)
(13,if(globalReturnsTrueOrFalse()
(14,ALLOCA(100*sizeof(twoIntsStruct)
(15,data[0])
(16,0)
(17,0)
(18,100)
(19,)
(20,NULL)
(21,data[0].intTwo)
(22,&data[0])
(23,-1)
(24,RET)
(25,data[0])
(26,data)
(27,intOne)
(28,globalReturnsTrueOrFalse()
(29,)
(30,data[0].intTwo)
(31,if(globalReturnsTrueOrFalse()
(32,data[0])
(33,&data[0])
(34,data)
(35,data)
(36,data[0].intOne)
(37,data[0].intTwo = 0)
(38,data[0])
(39,data)
(40,data[0].intOne = 0)
(41,data)
(42,data[0])
(43,data)
(44,twoIntsStruct *)
(45,free(data)
(46,data = (twoIntsStruct *)
(47,data)
(48,(twoIntsStruct *)
(49,0)
(50,data[0].intOne = 0)
(51,printStructLine(&data[0])
(52,twoIntsStruct)
(53,0)
(54,data = NULL)
(55,if (data == NULL)
(56,data[0].intTwo = 0)
(57, sizeof(twoIntsStruct)
(58,data)
(59,intTwo)
(60,globalReturnsTrueOrFalse()
(61,twoIntsStruct)
(62,)
(63,(twoIntsStruct *)
(64,data = (twoIntsStruct *)
(65,NULL)
(66,100*sizeof(twoIntsStruct)
(67,100)
(68,)
(69,calloc(100, sizeof(twoIntsStruct)
(70,0)
(71,0)
(72,data[0].intOne)
(73,sizeof(twoIntsStruct)
(74,1)
(75,data[0])
(76,0)
(77,intOne)
(78,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
