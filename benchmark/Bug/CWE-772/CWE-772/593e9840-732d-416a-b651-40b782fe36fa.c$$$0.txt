-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_44_bad()
{
    wchar_t * data;
    /* define a function pointer */
    void (*funcPtr) (wchar_t *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)calloc(100, sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
42,45
43,44
46,47
47,48
47,49
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
64,67
65,66
67,68
70,71
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,45,48,49,53,55,60,62,66,68,69,73,75,79,81
-----computeFrom-----
28,29
28,30
34,35
34,36
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_44_bad(){    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__wchar_t_calloc_44_bad()
CWE401_Memory_Leak__wchar_t_calloc_44_bad
{    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* use the function pointer */    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = badSink;
void (*funcPtr) (wchar_t *) = badSink;
void
(*funcPtr) (wchar_t *) = badSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(15,0,0)
(10,19,0)
(1,5,0)
(26,25,0)
(18,28,0)
(0,13,0)
(16,20,0)
(28,16,0)
(11,18,0)
(28,13,0)
(23,27,0)
(8,13,0)
(21,8,0)
(25,13,0)
(9,10,0)
(29,13,0)
(19,12,0)
(2,27,0)
(14,13,0)
(30,5,0)
(16,28,0)
(24,2,0)
(27,2,0)
(16,27,0)
(17,28,0)
(7,13,0)
(6,8,0)
(27,16,0)
(19,10,0)
(0,28,0)
(5,28,0)
(20,16,0)
(18,13,0)
(4,25,0)
(30,28,1)
(9,5,1)
(3,18,1)
(23,17,1)
(2,24,1)
(16,20,1)
(25,26,1)
(5,1,1)
(27,2,1)
(15,5,1)
(1,30,1)
(19,10,1)
(24,23,1)
(0,15,1)
(17,8,1)
(18,11,1)
(15,19,1)
(8,21,1)
(11,0,1)
(10,9,1)
(0,28,1)
(21,6,1)
(28,16,1)
(6,25,1)
(16,27,1)
(26,4,1)
(18,28,1)
(5,28,1)
(0,28,2)
(16,20,2)
(28,16,2)
(19,5,2)
(9,5,2)
(16,27,2)
(27,2,2)
(18,28,2)
(5,28,2)
(19,10,2)
(10,5,2)
-----------------------------------
(0,printWLine(data)
(1,NULL)
(2,sizeof(wchar_t)
(3,RET)
(4,funcPtr)
(5,data == NULL)
(6,data)
(7,if (data == NULL)
(8,data = NULL)
(9,1)
(10,-1)
(11,data)
(12,)
(13,)
(14,funcPtr)
(15,data)
(16,(wchar_t *)
(17,data)
(18,funcPtr(data)
(19,exit(-1)
(20,wchar_t *)
(21,NULL)
(22, sizeof(wchar_t)
(23,100)
(24,wchar_t)
(25,(*funcPtr)
(26,badSink)
(27,calloc(100, sizeof(wchar_t)
(28,data = (wchar_t *)
(29,data)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
