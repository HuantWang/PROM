-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_11_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
91,92
93,94
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,92,94
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_11_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_11_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_11_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(25,20,0)
(35,40,0)
(40,31,0)
(32,31,0)
(16,41,0)
(42,32,0)
(30,44,0)
(23,1,0)
(41,43,0)
(26,45,0)
(5,20,0)
(47,34,0)
(20,25,0)
(32,22,0)
(4,0,0)
(6,18,0)
(31,43,0)
(2,40,0)
(22,32,0)
(42,30,0)
(32,42,0)
(8,43,0)
(24,48,0)
(10,47,0)
(47,9,0)
(9,43,0)
(29,20,0)
(36,24,0)
(1,10,0)
(38,28,0)
(1,31,0)
(11,45,0)
(47,10,0)
(15,25,0)
(11,21,0)
(31,32,0)
(37,48,0)
(45,11,0)
(20,31,0)
(9,47,0)
(27,24,0)
(30,42,0)
(17,18,0)
(12,1,0)
(44,30,0)
(10,1,0)
(48,0,0)
(0,43,0)
(24,31,0)
(48,24,0)
(28,18,0)
(25,41,0)
(34,47,0)
(19,42,0)
(39,28,0)
(14,18,0)
(7,31,0)
(28,39,1)
(16,25,1)
(7,13,1)
(13,28,1)
(15,20,1)
(2,35,1)
(20,31,1)
(24,36,1)
(5,29,1)
(1,12,1)
(48,37,1)
(27,41,1)
(31,32,1)
(47,34,1)
(48,24,1)
(46,9,1)
(32,22,1)
(32,42,1)
(47,10,1)
(20,5,1)
(42,30,1)
(4,48,1)
(1,31,1)
(25,20,1)
(41,16,1)
(26,40,1)
(25,15,1)
(12,23,1)
(35,31,1)
(24,31,1)
(29,40,1)
(40,31,1)
(23,0,1)
(30,44,1)
(9,47,1)
(39,38,1)
(40,2,1)
(19,7,1)
(29,11,1)
(37,24,1)
(3,46,1)
(36,27,1)
(0,4,1)
(11,45,1)
(46,13,1)
(30,19,1)
(45,26,1)
(10,1,1)
(47,13,2)
(31,13,2)
(25,20,2)
(20,31,2)
(10,13,2)
(9,47,2)
(30,13,2)
(47,10,2)
(10,1,2)
(12,13,2)
(47,34,2)
(24,13,2)
(41,13,2)
(31,32,2)
(1,31,2)
(48,24,2)
(35,13,2)
(9,13,2)
(45,40,2)
(40,13,2)
(1,13,2)
(40,31,2)
(42,13,2)
(20,13,2)
(27,13,2)
(4,13,2)
(5,13,2)
(25,13,2)
(11,45,2)
(7,13,2)
(32,42,2)
(37,13,2)
(30,44,2)
(32,13,2)
(15,13,2)
(36,13,2)
(26,40,2)
(16,13,2)
(19,13,2)
(42,30,2)
(0,13,2)
(24,31,2)
(11,40,2)
(32,22,2)
(23,13,2)
(29,13,2)
(2,13,2)
(48,13,2)
-----------------------------------
(0,data[0].intTwo = 0)
(1,data[0])
(2,NULL)
(3,RET)
(4,0)
(5,0)
(6,data)
(7,data)
(8,if (data == NULL)
(9,printStructLine((twoIntsStruct *)
(10,&data[0])
(11,exit(-1)
(12,0)
(13,globalReturnsTrue()
(14,if(globalReturnsTrue()
(15,intOne)
(16,0)
(17,if(globalReturnsTrue()
(18,)
(19,100)
(20,data[0])
(21,)
(22,struct _twoIntsStruct *)
(23,data)
(24,data[0])
(25,data[0].intOne)
(26,1)
(27,data)
(28,data = NULL)
(29,data)
(30,sizeof(struct _twoIntsStruct)
(31,data = (struct _twoIntsStruct *)
(32,(struct _twoIntsStruct *)
(33, sizeof(struct _twoIntsStruct)
(34,twoIntsStruct *)
(35,data)
(36,0)
(37,intTwo)
(38,data)
(39,NULL)
(40,data == NULL)
(41,data[0].intOne = 0)
(42,calloc(100, sizeof(struct _twoIntsStruct)
(43,)
(44,struct _twoIntsStruct)
(45,-1)
(46,globalReturnsTrue()
(47,(twoIntsStruct *)
(48,data[0].intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
