-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
69,72
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
82,84
84,85
85,86
85,87
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
101,103
101,104
102,103
103,104
105,106
107,108
108,109
109,110
109,111
110,111
112,113
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,73,76,78,81,83,86,87,91,93,94,98,100,104,106,111,113
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
71,72
71,73
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__char_realloc_12_bad()
CWE401_Memory_Leak__char_realloc_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(50,33,0)
(6,13,0)
(48,2,0)
(13,2,0)
(32,16,0)
(19,51,0)
(22,40,0)
(51,17,0)
(43,0,0)
(25,19,0)
(2,13,0)
(36,38,0)
(14,11,0)
(16,14,0)
(0,17,0)
(14,16,0)
(34,40,0)
(3,25,0)
(15,17,0)
(24,9,0)
(13,6,0)
(37,41,0)
(19,44,0)
(26,31,0)
(40,22,0)
(10,9,0)
(33,38,0)
(47,17,0)
(25,29,0)
(2,38,0)
(49,9,0)
(36,2,0)
(18,41,0)
(13,22,0)
(29,31,0)
(51,19,0)
(45,34,0)
(28,2,0)
(7,29,0)
(41,51,0)
(28,51,0)
(44,19,0)
(30,10,0)
(21,28,0)
(39,40,0)
(23,10,0)
(31,29,0)
(19,25,0)
(46,15,0)
(33,2,0)
(15,51,0)
(25,10,0)
(12,0,0)
(28,20,0)
(1,51,0)
(22,13,0)
(40,34,0)
(35,33,0)
(0,51,0)
(5,9,0)
(4,36,0)
(29,25,0)
(33,2,1)
(36,2,1)
(16,32,1)
(27,8,1)
(29,31,1)
(37,51,1)
(19,25,1)
(43,14,1)
(15,46,1)
(21,8,1)
(51,19,1)
(36,4,1)
(28,51,1)
(42,10,1)
(4,33,1)
(32,41,1)
(41,18,1)
(25,29,1)
(46,0,1)
(7,3,1)
(28,21,1)
(12,43,1)
(40,34,1)
(45,39,1)
(13,22,1)
(50,35,1)
(28,2,1)
(22,40,1)
(26,7,1)
(34,45,1)
(25,10,1)
(3,1,1)
(8,15,1)
(0,12,1)
(10,30,1)
(48,42,1)
(43,41,1)
(19,44,1)
(27,28,1)
(2,13,1)
(30,23,1)
(31,26,1)
(15,51,1)
(18,37,1)
(8,36,1)
(14,16,1)
(1,42,1)
(13,6,1)
(0,51,1)
(35,2,1)
(33,50,1)
(41,51,1)
(39,48,1)
(1,42,2)
(29,42,2)
(41,51,2)
(18,42,2)
(33,42,2)
(28,8,2)
(36,2,2)
(13,42,2)
(34,42,2)
(29,31,2)
(51,19,2)
(21,8,2)
(31,42,2)
(46,42,2)
(0,51,2)
(40,34,2)
(14,41,2)
(40,42,2)
(14,16,2)
(33,2,2)
(36,42,2)
(3,42,2)
(48,42,2)
(41,42,2)
(39,42,2)
(32,41,2)
(12,42,2)
(50,42,2)
(22,40,2)
(15,51,2)
(26,42,2)
(15,42,2)
(19,44,2)
(13,22,2)
(19,25,2)
(35,42,2)
(28,2,2)
(2,42,2)
(22,42,2)
(25,10,2)
(45,42,2)
(2,13,2)
(25,29,2)
(0,42,2)
(28,51,2)
(7,42,2)
(37,42,2)
(13,6,2)
(43,42,2)
(19,42,2)
(51,42,2)
(16,41,2)
(25,42,2)
(4,42,2)
-----------------------------------
(0,strcpy(data, "A String")
(1,data)
(2,data = (char *)
(3,data)
(4,data)
(5,data)
(6,char *)
(7,100)
(8,globalReturnsTrueOrFalse()
(9,)
(10,data = NULL)
(11,)
(12,"A String")
(13,(char *)
(14,exit(-1)
(15,printLine(data)
(16,-1)
(17,)
(18,NULL)
(19,(char *)
(20,)
(21,data)
(22,ALLOCA(100*sizeof(char)
(23,data)
(24,if(globalReturnsTrueOrFalse()
(25,realloc(data, 100*sizeof(char)
(26,char)
(27,RET)
(28,free(data)
(29,100*sizeof(char)
(30,NULL)
(31,sizeof(char)
(32,1)
(33,strcpy(data, "A String")
(34,sizeof(char)
(35,data)
(36,printLine(data)
(37,data)
(38,)
(39,100)
(40,100*sizeof(char)
(41,data == NULL)
(42,globalReturnsTrueOrFalse()
(43,data)
(44,char *)
(45,char)
(46,data)
(47,if (data == NULL)
(48,data)
(49,if(globalReturnsTrueOrFalse()
(50,"A String")
(51,data = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
