-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_03_bad()
{
    if(5==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
70,73
71,72
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
88,91
89,90
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,9,14,16,17,21,23,26,28,31,32,36,38,43,45,50,51,52,56,59,60,64,67,69,72,74,77,80,81,85,87,93,94,95,99,102,103,107,109
-----computeFrom-----
7,8
7,9
27,28
27,29
34,35
34,36
47,48
47,49
62,63
62,64
75,76
75,77
83,84
83,85
90,91
90,92
-----guardedBy-----
85,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_03_bad(){    if(5==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_03_bad()
CWE401_Memory_Leak__malloc_realloc_int_03_bad
{    if(5==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(5==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
5==5
5
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(60,32,0)
(23,9,0)
(29,28,0)
(50,19,0)
(35,46,0)
(25,40,0)
(18,51,0)
(16,51,0)
(52,15,0)
(36,16,0)
(16,36,0)
(17,36,0)
(22,1,0)
(10,53,0)
(44,41,0)
(34,55,0)
(37,3,0)
(15,30,0)
(24,55,0)
(22,40,0)
(15,28,0)
(7,21,0)
(40,37,0)
(13,50,0)
(29,18,0)
(14,3,0)
(45,28,0)
(42,57,0)
(43,29,0)
(40,22,0)
(15,9,0)
(32,36,0)
(51,18,0)
(48,19,0)
(50,13,0)
(36,32,0)
(31,23,0)
(2,29,0)
(55,21,0)
(28,19,0)
(27,19,0)
(30,20,0)
(19,56,0)
(37,40,0)
(12,13,0)
(11,41,0)
(41,18,0)
(49,51,0)
(18,19,0)
(59,19,0)
(13,28,0)
(3,37,0)
(13,18,0)
(15,21,0)
(22,9,0)
(4,18,0)
(6,37,0)
(9,19,0)
(54,38,0)
(26,15,0)
(21,20,0)
(53,42,0)
(47,9,0)
(0,13,0)
(33,58,0)
(46,9,0)
(9,22,0)
(1,22,0)
(42,53,0)
(51,49,0)
(40,18,0)
(30,15,0)
(39,23,0)
(55,9,0)
(51,16,0)
(5,58,0)
(46,20,0)
(32,60,1)
(46,35,1)
(46,9,1)
(60,17,1)
(2,41,1)
(13,18,1)
(44,18,1)
(22,40,1)
(23,31,1)
(52,26,1)
(39,9,1)
(45,29,1)
(15,21,1)
(43,2,1)
(7,55,1)
(40,37,1)
(50,13,1)
(28,45,1)
(10,41,1)
(6,25,1)
(34,23,1)
(23,9,1)
(18,51,1)
(51,49,1)
(25,47,1)
(37,3,1)
(41,18,1)
(8,23,1)
(14,6,1)
(15,28,1)
(11,44,1)
(4,58,1)
(29,18,1)
(17,4,1)
(24,34,1)
(30,15,1)
(55,24,1)
(13,28,1)
(5,33,1)
(8,58,1)
(22,1,1)
(51,16,1)
(9,22,1)
(3,14,1)
(35,30,1)
(26,21,1)
(31,39,1)
(55,9,1)
(13,0,1)
(2,42,1)
(29,43,1)
(12,28,1)
(15,9,1)
(47,50,1)
(53,10,1)
(41,11,1)
(16,36,1)
(58,5,1)
(8,46,1)
(42,53,1)
(0,12,1)
(36,32,1)
(21,7,1)
(15,52,1)
(40,18,1)
(41,18,2)
(44,58,2)
(13,28,2)
(23,58,2)
(22,40,2)
(9,58,2)
(42,41,2)
(26,23,2)
(55,23,2)
(17,58,2)
(7,23,2)
(29,18,2)
(50,13,2)
(52,23,2)
(30,15,2)
(39,58,2)
(22,58,2)
(41,58,2)
(50,58,2)
(46,9,2)
(40,58,2)
(55,9,2)
(32,58,2)
(43,58,2)
(16,36,2)
(31,58,2)
(10,41,2)
(28,58,2)
(21,23,2)
(40,37,2)
(51,49,2)
(40,18,2)
(51,58,2)
(13,18,2)
(18,58,2)
(6,58,2)
(2,58,2)
(30,23,2)
(4,58,2)
(12,58,2)
(37,58,2)
(34,23,2)
(36,32,2)
(9,22,2)
(37,3,2)
(47,58,2)
(13,58,2)
(36,58,2)
(11,58,2)
(46,23,2)
(16,58,2)
(51,16,2)
(24,23,2)
(15,21,2)
(29,58,2)
(15,23,2)
(53,41,2)
(3,58,2)
(60,58,2)
(23,9,2)
(25,58,2)
(0,58,2)
(18,51,2)
(15,9,2)
(15,28,2)
(45,58,2)
(42,53,2)
(22,1,2)
(35,23,2)
(14,58,2)
-----------------------------------
(0,0)
(1,int *)
(2,data)
(3,sizeof(int)
(4,data)
(5,5)
(6,130000)
(7,10)
(8,RET)
(9,data = (int *)
(10,1)
(11,NULL)
(12,data)
(13,data[0])
(14,int)
(15,data[0])
(16,malloc(100*sizeof(int)
(17,100)
(18,* data = (int *)
(19,)
(20,)
(21,data[0] = 10)
(22,(int *)
(23,data != NULL)
(24,0)
(25,data)
(26,data)
(27,if (data != NULL)
(28,data[0] = 5)
(29,data[0])
(30,printIntLine(data[0])
(31,NULL)
(32,sizeof(int)
(33,5)
(34,data)
(35,data)
(36,100*sizeof(int)
(37,(130000)
(38,)
(39,data)
(40,realloc(data, (130000)
(41,data == NULL)
(42,exit(-1)
(43,0)
(44,data)
(45,5)
(46,free(data)
(47,data)
(48,if (data == NULL)
(49,int *)
(50,printIntLine(data[0])
(51,(int *)
(52,0)
(53,-1)
(54,if(5==5)
(55,data[0])
(56,)
(57,)
(58,5==5)
(59,data)
(60,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
