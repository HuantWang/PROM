-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_12_bad()
{
    int * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
69,72
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
77,78
79,80
79,81
80,81
82,83
82,84
84,85
85,86
85,87
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
103,105
103,106
104,105
105,106
107,108
109,110
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,39,40,44,46,51,53,58,59,60,64,67,68,73,76,78,81,83,86,87,92,93,94,98,101,102,106,108,113,115
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
55,56
55,57
71,72
71,73
82,83
82,84
89,90
89,91
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_12_bad(){    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int_malloc_12_bad()
CWE401_Memory_Leak__int_malloc_12_bad
{    int * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(35,9,0)
(24,58,0)
(46,11,0)
(26,38,0)
(32,49,0)
(25,17,0)
(37,5,0)
(11,46,0)
(38,20,0)
(19,0,0)
(42,46,0)
(58,46,0)
(54,37,0)
(17,25,0)
(46,9,0)
(53,28,0)
(2,4,0)
(1,51,0)
(32,46,0)
(5,20,0)
(23,21,0)
(21,30,0)
(12,26,0)
(36,4,0)
(18,26,0)
(39,36,0)
(13,30,0)
(56,4,0)
(11,19,0)
(21,35,0)
(41,0,0)
(26,18,0)
(14,9,0)
(18,20,0)
(26,5,0)
(28,17,0)
(0,19,0)
(35,21,0)
(51,8,0)
(27,25,0)
(48,37,0)
(31,0,0)
(52,26,0)
(5,28,0)
(37,38,0)
(28,53,0)
(8,51,0)
(8,40,0)
(55,32,0)
(44,46,0)
(3,31,0)
(7,58,0)
(43,21,0)
(22,38,0)
(10,36,0)
(17,28,0)
(11,57,0)
(19,11,0)
(25,27,0)
(47,5,0)
(50,27,0)
(58,30,0)
(33,4,0)
(34,42,0)
(0,31,0)
(15,25,0)
(16,42,0)
(57,11,0)
(32,5,0)
(30,9,0)
(28,5,0)
(21,46,0)
(26,5,1)
(51,1,1)
(7,8,1)
(16,46,1)
(26,38,1)
(54,48,1)
(37,54,1)
(6,35,1)
(0,31,1)
(1,42,1)
(32,55,1)
(22,37,1)
(42,46,1)
(32,5,1)
(17,25,1)
(28,17,1)
(6,18,1)
(55,6,1)
(19,0,1)
(21,23,1)
(44,45,1)
(28,53,1)
(11,57,1)
(36,39,1)
(23,43,1)
(25,27,1)
(46,11,1)
(45,36,1)
(42,34,1)
(15,47,1)
(37,5,1)
(31,3,1)
(26,52,1)
(30,13,1)
(5,28,1)
(35,21,1)
(58,24,1)
(11,19,1)
(18,26,1)
(21,30,1)
(39,10,1)
(8,51,1)
(41,44,1)
(27,50,1)
(52,12,1)
(7,42,1)
(29,6,1)
(50,15,1)
(13,58,1)
(12,38,1)
(38,22,1)
(3,41,1)
(24,7,1)
(32,46,1)
(21,46,1)
(48,5,1)
(43,30,1)
(58,46,1)
(47,45,1)
(29,32,1)
(34,16,1)
(43,45,2)
(3,45,2)
(19,0,2)
(28,17,2)
(44,45,2)
(46,11,2)
(11,57,2)
(38,45,2)
(12,45,2)
(48,45,2)
(17,45,2)
(28,45,2)
(42,45,2)
(5,45,2)
(41,45,2)
(21,30,2)
(26,5,2)
(0,31,2)
(32,5,2)
(28,53,2)
(54,45,2)
(8,51,2)
(13,45,2)
(18,26,2)
(46,45,2)
(30,45,2)
(5,28,2)
(18,45,2)
(26,45,2)
(55,6,2)
(51,42,2)
(15,45,2)
(7,45,2)
(47,45,2)
(23,45,2)
(19,45,2)
(58,46,2)
(42,46,2)
(31,45,2)
(35,45,2)
(21,45,2)
(35,21,2)
(11,19,2)
(32,6,2)
(25,27,2)
(25,45,2)
(37,5,2)
(32,46,2)
(11,45,2)
(8,42,2)
(21,46,2)
(37,45,2)
(17,25,2)
(24,45,2)
(22,45,2)
(52,45,2)
(26,38,2)
(34,45,2)
(16,45,2)
(0,45,2)
(58,45,2)
(50,45,2)
(1,42,2)
(27,45,2)
-----------------------------------
(0,100*sizeof(int)
(1,1)
(2,if(globalReturnsTrueOrFalse()
(3,int)
(4,)
(5,data = (int *)
(6,globalReturnsTrueOrFalse()
(7,data)
(8,exit(-1)
(9,)
(10,data)
(11,(int *)
(12,data)
(13,5)
(14,if (data == NULL)
(15,100)
(16,data)
(17,ALLOCA(100*sizeof(int)
(18,printIntLine(data[0])
(19,malloc(100*sizeof(int)
(20,)
(21,data[0])
(22,5)
(23,0)
(24,0)
(25,100*sizeof(int)
(26,data[0])
(27,sizeof(int)
(28,(int *)
(29,RET)
(30,data[0] = 5)
(31,sizeof(int)
(32,free(data)
(33,if(globalReturnsTrueOrFalse()
(34,NULL)
(35,printIntLine(data[0])
(36,data = NULL)
(37,data[0])
(38,data[0] = 5)
(39,NULL)
(40,)
(41,100)
(42,data == NULL)
(43,data)
(44,data)
(45,globalReturnsTrueOrFalse()
(46,data = (int *)
(47,data)
(48,data)
(49,)
(50,int)
(51,-1)
(52,0)
(53,int *)
(54,0)
(55,data)
(56,data)
(57,int *)
(58,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
