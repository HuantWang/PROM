-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_17_bad()
{
    int i,j;
    twoIntsStruct * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
17,19
20,21
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
32,33
32,34
33,34
36,37
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
54,55
55,56
55,57
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
81,82
82,83
82,84
83,84
83,85
84,85
84,86
85,86
90,91
91,92
91,93
92,93
94,95
95,96
95,97
96,97
99,100
99,101
99,102
99,103
100,101
101,102
101,103
102,103
105,106
105,107
106,107
109,110
110,111
112,113
-----nextToken-----
2,4,8,10,12,16,18,19,23,25,30,31,34,35,38,43,47,49,52,53,57,58,62,64,69,71,77,78,79,80,86,87,88,89,93,97,98,103,104,107,108,111,113
-----computeFrom-----
21,22
21,23
28,29
28,30
32,33
32,34
41,42
41,43
60,61
60,62
73,74
73,75
82,83
82,84
101,102
101,103
105,106
105,107
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_17_bad(){    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_17_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_17_bad
{    int i,j;    twoIntsStruct * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(23,3,0)
(60,35,0)
(62,54,0)
(23,13,0)
(16,32,0)
(33,29,0)
(26,0,0)
(42,32,0)
(46,62,0)
(1,16,0)
(3,29,0)
(17,30,0)
(30,36,0)
(44,29,0)
(31,32,0)
(7,6,0)
(36,29,0)
(28,38,0)
(20,0,0)
(42,30,0)
(16,1,0)
(12,18,0)
(50,13,0)
(52,26,0)
(15,61,0)
(38,10,0)
(54,33,0)
(54,62,0)
(13,32,0)
(21,22,0)
(2,42,0)
(24,22,0)
(4,49,0)
(55,4,0)
(30,42,0)
(8,22,0)
(53,28,0)
(48,32,0)
(37,49,0)
(35,0,0)
(45,61,0)
(56,48,0)
(49,4,0)
(57,23,0)
(14,22,0)
(32,29,0)
(32,16,0)
(58,6,0)
(13,23,0)
(62,32,0)
(19,3,0)
(6,61,0)
(38,28,0)
(33,54,0)
(39,36,0)
(59,26,0)
(47,13,0)
(51,22,0)
(34,22,0)
(5,8,0)
(41,62,0)
(4,16,0)
(27,0,0)
(11,8,0)
(18,61,0)
(25,42,0)
(9,48,0)
(16,4,0)
(16,1,1)
(41,36,1)
(54,62,1)
(33,54,1)
(13,50,1)
(49,37,1)
(7,18,1)
(60,26,1)
(52,35,1)
(27,20,1)
(20,6,1)
(37,55,1)
(17,42,1)
(45,8,1)
(13,32,1)
(7,61,1)
(39,30,1)
(12,33,1)
(23,13,1)
(26,59,1)
(6,58,1)
(19,23,1)
(62,32,1)
(56,9,1)
(25,2,1)
(3,19,1)
(2,3,1)
(42,32,1)
(16,4,1)
(48,32,1)
(9,32,1)
(11,5,1)
(52,0,1)
(35,60,1)
(18,12,1)
(55,31,1)
(38,28,1)
(62,46,1)
(48,56,1)
(31,6,1)
(15,45,1)
(30,17,1)
(18,61,1)
(57,13,1)
(40,26,1)
(6,61,1)
(42,25,1)
(8,11,1)
(53,48,1)
(23,57,1)
(47,48,1)
(0,27,1)
(35,0,1)
(61,15,1)
(46,41,1)
(50,47,1)
(26,0,1)
(47,38,1)
(59,52,1)
(4,49,1)
(30,42,1)
(28,53,1)
(32,16,1)
(58,7,1)
(36,39,1)
(6,6,2)
(13,6,2)
(9,6,2)
(32,16,2)
(52,26,2)
(57,6,2)
(46,6,2)
(16,1,2)
(4,49,2)
(31,6,2)
(36,6,2)
(35,0,2)
(2,6,2)
(18,61,2)
(16,6,2)
(38,28,2)
(18,6,2)
(54,6,2)
(39,6,2)
(35,26,2)
(42,6,2)
(58,6,2)
(6,61,2)
(12,6,2)
(17,6,2)
(28,48,2)
(7,6,2)
(53,48,2)
(42,32,2)
(23,6,2)
(48,6,2)
(54,62,2)
(37,6,2)
(26,26,2)
(62,32,2)
(16,4,2)
(4,6,2)
(32,6,2)
(47,6,2)
(33,6,2)
(62,6,2)
(26,0,2)
(3,6,2)
(48,32,2)
(55,6,2)
(30,42,2)
(13,32,2)
(25,6,2)
(38,48,2)
(49,6,2)
(59,26,2)
(50,6,2)
(60,26,2)
(30,6,2)
(56,6,2)
(33,54,2)
(23,13,2)
(41,6,2)
(19,6,2)
-----------------------------------
(0,j = 0)
(1,twoIntsStruct *)
(2,data)
(3,data[0].intOne = 0)
(4,calloc(100, sizeof(twoIntsStruct)
(5,data)
(6,i < 1)
(7,i)
(8,data = NULL)
(9,data)
(10,)
(11,NULL)
(12,i)
(13,data[0])
(14,data)
(15,0)
(16,(twoIntsStruct *)
(17,intTwo)
(18,i++)
(19,0)
(20,j)
(21,j)
(22,)
(23,data[0].intOne)
(24,i)
(25,0)
(26,j < 1)
(27,0)
(28,-1)
(29,)
(30,data[0].intTwo)
(31,data)
(32,data = (twoIntsStruct *)
(33,printStructLine(&data[0])
(34,for(j = 0; j < 1; j++)
(35,j++)
(36,data[0].intTwo = 0)
(37,twoIntsStruct)
(38,exit(-1)
(39,0)
(40,RET)
(41,data)
(42,data[0])
(43, sizeof(twoIntsStruct)
(44,if (data == NULL)
(45,i)
(46,0)
(47,data)
(48,data == NULL)
(49,sizeof(twoIntsStruct)
(50,0)
(51,for(i = 0; i < 1; i++)
(52,j)
(53,1)
(54,&data[0])
(55,100)
(56,NULL)
(57,intOne)
(58,1)
(59,1)
(60,j)
(61,i = 0)
(62,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
