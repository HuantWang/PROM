-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_01_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,59,62,63,64
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_01_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_malloc_01_bad()
CWE401_Memory_Leak__int_malloc_01_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
;
-----joern-----
(8,22,0)
(6,14,0)
(18,29,0)
(4,23,0)
(12,9,0)
(31,22,0)
(7,2,0)
(8,15,0)
(27,13,0)
(21,23,0)
(28,22,0)
(0,8,0)
(23,22,0)
(14,13,0)
(3,2,0)
(13,14,0)
(31,6,0)
(23,16,0)
(10,14,0)
(11,16,0)
(31,5,0)
(8,16,0)
(15,8,0)
(22,31,0)
(9,22,0)
(22,2,0)
(30,25,0)
(26,29,0)
(6,31,0)
(1,8,0)
(16,2,0)
(29,26,0)
(25,2,0)
(26,17,0)
(14,6,0)
(20,25,0)
(19,9,0)
(15,2,0)
(5,31,0)
(20,30,1)
(31,6,1)
(21,4,1)
(1,16,1)
(14,13,1)
(4,9,1)
(31,5,1)
(4,26,1)
(0,1,1)
(6,14,1)
(27,10,1)
(9,22,1)
(28,25,1)
(10,28,1)
(13,27,1)
(12,19,1)
(22,31,1)
(19,22,1)
(8,0,1)
(26,29,1)
(24,15,1)
(29,18,1)
(23,21,1)
(8,22,1)
(18,9,1)
(15,8,1)
(9,12,1)
(25,20,1)
(8,16,1)
(16,11,1)
(23,22,1)
(11,23,1)
(26,29,2)
(22,31,2)
(29,9,2)
(8,22,2)
(31,5,2)
(26,9,2)
(8,16,2)
(31,6,2)
(18,9,2)
(6,14,2)
(9,22,2)
(23,22,2)
(15,8,2)
(14,13,2)
-----------------------------------
(0,0)
(1,data)
(2,)
(3,data)
(4,data)
(5,int *)
(6,malloc(100*sizeof(int)
(7,if (data == NULL)
(8,data[0])
(9,data == NULL)
(10,100)
(11,5)
(12,NULL)
(13,sizeof(int)
(14,100*sizeof(int)
(15,printIntLine(data[0])
(16,data[0] = 5)
(17,)
(18,1)
(19,data)
(20,NULL)
(21,0)
(22,data = (int *)
(23,data[0])
(24,RET)
(25,data = NULL)
(26,exit(-1)
(27,int)
(28,data)
(29,-1)
(30,data)
(31,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
