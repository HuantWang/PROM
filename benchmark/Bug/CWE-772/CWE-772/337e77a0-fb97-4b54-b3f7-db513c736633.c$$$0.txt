-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_03_bad()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,68,69,71
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
41,42
41,43
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_03_bad(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_03_bad()
CWE401_Memory_Leak__wchar_t_calloc_03_bad
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,32,0)
(32,18,0)
(4,33,0)
(29,15,0)
(24,9,0)
(8,9,0)
(22,27,0)
(24,29,0)
(6,19,0)
(2,15,0)
(1,6,0)
(32,25,0)
(12,13,0)
(15,6,0)
(31,14,0)
(29,9,0)
(7,21,0)
(17,24,0)
(11,19,0)
(13,27,0)
(19,6,0)
(20,29,0)
(5,13,0)
(3,27,0)
(15,29,0)
(30,14,0)
(6,15,0)
(16,18,0)
(21,29,0)
(0,33,0)
(23,21,0)
(10,27,0)
(15,2,0)
(21,29,1)
(26,14,1)
(12,5,1)
(11,1,1)
(0,13,1)
(4,0,1)
(30,33,1)
(24,29,1)
(23,7,1)
(19,11,1)
(33,4,1)
(13,12,1)
(15,6,1)
(31,30,1)
(16,21,1)
(6,19,1)
(15,2,1)
(18,16,1)
(21,23,1)
(1,20,1)
(30,24,1)
(17,21,1)
(14,31,1)
(17,32,1)
(29,15,1)
(20,33,1)
(7,29,1)
(24,17,1)
(32,18,1)
(32,21,2)
(19,33,2)
(21,33,2)
(6,19,2)
(16,21,2)
(15,33,2)
(1,33,2)
(32,18,2)
(11,33,2)
(18,21,2)
(6,33,2)
(17,33,2)
(29,33,2)
(24,33,2)
(29,15,2)
(20,33,2)
(7,33,2)
(15,6,2)
(21,29,2)
(15,2,2)
(24,29,2)
(23,33,2)
-----------------------------------
(0,5)
(1,100)
(2,wchar_t *)
(3,data)
(4,5)
(5,data)
(6,calloc(100, sizeof(wchar_t)
(7,data)
(8,if (data == NULL)
(9,)
(10,if(5==5)
(11,wchar_t)
(12,NULL)
(13,data = NULL)
(14,5==5)
(15,(wchar_t *)
(16,1)
(17,data)
(18,-1)
(19,sizeof(wchar_t)
(20,data)
(21,data == NULL)
(22,if(5==5)
(23,NULL)
(24,printWLine(data)
(25,)
(26,RET)
(27,)
(28, sizeof(wchar_t)
(29,data = (wchar_t *)
(30,5)
(31,5)
(32,exit(-1)
(33,5==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
