-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_32_bad()
{
    int64_t * data;
    int64_t * *dataPtr1 = &data;
    int64_t * *dataPtr2 = &data;
    data = NULL;
    {
        int64_t * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int64_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
106,107
108,109
110,111
110,112
111,112
112,113
112,114
113,114
115,116
115,117
115,118
118,119
119,120
120,121
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,73,74,78,80,85,87,92,93,94,98,101,102,107,109,114,116,117,121,122
-----computeFrom-----
38,39
38,40
56,57
56,58
68,69
68,70
76,77
76,78
89,90
89,91
104,105
104,106
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_32_bad(){    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    data = NULL;    {        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_32_bad()
CWE401_Memory_Leak__int64_t_malloc_32_bad
{    int64_t * data;    int64_t * *dataPtr1 = &data;    int64_t * *dataPtr2 = &data;    data = NULL;    {        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }    {        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
int64_t * *dataPtr1 = &data;
int64_t * *dataPtr1 = &data;
int64_t
int64_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int64_t * *dataPtr2 = &data;
int64_t * *dataPtr2 = &data;
int64_t
int64_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int64_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        *dataPtr1 = data;    }
int64_t * data = *dataPtr1;
int64_t * data = *dataPtr1;
int64_t
int64_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int64_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int64_t * data = *dataPtr2;
int64_t * data = *dataPtr2;
int64_t
int64_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(10,11,0)
(46,11,0)
(8,39,0)
(33,24,0)
(14,51,0)
(34,21,0)
(45,21,0)
(35,25,0)
(3,5,0)
(21,42,0)
(25,39,0)
(30,25,0)
(36,39,0)
(31,39,0)
(41,50,0)
(6,25,0)
(0,16,0)
(1,4,0)
(24,32,0)
(11,39,0)
(44,6,0)
(37,46,0)
(42,53,0)
(12,50,0)
(19,26,0)
(28,41,0)
(41,28,0)
(14,4,0)
(21,25,0)
(18,41,0)
(51,16,0)
(22,39,0)
(29,2,0)
(7,46,0)
(27,44,0)
(46,37,0)
(5,2,0)
(53,42,0)
(51,39,0)
(6,44,0)
(11,10,0)
(52,25,0)
(20,44,0)
(16,51,0)
(2,25,0)
(2,21,0)
(24,33,0)
(48,10,0)
(37,25,0)
(50,41,0)
(23,14,0)
(42,21,0)
(38,51,0)
(4,31,0)
(26,39,0)
(15,11,0)
(5,11,0)
(47,34,0)
(42,28,0)
(28,42,0)
(4,14,0)
(17,31,0)
(9,37,0)
(44,21,0)
(13,34,0)
(40,26,0)
(49,33,0)
(14,51,1)
(45,37,1)
(33,49,1)
(27,30,1)
(4,14,1)
(23,1,1)
(46,7,1)
(14,23,1)
(48,15,1)
(51,16,1)
(29,5,1)
(50,12,1)
(41,50,1)
(5,3,1)
(42,28,1)
(0,38,1)
(18,45,1)
(26,40,1)
(34,13,1)
(42,53,1)
(37,46,1)
(44,20,1)
(47,21,1)
(38,11,1)
(16,0,1)
(46,11,1)
(2,21,1)
(28,41,1)
(49,34,1)
(10,48,1)
(30,34,1)
(40,19,1)
(5,11,1)
(13,47,1)
(44,21,1)
(9,26,1)
(1,2,1)
(7,9,1)
(11,10,1)
(24,33,1)
(21,42,1)
(19,51,1)
(12,18,1)
(20,27,1)
(34,21,1)
(30,24,1)
(43,4,1)
(2,29,1)
(6,44,1)
(3,6,1)
(46,11,2)
(24,34,2)
(2,21,2)
(49,34,2)
(51,16,2)
(34,21,2)
(24,33,2)
(11,10,2)
(5,11,2)
(33,34,2)
(37,46,2)
(42,53,2)
(21,42,2)
(44,21,2)
(42,28,2)
(6,44,2)
(14,51,2)
(28,41,2)
(4,14,2)
(41,50,2)
-----------------------------------
(0,data)
(1,data)
(2,*dataPtr1 = data)
(3,dataPtr1)
(4,* data = *dataPtr2)
(5,*dataPtr1)
(6,printLongLongLine(data[0])
(7,dataPtr1)
(8,dataPtr2)
(9,data)
(10,&data)
(11,* *dataPtr1 = &data)
(12,int64_t)
(13,NULL)
(14,*dataPtr2)
(15,dataPtr1)
(16,&data)
(17,data)
(18,100)
(19,data)
(20,0)
(21,data = (int64_t *)
(22,dataPtr1)
(23,dataPtr2)
(24,exit(-1)
(25,)
(26,data = NULL)
(27,data)
(28,malloc(100*sizeof(int64_t)
(29,data)
(30,L)
(31,)
(32,)
(33,-1)
(34,data == NULL)
(35,data)
(36,data)
(37,* data = *dataPtr1)
(38,dataPtr2)
(39,)
(40,NULL)
(41,100*sizeof(int64_t)
(42,(int64_t *)
(43,RET)
(44,data[0])
(45,data)
(46,*dataPtr1)
(47,data)
(48,data)
(49,1)
(50,sizeof(int64_t)
(51,* *dataPtr2 = &data)
(52,if (data == NULL)
(53,int64_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
