-----label-----
1
-----code-----
static char * badSource(char * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
45,46
47,48
50,51
51,52
51,53
52,53
54,55
56,57
57,58
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,49,53,55,58
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
return data;
data
data
-----joern-----
(21,19,0)
(2,19,0)
(14,15,0)
(12,23,0)
(3,11,0)
(16,2,0)
(2,24,0)
(13,22,0)
(20,3,0)
(25,22,0)
(16,23,0)
(22,11,0)
(5,10,0)
(2,16,0)
(8,19,0)
(18,23,0)
(22,19,0)
(19,10,0)
(21,10,0)
(6,3,0)
(17,21,0)
(5,11,0)
(3,19,0)
(23,12,0)
(9,14,0)
(1,9,0)
(5,19,0)
(3,10,0)
(19,2,0)
(24,2,0)
(7,11,0)
(4,21,0)
(14,9,0)
(0,12,0)
(22,10,0)
(23,16,0)
(26,5,0)
(19,11,0)
(12,0,1)
(5,19,1)
(16,23,1)
(19,10,1)
(21,4,1)
(14,9,1)
(13,25,1)
(19,2,1)
(21,19,1)
(20,3,1)
(9,1,1)
(3,10,1)
(25,21,1)
(3,6,1)
(23,12,1)
(18,8,1)
(26,22,1)
(21,10,1)
(22,10,1)
(6,5,1)
(3,19,1)
(1,21,1)
(22,19,1)
(4,17,1)
(17,19,1)
(22,13,1)
(0,18,1)
(2,16,1)
(2,24,1)
(25,14,1)
(5,26,1)
(5,10,1)
(19,10,2)
(3,10,2)
(14,21,2)
(22,10,2)
(14,9,2)
(22,19,2)
(21,19,2)
(9,21,2)
(2,16,2)
(2,24,2)
(20,3,2)
(3,19,2)
(5,19,2)
(5,10,2)
(19,2,2)
(16,23,2)
(21,10,2)
(23,12,2)
(1,21,2)
-----------------------------------
(0,char)
(1,1)
(2,(char *)
(3,return data;)
(4,NULL)
(5,printLine(data)
(6,data)
(7,if (data == NULL)
(8,data)
(9,-1)
(10,char * data)
(11,)
(12,sizeof(char)
(13,"A String")
(14,exit(-1)
(15,)
(16,malloc(100*sizeof(char)
(17,data)
(18,100)
(19,data = (char *)
(20,RET)
(21,data == NULL)
(22,strcpy(data, "A String")
(23,100*sizeof(char)
(24,char *)
(25,data)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
