-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_10_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,86
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_10_bad(){    twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_10_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_10_bad
{    twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(44,33,0)
(12,8,0)
(10,11,0)
(41,45,0)
(42,46,0)
(13,17,0)
(3,17,0)
(46,12,0)
(44,5,0)
(37,17,0)
(22,27,0)
(12,46,0)
(17,3,0)
(11,7,0)
(18,3,0)
(28,34,0)
(43,22,0)
(23,17,0)
(16,5,0)
(14,37,0)
(3,34,0)
(21,0,0)
(27,22,0)
(29,0,0)
(35,14,0)
(30,23,0)
(2,45,0)
(4,45,0)
(38,27,0)
(46,17,0)
(3,18,0)
(31,22,0)
(32,37,0)
(8,12,0)
(40,46,0)
(34,28,0)
(20,7,0)
(27,11,0)
(5,44,0)
(1,23,0)
(25,24,0)
(17,7,0)
(22,17,0)
(24,7,0)
(6,34,0)
(8,7,0)
(14,24,0)
(0,45,0)
(26,37,0)
(37,14,0)
(34,3,0)
(9,28,0)
(10,27,1)
(22,17,1)
(46,17,1)
(14,37,1)
(28,9,1)
(12,46,1)
(6,13,1)
(15,8,1)
(31,43,1)
(11,10,1)
(43,23,1)
(27,22,1)
(24,25,1)
(9,6,1)
(8,12,1)
(13,19,1)
(23,17,1)
(1,30,1)
(26,11,1)
(30,17,1)
(5,16,1)
(42,24,1)
(27,38,1)
(3,18,1)
(14,35,1)
(15,19,1)
(22,31,1)
(23,1,1)
(35,37,1)
(46,40,1)
(44,5,1)
(0,29,1)
(25,14,1)
(37,32,1)
(17,3,1)
(29,21,1)
(38,22,1)
(3,34,1)
(37,17,1)
(19,0,1)
(40,42,1)
(39,15,1)
(43,44,1)
(16,23,1)
(34,28,1)
(32,26,1)
(44,23,2)
(14,19,2)
(9,19,2)
(23,17,2)
(28,19,2)
(32,19,2)
(3,18,2)
(23,19,2)
(17,3,2)
(34,19,2)
(27,22,2)
(30,19,2)
(44,5,2)
(46,17,2)
(8,19,2)
(1,19,2)
(14,37,2)
(26,19,2)
(25,19,2)
(6,19,2)
(42,19,2)
(22,19,2)
(37,19,2)
(16,23,2)
(35,19,2)
(8,12,2)
(3,34,2)
(43,19,2)
(46,19,2)
(17,19,2)
(3,19,2)
(12,46,2)
(27,19,2)
(40,19,2)
(12,19,2)
(22,17,2)
(10,19,2)
(24,19,2)
(38,19,2)
(31,19,2)
(37,17,2)
(11,19,2)
(34,28,2)
(13,19,2)
(5,23,2)
-----------------------------------
(0,data = NULL)
(1,NULL)
(2,if(globalTrue)
(3,(twoIntsStruct *)
(4,if(globalTrue)
(5,-1)
(6,100)
(7,)
(8,printStructLine(&data[0])
(9,twoIntsStruct)
(10,0)
(11,data[0].intOne = 0)
(12,&data[0])
(13,data)
(14,data[0].intTwo)
(15,globalTrue)
(16,1)
(17,data = (twoIntsStruct *)
(18,twoIntsStruct *)
(19,globalTrue)
(20,if (data == NULL)
(21,data)
(22,data[0])
(23,data == NULL)
(24,data[0].intTwo = 0)
(25,0)
(26,data)
(27,data[0].intOne)
(28,sizeof(twoIntsStruct)
(29,NULL)
(30,data)
(31,0)
(32,0)
(33,)
(34,calloc(100, sizeof(twoIntsStruct)
(35,intTwo)
(36, sizeof(twoIntsStruct)
(37,data[0])
(38,intOne)
(39,RET)
(40,0)
(41,data)
(42,data)
(43,data)
(44,exit(-1)
(45,)
(46,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
