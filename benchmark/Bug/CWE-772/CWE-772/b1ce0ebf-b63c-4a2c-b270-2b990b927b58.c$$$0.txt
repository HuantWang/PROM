-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_02_bad()
{
    if(1)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,48,49,50,54,57,58,62,65,67,70,72,75,78,79,83,85,91,92,93,97,100,101,105,107
-----computeFrom-----
25,26
25,27
32,33
32,34
45,46
45,47
60,61
60,62
73,74
73,75
81,82
81,83
88,89
88,90
-----guardedBy-----
83,107
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_02_bad(){    if(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_02_bad()
CWE401_Memory_Leak__malloc_realloc_int_02_bad
{    if(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
1
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(42,22,0)
(30,11,0)
(17,10,0)
(27,45,0)
(12,54,0)
(35,44,0)
(44,49,0)
(55,7,0)
(9,32,0)
(54,32,0)
(37,5,0)
(38,1,0)
(54,30,0)
(32,7,0)
(15,20,0)
(31,32,0)
(44,32,0)
(32,44,0)
(21,42,0)
(20,51,0)
(5,6,0)
(1,7,0)
(50,43,0)
(24,9,0)
(40,9,0)
(13,45,0)
(51,7,0)
(31,11,0)
(49,44,0)
(0,41,0)
(14,5,0)
(20,32,0)
(6,43,0)
(1,38,0)
(16,6,0)
(43,50,0)
(13,47,0)
(5,51,0)
(42,21,0)
(39,21,0)
(45,13,0)
(33,20,0)
(57,20,0)
(29,7,0)
(38,6,0)
(58,46,0)
(36,7,0)
(38,51,0)
(20,30,0)
(52,51,0)
(49,6,0)
(53,31,0)
(41,56,0)
(25,30,0)
(20,57,0)
(57,11,0)
(43,6,0)
(3,38,0)
(56,41,0)
(7,28,0)
(49,56,0)
(47,13,0)
(48,10,0)
(26,13,0)
(2,49,0)
(19,56,0)
(6,7,0)
(43,47,0)
(18,32,0)
(23,54,0)
(47,43,0)
(4,38,0)
(10,6,0)
(44,35,0)
(56,49,0)
(3,4,1)
(9,24,1)
(52,5,1)
(47,13,1)
(27,26,1)
(34,8,1)
(24,40,1)
(54,32,1)
(42,21,1)
(41,0,1)
(10,17,1)
(48,6,1)
(15,33,1)
(44,49,1)
(6,43,1)
(45,27,1)
(53,57,1)
(0,19,1)
(44,35,1)
(1,38,1)
(2,18,1)
(23,9,1)
(13,45,1)
(33,30,1)
(16,8,1)
(38,51,1)
(21,39,1)
(34,9,1)
(4,51,1)
(38,3,1)
(20,51,1)
(19,2,1)
(43,47,1)
(31,53,1)
(20,32,1)
(30,25,1)
(40,32,1)
(49,6,1)
(31,32,1)
(14,37,1)
(43,50,1)
(34,31,1)
(17,48,1)
(38,6,1)
(5,14,1)
(32,44,1)
(57,20,1)
(49,56,1)
(9,32,1)
(39,10,1)
(20,30,1)
(10,6,1)
(37,10,1)
(56,41,1)
(18,1,1)
(5,6,1)
(37,42,1)
(20,15,1)
(12,23,1)
(26,16,1)
(54,12,1)
(51,52,1)
(25,54,1)
(10,8,2)
(24,8,2)
(56,8,2)
(12,9,2)
(20,30,2)
(1,38,2)
(32,44,2)
(49,56,2)
(13,8,2)
(3,8,2)
(49,8,2)
(44,35,2)
(31,32,2)
(25,9,2)
(31,9,2)
(33,9,2)
(30,9,2)
(13,45,2)
(15,9,2)
(20,9,2)
(43,50,2)
(38,51,2)
(9,8,2)
(38,6,2)
(26,8,2)
(6,8,2)
(47,8,2)
(48,8,2)
(0,8,2)
(52,8,2)
(9,32,2)
(27,8,2)
(56,41,2)
(2,8,2)
(45,8,2)
(51,8,2)
(47,13,2)
(19,8,2)
(20,32,2)
(43,47,2)
(57,20,2)
(17,8,2)
(39,10,2)
(5,6,2)
(14,8,2)
(49,6,2)
(16,8,2)
(44,49,2)
(53,9,2)
(4,8,2)
(43,8,2)
(44,8,2)
(42,21,2)
(20,51,2)
(57,9,2)
(54,32,2)
(32,8,2)
(54,9,2)
(37,8,2)
(41,8,2)
(42,10,2)
(10,6,2)
(38,8,2)
(40,8,2)
(18,8,2)
(5,8,2)
(1,8,2)
(21,10,2)
(23,9,2)
(6,43,2)
-----------------------------------
(0,int)
(1,printIntLine(data[0])
(2,data)
(3,0)
(4,data)
(5,data[0])
(6,* data = (int *)
(7,)
(8,1)
(9,data != NULL)
(10,data == NULL)
(11,)
(12,0)
(13,100*sizeof(int)
(14,0)
(15,0)
(16,data)
(17,NULL)
(18,data)
(19,130000)
(20,data[0])
(21,-1)
(22,)
(23,data)
(24,NULL)
(25,10)
(26,100)
(27,int)
(28,)
(29,if (data != NULL)
(30,data[0] = 10)
(31,free(data)
(32,data = (int *)
(33,data)
(34,RET)
(35,int *)
(36,data)
(37,data)
(38,data[0])
(39,1)
(40,data)
(41,sizeof(int)
(42,exit(-1)
(43,(int *)
(44,(int *)
(45,sizeof(int)
(46,)
(47,malloc(100*sizeof(int)
(48,data)
(49,realloc(data, (130000)
(50,int *)
(51,data[0] = 5)
(52,5)
(53,data)
(54,data[0])
(55,if (data == NULL)
(56,(130000)
(57,printIntLine(data[0])
(58,if(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
