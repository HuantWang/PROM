-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_realloc_12_bad()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)realloc(data, 100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
66,67
67,68
67,69
68,69
70,71
70,72
71,72
74,75
74,76
74,77
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
86,87
88,89
88,90
90,91
91,92
91,93
92,93
95,96
96,97
96,98
97,98
97,99
98,99
102,103
103,104
103,105
104,105
106,107
106,108
107,108
110,111
110,112
110,113
111,112
112,113
114,115
116,117
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,63,64,65,69,72,73,78,82,84,87,89,93,94,99,100,101,105,108,109,113,115,120,122
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
76,77
76,78
88,89
88,90
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_realloc_12_bad(){    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int64_t_realloc_12_bad()
CWE401_Memory_Leak__int64_t_realloc_12_bad
{    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(46,42,0)
(5,19,0)
(1,0,0)
(27,49,0)
(6,3,0)
(26,13,0)
(0,41,0)
(39,28,0)
(36,33,0)
(33,42,0)
(48,43,0)
(19,0,0)
(30,18,0)
(46,20,0)
(50,30,0)
(0,1,0)
(10,13,0)
(43,42,0)
(43,19,0)
(6,1,0)
(49,46,0)
(9,29,0)
(46,49,0)
(40,14,0)
(29,19,0)
(33,23,0)
(43,11,0)
(8,1,0)
(15,27,0)
(42,51,0)
(45,30,0)
(28,35,0)
(0,19,0)
(21,33,0)
(3,6,0)
(2,51,0)
(41,0,0)
(19,14,0)
(22,42,0)
(16,18,0)
(25,27,0)
(42,46,0)
(1,6,0)
(44,3,0)
(38,18,0)
(32,29,0)
(35,28,0)
(20,46,0)
(7,28,0)
(27,25,0)
(23,51,0)
(37,6,0)
(10,4,0)
(23,33,0)
(35,14,0)
(17,18,0)
(13,10,0)
(24,25,0)
(49,27,0)
(28,19,0)
(1,30,0)
(31,14,0)
(24,15,1)
(39,7,1)
(43,19,1)
(0,1,1)
(7,31,1)
(42,46,1)
(9,32,1)
(23,33,1)
(22,34,1)
(1,6,1)
(21,36,1)
(43,48,1)
(10,13,1)
(5,34,1)
(6,3,1)
(48,47,1)
(2,42,1)
(35,28,1)
(47,35,1)
(33,21,1)
(1,30,1)
(25,24,1)
(19,0,1)
(3,44,1)
(44,37,1)
(49,27,1)
(29,19,1)
(34,30,1)
(31,29,1)
(31,10,1)
(50,45,1)
(12,43,1)
(26,29,1)
(47,23,1)
(27,25,1)
(13,26,1)
(29,9,1)
(8,5,1)
(32,19,1)
(28,19,1)
(36,2,1)
(28,39,1)
(0,41,1)
(43,42,1)
(30,50,1)
(15,22,1)
(37,8,1)
(33,42,1)
(46,49,1)
(12,47,1)
(46,20,1)
(1,6,2)
(3,34,2)
(43,47,2)
(35,28,2)
(19,34,2)
(25,34,2)
(10,29,2)
(33,42,2)
(33,34,2)
(35,34,2)
(0,41,2)
(21,34,2)
(0,34,2)
(27,25,2)
(46,49,2)
(49,27,2)
(36,34,2)
(48,47,2)
(43,19,2)
(42,46,2)
(49,34,2)
(19,0,2)
(9,34,2)
(44,34,2)
(8,34,2)
(10,13,2)
(46,34,2)
(0,1,2)
(1,34,2)
(31,34,2)
(23,34,2)
(42,34,2)
(46,20,2)
(6,34,2)
(15,34,2)
(22,34,2)
(28,19,2)
(23,33,2)
(27,34,2)
(13,29,2)
(39,34,2)
(1,30,2)
(37,34,2)
(24,34,2)
(28,34,2)
(6,3,2)
(32,34,2)
(43,42,2)
(5,34,2)
(29,34,2)
(26,29,2)
(7,34,2)
(2,34,2)
(29,19,2)
-----------------------------------
(0,(int64_t *)
(1,realloc(data, 100*sizeof(int64_t)
(2,L)
(3,sizeof(int64_t)
(4,)
(5,data)
(6,100*sizeof(int64_t)
(7,data)
(8,data)
(9,NULL)
(10,exit(-1)
(11,)
(12,RET)
(13,-1)
(14,)
(15,100)
(16,if(globalReturnsTrueOrFalse()
(17,data)
(18,)
(19,data = (int64_t *)
(20,int64_t *)
(21,0)
(22,data)
(23,printLongLongLine(data[0])
(24,int64_t)
(25,sizeof(int64_t)
(26,1)
(27,100*sizeof(int64_t)
(28,data[0])
(29,data == NULL)
(30,data = NULL)
(31,L)
(32,data)
(33,data[0])
(34,globalReturnsTrueOrFalse()
(35,printLongLongLine(data[0])
(36,data)
(37,100)
(38,if(globalReturnsTrueOrFalse()
(39,0)
(40,if (data == NULL)
(41,int64_t *)
(42,data = (int64_t *)
(43,free(data)
(44,int64_t)
(45,data)
(46,(int64_t *)
(47,globalReturnsTrueOrFalse()
(48,data)
(49,ALLOCA(100*sizeof(int64_t)
(50,NULL)
(51,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
