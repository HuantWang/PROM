-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_01_bad()
{
    {
        twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            data[0].intOne = 1;
            data[0].intTwo = 1;
            printStructLine(&data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
6,13
7,8
8,9
8,10
9,10
11,12
11,13
11,14
14,15
15,16
15,17
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
28,29
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
46,48
47,48
47,49
48,49
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
62,63
63,64
63,65
64,65
66,67
67,68
67,69
68,69
71,72
72,73
72,74
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
81,84
82,83
84,85
86,87
86,88
87,88
89,90
90,91
90,92
91,92
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
100,104
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
119,120
120,121
120,122
121,122
123,124
124,125
124,126
125,126
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,10,12,13,18,20,23,25,29,30,34,36,41,43,49,50,51,52,58,59,60,61,65,69,70,74,78,80,83,85,88,92,93,97,99,106,107,108,109,115,116,117,118,122,126,127,131,133
-----computeFrom-----
24,25
24,26
32,33
32,34
45,46
45,47
54,55
54,56
72,73
72,74
86,87
86,88
95,96
95,97
102,103
102,104
111,112
111,113
-----guardedBy-----
97,133
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_01_bad(){    {        twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine(&data[0]);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_01_bad()
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_01_bad
{    {        twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine(&data[0]);            free(data);        }    }}
{        twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine(&data[0]);            free(data);        }    }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data != NULL)        {            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine(&data[0]);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            data[0].intOne = 1;            data[0].intTwo = 1;            printStructLine(&data[0]);            free(data);        }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(27,5,0)
(17,52,0)
(75,60,0)
(34,20,0)
(27,24,0)
(1,55,0)
(34,26,0)
(46,14,0)
(18,42,0)
(33,71,0)
(16,55,0)
(52,1,0)
(31,40,0)
(53,62,0)
(72,6,0)
(28,22,0)
(65,62,0)
(8,22,0)
(12,58,0)
(29,20,0)
(71,62,0)
(58,40,0)
(22,68,0)
(35,26,0)
(25,31,0)
(7,67,0)
(51,6,0)
(43,62,0)
(25,71,0)
(31,25,0)
(23,55,0)
(48,62,0)
(5,27,0)
(73,22,0)
(65,44,0)
(67,7,0)
(2,60,0)
(59,22,0)
(60,2,0)
(1,22,0)
(30,42,0)
(39,52,0)
(2,19,0)
(6,12,0)
(6,62,0)
(12,6,0)
(69,49,0)
(30,23,0)
(55,1,0)
(71,25,0)
(62,22,0)
(7,28,0)
(5,1,0)
(20,22,0)
(11,7,0)
(66,43,0)
(67,1,0)
(49,46,0)
(38,43,0)
(56,5,0)
(49,1,0)
(44,70,0)
(5,56,0)
(70,40,0)
(64,67,0)
(32,53,0)
(24,27,0)
(4,30,0)
(36,65,0)
(41,26,0)
(55,23,0)
(63,58,0)
(50,70,0)
(54,12,0)
(21,1,0)
(37,28,0)
(26,34,0)
(46,49,0)
(47,34,0)
(23,30,0)
(42,30,0)
(10,65,0)
(13,49,0)
(14,46,0)
(74,0,0)
(62,27,0)
(26,1,0)
(56,0,0)
(57,71,0)
(9,56,0)
(53,40,0)
(0,56,0)
(14,22,0)
(27,62,0)
(44,65,0)
(3,5,0)
(55,16,0)
(61,44,0)
(15,67,0)
(34,47,1)
(60,75,1)
(5,1,1)
(55,23,1)
(41,28,1)
(46,49,1)
(45,53,1)
(29,34,1)
(62,27,1)
(7,67,1)
(37,7,1)
(15,64,1)
(1,55,1)
(20,29,1)
(13,69,1)
(0,74,1)
(66,62,1)
(18,4,1)
(53,62,1)
(45,43,1)
(3,48,1)
(58,63,1)
(32,31,1)
(12,54,1)
(17,1,1)
(44,61,1)
(70,50,1)
(38,66,1)
(6,51,1)
(23,30,1)
(57,58,1)
(4,21,1)
(42,18,1)
(43,38,1)
(7,11,1)
(34,26,1)
(52,39,1)
(6,62,1)
(14,46,1)
(11,67,1)
(47,26,1)
(26,35,1)
(64,2,1)
(55,16,1)
(51,72,1)
(69,20,1)
(50,44,1)
(61,65,1)
(71,33,1)
(53,32,1)
(36,43,1)
(30,42,1)
(9,3,1)
(48,14,1)
(75,52,1)
(27,5,1)
(63,12,1)
(56,0,1)
(31,25,1)
(65,62,1)
(49,1,1)
(44,65,1)
(35,41,1)
(49,13,1)
(12,6,1)
(33,57,1)
(71,62,1)
(72,70,1)
(26,1,1)
(25,71,1)
(5,56,1)
(27,24,1)
(65,10,1)
(28,37,1)
(74,9,1)
(2,60,1)
(10,36,1)
(52,1,1)
(67,15,1)
(54,6,1)
(43,62,1)
(67,1,1)
(39,17,1)
(64,52,1)
(5,1,2)
(67,1,2)
(71,62,2)
(62,27,2)
(2,60,2)
(10,43,2)
(44,65,2)
(27,24,2)
(43,62,2)
(23,30,2)
(46,49,2)
(53,62,2)
(27,5,2)
(60,52,2)
(14,46,2)
(1,55,2)
(75,52,2)
(6,43,2)
(12,43,2)
(52,1,2)
(5,56,2)
(2,52,2)
(31,43,2)
(57,43,2)
(71,43,2)
(55,23,2)
(70,43,2)
(72,43,2)
(25,71,2)
(65,62,2)
(25,43,2)
(12,6,2)
(65,43,2)
(44,43,2)
(51,43,2)
(7,67,2)
(31,25,2)
(33,43,2)
(30,42,2)
(58,43,2)
(53,43,2)
(54,43,2)
(61,43,2)
(36,43,2)
(55,16,2)
(32,43,2)
(63,43,2)
(6,62,2)
(50,43,2)
(34,26,2)
(26,1,2)
(49,1,2)
(56,0,2)
-----------------------------------
(0,sizeof(twoIntsStruct)
(1,* data = (twoIntsStruct *)
(2,exit(-1)
(3,data)
(4,100)
(5,realloc(data, (130000)
(6,data[0])
(7,data[0].intOne)
(8,if (data == NULL)
(9,130000)
(10,0)
(11,intOne)
(12,data[0].intTwo)
(13,0)
(14,printStructLine(&data[0])
(15,0)
(16,twoIntsStruct *)
(17,data)
(18,twoIntsStruct)
(19,)
(20,data[0].intTwo = 0)
(21,data)
(22,)
(23,malloc(100*sizeof(twoIntsStruct)
(24,twoIntsStruct *)
(25,&data[0])
(26,data[0])
(27,(twoIntsStruct *)
(28,data[0].intOne = 0)
(29,0)
(30,100*sizeof(twoIntsStruct)
(31,printStructLine(&data[0])
(32,data)
(33,0)
(34,data[0].intTwo)
(35,0)
(36,data)
(37,0)
(38,NULL)
(39,NULL)
(40,)
(41,data)
(42,sizeof(twoIntsStruct)
(43,data != NULL)
(44,data[0].intOne)
(45,RET)
(46,&data[0])
(47,intTwo)
(48,data)
(49,data[0])
(50,1)
(51,0)
(52,data == NULL)
(53,free(data)
(54,intTwo)
(55,(twoIntsStruct *)
(56,(130000)
(57,data)
(58,data[0].intTwo = 1)
(59,data)
(60,-1)
(61,intOne)
(62,data = (twoIntsStruct *)
(63,1)
(64,data)
(65,data[0])
(66,data)
(67,data[0])
(68,)
(69,data)
(70,data[0].intOne = 1)
(71,data[0])
(72,data)
(73,if (data != NULL)
(74,twoIntsStruct)
(75,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
