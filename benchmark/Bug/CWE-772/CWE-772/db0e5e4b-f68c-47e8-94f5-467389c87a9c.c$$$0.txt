-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_31_bad()
{
    char * data;
    data = NULL;
    {
        char myString[] = "myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = strdup(myString);
        /* Use data */
        printLine(data);
    }
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
20,22
22,23
22,24
22,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
42,44
42,45
43,44
44,45
44,46
46,47
46,48
46,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
55,58
58,59
59,60
-----nextToken-----
2,4,8,10,11,15,17,21,23,24,26,30,33,35,39,41,45,47,48,51,54,56,57,60,61
-----computeFrom-----
13,14
13,15
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_31_bad(){    char * data;    data = NULL;    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_31_bad()
CWE401_Memory_Leak__strdup_char_31_bad
{    char * data;    data = NULL;    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
{        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(0,25,0)
(3,5,0)
(21,10,0)
(13,8,0)
(5,11,0)
(15,16,0)
(2,22,0)
(8,2,0)
(8,25,0)
(18,25,0)
(11,16,0)
(14,5,0)
(25,12,0)
(7,22,0)
(23,11,0)
(19,12,0)
(1,18,0)
(9,11,0)
(20,16,0)
(22,25,0)
(5,16,0)
(16,12,0)
(6,2,0)
(2,8,0)
(24,22,0)
(10,12,0)
(11,8,0)
(17,10,0)
(18,8,0)
(6,13,1)
(14,11,1)
(18,1,1)
(2,6,1)
(5,3,1)
(4,5,1)
(3,14,1)
(2,22,1)
(11,23,1)
(18,8,1)
(8,2,1)
(11,8,1)
(1,8,1)
(7,24,1)
(9,18,1)
(23,9,1)
(13,22,1)
(24,10,1)
(17,21,1)
(10,17,1)
(5,11,1)
(22,7,1)
(5,11,2)
(8,2,2)
(2,22,2)
(18,8,2)
(11,8,2)
-----------------------------------
(0,myString)
(1,data)
(2,strdup(myString)
(3,dataCopy)
(4,RET)
(5,* data = dataCopy)
(6,myString)
(7,"myString")
(8,data = strdup(myString)
(9,dataCopy)
(10,data = NULL)
(11,* dataCopy = data)
(12,)
(13,data)
(14,data)
(15,dataCopy)
(16,)
(17,NULL)
(18,printLine(data)
(19,data)
(20,data)
(21,data)
(22,myString[] = "myString")
(23,data)
(24,myString)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
