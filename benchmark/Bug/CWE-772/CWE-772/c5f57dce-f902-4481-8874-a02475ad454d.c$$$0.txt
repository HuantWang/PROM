-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_31_bad()
{
    wchar_t * data;
    data = NULL;
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
20,22
22,23
22,24
22,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
42,44
42,45
43,44
44,45
44,46
46,47
46,48
46,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
55,58
58,59
59,60
-----nextToken-----
2,4,8,10,11,15,17,21,23,24,26,30,33,35,39,41,45,47,48,51,54,56,57,60,61
-----computeFrom-----
13,14
13,15
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_31_bad(){    wchar_t * data;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_31_bad()
CWE401_Memory_Leak__strdup_wchar_t_31_bad
{    wchar_t * data;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(9,14,0)
(18,10,0)
(1,10,0)
(1,15,0)
(12,17,0)
(6,17,0)
(3,19,0)
(13,1,0)
(7,13,0)
(0,16,0)
(19,8,0)
(14,1,0)
(17,13,0)
(15,8,0)
(4,19,0)
(14,15,0)
(16,8,0)
(11,16,0)
(2,1,0)
(17,16,0)
(20,13,0)
(5,8,0)
(10,1,0)
(13,16,0)
(22,15,0)
(9,1,1)
(14,9,1)
(4,3,1)
(7,14,1)
(6,12,1)
(10,18,1)
(19,4,1)
(14,1,1)
(21,17,1)
(1,10,1)
(20,7,1)
(17,6,1)
(12,13,1)
(13,20,1)
(18,2,1)
(13,1,1)
(2,22,1)
(17,13,1)
(22,19,1)
(17,13,2)
(13,1,2)
(14,1,2)
(1,10,2)
-----------------------------------
(0,dataCopy)
(1,data = wcsdup(myString)
(2,data)
(3,data)
(4,NULL)
(5,data)
(6,dataCopy)
(7,dataCopy)
(8,)
(9,data)
(10,wcsdup(myString)
(11,data)
(12,data)
(13,* dataCopy = data)
(14,printWLine(data)
(15,)
(16,)
(17,* data = dataCopy)
(18,myString)
(19,data = NULL)
(20,data)
(21,RET)
(22,"myString")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
