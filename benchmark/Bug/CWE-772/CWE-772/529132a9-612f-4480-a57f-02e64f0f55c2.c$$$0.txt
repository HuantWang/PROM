-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_31_bad()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
50,53
51,52
53,54
56,57
57,58
57,59
58,59
60,61
62,63
62,64
62,65
63,64
64,65
64,66
66,67
66,68
66,69
69,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
78,79
79,80
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,59,61,65,67,68,71,74,76,77,80,81
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_31_bad(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_31_bad()
CWE401_Memory_Leak__char_malloc_31_bad
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(1,4,0)
(36,22,0)
(8,29,0)
(9,15,0)
(12,29,0)
(23,21,0)
(28,34,0)
(33,8,0)
(18,34,0)
(2,12,0)
(17,4,0)
(5,35,0)
(11,25,0)
(27,12,0)
(34,21,0)
(12,7,0)
(22,29,0)
(4,8,0)
(0,2,0)
(31,17,0)
(7,26,0)
(6,17,0)
(21,34,0)
(30,25,0)
(2,29,0)
(35,12,0)
(3,8,0)
(22,12,0)
(26,7,0)
(34,28,0)
(7,28,0)
(32,9,0)
(19,2,0)
(13,35,0)
(9,32,0)
(25,29,0)
(28,7,0)
(14,29,0)
(17,8,0)
(7,12,0)
(20,4,0)
(16,32,0)
(10,29,0)
(4,12,0)
(4,12,1)
(23,18,1)
(7,26,1)
(22,12,1)
(36,2,1)
(19,9,1)
(7,28,1)
(31,6,1)
(2,12,1)
(9,32,1)
(21,23,1)
(1,22,1)
(12,7,1)
(17,4,1)
(6,4,1)
(2,0,1)
(24,17,1)
(20,1,1)
(35,12,1)
(35,5,1)
(13,12,1)
(5,13,1)
(32,16,1)
(25,11,1)
(17,31,1)
(28,34,1)
(22,36,1)
(19,35,1)
(34,21,1)
(11,30,1)
(16,35,1)
(27,25,1)
(4,20,1)
(0,19,1)
(18,27,1)
(7,26,2)
(34,21,2)
(9,32,2)
(35,12,2)
(7,28,2)
(28,34,2)
(22,12,2)
(12,7,2)
(2,12,2)
(17,4,2)
(9,35,2)
(16,35,2)
(32,35,2)
(4,12,2)
-----------------------------------
(0,"A String")
(1,dataCopy)
(2,strcpy(data, "A String")
(3,dataCopy)
(4,* dataCopy = data)
(5,NULL)
(6,data)
(7,(char *)
(8,)
(9,exit(-1)
(10,if (data == NULL)
(11,NULL)
(12,data = (char *)
(13,data)
(14,data)
(15,)
(16,1)
(17,* data = dataCopy)
(18,100)
(19,data)
(20,data)
(21,sizeof(char)
(22,printLine(data)
(23,char)
(24,RET)
(25,data = NULL)
(26,char *)
(27,data)
(28,malloc(100*sizeof(char)
(29,)
(30,data)
(31,dataCopy)
(32,-1)
(33,data)
(34,100*sizeof(char)
(35,data == NULL)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
