-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_15_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
94,95
95,96
95,97
96,97
100,101
100,102
102,103
102,104
102,105
102,106
102,107
102,108
103,104
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,86,90,91,92,93,97,98,99,101,104,105,106,107,111,112,113
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_15_bad(){    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_15_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_15_bad
{    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(38,39,0)
(54,6,0)
(48,14,0)
(2,23,0)
(20,44,0)
(17,30,0)
(24,33,0)
(54,53,0)
(10,21,0)
(34,19,0)
(59,21,0)
(12,62,0)
(47,5,0)
(40,44,0)
(60,37,0)
(47,50,0)
(33,39,0)
(27,36,0)
(43,21,0)
(51,39,0)
(11,47,0)
(5,36,0)
(0,50,0)
(36,5,0)
(14,48,0)
(44,36,0)
(7,39,0)
(62,17,0)
(9,39,0)
(26,28,0)
(14,44,0)
(60,39,0)
(5,23,0)
(53,44,0)
(23,56,0)
(10,33,0)
(50,0,0)
(50,47,0)
(18,5,0)
(16,14,0)
(45,6,0)
(48,37,0)
(21,44,0)
(53,54,0)
(29,53,0)
(41,28,0)
(58,20,0)
(37,57,0)
(52,28,0)
(37,60,0)
(3,28,0)
(17,62,0)
(36,44,0)
(44,39,0)
(22,56,0)
(6,39,0)
(5,47,0)
(37,48,0)
(25,54,0)
(46,53,0)
(55,41,0)
(15,56,0)
(13,10,0)
(19,39,0)
(21,10,0)
(36,27,0)
(31,39,0)
(8,23,0)
(49,56,0)
(1,28,0)
(57,37,0)
(35,20,0)
(42,14,0)
(16,6,1)
(32,3,1)
(53,46,1)
(46,29,1)
(54,53,1)
(24,10,1)
(10,13,1)
(61,9,1)
(34,4,1)
(29,33,1)
(43,20,1)
(47,50,1)
(14,42,1)
(26,61,1)
(9,19,1)
(10,21,1)
(21,44,1)
(23,8,1)
(36,5,1)
(5,47,1)
(37,57,1)
(4,23,1)
(58,44,1)
(25,53,1)
(36,27,1)
(54,25,1)
(18,40,1)
(33,24,1)
(38,60,1)
(55,61,1)
(45,54,1)
(3,41,1)
(12,20,1)
(19,34,1)
(50,0,1)
(13,21,1)
(35,58,1)
(48,14,1)
(14,44,1)
(40,4,1)
(59,43,1)
(61,38,1)
(43,17,1)
(42,16,1)
(62,12,1)
(41,55,1)
(11,18,1)
(21,59,1)
(20,44,1)
(20,35,1)
(50,11,1)
(32,26,1)
(8,2,1)
(17,62,1)
(53,44,1)
(6,45,1)
(60,37,1)
(44,36,1)
(5,23,1)
(37,48,1)
(5,4,2)
(44,4,2)
(17,20,2)
(58,4,2)
(47,50,2)
(47,4,2)
(29,4,2)
(54,53,2)
(18,4,2)
(54,4,2)
(20,4,2)
(10,21,2)
(62,20,2)
(21,44,2)
(25,4,2)
(50,0,2)
(35,4,2)
(34,4,2)
(9,4,2)
(45,4,2)
(50,4,2)
(36,4,2)
(37,4,2)
(40,4,2)
(48,14,2)
(12,20,2)
(14,4,2)
(36,27,2)
(48,4,2)
(37,48,2)
(60,37,2)
(42,4,2)
(53,4,2)
(43,4,2)
(17,62,2)
(5,47,2)
(59,4,2)
(53,44,2)
(5,23,2)
(14,44,2)
(13,4,2)
(6,4,2)
(36,5,2)
(19,4,2)
(46,4,2)
(10,4,2)
(3,61,2)
(37,57,2)
(60,4,2)
(41,61,2)
(38,4,2)
(26,61,2)
(55,61,2)
(44,36,2)
(33,4,2)
(21,4,2)
(16,4,2)
(24,4,2)
(11,4,2)
(20,44,2)
-----------------------------------
(0,struct _twoIntsStruct)
(1,default:)
(2,data)
(3,break;)
(4,6)
(5,realloc(data, 100*sizeof(struct _twoIntsStruct)
(6,data[0].intTwo = 0)
(7,default:)
(8,NULL)
(9,break;)
(10,data[0].intOne)
(11,100)
(12,1)
(13,intOne)
(14,data[0])
(15,switch(6)
(16,data)
(17,exit(-1)
(18,data)
(19,printLine("Benign, fixed string")
(20,data == NULL)
(21,data[0])
(22,data)
(23,data = NULL)
(24,0)
(25,intTwo)
(26,break;)
(27,struct _twoIntsStruct *)
(28,)
(29,data)
(30,)
(31,if (data == NULL)
(32,RET)
(33,data[0].intOne = 0)
(34,"Benign, fixed string")
(35,NULL)
(36,(struct _twoIntsStruct *)
(37,(twoIntsStruct *)
(38,break;)
(39,)
(40,data)
(41,printLine("Benign, fixed string")
(42,0)
(43,data)
(44,data = (struct _twoIntsStruct *)
(45,0)
(46,0)
(47,100*sizeof(struct _twoIntsStruct)
(48,&data[0])
(49,switch(7)
(50,sizeof(struct _twoIntsStruct)
(51,case 6:)
(52,case 7:)
(53,data[0])
(54,data[0].intTwo)
(55,"Benign, fixed string")
(56,)
(57,twoIntsStruct *)
(58,data)
(59,0)
(60,printStructLine((twoIntsStruct *)
(61,7)
(62,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
