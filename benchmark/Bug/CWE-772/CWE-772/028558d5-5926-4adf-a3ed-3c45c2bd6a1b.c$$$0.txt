-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_31_bad()
{
    wchar_t * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,33,36,37,41,43,48,50,54,56,57,61,63,67,69,70,73,76,78,79,82,83
-----computeFrom-----
13,14
13,15
19,20
19,21
32,33
32,34
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_31_bad(){    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_31_bad()
CWE401_Memory_Leak__wchar_t_realloc_31_bad
{    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(28,32,0)
(22,23,0)
(3,15,0)
(34,33,0)
(4,31,0)
(24,28,0)
(5,14,0)
(27,28,0)
(33,30,0)
(18,22,0)
(8,21,0)
(25,7,0)
(21,30,0)
(15,10,0)
(29,13,0)
(20,14,0)
(10,6,0)
(22,28,0)
(14,22,0)
(13,32,0)
(7,23,0)
(31,5,0)
(9,31,0)
(0,32,0)
(21,5,0)
(12,32,0)
(22,14,0)
(5,32,0)
(26,30,0)
(13,5,0)
(23,22,0)
(17,5,0)
(14,20,0)
(19,21,0)
(11,23,0)
(14,5,0)
(30,32,0)
(10,15,0)
(1,30,0)
(16,33,0)
(33,21,0)
(23,7,0)
(29,31,1)
(22,28,1)
(24,27,1)
(2,33,1)
(16,21,1)
(7,25,1)
(18,17,1)
(11,18,1)
(19,8,1)
(13,29,1)
(14,22,1)
(17,28,1)
(23,7,1)
(10,15,1)
(9,4,1)
(31,5,1)
(22,23,1)
(21,19,1)
(31,9,1)
(33,21,1)
(14,20,1)
(5,14,1)
(13,5,1)
(25,11,1)
(21,5,1)
(3,31,1)
(33,34,1)
(34,16,1)
(28,24,1)
(4,5,1)
(15,3,1)
(29,10,1)
(8,13,1)
(13,5,2)
(33,21,2)
(14,20,2)
(31,5,2)
(3,31,2)
(10,31,2)
(14,22,2)
(23,7,2)
(10,15,2)
(22,28,2)
(21,5,2)
(22,23,2)
(5,14,2)
(15,31,2)
-----------------------------------
(0,data)
(1,data)
(2,RET)
(3,1)
(4,data)
(5,data = (wchar_t *)
(6,)
(7,sizeof(wchar_t)
(8,dataCopy)
(9,NULL)
(10,exit(-1)
(11,100)
(12,if (data == NULL)
(13,printWLine(data)
(14,(wchar_t *)
(15,-1)
(16,data)
(17,data)
(18,data)
(19,data)
(20,wchar_t *)
(21,* dataCopy = data)
(22,realloc(data, 100*sizeof(wchar_t)
(23,100*sizeof(wchar_t)
(24,NULL)
(25,wchar_t)
(26,dataCopy)
(27,data)
(28,data = NULL)
(29,data)
(30,)
(31,data == NULL)
(32,)
(33,* data = dataCopy)
(34,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
