-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
97,98
99,100
101,102
101,103
102,103
103,104
103,105
105,106
105,107
105,108
108,109
109,110
110,111
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,63,66,67,71,73,78,80,84,86,87,91,93,98,100,104,106,107,111,112
-----computeFrom-----
35,36
35,37
52,53
52,54
69,70
69,71
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_32_bad()
CWE401_Memory_Leak__char_calloc_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(27,26,0)
(31,52,0)
(11,24,0)
(7,13,0)
(39,45,0)
(53,34,0)
(26,21,0)
(21,26,0)
(10,12,0)
(47,35,0)
(30,7,0)
(13,7,0)
(52,42,0)
(5,52,0)
(34,44,0)
(0,33,0)
(35,52,0)
(49,51,0)
(32,43,0)
(45,3,0)
(44,12,0)
(42,6,0)
(34,28,0)
(16,5,0)
(21,36,0)
(25,33,0)
(38,4,0)
(52,3,0)
(51,3,0)
(40,44,0)
(42,7,0)
(18,12,0)
(2,35,0)
(48,52,0)
(33,24,0)
(25,48,0)
(41,28,0)
(3,12,0)
(45,0,0)
(28,34,0)
(24,33,0)
(6,42,0)
(28,43,0)
(17,3,0)
(8,0,0)
(19,48,0)
(9,12,0)
(43,12,0)
(23,12,0)
(20,10,0)
(15,25,0)
(37,13,0)
(4,44,0)
(44,4,0)
(51,52,0)
(48,3,0)
(1,10,0)
(22,5,0)
(35,3,0)
(0,45,0)
(50,3,0)
(42,52,0)
(29,33,0)
(7,42,0)
(33,12,0)
(25,33,1)
(13,37,1)
(48,52,1)
(44,4,1)
(52,42,1)
(47,21,1)
(25,15,1)
(47,5,1)
(15,51,1)
(24,11,1)
(42,6,1)
(22,16,1)
(8,39,1)
(4,38,1)
(28,34,1)
(40,33,1)
(5,22,1)
(51,52,1)
(46,28,1)
(11,29,1)
(5,52,1)
(41,48,1)
(27,5,1)
(7,13,1)
(19,25,1)
(2,47,1)
(35,2,1)
(30,31,1)
(16,52,1)
(38,40,1)
(48,19,1)
(39,10,1)
(37,30,1)
(0,33,1)
(35,52,1)
(45,0,1)
(26,27,1)
(42,7,1)
(20,1,1)
(53,41,1)
(33,24,1)
(34,53,1)
(21,26,1)
(51,49,1)
(49,35,1)
(10,20,1)
(0,8,1)
(1,44,1)
(34,44,1)
(31,45,1)
(52,42,2)
(0,33,2)
(7,13,2)
(27,5,2)
(44,4,2)
(42,6,2)
(45,0,2)
(48,52,2)
(21,26,2)
(28,34,2)
(21,5,2)
(34,44,2)
(25,33,2)
(26,5,2)
(51,52,2)
(35,52,2)
(5,52,2)
(42,7,2)
(33,24,2)
-----------------------------------
(0,*dataPtr1)
(1,data)
(2,"A String")
(3,)
(4,&data)
(5,data == NULL)
(6,char *)
(7,calloc(100, sizeof(char)
(8,dataPtr1)
(9,dataPtr1)
(10,data = NULL)
(11,data)
(12,)
(13,sizeof(char)
(14, sizeof(char)
(15,dataPtr1)
(16,data)
(17,data)
(18,data)
(19,data)
(20,NULL)
(21,exit(-1)
(22,NULL)
(23,dataPtr2)
(24,&data)
(25,*dataPtr1)
(26,-1)
(27,1)
(28,* data = *dataPtr2)
(29,dataPtr1)
(30,100)
(31,data)
(32,data)
(33,* *dataPtr1 = &data)
(34,*dataPtr2)
(35,strcpy(data, "A String")
(36,)
(37,char)
(38,data)
(39,data)
(40,dataPtr2)
(41,data)
(42,(char *)
(43,)
(44,* *dataPtr2 = &data)
(45,* data = *dataPtr1)
(46,RET)
(47,data)
(48,*dataPtr1 = data)
(49,data)
(50,if (data == NULL)
(51,printLine(data)
(52,data = (char *)
(53,dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
