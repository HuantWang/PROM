-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_02_bad()
{
    int64_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
71,72
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,58,59,60,64,67,68,70,72
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_02_bad(){    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_02_bad()
CWE401_Memory_Leak__int64_t_calloc_02_bad
{    int64_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(31,5,0)
(22,13,0)
(24,1,0)
(5,1,0)
(13,22,0)
(22,21,0)
(27,14,0)
(10,2,0)
(19,15,0)
(1,16,0)
(13,5,0)
(1,24,0)
(3,21,0)
(18,21,0)
(30,14,0)
(14,15,0)
(17,0,0)
(1,5,0)
(28,2,0)
(16,1,0)
(17,7,0)
(12,13,0)
(6,15,0)
(25,16,0)
(4,15,0)
(2,5,0)
(9,0,0)
(29,16,0)
(16,25,0)
(8,13,0)
(23,25,0)
(5,21,0)
(0,17,0)
(11,26,1)
(28,5,1)
(32,14,1)
(18,2,1)
(25,23,1)
(9,2,1)
(13,5,1)
(13,12,1)
(1,16,1)
(29,31,1)
(0,9,1)
(5,1,1)
(10,28,1)
(12,8,1)
(31,32,1)
(14,27,1)
(18,17,1)
(23,29,1)
(22,13,1)
(1,24,1)
(2,5,1)
(26,22,1)
(2,10,1)
(8,18,1)
(26,32,1)
(27,30,1)
(17,0,1)
(16,25,1)
(17,2,2)
(18,32,2)
(5,1,2)
(16,32,2)
(25,32,2)
(8,32,2)
(29,32,2)
(10,32,2)
(5,32,2)
(16,25,2)
(31,32,2)
(22,32,2)
(1,24,2)
(2,5,2)
(23,32,2)
(12,32,2)
(13,5,2)
(13,32,2)
(1,16,2)
(22,13,2)
(0,2,2)
(17,0,2)
(28,32,2)
(2,32,2)
(1,32,2)
(9,2,2)
-----------------------------------
(0,-1)
(1,(int64_t *)
(2,data == NULL)
(3,if (data == NULL)
(4,if(1)
(5,data = (int64_t *)
(6,data)
(7,)
(8,data)
(9,1)
(10,NULL)
(11,RET)
(12,0)
(13,data[0])
(14,data = NULL)
(15,)
(16,calloc(100, sizeof(int64_t)
(17,exit(-1)
(18,L)
(19,if(1)
(20, sizeof(int64_t)
(21,)
(22,printLongLongLine(data[0])
(23,int64_t)
(24,int64_t *)
(25,sizeof(int64_t)
(26,1)
(27,NULL)
(28,data)
(29,100)
(30,data)
(31,data)
(32,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
