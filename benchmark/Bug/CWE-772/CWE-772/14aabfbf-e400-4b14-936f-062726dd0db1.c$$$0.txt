-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
75,76
75,77
77,78
77,79
77,80
77,81
77,82
77,83
78,79
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,67,68,72,73,74,76,79,80,81,82,86,87,88
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__char_malloc_15_bad()
CWE401_Memory_Leak__char_malloc_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(37,43,0)
(31,23,0)
(33,1,0)
(34,14,0)
(12,4,0)
(28,7,0)
(1,14,0)
(6,23,0)
(43,37,0)
(11,27,0)
(6,44,0)
(16,18,0)
(21,35,0)
(29,23,0)
(4,44,0)
(17,14,0)
(37,8,0)
(8,37,0)
(25,39,0)
(27,18,0)
(0,44,0)
(26,18,0)
(44,37,0)
(3,21,0)
(2,23,0)
(39,30,0)
(40,14,0)
(35,21,0)
(19,30,0)
(44,23,0)
(35,41,0)
(36,14,0)
(24,44,0)
(4,23,0)
(39,43,0)
(32,18,0)
(22,0,0)
(5,23,0)
(13,0,0)
(15,27,0)
(43,39,0)
(37,44,0)
(7,23,0)
(20,4,0)
(42,23,0)
(30,39,0)
(45,6,0)
(0,44,1)
(28,38,1)
(4,44,1)
(10,40,1)
(35,21,1)
(43,39,1)
(9,31,1)
(6,45,1)
(25,24,1)
(6,44,1)
(22,13,1)
(42,6,1)
(10,36,1)
(24,38,1)
(1,33,1)
(40,1,1)
(44,37,1)
(39,30,1)
(37,43,1)
(36,9,1)
(15,11,1)
(38,27,1)
(9,42,1)
(33,9,1)
(21,3,1)
(3,0,1)
(12,35,1)
(45,4,1)
(20,12,1)
(12,0,1)
(0,22,1)
(31,7,1)
(27,15,1)
(4,20,1)
(37,8,1)
(7,28,1)
(13,44,1)
(30,19,1)
(19,25,1)
(7,38,2)
(39,30,2)
(20,38,2)
(37,43,2)
(0,44,2)
(45,38,2)
(40,9,2)
(30,38,2)
(36,9,2)
(33,9,2)
(4,44,2)
(22,38,2)
(25,38,2)
(0,38,2)
(43,38,2)
(4,38,2)
(44,37,2)
(37,8,2)
(31,38,2)
(42,38,2)
(12,38,2)
(39,38,2)
(35,0,2)
(3,0,2)
(19,38,2)
(24,38,2)
(21,0,2)
(28,38,2)
(35,21,2)
(44,38,2)
(6,44,2)
(6,38,2)
(1,9,2)
(13,38,2)
(43,39,2)
(37,38,2)
-----------------------------------
(0,data == NULL)
(1,printLine("Benign, fixed string")
(2,default:)
(3,1)
(4,strcpy(data, "A String")
(5,if (data == NULL)
(6,printLine(data)
(7,printLine("Benign, fixed string")
(8,char *)
(9,7)
(10,RET)
(11,data)
(12,data)
(13,data)
(14,)
(15,NULL)
(16,switch(6)
(17,default:)
(18,)
(19,char)
(20,"A String")
(21,-1)
(22,NULL)
(23,)
(24,data)
(25,100)
(26,data)
(27,data = NULL)
(28,"Benign, fixed string")
(29,case 6:)
(30,sizeof(char)
(31,break;)
(32,switch(7)
(33,"Benign, fixed string")
(34,case 7:)
(35,exit(-1)
(36,break;)
(37,(char *)
(38,6)
(39,100*sizeof(char)
(40,break;)
(41,)
(42,break;)
(43,malloc(100*sizeof(char)
(44,data = (char *)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
