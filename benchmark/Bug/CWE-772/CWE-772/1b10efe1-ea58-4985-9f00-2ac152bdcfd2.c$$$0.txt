-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_03_bad()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
70,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
37,38
37,39
44,45
44,46
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_03_bad(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_03_bad()
CWE401_Memory_Leak__wchar_t_realloc_03_bad
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(3,14,0)
(19,15,0)
(9,32,0)
(2,3,0)
(14,3,0)
(27,11,0)
(4,28,0)
(10,11,0)
(16,18,0)
(20,15,0)
(1,26,0)
(19,22,0)
(34,5,0)
(19,3,0)
(22,23,0)
(6,18,0)
(3,19,0)
(13,7,0)
(22,19,0)
(23,22,0)
(0,18,0)
(13,28,0)
(28,7,0)
(24,13,0)
(5,28,0)
(21,7,0)
(25,15,0)
(17,5,0)
(33,29,0)
(26,9,0)
(15,18,0)
(28,22,0)
(31,29,0)
(9,26,0)
(12,19,0)
(22,28,0)
(30,14,0)
(12,4,1)
(27,10,1)
(20,25,1)
(13,24,1)
(26,1,1)
(24,5,1)
(31,33,1)
(34,28,1)
(19,15,1)
(11,27,1)
(9,26,1)
(22,23,1)
(15,20,1)
(24,9,1)
(5,17,1)
(10,13,1)
(8,11,1)
(14,30,1)
(10,29,1)
(4,29,1)
(22,19,1)
(13,28,1)
(2,12,1)
(3,14,1)
(17,34,1)
(30,2,1)
(1,5,1)
(28,22,1)
(19,3,1)
(29,31,1)
(33,15,1)
(5,28,1)
(9,26,2)
(13,29,2)
(3,29,2)
(19,15,2)
(28,22,2)
(12,29,2)
(34,29,2)
(5,28,2)
(9,5,2)
(13,28,2)
(30,29,2)
(24,29,2)
(17,29,2)
(3,14,2)
(22,23,2)
(28,29,2)
(5,29,2)
(1,5,2)
(2,29,2)
(19,29,2)
(22,19,2)
(14,29,2)
(22,29,2)
(4,29,2)
(19,3,2)
(26,5,2)
-----------------------------------
(0,if(5==5)
(1,1)
(2,100)
(3,100*sizeof(wchar_t)
(4,data)
(5,data == NULL)
(6,data)
(7,)
(8,RET)
(9,exit(-1)
(10,5)
(11,5==5)
(12,data)
(13,printWLine(data)
(14,sizeof(wchar_t)
(15,data = NULL)
(16,if(5==5)
(17,NULL)
(18,)
(19,realloc(data, 100*sizeof(wchar_t)
(20,NULL)
(21,if (data == NULL)
(22,(wchar_t *)
(23,wchar_t *)
(24,data)
(25,data)
(26,-1)
(27,5)
(28,data = (wchar_t *)
(29,5==5)
(30,wchar_t)
(31,5)
(32,)
(33,5)
(34,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
