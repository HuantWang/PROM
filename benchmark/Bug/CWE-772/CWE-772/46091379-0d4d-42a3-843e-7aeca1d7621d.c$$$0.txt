-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_17_bad()
{
    int i,j;
    wchar_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
39,40
39,41
39,42
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
76,77
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,44,45,47,51,54,56,60,62,67,68,71,72,75,77
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
49,50
49,51
65,66
65,67
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_17_bad(){    int i,j;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_17_bad()
CWE401_Memory_Leak__strdup_wchar_t_17_bad
{    int i,j;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(19,5,0)
(9,5,0)
(25,8,0)
(12,30,0)
(14,2,0)
(27,11,0)
(7,30,0)
(4,11,0)
(8,12,0)
(29,23,0)
(34,6,0)
(22,33,0)
(21,30,0)
(0,6,0)
(11,5,0)
(15,5,0)
(13,7,0)
(28,33,0)
(32,34,0)
(17,6,0)
(20,6,0)
(30,18,0)
(7,12,0)
(10,12,0)
(2,33,0)
(24,5,0)
(1,17,0)
(31,2,0)
(3,17,0)
(12,8,0)
(23,33,0)
(26,5,0)
(31,14,1)
(11,4,1)
(7,12,1)
(3,6,1)
(4,27,1)
(16,17,1)
(21,2,1)
(17,1,1)
(3,34,1)
(22,28,1)
(2,33,1)
(2,31,1)
(0,20,1)
(7,13,1)
(12,8,1)
(14,23,1)
(28,11,1)
(32,17,1)
(29,7,1)
(23,29,1)
(6,0,1)
(1,3,1)
(23,33,1)
(25,10,1)
(13,12,1)
(8,25,1)
(20,2,1)
(10,21,1)
(34,6,1)
(34,32,1)
(14,33,1)
(33,22,1)
(17,6,1)
(32,17,2)
(23,2,2)
(34,17,2)
(23,33,2)
(21,2,2)
(29,2,2)
(10,2,2)
(7,12,2)
(8,2,2)
(7,2,2)
(2,2,2)
(25,2,2)
(2,33,2)
(34,6,2)
(17,6,2)
(12,2,2)
(14,2,2)
(31,2,2)
(17,17,2)
(3,17,2)
(1,17,2)
(12,8,2)
(13,2,2)
-----------------------------------
(0,0)
(1,1)
(2,i < 1)
(3,j)
(4,NULL)
(5,)
(6,j = 0)
(7,printWLine(data)
(8,wcsdup(myString)
(9,data)
(10,data)
(11,data = NULL)
(12,data = wcsdup(myString)
(13,data)
(14,i)
(15,j)
(16,RET)
(17,j < 1)
(18,)
(19,for(i = 0; i < 1; i++)
(20,j)
(21,"myString")
(22,0)
(23,i++)
(24,i)
(25,myString)
(26,for(j = 0; j < 1; j++)
(27,data)
(28,i)
(29,i)
(30,)
(31,1)
(32,j)
(33,i = 0)
(34,j++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
