-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_32_bad()
{
    int * data;
    int * *dataPtr1 = &data;
    int * *dataPtr2 = &data;
    data = NULL;
    {
        int * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
63,64
65,66
65,67
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
86,88
87,88
91,92
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
102,103
104,105
106,107
106,108
107,108
108,109
108,110
110,111
110,112
110,113
113,114
114,115
115,116
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,66,69,70,74,76,81,83,88,89,90,94,97,98,103,105,109,111,112,116,117
-----computeFrom-----
35,36
35,37
52,53
52,54
65,66
65,67
72,73
72,74
85,86
85,87
100,101
100,102
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_32_bad(){    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_32_bad()
CWE401_Memory_Leak__int_realloc_32_bad
{    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
int * *dataPtr1 = &data;
int * *dataPtr1 = &data;
int
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int * *dataPtr2 = &data;
int * *dataPtr2 = &data;
int
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }
int * data = *dataPtr1;
int * data = *dataPtr1;
int
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = *dataPtr2;
int * data = *dataPtr2;
int
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(50,11,0)
(1,12,0)
(27,13,0)
(49,17,0)
(13,58,0)
(39,12,0)
(0,58,0)
(4,24,0)
(34,29,0)
(19,5,0)
(44,10,0)
(15,54,0)
(12,5,0)
(21,12,0)
(25,33,0)
(18,13,0)
(29,12,0)
(47,29,0)
(23,11,0)
(32,39,0)
(46,58,0)
(9,54,0)
(30,39,0)
(17,46,0)
(12,1,0)
(55,5,0)
(57,6,0)
(11,12,0)
(35,5,0)
(10,46,0)
(1,41,0)
(57,55,0)
(24,1,0)
(16,58,0)
(38,58,0)
(45,51,0)
(33,26,0)
(54,15,0)
(8,36,0)
(20,31,0)
(48,57,0)
(28,57,0)
(18,10,0)
(15,24,0)
(55,57,0)
(24,35,0)
(42,58,0)
(26,33,0)
(39,5,0)
(14,18,0)
(6,5,0)
(51,20,0)
(3,35,0)
(10,18,0)
(52,26,0)
(56,32,0)
(32,33,0)
(35,36,0)
(37,16,0)
(40,15,0)
(24,15,0)
(53,16,0)
(33,58,0)
(22,5,0)
(7,46,0)
(36,35,0)
(36,33,0)
(1,24,0)
(46,17,0)
(11,6,0)
(2,6,0)
(5,58,0)
(20,51,0)
(57,12,0)
(41,1,0)
(3,16,1)
(47,34,1)
(50,23,1)
(34,12,1)
(21,35,1)
(1,24,1)
(49,7,1)
(57,12,1)
(18,10,1)
(32,56,1)
(9,40,1)
(12,1,1)
(32,33,1)
(54,9,1)
(37,53,1)
(51,45,1)
(57,6,1)
(17,49,1)
(10,44,1)
(7,33,1)
(56,55,1)
(55,57,1)
(44,14,1)
(45,29,1)
(29,47,1)
(23,29,1)
(40,4,1)
(39,30,1)
(29,12,1)
(35,36,1)
(57,48,1)
(24,35,1)
(36,8,1)
(33,26,1)
(23,20,1)
(11,50,1)
(36,33,1)
(53,46,1)
(28,6,1)
(11,12,1)
(16,37,1)
(24,15,1)
(2,11,1)
(15,54,1)
(8,3,1)
(52,25,1)
(1,41,1)
(39,12,1)
(20,51,1)
(26,52,1)
(10,46,1)
(14,39,1)
(4,21,1)
(43,18,1)
(48,28,1)
(6,2,1)
(30,32,1)
(46,17,1)
(32,33,2)
(46,17,2)
(24,15,2)
(20,51,2)
(11,12,2)
(51,29,2)
(18,10,2)
(12,1,2)
(36,33,2)
(35,36,2)
(1,41,2)
(57,12,2)
(20,29,2)
(29,12,2)
(57,6,2)
(39,12,2)
(24,35,2)
(55,57,2)
(45,29,2)
(1,24,2)
(15,54,2)
(10,46,2)
(33,26,2)
-----------------------------------
(0,dataPtr2)
(1,(int *)
(2,5)
(3,data)
(4,data)
(5,)
(6,data[0] = 5)
(7,dataPtr2)
(8,dataPtr1)
(9,int)
(10,*dataPtr2)
(11,data[0])
(12,data = (int *)
(13,)
(14,data)
(15,100*sizeof(int)
(16,data = NULL)
(17,&data)
(18,* data = *dataPtr2)
(19,data)
(20,exit(-1)
(21,data)
(22,if (data == NULL)
(23,data)
(24,realloc(data, 100*sizeof(int)
(25,dataPtr1)
(26,&data)
(27,data)
(28,data)
(29,data == NULL)
(30,data)
(31,)
(32,*dataPtr1)
(33,* *dataPtr1 = &data)
(34,data)
(35,* data = *dataPtr1)
(36,*dataPtr1)
(37,NULL)
(38,data)
(39,*dataPtr1 = data)
(40,100)
(41,int *)
(42,dataPtr1)
(43,RET)
(44,dataPtr2)
(45,1)
(46,* *dataPtr2 = &data)
(47,NULL)
(48,0)
(49,data)
(50,0)
(51,-1)
(52,data)
(53,data)
(54,sizeof(int)
(55,printIntLine(data[0])
(56,dataPtr1)
(57,data[0])
(58,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
