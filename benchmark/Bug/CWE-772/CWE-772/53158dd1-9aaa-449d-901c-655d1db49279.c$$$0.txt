-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_10_bad()
{
    if(globalTrue)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_10_bad(){    if(globalTrue)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_10_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_10_bad
{    if(globalTrue)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
if(globalTrue)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
globalTrue
globalTrue
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(28,43,0)
(34,15,0)
(3,15,0)
(6,39,0)
(44,7,0)
(30,13,0)
(35,22,0)
(8,6,0)
(13,22,0)
(31,43,0)
(6,22,0)
(15,35,0)
(2,24,0)
(35,32,0)
(39,41,0)
(32,35,0)
(24,0,0)
(39,6,0)
(9,31,0)
(32,11,0)
(39,26,0)
(20,12,0)
(19,35,0)
(22,25,0)
(11,32,0)
(43,6,0)
(40,22,0)
(13,6,0)
(18,21,0)
(16,33,0)
(29,35,0)
(32,43,0)
(21,38,0)
(37,19,0)
(19,0,0)
(31,7,0)
(7,31,0)
(41,39,0)
(43,31,0)
(5,6,0)
(42,16,0)
(33,16,0)
(4,22,0)
(14,38,0)
(21,41,0)
(36,8,0)
(38,21,0)
(23,22,0)
(24,35,0)
(33,1,0)
(41,21,0)
(26,39,0)
(43,32,0)
(27,8,0)
(28,29,1)
(39,26,1)
(9,28,1)
(32,43,1)
(14,18,1)
(2,19,1)
(44,9,1)
(37,15,1)
(15,34,1)
(41,21,1)
(36,27,1)
(33,16,1)
(34,3,1)
(10,17,1)
(5,17,1)
(7,44,1)
(13,6,1)
(19,37,1)
(18,5,1)
(10,24,1)
(42,8,1)
(19,35,1)
(24,35,1)
(38,14,1)
(3,35,1)
(35,32,1)
(13,30,1)
(43,6,1)
(31,7,1)
(27,6,1)
(21,38,1)
(32,11,1)
(15,35,1)
(39,41,1)
(24,2,1)
(8,6,1)
(6,39,1)
(10,15,1)
(16,42,1)
(30,33,1)
(30,8,1)
(29,13,1)
(43,31,1)
(8,36,1)
(18,17,2)
(24,35,2)
(3,17,2)
(21,17,2)
(19,35,2)
(37,15,2)
(6,39,2)
(15,17,2)
(14,17,2)
(5,17,2)
(2,15,2)
(13,6,2)
(43,17,2)
(36,17,2)
(13,17,2)
(41,17,2)
(21,38,2)
(28,17,2)
(33,16,2)
(42,8,2)
(9,17,2)
(43,31,2)
(32,17,2)
(32,11,2)
(31,17,2)
(38,17,2)
(33,8,2)
(15,35,2)
(43,6,2)
(44,17,2)
(6,17,2)
(30,17,2)
(27,17,2)
(7,17,2)
(35,32,2)
(39,41,2)
(32,43,2)
(39,26,2)
(24,15,2)
(29,17,2)
(35,17,2)
(16,8,2)
(41,21,2)
(31,7,2)
(19,15,2)
(8,17,2)
(8,6,2)
(34,17,2)
(39,17,2)
-----------------------------------
(0,)
(1,)
(2,data)
(3,data)
(4,if (data != NULL)
(5,data)
(6,* data = (wchar_t *)
(7,sizeof(wchar_t)
(8,data == NULL)
(9,130000)
(10,RET)
(11,wchar_t *)
(12,)
(13,printWLine(data)
(14,wchar_t)
(15,data != NULL)
(16,-1)
(17,globalTrue)
(18,100)
(19,printWLine(data)
(20,if(globalTrue)
(21,100*sizeof(wchar_t)
(22,)
(23,if (data == NULL)
(24,free(data)
(25,)
(26,wchar_t *)
(27,data)
(28,data)
(29,data)
(30,data)
(31,(130000)
(32,(wchar_t *)
(33,exit(-1)
(34,NULL)
(35,data = (wchar_t *)
(36,NULL)
(37,data)
(38,sizeof(wchar_t)
(39,(wchar_t *)
(40,data)
(41,malloc(100*sizeof(wchar_t)
(42,1)
(43,realloc(data, (130000)
(44,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
