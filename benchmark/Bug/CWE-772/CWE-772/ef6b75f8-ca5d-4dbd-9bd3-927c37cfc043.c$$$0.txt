-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_13_bad()
{
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,57,59,63,66,68,71,73,76,79,80,84,86,91,93,94,98,100,104,106
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
61,62
61,63
74,75
74,76
82,83
82,84
-----guardedBy-----
84,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_13_bad(){    if(GLOBAL_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_13_bad()
CWE401_Memory_Leak__malloc_realloc_char_13_bad
{    if(GLOBAL_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(GLOBAL_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(20,47,0)
(28,47,0)
(21,11,0)
(11,45,0)
(23,31,0)
(6,1,0)
(39,11,0)
(40,38,0)
(44,23,0)
(34,7,0)
(45,8,0)
(2,12,0)
(46,40,0)
(37,49,0)
(25,30,0)
(26,12,0)
(8,45,0)
(30,35,0)
(2,41,0)
(50,24,0)
(15,7,0)
(19,7,0)
(17,38,0)
(3,39,0)
(38,7,0)
(7,34,0)
(7,49,0)
(49,5,0)
(13,19,0)
(38,45,0)
(0,31,0)
(21,35,0)
(42,19,0)
(11,49,0)
(22,21,0)
(38,40,0)
(36,32,0)
(16,39,0)
(30,11,0)
(24,40,0)
(48,31,0)
(34,48,0)
(4,15,0)
(14,7,0)
(43,49,0)
(9,33,0)
(40,24,0)
(31,48,0)
(29,1,0)
(45,38,0)
(18,15,0)
(34,10,0)
(19,49,0)
(10,34,0)
(45,11,0)
(48,34,0)
(1,35,0)
(33,49,0)
(51,11,0)
(31,23,0)
(52,49,0)
(33,7,0)
(12,2,0)
(1,11,0)
(42,15,1)
(23,44,1)
(18,7,1)
(15,7,1)
(45,8,1)
(19,13,1)
(1,11,1)
(28,20,1)
(25,1,1)
(3,11,1)
(2,12,1)
(19,7,1)
(31,23,1)
(46,17,1)
(34,48,1)
(38,7,1)
(39,11,1)
(33,9,1)
(42,2,1)
(24,50,1)
(15,4,1)
(44,0,1)
(39,16,1)
(1,29,1)
(29,6,1)
(6,39,1)
(48,31,1)
(13,42,1)
(21,22,1)
(50,46,1)
(12,26,1)
(30,25,1)
(11,45,1)
(27,47,1)
(51,33,1)
(26,15,1)
(17,51,1)
(30,11,1)
(0,14,1)
(21,11,1)
(16,3,1)
(38,40,1)
(34,10,1)
(9,19,1)
(33,7,1)
(45,38,1)
(7,34,1)
(47,28,1)
(22,30,1)
(27,21,1)
(14,47,1)
(40,24,1)
(4,18,1)
(27,39,1)
(1,39,2)
(46,47,2)
(22,39,2)
(3,47,2)
(11,45,2)
(29,39,2)
(16,47,2)
(11,47,2)
(23,47,2)
(31,47,2)
(21,11,2)
(2,12,2)
(42,47,2)
(45,47,2)
(30,11,2)
(38,40,2)
(17,47,2)
(31,23,2)
(38,47,2)
(7,47,2)
(26,15,2)
(34,47,2)
(15,7,2)
(34,48,2)
(7,34,2)
(48,31,2)
(40,24,2)
(39,11,2)
(19,47,2)
(40,47,2)
(39,47,2)
(19,7,2)
(33,47,2)
(38,7,2)
(14,47,2)
(9,47,2)
(50,47,2)
(15,47,2)
(48,47,2)
(24,47,2)
(13,47,2)
(0,47,2)
(2,15,2)
(6,39,2)
(1,11,2)
(45,8,2)
(4,47,2)
(12,15,2)
(21,39,2)
(45,38,2)
(51,47,2)
(30,39,2)
(25,39,2)
(33,7,2)
(44,47,2)
(18,47,2)
(34,10,2)
-----------------------------------
(0,100)
(1,strcpy(data, "New String")
(2,exit(-1)
(3,data)
(4,NULL)
(5,)
(6,data)
(7,* data = (char *)
(8,char *)
(9,data)
(10,char *)
(11,data = (char *)
(12,-1)
(13,"A String")
(14,data)
(15,data == NULL)
(16,NULL)
(17,data)
(18,data)
(19,strcpy(data, "A String")
(20,GLOBAL_CONST_FIVE)
(21,free(data)
(22,data)
(23,sizeof(char)
(24,sizeof(char)
(25,data)
(26,1)
(27,RET)
(28,5)
(29,"New String")
(30,printLine(data)
(31,100*sizeof(char)
(32,)
(33,printLine(data)
(34,(char *)
(35,)
(36,if(GLOBAL_CONST_FIVE==5)
(37,data)
(38,realloc(data, (130000)
(39,data != NULL)
(40,(130000)
(41,)
(42,data)
(43,if (data != NULL)
(44,char)
(45,(char *)
(46,130000)
(47,GLOBAL_CONST_FIVE==5)
(48,malloc(100*sizeof(char)
(49,)
(50,char)
(51,data)
(52,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
