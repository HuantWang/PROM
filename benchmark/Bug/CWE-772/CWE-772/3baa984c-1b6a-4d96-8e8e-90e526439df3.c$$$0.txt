-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_03_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
86,87
86,88
87,88
87,89
90,91
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,85,88,89,91
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
87,88
87,89
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_03_bad(){    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_03_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_03_bad
{    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(14,12,0)
(20,3,0)
(31,35,0)
(45,5,0)
(9,37,0)
(6,2,0)
(2,6,0)
(33,30,0)
(30,33,0)
(33,3,0)
(21,39,0)
(34,20,0)
(3,33,0)
(46,32,0)
(3,16,0)
(1,7,0)
(48,11,0)
(8,10,0)
(42,5,0)
(38,32,0)
(49,3,0)
(41,35,0)
(18,0,0)
(7,1,0)
(32,3,0)
(33,39,0)
(17,11,0)
(7,3,0)
(28,10,0)
(39,5,0)
(22,16,0)
(50,35,0)
(26,7,0)
(36,6,0)
(23,39,0)
(10,3,0)
(10,48,0)
(51,48,0)
(11,16,0)
(39,33,0)
(40,22,0)
(27,23,0)
(12,23,0)
(24,40,0)
(19,22,0)
(15,16,0)
(5,35,0)
(25,20,0)
(1,43,0)
(43,16,0)
(29,37,0)
(20,40,0)
(47,7,0)
(2,4,0)
(44,0,0)
(48,10,0)
(23,12,0)
(39,23,0)
(43,1,0)
(40,20,0)
(7,3,1)
(18,37,1)
(13,0,1)
(51,10,1)
(28,32,1)
(32,3,1)
(39,23,1)
(40,24,1)
(36,32,1)
(9,29,1)
(23,12,1)
(46,38,1)
(10,3,1)
(20,25,1)
(29,5,1)
(18,43,1)
(37,9,1)
(1,7,1)
(12,14,1)
(5,45,1)
(17,48,1)
(7,47,1)
(14,27,1)
(28,2,1)
(6,36,1)
(2,6,1)
(21,49,1)
(24,20,1)
(39,5,1)
(47,26,1)
(27,21,1)
(45,42,1)
(26,22,1)
(32,46,1)
(22,19,1)
(43,1,1)
(49,37,1)
(48,51,1)
(8,28,1)
(44,18,1)
(33,39,1)
(11,17,1)
(19,40,1)
(3,33,1)
(20,3,1)
(40,20,1)
(33,30,1)
(48,10,1)
(25,34,1)
(0,44,1)
(34,11,1)
(10,8,1)
(38,3,1)
(33,37,2)
(23,37,2)
(24,37,2)
(22,37,2)
(33,30,2)
(20,3,2)
(21,37,2)
(1,37,2)
(17,37,2)
(23,12,2)
(10,3,2)
(51,37,2)
(27,37,2)
(19,37,2)
(32,3,2)
(20,37,2)
(28,37,2)
(32,37,2)
(48,37,2)
(14,37,2)
(10,37,2)
(12,37,2)
(3,33,2)
(39,37,2)
(8,37,2)
(1,7,2)
(25,37,2)
(49,37,2)
(43,37,2)
(39,5,2)
(2,6,2)
(26,37,2)
(47,37,2)
(36,32,2)
(40,37,2)
(6,32,2)
(38,37,2)
(39,23,2)
(48,10,2)
(11,37,2)
(34,37,2)
(40,20,2)
(2,32,2)
(7,3,2)
(33,39,2)
(3,37,2)
(7,37,2)
(43,1,2)
(46,37,2)
-----------------------------------
(0,5==5)
(1,&data[0])
(2,exit(-1)
(3,data = (twoIntsStruct *)
(4,)
(5,data = NULL)
(6,-1)
(7,data[0])
(8,0)
(9,5)
(10,data[0])
(11,data[0].intOne = 0)
(12,sizeof(twoIntsStruct)
(13,RET)
(14,twoIntsStruct)
(15,if (data == NULL)
(16,)
(17,0)
(18,5)
(19,0)
(20,data[0])
(21,data)
(22,data[0].intTwo = 0)
(23,100*sizeof(twoIntsStruct)
(24,intTwo)
(25,0)
(26,data)
(27,100)
(28,data)
(29,5)
(30,twoIntsStruct *)
(31,data)
(32,data == NULL)
(33,(twoIntsStruct *)
(34,data)
(35,)
(36,1)
(37,5==5)
(38,data)
(39,realloc(data, 100*sizeof(twoIntsStruct)
(40,data[0].intTwo)
(41,if(5==5)
(42,data)
(43,printStructLine(&data[0])
(44,5)
(45,NULL)
(46,NULL)
(47,0)
(48,data[0].intOne)
(49,data)
(50,if(5==5)
(51,intOne)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
