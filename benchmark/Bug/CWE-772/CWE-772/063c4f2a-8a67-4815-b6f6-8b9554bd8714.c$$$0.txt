-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_31_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine((twoIntsStruct *)&data[0]);
    {
        struct _twoIntsStruct * dataCopy = data;
        struct _twoIntsStruct * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
70,71
71,72
71,73
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
85,86
85,87
85,88
86,87
87,88
87,89
88,89
90,91
90,92
90,93
93,94
94,95
96,97
97,98
97,99
98,99
100,101
100,102
100,103
103,104
104,105
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,37,38,42,44,49,51,57,58,59,60,66,67,68,69,73,77,79,83,84,89,91,92,95,99,101,102,105,106
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
40,41
40,42
53,54
53,55
62,63
62,64
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_31_bad(){    struct _twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    {        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_31_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_31_bad
{    struct _twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine((twoIntsStruct *)&data[0]);    {        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
{        struct _twoIntsStruct * dataCopy = data;        struct _twoIntsStruct * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * dataCopy = data;
struct _twoIntsStruct * dataCopy = data;
struct _twoIntsStruct
_twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
struct _twoIntsStruct * data = dataCopy;
struct _twoIntsStruct * data = dataCopy;
struct _twoIntsStruct
_twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(43,11,0)
(23,15,0)
(26,32,0)
(5,49,0)
(19,44,0)
(7,14,0)
(15,23,0)
(32,43,0)
(50,43,0)
(42,44,0)
(1,21,0)
(25,41,0)
(39,11,0)
(40,41,0)
(35,2,0)
(47,31,0)
(38,7,0)
(9,12,0)
(21,1,0)
(21,23,0)
(45,48,0)
(37,44,0)
(30,34,0)
(10,4,0)
(34,44,0)
(4,7,0)
(1,14,0)
(41,25,0)
(36,35,0)
(22,4,0)
(31,44,0)
(19,23,0)
(24,34,0)
(16,33,0)
(28,37,0)
(43,32,0)
(3,2,0)
(6,14,0)
(14,44,0)
(27,12,0)
(13,35,0)
(12,14,0)
(23,21,0)
(20,1,0)
(32,14,0)
(46,32,0)
(29,33,0)
(2,31,0)
(33,29,0)
(29,40,0)
(11,44,0)
(7,37,0)
(49,45,0)
(45,49,0)
(8,7,0)
(51,1,0)
(23,19,0)
(41,14,0)
(0,44,0)
(2,35,0)
(35,14,0)
(40,29,0)
(52,37,0)
(33,16,0)
(14,41,0)
(17,29,0)
(4,37,0)
(41,40,0)
(4,7,1)
(24,30,1)
(32,14,1)
(1,51,1)
(32,46,1)
(3,35,1)
(1,14,1)
(35,14,1)
(41,40,1)
(31,47,1)
(5,12,1)
(34,24,1)
(12,9,1)
(43,32,1)
(36,13,1)
(41,25,1)
(23,15,1)
(33,17,1)
(50,32,1)
(6,34,1)
(38,19,1)
(35,36,1)
(27,14,1)
(47,2,1)
(4,10,1)
(12,14,1)
(11,39,1)
(8,38,1)
(40,29,1)
(18,4,1)
(39,43,1)
(17,6,1)
(7,8,1)
(22,7,1)
(43,50,1)
(13,12,1)
(46,26,1)
(13,45,1)
(9,27,1)
(26,31,1)
(33,16,1)
(45,49,1)
(19,23,1)
(49,5,1)
(10,22,1)
(14,41,1)
(7,14,1)
(29,33,1)
(51,20,1)
(21,1,1)
(2,3,1)
(2,35,1)
(20,11,1)
(23,21,1)
(33,16,2)
(45,12,2)
(41,25,2)
(45,49,2)
(23,15,2)
(12,14,2)
(49,12,2)
(23,21,2)
(40,29,2)
(29,33,2)
(32,14,2)
(5,12,2)
(35,14,2)
(43,32,2)
(41,40,2)
(7,14,2)
(21,1,2)
(4,7,2)
(14,41,2)
(1,14,2)
(19,23,2)
(2,35,2)
-----------------------------------
(0,if (data == NULL)
(1,data[0])
(2,data[0].intOne)
(3,intOne)
(4,* data = dataCopy)
(5,1)
(6,data)
(7,* dataCopy = data)
(8,data)
(9,NULL)
(10,dataCopy)
(11,data[0].intTwo = 0)
(12,data == NULL)
(13,data)
(14,data = (struct _twoIntsStruct *)
(15,twoIntsStruct *)
(16,struct _twoIntsStruct)
(17,100)
(18,RET)
(19,printStructLine((twoIntsStruct *)
(20,data)
(21,&data[0])
(22,data)
(23,(twoIntsStruct *)
(24,NULL)
(25,struct _twoIntsStruct *)
(26,data)
(27,data)
(28,data)
(29,100*sizeof(struct _twoIntsStruct)
(30,data)
(31,data[0].intOne = 0)
(32,data[0])
(33,sizeof(struct _twoIntsStruct)
(34,data = NULL)
(35,data[0])
(36,0)
(37,)
(38,dataCopy)
(39,0)
(40,malloc(100*sizeof(struct _twoIntsStruct)
(41,(struct _twoIntsStruct *)
(42,data)
(43,data[0].intTwo)
(44,)
(45,exit(-1)
(46,0)
(47,0)
(48,)
(49,-1)
(50,intTwo)
(51,0)
(52,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
