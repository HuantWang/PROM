-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_17_bad()
{
    int i,j;
    int * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
48,51
49,50
51,52
53,54
53,55
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
74,76
75,76
79,80
80,81
80,82
81,82
83,84
83,85
84,85
87,88
87,89
87,90
87,91
88,89
89,90
89,91
90,91
93,94
93,95
94,95
97,98
98,99
100,101
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,54,57,58,62,64,69,71,76,77,78,82,85,86,91,92,95,96,99,101
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
53,54
53,55
60,61
60,62
73,74
73,75
89,90
89,91
93,94
93,95
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_17_bad(){    int i,j;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_17_bad()
CWE401_Memory_Leak__int_realloc_17_bad
{    int i,j;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,45,0)
(17,41,0)
(47,22,0)
(48,6,0)
(12,30,0)
(31,39,0)
(21,22,0)
(1,19,0)
(19,38,0)
(7,4,0)
(11,26,0)
(21,51,0)
(24,49,0)
(18,25,0)
(16,51,0)
(2,30,0)
(38,19,0)
(3,6,0)
(14,26,0)
(53,30,0)
(8,6,0)
(27,39,0)
(29,6,0)
(46,38,0)
(4,52,0)
(34,5,0)
(15,53,0)
(51,21,0)
(24,41,0)
(45,1,0)
(40,53,0)
(52,1,0)
(50,6,0)
(13,19,0)
(32,23,0)
(26,22,0)
(10,4,0)
(25,6,0)
(19,25,0)
(38,23,0)
(0,30,0)
(20,25,0)
(33,31,0)
(36,2,0)
(35,51,0)
(51,52,0)
(52,22,0)
(14,52,0)
(44,14,0)
(5,39,0)
(51,26,0)
(9,14,0)
(42,5,0)
(43,39,0)
(41,24,0)
(19,1,0)
(1,52,0)
(19,52,0)
(23,38,0)
(28,52,0)
(35,26,1)
(41,17,1)
(39,43,1)
(19,38,1)
(1,19,1)
(33,21,1)
(42,39,1)
(17,4,1)
(53,30,1)
(38,23,1)
(10,52,1)
(24,41,1)
(34,42,1)
(40,15,1)
(19,52,1)
(51,16,1)
(27,25,1)
(11,14,1)
(37,53,1)
(0,5,1)
(51,52,1)
(2,36,1)
(4,7,1)
(46,13,1)
(2,30,1)
(4,52,1)
(28,5,1)
(42,31,1)
(26,11,1)
(9,24,1)
(15,30,1)
(14,44,1)
(32,46,1)
(36,53,1)
(7,10,1)
(52,1,1)
(23,32,1)
(20,18,1)
(14,52,1)
(5,34,1)
(21,51,1)
(13,28,1)
(12,0,1)
(19,25,1)
(31,33,1)
(15,2,1)
(44,9,1)
(1,45,1)
(31,39,1)
(16,35,1)
(30,12,1)
(9,4,1)
(53,40,1)
(25,20,1)
(51,26,1)
(43,27,1)
(5,39,1)
(1,45,2)
(4,52,2)
(41,4,2)
(38,23,2)
(5,5,2)
(26,5,2)
(11,5,2)
(9,5,2)
(19,38,2)
(1,19,2)
(28,5,2)
(14,52,2)
(1,5,2)
(24,4,2)
(2,53,2)
(33,5,2)
(52,1,2)
(19,52,2)
(52,5,2)
(19,5,2)
(10,5,2)
(16,5,2)
(36,53,2)
(19,25,2)
(15,53,2)
(34,5,2)
(53,30,2)
(32,5,2)
(21,5,2)
(42,5,2)
(4,5,2)
(44,5,2)
(31,5,2)
(51,5,2)
(7,5,2)
(24,41,2)
(35,5,2)
(53,53,2)
(2,30,2)
(31,39,2)
(23,5,2)
(40,53,2)
(13,5,2)
(38,5,2)
(17,4,2)
(51,26,2)
(21,51,2)
(51,52,2)
(14,5,2)
(5,39,2)
(46,5,2)
-----------------------------------
(0,j)
(1,(int *)
(2,j++)
(3,j)
(4,data == NULL)
(5,i < 1)
(6,)
(7,NULL)
(8,i)
(9,data)
(10,data)
(11,5)
(12,0)
(13,data)
(14,data[0])
(15,j)
(16,0)
(17,1)
(18,data)
(19,realloc(data, 100*sizeof(int)
(20,NULL)
(21,printIntLine(data[0])
(22,)
(23,sizeof(int)
(24,exit(-1)
(25,data = NULL)
(26,data[0] = 5)
(27,i)
(28,data)
(29,for(i = 0; i < 1; i++)
(30,j = 0)
(31,i++)
(32,int)
(33,i)
(34,1)
(35,data)
(36,j)
(37,RET)
(38,100*sizeof(int)
(39,i = 0)
(40,1)
(41,-1)
(42,i)
(43,0)
(44,0)
(45,int *)
(46,100)
(47,if (data == NULL)
(48,data)
(49,)
(50,for(j = 0; j < 1; j++)
(51,data[0])
(52,data = (int *)
(53,j < 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
