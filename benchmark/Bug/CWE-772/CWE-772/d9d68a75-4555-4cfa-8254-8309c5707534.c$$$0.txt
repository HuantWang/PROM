-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
    {
        char myString[] = "myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = strdup(myString);
        /* Use data */
        printLine(data);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
49,50
50,51
50,52
51,52
55,56
55,57
57,58
57,59
57,60
57,61
57,62
57,63
58,59
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,29,31,35,38,40,44,46,47,48,52,53,54,56,59,60,61,62,66,67,68
-----computeFrom-----
13,14
13,15
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__strdup_char_15_bad()
CWE401_Memory_Leak__strdup_char_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(25,9,0)
(17,6,0)
(4,21,0)
(6,17,0)
(12,19,0)
(32,29,0)
(23,24,0)
(5,22,0)
(8,24,0)
(33,21,0)
(27,7,0)
(20,29,0)
(6,22,0)
(0,17,0)
(18,5,0)
(7,22,0)
(22,24,0)
(10,1,0)
(2,5,0)
(21,29,0)
(7,6,0)
(13,9,0)
(3,22,0)
(19,9,0)
(31,9,0)
(16,29,0)
(34,9,0)
(28,6,0)
(30,24,0)
(26,24,0)
(1,24,0)
(17,5,0)
(14,30,1)
(18,15,1)
(7,6,1)
(7,27,1)
(0,28,1)
(11,13,1)
(5,2,1)
(6,17,1)
(30,1,1)
(23,7,1)
(19,12,1)
(4,33,1)
(14,23,1)
(21,4,1)
(17,0,1)
(15,21,1)
(17,5,1)
(27,6,1)
(28,5,1)
(2,18,1)
(10,15,1)
(1,10,1)
(13,19,1)
(12,14,1)
(25,14,1)
(11,25,1)
(28,15,2)
(6,17,2)
(12,14,2)
(1,15,2)
(25,14,2)
(6,15,2)
(7,15,2)
(5,15,2)
(30,15,2)
(17,5,2)
(2,15,2)
(13,14,2)
(23,15,2)
(7,6,2)
(19,14,2)
(18,15,2)
(10,15,2)
(0,15,2)
(27,15,2)
(17,15,2)
-----------------------------------
(0,myString)
(1,printLine("Benign, fixed string")
(2,"myString")
(3,myString)
(4,NULL)
(5,myString[] = "myString")
(6,data = strdup(myString)
(7,printLine(data)
(8,default:)
(9,)
(10,"Benign, fixed string")
(11,RET)
(12,"Benign, fixed string")
(13,break;)
(14,7)
(15,6)
(16,switch(6)
(17,strdup(myString)
(18,myString)
(19,printLine("Benign, fixed string")
(20,switch(7)
(21,data = NULL)
(22,)
(23,break;)
(24,)
(25,break;)
(26,case 6:)
(27,data)
(28,data)
(29,)
(30,break;)
(31,case 7:)
(32,data)
(33,data)
(34,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
