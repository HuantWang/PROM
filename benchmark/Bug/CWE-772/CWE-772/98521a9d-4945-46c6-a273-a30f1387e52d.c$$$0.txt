-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_16_bad()
{
    char * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
65,66
65,67
67,68
67,69
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,54,56,57,61,63,64,66,68,69
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_16_bad(){    char * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__char_calloc_16_bad()
CWE401_Memory_Leak__char_calloc_16_bad
{    char * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(23,29,0)
(11,3,0)
(5,0,0)
(22,35,0)
(18,9,0)
(34,10,0)
(35,22,0)
(8,1,0)
(2,27,0)
(29,0,0)
(27,10,0)
(28,3,0)
(7,9,0)
(26,22,0)
(9,3,0)
(0,29,0)
(35,15,0)
(1,33,0)
(13,32,0)
(16,27,0)
(0,10,0)
(14,29,0)
(29,23,0)
(32,10,0)
(25,1,0)
(21,23,0)
(10,0,0)
(6,33,0)
(0,5,0)
(12,3,0)
(1,10,0)
(31,33,0)
(10,33,0)
(19,20,0)
(32,33,0)
(21,14,1)
(26,27,1)
(9,18,1)
(19,24,1)
(25,8,1)
(0,29,1)
(8,27,1)
(29,23,1)
(35,22,1)
(10,0,1)
(1,25,1)
(18,7,1)
(27,10,1)
(30,19,1)
(2,16,1)
(30,24,1)
(14,34,1)
(1,10,1)
(22,26,1)
(16,10,1)
(27,2,1)
(32,13,1)
(32,10,1)
(4,9,1)
(34,4,1)
(24,4,1)
(23,21,1)
(6,32,1)
(24,6,1)
(8,35,1)
(0,5,1)
(13,1,1)
(14,4,2)
(35,22,2)
(23,4,2)
(8,4,2)
(35,27,2)
(13,4,2)
(0,4,2)
(0,29,2)
(29,4,2)
(26,27,2)
(34,4,2)
(16,4,2)
(10,4,2)
(10,0,2)
(22,27,2)
(1,4,2)
(32,10,2)
(25,4,2)
(1,10,2)
(2,4,2)
(32,4,2)
(0,5,2)
(27,10,2)
(21,4,2)
(6,4,2)
(27,4,2)
(29,23,2)
(19,24,2)
-----------------------------------
(0,(char *)
(1,strcpy(data, "A String")
(2,NULL)
(3,)
(4,1)
(5,char *)
(6,break;)
(7,data)
(8,data)
(9,data = NULL)
(10,data = (char *)
(11,while(1)
(12,data)
(13,data)
(14,100)
(15,)
(16,data)
(17, sizeof(char)
(18,NULL)
(19,break;)
(20,)
(21,char)
(22,-1)
(23,sizeof(char)
(24,1)
(25,"A String")
(26,1)
(27,data == NULL)
(28,while(1)
(29,calloc(100, sizeof(char)
(30,RET)
(31,if (data == NULL)
(32,printLine(data)
(33,)
(34,data)
(35,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
