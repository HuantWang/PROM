-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_34_bad()
{
    char * data;
    CWE401_Memory_Leak__char_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
70,72
71,72
74,75
76,77
76,78
77,78
78,79
78,80
80,81
80,82
80,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,72,73,75,79,81,82,86,87,88
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_34_bad(){    char * data;    CWE401_Memory_Leak__char_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_34_bad()
CWE401_Memory_Leak__char_malloc_34_bad
{    char * data;    CWE401_Memory_Leak__char_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
CWE401_Memory_Leak__char_malloc_34_unionType myUnion;
CWE401_Memory_Leak__char_malloc_34_unionType myUnion;
CWE401_Memory_Leak__char_malloc_34_unionType
CWE401_Memory_Leak__char_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(40,3,0)
(27,31,0)
(32,31,0)
(8,15,0)
(39,34,0)
(28,34,0)
(36,6,0)
(3,40,0)
(39,40,0)
(22,39,0)
(22,34,0)
(7,6,0)
(15,8,0)
(1,34,0)
(18,29,0)
(26,34,0)
(10,1,0)
(14,22,0)
(37,5,0)
(33,40,0)
(5,34,0)
(24,6,0)
(40,39,0)
(30,5,0)
(33,15,0)
(38,0,0)
(31,29,0)
(15,33,0)
(2,0,0)
(23,35,0)
(12,34,0)
(7,28,0)
(20,23,0)
(13,28,0)
(35,23,0)
(4,15,0)
(35,19,0)
(11,39,0)
(0,39,0)
(9,7,0)
(29,34,0)
(17,34,0)
(40,33,0)
(29,39,0)
(6,7,0)
(25,1,0)
(1,39,0)
(16,8,0)
(31,32,1)
(10,0,1)
(6,36,1)
(35,23,1)
(21,7,1)
(37,30,1)
(40,3,1)
(38,39,1)
(9,29,1)
(18,31,1)
(2,38,1)
(22,14,1)
(5,37,1)
(15,8,1)
(20,0,1)
(23,20,1)
(22,39,1)
(14,1,1)
(40,33,1)
(7,6,1)
(36,24,1)
(10,35,1)
(4,11,1)
(39,40,1)
(8,16,1)
(11,5,1)
(0,39,1)
(32,27,1)
(24,9,1)
(0,2,1)
(29,18,1)
(25,10,1)
(33,15,1)
(1,25,1)
(29,39,1)
(1,39,1)
(27,22,1)
(16,4,1)
(0,39,2)
(23,0,2)
(40,33,2)
(39,40,2)
(29,39,2)
(7,6,2)
(35,23,2)
(22,39,2)
(1,39,2)
(40,3,2)
(15,8,2)
(35,0,2)
(20,0,2)
(33,15,2)
-----------------------------------
(0,data == NULL)
(1,strcpy(data, "A String")
(2,NULL)
(3,char *)
(4,100)
(5,data = NULL)
(6,myUnion.unionSecond)
(7,* data = myUnion.unionSecond)
(8,sizeof(char)
(9,data)
(10,data)
(11,data)
(12,myUnion)
(13,data)
(14,data)
(15,100*sizeof(char)
(16,char)
(17,data)
(18,data)
(19,)
(20,1)
(21,RET)
(22,printLine(data)
(23,-1)
(24,myUnion)
(25,"A String")
(26,if (data == NULL)
(27,myUnion)
(28,)
(29,myUnion.unionFirst = data)
(30,data)
(31,myUnion.unionFirst)
(32,unionFirst)
(33,malloc(100*sizeof(char)
(34,)
(35,exit(-1)
(36,unionSecond)
(37,NULL)
(38,data)
(39,data = (char *)
(40,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
