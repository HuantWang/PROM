-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_11_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,69,71
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_11_bad(){    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_11_bad()
CWE401_Memory_Leak__char_calloc_11_bad
{    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(29,4,0)
(18,9,0)
(2,4,0)
(20,1,0)
(4,2,0)
(6,11,0)
(21,11,0)
(28,2,0)
(24,28,0)
(23,21,0)
(6,21,0)
(32,11,0)
(0,26,0)
(32,21,0)
(12,1,0)
(2,28,0)
(17,5,0)
(13,6,0)
(5,0,0)
(16,2,0)
(3,9,0)
(28,21,0)
(27,23,0)
(1,9,0)
(28,24,0)
(21,28,0)
(0,5,0)
(19,6,0)
(7,32,0)
(31,21,0)
(25,23,0)
(30,11,0)
(15,9,0)
(14,32,1)
(5,17,1)
(28,24,1)
(14,22,1)
(13,0,1)
(23,21,1)
(32,7,1)
(27,21,1)
(28,2,1)
(0,5,1)
(23,25,1)
(2,4,1)
(6,19,1)
(31,22,1)
(21,28,1)
(16,31,1)
(29,16,1)
(8,14,1)
(17,23,1)
(22,1,1)
(4,29,1)
(7,6,1)
(1,20,1)
(19,13,1)
(13,23,1)
(25,27,1)
(6,21,1)
(20,12,1)
(32,21,1)
(13,22,2)
(5,23,2)
(4,22,2)
(23,21,2)
(6,21,2)
(32,22,2)
(27,22,2)
(28,24,2)
(23,22,2)
(29,22,2)
(32,21,2)
(7,22,2)
(28,22,2)
(6,22,2)
(28,2,2)
(0,23,2)
(16,22,2)
(21,28,2)
(25,22,2)
(2,22,2)
(2,4,2)
(0,5,2)
(19,22,2)
(31,22,2)
(17,23,2)
(21,22,2)
-----------------------------------
(0,exit(-1)
(1,data = NULL)
(2,calloc(100, sizeof(char)
(3,data)
(4,sizeof(char)
(5,-1)
(6,strcpy(data, "A String")
(7,data)
(8,RET)
(9,)
(10, sizeof(char)
(11,)
(12,data)
(13,data)
(14,globalReturnsTrue()
(15,if(globalReturnsTrue()
(16,100)
(17,1)
(18,if(globalReturnsTrue()
(19,"A String")
(20,NULL)
(21,data = (char *)
(22,globalReturnsTrue()
(23,data == NULL)
(24,char *)
(25,NULL)
(26,)
(27,data)
(28,(char *)
(29,char)
(30,if (data == NULL)
(31,data)
(32,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
