-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_09_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,93,95
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_09_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_09_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_09_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,16,0)
(5,15,0)
(7,23,0)
(24,18,0)
(28,23,0)
(47,0,0)
(19,22,0)
(27,1,0)
(16,31,0)
(42,0,0)
(26,42,0)
(20,19,0)
(40,43,0)
(34,20,0)
(0,22,0)
(15,5,0)
(0,49,0)
(43,39,0)
(31,49,0)
(39,22,0)
(43,11,0)
(11,43,0)
(9,22,0)
(1,22,0)
(15,16,0)
(43,40,0)
(10,23,0)
(48,36,0)
(33,38,0)
(32,47,0)
(31,28,0)
(3,23,0)
(16,15,0)
(47,11,0)
(41,38,0)
(37,36,0)
(49,31,0)
(38,20,0)
(29,1,0)
(49,2,0)
(18,0,0)
(12,47,0)
(2,49,0)
(49,0,0)
(48,44,0)
(46,28,0)
(14,18,0)
(38,0,0)
(20,38,0)
(35,27,0)
(27,18,0)
(6,0,0)
(31,16,0)
(39,43,0)
(11,47,0)
(36,48,0)
(30,19,0)
(13,31,0)
(45,28,0)
(18,27,0)
(21,42,0)
(29,27,1)
(11,47,1)
(8,25,1)
(15,17,1)
(13,6,1)
(14,24,1)
(33,41,1)
(25,28,1)
(18,0,1)
(41,48,1)
(17,13,1)
(37,42,1)
(31,28,1)
(32,1,1)
(27,35,1)
(48,36,1)
(20,34,1)
(18,14,1)
(41,42,1)
(43,40,1)
(16,15,1)
(42,0,1)
(49,31,1)
(21,26,1)
(4,8,1)
(47,0,1)
(28,45,1)
(6,25,1)
(0,49,1)
(31,16,1)
(49,2,1)
(38,0,1)
(36,37,1)
(47,12,1)
(34,38,1)
(43,11,1)
(42,21,1)
(39,43,1)
(45,46,1)
(30,20,1)
(20,38,1)
(19,30,1)
(27,18,1)
(35,18,1)
(26,0,1)
(38,33,1)
(8,39,1)
(24,19,1)
(1,29,1)
(12,32,1)
(15,5,1)
(13,25,2)
(11,47,2)
(1,25,2)
(39,25,2)
(15,25,2)
(48,42,2)
(33,25,2)
(35,25,2)
(49,25,2)
(20,25,2)
(42,0,2)
(0,25,2)
(43,25,2)
(24,25,2)
(43,40,2)
(47,25,2)
(37,42,2)
(42,25,2)
(38,25,2)
(21,25,2)
(38,0,2)
(11,25,2)
(43,11,2)
(49,31,2)
(31,16,2)
(36,42,2)
(16,15,2)
(34,25,2)
(0,49,2)
(27,18,2)
(20,38,2)
(31,25,2)
(19,25,2)
(14,25,2)
(27,25,2)
(32,25,2)
(17,25,2)
(6,25,2)
(39,43,2)
(12,25,2)
(48,36,2)
(16,25,2)
(30,25,2)
(49,2,2)
(29,25,2)
(26,25,2)
(47,0,2)
(18,0,2)
(18,25,2)
(31,28,2)
(15,5,2)
(41,25,2)
-----------------------------------
(0,data = (struct _twoIntsStruct *)
(1,data[0].intTwo = 0)
(2,struct _twoIntsStruct *)
(3,if(GLOBAL_CONST_TRUE)
(4,RET)
(5,struct _twoIntsStruct)
(6,data)
(7,if(GLOBAL_CONST_TRUE)
(8,GLOBAL_CONST_TRUE)
(9,if (data == NULL)
(10,data)
(11,&data[0])
(12,0)
(13,data)
(14,0)
(15,sizeof(struct _twoIntsStruct)
(16,100*sizeof(struct _twoIntsStruct)
(17,100)
(18,data[0])
(19,data[0].intOne = 0)
(20,data[0].intOne)
(21,NULL)
(22,)
(23,)
(24,data)
(25,GLOBAL_CONST_TRUE)
(26,data)
(27,data[0].intTwo)
(28,data = NULL)
(29,0)
(30,0)
(31,realloc(data, 100*sizeof(struct _twoIntsStruct)
(32,data)
(33,0)
(34,intOne)
(35,intTwo)
(36,-1)
(37,1)
(38,data[0])
(39,printStructLine((twoIntsStruct *)
(40,twoIntsStruct *)
(41,data)
(42,data == NULL)
(43,(twoIntsStruct *)
(44,)
(45,NULL)
(46,data)
(47,data[0])
(48,exit(-1)
(49,(struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
