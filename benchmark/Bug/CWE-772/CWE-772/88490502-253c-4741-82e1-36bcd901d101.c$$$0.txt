-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_04_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,90,92
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_04_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_04_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_04_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,46,0)
(36,2,0)
(20,39,0)
(43,6,0)
(7,41,0)
(48,41,0)
(17,47,0)
(39,20,0)
(42,19,0)
(23,24,0)
(19,41,0)
(35,25,0)
(13,33,0)
(41,47,0)
(22,46,0)
(9,4,0)
(48,27,0)
(9,46,0)
(2,40,0)
(40,11,0)
(15,24,0)
(3,20,0)
(33,7,0)
(7,33,0)
(26,43,0)
(12,24,0)
(33,17,0)
(4,47,0)
(41,48,0)
(20,12,0)
(30,7,0)
(24,41,0)
(40,2,0)
(46,9,0)
(37,6,0)
(32,6,0)
(18,48,0)
(27,48,0)
(16,43,0)
(12,20,0)
(48,18,0)
(34,9,0)
(14,7,0)
(28,6,0)
(27,25,0)
(8,47,0)
(25,35,0)
(21,41,0)
(25,27,0)
(1,4,0)
(24,12,0)
(3,47,0)
(5,27,0)
(46,41,0)
(20,3,0)
(10,19,0)
(31,17,0)
(4,1,1)
(36,19,1)
(14,40,1)
(13,7,1)
(43,26,1)
(30,14,1)
(19,42,1)
(23,15,1)
(40,2,1)
(0,22,1)
(20,39,1)
(2,36,1)
(48,27,1)
(9,34,1)
(5,21,1)
(42,10,1)
(24,23,1)
(44,38,1)
(3,20,1)
(21,38,1)
(1,9,1)
(12,24,1)
(46,0,1)
(26,16,1)
(38,43,1)
(27,25,1)
(48,18,1)
(24,41,1)
(9,46,1)
(41,48,1)
(33,7,1)
(46,41,1)
(7,41,1)
(25,35,1)
(33,13,1)
(22,17,1)
(17,31,1)
(14,19,1)
(19,41,1)
(10,41,1)
(44,3,1)
(45,44,1)
(15,4,1)
(34,46,1)
(7,30,1)
(20,12,1)
(25,5,1)
(31,33,1)
(10,38,2)
(33,38,2)
(24,38,2)
(27,38,2)
(1,38,2)
(9,38,2)
(15,38,2)
(7,38,2)
(20,12,2)
(34,38,2)
(20,39,2)
(14,38,2)
(48,27,2)
(41,48,2)
(41,38,2)
(17,38,2)
(25,38,2)
(31,38,2)
(42,38,2)
(30,38,2)
(5,38,2)
(7,41,2)
(25,35,2)
(48,18,2)
(48,38,2)
(24,41,2)
(20,38,2)
(23,38,2)
(33,7,2)
(2,19,2)
(12,24,2)
(21,38,2)
(27,25,2)
(36,19,2)
(4,38,2)
(12,38,2)
(9,46,2)
(3,20,2)
(19,41,2)
(40,2,2)
(22,38,2)
(0,38,2)
(3,38,2)
(40,19,2)
(46,41,2)
(13,38,2)
(46,38,2)
(19,38,2)
-----------------------------------
(0,0)
(1,0)
(2,-1)
(3,printStructLine((twoIntsStruct *)
(4,data[0].intTwo = 0)
(5,100)
(6,)
(7,data[0])
(8,if (data == NULL)
(9,data[0].intTwo)
(10,data)
(11,)
(12,&data[0])
(13,intOne)
(14,data)
(15,data)
(16,data)
(17,data[0].intOne = 0)
(18,struct _twoIntsStruct *)
(19,data == NULL)
(20,(twoIntsStruct *)
(21,data)
(22,data)
(23,0)
(24,data[0])
(25,sizeof(struct _twoIntsStruct)
(26,NULL)
(27,calloc(100, sizeof(struct _twoIntsStruct)
(28,data)
(29, sizeof(struct _twoIntsStruct)
(30,0)
(31,0)
(32,if(STATIC_CONST_TRUE)
(33,data[0].intOne)
(34,intTwo)
(35,struct _twoIntsStruct)
(36,1)
(37,if(STATIC_CONST_TRUE)
(38,STATIC_CONST_TRUE)
(39,twoIntsStruct *)
(40,exit(-1)
(41,data = (struct _twoIntsStruct *)
(42,NULL)
(43,data = NULL)
(44,STATIC_CONST_TRUE)
(45,RET)
(46,data[0])
(47,)
(48,(struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
