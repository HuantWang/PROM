-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
71,72
72,73
72,74
73,74
77,78
77,79
79,80
79,81
79,82
79,83
79,84
79,85
80,81
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,69,70,74,75,76,78,81,82,83,84,88,89,90
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__wchar_t_realloc_15_bad()
CWE401_Memory_Leak__wchar_t_realloc_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(15,38,0)
(39,13,0)
(19,37,0)
(41,13,0)
(7,39,0)
(42,20,0)
(27,39,0)
(3,26,0)
(28,39,0)
(32,14,0)
(28,0,0)
(20,30,0)
(10,13,0)
(32,36,0)
(10,39,0)
(20,29,0)
(28,29,0)
(9,13,0)
(6,13,0)
(4,15,0)
(43,38,0)
(37,13,0)
(24,10,0)
(34,30,0)
(1,21,0)
(21,26,0)
(29,20,0)
(16,26,0)
(18,29,0)
(0,28,0)
(40,13,0)
(29,28,0)
(35,38,0)
(25,7,0)
(33,7,0)
(2,14,0)
(29,15,0)
(31,26,0)
(23,13,0)
(5,15,0)
(11,38,0)
(12,26,0)
(30,20,0)
(14,32,0)
(39,28,0)
(28,0,1)
(14,2,1)
(24,32,1)
(16,8,1)
(12,21,1)
(8,6,1)
(4,5,1)
(32,14,1)
(19,22,1)
(27,22,1)
(7,39,1)
(24,7,1)
(23,37,1)
(15,4,1)
(6,10,1)
(10,24,1)
(17,12,1)
(1,8,1)
(8,23,1)
(2,7,1)
(34,42,1)
(18,27,1)
(33,25,1)
(20,30,1)
(21,1,1)
(25,39,1)
(29,15,1)
(17,16,1)
(7,33,1)
(42,18,1)
(28,29,1)
(10,39,1)
(30,34,1)
(22,15,1)
(37,19,1)
(39,28,1)
(29,20,1)
(39,22,2)
(29,20,2)
(27,22,2)
(29,22,2)
(34,22,2)
(23,22,2)
(21,8,2)
(32,7,2)
(7,22,2)
(37,22,2)
(19,22,2)
(1,8,2)
(16,8,2)
(10,39,2)
(39,28,2)
(12,8,2)
(30,22,2)
(24,22,2)
(29,15,2)
(7,39,2)
(42,22,2)
(25,22,2)
(2,7,2)
(28,29,2)
(20,30,2)
(18,22,2)
(20,22,2)
(33,22,2)
(28,0,2)
(14,7,2)
(10,22,2)
(28,22,2)
(6,22,2)
(32,14,2)
-----------------------------------
(0,wchar_t *)
(1,"Benign, fixed string")
(2,1)
(3,case 7:)
(4,NULL)
(5,data)
(6,break;)
(7,data == NULL)
(8,7)
(9,if (data == NULL)
(10,printWLine(data)
(11,switch(7)
(12,break;)
(13,)
(14,-1)
(15,data = NULL)
(16,break;)
(17,RET)
(18,data)
(19,"Benign, fixed string")
(20,100*sizeof(wchar_t)
(21,printLine("Benign, fixed string")
(22,6)
(23,break;)
(24,data)
(25,data)
(26,)
(27,data)
(28,(wchar_t *)
(29,realloc(data, 100*sizeof(wchar_t)
(30,sizeof(wchar_t)
(31,default:)
(32,exit(-1)
(33,NULL)
(34,wchar_t)
(35,switch(6)
(36,)
(37,printLine("Benign, fixed string")
(38,)
(39,data = (wchar_t *)
(40,case 6:)
(41,default:)
(42,100)
(43,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
