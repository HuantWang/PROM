-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_34_bad()
{
    twoIntsStruct * data;
    CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    myUnion.unionFirst = data;
    {
        twoIntsStruct * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
5,15
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
93,95
94,95
95,96
95,97
96,97
98,99
98,100
98,101
101,102
102,103
102,104
103,104
-----nextToken-----
2,4,9,11,12,16,18,22,24,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,89,90,92,97,99,100,104,105,106
-----computeFrom-----
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_34_bad(){    twoIntsStruct * data;    CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_34_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_34_bad
{    twoIntsStruct * data;    CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    myUnion.unionFirst = data;    {        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;
CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType myUnion;
CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType
CWE401_Memory_Leak__twoIntsStruct_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        twoIntsStruct * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct * data = myUnion.unionSecond;
twoIntsStruct
twoIntsStruct
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(2,23,0)
(23,2,0)
(43,16,0)
(31,1,0)
(14,4,0)
(10,20,0)
(15,31,0)
(0,20,0)
(17,45,0)
(16,0,0)
(14,26,0)
(36,14,0)
(13,45,0)
(21,54,0)
(0,16,0)
(6,0,0)
(37,13,0)
(25,26,0)
(54,26,0)
(26,1,0)
(35,8,0)
(42,1,0)
(40,50,0)
(3,34,0)
(38,18,0)
(12,8,0)
(13,26,0)
(26,14,0)
(33,50,0)
(38,50,0)
(5,23,0)
(11,53,0)
(41,18,0)
(34,4,0)
(24,38,0)
(54,1,0)
(30,25,0)
(2,26,0)
(50,26,0)
(45,13,0)
(22,25,0)
(28,26,0)
(7,2,0)
(52,31,0)
(45,53,0)
(4,14,0)
(50,38,0)
(5,1,0)
(34,32,0)
(32,34,0)
(44,47,0)
(39,13,0)
(29,16,0)
(18,1,0)
(4,34,0)
(46,2,0)
(48,1,0)
(51,1,0)
(49,32,0)
(12,27,0)
(47,54,0)
(23,5,0)
(20,1,0)
(53,1,0)
(8,12,0)
(14,36,0)
(9,47,0)
(37,39,1)
(47,44,1)
(35,25,1)
(4,34,1)
(17,13,1)
(29,6,1)
(33,53,1)
(54,21,1)
(2,26,1)
(13,26,1)
(23,2,1)
(39,25,1)
(38,24,1)
(3,28,1)
(12,8,1)
(40,33,1)
(14,36,1)
(34,32,1)
(19,0,1)
(25,26,1)
(26,14,1)
(5,23,1)
(49,3,1)
(45,17,1)
(28,31,1)
(30,22,1)
(44,9,1)
(25,30,1)
(6,54,1)
(7,46,1)
(32,49,1)
(24,50,1)
(50,26,1)
(46,18,1)
(54,26,1)
(31,52,1)
(22,26,1)
(53,11,1)
(16,43,1)
(8,35,1)
(0,16,1)
(14,4,1)
(18,41,1)
(21,47,1)
(52,15,1)
(9,5,1)
(13,37,1)
(38,50,1)
(41,38,1)
(50,40,1)
(45,13,1)
(2,7,1)
(11,45,1)
(43,29,1)
(39,12,1)
(4,34,2)
(45,13,2)
(35,25,2)
(14,4,2)
(25,26,2)
(12,8,2)
(14,36,2)
(23,2,2)
(0,16,2)
(2,26,2)
(8,25,2)
(12,25,2)
(5,23,2)
(38,50,2)
(50,26,2)
(54,26,2)
(34,32,2)
(13,26,2)
(26,14,2)
-----------------------------------
(0,* data = myUnion.unionSecond)
(1,)
(2,data[0])
(3,100)
(4,malloc(100*sizeof(twoIntsStruct)
(5,printStructLine(&data[0])
(6,data)
(7,0)
(8,-1)
(9,myUnion)
(10,data)
(11,0)
(12,exit(-1)
(13,data[0])
(14,(twoIntsStruct *)
(15,data)
(16,myUnion.unionSecond)
(17,intOne)
(18,data[0].intTwo = 0)
(19,RET)
(20,)
(21,data)
(22,data)
(23,&data[0])
(24,intTwo)
(25,data == NULL)
(26,data = (twoIntsStruct *)
(27,)
(28,data)
(29,myUnion)
(30,NULL)
(31,data = NULL)
(32,sizeof(twoIntsStruct)
(33,data)
(34,100*sizeof(twoIntsStruct)
(35,1)
(36,twoIntsStruct *)
(37,0)
(38,data[0].intTwo)
(39,data)
(40,0)
(41,0)
(42,data)
(43,unionSecond)
(44,unionFirst)
(45,data[0].intOne)
(46,data)
(47,myUnion.unionFirst)
(48,myUnion)
(49,twoIntsStruct)
(50,data[0])
(51,if (data == NULL)
(52,NULL)
(53,data[0].intOne = 0)
(54,myUnion.unionFirst = data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
