-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_17_bad()
{
    int i,j;
    int * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
48,51
49,50
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
71,73
72,73
76,77
77,78
77,79
78,79
80,81
80,82
81,82
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
90,91
90,92
91,92
94,95
95,96
97,98
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,51,54,55,59,61,66,68,73,74,75,79,82,83,88,89,92,93,96,98
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
57,58
57,59
70,71
70,72
86,87
86,88
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_17_bad(){    int i,j;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_17_bad()
CWE401_Memory_Leak__int_calloc_17_bad
{    int i,j;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(33,12,0)
(40,45,0)
(4,10,0)
(31,43,0)
(43,19,0)
(10,38,0)
(6,16,0)
(7,21,0)
(48,52,0)
(29,38,0)
(2,1,0)
(13,24,0)
(37,9,0)
(5,28,0)
(34,12,0)
(25,5,0)
(24,52,0)
(4,28,0)
(35,41,0)
(50,8,0)
(41,28,0)
(49,8,0)
(9,45,0)
(21,12,0)
(46,49,0)
(1,52,0)
(15,52,0)
(36,12,0)
(22,38,0)
(16,10,0)
(5,45,0)
(45,9,0)
(28,38,0)
(5,25,0)
(47,8,0)
(20,28,0)
(23,10,0)
(19,17,0)
(51,12,0)
(14,41,0)
(3,16,0)
(19,43,0)
(27,49,0)
(32,50,0)
(22,4,0)
(42,12,0)
(44,4,0)
(16,28,0)
(4,22,0)
(11,21,0)
(26,1,0)
(39,4,0)
(28,5,0)
(30,8,0)
(45,5,0)
(43,31,1)
(20,1,1)
(6,19,1)
(19,43,1)
(13,22,1)
(27,8,1)
(32,49,1)
(28,5,1)
(6,41,1)
(41,28,1)
(11,7,1)
(9,37,1)
(5,45,1)
(4,28,1)
(31,41,1)
(27,50,1)
(18,49,1)
(23,16,1)
(16,3,1)
(10,23,1)
(49,46,1)
(5,25,1)
(1,26,1)
(48,21,1)
(16,28,1)
(47,30,1)
(2,24,1)
(41,35,1)
(45,9,1)
(37,40,1)
(24,13,1)
(30,1,1)
(35,14,1)
(21,11,1)
(40,20,1)
(14,28,1)
(1,52,1)
(39,44,1)
(26,2,1)
(22,4,1)
(4,10,1)
(3,6,1)
(4,39,1)
(49,8,1)
(46,27,1)
(50,8,1)
(50,32,1)
(8,47,1)
(15,48,1)
(44,10,1)
(52,15,1)
(2,52,1)
(24,52,1)
(24,52,2)
(49,8,2)
(16,1,2)
(10,1,2)
(5,25,2)
(39,1,2)
(45,1,2)
(43,41,2)
(32,49,2)
(22,1,2)
(50,49,2)
(14,1,2)
(46,49,2)
(35,1,2)
(24,1,2)
(41,1,2)
(4,28,2)
(1,1,2)
(37,1,2)
(16,28,2)
(6,1,2)
(5,1,2)
(27,49,2)
(1,52,2)
(5,45,2)
(26,1,2)
(22,4,2)
(44,1,2)
(19,41,2)
(40,1,2)
(28,5,2)
(23,1,2)
(13,1,2)
(3,1,2)
(45,9,2)
(19,43,2)
(49,49,2)
(41,28,2)
(4,1,2)
(4,10,2)
(28,1,2)
(31,41,2)
(2,1,2)
(20,1,2)
(50,8,2)
(9,1,2)
-----------------------------------
(0, sizeof(int)
(1,i < 1)
(2,i)
(3,0)
(4,data[0])
(5,(int *)
(6,data)
(7,data)
(8,j = 0)
(9,sizeof(int)
(10,data[0] = 5)
(11,NULL)
(12,)
(13,i)
(14,data)
(15,0)
(16,data[0])
(17,)
(18,RET)
(19,exit(-1)
(20,data)
(21,data = NULL)
(22,printIntLine(data[0])
(23,5)
(24,i++)
(25,int *)
(26,1)
(27,j)
(28,data = (int *)
(29,if (data == NULL)
(30,j)
(31,1)
(32,j)
(33,i)
(34,for(i = 0; i < 1; i++)
(35,NULL)
(36,for(j = 0; j < 1; j++)
(37,int)
(38,)
(39,0)
(40,100)
(41,data == NULL)
(42,j)
(43,-1)
(44,data)
(45,calloc(100, sizeof(int)
(46,1)
(47,0)
(48,i)
(49,j < 1)
(50,j++)
(51,data)
(52,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
