-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
64,66
66,67
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,54,56,57,61,63,65,67
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_02_bad(){    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_02_bad()
CWE401_Memory_Leak__char_calloc_02_bad
{    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(21,22,0)
(24,19,0)
(2,10,0)
(26,18,0)
(20,29,0)
(20,18,0)
(11,30,0)
(12,20,0)
(10,19,0)
(23,5,0)
(32,18,0)
(9,28,0)
(11,6,0)
(13,26,0)
(18,29,0)
(17,18,0)
(19,28,0)
(0,30,0)
(17,29,0)
(19,10,0)
(30,11,0)
(31,29,0)
(1,17,0)
(5,22,0)
(10,2,0)
(14,20,0)
(18,10,0)
(27,22,0)
(25,26,0)
(10,18,0)
(16,5,0)
(8,22,0)
(28,19,0)
(14,26,1)
(24,32,1)
(3,7,1)
(1,20,1)
(10,19,1)
(4,5,1)
(13,18,1)
(26,25,1)
(32,4,1)
(19,28,1)
(23,16,1)
(30,0,1)
(20,12,1)
(14,11,1)
(7,4,1)
(7,17,1)
(0,26,1)
(18,10,1)
(10,2,1)
(17,1,1)
(9,24,1)
(5,23,1)
(17,18,1)
(25,13,1)
(12,14,1)
(28,9,1)
(26,18,1)
(20,18,1)
(11,30,1)
(19,28,2)
(11,30,2)
(19,4,2)
(14,4,2)
(10,2,2)
(13,4,2)
(1,4,2)
(9,4,2)
(26,4,2)
(17,18,2)
(28,4,2)
(18,10,2)
(24,4,2)
(20,18,2)
(30,26,2)
(12,4,2)
(18,4,2)
(20,4,2)
(25,4,2)
(10,19,2)
(11,26,2)
(32,4,2)
(0,26,2)
(10,4,2)
(26,18,2)
(17,4,2)
-----------------------------------
(0,1)
(1,data)
(2,char *)
(3,RET)
(4,1)
(5,data = NULL)
(6,)
(7,1)
(8,if(1)
(9,char)
(10,(char *)
(11,exit(-1)
(12,"A String")
(13,data)
(14,data)
(15, sizeof(char)
(16,data)
(17,printLine(data)
(18,data = (char *)
(19,calloc(100, sizeof(char)
(20,strcpy(data, "A String")
(21,if(1)
(22,)
(23,NULL)
(24,100)
(25,NULL)
(26,data == NULL)
(27,data)
(28,sizeof(char)
(29,)
(30,-1)
(31,if (data == NULL)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
