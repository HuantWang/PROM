-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_07_bad()
{
    if(staticFive==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,57,59,63,66,68,71,73,76,79,80,84,86,91,93,94,98,100,104,106
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
61,62
61,63
74,75
74,76
82,83
82,84
-----guardedBy-----
84,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_07_bad(){    if(staticFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_07_bad()
CWE401_Memory_Leak__malloc_realloc_char_07_bad
{    if(staticFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(staticFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(42,50,0)
(19,31,0)
(19,18,0)
(27,32,0)
(15,21,0)
(51,5,0)
(34,41,0)
(41,13,0)
(4,18,0)
(3,18,0)
(15,30,0)
(9,18,0)
(4,42,0)
(23,34,0)
(25,4,0)
(49,47,0)
(13,41,0)
(21,15,0)
(37,32,0)
(2,18,0)
(6,26,0)
(36,22,0)
(15,31,0)
(43,31,0)
(42,13,0)
(31,15,0)
(33,41,0)
(47,17,0)
(25,26,0)
(29,46,0)
(31,18,0)
(8,13,0)
(18,0,0)
(14,25,0)
(50,42,0)
(1,25,0)
(12,43,0)
(13,42,0)
(30,15,0)
(13,31,0)
(46,4,0)
(32,30,0)
(38,24,0)
(39,18,0)
(9,31,0)
(45,4,0)
(41,34,0)
(44,27,0)
(6,4,0)
(40,9,0)
(32,27,0)
(35,24,0)
(5,26,0)
(20,6,0)
(7,19,0)
(16,46,0)
(11,43,0)
(42,4,0)
(47,49,0)
(30,32,0)
(52,31,0)
(48,49,0)
(5,4,0)
(10,9,0)
(16,29,1)
(33,8,1)
(42,50,1)
(8,45,1)
(9,31,1)
(6,20,1)
(51,6,1)
(4,42,1)
(15,30,1)
(27,44,1)
(40,10,1)
(5,4,1)
(10,43,1)
(10,47,1)
(25,14,1)
(29,4,1)
(30,32,1)
(28,46,1)
(7,9,1)
(49,48,1)
(31,15,1)
(11,12,1)
(24,35,1)
(28,5,1)
(34,23,1)
(1,46,1)
(52,24,1)
(32,27,1)
(37,52,1)
(15,21,1)
(28,24,1)
(23,33,1)
(12,31,1)
(41,34,1)
(25,4,1)
(43,31,1)
(19,31,1)
(46,16,1)
(43,11,1)
(46,4,1)
(9,40,1)
(35,38,1)
(44,37,1)
(13,31,1)
(6,4,1)
(19,7,1)
(42,13,1)
(14,1,1)
(5,51,1)
(20,25,1)
(13,41,1)
(47,49,1)
(48,43,1)
(45,19,1)
(42,13,2)
(42,50,2)
(34,24,2)
(31,24,2)
(6,4,2)
(29,24,2)
(25,46,2)
(8,24,2)
(4,24,2)
(1,46,2)
(12,24,2)
(49,43,2)
(42,24,2)
(15,21,2)
(32,27,2)
(23,24,2)
(15,30,2)
(46,24,2)
(9,31,2)
(41,34,2)
(31,15,2)
(4,42,2)
(5,4,2)
(33,24,2)
(6,46,2)
(15,24,2)
(16,24,2)
(52,24,2)
(46,4,2)
(44,24,2)
(7,24,2)
(13,31,2)
(14,46,2)
(9,24,2)
(47,49,2)
(20,46,2)
(25,4,2)
(41,24,2)
(37,24,2)
(27,24,2)
(43,24,2)
(13,41,2)
(19,31,2)
(32,24,2)
(45,24,2)
(47,43,2)
(30,32,2)
(10,24,2)
(5,46,2)
(43,31,2)
(19,24,2)
(51,46,2)
(13,24,2)
(40,24,2)
(48,43,2)
(11,24,2)
(30,24,2)
-----------------------------------
(0,)
(1,data)
(2,if (data == NULL)
(3,if (data != NULL)
(4,data = (char *)
(5,free(data)
(6,printLine(data)
(7,data)
(8,data)
(9,strcpy(data, "A String")
(10,data)
(11,NULL)
(12,data)
(13,realloc(data, (130000)
(14,"New String")
(15,(char *)
(16,NULL)
(17,)
(18,)
(19,printLine(data)
(20,data)
(21,char *)
(22,)
(23,char)
(24,staticFive==5)
(25,strcpy(data, "New String")
(26,)
(27,sizeof(char)
(28,RET)
(29,data)
(30,malloc(100*sizeof(char)
(31,* data = (char *)
(32,100*sizeof(char)
(33,130000)
(34,sizeof(char)
(35,5)
(36,if(staticFive==5)
(37,100)
(38,staticFive)
(39,data)
(40,"A String")
(41,(130000)
(42,(char *)
(43,data == NULL)
(44,char)
(45,data)
(46,data != NULL)
(47,exit(-1)
(48,1)
(49,-1)
(50,char *)
(51,data)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
