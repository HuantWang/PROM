-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_11_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
86,87
86,88
87,88
88,89
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,85,89,91
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_11_bad(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_11_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_11_bad
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(30,12,0)
(8,0,0)
(8,42,0)
(14,12,0)
(23,15,0)
(33,32,0)
(37,42,0)
(33,24,0)
(1,37,0)
(37,1,0)
(11,31,0)
(26,8,0)
(13,25,0)
(7,17,0)
(21,1,0)
(8,26,0)
(20,45,0)
(0,8,0)
(16,27,0)
(5,25,0)
(22,37,0)
(1,2,0)
(29,2,0)
(35,42,0)
(44,12,0)
(19,5,0)
(27,10,0)
(40,38,0)
(6,25,0)
(32,33,0)
(25,5,0)
(10,27,0)
(2,45,0)
(20,7,0)
(25,42,0)
(43,15,0)
(26,27,0)
(26,15,0)
(38,45,0)
(4,32,0)
(27,26,0)
(42,45,0)
(9,45,0)
(31,42,0)
(28,10,0)
(17,7,0)
(15,12,0)
(42,8,0)
(3,37,0)
(39,31,0)
(5,38,0)
(17,42,0)
(41,17,0)
(46,17,0)
(7,20,0)
(18,26,0)
(32,4,1)
(8,0,1)
(15,43,1)
(46,38,1)
(31,11,1)
(17,41,1)
(22,31,1)
(5,25,1)
(31,42,1)
(10,28,1)
(39,42,1)
(5,19,1)
(25,6,1)
(3,22,1)
(42,8,1)
(8,26,1)
(25,42,1)
(34,47,1)
(27,10,1)
(20,7,1)
(17,42,1)
(28,16,1)
(16,18,1)
(19,25,1)
(29,1,1)
(26,27,1)
(7,17,1)
(21,37,1)
(4,31,1)
(11,39,1)
(13,2,1)
(33,32,1)
(1,21,1)
(41,46,1)
(37,3,1)
(37,42,1)
(6,13,1)
(22,33,1)
(38,40,1)
(26,15,1)
(2,29,1)
(47,20,1)
(36,15,1)
(40,5,1)
(43,23,1)
(35,36,1)
(18,35,1)
(1,37,1)
(47,36,1)
(20,7,2)
(41,36,2)
(18,36,2)
(8,36,2)
(46,36,2)
(22,36,2)
(29,36,2)
(28,36,2)
(11,36,2)
(17,36,2)
(7,36,2)
(37,36,2)
(10,36,2)
(37,42,2)
(8,26,2)
(1,36,2)
(33,31,2)
(7,17,2)
(3,36,2)
(31,42,2)
(42,8,2)
(40,36,2)
(42,36,2)
(33,32,2)
(6,36,2)
(32,31,2)
(13,36,2)
(20,36,2)
(25,36,2)
(1,37,2)
(38,36,2)
(17,42,2)
(5,36,2)
(4,31,2)
(19,36,2)
(26,36,2)
(21,36,2)
(27,10,2)
(16,36,2)
(39,36,2)
(26,27,2)
(5,25,2)
(26,15,2)
(2,36,2)
(27,36,2)
(35,36,2)
(31,36,2)
(8,0,2)
(25,42,2)
-----------------------------------
(0,twoIntsStruct *)
(1,data[0].intOne)
(2,data[0].intOne = 0)
(3,0)
(4,1)
(5,data[0].intTwo)
(6,0)
(7,&data[0])
(8,(twoIntsStruct *)
(9,if (data == NULL)
(10,sizeof(twoIntsStruct)
(11,NULL)
(12,)
(13,data)
(14,if(globalReturnsTrue()
(15,data = NULL)
(16,100)
(17,data[0])
(18,data)
(19,intTwo)
(20,printStructLine(&data[0])
(21,intOne)
(22,data)
(23,data)
(24,)
(25,data[0])
(26,realloc(data, 100*sizeof(twoIntsStruct)
(27,100*sizeof(twoIntsStruct)
(28,twoIntsStruct)
(29,0)
(30,if(globalReturnsTrue()
(31,data == NULL)
(32,-1)
(33,exit(-1)
(34,RET)
(35,data)
(36,globalReturnsTrue()
(37,data[0])
(38,data[0].intTwo = 0)
(39,data)
(40,0)
(41,0)
(42,data = (twoIntsStruct *)
(43,NULL)
(44,data)
(45,)
(46,data)
(47,globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
