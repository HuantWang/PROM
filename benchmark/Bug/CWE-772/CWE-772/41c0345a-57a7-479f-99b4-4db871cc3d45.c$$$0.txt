-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_15_bad()
{
    switch(6)
    {
    case 6:
    {
        int * data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (int *)realloc(data, (130000)*sizeof(int));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            data[0] = 10;
            printIntLine(data[0]);
            free(data);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
70,73
71,72
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
88,91
89,90
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
112,113
113,114
113,115
114,115
-----nextToken-----
2,4,7,10,14,16,17,21,23,26,28,31,32,36,38,43,45,50,51,52,56,59,60,64,67,69,72,74,77,80,81,85,87,93,94,95,99,102,103,107,109,110,111,115,116,117
-----computeFrom-----
27,28
27,29
34,35
34,36
47,48
47,49
62,63
62,64
75,76
75,77
83,84
83,85
90,91
90,92
-----guardedBy-----
85,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_15_bad(){    switch(6)    {    case 6:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_int_15_bad()
CWE401_Memory_Leak__malloc_realloc_int_15_bad
{    switch(6)    {    case 6:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(23,14,0)
(56,64,0)
(51,35,0)
(24,41,0)
(51,1,0)
(48,12,0)
(46,31,0)
(5,35,0)
(27,55,0)
(32,7,0)
(33,3,0)
(5,49,0)
(38,35,0)
(64,44,0)
(6,35,0)
(59,26,0)
(15,11,0)
(57,51,0)
(50,58,0)
(12,14,0)
(64,11,0)
(60,1,0)
(57,41,0)
(40,15,0)
(29,12,0)
(27,34,0)
(57,0,0)
(44,64,0)
(34,27,0)
(30,15,0)
(61,11,0)
(34,5,0)
(44,12,0)
(24,3,0)
(54,23,0)
(39,6,0)
(42,12,0)
(64,35,0)
(59,31,0)
(47,13,0)
(7,33,0)
(8,37,0)
(2,6,0)
(38,11,0)
(37,1,0)
(41,57,0)
(49,5,0)
(9,27,0)
(62,33,0)
(5,34,0)
(17,38,0)
(0,57,0)
(15,30,0)
(11,12,0)
(15,41,0)
(13,41,0)
(20,13,0)
(28,35,0)
(22,24,0)
(16,15,0)
(31,59,0)
(4,41,0)
(1,51,0)
(55,27,0)
(25,38,0)
(52,7,0)
(36,14,0)
(1,37,0)
(10,55,0)
(35,5,0)
(18,14,0)
(21,51,0)
(19,64,0)
(43,14,0)
(63,14,0)
(35,12,0)
(51,57,0)
(7,41,0)
(41,12,0)
(15,33,0)
(30,3,0)
(22,30,1)
(35,5,1)
(9,28,1)
(37,8,1)
(15,41,1)
(54,53,1)
(59,31,1)
(51,35,1)
(31,46,1)
(55,10,1)
(15,11,1)
(56,19,1)
(17,25,1)
(57,51,1)
(47,41,1)
(13,20,1)
(7,52,1)
(2,39,1)
(64,35,1)
(15,33,1)
(64,56,1)
(25,6,1)
(10,9,1)
(46,6,1)
(57,0,1)
(15,40,1)
(34,27,1)
(64,11,1)
(60,21,1)
(61,38,1)
(8,60,1)
(18,13,1)
(18,24,1)
(13,41,1)
(24,22,1)
(33,62,1)
(43,23,1)
(7,41,1)
(23,54,1)
(19,11,1)
(20,47,1)
(21,4,1)
(45,18,1)
(32,13,1)
(62,7,1)
(38,35,1)
(38,17,1)
(16,33,1)
(6,2,1)
(44,64,1)
(1,37,1)
(41,57,1)
(39,35,1)
(30,15,1)
(45,43,1)
(40,16,1)
(24,41,1)
(4,44,1)
(5,49,1)
(25,59,1)
(52,32,1)
(27,55,1)
(6,35,1)
(11,61,1)
(5,34,1)
(28,53,1)
(51,1,1)
(15,33,2)
(30,13,2)
(32,13,2)
(51,1,2)
(15,11,2)
(59,6,2)
(9,53,2)
(13,53,2)
(64,53,2)
(19,53,2)
(22,13,2)
(64,35,2)
(1,53,2)
(31,6,2)
(60,53,2)
(41,53,2)
(57,51,2)
(33,13,2)
(15,13,2)
(23,53,2)
(1,37,2)
(39,53,2)
(51,35,2)
(61,53,2)
(34,27,2)
(59,31,2)
(51,53,2)
(55,53,2)
(2,53,2)
(40,13,2)
(52,13,2)
(35,5,2)
(35,53,2)
(8,53,2)
(7,13,2)
(34,53,2)
(11,53,2)
(5,53,2)
(18,53,2)
(30,15,2)
(37,53,2)
(21,53,2)
(20,53,2)
(47,53,2)
(44,64,2)
(7,41,2)
(44,53,2)
(43,53,2)
(57,0,2)
(56,53,2)
(6,35,2)
(24,41,2)
(57,53,2)
(41,57,2)
(17,53,2)
(25,53,2)
(38,53,2)
(62,13,2)
(38,35,2)
(28,53,2)
(5,34,2)
(16,13,2)
(64,11,2)
(46,6,2)
(10,53,2)
(54,53,2)
(24,13,2)
(15,41,2)
(27,53,2)
(27,55,2)
(6,53,2)
(4,53,2)
(13,41,2)
(5,49,2)
-----------------------------------
(0,int *)
(1,(130000)
(2,NULL)
(3,)
(4,data)
(5,(int *)
(6,data == NULL)
(7,data[0])
(8,int)
(9,100)
(10,int)
(11,data[0] = 5)
(12,)
(13,data != NULL)
(14,)
(15,data[0])
(16,data)
(17,0)
(18,break;)
(19,data)
(20,NULL)
(21,data)
(22,data)
(23,printLine("Benign, fixed string")
(24,free(data)
(25,data)
(26,)
(27,100*sizeof(int)
(28,data)
(29,if (data != NULL)
(30,printIntLine(data[0])
(31,-1)
(32,data)
(33,data[0] = 10)
(34,malloc(100*sizeof(int)
(35,* data = (int *)
(36,case 6:)
(37,sizeof(int)
(38,data[0])
(39,data)
(40,0)
(41,data = (int *)
(42,data)
(43,break;)
(44,printIntLine(data[0])
(45,RET)
(46,1)
(47,data)
(48,if (data == NULL)
(49,int *)
(50,switch(6)
(51,realloc(data, (130000)
(52,0)
(53,6)
(54,"Benign, fixed string")
(55,sizeof(int)
(56,0)
(57,(int *)
(58,)
(59,exit(-1)
(60,130000)
(61,5)
(62,10)
(63,default:)
(64,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
