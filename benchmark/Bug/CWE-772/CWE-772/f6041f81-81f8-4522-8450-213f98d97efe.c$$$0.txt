-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_10_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,85,87
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_10_bad(){    twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_10_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_10_bad
{    twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(36,23,0)
(26,1,0)
(31,4,0)
(41,13,0)
(16,13,0)
(29,6,0)
(34,23,0)
(24,18,0)
(6,30,0)
(44,46,0)
(25,30,0)
(17,1,0)
(5,30,0)
(14,15,0)
(41,12,0)
(38,15,0)
(35,6,0)
(20,24,0)
(37,39,0)
(10,46,0)
(33,14,0)
(12,41,0)
(23,42,0)
(12,42,0)
(1,17,0)
(22,46,0)
(23,36,0)
(27,41,0)
(45,42,0)
(34,17,0)
(23,34,0)
(4,42,0)
(2,17,0)
(19,4,0)
(3,22,0)
(7,12,0)
(9,37,0)
(37,42,0)
(21,37,0)
(39,11,0)
(46,22,0)
(39,37,0)
(28,12,0)
(42,23,0)
(11,39,0)
(22,14,0)
(8,30,0)
(11,15,0)
(18,43,0)
(13,15,0)
(18,24,0)
(17,34,0)
(42,15,0)
(46,42,0)
(41,12,1)
(45,32,1)
(46,44,1)
(44,10,1)
(32,6,1)
(14,33,1)
(10,13,1)
(12,42,1)
(16,41,1)
(40,0,1)
(35,29,1)
(11,39,1)
(41,27,1)
(34,17,1)
(1,26,1)
(37,21,1)
(46,42,1)
(2,45,1)
(19,31,1)
(12,28,1)
(0,32,1)
(31,42,1)
(21,9,1)
(39,37,1)
(3,46,1)
(37,42,1)
(33,22,1)
(22,3,1)
(18,24,1)
(28,7,1)
(13,16,1)
(20,4,1)
(27,12,1)
(24,20,1)
(7,4,1)
(4,19,1)
(9,14,1)
(4,42,1)
(23,36,1)
(22,46,1)
(26,2,1)
(42,23,1)
(6,35,1)
(17,1,1)
(0,11,1)
(7,18,1)
(23,34,1)
(23,34,2)
(13,32,2)
(20,4,2)
(3,32,2)
(17,1,2)
(21,32,2)
(10,32,2)
(28,32,2)
(9,32,2)
(4,32,2)
(18,24,2)
(46,42,2)
(31,32,2)
(37,32,2)
(17,32,2)
(41,12,2)
(22,32,2)
(26,32,2)
(37,42,2)
(12,32,2)
(41,32,2)
(39,37,2)
(23,36,2)
(34,17,2)
(42,32,2)
(19,32,2)
(24,4,2)
(16,32,2)
(42,23,2)
(1,32,2)
(18,4,2)
(44,32,2)
(12,42,2)
(14,32,2)
(7,32,2)
(11,32,2)
(39,32,2)
(2,32,2)
(11,39,2)
(34,32,2)
(23,32,2)
(45,32,2)
(27,32,2)
(33,32,2)
(22,46,2)
(46,32,2)
(4,42,2)
-----------------------------------
(0,globalTrue)
(1,sizeof(twoIntsStruct)
(2,100)
(3,intTwo)
(4,data == NULL)
(5,data)
(6,data = NULL)
(7,data)
(8,if(globalTrue)
(9,data)
(10,data)
(11,printStructLine(&data[0])
(12,data[0])
(13,data[0].intOne = 0)
(14,data[0].intTwo = 0)
(15,)
(16,0)
(17,100*sizeof(twoIntsStruct)
(18,exit(-1)
(19,NULL)
(20,1)
(21,0)
(22,data[0].intTwo)
(23,(twoIntsStruct *)
(24,-1)
(25,if(globalTrue)
(26,twoIntsStruct)
(27,intOne)
(28,0)
(29,data)
(30,)
(31,data)
(32,globalTrue)
(33,0)
(34,malloc(100*sizeof(twoIntsStruct)
(35,NULL)
(36,twoIntsStruct *)
(37,data[0])
(38,if (data == NULL)
(39,&data[0])
(40,RET)
(41,data[0].intOne)
(42,data = (twoIntsStruct *)
(43,)
(44,0)
(45,data)
(46,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
