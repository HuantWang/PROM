-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_03_bad()
{
    if(5==5)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105
-----computeFrom-----
7,8
7,9
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_03_bad(){    if(5==5)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_03_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_03_bad
{    if(5==5)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
if(5==5)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
5==5
5
5
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(31,41,0)
(11,25,0)
(13,27,0)
(46,29,0)
(21,34,0)
(5,29,0)
(25,11,0)
(21,29,0)
(40,27,0)
(20,29,0)
(4,45,0)
(24,6,0)
(17,16,0)
(9,33,0)
(1,15,0)
(10,33,0)
(12,40,0)
(45,4,0)
(29,45,0)
(22,6,0)
(45,0,0)
(25,41,0)
(34,38,0)
(29,34,0)
(4,6,0)
(13,41,0)
(41,25,0)
(39,21,0)
(33,46,0)
(41,34,0)
(28,5,0)
(2,46,0)
(46,33,0)
(6,4,0)
(7,34,0)
(33,9,0)
(44,23,0)
(43,16,0)
(46,25,0)
(45,29,0)
(36,19,0)
(16,41,0)
(15,35,0)
(15,1,0)
(30,24,0)
(18,34,0)
(14,1,0)
(42,9,0)
(37,13,0)
(3,19,0)
(0,45,0)
(6,24,0)
(8,34,0)
(40,41,0)
(25,46,0)
(26,5,0)
(32,19,1)
(2,31,1)
(5,28,1)
(5,29,1)
(33,9,1)
(21,39,1)
(6,24,1)
(45,4,1)
(20,19,1)
(29,45,1)
(31,21,1)
(40,41,1)
(39,15,1)
(28,26,1)
(32,40,1)
(46,33,1)
(15,1,1)
(39,5,1)
(16,41,1)
(45,0,1)
(3,36,1)
(12,13,1)
(26,29,1)
(10,2,1)
(1,14,1)
(24,30,1)
(21,29,1)
(46,29,1)
(4,6,1)
(41,25,1)
(32,16,1)
(13,37,1)
(25,46,1)
(9,42,1)
(16,43,1)
(43,17,1)
(17,41,1)
(30,22,1)
(14,5,1)
(42,10,1)
(25,11,1)
(22,20,1)
(37,16,1)
(40,12,1)
(19,3,1)
(13,41,1)
(29,19,2)
(20,19,2)
(21,19,2)
(46,29,2)
(10,19,2)
(15,1,2)
(41,19,2)
(13,16,2)
(14,5,2)
(17,19,2)
(37,16,2)
(43,19,2)
(16,19,2)
(22,19,2)
(15,5,2)
(40,16,2)
(24,19,2)
(16,41,2)
(29,45,2)
(5,29,2)
(6,24,2)
(40,41,2)
(26,19,2)
(31,19,2)
(6,19,2)
(4,6,2)
(25,19,2)
(45,4,2)
(33,19,2)
(12,16,2)
(46,19,2)
(45,19,2)
(39,19,2)
(4,19,2)
(5,19,2)
(30,19,2)
(9,19,2)
(2,19,2)
(13,41,2)
(25,46,2)
(25,11,2)
(33,9,2)
(28,19,2)
(45,0,2)
(46,33,2)
(42,19,2)
(1,5,2)
(41,25,2)
(21,29,2)
-----------------------------------
(0,wchar_t *)
(1,-1)
(2,data)
(3,5)
(4,malloc(100*sizeof(wchar_t)
(5,data == NULL)
(6,100*sizeof(wchar_t)
(7,data)
(8,if (data == NULL)
(9,sizeof(wchar_t)
(10,130000)
(11,wchar_t *)
(12,data)
(13,printWLine(data)
(14,1)
(15,exit(-1)
(16,data != NULL)
(17,data)
(18,if (data != NULL)
(19,5==5)
(20,data)
(21,printWLine(data)
(22,100)
(23,)
(24,sizeof(wchar_t)
(25,(wchar_t *)
(26,data)
(27,)
(28,NULL)
(29,* data = (wchar_t *)
(30,wchar_t)
(31,data)
(32,RET)
(33,(130000)
(34,)
(35,)
(36,5)
(37,data)
(38,)
(39,data)
(40,free(data)
(41,data = (wchar_t *)
(42,wchar_t)
(43,NULL)
(44,if(5==5)
(45,(wchar_t *)
(46,realloc(data, (130000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
