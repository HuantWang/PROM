-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_06_bad()
{
    wchar_t * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_06_bad(){    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_06_bad()
CWE401_Memory_Leak__wchar_t_malloc_06_bad
{    wchar_t * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,13,0)
(4,10,0)
(30,6,0)
(5,4,0)
(17,14,0)
(6,9,0)
(2,24,0)
(21,0,0)
(26,3,0)
(18,23,0)
(10,30,0)
(9,6,0)
(21,16,0)
(23,3,0)
(10,4,0)
(19,28,0)
(7,20,0)
(30,10,0)
(1,31,0)
(3,20,0)
(16,21,0)
(33,28,0)
(12,31,0)
(11,16,0)
(25,14,0)
(6,30,0)
(3,6,0)
(6,3,0)
(31,24,0)
(28,3,0)
(29,24,0)
(27,24,0)
(8,13,0)
(23,20,0)
(15,10,0)
(12,1,1)
(31,12,1)
(6,30,1)
(33,19,1)
(17,31,1)
(8,22,1)
(15,26,1)
(23,18,1)
(10,4,1)
(11,28,1)
(28,3,1)
(28,33,1)
(13,8,1)
(32,13,1)
(19,3,1)
(14,25,1)
(21,16,1)
(5,15,1)
(25,17,1)
(18,28,1)
(26,14,1)
(23,3,1)
(4,5,1)
(22,23,1)
(3,6,1)
(18,21,1)
(30,10,1)
(22,14,1)
(16,11,1)
(6,9,1)
(15,14,2)
(23,14,2)
(33,14,2)
(18,14,2)
(3,6,2)
(6,30,2)
(6,14,2)
(4,14,2)
(3,14,2)
(5,14,2)
(21,16,2)
(21,28,2)
(16,28,2)
(30,14,2)
(6,9,2)
(19,14,2)
(28,3,2)
(30,10,2)
(10,14,2)
(28,14,2)
(11,28,2)
(10,4,2)
(23,3,2)
(26,14,2)
-----------------------------------
(0,)
(1,data)
(2,if(STATIC_CONST_FIVE==5)
(3,data = (wchar_t *)
(4,sizeof(wchar_t)
(5,wchar_t)
(6,(wchar_t *)
(7,if (data == NULL)
(8,5)
(9,wchar_t *)
(10,100*sizeof(wchar_t)
(11,1)
(12,NULL)
(13,STATIC_CONST_FIVE==5)
(14,STATIC_CONST_FIVE==5)
(15,100)
(16,-1)
(17,STATIC_CONST_FIVE)
(18,data)
(19,data)
(20,)
(21,exit(-1)
(22,STATIC_CONST_FIVE)
(23,printWLine(data)
(24,)
(25,5)
(26,data)
(27,data)
(28,data == NULL)
(29,if(STATIC_CONST_FIVE==5)
(30,malloc(100*sizeof(wchar_t)
(31,data = NULL)
(32,RET)
(33,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
