-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,57,59,63,66,68,71,73,76,79,80,84,86,91,93,94,98,100,104,106
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
61,62
61,63
74,75
74,76
82,83
82,84
-----guardedBy-----
84,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_06_bad()
CWE401_Memory_Leak__malloc_realloc_char_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(STATIC_CONST_FIVE==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(51,17,0)
(44,40,0)
(19,8,0)
(43,19,0)
(28,37,0)
(17,5,0)
(12,32,0)
(5,40,0)
(31,52,0)
(41,27,0)
(5,30,0)
(1,5,0)
(35,50,0)
(29,5,0)
(50,35,0)
(23,50,0)
(49,36,0)
(42,30,0)
(7,13,0)
(40,13,0)
(47,30,0)
(11,10,0)
(47,42,0)
(22,30,0)
(52,13,0)
(21,3,0)
(40,44,0)
(6,48,0)
(50,48,0)
(52,27,0)
(15,30,0)
(13,40,0)
(13,42,0)
(13,52,0)
(32,5,0)
(36,42,0)
(45,22,0)
(37,24,0)
(3,35,0)
(18,47,0)
(22,42,0)
(8,19,0)
(34,37,0)
(9,29,0)
(3,42,0)
(27,52,0)
(25,29,0)
(37,5,0)
(8,4,0)
(17,24,0)
(16,10,0)
(3,21,0)
(30,0,0)
(40,5,0)
(48,50,0)
(39,30,0)
(32,24,0)
(35,3,0)
(20,30,0)
(14,42,0)
(33,46,0)
(2,36,0)
(26,22,0)
(42,3,0)
(19,43,1)
(48,6,1)
(13,52,1)
(42,3,1)
(6,23,1)
(45,36,1)
(50,48,1)
(29,5,1)
(40,44,1)
(43,36,1)
(25,5,1)
(14,10,1)
(10,11,1)
(13,42,1)
(36,49,1)
(9,25,1)
(49,2,1)
(32,12,1)
(17,51,1)
(41,31,1)
(31,7,1)
(17,5,1)
(27,41,1)
(18,22,1)
(26,45,1)
(1,47,1)
(28,29,1)
(40,13,1)
(36,42,1)
(38,17,1)
(32,5,1)
(47,18,1)
(38,10,1)
(11,16,1)
(22,26,1)
(8,19,1)
(23,14,1)
(51,32,1)
(37,5,1)
(34,28,1)
(22,42,1)
(37,34,1)
(2,42,1)
(3,35,1)
(29,9,1)
(45,8,1)
(52,27,1)
(38,29,1)
(3,21,1)
(7,1,1)
(5,40,1)
(35,50,1)
(12,37,1)
(47,42,1)
(12,29,2)
(43,36,2)
(14,10,2)
(22,10,2)
(13,10,2)
(36,10,2)
(47,42,2)
(52,27,2)
(42,10,2)
(36,42,2)
(45,10,2)
(28,29,2)
(1,10,2)
(25,10,2)
(50,10,2)
(35,50,2)
(48,10,2)
(32,5,2)
(8,36,2)
(26,10,2)
(5,10,2)
(40,13,2)
(3,35,2)
(5,40,2)
(37,29,2)
(18,10,2)
(17,29,2)
(7,10,2)
(42,3,2)
(27,10,2)
(49,10,2)
(29,5,2)
(22,42,2)
(9,10,2)
(31,10,2)
(13,42,2)
(13,52,2)
(41,10,2)
(52,10,2)
(3,21,2)
(23,10,2)
(51,29,2)
(29,10,2)
(32,29,2)
(34,29,2)
(3,10,2)
(6,10,2)
(17,5,2)
(50,48,2)
(35,10,2)
(8,19,2)
(40,10,2)
(37,5,2)
(40,44,2)
(47,10,2)
(19,36,2)
(2,10,2)
-----------------------------------
(0,)
(1,data)
(2,data)
(3,(char *)
(4,)
(5,data = (char *)
(6,char)
(7,data)
(8,exit(-1)
(9,NULL)
(10,STATIC_CONST_FIVE==5)
(11,5)
(12,data)
(13,realloc(data, (130000)
(14,data)
(15,if (data == NULL)
(16,STATIC_CONST_FIVE)
(17,free(data)
(18,data)
(19,-1)
(20,if (data != NULL)
(21,char *)
(22,strcpy(data, "A String")
(23,100)
(24,)
(25,data)
(26,"A String")
(27,sizeof(char)
(28,data)
(29,data != NULL)
(30,)
(31,130000)
(32,printLine(data)
(33,if(STATIC_CONST_FIVE==5)
(34,"New String")
(35,malloc(100*sizeof(char)
(36,data == NULL)
(37,strcpy(data, "New String")
(38,RET)
(39,data)
(40,(char *)
(41,char)
(42,* data = (char *)
(43,1)
(44,char *)
(45,data)
(46,)
(47,printLine(data)
(48,sizeof(char)
(49,NULL)
(50,100*sizeof(char)
(51,data)
(52,(130000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
