-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,69,71
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_08_bad()
CWE401_Memory_Leak__char_calloc_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,29,0)
(10,6,0)
(22,6,0)
(0,6,0)
(26,12,0)
(12,17,0)
(23,18,0)
(7,0,0)
(31,9,0)
(12,22,0)
(19,22,0)
(28,0,0)
(15,18,0)
(1,8,0)
(22,12,0)
(8,9,0)
(24,3,0)
(4,17,0)
(12,26,0)
(11,8,0)
(18,15,0)
(14,4,0)
(17,4,0)
(5,9,0)
(25,22,0)
(2,19,0)
(0,22,0)
(3,6,0)
(21,17,0)
(32,19,0)
(17,12,0)
(3,22,0)
(20,9,0)
(32,2,1)
(1,11,1)
(19,22,1)
(12,17,1)
(28,7,1)
(0,22,1)
(30,8,1)
(17,4,1)
(21,25,1)
(22,12,1)
(3,22,1)
(14,21,1)
(7,15,1)
(8,1,1)
(0,28,1)
(23,19,1)
(24,0,1)
(27,3,1)
(7,19,1)
(2,22,1)
(4,14,1)
(15,18,1)
(27,30,1)
(19,32,1)
(3,24,1)
(18,23,1)
(25,30,1)
(12,26,1)
(16,27,1)
(12,17,2)
(19,22,2)
(3,22,2)
(2,30,2)
(12,26,2)
(0,30,2)
(28,30,2)
(3,30,2)
(7,30,2)
(14,30,2)
(23,19,2)
(17,30,2)
(12,30,2)
(22,12,2)
(21,30,2)
(17,4,2)
(15,19,2)
(0,22,2)
(15,18,2)
(32,30,2)
(24,30,2)
(4,30,2)
(18,19,2)
(22,30,2)
(25,30,2)
(19,30,2)
-----------------------------------
(0,strcpy(data, "A String")
(1,NULL)
(2,data)
(3,printLine(data)
(4,sizeof(char)
(5,data)
(6,)
(7,data)
(8,data = NULL)
(9,)
(10,if (data == NULL)
(11,data)
(12,(char *)
(13, sizeof(char)
(14,char)
(15,exit(-1)
(16,RET)
(17,calloc(100, sizeof(char)
(18,-1)
(19,data == NULL)
(20,if(staticReturnsTrue()
(21,100)
(22,data = (char *)
(23,1)
(24,data)
(25,data)
(26,char *)
(27,staticReturnsTrue()
(28,"A String")
(29,)
(30,staticReturnsTrue()
(31,if(staticReturnsTrue()
(32,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
