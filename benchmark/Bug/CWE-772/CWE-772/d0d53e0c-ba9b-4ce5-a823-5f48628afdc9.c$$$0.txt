-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,85,87
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad(){    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_05_bad
{    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,5,0)
(12,29,0)
(41,18,0)
(16,33,0)
(10,0,0)
(5,45,0)
(36,39,0)
(9,30,0)
(0,8,0)
(30,29,0)
(40,36,0)
(44,20,0)
(19,34,0)
(0,39,0)
(21,45,0)
(33,39,0)
(42,37,0)
(8,0,0)
(28,33,0)
(22,15,0)
(4,15,0)
(26,43,0)
(33,27,0)
(46,45,0)
(21,36,0)
(7,20,0)
(38,30,0)
(13,39,0)
(32,20,0)
(1,9,0)
(39,36,0)
(30,9,0)
(23,8,0)
(39,18,0)
(31,18,0)
(6,43,0)
(27,31,0)
(17,9,0)
(15,20,0)
(29,18,0)
(34,18,0)
(8,34,0)
(37,11,0)
(45,5,0)
(36,21,0)
(43,39,0)
(25,0,0)
(27,33,0)
(31,27,0)
(45,21,0)
(9,39,0)
(24,42,0)
(37,42,0)
(36,40,0)
(35,14,1)
(3,15,1)
(8,23,1)
(14,3,1)
(23,0,1)
(2,46,1)
(19,8,1)
(10,43,1)
(43,39,1)
(9,39,1)
(30,9,1)
(46,13,1)
(6,26,1)
(14,31,1)
(5,2,1)
(13,3,1)
(36,40,1)
(21,45,1)
(9,1,1)
(43,6,1)
(15,4,1)
(33,16,1)
(25,10,1)
(37,42,1)
(42,24,1)
(12,30,1)
(26,39,1)
(27,33,1)
(31,27,1)
(34,19,1)
(39,36,1)
(8,0,1)
(16,28,1)
(45,5,1)
(29,12,1)
(0,39,1)
(4,22,1)
(1,17,1)
(36,21,1)
(17,34,1)
(33,39,1)
(24,43,1)
(38,9,1)
(10,37,1)
(30,38,1)
(0,25,1)
(28,29,1)
(39,36,2)
(2,3,2)
(6,3,2)
(0,39,2)
(28,3,2)
(45,5,2)
(10,3,2)
(19,3,2)
(31,3,2)
(25,3,2)
(36,3,2)
(17,3,2)
(46,3,2)
(24,43,2)
(27,33,2)
(39,3,2)
(36,21,2)
(23,3,2)
(9,3,2)
(42,43,2)
(21,45,2)
(30,3,2)
(5,3,2)
(37,43,2)
(16,3,2)
(34,3,2)
(31,27,2)
(45,3,2)
(1,3,2)
(36,40,2)
(38,3,2)
(9,39,2)
(26,3,2)
(12,3,2)
(13,3,2)
(33,39,2)
(8,3,2)
(8,0,2)
(43,39,2)
(29,3,2)
(37,42,2)
(43,3,2)
(27,3,2)
(33,3,2)
(21,3,2)
(30,9,2)
(0,3,2)
-----------------------------------
(0,data[0])
(1,0)
(2,twoIntsStruct)
(3,staticTrue)
(4,NULL)
(5,sizeof(twoIntsStruct)
(6,NULL)
(7,data)
(8,data[0].intOne)
(9,data[0])
(10,data)
(11,)
(12,0)
(13,data)
(14,staticTrue)
(15,data = NULL)
(16,0)
(17,data)
(18,)
(19,0)
(20,)
(21,malloc(100*sizeof(twoIntsStruct)
(22,data)
(23,intOne)
(24,1)
(25,0)
(26,data)
(27,&data[0])
(28,data)
(29,data[0].intTwo = 0)
(30,data[0].intTwo)
(31,printStructLine(&data[0])
(32,if(staticTrue)
(33,data[0])
(34,data[0].intOne = 0)
(35,RET)
(36,(twoIntsStruct *)
(37,exit(-1)
(38,intTwo)
(39,data = (twoIntsStruct *)
(40,twoIntsStruct *)
(41,if (data == NULL)
(42,-1)
(43,data == NULL)
(44,if(staticTrue)
(45,100*sizeof(twoIntsStruct)
(46,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
