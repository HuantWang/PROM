-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
45,46
47,48
50,51
51,52
51,53
52,53
54,55
56,57
57,58
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,49,53,55,58
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    return data;}
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
return data;
data
data
-----joern-----
(1,5,0)
(14,8,0)
(5,1,0)
(8,0,0)
(11,10,0)
(7,20,0)
(10,0,0)
(3,2,0)
(4,15,0)
(10,15,0)
(15,0,0)
(17,10,0)
(10,18,0)
(13,20,0)
(20,13,0)
(22,5,0)
(9,21,0)
(13,3,0)
(23,2,0)
(20,7,0)
(20,15,0)
(8,18,0)
(12,3,0)
(3,13,0)
(15,20,0)
(21,15,0)
(8,15,0)
(1,6,0)
(21,18,0)
(2,3,0)
(19,21,0)
(15,18,0)
(16,0,0)
(14,1,1)
(15,20,1)
(11,8,1)
(5,22,1)
(15,18,1)
(23,12,1)
(13,3,1)
(8,15,1)
(10,18,1)
(17,10,1)
(21,15,1)
(19,9,1)
(10,11,1)
(20,13,1)
(20,7,1)
(8,18,1)
(22,21,1)
(21,19,1)
(10,15,1)
(14,21,1)
(1,5,1)
(12,4,1)
(21,18,1)
(2,23,1)
(8,14,1)
(3,2,1)
(9,15,1)
(1,5,2)
(20,13,2)
(22,21,2)
(15,20,2)
(17,10,2)
(8,15,2)
(1,21,2)
(21,18,2)
(21,15,2)
(3,2,2)
(13,3,2)
(8,18,2)
(15,18,2)
(20,7,2)
(10,18,2)
(10,15,2)
(5,21,2)
-----------------------------------
(0,)
(1,exit(-1)
(2,sizeof(wchar_t)
(3,100*sizeof(wchar_t)
(4,data)
(5,-1)
(6,)
(7,wchar_t *)
(8,printWLine(data)
(9,data)
(10,return data;)
(11,data)
(12,100)
(13,malloc(100*sizeof(wchar_t)
(14,data)
(15,data = (wchar_t *)
(16,if (data == NULL)
(17,RET)
(18,wchar_t * data)
(19,NULL)
(20,(wchar_t *)
(21,data == NULL)
(22,1)
(23,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
