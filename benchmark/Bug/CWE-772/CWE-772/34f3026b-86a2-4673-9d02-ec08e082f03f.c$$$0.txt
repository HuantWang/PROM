-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_09_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,86
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_09_bad(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_09_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_09_bad
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(36,30,0)
(21,40,0)
(13,39,0)
(29,43,0)
(5,22,0)
(41,11,0)
(19,24,0)
(17,3,0)
(10,7,0)
(21,16,0)
(33,24,0)
(22,30,0)
(14,35,0)
(23,21,0)
(11,7,0)
(16,13,0)
(11,40,0)
(40,36,0)
(24,33,0)
(36,40,0)
(9,43,0)
(42,21,0)
(18,16,0)
(40,39,0)
(15,14,0)
(20,40,0)
(30,22,0)
(26,33,0)
(25,3,0)
(4,3,0)
(12,39,0)
(36,46,0)
(2,33,0)
(8,3,0)
(45,4,0)
(6,15,0)
(1,28,0)
(27,4,0)
(16,21,0)
(43,40,0)
(30,36,0)
(7,10,0)
(7,11,0)
(37,11,0)
(24,28,0)
(28,39,0)
(10,39,0)
(46,36,0)
(33,40,0)
(14,15,0)
(32,13,0)
(34,30,0)
(30,22,1)
(2,43,1)
(22,5,1)
(23,42,1)
(2,14,1)
(14,15,1)
(7,11,1)
(18,21,1)
(24,19,1)
(13,32,1)
(0,44,1)
(44,10,1)
(42,28,1)
(4,27,1)
(21,23,1)
(28,1,1)
(32,16,1)
(40,36,1)
(5,34,1)
(19,33,1)
(31,4,1)
(26,2,1)
(21,40,1)
(20,31,1)
(11,37,1)
(9,40,1)
(6,43,1)
(27,45,1)
(36,46,1)
(37,41,1)
(15,6,1)
(33,40,1)
(43,29,1)
(10,7,1)
(43,40,1)
(16,18,1)
(36,30,1)
(34,20,1)
(29,9,1)
(44,31,1)
(16,21,1)
(33,26,1)
(24,33,1)
(11,40,1)
(41,13,1)
(1,24,1)
(41,31,2)
(10,31,2)
(37,31,2)
(16,31,2)
(7,11,2)
(5,31,2)
(13,31,2)
(29,31,2)
(2,31,2)
(21,31,2)
(9,31,2)
(26,31,2)
(33,40,2)
(32,31,2)
(10,7,2)
(40,31,2)
(28,31,2)
(30,22,2)
(21,40,2)
(40,36,2)
(20,31,2)
(24,33,2)
(43,31,2)
(14,15,2)
(42,31,2)
(16,21,2)
(36,31,2)
(36,46,2)
(6,43,2)
(1,31,2)
(33,31,2)
(23,31,2)
(22,31,2)
(14,43,2)
(7,31,2)
(24,31,2)
(19,31,2)
(11,31,2)
(30,31,2)
(43,40,2)
(34,31,2)
(18,31,2)
(15,43,2)
(11,40,2)
(36,30,2)
-----------------------------------
(0,RET)
(1,0)
(2,data)
(3,)
(4,data = NULL)
(5,twoIntsStruct)
(6,1)
(7,&data[0])
(8,if(GLOBAL_CONST_TRUE)
(9,data)
(10,printStructLine(&data[0])
(11,data[0])
(12,if (data == NULL)
(13,data[0].intTwo = 0)
(14,exit(-1)
(15,-1)
(16,data[0].intTwo)
(17,if(GLOBAL_CONST_TRUE)
(18,intTwo)
(19,intOne)
(20,data)
(21,data[0])
(22,sizeof(twoIntsStruct)
(23,0)
(24,data[0].intOne)
(25,data)
(26,0)
(27,NULL)
(28,data[0].intOne = 0)
(29,NULL)
(30,calloc(100, sizeof(twoIntsStruct)
(31,GLOBAL_CONST_TRUE)
(32,0)
(33,data[0])
(34,100)
(35,)
(36,(twoIntsStruct *)
(37,0)
(38, sizeof(twoIntsStruct)
(39,)
(40,data = (twoIntsStruct *)
(41,data)
(42,data)
(43,data == NULL)
(44,GLOBAL_CONST_TRUE)
(45,data)
(46,twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
