-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_04_bad()
{
    int64_t * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,59,60,61,65,68,69,72,74
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_04_bad(){    int64_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_04_bad()
CWE401_Memory_Leak__int64_t_calloc_04_bad
{    int64_t * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,10,0)
(13,17,0)
(12,27,0)
(22,19,0)
(16,0,0)
(7,25,0)
(19,25,0)
(3,10,0)
(0,16,0)
(32,28,0)
(29,28,0)
(17,15,0)
(14,26,0)
(17,25,0)
(25,19,0)
(25,17,0)
(30,19,0)
(10,17,0)
(29,15,0)
(6,26,0)
(31,15,0)
(27,26,0)
(18,26,0)
(0,1,0)
(9,16,0)
(25,7,0)
(11,27,0)
(21,30,0)
(28,29,0)
(19,30,0)
(2,28,0)
(28,17,0)
(8,15,0)
(19,30,1)
(10,3,1)
(16,9,1)
(25,7,1)
(25,19,1)
(30,21,1)
(29,28,1)
(5,4,1)
(24,17,1)
(22,13,1)
(21,22,1)
(0,16,1)
(23,27,1)
(27,11,1)
(17,25,1)
(28,32,1)
(4,29,1)
(2,8,1)
(11,12,1)
(3,24,1)
(9,10,1)
(8,0,1)
(4,23,1)
(8,10,1)
(32,2,1)
(10,17,1)
(28,17,1)
(13,23,1)
(10,17,2)
(24,23,2)
(10,23,2)
(8,23,2)
(19,30,2)
(30,23,2)
(29,23,2)
(17,25,2)
(29,28,2)
(2,23,2)
(25,19,2)
(0,10,2)
(3,23,2)
(25,7,2)
(13,23,2)
(19,23,2)
(21,23,2)
(17,23,2)
(25,23,2)
(16,10,2)
(32,23,2)
(22,23,2)
(28,23,2)
(0,16,2)
(9,10,2)
(28,17,2)
-----------------------------------
(0,exit(-1)
(1,)
(2,data)
(3,NULL)
(4,STATIC_CONST_TRUE)
(5,RET)
(6,if(STATIC_CONST_TRUE)
(7,int64_t *)
(8,L)
(9,1)
(10,data == NULL)
(11,NULL)
(12,data)
(13,data)
(14,if(STATIC_CONST_TRUE)
(15,)
(16,-1)
(17,data = (int64_t *)
(18,data)
(19,calloc(100, sizeof(int64_t)
(20, sizeof(int64_t)
(21,int64_t)
(22,100)
(23,STATIC_CONST_TRUE)
(24,data)
(25,(int64_t *)
(26,)
(27,data = NULL)
(28,data[0])
(29,printLongLongLine(data[0])
(30,sizeof(int64_t)
(31,if (data == NULL)
(32,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
