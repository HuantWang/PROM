-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_16_bad()
{
    while(1)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,48,49,50,54,57,58,62,65,67,70,72,75,78,79,83,85,91,92,93,97,100,101,105,107,108
-----computeFrom-----
25,26
25,27
32,33
32,34
45,46
45,47
60,61
60,62
73,74
73,75
81,82
81,83
88,89
88,90
-----guardedBy-----
83,107
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_16_bad(){    while(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_int_16_bad()
CWE401_Memory_Leak__malloc_realloc_int_16_bad
{    while(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }        break;    }}
while(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }        break;    }
1
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }        break;    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(58,8,0)
(0,21,0)
(25,28,0)
(21,58,0)
(24,55,0)
(49,51,0)
(59,26,0)
(32,41,0)
(15,31,0)
(40,28,0)
(31,15,0)
(44,34,0)
(55,24,0)
(32,44,0)
(52,44,0)
(34,29,0)
(7,33,0)
(24,56,0)
(12,51,0)
(53,46,0)
(44,46,0)
(15,36,0)
(51,44,0)
(6,33,0)
(8,33,0)
(10,44,0)
(36,46,0)
(51,36,0)
(38,21,0)
(33,6,0)
(19,0,0)
(27,52,0)
(14,41,0)
(0,36,0)
(57,6,0)
(45,32,0)
(26,14,0)
(2,46,0)
(13,55,0)
(21,46,0)
(33,8,0)
(25,34,0)
(26,44,0)
(34,25,0)
(3,14,0)
(46,42,0)
(1,0,0)
(39,36,0)
(18,51,0)
(9,30,0)
(23,21,0)
(50,23,0)
(43,25,0)
(48,23,0)
(11,42,0)
(30,28,0)
(15,21,0)
(58,16,0)
(22,46,0)
(28,25,0)
(28,30,0)
(18,41,0)
(16,58,0)
(34,44,0)
(51,14,0)
(37,15,0)
(58,21,0)
(31,46,0)
(5,52,0)
(51,18,0)
(54,4,0)
(29,34,0)
(8,58,0)
(20,26,0)
(25,21,0)
(35,15,0)
(10,31,1)
(34,25,1)
(32,44,1)
(17,47,1)
(59,52,1)
(13,23,1)
(57,7,1)
(31,15,1)
(1,23,1)
(58,16,1)
(0,21,1)
(39,0,1)
(23,21,1)
(48,21,1)
(26,20,1)
(43,10,1)
(14,3,1)
(8,33,1)
(51,12,1)
(30,9,1)
(44,34,1)
(55,13,1)
(20,59,1)
(15,37,1)
(50,48,1)
(21,58,1)
(23,50,1)
(15,21,1)
(38,47,1)
(12,49,1)
(51,44,1)
(1,24,1)
(3,26,1)
(49,14,1)
(58,8,1)
(5,44,1)
(51,14,1)
(11,32,1)
(34,29,1)
(25,28,1)
(9,40,1)
(0,19,1)
(15,36,1)
(45,18,1)
(27,5,1)
(51,36,1)
(6,57,1)
(33,6,1)
(19,1,1)
(52,44,1)
(36,39,1)
(28,30,1)
(11,52,1)
(35,36,1)
(18,51,1)
(24,55,1)
(25,21,1)
(37,35,1)
(52,27,1)
(26,44,1)
(7,38,1)
(40,43,1)
(32,45,1)
(17,11,1)
(25,28,2)
(6,47,2)
(59,52,2)
(21,58,2)
(9,47,2)
(0,47,2)
(39,47,2)
(34,47,2)
(33,47,2)
(18,51,2)
(18,52,2)
(25,21,2)
(37,47,2)
(30,47,2)
(31,15,2)
(34,25,2)
(5,47,2)
(28,30,2)
(44,47,2)
(21,47,2)
(58,8,2)
(0,21,2)
(28,47,2)
(45,52,2)
(19,47,2)
(51,14,2)
(58,16,2)
(10,47,2)
(40,47,2)
(38,47,2)
(52,47,2)
(26,44,2)
(8,47,2)
(51,36,2)
(50,47,2)
(51,44,2)
(36,47,2)
(12,52,2)
(20,52,2)
(55,23,2)
(8,33,2)
(25,47,2)
(35,47,2)
(23,21,2)
(51,52,2)
(7,47,2)
(3,52,2)
(15,36,2)
(49,52,2)
(31,47,2)
(1,47,2)
(52,44,2)
(58,47,2)
(48,47,2)
(57,47,2)
(15,47,2)
(26,52,2)
(43,47,2)
(13,23,2)
(24,23,2)
(32,44,2)
(32,52,2)
(33,6,2)
(24,55,2)
(23,47,2)
(15,21,2)
(34,29,2)
(14,52,2)
(11,47,2)
(27,47,2)
(44,34,2)
-----------------------------------
(0,data[0])
(1,data)
(2,if (data != NULL)
(3,10)
(4,)
(5,data)
(6,sizeof(int)
(7,100)
(8,malloc(100*sizeof(int)
(9,int)
(10,data)
(11,break;)
(12,0)
(13,1)
(14,data[0] = 10)
(15,data[0])
(16,int *)
(17,RET)
(18,printIntLine(data[0])
(19,0)
(20,0)
(21,* data = (int *)
(22,data)
(23,data == NULL)
(24,exit(-1)
(25,realloc(data, (130000)
(26,data[0])
(27,NULL)
(28,(130000)
(29,int *)
(30,sizeof(int)
(31,printIntLine(data[0])
(32,free(data)
(33,100*sizeof(int)
(34,(int *)
(35,data)
(36,data[0] = 5)
(37,0)
(38,data)
(39,5)
(40,130000)
(41,)
(42,)
(43,data)
(44,data = (int *)
(45,data)
(46,)
(47,1)
(48,data)
(49,data)
(50,NULL)
(51,data[0])
(52,data != NULL)
(53,if (data == NULL)
(54,while(1)
(55,-1)
(56,)
(57,int)
(58,(int *)
(59,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
