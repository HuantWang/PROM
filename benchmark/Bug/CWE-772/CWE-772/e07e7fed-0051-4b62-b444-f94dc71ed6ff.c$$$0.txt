-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_08_bad()
{
    if(staticReturnsTrue())
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105
-----computeFrom-----
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_08_bad(){    if(staticReturnsTrue())    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_08_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_08_bad
{    if(staticReturnsTrue())    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
if(staticReturnsTrue())    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(19,39,0)
(15,19,0)
(13,39,0)
(16,30,0)
(26,16,0)
(19,6,0)
(10,16,0)
(33,23,0)
(38,25,0)
(30,16,0)
(11,44,0)
(44,34,0)
(2,38,0)
(28,44,0)
(25,44,0)
(43,18,0)
(41,26,0)
(31,44,0)
(3,0,0)
(3,30,0)
(14,40,0)
(32,8,0)
(40,29,0)
(30,3,0)
(15,4,0)
(5,38,0)
(18,4,0)
(40,14,0)
(22,31,0)
(37,25,0)
(1,36,0)
(16,26,0)
(39,44,0)
(13,20,0)
(4,18,0)
(7,14,0)
(39,19,0)
(19,15,0)
(36,39,0)
(31,25,0)
(9,4,0)
(36,20,0)
(0,3,0)
(17,13,0)
(24,44,0)
(21,15,0)
(4,15,0)
(42,8,0)
(25,3,0)
(3,25,0)
(15,25,0)
(12,39,0)
(8,39,0)
(6,19,0)
(40,14,1)
(22,38,1)
(16,26,1)
(25,3,1)
(35,27,1)
(19,6,1)
(4,18,1)
(38,25,1)
(14,7,1)
(3,30,1)
(10,37,1)
(42,39,1)
(38,2,1)
(26,41,1)
(37,27,1)
(13,39,1)
(36,39,1)
(8,39,1)
(39,19,1)
(43,9,1)
(8,32,1)
(17,8,1)
(31,25,1)
(31,22,1)
(7,38,1)
(9,21,1)
(21,12,1)
(19,15,1)
(13,17,1)
(36,1,1)
(41,10,1)
(3,0,1)
(35,8,1)
(15,25,1)
(18,43,1)
(5,25,1)
(12,31,1)
(2,5,1)
(1,13,1)
(15,4,1)
(32,42,1)
(30,16,1)
(22,40,1)
(35,36,1)
(19,15,2)
(22,27,2)
(31,25,2)
(8,27,2)
(43,27,2)
(3,30,2)
(15,4,2)
(37,27,2)
(5,27,2)
(30,16,2)
(41,27,2)
(30,27,2)
(16,27,2)
(8,39,2)
(3,27,2)
(4,18,2)
(18,27,2)
(25,27,2)
(15,25,2)
(39,19,2)
(36,39,2)
(13,8,2)
(25,3,2)
(10,27,2)
(36,8,2)
(38,25,2)
(21,27,2)
(26,27,2)
(14,38,2)
(1,8,2)
(39,27,2)
(12,27,2)
(17,8,2)
(3,0,2)
(19,6,2)
(32,27,2)
(7,38,2)
(15,27,2)
(13,39,2)
(31,27,2)
(19,27,2)
(42,27,2)
(2,27,2)
(16,26,2)
(40,14,2)
(9,27,2)
(40,38,2)
(38,27,2)
(4,27,2)
-----------------------------------
(0,wchar_t *)
(1,data)
(2,NULL)
(3,(wchar_t *)
(4,(130000)
(5,data)
(6,wchar_t *)
(7,1)
(8,data != NULL)
(9,130000)
(10,100)
(11,if (data != NULL)
(12,data)
(13,printWLine(data)
(14,-1)
(15,realloc(data, (130000)
(16,100*sizeof(wchar_t)
(17,data)
(18,sizeof(wchar_t)
(19,(wchar_t *)
(20,)
(21,data)
(22,data)
(23,)
(24,data)
(25,* data = (wchar_t *)
(26,sizeof(wchar_t)
(27,staticReturnsTrue()
(28,if (data == NULL)
(29,)
(30,malloc(100*sizeof(wchar_t)
(31,printWLine(data)
(32,NULL)
(33,if(staticReturnsTrue()
(34,)
(35,RET)
(36,free(data)
(37,data)
(38,data == NULL)
(39,data = (wchar_t *)
(40,exit(-1)
(41,wchar_t)
(42,data)
(43,wchar_t)
(44,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
