-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
97,98
99,100
101,102
101,103
102,103
103,104
103,105
105,106
105,107
105,108
108,109
109,110
110,111
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,63,66,67,71,73,78,80,84,86,87,91,93,98,100,104,106,107,111,112
-----computeFrom-----
35,36
35,37
52,53
52,54
69,70
69,71
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_32_bad()
CWE401_Memory_Leak__wchar_t_calloc_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(19,46,0)
(1,38,0)
(38,1,0)
(16,47,0)
(15,9,0)
(4,37,0)
(42,40,0)
(45,10,0)
(10,43,0)
(24,38,0)
(44,9,0)
(41,49,0)
(38,24,0)
(6,34,0)
(13,31,0)
(8,0,0)
(29,10,0)
(11,21,0)
(3,25,0)
(36,27,0)
(22,30,0)
(20,22,0)
(34,38,0)
(5,49,0)
(28,43,0)
(6,10,0)
(34,10,0)
(46,37,0)
(21,11,0)
(30,22,0)
(46,22,0)
(33,15,0)
(40,43,0)
(32,43,0)
(31,10,0)
(47,34,0)
(31,34,0)
(7,47,0)
(1,27,0)
(0,15,0)
(23,34,0)
(0,8,0)
(22,43,0)
(35,0,0)
(2,43,0)
(50,8,0)
(25,31,0)
(38,34,0)
(25,22,0)
(18,11,0)
(21,17,0)
(26,30,0)
(48,1,0)
(37,10,0)
(15,43,0)
(49,43,0)
(9,15,0)
(12,6,0)
(37,46,0)
(27,1,0)
(8,40,0)
(21,11,1)
(38,24,1)
(19,4,1)
(4,49,1)
(16,34,1)
(1,27,1)
(8,0,1)
(5,15,1)
(15,9,1)
(6,34,1)
(14,8,1)
(46,19,1)
(41,5,1)
(12,21,1)
(30,26,1)
(31,13,1)
(3,6,1)
(47,34,1)
(12,47,1)
(35,50,1)
(9,44,1)
(11,18,1)
(47,7,1)
(31,34,1)
(46,22,1)
(18,47,1)
(38,1,1)
(13,25,1)
(7,16,1)
(0,15,1)
(36,48,1)
(49,41,1)
(25,22,1)
(0,35,1)
(37,46,1)
(44,33,1)
(25,3,1)
(48,23,1)
(34,38,1)
(33,22,1)
(6,12,1)
(26,20,1)
(50,31,1)
(22,30,1)
(27,36,1)
(23,37,1)
(22,30,2)
(31,34,2)
(38,1,2)
(1,27,2)
(47,34,2)
(18,47,2)
(15,9,2)
(38,24,2)
(21,11,2)
(0,15,2)
(6,34,2)
(37,46,2)
(8,0,2)
(46,22,2)
(34,38,2)
(25,22,2)
(11,47,2)
(21,47,2)
-----------------------------------
(0,*dataPtr2)
(1,calloc(100, sizeof(wchar_t)
(2,dataPtr1)
(3,dataPtr1)
(4,data)
(5,data)
(6,printWLine(data)
(7,NULL)
(8,* data = *dataPtr2)
(9,&data)
(10,)
(11,-1)
(12,data)
(13,data)
(14,RET)
(15,* *dataPtr2 = &data)
(16,data)
(17,)
(18,1)
(19,dataPtr1)
(20,dataPtr1)
(21,exit(-1)
(22,* *dataPtr1 = &data)
(23,data)
(24,wchar_t *)
(25,*dataPtr1)
(26,data)
(27,sizeof(wchar_t)
(28,dataPtr2)
(29,if (data == NULL)
(30,&data)
(31,*dataPtr1 = data)
(32,data)
(33,dataPtr2)
(34,data = (wchar_t *)
(35,dataPtr2)
(36,wchar_t)
(37,* data = *dataPtr1)
(38,(wchar_t *)
(39, sizeof(wchar_t)
(40,)
(41,NULL)
(42,data)
(43,)
(44,data)
(45,data)
(46,*dataPtr1)
(47,data == NULL)
(48,100)
(49,data = NULL)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
