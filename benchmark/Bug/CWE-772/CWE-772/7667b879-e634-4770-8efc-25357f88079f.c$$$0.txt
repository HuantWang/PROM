-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_15_bad()
{
    twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
88,89
89,90
89,91
90,91
94,95
94,96
96,97
96,98
96,99
96,100
96,101
96,102
97,98
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,85,86,87,91,92,93,95,98,99,100,101,105,106,107
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_15_bad(){    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_15_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_15_bad
{    twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(16,2,0)
(26,14,0)
(24,10,0)
(7,30,0)
(9,13,0)
(39,27,0)
(0,27,0)
(23,11,0)
(2,27,0)
(36,10,0)
(37,22,0)
(5,23,0)
(42,41,0)
(59,21,0)
(51,3,0)
(38,27,0)
(20,23,0)
(54,10,0)
(10,51,0)
(50,21,0)
(60,53,0)
(53,27,0)
(43,14,0)
(24,35,0)
(47,3,0)
(25,27,0)
(12,9,0)
(40,51,0)
(29,30,0)
(35,27,0)
(21,51,0)
(19,27,0)
(58,22,0)
(57,40,0)
(41,30,0)
(23,20,0)
(11,14,0)
(3,51,0)
(8,52,0)
(11,23,0)
(10,24,0)
(45,4,0)
(3,11,0)
(4,40,0)
(3,47,0)
(46,19,0)
(4,19,0)
(9,2,0)
(1,27,0)
(6,22,0)
(44,51,0)
(52,28,0)
(40,4,0)
(17,40,0)
(32,11,0)
(13,9,0)
(51,27,0)
(49,20,0)
(11,3,0)
(18,30,0)
(14,22,0)
(48,13,0)
(28,56,0)
(33,13,0)
(35,24,0)
(15,30,0)
(13,51,0)
(28,52,0)
(57,28,1)
(41,42,1)
(55,25,1)
(3,11,1)
(46,4,1)
(20,49,1)
(44,31,1)
(23,20,1)
(14,26,1)
(54,36,1)
(5,32,1)
(15,55,1)
(10,51,1)
(21,51,1)
(10,54,1)
(48,33,1)
(51,3,1)
(40,51,1)
(35,24,1)
(42,55,1)
(28,52,1)
(17,57,1)
(18,41,1)
(34,18,1)
(8,21,1)
(9,13,1)
(34,15,1)
(53,60,1)
(26,43,1)
(13,51,1)
(45,40,1)
(50,51,1)
(12,13,1)
(31,14,1)
(52,8,1)
(3,47,1)
(39,35,1)
(59,50,1)
(49,5,1)
(25,53,1)
(13,48,1)
(60,31,1)
(11,23,1)
(4,40,1)
(19,46,1)
(2,16,1)
(36,2,1)
(55,39,1)
(11,14,1)
(32,44,1)
(4,45,1)
(9,12,1)
(21,59,1)
(24,10,1)
(33,19,1)
(40,17,1)
(57,21,1)
(16,9,1)
(15,55,2)
(54,31,2)
(48,31,2)
(25,31,2)
(4,40,2)
(24,31,2)
(9,13,2)
(41,55,2)
(10,31,2)
(51,31,2)
(53,31,2)
(57,31,2)
(24,10,2)
(23,20,2)
(17,31,2)
(39,31,2)
(52,21,2)
(60,31,2)
(11,31,2)
(12,31,2)
(16,31,2)
(18,55,2)
(13,51,2)
(3,47,2)
(2,31,2)
(51,3,2)
(11,23,2)
(20,31,2)
(10,51,2)
(28,52,2)
(8,21,2)
(9,31,2)
(42,55,2)
(44,31,2)
(40,31,2)
(40,51,2)
(35,24,2)
(4,31,2)
(23,31,2)
(36,31,2)
(33,31,2)
(11,14,2)
(35,31,2)
(13,31,2)
(50,31,2)
(59,31,2)
(21,31,2)
(46,31,2)
(32,31,2)
(49,31,2)
(28,21,2)
(19,31,2)
(3,31,2)
(45,31,2)
(5,31,2)
(21,51,2)
(3,11,2)
-----------------------------------
(0,default:)
(1,if (data == NULL)
(2,data[0].intTwo = 0)
(3,(twoIntsStruct *)
(4,data[0].intOne)
(5,100)
(6,data)
(7,case 7:)
(8,1)
(9,data[0].intTwo)
(10,data[0])
(11,realloc(data, 100*sizeof(twoIntsStruct)
(12,intTwo)
(13,data[0])
(14,data = NULL)
(15,break;)
(16,0)
(17,0)
(18,break;)
(19,data[0].intOne = 0)
(20,sizeof(twoIntsStruct)
(21,data == NULL)
(22,)
(23,100*sizeof(twoIntsStruct)
(24,&data[0])
(25,break;)
(26,NULL)
(27,)
(28,exit(-1)
(29,default:)
(30,)
(31,6)
(32,data)
(33,data)
(34,RET)
(35,printStructLine(&data[0])
(36,data)
(37,switch(6)
(38,case 6:)
(39,break;)
(40,data[0])
(41,printLine("Benign, fixed string")
(42,"Benign, fixed string")
(43,data)
(44,data)
(45,intOne)
(46,0)
(47,twoIntsStruct *)
(48,0)
(49,twoIntsStruct)
(50,data)
(51,data = (twoIntsStruct *)
(52,-1)
(53,printLine("Benign, fixed string")
(54,0)
(55,7)
(56,)
(57,data)
(58,switch(7)
(59,NULL)
(60,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
