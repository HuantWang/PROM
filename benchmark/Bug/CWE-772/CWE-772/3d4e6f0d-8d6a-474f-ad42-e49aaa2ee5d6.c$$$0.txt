-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_34_bad()
{
    char * data;
    CWE401_Memory_Leak__strdup_char_34_unionType myUnion;
    data = NULL;
    {
        char myString[] = "myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = strdup(myString);
        /* Use data */
        printLine(data);
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
25,26
26,27
26,28
28,29
28,30
28,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
54,55
56,57
56,58
57,58
58,59
58,60
60,61
60,62
60,63
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,29,30,32,36,39,41,45,47,52,53,55,59,61,62,66,67,68
-----computeFrom-----
19,20
19,21
34,35
34,36
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_34_bad(){    char * data;    CWE401_Memory_Leak__strdup_char_34_unionType myUnion;    data = NULL;    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_34_bad()
CWE401_Memory_Leak__strdup_char_34_bad
{    char * data;    CWE401_Memory_Leak__strdup_char_34_unionType myUnion;    data = NULL;    {        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
CWE401_Memory_Leak__strdup_char_34_unionType myUnion;
CWE401_Memory_Leak__strdup_char_34_unionType myUnion;
CWE401_Memory_Leak__strdup_char_34_unionType
CWE401_Memory_Leak__strdup_char_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
{        char myString[] = "myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = strdup(myString);        /* Use data */        printLine(data);    }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(7,27,0)
(5,15,0)
(28,15,0)
(23,22,0)
(24,0,0)
(13,20,0)
(15,19,0)
(26,20,0)
(21,16,0)
(22,8,0)
(6,20,0)
(12,28,0)
(9,20,0)
(16,28,0)
(3,27,0)
(28,26,0)
(16,26,0)
(10,19,0)
(4,26,0)
(14,6,0)
(18,0,0)
(1,22,0)
(3,6,0)
(2,8,0)
(17,27,0)
(19,26,0)
(0,20,0)
(15,28,0)
(8,28,0)
(29,19,0)
(27,3,0)
(11,3,0)
(8,20,0)
(22,23,1)
(23,1,1)
(21,28,1)
(3,27,1)
(29,10,1)
(8,2,1)
(15,5,1)
(7,11,1)
(16,21,1)
(11,8,1)
(19,29,1)
(27,17,1)
(0,18,1)
(17,7,1)
(10,0,1)
(2,22,1)
(28,15,1)
(16,28,1)
(1,16,1)
(18,24,1)
(12,19,1)
(25,3,1)
(5,12,1)
(15,19,1)
(8,28,1)
(28,15,2)
(3,27,2)
(8,28,2)
(15,19,2)
(16,28,2)
-----------------------------------
(0,data = NULL)
(1,myUnion)
(2,data)
(3,* data = myUnion.unionSecond)
(4,myString)
(5,myString)
(6,)
(7,myUnion)
(8,myUnion.unionFirst = data)
(9,data)
(10,myString)
(11,data)
(12,data)
(13,myUnion)
(14,data)
(15,strdup(myString)
(16,printLine(data)
(17,unionSecond)
(18,NULL)
(19,myString[] = "myString")
(20,)
(21,data)
(22,myUnion.unionFirst)
(23,unionFirst)
(24,data)
(25,RET)
(26,)
(27,myUnion.unionSecond)
(28,data = strdup(myString)
(29,"myString")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
