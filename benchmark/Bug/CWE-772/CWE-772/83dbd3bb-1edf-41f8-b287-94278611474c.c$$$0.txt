-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_02_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
86,87
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,85,87
-----computeFrom-----
14,15
14,16
23,24
23,25
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_02_bad(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_02_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_02_bad
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(42,9,0)
(18,39,0)
(0,20,0)
(39,41,0)
(16,28,0)
(28,31,0)
(8,9,0)
(25,38,0)
(11,1,0)
(6,10,0)
(5,21,0)
(31,9,0)
(8,25,0)
(21,9,0)
(36,17,0)
(7,17,0)
(41,47,0)
(3,8,0)
(14,10,0)
(21,22,0)
(43,10,0)
(44,31,0)
(24,41,0)
(39,9,0)
(37,14,0)
(17,22,0)
(21,5,0)
(2,36,0)
(15,10,0)
(33,22,0)
(28,16,0)
(22,17,0)
(38,46,0)
(12,39,0)
(0,32,0)
(41,39,0)
(4,47,0)
(25,8,0)
(9,46,0)
(30,38,0)
(22,14,0)
(17,36,0)
(40,31,0)
(32,0,0)
(16,46,0)
(19,25,0)
(29,1,0)
(26,8,0)
(27,14,0)
(34,46,0)
(31,28,0)
(47,46,0)
(9,21,0)
(23,32,0)
(22,21,0)
(1,9,0)
(26,0,1)
(1,9,1)
(35,16,1)
(18,38,1)
(2,7,1)
(8,9,1)
(24,39,1)
(1,29,1)
(3,26,1)
(31,44,1)
(40,47,1)
(17,36,1)
(12,18,1)
(38,30,1)
(39,9,1)
(41,39,1)
(11,9,1)
(41,24,1)
(25,8,1)
(35,13,1)
(33,42,1)
(0,32,1)
(45,35,1)
(31,9,1)
(4,41,1)
(36,2,1)
(25,19,1)
(42,13,1)
(21,5,1)
(22,14,1)
(21,22,1)
(13,14,1)
(47,4,1)
(7,33,1)
(44,40,1)
(22,17,1)
(8,3,1)
(30,25,1)
(23,1,1)
(39,12,1)
(28,31,1)
(32,23,1)
(16,28,1)
(26,1,1)
(29,11,1)
(14,37,1)
(19,8,1)
(9,21,1)
(37,27,1)
(17,36,2)
(38,13,2)
(31,13,2)
(21,22,2)
(7,13,2)
(9,13,2)
(47,13,2)
(36,13,2)
(21,13,2)
(9,21,2)
(2,13,2)
(23,1,2)
(25,13,2)
(22,17,2)
(0,32,2)
(16,13,2)
(25,8,2)
(22,13,2)
(11,13,2)
(31,9,2)
(21,5,2)
(0,1,2)
(16,28,2)
(12,13,2)
(22,14,2)
(1,13,2)
(4,13,2)
(17,13,2)
(19,13,2)
(3,13,2)
(8,9,2)
(39,13,2)
(30,13,2)
(39,9,2)
(28,13,2)
(41,13,2)
(40,13,2)
(18,13,2)
(24,13,2)
(29,13,2)
(33,13,2)
(42,13,2)
(44,13,2)
(1,9,2)
(32,1,2)
(26,13,2)
(28,31,2)
(8,13,2)
(41,39,2)
-----------------------------------
(0,exit(-1)
(1,data == NULL)
(2,twoIntsStruct)
(3,0)
(4,0)
(5,twoIntsStruct *)
(6,data)
(7,100)
(8,data[0])
(9,data = (twoIntsStruct *)
(10,)
(11,data)
(12,0)
(13,1)
(14,data = NULL)
(15,if(1)
(16,printStructLine(&data[0])
(17,100*sizeof(twoIntsStruct)
(18,data)
(19,intOne)
(20,)
(21,(twoIntsStruct *)
(22,realloc(data, 100*sizeof(twoIntsStruct)
(23,1)
(24,intTwo)
(25,data[0].intOne)
(26,data)
(27,data)
(28,&data[0])
(29,NULL)
(30,0)
(31,data[0])
(32,-1)
(33,data)
(34,if (data == NULL)
(35,1)
(36,sizeof(twoIntsStruct)
(37,NULL)
(38,data[0].intOne = 0)
(39,data[0])
(40,data)
(41,data[0].intTwo)
(42,data)
(43,if(1)
(44,0)
(45,RET)
(46,)
(47,data[0].intTwo = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
