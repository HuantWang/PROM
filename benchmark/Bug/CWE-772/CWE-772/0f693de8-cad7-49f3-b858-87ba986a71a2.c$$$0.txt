-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_18_bad()
{
    goto sink;
sink:
    {
        int * data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (int *)realloc(data, (130000)*sizeof(int));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            data[0] = 10;
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,7,9,13,15,16,20,22,25,27,30,31,35,37,42,44,49,50,51,55,58,59,63,66,68,71,73,76,79,80,84,86,92,93,94,98,101,102,106,108
-----computeFrom-----
26,27
26,28
33,34
33,35
46,47
46,48
61,62
61,63
74,75
74,76
82,83
82,84
89,90
89,91
-----guardedBy-----
84,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_18_bad(){    goto sink;sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_18_bad()
CWE401_Memory_Leak__malloc_realloc_int_18_bad
{    goto sink;sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }}
goto sink;
sink
sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }
sink
{        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(36,20,0)
(8,23,0)
(2,27,0)
(41,5,0)
(51,37,0)
(28,55,0)
(56,53,0)
(22,20,0)
(2,52,0)
(29,45,0)
(25,37,0)
(57,46,0)
(6,46,0)
(40,53,0)
(1,55,0)
(28,7,0)
(54,53,0)
(23,53,0)
(7,0,0)
(16,46,0)
(23,8,0)
(0,7,0)
(16,7,0)
(8,26,0)
(35,5,0)
(14,22,0)
(52,2,0)
(37,25,0)
(21,32,0)
(40,20,0)
(20,22,0)
(45,44,0)
(49,52,0)
(23,44,0)
(42,45,0)
(37,16,0)
(55,17,0)
(7,16,0)
(11,3,0)
(15,32,0)
(18,4,0)
(34,33,0)
(33,22,0)
(31,4,0)
(4,53,0)
(39,44,0)
(20,40,0)
(40,43,0)
(12,16,0)
(50,23,0)
(30,17,0)
(38,54,0)
(47,53,0)
(5,16,0)
(53,40,0)
(43,40,0)
(4,3,0)
(44,46,0)
(25,46,0)
(46,32,0)
(9,47,0)
(45,16,0)
(53,46,0)
(55,28,0)
(10,46,0)
(22,33,0)
(3,26,0)
(7,28,0)
(37,44,0)
(48,23,0)
(24,37,0)
(23,3,0)
(13,54,0)
(47,26,0)
(17,55,0)
(20,16,0)
(33,34,1)
(55,17,1)
(36,56,1)
(23,3,1)
(54,38,1)
(29,2,1)
(30,1,1)
(19,47,1)
(20,16,1)
(38,13,1)
(16,7,1)
(31,54,1)
(5,41,1)
(23,50,1)
(40,43,1)
(9,8,1)
(7,28,1)
(40,20,1)
(45,16,1)
(37,16,1)
(23,44,1)
(24,51,1)
(13,53,1)
(22,33,1)
(3,11,1)
(34,14,1)
(41,35,1)
(44,39,1)
(42,29,1)
(4,53,1)
(56,25,1)
(7,0,1)
(4,18,1)
(14,36,1)
(45,42,1)
(23,53,1)
(50,48,1)
(49,5,1)
(17,30,1)
(35,16,1)
(47,9,1)
(28,55,1)
(19,54,1)
(25,37,1)
(20,22,1)
(11,4,1)
(53,40,1)
(37,24,1)
(8,23,1)
(54,53,1)
(12,15,1)
(2,52,1)
(18,31,1)
(39,45,1)
(29,5,1)
(48,3,1)
(1,12,1)
(5,16,1)
(47,53,1)
(52,49,1)
(37,44,1)
(51,44,1)
(50,54,2)
(40,20,2)
(25,37,2)
(47,53,2)
(20,16,2)
(31,54,2)
(55,17,2)
(28,55,2)
(2,52,2)
(47,54,2)
(2,5,2)
(22,33,2)
(16,7,2)
(7,0,2)
(52,5,2)
(4,53,2)
(23,53,2)
(48,54,2)
(23,3,2)
(20,22,2)
(54,53,2)
(53,40,2)
(11,54,2)
(23,44,2)
(18,54,2)
(37,16,2)
(3,54,2)
(9,54,2)
(45,16,2)
(40,43,2)
(7,28,2)
(4,54,2)
(8,23,2)
(23,54,2)
(37,44,2)
(8,54,2)
(49,5,2)
(5,16,2)
-----------------------------------
(0,int *)
(1,100)
(2,exit(-1)
(3,data[0] = 10)
(4,data[0])
(5,data == NULL)
(6,data)
(7,(int *)
(8,printIntLine(data[0])
(9,data)
(10,if (data == NULL)
(11,10)
(12,data)
(13,data)
(14,130000)
(15,goto sink;)
(16,* data = (int *)
(17,sizeof(int)
(18,0)
(19,RET)
(20,realloc(data, (130000)
(21,sink:)
(22,(130000)
(23,data[0])
(24,0)
(25,printIntLine(data[0])
(26,)
(27,)
(28,malloc(100*sizeof(int)
(29,data)
(30,int)
(31,data)
(32,)
(33,sizeof(int)
(34,int)
(35,data)
(36,data)
(37,data[0])
(38,NULL)
(39,5)
(40,(int *)
(41,NULL)
(42,0)
(43,int *)
(44,data[0] = 5)
(45,data[0])
(46,)
(47,free(data)
(48,data)
(49,1)
(50,0)
(51,data)
(52,-1)
(53,data = (int *)
(54,data != NULL)
(55,100*sizeof(int)
(56,data)
(57,if (data != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
