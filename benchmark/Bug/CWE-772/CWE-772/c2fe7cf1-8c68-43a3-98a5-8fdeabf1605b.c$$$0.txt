-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_31_bad()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)realloc(data, 100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,33,36,37,41,43,48,50,54,56,57,61,63,67,69,70,73,76,78,79,82,83
-----computeFrom-----
13,14
13,15
19,20
19,21
32,33
32,34
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_31_bad(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_31_bad()
CWE401_Memory_Leak__char_realloc_31_bad
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
{        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
;
-----joern-----
(2,19,0)
(15,29,0)
(33,31,0)
(17,31,0)
(22,8,0)
(16,37,0)
(15,0,0)
(24,28,0)
(34,37,0)
(14,32,0)
(9,5,0)
(32,6,0)
(32,10,0)
(3,10,0)
(35,16,0)
(37,10,0)
(16,20,0)
(23,20,0)
(18,10,0)
(1,10,0)
(11,16,0)
(17,19,0)
(20,37,0)
(31,8,0)
(26,37,0)
(24,6,0)
(12,18,0)
(20,6,0)
(24,17,0)
(31,17,0)
(6,24,0)
(28,24,0)
(18,6,0)
(21,6,0)
(19,10,0)
(6,10,0)
(8,31,0)
(4,5,0)
(27,18,0)
(17,24,0)
(0,15,0)
(13,19,0)
(25,17,0)
(36,20,0)
(5,6,0)
(30,0,0)
(14,18,1)
(16,20,1)
(32,6,1)
(22,33,1)
(17,19,1)
(13,2,1)
(23,36,1)
(31,8,1)
(30,5,1)
(12,5,1)
(16,35,1)
(20,6,1)
(4,6,1)
(0,30,1)
(24,28,1)
(36,32,1)
(8,22,1)
(25,21,1)
(27,12,1)
(15,0,1)
(17,31,1)
(35,11,1)
(33,25,1)
(32,14,1)
(5,9,1)
(24,17,1)
(7,16,1)
(19,13,1)
(18,6,1)
(9,4,1)
(20,23,1)
(6,24,1)
(5,6,1)
(18,27,1)
(21,19,1)
(11,20,1)
(12,15,1)
(15,0,2)
(24,17,2)
(17,31,2)
(15,5,2)
(16,20,2)
(30,5,2)
(32,6,2)
(5,6,2)
(24,28,2)
(18,6,2)
(17,19,2)
(31,8,2)
(0,5,2)
(6,24,2)
(20,6,2)
-----------------------------------
(0,-1)
(1,data)
(2,data)
(3,if (data == NULL)
(4,data)
(5,data == NULL)
(6,data = (char *)
(7,RET)
(8,sizeof(char)
(9,NULL)
(10,)
(11,data)
(12,data)
(13,NULL)
(14,data)
(15,exit(-1)
(16,* data = dataCopy)
(17,realloc(data, 100*sizeof(char)
(18,strcpy(data, "A String")
(19,data = NULL)
(20,* dataCopy = data)
(21,data)
(22,char)
(23,data)
(24,(char *)
(25,data)
(26,data)
(27,"A String")
(28,char *)
(29,)
(30,1)
(31,100*sizeof(char)
(32,printLine(data)
(33,100)
(34,dataCopy)
(35,dataCopy)
(36,dataCopy)
(37,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
