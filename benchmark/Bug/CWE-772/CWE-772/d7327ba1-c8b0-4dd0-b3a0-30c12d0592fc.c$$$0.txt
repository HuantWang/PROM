-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_15_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
91,92
92,93
92,94
93,94
97,98
97,99
99,100
99,101
99,102
99,103
99,104
99,105
100,101
105,106
106,107
106,108
107,108
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,89,90,94,95,96,98,101,102,103,104,108,109,110
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_15_bad(){    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_15_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_15_bad
{    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(11,57,0)
(21,36,0)
(7,38,0)
(44,52,0)
(23,45,0)
(40,2,0)
(47,36,0)
(36,47,0)
(19,6,0)
(41,47,0)
(22,2,0)
(0,2,0)
(15,2,0)
(25,2,0)
(43,2,0)
(18,14,0)
(52,13,0)
(48,50,0)
(12,38,0)
(44,32,0)
(19,31,0)
(20,27,0)
(10,14,0)
(26,12,0)
(1,57,0)
(14,55,0)
(51,38,0)
(57,1,0)
(55,14,0)
(59,57,0)
(58,42,0)
(16,1,0)
(15,16,0)
(33,0,0)
(53,45,0)
(49,16,0)
(55,27,0)
(1,16,0)
(36,43,0)
(44,43,0)
(13,24,0)
(45,42,0)
(29,22,0)
(5,36,0)
(17,43,0)
(28,31,0)
(52,44,0)
(9,2,0)
(54,42,0)
(30,52,0)
(60,38,0)
(16,15,0)
(32,44,0)
(50,43,0)
(31,19,0)
(61,55,0)
(4,38,0)
(34,50,0)
(47,22,0)
(24,13,0)
(57,43,0)
(14,43,0)
(35,42,0)
(16,49,0)
(13,52,0)
(46,2,0)
(27,2,0)
(39,2,0)
(43,44,0)
(30,17,1)
(19,31,1)
(29,47,1)
(44,32,1)
(50,34,1)
(17,8,1)
(13,24,1)
(15,16,1)
(18,19,1)
(27,20,1)
(3,9,1)
(45,23,1)
(56,4,1)
(47,41,1)
(16,49,1)
(26,3,1)
(55,61,1)
(13,30,1)
(57,43,1)
(18,50,1)
(1,57,1)
(5,21,1)
(51,3,1)
(55,14,1)
(9,0,1)
(8,45,1)
(14,43,1)
(34,48,1)
(48,43,1)
(47,36,1)
(36,43,1)
(0,33,1)
(61,14,1)
(12,26,1)
(50,43,1)
(21,27,1)
(14,10,1)
(16,1,1)
(43,44,1)
(10,18,1)
(56,51,1)
(44,52,1)
(22,29,1)
(59,22,1)
(28,50,1)
(36,5,1)
(33,8,1)
(57,11,1)
(3,40,1)
(11,59,1)
(20,55,1)
(52,13,1)
(31,28,1)
(41,36,1)
(4,12,1)
(23,53,1)
(40,15,1)
(15,8,2)
(52,8,2)
(20,8,2)
(30,8,2)
(33,8,2)
(55,14,2)
(16,1,2)
(48,8,2)
(14,8,2)
(57,43,2)
(47,8,2)
(34,8,2)
(44,8,2)
(5,8,2)
(10,8,2)
(13,24,2)
(57,8,2)
(18,8,2)
(43,8,2)
(31,50,2)
(13,8,2)
(16,8,2)
(0,8,2)
(19,31,2)
(4,3,2)
(22,8,2)
(51,3,2)
(50,43,2)
(36,43,2)
(28,50,2)
(61,8,2)
(26,3,2)
(44,52,2)
(14,43,2)
(41,8,2)
(52,13,2)
(44,32,2)
(36,8,2)
(29,8,2)
(21,8,2)
(59,8,2)
(9,8,2)
(40,8,2)
(47,36,2)
(55,8,2)
(1,57,2)
(11,8,2)
(12,3,2)
(50,8,2)
(17,8,2)
(19,50,2)
(15,16,2)
(27,8,2)
(16,49,2)
(1,8,2)
(43,44,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,&data[0])
(2,)
(3,7)
(4,break;)
(5,0)
(6,)
(7,case 7:)
(8,6)
(9,break;)
(10,0)
(11,0)
(12,printLine("Benign, fixed string")
(13,sizeof(struct _twoIntsStruct)
(14,data[0])
(15,printStructLine((twoIntsStruct *)
(16,(twoIntsStruct *)
(17,data)
(18,data)
(19,exit(-1)
(20,0)
(21,data)
(22,data[0].intTwo = 0)
(23,NULL)
(24,struct _twoIntsStruct)
(25,if (data == NULL)
(26,"Benign, fixed string")
(27,data[0].intOne = 0)
(28,1)
(29,0)
(30,100)
(31,-1)
(32,struct _twoIntsStruct *)
(33,"Benign, fixed string")
(34,NULL)
(35,data)
(36,data[0])
(37, sizeof(struct _twoIntsStruct)
(38,)
(39,default:)
(40,break;)
(41,intTwo)
(42,)
(43,data = (struct _twoIntsStruct *)
(44,(struct _twoIntsStruct *)
(45,data = NULL)
(46,case 6:)
(47,data[0].intTwo)
(48,data)
(49,twoIntsStruct *)
(50,data == NULL)
(51,break;)
(52,calloc(100, sizeof(struct _twoIntsStruct)
(53,data)
(54,switch(7)
(55,data[0].intOne)
(56,RET)
(57,data[0])
(58,switch(6)
(59,data)
(60,default:)
(61,intOne)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
