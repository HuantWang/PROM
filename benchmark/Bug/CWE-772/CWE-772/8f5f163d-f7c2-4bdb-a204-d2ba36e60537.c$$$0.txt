-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_32_bad()
{
    struct _twoIntsStruct * data;
    struct _twoIntsStruct * *dataPtr1 = &data;
    struct _twoIntsStruct * *dataPtr2 = &data;
    data = NULL;
    {
        struct _twoIntsStruct * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        *dataPtr1 = data;
    }
    {
        struct _twoIntsStruct * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
106,107
107,108
107,109
108,109
110,111
110,112
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
124,125
126,127
128,129
128,130
129,130
130,131
130,132
131,132
133,134
133,135
133,136
136,137
137,138
138,139
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,73,74,78,80,85,87,93,94,95,96,102,103,104,105,109,113,115,119,120,125,127,132,134,135,139,140
-----computeFrom-----
38,39
38,40
56,57
56,58
68,69
68,70
76,77
76,78
89,90
89,91
98,99
98,100
122,123
122,124
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_32_bad(){    struct _twoIntsStruct * data;    struct _twoIntsStruct * *dataPtr1 = &data;    struct _twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }    {        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_32_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_32_bad
{    struct _twoIntsStruct * data;    struct _twoIntsStruct * *dataPtr1 = &data;    struct _twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }    {        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
struct _twoIntsStruct * *dataPtr1 = &data;
struct _twoIntsStruct * *dataPtr1 = &data;
struct _twoIntsStruct
_twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
struct _twoIntsStruct * *dataPtr2 = &data;
struct _twoIntsStruct * *dataPtr2 = &data;
struct _twoIntsStruct
_twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        struct _twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }
struct _twoIntsStruct * data = *dataPtr1;
struct _twoIntsStruct * data = *dataPtr1;
struct _twoIntsStruct
_twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * data = *dataPtr2;
struct _twoIntsStruct * data = *dataPtr2;
struct _twoIntsStruct
_twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(10,31,0)
(62,5,0)
(34,50,0)
(33,22,0)
(3,33,0)
(1,63,0)
(54,22,0)
(36,48,0)
(45,59,0)
(53,56,0)
(59,19,0)
(1,21,0)
(63,1,0)
(64,28,0)
(2,68,0)
(26,56,0)
(48,39,0)
(13,7,0)
(41,45,0)
(23,56,0)
(58,39,0)
(5,21,0)
(27,25,0)
(11,49,0)
(45,50,0)
(56,26,0)
(31,44,0)
(67,64,0)
(6,69,0)
(28,34,0)
(22,39,0)
(14,9,0)
(9,22,0)
(56,28,0)
(19,59,0)
(59,45,0)
(42,22,0)
(4,1,0)
(31,10,0)
(60,30,0)
(66,68,0)
(47,10,0)
(30,68,0)
(46,30,0)
(69,0,0)
(34,8,0)
(25,33,0)
(50,45,0)
(63,48,0)
(69,6,0)
(34,28,0)
(7,28,0)
(16,39,0)
(0,69,0)
(37,39,0)
(26,15,0)
(30,46,0)
(12,28,0)
(29,49,0)
(35,22,0)
(6,12,0)
(20,7,0)
(15,22,0)
(64,25,0)
(32,68,0)
(12,6,0)
(50,34,0)
(21,39,0)
(46,22,0)
(21,5,0)
(8,34,0)
(43,2,0)
(68,66,0)
(28,22,0)
(18,63,0)
(52,64,0)
(55,26,0)
(49,39,0)
(25,64,0)
(51,21,0)
(2,9,0)
(40,46,0)
(57,15,0)
(17,66,0)
(24,12,0)
(68,39,0)
(38,12,0)
(42,69,0)
(65,28,0)
(69,42,0)
(9,28,0)
(40,49,1)
(13,28,1)
(59,19,1)
(26,56,1)
(55,56,1)
(26,55,1)
(63,1,1)
(61,63,1)
(6,12,1)
(50,45,1)
(23,53,1)
(27,64,1)
(64,67,1)
(49,11,1)
(68,66,1)
(14,2,1)
(18,9,1)
(9,28,1)
(25,27,1)
(12,28,1)
(46,30,1)
(53,31,1)
(30,60,1)
(2,43,1)
(1,21,1)
(1,4,1)
(31,10,1)
(34,8,1)
(24,33,1)
(30,68,1)
(69,0,1)
(29,21,1)
(9,14,1)
(60,40,1)
(66,17,1)
(7,28,1)
(20,13,1)
(33,3,1)
(43,42,1)
(3,25,1)
(53,7,1)
(38,24,1)
(67,52,1)
(56,28,1)
(28,34,1)
(59,41,1)
(69,6,1)
(4,18,1)
(25,64,1)
(12,38,1)
(34,50,1)
(62,51,1)
(15,57,1)
(51,68,1)
(10,47,1)
(17,32,1)
(7,20,1)
(56,23,1)
(64,28,1)
(21,5,1)
(5,62,1)
(45,59,1)
(47,7,1)
(52,15,1)
(65,46,1)
(41,65,1)
(57,26,1)
(11,29,1)
(42,69,1)
(2,68,1)
(26,56,2)
(6,12,2)
(28,34,2)
(59,19,2)
(68,66,2)
(1,21,2)
(34,8,2)
(46,30,2)
(12,28,2)
(31,10,2)
(25,64,2)
(42,69,2)
(10,7,2)
(21,5,2)
(50,45,2)
(47,7,2)
(63,1,2)
(69,0,2)
(30,68,2)
(45,59,2)
(56,28,2)
(2,68,2)
(7,28,2)
(64,28,2)
(9,28,2)
(34,50,2)
(69,6,2)
(31,7,2)
-----------------------------------
(0,twoIntsStruct *)
(1,*dataPtr2)
(2,*dataPtr1)
(3,0)
(4,dataPtr2)
(5,&data)
(6,&data[0])
(7,data == NULL)
(8,struct _twoIntsStruct *)
(9,*dataPtr1 = data)
(10,-1)
(11,NULL)
(12,data[0])
(13,data)
(14,data)
(15,data[0].intOne = 0)
(16,data)
(17,data)
(18,data)
(19,struct _twoIntsStruct)
(20,NULL)
(21,* *dataPtr2 = &data)
(22,)
(23,0)
(24,data)
(25,data[0].intTwo)
(26,data[0].intOne)
(27,intTwo)
(28,data = (struct _twoIntsStruct *)
(29,data)
(30,*dataPtr1)
(31,exit(-1)
(32,dataPtr1)
(33,data[0].intTwo = 0)
(34,(struct _twoIntsStruct *)
(35,data)
(36,data)
(37,dataPtr2)
(38,0)
(39,)
(40,data)
(41,100)
(42,printStructLine((twoIntsStruct *)
(43,dataPtr1)
(44,)
(45,100*sizeof(struct _twoIntsStruct)
(46,* data = *dataPtr1)
(47,1)
(48,)
(49,data = NULL)
(50,malloc(100*sizeof(struct _twoIntsStruct)
(51,dataPtr2)
(52,data)
(53,data)
(54,if (data == NULL)
(55,intOne)
(56,data[0])
(57,0)
(58,dataPtr1)
(59,sizeof(struct _twoIntsStruct)
(60,dataPtr1)
(61,RET)
(62,data)
(63,* data = *dataPtr2)
(64,data[0])
(65,data)
(66,&data)
(67,0)
(68,* *dataPtr1 = &data)
(69,(twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
