-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_34_bad()
{
    wchar_t * data;
    CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
70,72
71,72
74,75
76,77
76,78
77,78
78,79
78,80
80,81
80,82
80,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,72,73,75,79,81,82,86,87,88
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_34_bad(){    wchar_t * data;    CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_34_bad()
CWE401_Memory_Leak__wchar_t_malloc_34_bad
{    wchar_t * data;    CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;
CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;
CWE401_Memory_Leak__wchar_t_malloc_34_unionType
CWE401_Memory_Leak__wchar_t_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(13,22,0)
(20,11,0)
(12,14,0)
(29,23,0)
(1,6,0)
(6,1,0)
(7,26,0)
(17,24,0)
(11,14,0)
(35,24,0)
(22,13,0)
(18,33,0)
(5,11,0)
(2,4,0)
(14,11,0)
(32,33,0)
(33,31,0)
(22,5,0)
(10,31,0)
(16,25,0)
(34,15,0)
(21,15,0)
(19,22,0)
(11,5,0)
(26,31,0)
(37,24,0)
(24,17,0)
(0,31,0)
(27,4,0)
(6,36,0)
(3,31,0)
(30,17,0)
(11,20,0)
(4,14,0)
(14,31,0)
(26,14,0)
(15,25,0)
(25,14,0)
(17,23,0)
(25,31,0)
(5,22,0)
(9,1,0)
(8,13,0)
(23,31,0)
(37,35,1)
(5,22,1)
(11,20,1)
(2,14,1)
(1,9,1)
(8,19,1)
(13,8,1)
(4,27,1)
(11,5,1)
(25,16,1)
(14,11,1)
(15,34,1)
(18,32,1)
(7,6,1)
(35,30,1)
(27,2,1)
(7,4,1)
(24,37,1)
(34,21,1)
(12,33,1)
(19,12,1)
(16,15,1)
(26,7,1)
(22,13,1)
(33,18,1)
(30,25,1)
(6,1,1)
(25,14,1)
(21,26,1)
(17,24,1)
(9,4,1)
(26,14,1)
(28,17,1)
(4,14,1)
(6,4,2)
(6,1,2)
(1,4,2)
(4,14,2)
(14,11,2)
(9,4,2)
(11,5,2)
(11,20,2)
(22,13,2)
(26,14,2)
(25,14,2)
(17,24,2)
(5,22,2)
-----------------------------------
(0,myUnion)
(1,-1)
(2,data)
(3,if (data == NULL)
(4,data == NULL)
(5,malloc(100*sizeof(wchar_t)
(6,exit(-1)
(7,data)
(8,wchar_t)
(9,1)
(10,data)
(11,(wchar_t *)
(12,data)
(13,sizeof(wchar_t)
(14,data = (wchar_t *)
(15,myUnion.unionFirst)
(16,data)
(17,* data = myUnion.unionSecond)
(18,NULL)
(19,100)
(20,wchar_t *)
(21,myUnion)
(22,100*sizeof(wchar_t)
(23,)
(24,myUnion.unionSecond)
(25,myUnion.unionFirst = data)
(26,printWLine(data)
(27,NULL)
(28,RET)
(29,data)
(30,data)
(31,)
(32,data)
(33,data = NULL)
(34,unionFirst)
(35,myUnion)
(36,)
(37,unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
