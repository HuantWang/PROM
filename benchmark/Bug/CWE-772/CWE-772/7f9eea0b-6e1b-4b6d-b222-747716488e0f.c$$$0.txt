-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
63,64
65,66
65,67
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
100,101
102,103
104,105
104,106
105,106
106,107
106,108
108,109
108,110
108,111
111,112
112,113
113,114
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,66,69,70,74,76,81,83,87,89,90,94,96,101,103,107,109,110,114,115
-----computeFrom-----
35,36
35,37
52,53
52,54
65,66
65,67
72,73
72,74
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_32_bad()
CWE401_Memory_Leak__char_realloc_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(32,10,0)
(27,26,0)
(14,37,0)
(52,4,0)
(12,21,0)
(35,21,0)
(37,46,0)
(19,46,0)
(26,4,0)
(4,52,0)
(38,19,0)
(18,29,0)
(49,4,0)
(4,49,0)
(9,21,0)
(24,27,0)
(52,53,0)
(5,22,0)
(51,9,0)
(41,53,0)
(2,16,0)
(42,2,0)
(28,46,0)
(50,22,0)
(51,37,0)
(5,42,0)
(46,21,0)
(46,19,0)
(27,22,0)
(39,22,0)
(0,22,0)
(33,42,0)
(4,26,0)
(20,9,0)
(22,21,0)
(15,26,0)
(30,22,0)
(53,52,0)
(2,21,0)
(6,2,0)
(11,26,0)
(30,26,0)
(23,45,0)
(54,15,0)
(16,2,0)
(45,30,0)
(25,48,0)
(47,29,0)
(39,26,0)
(31,52,0)
(17,30,0)
(48,44,0)
(45,2,0)
(40,51,0)
(7,5,0)
(52,5,0)
(37,51,0)
(53,10,0)
(36,21,0)
(29,21,0)
(3,39,0)
(44,1,0)
(44,48,0)
(26,22,0)
(10,53,0)
(8,15,0)
(42,5,0)
(13,39,0)
(43,16,0)
(15,26,1)
(26,4,1)
(39,13,1)
(28,2,1)
(14,40,1)
(52,53,1)
(33,7,1)
(40,30,1)
(2,16,1)
(53,10,1)
(15,8,1)
(48,25,1)
(47,46,1)
(41,31,1)
(52,5,1)
(44,48,1)
(45,2,1)
(17,45,1)
(3,15,1)
(25,15,1)
(31,11,1)
(45,23,1)
(13,3,1)
(3,44,1)
(4,49,1)
(38,28,1)
(8,54,1)
(10,32,1)
(16,43,1)
(4,52,1)
(54,26,1)
(37,46,1)
(34,51,1)
(18,47,1)
(37,14,1)
(11,5,1)
(42,33,1)
(7,29,1)
(43,6,1)
(30,26,1)
(42,2,1)
(24,39,1)
(23,27,1)
(30,17,1)
(46,19,1)
(27,24,1)
(51,37,1)
(29,18,1)
(39,26,1)
(27,26,1)
(5,42,1)
(19,38,1)
(32,41,1)
(15,26,2)
(51,37,2)
(52,53,2)
(37,46,2)
(46,19,2)
(2,16,2)
(42,2,2)
(52,5,2)
(26,4,2)
(39,26,2)
(45,2,2)
(53,10,2)
(5,42,2)
(44,48,2)
(30,26,2)
(27,26,2)
(4,49,2)
(44,15,2)
(48,15,2)
(25,15,2)
(4,52,2)
-----------------------------------
(0,if (data == NULL)
(1,)
(2,* *dataPtr1 = &data)
(3,data)
(4,(char *)
(5,* data = *dataPtr1)
(6,dataPtr1)
(7,data)
(8,NULL)
(9,)
(10,sizeof(char)
(11,data)
(12,dataPtr2)
(13,"A String")
(14,dataPtr2)
(15,data == NULL)
(16,&data)
(17,data)
(18,NULL)
(19,&data)
(20,data)
(21,)
(22,)
(23,dataPtr1)
(24,data)
(25,1)
(26,data = (char *)
(27,printLine(data)
(28,dataPtr2)
(29,data = NULL)
(30,*dataPtr1 = data)
(31,data)
(32,char)
(33,dataPtr1)
(34,RET)
(35,data)
(36,dataPtr1)
(37,*dataPtr2)
(38,data)
(39,strcpy(data, "A String")
(40,data)
(41,100)
(42,*dataPtr1)
(43,data)
(44,exit(-1)
(45,*dataPtr1)
(46,* *dataPtr2 = &data)
(47,data)
(48,-1)
(49,char *)
(50,data)
(51,* data = *dataPtr2)
(52,realloc(data, 100*sizeof(char)
(53,100*sizeof(char)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
