-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_21_bad()
{
    wchar_t * data;
    data = NULL;
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    badStatic = 1; /* true */
    badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
20,22
22,23
22,24
22,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,11,15,17,21,23,24,26,30,33,35,39,41,45,46,50,52
-----computeFrom-----
13,14
13,15
28,29
28,30
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_21_bad(){    wchar_t * data;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    badStatic = 1; /* true */    badSink(data);}
void
CWE401_Memory_Leak__strdup_wchar_t_21_bad()
CWE401_Memory_Leak__strdup_wchar_t_21_bad
{    wchar_t * data;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    badStatic = 1; /* true */    badSink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
badSink(data);
badSink(data)
badSink
badSink
data
data
-----joern-----
(10,2,0)
(2,4,0)
(17,16,0)
(3,2,0)
(7,11,0)
(18,16,0)
(2,10,0)
(0,2,0)
(13,7,0)
(14,11,0)
(15,10,0)
(0,4,0)
(14,2,0)
(5,11,0)
(16,11,0)
(4,11,0)
(1,4,0)
(8,14,0)
(12,0,0)
(6,7,0)
(14,8,1)
(7,13,1)
(10,15,1)
(16,17,1)
(8,16,1)
(0,2,1)
(12,2,1)
(14,2,1)
(3,1,1)
(17,18,1)
(18,0,1)
(2,10,1)
(9,14,1)
(1,7,1)
(15,3,1)
(0,12,1)
(13,6,1)
(0,2,2)
(2,10,2)
(14,2,2)
-----------------------------------
(0,printWLine(data)
(1,"myString")
(2,data = wcsdup(myString)
(3,data)
(4,)
(5,data)
(6,data)
(7,data = NULL)
(8,data)
(9,RET)
(10,wcsdup(myString)
(11,)
(12,data)
(13,NULL)
(14,badSink(data)
(15,myString)
(16,badStatic = 1)
(17,1)
(18,badStatic)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
