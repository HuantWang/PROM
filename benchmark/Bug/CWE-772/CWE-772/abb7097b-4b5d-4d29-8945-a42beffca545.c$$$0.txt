-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
49,50
50,51
50,52
51,52
55,56
55,57
57,58
57,59
57,60
57,61
57,62
57,63
58,59
63,64
64,65
64,66
65,66
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,28,29,31,35,38,40,44,46,47,48,52,53,54,56,59,60,61,62,66,67,68
-----computeFrom-----
13,14
13,15
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__strdup_wchar_t_15_bad()
CWE401_Memory_Leak__strdup_wchar_t_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(23,14,0)
(22,5,0)
(13,4,0)
(24,4,0)
(18,27,0)
(26,4,0)
(21,29,0)
(25,5,0)
(17,23,0)
(3,5,0)
(11,4,0)
(10,25,0)
(16,14,0)
(30,24,0)
(5,3,0)
(27,14,0)
(12,21,0)
(28,14,0)
(9,21,0)
(15,14,0)
(19,4,0)
(25,23,0)
(0,14,0)
(7,3,0)
(8,29,0)
(2,29,0)
(20,29,0)
(5,23,0)
(31,13,1)
(10,5,1)
(25,10,1)
(21,9,1)
(18,1,1)
(27,18,1)
(13,6,1)
(26,24,1)
(9,12,1)
(6,15,1)
(17,1,1)
(15,25,1)
(24,30,1)
(0,27,1)
(6,0,1)
(22,17,1)
(5,3,1)
(25,5,1)
(31,26,1)
(1,21,1)
(30,6,1)
(7,22,1)
(3,7,1)
(25,1,2)
(26,6,2)
(3,1,2)
(22,1,2)
(17,1,2)
(13,6,2)
(25,5,2)
(5,1,2)
(27,1,2)
(10,1,2)
(7,1,2)
(18,1,2)
(0,1,2)
(5,3,2)
(24,6,2)
(30,6,2)
(15,1,2)
-----------------------------------
(0,break;)
(1,6)
(2,switch(7)
(3,wcsdup(myString)
(4,)
(5,data = wcsdup(myString)
(6,7)
(7,myString)
(8,data)
(9,NULL)
(10,data)
(11,default:)
(12,data)
(13,break;)
(14,)
(15,break;)
(16,default:)
(17,"myString")
(18,"Benign, fixed string")
(19,case 7:)
(20,switch(6)
(21,data = NULL)
(22,data)
(23,)
(24,printLine("Benign, fixed string")
(25,printWLine(data)
(26,break;)
(27,printLine("Benign, fixed string")
(28,case 6:)
(29,)
(30,"Benign, fixed string")
(31,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
