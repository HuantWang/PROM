-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_11_bad()
{
    if(globalReturnsTrue())
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
70,73
71,72
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
88,91
89,90
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,50,51,52,56,59,60,64,67,69,72,74,77,80,81,85,87,93,94,95,99,102,103,107,109
-----computeFrom-----
27,28
27,29
34,35
34,36
47,48
47,49
62,63
62,64
75,76
75,77
83,84
83,85
90,91
90,92
-----guardedBy-----
85,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_11_bad(){    if(globalReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_11_bad()
CWE401_Memory_Leak__malloc_realloc_int_11_bad
{    if(globalReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(globalReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(42,51,0)
(53,37,0)
(56,35,0)
(24,13,0)
(31,46,0)
(21,4,0)
(17,14,0)
(2,32,0)
(10,17,0)
(8,14,0)
(6,34,0)
(7,6,0)
(30,17,0)
(17,37,0)
(29,55,0)
(34,37,0)
(13,57,0)
(20,12,0)
(4,46,0)
(25,22,0)
(4,17,0)
(58,1,0)
(55,37,0)
(49,17,0)
(29,57,0)
(44,34,0)
(53,30,0)
(25,51,0)
(12,20,0)
(33,32,0)
(23,29,0)
(28,30,0)
(50,4,0)
(30,53,0)
(57,1,0)
(12,14,0)
(40,58,0)
(51,25,0)
(5,1,0)
(35,46,0)
(52,37,0)
(29,34,0)
(46,35,0)
(9,49,0)
(18,37,0)
(48,55,0)
(16,20,0)
(15,13,0)
(29,5,0)
(58,34,0)
(26,37,0)
(50,34,0)
(14,8,0)
(36,6,0)
(27,57,0)
(4,50,0)
(13,34,0)
(30,55,0)
(45,54,0)
(20,16,0)
(47,20,0)
(38,29,0)
(32,17,0)
(41,30,0)
(50,3,0)
(37,19,0)
(14,12,0)
(3,50,0)
(43,16,0)
(32,55,0)
(46,4,0)
(39,49,0)
(5,29,0)
(14,17,0)
(34,50,0)
(32,2,1)
(31,21,1)
(12,20,1)
(7,36,1)
(30,55,1)
(41,55,1)
(49,17,1)
(16,43,1)
(57,27,1)
(48,32,1)
(4,46,1)
(44,53,1)
(39,9,1)
(17,14,1)
(46,35,1)
(55,48,1)
(15,24,1)
(10,0,1)
(9,17,1)
(40,5,1)
(42,49,1)
(6,7,1)
(27,13,1)
(13,15,1)
(33,49,1)
(49,39,1)
(4,17,1)
(11,58,1)
(30,28,1)
(24,6,1)
(50,3,1)
(13,34,1)
(29,38,1)
(47,10,1)
(5,29,1)
(58,40,1)
(50,4,1)
(56,31,1)
(14,12,1)
(53,30,1)
(36,34,1)
(25,51,1)
(11,6,1)
(43,47,1)
(30,17,1)
(28,41,1)
(29,55,1)
(34,50,1)
(6,34,1)
(21,44,1)
(29,57,1)
(51,42,1)
(29,34,1)
(32,17,1)
(38,23,1)
(33,25,1)
(14,8,1)
(11,0,1)
(23,57,1)
(58,34,1)
(20,16,1)
(2,33,1)
(35,56,1)
(25,49,2)
(43,0,2)
(13,6,2)
(32,17,2)
(32,0,2)
(53,30,2)
(2,0,2)
(49,17,2)
(14,8,2)
(31,0,2)
(30,17,2)
(15,6,2)
(36,0,2)
(57,6,2)
(9,0,2)
(17,14,2)
(51,49,2)
(49,0,2)
(16,0,2)
(53,0,2)
(6,0,2)
(20,0,2)
(38,6,2)
(13,34,2)
(28,0,2)
(58,34,2)
(4,46,2)
(20,16,2)
(7,0,2)
(34,0,2)
(5,29,2)
(47,0,2)
(50,4,2)
(29,57,2)
(23,6,2)
(48,0,2)
(29,34,2)
(40,6,2)
(35,0,2)
(39,0,2)
(33,0,2)
(4,17,2)
(21,0,2)
(46,35,2)
(42,49,2)
(4,0,2)
(50,0,2)
(44,0,2)
(24,6,2)
(34,50,2)
(14,12,2)
(29,6,2)
(6,34,2)
(30,55,2)
(46,0,2)
(25,51,2)
(56,0,2)
(41,0,2)
(50,3,2)
(29,55,2)
(58,6,2)
(30,0,2)
(10,0,2)
(17,0,2)
(12,20,2)
(5,6,2)
(55,0,2)
(12,0,2)
(27,6,2)
(14,0,2)
-----------------------------------
(0,globalReturnsTrue()
(1,)
(2,0)
(3,int *)
(4,realloc(data, (130000)
(5,printIntLine(data[0])
(6,data != NULL)
(7,NULL)
(8,int *)
(9,data)
(10,data)
(11,RET)
(12,malloc(100*sizeof(int)
(13,data[0])
(14,(int *)
(15,0)
(16,sizeof(int)
(17,* data = (int *)
(18,if (data == NULL)
(19,)
(20,100*sizeof(int)
(21,data)
(22,)
(23,data)
(24,data)
(25,exit(-1)
(26,data)
(27,10)
(28,0)
(29,data[0])
(30,data[0])
(31,130000)
(32,data[0])
(33,data)
(34,data = (int *)
(35,sizeof(int)
(36,data)
(37,)
(38,0)
(39,NULL)
(40,data)
(41,data)
(42,1)
(43,int)
(44,data)
(45,if(globalReturnsTrue()
(46,(130000)
(47,100)
(48,5)
(49,data == NULL)
(50,(int *)
(51,-1)
(52,if (data != NULL)
(53,printIntLine(data[0])
(54,)
(55,data[0] = 5)
(56,int)
(57,data[0] = 10)
(58,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
