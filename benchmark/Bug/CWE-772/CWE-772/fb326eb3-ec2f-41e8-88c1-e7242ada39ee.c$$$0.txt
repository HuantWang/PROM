-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_04_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,93,95
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_realloc_04_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_04_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_realloc_04_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,33,0)
(0,15,0)
(0,22,0)
(22,43,0)
(30,38,0)
(17,38,0)
(42,5,0)
(39,29,0)
(34,43,0)
(27,29,0)
(40,13,0)
(11,13,0)
(48,12,0)
(44,30,0)
(35,29,0)
(14,19,0)
(45,10,0)
(36,7,0)
(46,42,0)
(43,22,0)
(38,25,0)
(33,0,0)
(28,8,0)
(0,33,0)
(37,12,0)
(5,42,0)
(15,29,0)
(1,15,0)
(33,10,0)
(21,36,0)
(30,43,0)
(22,0,0)
(42,46,0)
(13,43,0)
(42,3,0)
(43,7,0)
(21,13,0)
(20,34,0)
(3,42,0)
(12,43,0)
(32,0,0)
(47,33,0)
(22,23,0)
(49,30,0)
(38,30,0)
(19,28,0)
(12,46,0)
(26,25,0)
(24,15,0)
(13,21,0)
(28,19,0)
(6,34,0)
(3,7,0)
(16,43,0)
(23,22,0)
(46,12,0)
(4,7,0)
(10,45,0)
(25,7,0)
(2,36,0)
(31,21,0)
(42,5,1)
(24,1,1)
(30,49,1)
(46,12,1)
(47,32,1)
(42,46,1)
(0,15,1)
(48,37,1)
(49,44,1)
(43,22,1)
(38,30,1)
(15,24,1)
(19,14,1)
(12,48,1)
(14,34,1)
(22,0,1)
(11,40,1)
(10,45,1)
(36,2,1)
(9,3,1)
(20,6,1)
(34,43,1)
(34,20,1)
(40,34,1)
(16,18,1)
(6,43,1)
(13,43,1)
(2,21,1)
(9,18,1)
(37,25,1)
(40,28,1)
(30,43,1)
(22,23,1)
(44,36,1)
(21,13,1)
(3,42,1)
(25,26,1)
(32,16,1)
(0,33,1)
(17,30,1)
(41,9,1)
(18,15,1)
(10,47,1)
(26,38,1)
(28,19,1)
(38,17,1)
(13,11,1)
(31,13,1)
(12,43,1)
(21,31,1)
(33,10,1)
(46,18,2)
(40,18,2)
(3,42,2)
(38,30,2)
(44,18,2)
(14,34,2)
(36,18,2)
(28,34,2)
(37,18,2)
(34,18,2)
(34,43,2)
(16,18,2)
(22,0,2)
(42,18,2)
(0,33,2)
(3,18,2)
(33,10,2)
(21,18,2)
(42,5,2)
(31,18,2)
(0,18,2)
(43,18,2)
(12,43,2)
(25,18,2)
(13,18,2)
(20,18,2)
(6,18,2)
(42,46,2)
(19,34,2)
(12,18,2)
(10,18,2)
(43,22,2)
(21,13,2)
(22,18,2)
(2,18,2)
(30,43,2)
(47,18,2)
(10,45,2)
(46,12,2)
(0,15,2)
(33,18,2)
(26,18,2)
(30,18,2)
(48,18,2)
(22,23,2)
(49,18,2)
(11,18,2)
(38,18,2)
(28,19,2)
(17,18,2)
(13,43,2)
(32,18,2)
-----------------------------------
(0,realloc(data, 100*sizeof(struct _twoIntsStruct)
(1,data)
(2,0)
(3,printStructLine((twoIntsStruct *)
(4,if (data == NULL)
(5,twoIntsStruct *)
(6,data)
(7,)
(8,)
(9,STATIC_CONST_TRUE)
(10,sizeof(struct _twoIntsStruct)
(11,0)
(12,data[0])
(13,data[0])
(14,1)
(15,data = NULL)
(16,data)
(17,intTwo)
(18,STATIC_CONST_TRUE)
(19,-1)
(20,NULL)
(21,data[0].intOne)
(22,(struct _twoIntsStruct *)
(23,struct _twoIntsStruct *)
(24,NULL)
(25,data[0].intTwo = 0)
(26,0)
(27,data)
(28,exit(-1)
(29,)
(30,data[0])
(31,intOne)
(32,data)
(33,100*sizeof(struct _twoIntsStruct)
(34,data == NULL)
(35,if(STATIC_CONST_TRUE)
(36,data[0].intOne = 0)
(37,data)
(38,data[0].intTwo)
(39,if(STATIC_CONST_TRUE)
(40,data)
(41,RET)
(42,(twoIntsStruct *)
(43,data = (struct _twoIntsStruct *)
(44,data)
(45,struct _twoIntsStruct)
(46,&data[0])
(47,100)
(48,0)
(49,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
