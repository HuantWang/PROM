-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,28,29,31,35,38,40,44,46,49,50,52
-----computeFrom-----
13,14
13,15
19,20
19,21
33,34
33,35
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_03_bad(){    char * data;    data = NULL;    if(5==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_03_bad()
CWE401_Memory_Leak__strdup_char_03_bad
{    char * data;    data = NULL;    if(5==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
5==5
5
5
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(8,25,0)
(2,0,0)
(16,19,0)
(21,2,0)
(17,4,0)
(13,0,0)
(22,8,0)
(20,8,0)
(19,10,0)
(15,11,0)
(5,25,0)
(9,25,0)
(14,0,0)
(24,13,0)
(12,10,0)
(0,23,0)
(13,19,0)
(3,2,0)
(19,0,0)
(6,11,0)
(18,25,0)
(7,4,0)
(10,2,0)
(10,19,0)
(21,4,1)
(10,2,1)
(16,2,1)
(10,12,1)
(17,8,1)
(15,13,1)
(1,11,1)
(2,3,1)
(11,6,1)
(8,22,1)
(12,16,1)
(22,20,1)
(6,15,1)
(15,4,1)
(19,10,1)
(13,19,1)
(7,17,1)
(13,24,1)
(24,19,1)
(3,21,1)
(4,7,1)
(13,19,2)
(19,4,2)
(10,4,2)
(21,4,2)
(2,4,2)
(12,4,2)
(3,4,2)
(13,4,2)
(19,10,2)
(10,2,2)
(24,4,2)
(16,4,2)
-----------------------------------
(0,)
(1,RET)
(2,myString[] = "myString")
(3,"myString")
(4,5==5)
(5,if(5==5)
(6,5)
(7,5)
(8,data = NULL)
(9,data)
(10,strdup(myString)
(11,5==5)
(12,myString)
(13,printLine(data)
(14,myString)
(15,5)
(16,data)
(17,5)
(18,if(5==5)
(19,data = strdup(myString)
(20,data)
(21,myString)
(22,NULL)
(23,)
(24,data)
(25,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
