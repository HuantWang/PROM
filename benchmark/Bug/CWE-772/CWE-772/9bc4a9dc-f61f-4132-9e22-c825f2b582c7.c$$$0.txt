-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
25,32
26,27
27,28
27,29
28,29
30,31
30,32
30,33
33,34
34,35
34,36
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
81,82
82,83
82,84
83,84
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
103,104
105,106
105,107
106,107
108,109
109,110
109,111
110,111
113,114
113,115
114,115
114,116
115,116
117,118
119,120
119,121
119,122
119,123
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
129,130
130,131
130,132
131,132
131,133
132,133
132,134
133,134
138,139
139,140
139,141
140,141
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
151,152
-----nextToken-----
2,4,8,10,15,16,19,20,23,29,31,32,37,39,42,44,48,49,53,55,60,62,68,69,70,71,77,78,79,80,84,88,89,93,97,99,102,104,107,111,112,116,118,125,126,127,128,134,135,136,137,141,145,146,150,152
-----computeFrom-----
13,14
13,15
17,18
17,19
43,44
43,45
51,52
51,53
64,65
64,66
73,74
73,75
91,92
91,93
105,106
105,107
114,115
114,116
121,122
121,123
130,131
130,132
-----guardedBy-----
116,152
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_17_bad()
CWE401_Memory_Leak__malloc_realloc_twoIntsStruct_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(3,52,0)
(28,11,0)
(10,12,0)
(4,79,0)
(59,84,0)
(11,6,0)
(54,16,0)
(52,34,0)
(34,65,0)
(21,24,0)
(70,67,0)
(48,8,0)
(72,39,0)
(66,65,0)
(4,80,0)
(85,66,0)
(8,18,0)
(80,6,0)
(79,54,0)
(25,29,0)
(29,6,0)
(42,14,0)
(31,65,0)
(75,65,0)
(20,54,0)
(49,43,0)
(18,57,0)
(79,4,0)
(12,10,0)
(65,66,0)
(53,61,0)
(83,34,0)
(49,17,0)
(24,54,0)
(38,35,0)
(18,8,0)
(43,49,0)
(37,25,0)
(62,57,0)
(36,61,0)
(64,68,0)
(6,47,0)
(25,67,0)
(40,29,0)
(81,47,0)
(6,54,0)
(57,39,0)
(44,53,0)
(35,68,0)
(55,29,0)
(7,2,0)
(17,65,0)
(47,6,0)
(43,39,0)
(19,34,0)
(23,14,0)
(15,0,0)
(66,85,0)
(32,54,0)
(58,80,0)
(17,49,0)
(0,65,0)
(47,81,0)
(65,54,0)
(84,9,0)
(5,2,0)
(9,66,0)
(63,17,0)
(68,35,0)
(73,80,0)
(26,12,0)
(45,51,0)
(9,6,0)
(46,72,0)
(84,56,0)
(67,54,0)
(74,75,0)
(13,51,0)
(30,6,0)
(47,22,0)
(80,4,0)
(9,84,0)
(33,0,0)
(52,72,0)
(66,9,0)
(10,27,0)
(61,53,0)
(22,61,0)
(50,2,0)
(75,39,0)
(34,52,0)
(1,17,0)
(69,54,0)
(71,9,0)
(8,65,0)
(56,84,0)
(60,68,0)
(35,24,0)
(61,22,0)
(68,6,0)
(41,11,0)
(77,5,0)
(82,18,0)
(86,8,0)
(78,56,0)
(29,25,0)
(22,47,0)
(14,2,0)
(42,2,1)
(75,65,1)
(1,63,1)
(19,83,1)
(18,8,1)
(78,59,1)
(9,84,1)
(63,57,1)
(30,14,1)
(35,68,1)
(0,33,1)
(77,0,1)
(86,72,1)
(31,79,1)
(0,65,1)
(71,31,1)
(52,34,1)
(80,6,1)
(62,18,1)
(25,29,1)
(15,65,1)
(66,85,1)
(73,24,1)
(12,26,1)
(11,6,1)
(83,0,1)
(25,37,1)
(35,38,1)
(60,64,1)
(11,28,1)
(52,3,1)
(8,48,1)
(79,4,1)
(38,68,1)
(74,43,1)
(23,42,1)
(77,75,1)
(47,22,1)
(18,82,1)
(26,11,1)
(21,35,1)
(55,10,1)
(22,61,1)
(43,49,1)
(68,6,1)
(58,73,1)
(67,70,1)
(41,6,1)
(84,56,1)
(48,86,1)
(44,36,1)
(70,25,1)
(37,29,1)
(14,2,1)
(29,40,1)
(5,77,1)
(53,44,1)
(17,65,1)
(68,60,1)
(34,19,1)
(2,50,1)
(4,80,1)
(8,65,1)
(65,66,1)
(56,78,1)
(6,47,1)
(29,6,1)
(33,15,1)
(55,11,1)
(76,14,1)
(9,6,1)
(28,41,1)
(64,67,1)
(36,30,1)
(14,23,1)
(72,46,1)
(10,12,1)
(82,8,1)
(24,21,1)
(5,2,1)
(42,5,1)
(50,7,1)
(3,34,1)
(46,52,1)
(59,71,1)
(57,62,1)
(40,55,1)
(47,81,1)
(80,58,1)
(49,17,1)
(66,9,1)
(61,53,1)
(34,65,1)
(17,1,1)
(75,74,1)
(12,11,2)
(79,4,2)
(30,14,2)
(37,14,2)
(24,14,2)
(72,0,2)
(68,14,2)
(0,14,2)
(11,6,2)
(14,14,2)
(75,65,2)
(34,0,2)
(18,0,2)
(19,0,2)
(21,14,2)
(44,14,2)
(67,14,2)
(33,14,2)
(77,14,2)
(42,14,2)
(17,0,2)
(1,0,2)
(61,14,2)
(4,80,2)
(29,6,2)
(18,8,2)
(9,14,2)
(65,66,2)
(38,14,2)
(84,14,2)
(75,0,2)
(58,14,2)
(10,11,2)
(66,14,2)
(41,14,2)
(66,9,2)
(71,14,2)
(60,14,2)
(10,12,2)
(61,53,2)
(22,61,2)
(25,29,2)
(74,0,2)
(80,6,2)
(28,14,2)
(8,65,2)
(65,14,2)
(14,2,2)
(25,14,2)
(4,14,2)
(53,14,2)
(8,0,2)
(79,14,2)
(59,14,2)
(5,14,2)
(11,14,2)
(23,14,2)
(84,56,2)
(86,0,2)
(43,0,2)
(46,0,2)
(15,14,2)
(35,14,2)
(78,14,2)
(63,0,2)
(47,81,2)
(43,49,2)
(31,14,2)
(73,14,2)
(56,14,2)
(57,0,2)
(40,14,2)
(3,0,2)
(34,65,2)
(68,6,2)
(17,65,2)
(49,17,2)
(0,65,2)
(52,34,2)
(29,14,2)
(6,47,2)
(6,14,2)
(36,14,2)
(66,85,2)
(47,22,2)
(47,14,2)
(22,14,2)
(70,14,2)
(83,0,2)
(48,0,2)
(82,0,2)
(52,0,2)
(64,14,2)
(9,6,2)
(55,14,2)
(5,2,2)
(35,68,2)
(49,0,2)
(80,14,2)
(62,0,2)
(26,11,2)
(9,84,2)
-----------------------------------
(0,data != NULL)
(1,0)
(2,j = 0)
(3,intOne)
(4,&data[0])
(5,j++)
(6,* data = (twoIntsStruct *)
(7,j)
(8,data[0])
(9,realloc(data, (130000)
(10,exit(-1)
(11,data == NULL)
(12,-1)
(13,j)
(14,j < 1)
(15,data)
(16,)
(17,data[0])
(18,data[0].intTwo)
(19,0)
(20,if (data == NULL)
(21,0)
(22,malloc(100*sizeof(twoIntsStruct)
(23,1)
(24,data[0].intTwo = 0)
(25,data[0].intOne)
(26,1)
(27,)
(28,NULL)
(29,data[0])
(30,data)
(31,data)
(32,data)
(33,NULL)
(34,data[0])
(35,data[0].intTwo)
(36,100)
(37,intOne)
(38,intTwo)
(39,)
(40,0)
(41,data)
(42,j)
(43,printStructLine(&data[0])
(44,twoIntsStruct)
(45,for(j = 0; j < 1; j++)
(46,1)
(47,(twoIntsStruct *)
(48,0)
(49,&data[0])
(50,0)
(51,)
(52,data[0].intOne)
(53,sizeof(twoIntsStruct)
(54,)
(55,data)
(56,sizeof(twoIntsStruct)
(57,data[0].intTwo = 1)
(58,0)
(59,130000)
(60,0)
(61,100*sizeof(twoIntsStruct)
(62,1)
(63,data)
(64,data)
(65,data = (twoIntsStruct *)
(66,(twoIntsStruct *)
(67,data[0].intOne = 0)
(68,data[0])
(69,if (data != NULL)
(70,0)
(71,data)
(72,data[0].intOne = 1)
(73,data)
(74,data)
(75,free(data)
(76,RET)
(77,j)
(78,twoIntsStruct)
(79,printStructLine(&data[0])
(80,data[0])
(81,twoIntsStruct *)
(82,intTwo)
(83,data)
(84,(130000)
(85,twoIntsStruct *)
(86,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
