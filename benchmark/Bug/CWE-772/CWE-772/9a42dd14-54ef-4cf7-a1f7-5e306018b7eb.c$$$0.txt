-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_08_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,87,89
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_08_bad(){    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_08_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_08_bad
{    twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(33,27,0)
(17,12,0)
(2,30,0)
(13,7,0)
(11,12,0)
(12,32,0)
(25,4,0)
(19,26,0)
(30,25,0)
(46,29,0)
(16,1,0)
(1,14,0)
(22,31,0)
(43,39,0)
(35,43,0)
(9,14,0)
(20,29,0)
(5,25,0)
(29,27,0)
(45,32,0)
(25,31,0)
(34,43,0)
(26,19,0)
(24,1,0)
(33,4,0)
(35,25,0)
(7,13,0)
(44,26,0)
(31,22,0)
(27,33,0)
(43,35,0)
(36,7,0)
(37,14,0)
(29,25,0)
(10,19,0)
(12,17,0)
(13,0,0)
(28,17,0)
(3,39,0)
(22,26,0)
(31,6,0)
(31,25,0)
(32,4,0)
(17,25,0)
(8,30,0)
(18,17,0)
(27,29,0)
(38,35,0)
(26,22,0)
(40,4,0)
(21,14,0)
(42,35,0)
(6,31,0)
(39,4,0)
(3,43,1)
(27,29,1)
(44,5,1)
(28,13,1)
(23,15,1)
(30,2,1)
(33,27,1)
(32,45,1)
(24,16,1)
(5,41,1)
(1,24,1)
(29,25,1)
(10,44,1)
(19,10,1)
(35,38,1)
(11,17,1)
(17,18,1)
(31,6,1)
(31,22,1)
(41,1,1)
(45,12,1)
(42,32,1)
(15,41,1)
(15,33,1)
(26,19,1)
(29,20,1)
(36,30,1)
(43,35,1)
(8,25,1)
(28,30,1)
(35,25,1)
(46,39,1)
(34,35,1)
(30,25,1)
(12,17,1)
(2,8,1)
(17,25,1)
(22,26,1)
(43,34,1)
(25,31,1)
(18,28,1)
(38,42,1)
(12,11,1)
(13,7,1)
(7,36,1)
(39,3,1)
(20,46,1)
(17,41,2)
(27,29,2)
(46,41,2)
(17,25,2)
(20,41,2)
(19,41,2)
(33,27,2)
(26,19,2)
(26,41,2)
(38,41,2)
(7,30,2)
(32,41,2)
(25,41,2)
(30,25,2)
(31,6,2)
(3,41,2)
(10,41,2)
(18,41,2)
(33,41,2)
(39,41,2)
(22,26,2)
(36,30,2)
(43,35,2)
(2,41,2)
(42,41,2)
(5,41,2)
(12,17,2)
(29,41,2)
(44,41,2)
(31,22,2)
(27,41,2)
(13,7,2)
(43,41,2)
(30,41,2)
(35,41,2)
(29,25,2)
(8,41,2)
(31,41,2)
(12,41,2)
(22,41,2)
(28,41,2)
(11,41,2)
(25,31,2)
(13,30,2)
(45,41,2)
(34,41,2)
(35,25,2)
-----------------------------------
(0,)
(1,data = NULL)
(2,NULL)
(3,0)
(4,)
(5,data)
(6,twoIntsStruct *)
(7,-1)
(8,data)
(9,if(staticReturnsTrue()
(10,twoIntsStruct)
(11,intOne)
(12,data[0].intOne)
(13,exit(-1)
(14,)
(15,staticReturnsTrue()
(16,data)
(17,data[0])
(18,0)
(19,sizeof(twoIntsStruct)
(20,0)
(21,if(staticReturnsTrue()
(22,malloc(100*sizeof(twoIntsStruct)
(23,RET)
(24,NULL)
(25,data = (twoIntsStruct *)
(26,100*sizeof(twoIntsStruct)
(27,&data[0])
(28,data)
(29,data[0])
(30,data == NULL)
(31,(twoIntsStruct *)
(32,data[0].intOne = 0)
(33,printStructLine(&data[0])
(34,intTwo)
(35,data[0])
(36,1)
(37,data)
(38,0)
(39,data[0].intTwo = 0)
(40,if (data == NULL)
(41,staticReturnsTrue()
(42,data)
(43,data[0].intTwo)
(44,100)
(45,0)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
