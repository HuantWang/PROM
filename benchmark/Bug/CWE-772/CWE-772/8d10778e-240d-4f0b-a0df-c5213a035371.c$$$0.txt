-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,69,70,72
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
35,36
35,37
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_03_bad()
CWE401_Memory_Leak__char_malloc_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,20,0)
(5,17,0)
(8,2,0)
(11,34,0)
(29,2,0)
(13,14,0)
(30,17,0)
(7,34,0)
(8,0,0)
(10,14,0)
(17,14,0)
(36,21,0)
(21,36,0)
(15,6,0)
(22,2,0)
(9,0,0)
(25,24,0)
(34,11,0)
(18,29,0)
(27,24,0)
(6,15,0)
(9,2,0)
(23,6,0)
(2,0,0)
(33,8,0)
(3,16,0)
(1,36,0)
(1,34,0)
(36,2,0)
(36,1,0)
(12,29,0)
(26,11,0)
(2,36,0)
(31,0,0)
(34,1,0)
(28,9,0)
(35,16,0)
(4,14,0)
(32,8,0)
(9,2,1)
(23,29,1)
(5,30,1)
(32,15,1)
(8,2,1)
(29,12,1)
(9,28,1)
(26,7,1)
(34,11,1)
(11,26,1)
(12,18,1)
(35,3,1)
(15,6,1)
(25,16,1)
(32,29,1)
(7,22,1)
(17,5,1)
(27,25,1)
(1,34,1)
(16,35,1)
(36,21,1)
(28,8,1)
(2,36,1)
(25,9,1)
(22,16,1)
(33,32,1)
(3,17,1)
(29,2,1)
(36,1,1)
(6,23,1)
(18,2,1)
(24,27,1)
(8,33,1)
(19,24,1)
(29,2,2)
(26,16,2)
(32,16,2)
(23,29,2)
(15,29,2)
(36,16,2)
(33,16,2)
(34,16,2)
(36,1,2)
(8,16,2)
(1,16,2)
(2,36,2)
(11,16,2)
(6,29,2)
(15,6,2)
(9,16,2)
(1,34,2)
(28,16,2)
(8,2,2)
(9,2,2)
(12,16,2)
(2,16,2)
(7,16,2)
(22,16,2)
(34,11,2)
(36,21,2)
(18,16,2)
(29,16,2)
-----------------------------------
(0,)
(1,malloc(100*sizeof(char)
(2,data = (char *)
(3,5)
(4,if(5==5)
(5,NULL)
(6,-1)
(7,100)
(8,strcpy(data, "A String")
(9,printLine(data)
(10,data)
(11,sizeof(char)
(12,NULL)
(13,if(5==5)
(14,)
(15,exit(-1)
(16,5==5)
(17,data = NULL)
(18,data)
(19,RET)
(20,)
(21,char *)
(22,data)
(23,1)
(24,5==5)
(25,5)
(26,char)
(27,5)
(28,data)
(29,data == NULL)
(30,data)
(31,if (data == NULL)
(32,data)
(33,"A String")
(34,100*sizeof(char)
(35,5)
(36,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
