-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_03_bad()
{
    int64_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
76,77
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,47,49,54,56,61,62,63,67,70,71,74,75,77
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_03_bad(){    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_malloc_03_bad()
CWE401_Memory_Leak__int64_t_malloc_03_bad
{    int64_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,12,0)
(14,7,0)
(12,34,0)
(8,26,0)
(7,17,0)
(35,18,0)
(22,7,0)
(6,13,0)
(27,28,0)
(3,25,0)
(9,25,0)
(31,17,0)
(22,31,0)
(29,8,0)
(36,22,0)
(11,30,0)
(26,11,0)
(23,2,0)
(16,2,0)
(30,11,0)
(28,2,0)
(8,7,0)
(26,8,0)
(32,17,0)
(15,22,0)
(7,8,0)
(4,11,0)
(34,1,0)
(31,22,0)
(34,12,0)
(13,7,0)
(19,17,0)
(11,26,0)
(24,28,0)
(21,30,0)
(33,13,0)
(20,18,0)
(8,29,0)
(5,2,0)
(4,14,1)
(10,25,1)
(0,13,1)
(25,9,1)
(34,12,1)
(7,8,1)
(33,6,1)
(20,28,1)
(22,15,1)
(26,11,1)
(12,0,1)
(8,26,1)
(30,21,1)
(21,4,1)
(27,24,1)
(32,34,1)
(32,13,1)
(6,7,1)
(13,7,1)
(3,31,1)
(28,27,1)
(18,35,1)
(22,7,1)
(36,32,1)
(8,29,1)
(11,30,1)
(13,33,1)
(15,36,1)
(35,20,1)
(9,3,1)
(31,22,1)
(14,18,1)
(3,18,1)
(13,18,2)
(32,18,2)
(6,18,2)
(34,12,2)
(11,18,2)
(7,8,2)
(22,7,2)
(22,18,2)
(4,18,2)
(13,7,2)
(7,18,2)
(36,18,2)
(33,18,2)
(11,30,2)
(15,18,2)
(31,22,2)
(8,18,2)
(8,29,2)
(34,13,2)
(12,13,2)
(26,11,2)
(14,18,2)
(26,18,2)
(0,13,2)
(21,18,2)
(31,18,2)
(8,26,2)
(30,18,2)
-----------------------------------
(0,1)
(1,)
(2,)
(3,5)
(4,100)
(5,data)
(6,data)
(7,data = (int64_t *)
(8,(int64_t *)
(9,5)
(10,RET)
(11,100*sizeof(int64_t)
(12,-1)
(13,data == NULL)
(14,data)
(15,0)
(16,if(5==5)
(17,)
(18,5==5)
(19,if (data == NULL)
(20,5)
(21,int64_t)
(22,data[0])
(23,if(5==5)
(24,data)
(25,5==5)
(26,malloc(100*sizeof(int64_t)
(27,NULL)
(28,data = NULL)
(29,int64_t *)
(30,sizeof(int64_t)
(31,printLongLongLine(data[0])
(32,L)
(33,NULL)
(34,exit(-1)
(35,5)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
