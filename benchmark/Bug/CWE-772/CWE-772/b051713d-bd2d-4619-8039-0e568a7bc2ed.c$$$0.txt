-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_34_bad()
{
    int * data;
    CWE401_Memory_Leak__int_calloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    myUnion.unionFirst = data;
    {
        int * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
75,76
77,78
77,79
78,79
79,80
79,81
81,82
81,83
81,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,73,74,76,80,82,83,87,88,89
-----computeFrom-----
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_34_bad(){    int * data;    CWE401_Memory_Leak__int_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_34_bad()
CWE401_Memory_Leak__int_calloc_34_bad
{    int * data;    CWE401_Memory_Leak__int_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
CWE401_Memory_Leak__int_calloc_34_unionType myUnion;
CWE401_Memory_Leak__int_calloc_34_unionType myUnion;
CWE401_Memory_Leak__int_calloc_34_unionType
CWE401_Memory_Leak__int_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = myUnion.unionSecond;
int * data = myUnion.unionSecond;
int
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(20,23,0)
(4,12,0)
(28,0,0)
(26,25,0)
(29,44,0)
(0,23,0)
(6,36,0)
(16,23,0)
(8,38,0)
(34,0,0)
(14,12,0)
(30,44,0)
(11,20,0)
(15,3,0)
(39,11,0)
(10,3,0)
(22,29,0)
(29,22,0)
(25,26,0)
(11,38,0)
(13,3,0)
(21,33,0)
(12,3,0)
(5,29,0)
(40,36,0)
(33,31,0)
(23,20,0)
(35,26,0)
(18,33,0)
(9,17,0)
(27,3,0)
(17,44,0)
(17,23,0)
(22,3,0)
(43,31,0)
(42,29,0)
(44,3,0)
(12,23,0)
(36,3,0)
(20,2,0)
(25,37,0)
(29,23,0)
(41,15,0)
(31,33,0)
(2,20,0)
(38,11,0)
(20,11,0)
(32,4,0)
(23,3,0)
(7,4,0)
(31,15,0)
(19,17,0)
(12,14,1)
(31,33,1)
(34,28,1)
(7,22,1)
(6,40,1)
(36,6,1)
(23,20,1)
(26,35,1)
(8,39,1)
(29,44,1)
(17,19,1)
(22,29,1)
(30,17,1)
(11,38,1)
(33,18,1)
(29,5,1)
(21,43,1)
(20,11,1)
(12,23,1)
(14,4,1)
(38,8,1)
(5,42,1)
(25,26,1)
(16,36,1)
(32,7,1)
(17,23,1)
(42,44,1)
(4,32,1)
(0,23,1)
(35,0,1)
(43,12,1)
(39,16,1)
(29,23,1)
(44,30,1)
(24,31,1)
(19,9,1)
(9,25,1)
(20,2,1)
(9,0,1)
(28,23,1)
(18,21,1)
(0,34,1)
(35,0,2)
(0,23,2)
(25,0,2)
(11,38,2)
(29,44,2)
(17,23,2)
(26,0,2)
(29,23,2)
(31,33,2)
(20,11,2)
(23,20,2)
(25,26,2)
(22,29,2)
(20,2,2)
(12,23,2)
-----------------------------------
(0,data == NULL)
(1, sizeof(int)
(2,int *)
(3,)
(4,myUnion.unionFirst)
(5,0)
(6,NULL)
(7,myUnion)
(8,int)
(9,data)
(10,if (data == NULL)
(11,calloc(100, sizeof(int)
(12,myUnion.unionFirst = data)
(13,data)
(14,data)
(15,)
(16,data)
(17,data[0])
(18,unionSecond)
(19,0)
(20,(int *)
(21,myUnion)
(22,printIntLine(data[0])
(23,data = (int *)
(24,RET)
(25,exit(-1)
(26,-1)
(27,myUnion)
(28,data)
(29,data[0])
(30,5)
(31,* data = myUnion.unionSecond)
(32,unionFirst)
(33,myUnion.unionSecond)
(34,NULL)
(35,1)
(36,data = NULL)
(37,)
(38,sizeof(int)
(39,100)
(40,data)
(41,data)
(42,data)
(43,data)
(44,data[0] = 5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
