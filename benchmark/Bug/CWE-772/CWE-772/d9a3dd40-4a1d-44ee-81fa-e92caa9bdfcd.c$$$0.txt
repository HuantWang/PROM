-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_10_bad()
{
    int64_t * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
62,63
63,64
63,65
64,65
66,67
66,68
67,68
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,59,60,61,65,68,69,72,74
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_10_bad(){    int64_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_10_bad()
CWE401_Memory_Leak__int64_t_calloc_10_bad
{    int64_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(12,22,0)
(20,10,0)
(0,10,0)
(25,27,0)
(32,22,0)
(4,28,0)
(1,5,0)
(5,14,0)
(28,29,0)
(16,28,0)
(22,10,0)
(13,27,0)
(7,12,0)
(31,26,0)
(3,14,0)
(15,5,0)
(8,14,0)
(26,18,0)
(2,27,0)
(22,4,0)
(28,4,0)
(6,4,0)
(4,6,0)
(29,28,0)
(19,29,0)
(4,22,0)
(18,26,0)
(27,22,0)
(18,23,0)
(17,14,0)
(27,2,0)
(24,12,0)
(2,10,0)
(11,9,1)
(4,6,1)
(18,26,1)
(5,15,1)
(2,27,1)
(32,9,1)
(4,28,1)
(11,2,1)
(27,22,1)
(24,22,1)
(28,29,1)
(0,18,1)
(16,32,1)
(7,24,1)
(13,0,1)
(12,22,1)
(19,16,1)
(30,11,1)
(9,5,1)
(26,31,1)
(22,4,1)
(15,1,1)
(0,12,1)
(29,19,1)
(12,7,1)
(25,13,1)
(27,25,1)
(31,12,1)
(31,12,2)
(18,12,2)
(2,9,2)
(25,9,2)
(22,9,2)
(28,29,2)
(4,6,2)
(27,9,2)
(19,9,2)
(28,9,2)
(27,22,2)
(4,28,2)
(18,26,2)
(26,12,2)
(29,9,2)
(24,9,2)
(13,9,2)
(12,9,2)
(7,9,2)
(22,4,2)
(4,9,2)
(0,9,2)
(2,27,2)
(32,9,2)
(12,22,2)
(16,9,2)
-----------------------------------
(0,L)
(1,data)
(2,printLongLongLine(data[0])
(3,data)
(4,(int64_t *)
(5,data = NULL)
(6,int64_t *)
(7,NULL)
(8,if(globalTrue)
(9,globalTrue)
(10,)
(11,globalTrue)
(12,data == NULL)
(13,data)
(14,)
(15,NULL)
(16,100)
(17,if(globalTrue)
(18,exit(-1)
(19,int64_t)
(20,if (data == NULL)
(21, sizeof(int64_t)
(22,data = (int64_t *)
(23,)
(24,data)
(25,0)
(26,-1)
(27,data[0])
(28,calloc(100, sizeof(int64_t)
(29,sizeof(int64_t)
(30,RET)
(31,1)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
