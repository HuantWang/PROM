-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_03_bad()
{
    if(5==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,9,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105
-----computeFrom-----
7,8
7,9
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_03_bad(){    if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_03_bad()
CWE401_Memory_Leak__malloc_realloc_char_03_bad
{    if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(5==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
5==5
5
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(37,15,0)
(16,24,0)
(41,12,0)
(43,39,0)
(8,20,0)
(26,8,0)
(38,28,0)
(35,44,0)
(0,25,0)
(50,47,0)
(25,0,0)
(23,27,0)
(5,27,0)
(4,42,0)
(7,1,0)
(26,27,0)
(9,6,0)
(21,7,0)
(19,25,0)
(12,27,0)
(7,46,0)
(44,15,0)
(46,7,0)
(11,36,0)
(37,26,0)
(10,14,0)
(45,47,0)
(22,26,0)
(1,34,0)
(32,19,0)
(44,26,0)
(12,21,0)
(30,14,0)
(2,25,0)
(17,21,0)
(27,18,0)
(40,42,0)
(7,21,0)
(52,28,0)
(8,26,0)
(36,21,0)
(20,8,0)
(28,26,0)
(47,26,0)
(34,6,0)
(39,27,0)
(19,8,0)
(1,7,0)
(25,19,0)
(3,39,0)
(6,34,0)
(14,10,0)
(34,1,0)
(49,27,0)
(10,29,0)
(21,27,0)
(19,21,0)
(31,36,0)
(48,37,0)
(39,21,0)
(51,0,0)
(8,19,0)
(13,34,0)
(47,15,0)
(21,7,1)
(3,10,1)
(8,19,1)
(9,13,1)
(2,32,1)
(3,36,1)
(12,41,1)
(7,1,1)
(22,12,1)
(6,9,1)
(37,26,1)
(33,28,1)
(39,21,1)
(45,50,1)
(47,26,1)
(43,3,1)
(44,26,1)
(33,42,1)
(4,40,1)
(14,30,1)
(36,21,1)
(33,44,1)
(36,11,1)
(1,34,1)
(11,31,1)
(0,51,1)
(13,17,1)
(39,43,1)
(48,47,1)
(25,0,1)
(8,20,1)
(28,38,1)
(19,25,1)
(10,14,1)
(19,21,1)
(30,36,1)
(35,37,1)
(41,39,1)
(12,21,1)
(34,6,1)
(7,46,1)
(32,22,1)
(42,4,1)
(44,35,1)
(52,26,1)
(26,8,1)
(47,45,1)
(51,2,1)
(38,52,1)
(17,42,1)
(37,48,1)
(28,26,1)
(31,21,1)
(50,28,1)
(35,28,2)
(12,21,2)
(1,42,2)
(48,28,2)
(47,28,2)
(44,28,2)
(7,1,2)
(21,42,2)
(3,42,2)
(19,21,2)
(38,42,2)
(26,42,2)
(50,28,2)
(9,42,2)
(8,19,2)
(51,42,2)
(0,42,2)
(28,26,2)
(8,20,2)
(52,42,2)
(19,25,2)
(6,42,2)
(36,42,2)
(28,42,2)
(45,28,2)
(25,0,2)
(37,26,2)
(10,14,2)
(32,42,2)
(26,8,2)
(12,42,2)
(17,42,2)
(31,42,2)
(11,42,2)
(21,7,2)
(1,34,2)
(34,42,2)
(22,42,2)
(39,21,2)
(36,21,2)
(37,28,2)
(25,42,2)
(43,42,2)
(44,26,2)
(2,42,2)
(19,42,2)
(7,46,2)
(47,26,2)
(13,42,2)
(30,36,2)
(34,6,2)
(14,36,2)
(41,42,2)
(39,42,2)
(10,36,2)
(7,42,2)
(8,42,2)
-----------------------------------
(0,sizeof(char)
(1,malloc(100*sizeof(char)
(2,130000)
(3,data)
(4,5)
(5,if (data != NULL)
(6,sizeof(char)
(7,(char *)
(8,(char *)
(9,char)
(10,exit(-1)
(11,NULL)
(12,printLine(data)
(13,100)
(14,-1)
(15,)
(16,if(5==5)
(17,data)
(18,)
(19,realloc(data, (130000)
(20,char *)
(21,* data = (char *)
(22,data)
(23,data)
(24,)
(25,(130000)
(26,data = (char *)
(27,)
(28,data != NULL)
(29,)
(30,1)
(31,data)
(32,data)
(33,RET)
(34,100*sizeof(char)
(35,data)
(36,data == NULL)
(37,printLine(data)
(38,NULL)
(39,strcpy(data, "A String")
(40,5)
(41,data)
(42,5==5)
(43,"A String")
(44,free(data)
(45,"New String")
(46,char *)
(47,strcpy(data, "New String")
(48,data)
(49,if (data == NULL)
(50,data)
(51,char)
(52,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
