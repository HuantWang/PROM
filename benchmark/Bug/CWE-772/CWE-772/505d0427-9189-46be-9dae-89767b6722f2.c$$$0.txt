-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    char * * dataPtr = (char * *)dataVoidPtr;
    /* dereference dataPtr into data */
    char * data = (*dataPtr);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
14,18
18,19
19,20
19,21
20,21
20,22
22,23
22,24
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
35,36
36,37
-----nextToken-----
2,4,6,8,9,13,15,16,17,21,23,24,26,29,31,32,37,38
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    char * * dataPtr = (char * *)dataVoidPtr;    /* dereference dataPtr into data */    char * data = (*dataPtr);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__char_calloc_64b_badSink(void * dataVoidPtr)
CWE401_Memory_Leak__char_calloc_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    char * * dataPtr = (char * *)dataVoidPtr;    /* dereference dataPtr into data */    char * data = (*dataPtr);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
char * * dataPtr = (char * *)dataVoidPtr;
char * * dataPtr = (char * *)dataVoidPtr;
char
* * dataPtr = (char * *)dataVoidPtr
*
*
dataPtr
= (char * *)dataVoidPtr
(char * *)dataVoidPtr
char * *
char
* *
*
*
dataVoidPtr
dataVoidPtr
char * data = (*dataPtr);
char * data = (*dataPtr);
char
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
;
-----joern-----
(5,11,0)
(13,8,0)
(13,11,0)
(11,12,0)
(13,0,0)
(1,12,0)
(11,13,0)
(3,11,0)
(2,7,0)
(3,7,0)
(7,12,0)
(7,3,0)
(8,13,0)
(4,13,0)
(6,12,0)
(10,3,0)
(3,10,1)
(3,11,1)
(4,5,1)
(13,4,1)
(9,7,1)
(2,11,1)
(7,3,1)
(10,2,1)
(13,8,1)
(11,13,1)
(13,0,1)
(11,13,2)
(13,0,2)
(7,3,2)
(13,8,2)
(3,11,2)
-----------------------------------
(0,void * dataVoidPtr)
(1,dataPtr)
(2,data)
(3,*dataPtr)
(4,dataVoidPtr)
(5,dataPtr)
(6,data)
(7,* data = (*dataPtr)
(8,char * *)
(9,RET)
(10,dataPtr)
(11,* * dataPtr = (char * *)
(12,)
(13,(char * *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
