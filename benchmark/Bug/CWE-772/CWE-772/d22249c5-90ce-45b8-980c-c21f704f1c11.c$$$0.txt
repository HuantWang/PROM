-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_17_bad()
{
    int i,j;
    int * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
72,74
73,74
77,78
78,79
78,80
79,80
81,82
81,83
82,83
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
91,92
91,93
92,93
95,96
96,97
98,99
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,67,69,74,75,76,80,83,84,89,90,93,94,97,99
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
58,59
58,60
71,72
71,73
87,88
87,89
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_17_bad(){    int i,j;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_malloc_17_bad()
CWE401_Memory_Leak__int_malloc_17_bad
{    int i,j;    int * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(49,11,0)
(27,26,0)
(1,21,0)
(21,1,0)
(43,21,0)
(7,30,0)
(16,29,0)
(14,52,0)
(44,27,0)
(3,38,0)
(18,19,0)
(45,10,0)
(6,38,0)
(0,33,0)
(9,25,0)
(22,39,0)
(24,30,0)
(4,37,0)
(26,27,0)
(47,11,0)
(17,29,0)
(51,11,0)
(31,50,0)
(35,37,0)
(41,1,0)
(4,45,0)
(32,11,0)
(52,14,0)
(26,13,0)
(15,42,0)
(8,33,0)
(14,37,0)
(40,52,0)
(5,7,0)
(1,10,0)
(38,4,0)
(50,29,0)
(10,45,0)
(28,4,0)
(48,11,0)
(23,50,0)
(34,7,0)
(33,11,0)
(10,1,0)
(46,52,0)
(36,45,0)
(39,30,0)
(25,29,0)
(2,30,0)
(38,42,0)
(42,37,0)
(45,36,0)
(52,42,0)
(20,19,0)
(45,4,0)
(19,4,0)
(52,4,0)
(33,0,1)
(52,46,1)
(23,29,1)
(41,28,1)
(15,38,1)
(39,22,1)
(34,39,1)
(42,15,1)
(50,31,1)
(24,50,1)
(22,7,1)
(1,21,1)
(43,41,1)
(30,2,1)
(29,17,1)
(34,30,1)
(27,44,1)
(20,18,1)
(38,3,1)
(31,23,1)
(26,27,1)
(25,29,1)
(12,7,1)
(39,30,1)
(3,6,1)
(44,19,1)
(23,25,1)
(0,8,1)
(10,1,1)
(17,16,1)
(5,34,1)
(18,4,1)
(40,42,1)
(52,4,1)
(21,43,1)
(6,19,1)
(52,42,1)
(25,9,1)
(28,50,1)
(45,10,1)
(50,29,1)
(4,45,1)
(45,36,1)
(7,5,1)
(6,26,1)
(19,4,1)
(38,4,1)
(16,33,1)
(2,24,1)
(19,20,1)
(46,40,1)
(7,30,1)
(9,14,1)
(14,52,1)
(28,50,2)
(5,7,2)
(7,30,2)
(27,19,2)
(26,19,2)
(7,7,2)
(9,50,2)
(50,50,2)
(41,50,2)
(1,21,2)
(21,50,2)
(22,7,2)
(45,36,2)
(34,7,2)
(39,30,2)
(10,50,2)
(46,50,2)
(26,27,2)
(43,50,2)
(42,50,2)
(44,19,2)
(25,50,2)
(50,29,2)
(52,4,2)
(19,50,2)
(39,7,2)
(3,50,2)
(15,50,2)
(20,50,2)
(38,4,2)
(25,29,2)
(4,45,2)
(45,50,2)
(40,50,2)
(52,50,2)
(14,52,2)
(31,50,2)
(10,1,2)
(23,50,2)
(19,4,2)
(4,50,2)
(18,50,2)
(14,50,2)
(45,10,2)
(38,50,2)
(1,50,2)
(6,50,2)
(52,42,2)
-----------------------------------
(0,NULL)
(1,100*sizeof(int)
(2,0)
(3,0)
(4,data = (int *)
(5,1)
(6,data)
(7,j < 1)
(8,data)
(9,i)
(10,malloc(100*sizeof(int)
(11,)
(12,RET)
(13,)
(14,printIntLine(data[0])
(15,5)
(16,i)
(17,0)
(18,data)
(19,data == NULL)
(20,NULL)
(21,sizeof(int)
(22,j)
(23,i)
(24,j)
(25,i++)
(26,exit(-1)
(27,-1)
(28,data)
(29,i = 0)
(30,j = 0)
(31,1)
(32,j)
(33,data = NULL)
(34,j)
(35,if (data == NULL)
(36,int *)
(37,)
(38,data[0])
(39,j++)
(40,data)
(41,100)
(42,data[0] = 5)
(43,int)
(44,1)
(45,(int *)
(46,0)
(47,i)
(48,data)
(49,for(j = 0; j < 1; j++)
(50,i < 1)
(51,for(i = 0; i < 1; i++)
(52,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
