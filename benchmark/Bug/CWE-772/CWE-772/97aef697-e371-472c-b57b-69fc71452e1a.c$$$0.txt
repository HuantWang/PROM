-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_12_bad()
{
    if(globalReturnsTrueOrFalse())
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
                free(data);
            }
        }
    }
    else
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            struct _twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
29,31
31,32
32,33
32,34
33,34
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
52,54
53,54
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
92,94
92,95
93,94
95,96
97,98
97,99
98,99
100,101
101,102
101,103
102,103
105,106
105,107
106,107
106,108
107,108
109,110
111,112
111,113
111,114
111,115
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
121,122
122,123
122,124
123,124
123,125
124,125
124,126
125,126
130,131
131,132
131,133
132,133
134,135
134,136
135,136
135,137
136,137
138,139
140,141
141,142
141,143
142,143
145,146
146,147
146,148
147,148
149,150
151,152
152,153
152,154
152,155
152,156
152,157
152,158
152,159
152,160
152,161
153,154
154,155
154,156
155,156
157,158
157,159
157,160
160,161
161,162
161,163
162,163
162,164
163,164
165,166
167,168
167,169
168,169
170,171
170,172
172,173
173,174
173,175
174,175
177,178
177,179
178,179
178,180
179,180
181,182
183,184
184,185
185,186
185,187
186,187
188,189
190,191
191,192
191,193
192,193
194,195
194,196
197,198
198,199
198,200
199,200
199,201
200,201
200,202
201,202
206,207
207,208
207,209
208,209
208,210
209,210
209,211
210,211
215,216
216,217
216,218
217,218
219,220
219,221
220,221
220,222
221,222
223,224
225,226
226,227
226,228
227,228
230,231
231,232
231,233
232,233
234,235
234,236
235,236
235,237
236,237
238,239
240,241
240,242
240,243
241,242
243,244
245,246
245,247
246,247
248,249
249,250
249,251
250,251
253,254
253,255
254,255
254,256
255,256
257,258
259,260
259,261
259,262
259,263
260,261
261,262
261,263
262,263
264,265
266,267
267,268
267,269
268,269
268,270
269,270
269,271
270,271
275,276
276,277
276,278
277,278
277,279
278,279
278,280
279,280
284,285
285,286
285,287
286,287
288,289
288,290
289,290
289,291
290,291
292,293
294,295
295,296
295,297
296,297
299,300
300,301
300,302
301,302
303,304
-----nextToken-----
2,4,9,15,17,18,23,25,28,30,34,35,39,41,46,48,54,55,56,57,63,64,65,66,70,74,76,80,81,85,89,91,94,96,99,103,104,108,110,117,118,119,120,126,127,128,129,133,137,139,143,144,148,150,156,158,159,164,166,169,171,175,176,180,182,187,189,193,195,196,202,203,204,205,211,212,213,214,218,222,224,228,229,233,237,239,242,244,247,251,252,256,258,263,265,271,272,273,274,280,281,282,283,287,291,293,297,298,302,304
-----computeFrom-----
29,30
29,31
37,38
37,39
50,51
50,52
59,60
59,61
83,84
83,85
97,98
97,99
106,107
106,108
113,114
113,115
122,123
122,124
170,171
170,172
178,179
178,180
198,199
198,200
207,208
207,209
231,232
231,233
245,246
245,247
254,255
254,256
261,262
261,263
267,268
267,269
276,277
276,278
-----guardedBy-----
108,150
256,265
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_12_bad(){    if(globalReturnsTrueOrFalse())    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_12_bad()
CWE401_Memory_Leak__malloc_realloc_struct_twoIntsStruct_12_bad
{    if(globalReturnsTrueOrFalse())    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
if(globalReturnsTrueOrFalse())    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);                free(data);            }
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct
_twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
tmpData
tmpData
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(59,120,0)
(83,114,0)
(83,49,0)
(4,129,0)
(142,14,0)
(141,156,0)
(114,73,0)
(8,6,0)
(78,75,0)
(23,8,0)
(3,7,0)
(103,80,0)
(116,112,0)
(115,134,0)
(135,165,0)
(110,146,0)
(96,54,0)
(39,152,0)
(91,42,0)
(104,85,0)
(137,43,0)
(165,135,0)
(97,131,0)
(24,109,0)
(16,87,0)
(7,41,0)
(111,131,0)
(48,34,0)
(165,25,0)
(19,12,0)
(30,82,0)
(114,83,0)
(140,152,0)
(68,137,0)
(133,17,0)
(160,8,0)
(14,142,0)
(113,54,0)
(27,91,0)
(83,140,0)
(106,108,0)
(67,161,0)
(85,104,0)
(33,123,0)
(95,93,0)
(121,129,0)
(86,14,0)
(101,26,0)
(21,26,0)
(72,4,0)
(112,51,0)
(28,142,0)
(55,129,0)
(92,15,0)
(161,67,0)
(94,21,0)
(154,88,0)
(9,37,0)
(51,112,0)
(139,53,0)
(126,156,0)
(117,32,0)
(31,68,0)
(163,48,0)
(21,152,0)
(0,70,0)
(140,83,0)
(91,100,0)
(108,131,0)
(161,47,0)
(58,61,0)
(122,38,0)
(47,161,0)
(34,26,0)
(156,80,0)
(41,7,0)
(156,126,0)
(66,120,0)
(139,49,0)
(137,68,0)
(37,129,0)
(149,7,0)
(18,155,0)
(52,21,0)
(135,82,0)
(102,126,0)
(131,108,0)
(61,51,0)
(32,123,0)
(85,1,0)
(49,8,0)
(109,151,0)
(33,130,0)
(80,120,0)
(138,84,0)
(147,114,0)
(71,34,0)
(112,116,0)
(154,9,0)
(35,86,0)
(155,18,0)
(29,140,0)
(152,8,0)
(158,137,0)
(60,129,0)
(139,119,0)
(157,36,0)
(65,32,0)
(55,146,0)
(87,72,0)
(73,79,0)
(148,49,0)
(164,8,0)
(70,100,0)
(128,87,0)
(46,76,0)
(127,4,0)
(91,27,0)
(9,154,0)
(5,70,0)
(10,104,0)
(162,8,0)
(33,77,0)
(51,61,0)
(88,129,0)
(75,49,0)
(53,139,0)
(129,44,0)
(90,17,0)
(63,41,0)
(109,76,0)
(47,36,0)
(2,76,0)
(7,49,0)
(56,142,0)
(86,66,0)
(151,8,0)
(12,119,0)
(144,61,0)
(12,155,0)
(82,88,0)
(93,48,0)
(155,12,0)
(93,21,0)
(54,152,0)
(76,49,0)
(132,151,0)
(42,91,0)
(13,93,0)
(23,21,0)
(70,49,0)
(145,75,0)
(89,135,0)
(88,161,0)
(119,139,0)
(66,86,0)
(50,84,0)
(99,36,0)
(142,55,0)
(82,135,0)
(108,101,0)
(107,55,0)
(36,47,0)
(40,83,0)
(136,37,0)
(100,70,0)
(32,21,0)
(14,86,0)
(42,8,0)
(82,146,0)
(143,154,0)
(49,139,0)
(48,93,0)
(146,110,0)
(61,88,0)
(41,15,0)
(100,91,0)
(25,165,0)
(81,59,0)
(72,87,0)
(76,109,0)
(123,32,0)
(23,49,0)
(77,33,0)
(11,8,0)
(15,8,0)
(50,159,0)
(73,114,0)
(125,88,0)
(146,82,0)
(86,35,0)
(77,26,0)
(157,64,0)
(153,154,0)
(152,140,0)
(87,88,0)
(22,126,0)
(131,21,0)
(64,157,0)
(84,50,0)
(116,129,0)
(140,29,0)
(45,68,0)
(161,88,0)
(74,38,0)
(68,55,0)
(98,101,0)
(150,129,0)
(126,55,0)
(105,72,0)
(62,43,0)
(43,120,0)
(118,23,0)
(17,88,0)
(123,33,0)
(20,9,0)
(36,157,0)
(112,57,0)
(119,12,0)
(79,73,0)
(59,55,0)
(146,55,0)
(57,112,0)
(130,33,0)
(38,55,0)
(163,93,1)
(161,67,1)
(140,83,1)
(41,63,1)
(62,137,1)
(113,96,1)
(16,50,1)
(122,74,1)
(153,143,1)
(49,139,1)
(161,47,1)
(17,90,1)
(94,52,1)
(21,94,1)
(142,28,1)
(154,88,1)
(102,22,1)
(52,54,1)
(75,145,1)
(54,152,1)
(88,161,1)
(155,18,1)
(138,17,1)
(141,126,1)
(114,73,1)
(23,49,1)
(45,31,1)
(9,154,1)
(149,151,1)
(108,131,1)
(66,86,1)
(84,138,1)
(51,61,1)
(118,54,1)
(86,14,1)
(3,149,1)
(116,112,1)
(156,126,1)
(157,64,1)
(82,88,1)
(47,36,1)
(55,146,1)
(4,127,1)
(40,39,1)
(107,116,1)
(50,84,1)
(16,17,1)
(158,68,1)
(71,48,1)
(34,71,1)
(68,55,1)
(146,82,1)
(33,130,1)
(12,155,1)
(24,76,1)
(13,101,1)
(93,21,1)
(0,5,1)
(165,25,1)
(140,29,1)
(83,114,1)
(38,122,1)
(137,158,1)
(97,111,1)
(155,19,1)
(33,123,1)
(21,152,1)
(86,35,1)
(48,93,1)
(28,56,1)
(132,109,1)
(23,118,1)
(156,141,1)
(78,49,1)
(100,70,1)
(126,102,1)
(77,33,1)
(76,49,1)
(108,106,1)
(131,21,1)
(144,58,1)
(143,4,1)
(98,108,1)
(117,34,1)
(125,69,1)
(124,38,1)
(2,46,1)
(70,0,1)
(46,85,1)
(38,55,1)
(126,55,1)
(82,135,1)
(90,133,1)
(20,154,1)
(87,128,1)
(127,72,1)
(148,69,1)
(109,24,1)
(7,49,1)
(23,21,1)
(152,140,1)
(54,113,1)
(165,89,1)
(61,144,1)
(9,20,1)
(65,117,1)
(119,12,1)
(32,21,1)
(32,65,1)
(19,148,1)
(128,16,1)
(42,91,1)
(91,100,1)
(58,37,1)
(139,119,1)
(103,156,1)
(17,88,1)
(99,125,1)
(146,110,1)
(10,75,1)
(61,88,1)
(7,3,1)
(137,68,1)
(80,103,1)
(75,49,1)
(157,99,1)
(68,45,1)
(73,147,1)
(70,49,1)
(118,77,1)
(73,79,1)
(92,41,1)
(95,13,1)
(39,42,1)
(59,81,1)
(136,9,1)
(14,142,1)
(93,95,1)
(96,152,1)
(87,88,1)
(48,163,1)
(30,107,1)
(22,43,1)
(81,66,1)
(112,57,1)
(151,132,1)
(147,40,1)
(133,88,1)
(124,23,1)
(106,131,1)
(36,157,1)
(85,104,1)
(124,59,1)
(101,98,1)
(41,7,1)
(37,136,1)
(142,55,1)
(154,153,1)
(131,97,1)
(109,76,1)
(72,105,1)
(15,92,1)
(89,30,1)
(123,32,1)
(43,62,1)
(46,75,1)
(105,87,1)
(139,53,1)
(104,10,1)
(74,55,1)
(111,21,1)
(135,165,1)
(59,55,1)
(72,87,1)
(56,80,1)
(145,78,1)
(5,15,1)
(76,2,1)
(83,49,1)
(31,38,1)
(63,7,1)
(91,27,1)
(112,51,1)
(139,53,2)
(135,165,2)
(91,100,2)
(107,69,2)
(98,54,2)
(80,38,2)
(2,69,2)
(55,69,2)
(147,69,2)
(157,64,2)
(96,69,2)
(87,88,2)
(83,114,2)
(20,69,2)
(82,135,2)
(85,104,2)
(83,69,2)
(148,69,2)
(92,69,2)
(102,38,2)
(111,54,2)
(140,29,2)
(131,21,2)
(75,69,2)
(39,69,2)
(38,55,2)
(142,38,2)
(114,69,2)
(50,84,2)
(66,38,2)
(49,69,2)
(63,69,2)
(12,69,2)
(17,88,2)
(109,76,2)
(103,38,2)
(153,69,2)
(100,70,2)
(133,69,2)
(56,38,2)
(86,35,2)
(123,32,2)
(21,152,2)
(65,54,2)
(106,54,2)
(109,69,2)
(73,69,2)
(146,69,2)
(137,38,2)
(47,69,2)
(32,21,2)
(142,55,2)
(88,161,2)
(72,69,2)
(127,69,2)
(47,36,2)
(149,69,2)
(23,69,2)
(155,69,2)
(140,83,2)
(12,155,2)
(146,82,2)
(100,69,2)
(116,69,2)
(14,38,2)
(78,69,2)
(158,38,2)
(112,69,2)
(154,88,2)
(139,119,2)
(161,47,2)
(151,69,2)
(30,69,2)
(70,69,2)
(70,49,2)
(94,54,2)
(66,86,2)
(118,69,2)
(165,25,2)
(165,69,2)
(5,69,2)
(108,54,2)
(95,54,2)
(116,112,2)
(114,73,2)
(38,69,2)
(99,69,2)
(23,21,2)
(90,69,2)
(119,69,2)
(161,67,2)
(59,38,2)
(9,154,2)
(48,54,2)
(58,69,2)
(91,69,2)
(49,139,2)
(137,68,2)
(97,54,2)
(50,17,2)
(74,69,2)
(155,18,2)
(41,69,2)
(61,69,2)
(42,91,2)
(22,38,2)
(24,69,2)
(139,69,2)
(108,131,2)
(84,17,2)
(125,69,2)
(122,69,2)
(36,69,2)
(89,69,2)
(52,54,2)
(21,54,2)
(104,75,2)
(101,54,2)
(77,33,2)
(93,21,2)
(117,54,2)
(54,152,2)
(113,69,2)
(85,75,2)
(128,69,2)
(9,69,2)
(14,142,2)
(123,54,2)
(54,69,2)
(17,69,2)
(105,69,2)
(46,69,2)
(161,69,2)
(68,55,2)
(37,69,2)
(77,54,2)
(87,69,2)
(45,38,2)
(71,54,2)
(135,69,2)
(163,54,2)
(75,49,2)
(4,69,2)
(82,69,2)
(7,49,2)
(41,7,2)
(83,49,2)
(28,38,2)
(143,69,2)
(112,57,2)
(55,146,2)
(144,69,2)
(43,38,2)
(88,69,2)
(81,38,2)
(3,69,2)
(82,88,2)
(152,140,2)
(59,55,2)
(152,69,2)
(145,69,2)
(131,54,2)
(15,69,2)
(19,69,2)
(91,27,2)
(73,79,2)
(76,49,2)
(126,38,2)
(86,14,2)
(140,69,2)
(16,69,2)
(61,88,2)
(156,38,2)
(68,38,2)
(13,54,2)
(72,87,2)
(31,38,2)
(154,69,2)
(42,69,2)
(33,130,2)
(36,157,2)
(141,38,2)
(93,54,2)
(138,17,2)
(112,51,2)
(136,69,2)
(51,69,2)
(132,69,2)
(48,93,2)
(33,123,2)
(157,69,2)
(119,12,2)
(10,75,2)
(34,54,2)
(51,61,2)
(156,126,2)
(0,69,2)
(86,38,2)
(23,49,2)
(40,69,2)
(32,54,2)
(146,110,2)
(62,38,2)
(126,55,2)
(7,69,2)
(76,69,2)
(33,54,2)
-----------------------------------
(0,0)
(1,)
(2,0)
(3,0)
(4,data[0].intOne = 0)
(5,data)
(6,)
(7,data[0])
(8,)
(9,data[0].intTwo)
(10,1)
(11,if (data == NULL)
(12,100*sizeof(struct _twoIntsStruct)
(13,data)
(14,&data[0])
(15,data[0].intTwo = 0)
(16,data)
(17,data == NULL)
(18,struct _twoIntsStruct)
(19,100)
(20,intTwo)
(21,data = tmpData)
(22,data)
(23,free(data)
(24,intOne)
(25,struct _twoIntsStruct)
(26,)
(27,twoIntsStruct *)
(28,0)
(29,struct _twoIntsStruct *)
(30,data)
(31,data)
(32,data[0])
(33,(twoIntsStruct *)
(34,data[0].intTwo = 1)
(35,twoIntsStruct *)
(36,100*sizeof(struct _twoIntsStruct)
(37,data[0].intTwo = 0)
(38,data != NULL)
(39,tmpData)
(40,data)
(41,data[0].intTwo)
(42,printStructLine((twoIntsStruct *)
(43,data[0].intOne = 1)
(44,)
(45,0)
(46,data)
(47,malloc(100*sizeof(struct _twoIntsStruct)
(48,data[0].intTwo)
(49,* data = (struct _twoIntsStruct *)
(50,exit(-1)
(51,&data[0])
(52,data)
(53,struct _twoIntsStruct *)
(54,tmpData != NULL)
(55,data = (struct _twoIntsStruct *)
(56,data)
(57,twoIntsStruct *)
(58,data)
(59,free(data)
(60,data)
(61,data[0])
(62,1)
(63,intTwo)
(64,struct _twoIntsStruct)
(65,0)
(66,printStructLine((twoIntsStruct *)
(67,struct _twoIntsStruct *)
(68,data[0])
(69,globalReturnsTrueOrFalse()
(70,data[0])
(71,1)
(72,data[0].intOne)
(73,sizeof(struct _twoIntsStruct)
(74,data)
(75,data == NULL)
(76,data[0])
(77,printStructLine((twoIntsStruct *)
(78,data)
(79,struct _twoIntsStruct)
(80,data[0].intTwo = 1)
(81,data)
(82,realloc(data, (130000)
(83,realloc(data, (130000)
(84,-1)
(85,exit(-1)
(86,(twoIntsStruct *)
(87,data[0])
(88,* data = (struct _twoIntsStruct *)
(89,130000)
(90,NULL)
(91,(twoIntsStruct *)
(92,0)
(93,data[0])
(94,tmpData)
(95,0)
(96,tmpData)
(97,0)
(98,1)
(99,100)
(100,&data[0])
(101,data[0].intOne = 1)
(102,0)
(103,1)
(104,-1)
(105,intOne)
(106,intOne)
(107,data)
(108,data[0].intOne)
(109,data[0].intOne)
(110,struct _twoIntsStruct *)
(111,data)
(112,(twoIntsStruct *)
(113,NULL)
(114,(130000)
(115,if(globalReturnsTrueOrFalse()
(116,printStructLine((twoIntsStruct *)
(117,data)
(118,data)
(119,malloc(100*sizeof(struct _twoIntsStruct)
(120,)
(121,if (data == NULL)
(122,NULL)
(123,&data[0])
(124,RET)
(125,data)
(126,data[0])
(127,0)
(128,0)
(129,)
(130,twoIntsStruct *)
(131,data[0])
(132,0)
(133,data)
(134,)
(135,(130000)
(136,0)
(137,data[0].intOne)
(138,1)
(139,(struct _twoIntsStruct *)
(140,(struct _twoIntsStruct *)
(141,intTwo)
(142,data[0])
(143,data)
(144,0)
(145,NULL)
(146,(struct _twoIntsStruct *)
(147,130000)
(148,data)
(149,data)
(150,if (data != NULL)
(151,data[0].intOne = 0)
(152,tmpData = (struct _twoIntsStruct *)
(153,0)
(154,data[0])
(155,sizeof(struct _twoIntsStruct)
(156,data[0].intTwo)
(157,sizeof(struct _twoIntsStruct)
(158,intOne)
(159,)
(160,tmpData)
(161,(struct _twoIntsStruct *)
(162,if (tmpData != NULL)
(163,intTwo)
(164,data)
(165,sizeof(struct _twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
