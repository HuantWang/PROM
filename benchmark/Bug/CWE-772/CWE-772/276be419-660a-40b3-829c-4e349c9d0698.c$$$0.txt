-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_17_bad()
{
    int i,j;
    char * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
39,40
39,41
39,42
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
76,77
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,44,45,47,51,54,56,60,62,67,68,71,72,75,77
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
49,50
49,51
65,66
65,67
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_17_bad(){    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_17_bad()
CWE401_Memory_Leak__strdup_char_17_bad
{    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(27,26,0)
(24,13,0)
(6,11,0)
(19,37,0)
(16,0,0)
(29,2,0)
(22,0,0)
(30,37,0)
(9,18,0)
(14,7,0)
(17,37,0)
(25,7,0)
(35,18,0)
(6,35,0)
(15,17,0)
(28,20,0)
(0,37,0)
(36,7,0)
(33,20,0)
(18,23,0)
(3,14,0)
(5,35,0)
(1,26,0)
(31,6,0)
(13,20,0)
(2,18,0)
(11,18,0)
(21,20,0)
(26,7,0)
(2,11,0)
(34,13,0)
(8,11,0)
(32,20,0)
(10,35,0)
(11,6,0)
(12,20,0)
(25,0,1)
(36,25,1)
(4,26,1)
(8,35,1)
(31,8,1)
(10,0,1)
(1,7,1)
(0,37,1)
(6,31,1)
(29,11,1)
(27,1,1)
(15,2,1)
(14,7,1)
(14,3,1)
(7,36,1)
(1,14,1)
(19,30,1)
(17,37,1)
(11,6,1)
(30,13,1)
(26,27,1)
(17,15,1)
(35,5,1)
(22,16,1)
(3,26,1)
(2,11,1)
(16,17,1)
(2,29,1)
(13,24,1)
(6,35,1)
(0,22,1)
(24,34,1)
(5,10,1)
(26,7,1)
(16,37,1)
(37,19,1)
(1,26,2)
(8,0,2)
(22,0,2)
(0,37,2)
(6,0,2)
(3,26,2)
(17,37,2)
(17,0,2)
(16,0,2)
(2,0,2)
(26,26,2)
(26,7,2)
(11,0,2)
(2,11,2)
(6,35,2)
(35,0,2)
(27,26,2)
(14,7,2)
(10,0,2)
(15,0,2)
(0,0,2)
(14,26,2)
(5,0,2)
(29,0,2)
(11,6,2)
(31,0,2)
-----------------------------------
(0,i < 1)
(1,j)
(2,printLine(data)
(3,j)
(4,RET)
(5,"myString")
(6,strdup(myString)
(7,j = 0)
(8,data)
(9,myString)
(10,myString)
(11,data = strdup(myString)
(12,j)
(13,data = NULL)
(14,j++)
(15,i)
(16,i)
(17,i++)
(18,)
(19,0)
(20,)
(21,for(j = 0; j < 1; j++)
(22,1)
(23,)
(24,NULL)
(25,j)
(26,j < 1)
(27,1)
(28,data)
(29,data)
(30,i)
(31,myString)
(32,for(i = 0; i < 1; i++)
(33,i)
(34,data)
(35,myString[] = "myString")
(36,0)
(37,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
