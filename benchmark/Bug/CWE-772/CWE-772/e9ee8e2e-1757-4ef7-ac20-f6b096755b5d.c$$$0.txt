-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_16_bad()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
65,66
65,67
67,68
67,69
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,54,56,57,61,63,64,66,68,69
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_16_bad(){    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__wchar_t_calloc_16_bad()
CWE401_Memory_Leak__wchar_t_calloc_16_bad
{    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(8,22,0)
(14,4,0)
(29,0,0)
(14,2,0)
(16,26,0)
(7,5,0)
(23,26,0)
(6,8,0)
(22,8,0)
(24,8,0)
(27,5,0)
(20,18,0)
(18,26,0)
(22,10,0)
(3,18,0)
(21,6,0)
(1,17,0)
(32,0,0)
(12,10,0)
(29,6,0)
(28,2,0)
(19,22,0)
(5,6,0)
(2,14,0)
(10,22,0)
(30,26,0)
(8,24,0)
(11,29,0)
(31,0,0)
(6,0,0)
(8,6,0)
(13,32,1)
(5,27,1)
(8,24,1)
(12,19,1)
(9,18,1)
(10,12,1)
(15,13,1)
(14,2,1)
(19,21,1)
(15,1,1)
(8,22,1)
(32,29,1)
(13,9,1)
(18,20,1)
(29,6,1)
(27,7,1)
(21,9,1)
(2,28,1)
(1,13,1)
(6,8,1)
(28,5,1)
(11,5,1)
(20,3,1)
(22,10,1)
(29,11,1)
(7,6,1)
(5,6,1)
(11,14,1)
(11,9,2)
(10,9,2)
(14,2,2)
(2,5,2)
(12,9,2)
(14,5,2)
(29,9,2)
(7,9,2)
(5,6,2)
(6,8,2)
(5,9,2)
(22,10,2)
(1,13,2)
(19,9,2)
(29,6,2)
(21,9,2)
(27,9,2)
(6,9,2)
(8,24,2)
(22,9,2)
(28,5,2)
(8,9,2)
(32,9,2)
(8,22,2)
-----------------------------------
(0,)
(1,break;)
(2,-1)
(3,data)
(4,)
(5,data == NULL)
(6,data = (wchar_t *)
(7,data)
(8,(wchar_t *)
(9,1)
(10,sizeof(wchar_t)
(11,data)
(12,wchar_t)
(13,1)
(14,exit(-1)
(15,RET)
(16,while(1)
(17,)
(18,data = NULL)
(19,100)
(20,NULL)
(21,data)
(22,calloc(100, sizeof(wchar_t)
(23,data)
(24,wchar_t *)
(25, sizeof(wchar_t)
(26,)
(27,NULL)
(28,1)
(29,printWLine(data)
(30,while(1)
(31,if (data == NULL)
(32,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
