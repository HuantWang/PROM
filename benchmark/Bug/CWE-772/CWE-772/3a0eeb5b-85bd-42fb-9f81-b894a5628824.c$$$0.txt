-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize then use data */
        wcscpy(data, L"a string");
        printWLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
47,49
47,50
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
62,63
63,64
63,65
66,67
67,68
67,69
67,70
68,69
70,71
73,74
74,75
74,76
75,76
77,78
79,80
79,81
79,82
80,81
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,31,35,38,40,44,46,51,54,56,59,61,64,65,69,71,72,76,78,82,84,89,91
-----computeFrom-----
13,14
13,15
33,34
33,35
49,50
49,51
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
void
CWE401_Memory_Leak__strdup_wchar_t_12_bad()
CWE401_Memory_Leak__strdup_wchar_t_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(10,18,0)
(5,20,0)
(30,20,0)
(11,21,0)
(3,23,0)
(21,28,0)
(0,18,0)
(27,23,0)
(3,2,0)
(26,4,0)
(29,3,0)
(8,26,0)
(12,9,0)
(14,1,0)
(23,20,0)
(22,6,0)
(20,5,0)
(23,28,0)
(5,1,0)
(13,32,0)
(18,26,0)
(18,6,0)
(33,32,0)
(3,18,0)
(7,15,0)
(17,9,0)
(16,10,0)
(1,5,0)
(24,9,0)
(15,1,0)
(20,30,0)
(6,18,0)
(20,23,0)
(32,9,0)
(1,15,0)
(21,23,0)
(10,26,0)
(7,14,1)
(19,25,1)
(21,23,1)
(25,21,1)
(20,5,1)
(10,18,1)
(31,32,1)
(27,31,1)
(20,30,1)
(11,23,1)
(14,27,1)
(19,3,1)
(3,29,1)
(18,6,1)
(25,10,1)
(29,25,1)
(3,23,1)
(32,13,1)
(21,11,1)
(8,31,1)
(13,33,1)
(15,7,1)
(16,18,1)
(10,16,1)
(3,18,1)
(0,8,1)
(22,0,1)
(23,20,1)
(1,15,1)
(5,1,1)
(6,22,1)
(8,31,2)
(6,31,2)
(5,1,2)
(27,31,2)
(20,31,2)
(20,30,2)
(5,31,2)
(23,20,2)
(18,6,2)
(15,31,2)
(10,31,2)
(10,18,2)
(16,31,2)
(7,31,2)
(29,25,2)
(23,31,2)
(3,25,2)
(0,31,2)
(11,31,2)
(21,23,2)
(14,31,2)
(20,5,2)
(22,31,2)
(3,18,2)
(21,31,2)
(3,23,2)
(1,31,2)
(18,31,2)
(1,15,2)
-----------------------------------
(0,data)
(1,100*sizeof(wchar_t)
(2,)
(3,free(data)
(4,)
(5,ALLOCA(100*sizeof(wchar_t)
(6,wcsdup(myString)
(7,wchar_t)
(8,"myString")
(9,)
(10,printWLine(data)
(11,data)
(12,if(globalReturnsTrueOrFalse()
(13,NULL)
(14,100)
(15,sizeof(wchar_t)
(16,data)
(17,data)
(18,data = wcsdup(myString)
(19,RET)
(20,(wchar_t *)
(21,printWLine(data)
(22,myString)
(23,data = (wchar_t *)
(24,if(globalReturnsTrueOrFalse()
(25,globalReturnsTrueOrFalse()
(26,)
(27,data)
(28,)
(29,data)
(30,wchar_t *)
(31,globalReturnsTrueOrFalse()
(32,data = NULL)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
