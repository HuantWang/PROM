-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,72,74
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_08_bad()
CWE401_Memory_Leak__char_realloc_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,25,0)
(10,25,0)
(2,28,0)
(32,2,0)
(20,29,0)
(31,28,0)
(2,31,0)
(10,31,0)
(6,17,0)
(25,23,0)
(29,31,0)
(7,31,0)
(18,23,0)
(14,17,0)
(16,33,0)
(3,22,0)
(33,28,0)
(6,25,0)
(30,12,0)
(1,4,0)
(8,6,0)
(27,12,0)
(25,6,0)
(26,28,0)
(15,2,0)
(33,31,0)
(11,10,0)
(25,10,0)
(22,1,0)
(31,10,0)
(23,12,0)
(1,22,0)
(9,23,0)
(24,12,0)
(19,29,0)
(10,11,0)
(17,6,0)
(21,13,1)
(22,3,1)
(25,23,1)
(32,1,1)
(10,25,1)
(29,31,1)
(1,22,1)
(17,14,1)
(16,2,1)
(2,31,1)
(33,31,1)
(33,16,1)
(31,10,1)
(23,9,1)
(6,17,1)
(25,6,1)
(19,31,1)
(9,18,1)
(13,23,1)
(2,15,1)
(15,32,1)
(29,20,1)
(8,0,1)
(3,29,1)
(14,8,1)
(0,7,1)
(21,33,1)
(10,11,1)
(32,29,1)
(5,21,1)
(20,19,1)
(7,13,1)
(3,29,2)
(1,29,2)
(17,13,2)
(1,22,2)
(10,11,2)
(6,17,2)
(10,25,2)
(19,13,2)
(0,13,2)
(6,13,2)
(16,13,2)
(2,31,2)
(20,13,2)
(33,31,2)
(14,13,2)
(31,13,2)
(32,13,2)
(15,13,2)
(2,13,2)
(7,13,2)
(25,13,2)
(8,13,2)
(25,6,2)
(25,23,2)
(29,31,2)
(10,13,2)
(29,13,2)
(33,13,2)
(22,29,2)
(31,10,2)
-----------------------------------
(0,data)
(1,exit(-1)
(2,strcpy(data, "A String")
(3,1)
(4,)
(5,RET)
(6,100*sizeof(char)
(7,data)
(8,100)
(9,NULL)
(10,(char *)
(11,char *)
(12,)
(13,staticReturnsTrue()
(14,char)
(15,"A String")
(16,data)
(17,sizeof(char)
(18,data)
(19,data)
(20,NULL)
(21,staticReturnsTrue()
(22,-1)
(23,data = NULL)
(24,if(staticReturnsTrue()
(25,realloc(data, 100*sizeof(char)
(26,if (data == NULL)
(27,data)
(28,)
(29,data == NULL)
(30,if(staticReturnsTrue()
(31,data = (char *)
(32,data)
(33,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
