-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_16_bad()
{
    twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
77,78
77,79
78,79
82,83
82,84
84,85
84,86
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,80,81,83,85,86
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_16_bad(){    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_16_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_16_bad
{    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(40,31,0)
(49,28,0)
(42,33,0)
(45,17,0)
(46,49,0)
(48,13,0)
(35,10,0)
(23,36,0)
(0,20,0)
(43,38,0)
(19,38,0)
(14,13,0)
(28,41,0)
(16,2,0)
(1,18,0)
(25,10,0)
(18,5,0)
(29,7,0)
(24,14,0)
(12,29,0)
(15,41,0)
(13,14,0)
(4,28,0)
(39,1,0)
(28,14,0)
(8,29,0)
(34,41,0)
(13,36,0)
(29,8,0)
(20,0,0)
(11,8,0)
(18,1,0)
(33,17,0)
(17,28,0)
(27,7,0)
(6,17,0)
(44,35,0)
(2,41,0)
(3,49,0)
(0,38,0)
(38,28,0)
(36,13,0)
(14,28,0)
(47,10,0)
(9,8,0)
(14,24,0)
(26,35,0)
(7,41,0)
(37,10,0)
(8,28,0)
(20,41,0)
(17,33,0)
(38,0,0)
(33,2,0)
(20,0,1)
(13,36,1)
(4,21,1)
(22,30,1)
(0,38,1)
(38,28,1)
(35,44,1)
(33,17,1)
(45,7,1)
(11,49,1)
(18,1,1)
(33,42,1)
(17,6,1)
(30,21,1)
(3,28,1)
(44,26,1)
(42,17,1)
(12,8,1)
(17,28,1)
(28,14,1)
(23,48,1)
(6,45,1)
(49,46,1)
(7,27,1)
(43,19,1)
(34,20,1)
(49,28,1)
(14,13,1)
(29,12,1)
(40,30,1)
(36,23,1)
(1,39,1)
(30,34,1)
(11,18,1)
(48,4,1)
(8,9,1)
(39,49,1)
(8,28,1)
(27,29,1)
(14,24,1)
(46,3,1)
(19,2,1)
(2,16,1)
(21,35,1)
(9,11,1)
(29,8,1)
(16,33,1)
(38,43,1)
(22,40,1)
(45,21,2)
(0,21,2)
(14,13,2)
(39,49,2)
(3,21,2)
(8,21,2)
(7,21,2)
(28,21,2)
(20,21,2)
(38,21,2)
(2,21,2)
(11,21,2)
(19,21,2)
(43,21,2)
(18,49,2)
(28,14,2)
(17,21,2)
(14,24,2)
(33,21,2)
(18,1,2)
(49,21,2)
(4,21,2)
(12,21,2)
(33,17,2)
(14,21,2)
(17,28,2)
(36,21,2)
(13,21,2)
(8,28,2)
(29,21,2)
(34,21,2)
(13,36,2)
(46,21,2)
(42,21,2)
(9,21,2)
(0,38,2)
(48,21,2)
(27,21,2)
(6,21,2)
(29,8,2)
(49,28,2)
(16,21,2)
(38,28,2)
(40,30,2)
(23,21,2)
(20,0,2)
(1,49,2)
-----------------------------------
(0,&data[0])
(1,-1)
(2,data[0].intTwo = 0)
(3,data)
(4,data)
(5,)
(6,0)
(7,data[0].intOne = 0)
(8,data[0])
(9,0)
(10,)
(11,data)
(12,intOne)
(13,calloc(100, sizeof(twoIntsStruct)
(14,(twoIntsStruct *)
(15,if (data == NULL)
(16,0)
(17,data[0])
(18,exit(-1)
(19,data)
(20,printStructLine(&data[0])
(21,1)
(22,RET)
(23,twoIntsStruct)
(24,twoIntsStruct *)
(25,data)
(26,data)
(27,0)
(28,data = (twoIntsStruct *)
(29,data[0].intOne)
(30,1)
(31,)
(32, sizeof(twoIntsStruct)
(33,data[0].intTwo)
(34,break;)
(35,data = NULL)
(36,sizeof(twoIntsStruct)
(37,while(1)
(38,data[0])
(39,1)
(40,break;)
(41,)
(42,intTwo)
(43,0)
(44,NULL)
(45,data)
(46,NULL)
(47,while(1)
(48,100)
(49,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
