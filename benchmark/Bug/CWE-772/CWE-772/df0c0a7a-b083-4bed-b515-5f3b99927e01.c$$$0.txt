-----label-----
1
-----code-----
static char * badSource(char * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)realloc(data, 100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,27,30,31,35,37,42,44,48,50,51,55,57,60
-----computeFrom-----
13,14
13,15
26,27
26,28
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
return data;
data
data
-----joern-----
(0,15,0)
(4,3,0)
(9,12,0)
(23,9,0)
(27,2,0)
(9,23,0)
(17,5,0)
(11,27,0)
(12,2,0)
(5,2,0)
(8,18,0)
(1,13,0)
(5,27,0)
(24,2,0)
(21,24,0)
(27,26,0)
(12,9,0)
(13,26,0)
(18,0,0)
(22,3,0)
(12,4,0)
(9,27,0)
(27,9,0)
(20,19,0)
(16,24,0)
(6,4,0)
(19,2,0)
(4,12,0)
(24,27,0)
(24,26,0)
(13,2,0)
(19,26,0)
(0,18,0)
(14,12,0)
(10,26,0)
(25,13,0)
(3,4,0)
(19,27,0)
(7,5,0)
(13,27,0)
(5,17,1)
(9,23,1)
(25,1,1)
(13,25,1)
(19,27,1)
(14,11,1)
(12,4,1)
(20,13,1)
(5,27,1)
(24,2,1)
(13,2,1)
(18,8,1)
(1,0,1)
(24,16,1)
(22,6,1)
(12,2,1)
(19,2,1)
(16,19,1)
(7,27,1)
(9,12,1)
(21,24,1)
(13,27,1)
(6,14,1)
(1,5,1)
(4,3,1)
(17,7,1)
(8,5,1)
(27,2,1)
(3,22,1)
(19,20,1)
(0,18,1)
(5,2,1)
(24,27,1)
(27,9,1)
(5,27,2)
(13,2,2)
(12,2,2)
(13,27,2)
(5,2,2)
(9,12,2)
(0,5,2)
(12,4,2)
(4,3,2)
(9,23,2)
(27,9,2)
(24,2,2)
(24,27,2)
(8,5,2)
(21,24,2)
(19,2,2)
(18,5,2)
(0,18,2)
(27,2,2)
(19,27,2)
-----------------------------------
(0,exit(-1)
(1,data)
(2,char * data)
(3,sizeof(char)
(4,100*sizeof(char)
(5,data == NULL)
(6,100)
(7,data)
(8,1)
(9,(char *)
(10,if (data == NULL)
(11,data)
(12,realloc(data, 100*sizeof(char)
(13,strcpy(data, "A String")
(14,data)
(15,)
(16,data)
(17,NULL)
(18,-1)
(19,printLine(data)
(20,data)
(21,RET)
(22,char)
(23,char *)
(24,return data;)
(25,"A String")
(26,)
(27,data = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
