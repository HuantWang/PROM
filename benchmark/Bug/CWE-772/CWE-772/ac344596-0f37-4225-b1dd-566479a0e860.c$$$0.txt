-----label-----
1
-----code-----
wchar_t * CWE401_Memory_Leak__wchar_t_calloc_61b_badSource(wchar_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)calloc(100, sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
25,26
26,27
26,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,24,27,28,32,34,39,41,45,47,48,52,54,57
-----computeFrom-----
13,14
13,15
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
wchar_t * CWE401_Memory_Leak__wchar_t_calloc_61b_badSource(wchar_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    return data;}
wchar_t
* CWE401_Memory_Leak__wchar_t_calloc_61b_badSource(wchar_t * data)
*
CWE401_Memory_Leak__wchar_t_calloc_61b_badSource
wchar_t * data
wchar_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    return data;}
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
return data;
data
data
-----joern-----
(2,18,0)
(13,11,0)
(20,21,0)
(14,11,0)
(23,13,0)
(1,19,0)
(7,15,0)
(13,19,0)
(6,19,0)
(1,11,0)
(14,15,0)
(12,5,0)
(21,20,0)
(5,9,0)
(9,22,0)
(21,2,0)
(2,21,0)
(9,5,0)
(14,19,0)
(18,2,0)
(19,15,0)
(3,2,0)
(19,21,0)
(8,14,0)
(1,15,0)
(21,19,0)
(10,18,0)
(0,14,0)
(4,13,0)
(16,1,0)
(19,11,0)
(1,19,1)
(23,4,1)
(19,21,1)
(5,12,1)
(16,13,1)
(21,2,1)
(13,23,1)
(1,16,1)
(2,18,1)
(1,11,1)
(19,11,1)
(8,1,1)
(18,10,1)
(4,19,1)
(16,9,1)
(14,11,1)
(21,20,1)
(3,6,1)
(12,13,1)
(13,19,1)
(0,14,1)
(9,5,1)
(13,11,1)
(14,8,1)
(14,19,1)
(10,3,1)
(1,11,2)
(21,2,2)
(19,21,2)
(0,14,2)
(9,13,2)
(1,19,2)
(13,11,2)
(19,11,2)
(14,11,2)
(9,5,2)
(21,20,2)
(14,19,2)
(13,19,2)
(5,13,2)
(2,18,2)
(12,13,2)
-----------------------------------
(0,RET)
(1,printWLine(data)
(2,calloc(100, sizeof(wchar_t)
(3,100)
(4,data)
(5,-1)
(6,data)
(7,if (data == NULL)
(8,data)
(9,exit(-1)
(10,wchar_t)
(11,wchar_t * data)
(12,1)
(13,data == NULL)
(14,return data;)
(15,)
(16,data)
(17, sizeof(wchar_t)
(18,sizeof(wchar_t)
(19,data = (wchar_t *)
(20,wchar_t *)
(21,(wchar_t *)
(22,)
(23,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
