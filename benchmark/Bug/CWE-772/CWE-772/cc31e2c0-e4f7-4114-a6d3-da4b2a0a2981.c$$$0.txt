-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_11_bad()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
73,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,74,76
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_11_bad(){    int64_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_11_bad()
CWE401_Memory_Leak__int64_t_calloc_11_bad
{    int64_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,10,0)
(9,6,0)
(1,31,0)
(16,23,0)
(31,1,0)
(6,11,0)
(27,24,0)
(7,10,0)
(1,28,0)
(12,10,0)
(28,1,0)
(20,9,0)
(21,32,0)
(14,2,0)
(15,9,0)
(24,21,0)
(29,31,0)
(25,11,0)
(15,11,0)
(4,9,0)
(6,1,0)
(1,6,0)
(21,24,0)
(9,15,0)
(31,29,0)
(30,11,0)
(3,29,0)
(26,23,0)
(19,31,0)
(8,6,0)
(2,6,0)
(0,2,0)
(23,10,0)
(1,28,1)
(9,20,1)
(14,6,1)
(17,5,1)
(4,25,1)
(0,14,1)
(20,4,1)
(15,9,1)
(3,19,1)
(8,5,1)
(5,23,1)
(24,27,1)
(31,29,1)
(6,1,1)
(16,26,1)
(17,15,1)
(13,17,1)
(1,31,1)
(19,8,1)
(25,21,1)
(27,2,1)
(23,16,1)
(9,6,1)
(25,2,1)
(29,3,1)
(2,6,1)
(21,24,1)
(2,0,1)
(24,2,2)
(6,5,2)
(4,5,2)
(2,6,2)
(9,6,2)
(14,5,2)
(27,2,2)
(3,5,2)
(15,5,2)
(9,5,2)
(1,31,2)
(19,5,2)
(21,2,2)
(1,5,2)
(31,5,2)
(0,5,2)
(29,5,2)
(25,5,2)
(21,24,2)
(8,5,2)
(20,5,2)
(6,1,2)
(2,5,2)
(15,9,2)
(31,29,2)
(1,28,2)
-----------------------------------
(0,NULL)
(1,(int64_t *)
(2,data == NULL)
(3,int64_t)
(4,data)
(5,globalReturnsTrue()
(6,data = (int64_t *)
(7,if(globalReturnsTrue()
(8,data)
(9,data[0])
(10,)
(11,)
(12,if(globalReturnsTrue()
(13,RET)
(14,data)
(15,printLongLongLine(data[0])
(16,NULL)
(17,globalReturnsTrue()
(18, sizeof(int64_t)
(19,100)
(20,0)
(21,exit(-1)
(22,data)
(23,data = NULL)
(24,-1)
(25,L)
(26,data)
(27,1)
(28,int64_t *)
(29,sizeof(int64_t)
(30,if (data == NULL)
(31,calloc(100, sizeof(int64_t)
(32,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
