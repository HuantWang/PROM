-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_07_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,97
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_07_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_07_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_07_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(50,26,0)
(33,45,0)
(11,49,0)
(4,11,0)
(4,46,0)
(1,33,0)
(33,1,0)
(44,5,0)
(27,5,0)
(2,7,0)
(51,12,0)
(2,16,0)
(13,3,0)
(7,2,0)
(6,30,0)
(43,16,0)
(49,24,0)
(1,6,0)
(36,30,0)
(19,5,0)
(42,7,0)
(47,3,0)
(41,35,0)
(20,18,0)
(51,9,0)
(26,45,0)
(9,51,0)
(7,45,0)
(28,27,0)
(32,27,0)
(52,0,0)
(10,35,0)
(15,7,0)
(8,30,0)
(35,45,0)
(48,5,0)
(36,52,0)
(0,52,0)
(21,1,0)
(37,46,0)
(31,45,0)
(46,4,0)
(40,4,0)
(45,49,0)
(17,26,0)
(29,6,0)
(26,17,0)
(52,36,0)
(25,26,0)
(22,33,0)
(52,17,0)
(39,9,0)
(23,2,0)
(14,18,0)
(17,52,0)
(45,30,0)
(49,45,0)
(49,11,0)
(46,37,0)
(24,49,0)
(11,4,0)
(16,30,0)
(34,33,0)
(35,10,1)
(27,32,1)
(1,21,1)
(33,22,1)
(45,49,1)
(7,45,1)
(47,13,1)
(49,24,1)
(2,23,1)
(42,15,1)
(38,3,1)
(18,14,1)
(23,7,1)
(43,2,1)
(49,11,1)
(15,6,1)
(50,25,1)
(40,31,1)
(21,33,1)
(26,45,1)
(3,47,1)
(16,43,1)
(29,1,1)
(52,0,1)
(22,34,1)
(9,39,1)
(17,26,1)
(52,17,1)
(10,41,1)
(51,9,1)
(25,16,1)
(13,36,1)
(6,29,1)
(41,45,1)
(36,52,1)
(13,18,1)
(34,35,1)
(31,18,1)
(46,37,1)
(14,20,1)
(7,42,1)
(32,28,1)
(33,45,1)
(1,33,1)
(39,35,1)
(4,46,1)
(11,4,1)
(34,51,1)
(20,27,1)
(2,7,1)
(35,45,1)
(26,50,1)
(46,40,1)
(33,18,2)
(51,35,2)
(21,18,2)
(43,18,2)
(45,18,2)
(42,18,2)
(52,17,2)
(35,45,2)
(36,52,2)
(23,18,2)
(4,18,2)
(16,18,2)
(4,46,2)
(36,18,2)
(46,37,2)
(26,18,2)
(9,35,2)
(33,45,2)
(52,18,2)
(40,18,2)
(51,9,2)
(34,18,2)
(29,18,2)
(2,18,2)
(11,18,2)
(39,35,2)
(17,26,2)
(49,24,2)
(7,18,2)
(17,18,2)
(26,45,2)
(15,18,2)
(49,18,2)
(7,45,2)
(46,18,2)
(1,18,2)
(6,18,2)
(1,33,2)
(10,18,2)
(50,18,2)
(22,18,2)
(35,18,2)
(31,18,2)
(49,11,2)
(11,4,2)
(25,18,2)
(41,18,2)
(52,0,2)
(45,49,2)
(2,7,2)
-----------------------------------
(0,twoIntsStruct *)
(1,data[0].intOne)
(2,data[0].intTwo)
(3,staticFive==5)
(4,100*sizeof(struct _twoIntsStruct)
(5,)
(6,data[0].intOne = 0)
(7,data[0])
(8,if (data == NULL)
(9,-1)
(10,NULL)
(11,malloc(100*sizeof(struct _twoIntsStruct)
(12,)
(13,staticFive)
(14,5)
(15,data)
(16,data[0].intTwo = 0)
(17,&data[0])
(18,staticFive==5)
(19,if(staticFive==5)
(20,staticFive)
(21,intOne)
(22,0)
(23,intTwo)
(24,struct _twoIntsStruct *)
(25,data)
(26,data[0])
(27,data = NULL)
(28,data)
(29,0)
(30,)
(31,data)
(32,NULL)
(33,data[0])
(34,data)
(35,data == NULL)
(36,printStructLine((twoIntsStruct *)
(37,struct _twoIntsStruct)
(38,RET)
(39,1)
(40,100)
(41,data)
(42,0)
(43,0)
(44,data)
(45,data = (struct _twoIntsStruct *)
(46,sizeof(struct _twoIntsStruct)
(47,5)
(48,if(staticFive==5)
(49,(struct _twoIntsStruct *)
(50,0)
(51,exit(-1)
(52,(twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
