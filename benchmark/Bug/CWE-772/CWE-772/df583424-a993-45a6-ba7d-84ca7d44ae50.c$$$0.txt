-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_09_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,90,92
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_09_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_09_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_09_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,2,0)
(2,9,0)
(36,41,0)
(43,37,0)
(33,2,0)
(7,10,0)
(17,44,0)
(42,24,0)
(46,42,0)
(46,44,0)
(45,18,0)
(39,23,0)
(47,15,0)
(5,9,0)
(32,34,0)
(19,37,0)
(21,14,0)
(2,4,0)
(18,24,0)
(6,13,0)
(4,41,0)
(43,32,0)
(25,14,0)
(4,2,0)
(41,44,0)
(37,43,0)
(15,9,0)
(18,9,0)
(42,29,0)
(24,42,0)
(22,43,0)
(9,37,0)
(23,15,0)
(1,13,0)
(26,48,0)
(20,13,0)
(12,10,0)
(42,46,0)
(23,30,0)
(3,15,0)
(8,4,0)
(24,18,0)
(11,27,0)
(37,19,0)
(10,9,0)
(37,9,0)
(48,11,0)
(34,32,0)
(15,23,0)
(9,44,0)
(11,48,0)
(31,18,0)
(14,13,0)
(32,43,0)
(16,30,0)
(30,44,0)
(29,42,0)
(39,15,1)
(10,9,1)
(35,38,1)
(37,19,1)
(46,42,1)
(32,22,1)
(22,5,1)
(5,40,1)
(33,0,1)
(15,9,1)
(43,32,1)
(47,10,1)
(18,9,1)
(38,40,1)
(23,15,1)
(8,2,1)
(32,34,1)
(42,24,1)
(21,25,1)
(40,14,1)
(36,4,1)
(38,46,1)
(47,11,1)
(45,31,1)
(23,39,1)
(0,30,1)
(24,18,1)
(30,16,1)
(48,26,1)
(10,7,1)
(12,9,1)
(15,3,1)
(14,21,1)
(16,23,1)
(31,41,1)
(3,47,1)
(2,33,1)
(2,9,1)
(26,10,1)
(4,2,1)
(37,43,1)
(42,29,1)
(18,45,1)
(11,48,1)
(7,12,1)
(4,8,1)
(41,36,1)
(9,37,1)
(43,40,2)
(10,9,2)
(37,40,2)
(5,40,2)
(4,2,2)
(4,40,2)
(42,29,2)
(23,15,2)
(37,43,2)
(32,34,2)
(10,40,2)
(18,40,2)
(23,40,2)
(41,40,2)
(15,9,2)
(12,40,2)
(32,40,2)
(18,9,2)
(31,40,2)
(39,40,2)
(48,10,2)
(22,40,2)
(11,48,2)
(24,18,2)
(3,40,2)
(9,40,2)
(7,40,2)
(8,40,2)
(2,9,2)
(30,40,2)
(45,40,2)
(11,10,2)
(15,40,2)
(46,40,2)
(9,37,2)
(37,19,2)
(2,40,2)
(36,40,2)
(16,40,2)
(46,42,2)
(47,40,2)
(24,40,2)
(43,32,2)
(33,40,2)
(42,40,2)
(42,24,2)
(0,40,2)
(26,10,2)
-----------------------------------
(0,data)
(1,if(GLOBAL_CONST_TRUE)
(2,data[0])
(3,0)
(4,data[0].intTwo)
(5,data)
(6,data)
(7,NULL)
(8,intTwo)
(9,data = (struct _twoIntsStruct *)
(10,data == NULL)
(11,exit(-1)
(12,data)
(13,)
(14,data = NULL)
(15,data[0])
(16,0)
(17,if (data == NULL)
(18,data[0])
(19,struct _twoIntsStruct *)
(20,if(GLOBAL_CONST_TRUE)
(21,NULL)
(22,100)
(23,data[0].intOne)
(24,&data[0])
(25,data)
(26,1)
(27,)
(28, sizeof(struct _twoIntsStruct)
(29,twoIntsStruct *)
(30,data[0].intOne = 0)
(31,data)
(32,sizeof(struct _twoIntsStruct)
(33,0)
(34,struct _twoIntsStruct)
(35,RET)
(36,0)
(37,(struct _twoIntsStruct *)
(38,GLOBAL_CONST_TRUE)
(39,intOne)
(40,GLOBAL_CONST_TRUE)
(41,data[0].intTwo = 0)
(42,(twoIntsStruct *)
(43,calloc(100, sizeof(struct _twoIntsStruct)
(44,)
(45,0)
(46,printStructLine((twoIntsStruct *)
(47,data)
(48,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
