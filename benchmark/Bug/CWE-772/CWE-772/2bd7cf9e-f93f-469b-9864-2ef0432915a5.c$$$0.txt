-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_09_bad()
{
    if(GLOBAL_CONST_TRUE)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_09_bad(){    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_09_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_09_bad
{    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
if(GLOBAL_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(32,4,0)
(17,16,0)
(26,31,0)
(44,4,0)
(39,40,0)
(25,9,0)
(23,25,0)
(14,28,0)
(16,9,0)
(1,33,0)
(33,19,0)
(19,4,0)
(21,25,0)
(6,4,0)
(13,6,0)
(31,26,0)
(5,18,0)
(31,19,0)
(16,17,0)
(29,2,0)
(4,34,0)
(12,9,0)
(11,27,0)
(20,24,0)
(38,30,0)
(33,37,0)
(33,16,0)
(40,9,0)
(37,18,0)
(40,3,0)
(28,43,0)
(22,27,0)
(37,33,0)
(24,3,0)
(19,31,0)
(9,4,0)
(6,19,0)
(41,8,0)
(2,27,0)
(43,28,0)
(15,37,0)
(0,4,0)
(16,33,0)
(24,9,0)
(7,8,0)
(31,22,0)
(22,31,0)
(27,2,0)
(18,37,0)
(9,16,0)
(36,19,0)
(8,19,0)
(27,22,0)
(43,10,0)
(16,33,1)
(8,19,1)
(40,9,1)
(31,22,1)
(40,39,1)
(6,19,1)
(27,2,1)
(36,42,1)
(11,36,1)
(2,29,1)
(19,31,1)
(35,25,1)
(28,14,1)
(7,41,1)
(35,40,1)
(25,21,1)
(9,16,1)
(23,9,1)
(24,9,1)
(35,42,1)
(25,9,1)
(29,11,1)
(20,25,1)
(1,12,1)
(33,19,1)
(16,17,1)
(37,18,1)
(5,15,1)
(41,19,1)
(21,23,1)
(18,5,1)
(33,37,1)
(12,6,1)
(13,43,1)
(43,28,1)
(13,8,1)
(22,27,1)
(8,7,1)
(24,20,1)
(15,1,1)
(14,8,1)
(6,13,1)
(39,24,1)
(31,26,1)
(43,8,2)
(9,16,2)
(37,42,2)
(25,42,2)
(11,42,2)
(19,31,2)
(21,42,2)
(19,42,2)
(33,42,2)
(2,42,2)
(8,42,2)
(28,8,2)
(7,42,2)
(24,25,2)
(31,22,2)
(29,42,2)
(25,9,2)
(22,27,2)
(39,25,2)
(33,19,2)
(36,42,2)
(37,18,2)
(6,42,2)
(31,26,2)
(41,42,2)
(16,33,2)
(27,42,2)
(1,42,2)
(22,42,2)
(5,42,2)
(16,42,2)
(18,42,2)
(43,28,2)
(12,42,2)
(33,37,2)
(40,9,2)
(9,42,2)
(16,17,2)
(20,25,2)
(8,19,2)
(23,42,2)
(6,19,2)
(24,9,2)
(27,2,2)
(31,42,2)
(13,42,2)
(15,42,2)
(40,25,2)
(14,8,2)
-----------------------------------
(0,if (data == NULL)
(1,data)
(2,sizeof(wchar_t)
(3,)
(4,)
(5,wchar_t)
(6,printWLine(data)
(7,NULL)
(8,data == NULL)
(9,data = (wchar_t *)
(10,)
(11,100)
(12,data)
(13,data)
(14,1)
(15,130000)
(16,(wchar_t *)
(17,wchar_t *)
(18,sizeof(wchar_t)
(19,* data = (wchar_t *)
(20,data)
(21,NULL)
(22,malloc(100*sizeof(wchar_t)
(23,data)
(24,printWLine(data)
(25,data != NULL)
(26,wchar_t *)
(27,100*sizeof(wchar_t)
(28,-1)
(29,wchar_t)
(30,)
(31,(wchar_t *)
(32,data)
(33,realloc(data, (130000)
(34,)
(35,RET)
(36,data)
(37,(130000)
(38,if(GLOBAL_CONST_TRUE)
(39,data)
(40,free(data)
(41,data)
(42,GLOBAL_CONST_TRUE)
(43,exit(-1)
(44,if (data != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
