-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_14_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,97
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_14_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_14_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_14_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(35,18,0)
(37,50,0)
(10,19,0)
(29,12,0)
(2,35,0)
(6,3,0)
(15,49,0)
(23,38,0)
(12,29,0)
(10,46,0)
(46,10,0)
(38,45,0)
(49,50,0)
(10,21,0)
(31,51,0)
(44,48,0)
(16,46,0)
(39,51,0)
(26,33,0)
(49,44,0)
(27,34,0)
(4,44,0)
(12,18,0)
(20,49,0)
(7,48,0)
(47,43,0)
(42,43,0)
(50,34,0)
(46,16,0)
(8,48,0)
(40,44,0)
(24,16,0)
(19,10,0)
(0,11,0)
(18,35,0)
(35,2,0)
(18,12,0)
(41,17,0)
(17,8,0)
(34,48,0)
(28,35,0)
(36,3,0)
(11,44,0)
(50,49,0)
(12,44,0)
(16,44,0)
(13,33,0)
(21,10,0)
(40,17,0)
(19,48,0)
(44,12,0)
(14,16,0)
(25,40,0)
(30,40,0)
(9,23,0)
(38,23,0)
(52,8,0)
(17,40,0)
(2,5,0)
(32,33,0)
(1,11,0)
(5,2,0)
(43,33,0)
(19,10,1)
(4,3,1)
(34,27,1)
(16,24,1)
(17,41,1)
(46,16,1)
(24,14,1)
(10,21,1)
(12,18,1)
(40,44,1)
(41,40,1)
(35,2,1)
(20,38,1)
(31,19,1)
(16,44,1)
(10,46,1)
(0,44,1)
(44,12,1)
(37,49,1)
(49,44,1)
(1,0,1)
(11,1,1)
(50,37,1)
(36,6,1)
(51,39,1)
(6,43,1)
(47,42,1)
(43,47,1)
(3,36,1)
(28,4,1)
(22,51,1)
(30,25,1)
(50,49,1)
(12,29,1)
(38,23,1)
(17,40,1)
(39,31,1)
(23,9,1)
(15,20,1)
(52,17,1)
(8,52,1)
(2,28,1)
(25,34,1)
(14,8,1)
(31,3,1)
(27,50,1)
(49,15,1)
(20,11,1)
(40,30,1)
(2,5,1)
(11,44,1)
(9,11,1)
(18,35,1)
(49,44,2)
(10,21,2)
(38,23,2)
(34,3,2)
(44,12,2)
(17,40,2)
(46,16,2)
(46,3,2)
(18,3,2)
(52,3,2)
(4,3,2)
(0,3,2)
(14,3,2)
(20,3,2)
(12,3,2)
(35,3,2)
(19,10,2)
(50,49,2)
(8,3,2)
(38,11,2)
(2,3,2)
(11,44,2)
(40,44,2)
(10,46,2)
(50,3,2)
(16,3,2)
(24,3,2)
(37,3,2)
(28,3,2)
(41,3,2)
(12,18,2)
(18,35,2)
(25,3,2)
(40,3,2)
(1,3,2)
(17,3,2)
(16,44,2)
(11,3,2)
(35,2,2)
(10,3,2)
(23,11,2)
(44,3,2)
(49,3,2)
(9,11,2)
(19,3,2)
(2,5,2)
(15,3,2)
(30,3,2)
(27,3,2)
(12,29,2)
-----------------------------------
(0,data)
(1,NULL)
(2,sizeof(struct _twoIntsStruct)
(3,globalFive==5)
(4,data)
(5,struct _twoIntsStruct)
(6,globalFive)
(7,if (data == NULL)
(8,data[0].intTwo = 0)
(9,1)
(10,(twoIntsStruct *)
(11,data == NULL)
(12,(struct _twoIntsStruct *)
(13,if(globalFive==5)
(14,data)
(15,0)
(16,data[0])
(17,data[0].intTwo)
(18,malloc(100*sizeof(struct _twoIntsStruct)
(19,printStructLine((twoIntsStruct *)
(20,data)
(21,twoIntsStruct *)
(22,RET)
(23,-1)
(24,0)
(25,data)
(26,if(globalFive==5)
(27,0)
(28,100)
(29,struct _twoIntsStruct *)
(30,0)
(31,globalFive)
(32,data)
(33,)
(34,data[0].intOne = 0)
(35,100*sizeof(struct _twoIntsStruct)
(36,5)
(37,intOne)
(38,exit(-1)
(39,5)
(40,data[0])
(41,intTwo)
(42,data)
(43,data = NULL)
(44,data = (struct _twoIntsStruct *)
(45,)
(46,&data[0])
(47,NULL)
(48,)
(49,data[0])
(50,data[0].intOne)
(51,globalFive==5)
(52,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
