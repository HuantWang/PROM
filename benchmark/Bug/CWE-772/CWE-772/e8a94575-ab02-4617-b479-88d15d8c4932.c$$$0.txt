-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_06_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,88,89,91
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_06_bad(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_06_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_06_bad
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(41,24,0)
(48,6,0)
(11,4,0)
(27,36,0)
(32,17,0)
(19,35,0)
(21,1,0)
(2,35,0)
(36,48,0)
(45,24,0)
(28,16,0)
(29,39,0)
(38,7,0)
(14,7,0)
(8,17,0)
(18,15,0)
(10,34,0)
(40,19,0)
(39,17,0)
(33,28,0)
(19,40,0)
(30,50,0)
(7,14,0)
(13,27,0)
(3,7,0)
(43,1,0)
(49,35,0)
(47,14,0)
(42,33,0)
(5,34,0)
(35,48,0)
(27,46,0)
(36,27,0)
(12,17,0)
(9,39,0)
(30,41,0)
(0,6,0)
(24,48,0)
(14,15,0)
(50,30,0)
(46,6,0)
(26,50,0)
(28,33,0)
(35,19,0)
(44,48,0)
(20,4,0)
(24,41,0)
(41,30,0)
(25,46,0)
(24,45,0)
(7,48,0)
(40,6,0)
(31,30,0)
(48,24,0)
(34,48,0)
(22,36,0)
(23,36,0)
(15,6,0)
(3,38,1)
(13,36,1)
(14,7,1)
(30,50,1)
(26,31,1)
(37,4,1)
(15,18,1)
(7,3,1)
(19,35,1)
(34,48,1)
(44,1,1)
(50,26,1)
(27,13,1)
(1,21,1)
(14,47,1)
(21,43,1)
(38,34,1)
(36,23,1)
(28,33,1)
(35,2,1)
(39,29,1)
(49,46,1)
(2,49,1)
(23,22,1)
(42,34,1)
(33,42,1)
(5,10,1)
(25,27,1)
(18,14,1)
(31,44,1)
(4,20,1)
(7,48,1)
(11,40,1)
(22,15,1)
(38,28,1)
(29,9,1)
(47,7,1)
(41,30,1)
(48,24,1)
(43,39,1)
(10,48,1)
(20,11,1)
(40,19,1)
(24,41,1)
(24,45,1)
(35,48,1)
(36,48,1)
(34,5,1)
(46,25,1)
(11,1,1)
(27,36,1)
(44,1,2)
(33,34,2)
(31,1,2)
(48,24,2)
(24,1,2)
(24,41,2)
(46,1,2)
(35,48,2)
(26,1,2)
(34,48,2)
(15,1,2)
(34,1,2)
(48,1,2)
(7,1,2)
(30,50,2)
(50,1,2)
(25,1,2)
(14,1,2)
(19,1,2)
(47,1,2)
(7,48,2)
(27,1,2)
(18,1,2)
(35,1,2)
(49,1,2)
(41,30,2)
(40,19,2)
(40,1,2)
(41,1,2)
(2,1,2)
(27,36,2)
(14,7,2)
(19,35,2)
(28,34,2)
(30,1,2)
(13,1,2)
(38,1,2)
(24,45,2)
(22,1,2)
(23,1,2)
(3,1,2)
(5,1,2)
(28,33,2)
(10,1,2)
(36,1,2)
(36,48,2)
(42,34,2)
-----------------------------------
(0,if (data == NULL)
(1,STATIC_CONST_FIVE==5)
(2,0)
(3,0)
(4,STATIC_CONST_FIVE==5)
(5,NULL)
(6,)
(7,data[0])
(8,data)
(9,data)
(10,data)
(11,STATIC_CONST_FIVE)
(12,if(STATIC_CONST_FIVE==5)
(13,intTwo)
(14,data[0].intOne)
(15,data[0].intOne = 0)
(16,)
(17,)
(18,0)
(19,&data[0])
(20,5)
(21,5)
(22,data)
(23,0)
(24,(twoIntsStruct *)
(25,0)
(26,twoIntsStruct)
(27,data[0].intTwo)
(28,exit(-1)
(29,NULL)
(30,100*sizeof(twoIntsStruct)
(31,100)
(32,if(STATIC_CONST_FIVE==5)
(33,-1)
(34,data == NULL)
(35,data[0])
(36,data[0])
(37,RET)
(38,data)
(39,data = NULL)
(40,printStructLine(&data[0])
(41,malloc(100*sizeof(twoIntsStruct)
(42,1)
(43,STATIC_CONST_FIVE)
(44,data)
(45,twoIntsStruct *)
(46,data[0].intTwo = 0)
(47,intOne)
(48,data = (twoIntsStruct *)
(49,data)
(50,sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
