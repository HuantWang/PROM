-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_11_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
85,86
86,87
88,89
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,87,89
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_11_bad(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_11_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_11_bad
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,15,0)
(9,16,0)
(3,38,0)
(7,31,0)
(44,29,0)
(20,8,0)
(38,30,0)
(36,19,0)
(29,36,0)
(3,43,0)
(43,3,0)
(7,15,0)
(7,34,0)
(19,30,0)
(37,40,0)
(24,40,0)
(6,10,0)
(29,15,0)
(31,10,0)
(10,31,0)
(10,2,0)
(21,30,0)
(14,36,0)
(25,18,0)
(16,8,0)
(46,40,0)
(4,30,0)
(34,7,0)
(36,29,0)
(39,29,0)
(41,40,0)
(0,41,0)
(13,21,0)
(26,19,0)
(43,15,0)
(8,16,0)
(15,7,0)
(5,43,0)
(2,10,0)
(15,30,0)
(18,25,0)
(11,2,0)
(38,3,0)
(28,17,0)
(27,43,0)
(18,35,0)
(33,8,0)
(23,15,0)
(8,15,0)
(31,7,0)
(16,21,0)
(22,41,0)
(1,25,0)
(32,17,0)
(14,29,1)
(3,43,1)
(18,25,1)
(44,39,1)
(29,15,1)
(16,8,1)
(33,19,1)
(41,22,1)
(8,15,1)
(20,33,1)
(45,41,1)
(17,32,1)
(25,1,1)
(39,17,1)
(7,34,1)
(19,26,1)
(5,27,1)
(22,0,1)
(11,6,1)
(38,3,1)
(2,11,1)
(26,36,1)
(27,21,1)
(29,44,1)
(6,23,1)
(15,7,1)
(1,17,1)
(31,10,1)
(17,15,1)
(36,14,1)
(10,2,1)
(28,15,1)
(8,20,1)
(16,9,1)
(12,38,1)
(36,29,1)
(7,31,1)
(32,28,1)
(43,5,1)
(43,15,1)
(39,18,1)
(13,16,1)
(12,45,1)
(21,13,1)
(9,8,1)
(42,12,1)
(23,45,1)
(26,45,2)
(18,25,2)
(29,15,2)
(15,45,2)
(3,43,2)
(3,45,2)
(43,15,2)
(15,7,2)
(31,10,2)
(43,45,2)
(16,8,2)
(29,45,2)
(7,45,2)
(39,45,2)
(36,45,2)
(25,17,2)
(7,31,2)
(9,45,2)
(2,45,2)
(44,45,2)
(14,45,2)
(11,45,2)
(38,45,2)
(1,17,2)
(21,45,2)
(32,45,2)
(10,2,2)
(8,15,2)
(31,45,2)
(27,45,2)
(8,45,2)
(7,34,2)
(17,15,2)
(19,45,2)
(38,3,2)
(10,45,2)
(16,45,2)
(28,45,2)
(23,45,2)
(20,45,2)
(6,45,2)
(17,45,2)
(33,45,2)
(36,29,2)
(13,45,2)
(5,45,2)
(18,17,2)
-----------------------------------
(0,data)
(1,1)
(2,sizeof(twoIntsStruct)
(3,&data[0])
(4,if (data == NULL)
(5,0)
(6,100)
(7,(twoIntsStruct *)
(8,data[0])
(9,intTwo)
(10,100*sizeof(twoIntsStruct)
(11,twoIntsStruct)
(12,globalReturnsTrue()
(13,0)
(14,intOne)
(15,data = (twoIntsStruct *)
(16,data[0].intTwo)
(17,data == NULL)
(18,exit(-1)
(19,data[0].intOne = 0)
(20,0)
(21,data[0].intTwo = 0)
(22,NULL)
(23,data)
(24,data)
(25,-1)
(26,0)
(27,data)
(28,data)
(29,data[0])
(30,)
(31,malloc(100*sizeof(twoIntsStruct)
(32,NULL)
(33,data)
(34,twoIntsStruct *)
(35,)
(36,data[0].intOne)
(37,if(globalReturnsTrue()
(38,printStructLine(&data[0])
(39,data)
(40,)
(41,data = NULL)
(42,RET)
(43,data[0])
(44,0)
(45,globalReturnsTrue()
(46,if(globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
