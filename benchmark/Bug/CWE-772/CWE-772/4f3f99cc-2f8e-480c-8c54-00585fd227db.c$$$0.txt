-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_calloc_14_bad()
{
    int64_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
35,38
36,37
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,38,42,43,47,49,54,56,61,62,63,67,70,71,75,76,78
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_calloc_14_bad(){    int64_t * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int64_t_calloc_14_bad()
CWE401_Memory_Leak__int64_t_calloc_14_bad
{    int64_t * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(18,28,0)
(30,25,0)
(28,18,0)
(34,5,0)
(2,10,0)
(9,3,0)
(32,4,0)
(29,25,0)
(22,14,0)
(28,29,0)
(26,13,0)
(3,9,0)
(5,36,0)
(9,28,0)
(30,33,0)
(7,13,0)
(5,34,0)
(29,28,0)
(24,19,0)
(28,9,0)
(14,29,0)
(15,33,0)
(33,29,0)
(1,4,0)
(19,4,0)
(6,34,0)
(20,25,0)
(0,14,0)
(17,3,0)
(21,4,0)
(27,33,0)
(12,9,0)
(33,30,0)
(31,29,0)
(11,25,0)
(35,19,0)
(8,10,0)
(12,31,1)
(3,17,1)
(33,29,1)
(2,13,1)
(30,33,1)
(0,29,1)
(13,7,1)
(8,2,1)
(33,27,1)
(16,10,1)
(22,0,1)
(35,24,1)
(28,9,1)
(2,30,1)
(5,34,1)
(29,28,1)
(6,14,1)
(15,11,1)
(17,12,1)
(31,13,1)
(7,26,1)
(27,15,1)
(14,22,1)
(26,19,1)
(19,35,1)
(9,3,1)
(28,18,1)
(11,5,1)
(10,8,1)
(34,6,1)
(14,29,1)
(11,14,1)
(5,14,2)
(29,28,2)
(33,29,2)
(5,34,2)
(14,13,2)
(3,13,2)
(31,13,2)
(30,13,2)
(28,13,2)
(9,13,2)
(28,18,2)
(22,13,2)
(27,13,2)
(9,3,2)
(34,14,2)
(30,33,2)
(11,13,2)
(12,13,2)
(0,13,2)
(15,13,2)
(33,13,2)
(28,9,2)
(17,13,2)
(14,29,2)
(6,14,2)
(29,13,2)
-----------------------------------
(0,data)
(1,if(globalFive==5)
(2,globalFive)
(3,sizeof(int64_t)
(4,)
(5,exit(-1)
(6,1)
(7,5)
(8,5)
(9,calloc(100, sizeof(int64_t)
(10,globalFive==5)
(11,L)
(12,100)
(13,globalFive==5)
(14,data == NULL)
(15,data)
(16,RET)
(17,int64_t)
(18,int64_t *)
(19,data = NULL)
(20,if (data == NULL)
(21,if(globalFive==5)
(22,NULL)
(23, sizeof(int64_t)
(24,data)
(25,)
(26,globalFive)
(27,0)
(28,(int64_t *)
(29,data = (int64_t *)
(30,printLongLongLine(data[0])
(31,data)
(32,data)
(33,data[0])
(34,-1)
(35,NULL)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
