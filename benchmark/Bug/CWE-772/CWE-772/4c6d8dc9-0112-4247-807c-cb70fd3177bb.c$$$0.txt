-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_02_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
84,85
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,83,85
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_02_bad(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_02_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_02_bad
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,14,0)
(46,18,0)
(36,40,0)
(34,28,0)
(1,15,0)
(40,38,0)
(38,40,0)
(16,13,0)
(31,10,0)
(1,41,0)
(26,0,0)
(32,18,0)
(14,22,0)
(45,16,0)
(20,1,0)
(23,25,0)
(9,32,0)
(8,15,0)
(18,38,0)
(15,13,0)
(42,41,0)
(30,45,0)
(5,29,0)
(7,30,0)
(30,18,0)
(0,18,0)
(14,0,0)
(22,13,0)
(21,32,0)
(39,36,0)
(2,0,0)
(45,30,0)
(3,16,0)
(27,29,0)
(10,31,0)
(11,45,0)
(40,36,0)
(38,18,0)
(41,18,0)
(41,1,0)
(36,25,0)
(43,28,0)
(29,28,0)
(0,14,0)
(19,30,0)
(10,24,0)
(4,41,0)
(6,31,0)
(25,36,0)
(18,13,0)
(38,44,0)
(17,13,0)
(44,38,0)
(12,28,0)
(7,10,1)
(46,35,1)
(39,46,1)
(3,45,1)
(21,9,1)
(45,30,1)
(22,14,1)
(30,18,1)
(6,32,1)
(4,42,1)
(1,20,1)
(1,41,1)
(38,40,1)
(29,5,1)
(5,27,1)
(41,18,1)
(11,30,1)
(7,32,1)
(36,25,1)
(10,31,1)
(18,38,1)
(37,33,1)
(35,29,1)
(14,0,1)
(16,3,1)
(32,18,1)
(42,16,1)
(15,8,1)
(2,15,1)
(31,6,1)
(30,19,1)
(26,2,1)
(19,7,1)
(40,36,1)
(32,21,1)
(38,44,1)
(41,4,1)
(9,18,1)
(23,39,1)
(20,41,1)
(45,11,1)
(33,35,1)
(8,1,1)
(33,22,1)
(25,23,1)
(0,26,1)
(0,18,1)
(38,40,2)
(10,31,2)
(32,35,2)
(11,35,2)
(45,35,2)
(8,35,2)
(0,35,2)
(32,18,2)
(22,14,2)
(40,36,2)
(4,35,2)
(1,35,2)
(16,35,2)
(15,35,2)
(7,35,2)
(40,35,2)
(14,0,2)
(2,35,2)
(19,35,2)
(36,25,2)
(26,35,2)
(18,35,2)
(10,32,2)
(6,32,2)
(39,35,2)
(45,30,2)
(41,35,2)
(41,18,2)
(3,35,2)
(9,35,2)
(23,35,2)
(30,18,2)
(20,35,2)
(38,35,2)
(14,35,2)
(18,38,2)
(0,18,2)
(25,35,2)
(38,44,2)
(22,35,2)
(42,35,2)
(30,35,2)
(1,41,2)
(21,35,2)
(46,35,2)
(36,35,2)
(31,32,2)
-----------------------------------
(0,data[0])
(1,data[0].intTwo)
(2,data)
(3,0)
(4,0)
(5,NULL)
(6,1)
(7,data)
(8,0)
(9,data)
(10,exit(-1)
(11,intOne)
(12,if(1)
(13,)
(14,&data[0])
(15,data[0].intTwo = 0)
(16,data[0].intOne = 0)
(17,if (data == NULL)
(18,data = (twoIntsStruct *)
(19,0)
(20,intTwo)
(21,NULL)
(22,printStructLine(&data[0])
(23,twoIntsStruct)
(24,)
(25,sizeof(twoIntsStruct)
(26,0)
(27,data)
(28,)
(29,data = NULL)
(30,data[0])
(31,-1)
(32,data == NULL)
(33,1)
(34,if(1)
(35,1)
(36,100*sizeof(twoIntsStruct)
(37,RET)
(38,(twoIntsStruct *)
(39,100)
(40,malloc(100*sizeof(twoIntsStruct)
(41,data[0])
(42,data)
(43,data)
(44,twoIntsStruct *)
(45,data[0].intOne)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
