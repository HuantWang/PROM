-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_execlp_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        char * data = *dataPtr1;
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* execlp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
94,97
94,98
95,96
97,98
97,99
98,99
100,101
102,103
104,105
104,106
105,106
105,107
107,108
110,111
111,112
111,113
112,113
113,114
115,116
117,118
117,119
118,119
119,120
119,121
121,122
121,123
121,124
124,125
125,126
126,127
128,129
129,130
129,131
129,132
129,133
129,134
129,135
130,131
132,133
134,135
136,137
138,139
140,141
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,76,78,79,83,85,89,91,96,99,101,103,106,108,109,114,116,120,122,123,127,131,133,135,137,139,141
-----computeFrom-----
45,46
45,47
87,88
87,89
97,98
97,99
104,105
104,106
105,106
105,107
111,112
111,113
-----guardedBy-----
89,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_execlp_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* execlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
void
CWE78_OS_Command_Injection__char_environment_execlp_32_bad()
CWE78_OS_Command_Injection__char_environment_execlp_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* execlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* execlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECLP
EXECLP
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(59,51,0)
(36,62,0)
(3,40,0)
(33,49,0)
(3,60,0)
(13,30,0)
(35,66,0)
(1,9,0)
(6,28,0)
(27,28,0)
(66,62,0)
(5,9,0)
(22,1,0)
(12,26,0)
(58,29,0)
(53,60,0)
(54,6,0)
(55,3,0)
(38,66,0)
(56,63,0)
(23,51,0)
(41,4,0)
(29,28,0)
(44,30,0)
(47,1,0)
(1,49,0)
(64,34,0)
(56,40,0)
(20,21,0)
(64,21,0)
(9,49,0)
(10,40,0)
(34,62,0)
(59,16,0)
(34,64,0)
(16,59,0)
(6,54,0)
(60,3,0)
(57,54,0)
(67,16,0)
(26,4,0)
(24,49,0)
(54,56,0)
(28,29,0)
(19,64,0)
(29,59,0)
(4,26,0)
(0,6,0)
(31,11,0)
(65,54,0)
(21,49,0)
(28,2,0)
(18,66,0)
(16,26,0)
(28,6,0)
(8,9,0)
(23,59,0)
(62,49,0)
(43,66,0)
(28,3,0)
(30,3,0)
(7,40,0)
(15,29,0)
(61,63,0)
(17,26,0)
(46,49,0)
(21,11,0)
(50,40,0)
(52,51,0)
(39,34,0)
(12,23,0)
(37,49,0)
(26,49,0)
(63,56,0)
(48,56,0)
(45,66,0)
(32,59,0)
(25,23,0)
(42,12,0)
(29,56,0)
(51,49,0)
(11,21,0)
(40,51,0)
(63,59,0)
(29,15,1)
(54,65,1)
(21,11,1)
(28,3,1)
(14,66,1)
(23,25,1)
(55,56,1)
(25,12,1)
(63,59,1)
(28,6,1)
(30,13,1)
(1,47,1)
(19,39,1)
(58,30,1)
(8,5,1)
(30,3,1)
(15,58,1)
(12,26,1)
(18,45,1)
(61,48,1)
(26,4,1)
(65,57,1)
(16,26,1)
(67,32,1)
(64,21,1)
(47,22,1)
(32,1,1)
(4,41,1)
(56,63,1)
(59,16,1)
(43,18,1)
(64,19,1)
(28,29,1)
(44,3,1)
(35,34,1)
(16,67,1)
(3,60,1)
(60,53,1)
(23,59,1)
(48,59,1)
(41,17,1)
(53,55,1)
(39,23,1)
(63,61,1)
(27,29,1)
(45,35,1)
(54,56,1)
(57,0,1)
(66,38,1)
(11,31,1)
(22,9,1)
(31,20,1)
(29,56,1)
(34,64,1)
(12,42,1)
(29,59,1)
(42,30,1)
(20,26,1)
(6,54,1)
(0,27,1)
(1,9,1)
(5,21,1)
(9,8,1)
(13,44,1)
(38,43,1)
(42,28,1)
(28,29,2)
(34,64,2)
(28,3,2)
(56,63,2)
(1,9,2)
(26,4,2)
(54,56,2)
(3,60,2)
(29,30,2)
(64,21,2)
(0,30,2)
(6,30,2)
(16,26,2)
(59,16,2)
(12,26,2)
(28,30,2)
(23,59,2)
(57,30,2)
(28,6,2)
(21,11,2)
(65,30,2)
(58,30,2)
(63,59,2)
(29,56,2)
(54,30,2)
(29,59,2)
(30,3,2)
(15,30,2)
(6,54,2)
(27,30,2)
-----------------------------------
(0,100)
(1,data = dataBuffer)
(2,)
(3,* environment = GETENV(ENV_VARIABLE)
(4,&data)
(5,dataBuffer)
(6,100-dataLen-1)
(7,dataLen)
(8,COMMAND_ARG2)
(9,dataBuffer[100] = COMMAND_ARG2)
(10,environment)
(11,&data)
(12,*dataPtr1)
(13,NULL)
(14,RET)
(15,dataLen)
(16,*dataPtr1)
(17,dataPtr1)
(18,COMMAND_ARG1)
(19,dataPtr2)
(20,dataPtr2)
(21,* *dataPtr2 = &data)
(22,data)
(23,*dataPtr1 = data)
(24,dataPtr2)
(25,data)
(26,* *dataPtr1 = &data)
(27,environment)
(28,strncat(data+dataLen, environment, 100-dataLen-1)
(29,data+dataLen)
(30,environment != NULL)
(31,data)
(32,data)
(33,dataPtr1)
(34,* data = *dataPtr2)
(35,COMMAND_INT)
(36,data)
(37,dataBuffer)
(38,NULL)
(39,data)
(40,)
(41,data)
(42,dataPtr1)
(43,COMMAND_ARG3)
(44,environment)
(45,COMMAND_INT)
(46,data)
(47,dataBuffer)
(48,dataLen)
(49,)
(50,if (environment != NULL)
(51,)
(52,data)
(53,ENV_VARIABLE)
(54,dataLen-1)
(55,environment)
(56,dataLen = strlen(data)
(57,dataLen)
(58,data)
(59,* data = *dataPtr1)
(60,GETENV(ENV_VARIABLE)
(61,data)
(62,)
(63,strlen(data)
(64,*dataPtr2)
(65,1)
(66,EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(67,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
