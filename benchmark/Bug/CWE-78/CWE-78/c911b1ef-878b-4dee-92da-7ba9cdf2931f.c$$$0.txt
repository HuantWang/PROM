-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_popen_13_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
54,56
55,56
55,57
56,57
56,58
58,59
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
80,81
80,82
81,82
81,83
81,84
81,85
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
93,94
94,95
94,96
96,97
98,99
100,101
102,103
102,104
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
116,117
117,118
117,119
118,119
120,121
122,123
122,124
122,125
123,124
124,125
124,126
125,126
127,128
127,129
130,131
131,132
131,133
132,133
134,135
134,136
134,137
135,136
137,138
140,141
140,142
141,142
141,143
142,143
144,145
146,147
147,148
148,149
148,150
149,150
151,152
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,38,40,44,46,50,52,53,57,59,60,65,68,70,71,75,77,83,86,88,91,92,95,97,99,101,106,107,112,114,115,119,121,126,128,129,133,136,138,139,143,145,150,152
-----computeFrom-----
23,24
23,25
29,30
29,31
55,56
55,57
56,57
56,58
63,64
63,65
73,74
73,75
80,81
80,82
84,85
84,86
94,95
94,96
109,110
109,111
131,132
131,133
141,142
141,143
-----guardedBy-----
59,114
77,101
75,121
86,112
97,114
143,152
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_popen_13_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(GLOBAL_CONST_FIVE==5)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__char_file_popen_13_bad()
CWE78_OS_Command_Injection__char_file_popen_13_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(GLOBAL_CONST_FIVE==5)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(GLOBAL_CONST_FIVE==5)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(28,66,0)
(39,14,0)
(70,20,0)
(64,0,0)
(35,53,0)
(53,14,0)
(56,62,0)
(50,72,0)
(60,50,0)
(75,27,0)
(20,72,0)
(9,39,0)
(29,48,0)
(9,22,0)
(59,30,0)
(7,74,0)
(50,4,0)
(74,27,0)
(35,9,0)
(5,43,0)
(10,11,0)
(6,66,0)
(31,18,0)
(62,14,0)
(19,38,0)
(24,14,0)
(58,27,0)
(57,62,0)
(45,0,0)
(53,43,0)
(54,53,0)
(35,72,0)
(21,48,0)
(42,53,0)
(23,12,0)
(49,65,0)
(23,66,0)
(36,4,0)
(44,0,0)
(25,35,0)
(62,43,0)
(43,27,0)
(51,5,0)
(68,15,0)
(72,11,0)
(39,9,0)
(0,32,0)
(2,37,0)
(22,9,0)
(63,20,0)
(35,25,0)
(18,13,0)
(14,5,0)
(72,15,0)
(61,23,0)
(8,72,0)
(26,28,0)
(71,18,0)
(66,30,0)
(53,35,0)
(41,15,0)
(34,74,0)
(55,25,0)
(43,48,0)
(47,35,0)
(62,38,0)
(38,16,0)
(30,66,0)
(1,43,0)
(67,27,0)
(3,39,0)
(18,14,0)
(9,35,0)
(40,13,0)
(13,18,0)
(69,43,0)
(66,74,0)
(5,14,0)
(15,72,0)
(17,39,0)
(48,27,0)
(73,30,0)
(46,65,0)
(37,16,0)
(14,0,0)
(30,43,0)
(33,28,0)
(47,9,1)
(6,20,1)
(48,29,1)
(63,70,1)
(66,30,1)
(9,39,1)
(60,38,1)
(72,15,1)
(18,14,1)
(61,28,1)
(53,43,1)
(52,28,1)
(65,46,1)
(2,25,1)
(60,25,1)
(30,73,1)
(62,14,1)
(24,65,1)
(9,22,1)
(62,43,1)
(26,66,1)
(49,43,1)
(13,18,1)
(1,69,1)
(46,49,1)
(20,72,1)
(57,56,1)
(43,48,1)
(25,35,1)
(55,35,1)
(51,24,1)
(39,17,1)
(17,3,1)
(31,71,1)
(52,23,1)
(30,43,1)
(50,72,1)
(29,21,1)
(35,47,1)
(53,14,1)
(53,42,1)
(41,68,1)
(62,57,1)
(35,72,1)
(6,13,1)
(28,33,1)
(5,43,1)
(50,60,1)
(28,66,1)
(15,41,1)
(69,48,1)
(37,2,1)
(71,14,1)
(8,13,1)
(59,6,1)
(39,14,1)
(6,65,1)
(14,5,1)
(13,40,1)
(35,9,1)
(6,50,1)
(23,61,1)
(23,66,1)
(56,37,1)
(54,20,1)
(38,19,1)
(42,54,1)
(18,31,1)
(35,53,1)
(3,53,1)
(68,8,1)
(40,18,1)
(70,72,1)
(33,26,1)
(19,62,1)
(25,55,1)
(43,1,1)
(20,63,1)
(5,51,1)
(73,59,1)
(9,22,2)
(15,13,2)
(53,14,2)
(23,28,2)
(19,25,2)
(23,66,2)
(13,65,2)
(31,65,2)
(43,48,2)
(50,20,2)
(53,43,2)
(14,5,2)
(53,20,2)
(40,65,2)
(20,13,2)
(61,28,2)
(20,72,2)
(62,25,2)
(57,25,2)
(71,65,2)
(5,65,2)
(66,30,2)
(25,35,2)
(56,25,2)
(41,13,2)
(39,14,2)
(62,14,2)
(37,25,2)
(42,20,2)
(51,65,2)
(70,13,2)
(30,43,2)
(47,20,2)
(68,13,2)
(5,43,2)
(35,9,2)
(18,65,2)
(8,13,2)
(25,20,2)
(72,15,2)
(35,53,2)
(3,20,2)
(63,13,2)
(13,18,2)
(17,20,2)
(24,65,2)
(18,14,2)
(9,20,2)
(14,65,2)
(39,20,2)
(35,20,2)
(38,25,2)
(28,66,2)
(9,39,2)
(54,20,2)
(72,13,2)
(60,20,2)
(62,43,2)
(50,72,2)
(55,20,2)
(2,25,2)
(35,72,2)
-----------------------------------
(0,)
(1,data_buf)
(2,"fgets()
(3,100)
(4,)
(5,strlen(data)
(6,pipe)
(7,if (pipe != NULL)
(8,pFile)
(9,(int)
(10,if (pFile != NULL)
(11,)
(12,)
(13,100-dataLen > 1)
(14,dataLen = strlen(data)
(15,fopen(FILENAME, "r")
(16,)
(17,dataLen)
(18,100-dataLen)
(19,\\\'\\\\0\\\')
(20,pFile != NULL)
(21,data_buf)
(22,int)
(23,PCLOSE(pipe)
(24,dataLen)
(25,fgets(data+dataLen, (int)
(26,pipe)
(27,)
(28,pipe != NULL)
(29,FULL_COMMAND)
(30,POPEN(data, "w")
(31,dataLen)
(32,)
(33,NULL)
(34,pipe)
(35,fgets(data+dataLen, (int)
(36,if (fgets(data+dataLen, (int)
(37,printLine("fgets()
(38,data[dataLen] = \\\'\\\\0\\\')
(39,100-dataLen)
(40,1)
(41,"r")
(42,dataLen)
(43,data = data_buf)
(44,dataLen)
(45,if (100-dataLen > 1)
(46,5)
(47,pFile)
(48,data_buf[100] = FULL_COMMAND)
(49,GLOBAL_CONST_FIVE)
(50,fclose(pFile)
(51,data)
(52,RET)
(53,data+dataLen)
(54,data)
(55,NULL)
(56,data)
(57,dataLen)
(58,if(GLOBAL_CONST_FIVE==5)
(59,data)
(60,pFile)
(61,pipe)
(62,data[dataLen])
(63,NULL)
(64,pFile)
(65,GLOBAL_CONST_FIVE==5)
(66,pipe = POPEN(data, "w")
(67,data_buf)
(68,FILENAME)
(69,data)
(70,pFile)
(71,100)
(72,pFile = fopen(FILENAME, "r")
(73,"w")
(74,)
(75,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
