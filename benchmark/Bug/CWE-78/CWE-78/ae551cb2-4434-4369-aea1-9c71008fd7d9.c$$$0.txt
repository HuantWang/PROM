-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_14_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalFive==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
49,50
49,51
51,52
54,55
55,56
55,57
55,58
56,57
56,58
57,58
57,59
57,60
57,61
58,59
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
70,71
70,72
72,73
74,75
76,77
78,79
78,80
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
114,116
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
122,124
123,124
125,126
128,129
128,130
128,131
129,130
130,131
130,132
131,132
133,134
133,135
136,137
137,138
137,139
138,139
140,141
140,142
140,143
141,142
143,144
146,147
146,148
147,148
147,149
148,149
150,151
152,153
153,154
154,155
154,156
155,156
157,158
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,38,40,44,46,50,52,53,59,62,64,67,68,71,73,75,77,82,85,87,92,93,97,100,101,102,108,111,112,113,118,119,124,126,127,132,134,135,139,142,144,145,149,151,156,158
-----computeFrom-----
23,24
23,25
29,30
29,31
48,49
48,50
49,50
49,51
56,57
56,58
60,61
60,62
70,71
70,72
80,81
80,82
89,90
89,91
90,91
90,92
94,95
94,96
98,99
98,100
105,106
105,107
109,110
109,111
121,122
121,123
137,138
137,139
147,148
147,149
-----guardedBy-----
52,126
62,108
73,111
97,108
100,111
149,158
-----guardedByNegation-----
62,124
73,126
-----lastLexicalUse-----
62,124
73,126
-----jump-----
62,124
73,126
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_14_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__char_console_popen_14_bad()
CWE78_OS_Command_Injection__char_console_popen_14_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(52,36,0)
(69,35,0)
(46,61,0)
(43,22,0)
(20,36,0)
(26,12,0)
(19,86,0)
(1,61,0)
(57,72,0)
(11,59,0)
(87,73,0)
(2,27,0)
(17,72,0)
(84,74,0)
(31,24,0)
(4,30,0)
(56,9,0)
(36,86,0)
(9,0,0)
(33,62,0)
(30,47,0)
(24,31,0)
(38,27,0)
(76,77,0)
(57,51,0)
(74,47,0)
(80,86,0)
(45,2,0)
(72,41,0)
(74,2,0)
(40,27,0)
(73,19,0)
(85,7,0)
(86,19,0)
(28,9,0)
(22,75,0)
(29,41,0)
(13,30,0)
(65,24,0)
(21,41,0)
(30,50,0)
(71,14,0)
(48,34,0)
(2,74,0)
(60,65,0)
(15,27,0)
(27,1,0)
(16,62,0)
(75,5,0)
(82,44,0)
(70,50,0)
(23,38,0)
(53,61,0)
(6,0,0)
(63,34,0)
(39,12,0)
(66,27,0)
(27,61,0)
(81,44,0)
(86,80,0)
(50,65,0)
(9,22,0)
(62,72,0)
(25,31,0)
(32,1,0)
(68,1,0)
(78,74,0)
(49,47,0)
(58,31,0)
(38,19,0)
(37,61,0)
(50,27,0)
(40,47,0)
(9,27,0)
(64,40,0)
(62,27,0)
(54,38,0)
(39,22,0)
(41,61,0)
(19,73,0)
(10,75,0)
(77,22,0)
(86,36,0)
(67,57,0)
(2,69,0)
(22,77,0)
(31,47,0)
(12,39,0)
(38,22,0)
(0,8,0)
(18,39,0)
(65,50,0)
(72,62,0)
(77,27,0)
(44,72,0)
(19,38,0)
(55,39,0)
(24,65,0)
(79,69,0)
(83,75,0)
(47,59,0)
(42,19,0)
(7,8,0)
(50,30,0)
(47,40,0)
(36,22,0)
(26,39,1)
(50,30,1)
(72,62,1)
(6,9,1)
(78,45,1)
(60,50,1)
(7,85,1)
(38,27,1)
(43,34,1)
(2,74,1)
(73,87,1)
(12,26,1)
(62,27,1)
(1,32,1)
(24,31,1)
(40,27,1)
(22,77,1)
(38,22,1)
(17,24,1)
(42,86,1)
(12,39,1)
(55,22,1)
(77,27,1)
(17,0,1)
(32,68,1)
(86,80,1)
(28,7,1)
(3,44,1)
(4,13,1)
(45,24,1)
(44,81,1)
(36,20,1)
(49,73,1)
(57,72,1)
(17,69,1)
(76,43,1)
(62,16,1)
(39,18,1)
(84,78,1)
(81,82,1)
(82,72,1)
(13,70,1)
(63,27,1)
(31,47,1)
(38,23,1)
(34,48,1)
(27,15,1)
(65,50,1)
(20,52,1)
(30,4,1)
(9,27,1)
(56,28,1)
(19,86,1)
(86,36,1)
(16,33,1)
(85,73,1)
(64,49,1)
(30,47,1)
(23,54,1)
(19,38,1)
(40,64,1)
(31,25,1)
(65,60,1)
(58,47,1)
(0,6,1)
(44,72,1)
(69,79,1)
(57,67,1)
(47,40,1)
(27,1,1)
(66,1,1)
(17,34,1)
(18,55,1)
(74,47,1)
(19,42,1)
(9,22,1)
(3,57,1)
(33,17,1)
(87,19,1)
(9,56,1)
(67,44,1)
(24,65,1)
(52,38,1)
(15,66,1)
(2,27,1)
(73,19,1)
(74,84,1)
(48,63,1)
(25,58,1)
(79,2,1)
(17,12,1)
(36,22,1)
(39,22,1)
(77,76,1)
(50,27,1)
(70,31,1)
(54,12,1)
(50,30,2)
(9,73,2)
(9,27,2)
(31,47,2)
(67,44,2)
(0,73,2)
(49,73,2)
(9,22,2)
(24,73,2)
(52,12,2)
(38,27,2)
(24,31,2)
(58,73,2)
(4,31,2)
(50,31,2)
(20,12,2)
(87,12,2)
(77,34,2)
(76,34,2)
(78,24,2)
(69,24,2)
(2,74,2)
(40,73,2)
(79,24,2)
(27,1,2)
(13,31,2)
(70,31,2)
(30,31,2)
(12,39,2)
(55,34,2)
(19,38,2)
(31,73,2)
(30,47,2)
(42,12,2)
(45,24,2)
(73,12,2)
(23,12,2)
(19,12,2)
(57,72,2)
(62,27,2)
(57,44,2)
(36,12,2)
(25,73,2)
(7,73,2)
(22,77,2)
(77,27,2)
(40,27,2)
(85,73,2)
(74,47,2)
(2,24,2)
(74,24,2)
(47,40,2)
(65,50,2)
(12,34,2)
(44,72,2)
(28,73,2)
(86,36,2)
(86,80,2)
(2,27,2)
(65,31,2)
(26,34,2)
(86,12,2)
(56,73,2)
(60,31,2)
(73,19,2)
(19,86,2)
(84,24,2)
(24,65,2)
(72,62,2)
(39,22,2)
(47,73,2)
(22,34,2)
(36,22,2)
(39,34,2)
(54,12,2)
(38,22,2)
(50,27,2)
(38,12,2)
(18,34,2)
(64,73,2)
(43,34,2)
(6,73,2)
-----------------------------------
(0,data[dataLen] = \\\'\\\\0\\\')
(1,data_buf[100] = FULL_COMMAND)
(2,data[dataLen-1])
(3,RET)
(4,1)
(5,)
(6,\\\'\\\\0\\\')
(7,printLine("fgets()
(8,)
(9,data[dataLen])
(10,if (100-dataLen > 1)
(11,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,100-dataLen > 1)
(13,dataLen)
(14,)
(15,data_buf)
(16,"w")
(17,pipe)
(18,dataLen)
(19,fgets(data+dataLen, (int)
(20,dataLen)
(21,pipe)
(22,dataLen = strlen(data)
(23,dataLen)
(24,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(25,0)
(26,1)
(27,data = data_buf)
(28,data)
(29,if (pipe != NULL)
(30,dataLen-1)
(31,dataLen > 0)
(32,FULL_COMMAND)
(33,data)
(34,globalFive==5)
(35,)
(36,100-dataLen)
(37,data_buf)
(38,data+dataLen)
(39,100-dataLen)
(40,strlen(data)
(41,)
(42,stdin)
(43,dataLen)
(44,pipe != NULL)
(45,data)
(46,data)
(47,dataLen = strlen(data)
(48,5)
(49,dataLen)
(50,data[dataLen-1])
(51,)
(52,100)
(53,if(globalFive==5)
(54,data)
(55,100)
(56,dataLen)
(57,PCLOSE(pipe)
(58,dataLen)
(59,)
(60,\\\'\\\\n\\\')
(61,)
(62,POPEN(data, "w")
(63,globalFive)
(64,data)
(65,data[dataLen-1] == \\\'\\\\n\\\')
(66,data)
(67,pipe)
(68,data_buf)
(69,data[dataLen-1] = \\\'\\\\0\\\')
(70,data)
(71,if (fgets(data+dataLen, (int)
(72,pipe = POPEN(data, "w")
(73,fgets(data+dataLen, (int)
(74,dataLen-1)
(75,)
(76,data)
(77,strlen(data)
(78,dataLen)
(79,\\\'\\\\0\\\')
(80,int)
(81,NULL)
(82,pipe)
(83,dataLen)
(84,1)
(85,"fgets()
(86,(int)
(87,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
