-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_execl_63_bad()
CWE78_OS_Command_Injection__char_console_execl_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_execl_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_execl_63b_badSink
CWE78_OS_Command_Injection__char_console_execl_63b_badSink
&data
data
data
-----joern-----
(5,10,0)
(27,3,0)
(57,35,0)
(23,59,0)
(11,5,0)
(38,2,0)
(69,70,0)
(45,27,0)
(48,60,0)
(2,5,0)
(26,14,0)
(16,42,0)
(33,53,0)
(3,65,0)
(65,12,0)
(71,5,0)
(53,32,0)
(46,58,0)
(70,5,0)
(68,40,0)
(59,53,0)
(1,32,0)
(47,58,0)
(11,42,0)
(31,45,0)
(43,11,0)
(49,36,0)
(40,5,0)
(31,60,0)
(62,5,0)
(40,24,0)
(18,31,0)
(4,65,0)
(64,9,0)
(71,57,0)
(59,23,0)
(58,47,0)
(53,59,0)
(12,65,0)
(38,65,0)
(39,2,0)
(45,31,0)
(55,10,0)
(63,70,0)
(14,42,0)
(6,55,0)
(5,20,0)
(61,3,0)
(2,9,0)
(9,51,0)
(24,40,0)
(42,55,0)
(13,57,0)
(32,53,0)
(34,71,0)
(60,65,0)
(25,71,0)
(19,45,0)
(12,5,0)
(50,20,0)
(22,20,0)
(42,11,0)
(14,59,0)
(67,58,0)
(44,38,0)
(37,8,0)
(21,5,0)
(71,42,0)
(66,12,0)
(17,55,0)
(0,10,0)
(56,38,0)
(24,10,0)
(7,3,0)
(20,10,0)
(60,31,0)
(52,35,0)
(70,42,0)
(59,14,0)
(31,5,0)
(65,8,0)
(28,14,0)
(70,53,0)
(54,47,0)
(3,27,0)
(29,60,0)
(53,70,0)
(2,38,0)
(15,10,0)
(58,42,0)
(30,52,0)
(27,45,0)
(40,68,1)
(59,14,1)
(60,29,1)
(13,71,1)
(14,28,1)
(53,59,1)
(29,48,1)
(18,3,1)
(57,13,1)
(38,56,1)
(11,43,1)
(19,31,1)
(56,44,1)
(25,52,1)
(71,5,1)
(5,20,1)
(33,59,1)
(31,60,1)
(45,19,1)
(44,39,1)
(53,70,1)
(48,18,1)
(47,58,1)
(67,46,1)
(2,38,1)
(46,42,1)
(24,40,1)
(68,27,1)
(65,12,1)
(1,53,1)
(27,45,1)
(66,4,1)
(70,69,1)
(42,11,1)
(43,16,1)
(70,5,1)
(28,26,1)
(71,42,1)
(69,63,1)
(58,42,1)
(41,24,1)
(34,25,1)
(68,57,1)
(22,50,1)
(38,65,1)
(47,54,1)
(68,9,1)
(62,20,1)
(40,5,1)
(3,7,1)
(26,70,1)
(30,32,1)
(64,2,1)
(58,67,1)
(54,58,1)
(70,42,1)
(71,34,1)
(16,5,1)
(9,64,1)
(45,31,1)
(14,42,1)
(68,47,1)
(11,5,1)
(52,30,1)
(2,5,1)
(21,62,1)
(3,65,1)
(4,32,1)
(63,47,1)
(39,27,1)
(53,33,1)
(61,65,1)
(32,1,1)
(5,21,1)
(32,53,1)
(31,5,1)
(59,23,1)
(27,3,1)
(20,22,1)
(12,66,1)
(7,61,1)
(12,5,1)
(60,65,1)
(53,59,2)
(12,32,2)
(52,32,2)
(2,38,2)
(25,32,2)
(13,32,2)
(9,27,2)
(24,40,2)
(71,42,2)
(28,47,2)
(63,47,2)
(34,32,2)
(59,47,2)
(32,53,2)
(59,14,2)
(59,23,2)
(11,5,2)
(26,47,2)
(32,47,2)
(60,65,2)
(3,32,2)
(38,65,2)
(65,12,2)
(44,27,2)
(27,3,2)
(1,47,2)
(30,32,2)
(14,42,2)
(4,32,2)
(53,47,2)
(2,27,2)
(58,42,2)
(14,47,2)
(56,27,2)
(27,32,2)
(12,5,2)
(48,3,2)
(71,32,2)
(60,3,2)
(61,32,2)
(27,45,2)
(57,32,2)
(31,5,2)
(38,27,2)
(65,32,2)
(29,3,2)
(42,11,2)
(69,47,2)
(3,65,2)
(18,3,2)
(53,70,2)
(47,58,2)
(39,27,2)
(70,5,2)
(45,31,2)
(33,47,2)
(70,47,2)
(71,5,2)
(7,32,2)
(2,5,2)
(5,20,2)
(40,5,2)
(64,27,2)
(66,32,2)
(31,60,2)
(31,3,2)
(45,3,2)
(70,42,2)
(19,3,2)
-----------------------------------
(0,dataBuffer)
(1,NULL)
(2,data[dataLen-1])
(3,dataLen > 0)
(4,dataLen)
(5,data = dataBuffer)
(6,dataLen)
(7,0)
(8,)
(9,data[dataLen-1] = \\\'\\\\0\\\')
(10,)
(11,strlen(data)
(12,strlen(data)
(13,\\\'\\\\0\\\')
(14,100-dataLen)
(15,data)
(16,dataLen)
(17,if (100-dataLen > 1)
(18,data)
(19,\\\'\\\\n\\\')
(20,dataBuffer[100] = COMMAND_ARG2)
(21,dataBuffer)
(22,COMMAND_ARG2)
(23,int)
(24,CWE78_OS_Command_Injection__char_console_execl_63b_badSink(&data)
(25,data)
(26,100)
(27,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(28,dataLen)
(29,1)
(30,"fgets()
(31,data[dataLen-1])
(32,fgets(data+dataLen, (int)
(33,stdin)
(34,dataLen)
(35,)
(36,)
(37,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(38,dataLen-1)
(39,data)
(40,&data)
(41,RET)
(42,dataLen = strlen(data)
(43,data)
(44,dataLen)
(45,data[dataLen-1] == \\\'\\\\n\\\')
(46,100)
(47,100-dataLen > 1)
(48,dataLen)
(49,if (fgets(data+dataLen, (int)
(50,dataBuffer)
(51,)
(52,printLine("fgets()
(53,fgets(data+dataLen, (int)
(54,1)
(55,)
(56,1)
(57,data[dataLen] = \\\'\\\\0\\\')
(58,100-dataLen)
(59,(int)
(60,dataLen-1)
(61,dataLen)
(62,data)
(63,data)
(64,\\\'\\\\0\\\')
(65,dataLen = strlen(data)
(66,data)
(67,dataLen)
(68,data)
(69,dataLen)
(70,data+dataLen)
(71,data[dataLen])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
