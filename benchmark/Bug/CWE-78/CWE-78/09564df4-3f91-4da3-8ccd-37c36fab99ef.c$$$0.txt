-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_53_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_53_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_53b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_execl_53_bad()
CWE78_OS_Command_Injection__char_console_execl_53_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_53b_badSink(data);
CWE78_OS_Command_Injection__char_console_execl_53b_badSink(data)
CWE78_OS_Command_Injection__char_console_execl_53b_badSink
CWE78_OS_Command_Injection__char_console_execl_53b_badSink
data
data
-----joern-----
(68,53,0)
(69,70,0)
(37,12,0)
(25,58,0)
(11,70,0)
(29,56,0)
(24,12,0)
(10,66,0)
(39,30,0)
(4,51,0)
(54,20,0)
(66,11,0)
(46,26,0)
(31,6,0)
(60,58,0)
(29,12,0)
(18,58,0)
(45,32,0)
(65,21,0)
(43,21,0)
(3,49,0)
(21,43,0)
(41,51,0)
(70,11,0)
(17,20,0)
(15,51,0)
(12,29,0)
(51,4,0)
(19,31,0)
(29,11,0)
(35,63,0)
(65,1,0)
(28,5,0)
(51,15,0)
(23,32,0)
(15,22,0)
(56,29,0)
(21,32,0)
(16,15,0)
(22,15,0)
(50,65,0)
(44,11,0)
(42,26,0)
(13,3,0)
(65,25,0)
(55,66,0)
(11,66,0)
(14,4,0)
(57,4,0)
(61,3,0)
(51,25,0)
(20,54,0)
(20,21,0)
(53,25,0)
(47,25,0)
(32,30,0)
(64,62,0)
(27,13,0)
(67,34,0)
(36,43,0)
(9,65,0)
(0,1,0)
(11,29,0)
(43,25,0)
(6,62,0)
(6,53,0)
(48,28,0)
(53,6,0)
(25,30,0)
(8,21,0)
(63,30,0)
(33,20,0)
(40,25,0)
(2,6,0)
(7,54,0)
(26,22,0)
(1,5,0)
(59,30,0)
(13,25,0)
(66,21,0)
(22,26,0)
(52,31,0)
(4,6,0)
(58,30,0)
(13,31,0)
(63,25,0)
(66,25,0)
(12,21,0)
(26,6,0)
(31,13,0)
(46,42,1)
(54,7,1)
(35,22,1)
(26,46,1)
(66,25,1)
(66,55,1)
(9,28,1)
(7,20,1)
(70,11,1)
(51,4,1)
(25,58,1)
(3,61,1)
(16,51,1)
(11,29,1)
(38,63,1)
(25,40,1)
(20,17,1)
(43,25,1)
(66,21,1)
(70,69,1)
(12,24,1)
(0,65,1)
(47,58,1)
(31,52,1)
(1,0,1)
(17,33,1)
(35,54,1)
(8,25,1)
(43,36,1)
(14,41,1)
(54,20,1)
(15,51,1)
(35,3,1)
(65,25,1)
(2,70,1)
(61,13,1)
(36,8,1)
(26,6,1)
(69,11,1)
(29,56,1)
(4,57,1)
(50,9,1)
(12,21,1)
(58,18,1)
(42,6,1)
(33,21,1)
(57,14,1)
(51,25,1)
(20,21,1)
(19,27,1)
(55,10,1)
(13,31,1)
(53,25,1)
(22,26,1)
(53,68,1)
(11,66,1)
(4,6,1)
(65,21,1)
(24,37,1)
(41,26,1)
(13,25,1)
(35,1,1)
(31,6,1)
(6,53,1)
(44,29,1)
(10,54,1)
(18,60,1)
(28,48,1)
(21,43,1)
(11,44,1)
(68,2,1)
(40,47,1)
(63,25,1)
(22,15,1)
(48,70,1)
(63,35,1)
(27,22,1)
(37,66,1)
(15,16,1)
(65,50,1)
(52,19,1)
(29,12,1)
(61,22,2)
(31,6,2)
(4,26,2)
(44,54,2)
(11,29,2)
(29,12,2)
(50,70,2)
(65,70,2)
(53,70,2)
(55,54,2)
(52,22,2)
(22,26,2)
(31,22,2)
(9,70,2)
(48,70,2)
(53,25,2)
(28,70,2)
(21,43,2)
(51,26,2)
(65,21,2)
(69,54,2)
(54,20,2)
(19,22,2)
(37,54,2)
(11,54,2)
(70,54,2)
(63,25,2)
(3,22,2)
(27,22,2)
(20,21,2)
(12,54,2)
(46,70,2)
(25,58,2)
(29,54,2)
(24,54,2)
(15,51,2)
(66,21,2)
(26,70,2)
(15,26,2)
(29,56,2)
(6,53,2)
(41,26,2)
(26,6,2)
(57,26,2)
(66,25,2)
(65,25,2)
(10,54,2)
(70,11,2)
(1,70,2)
(11,66,2)
(22,15,2)
(66,54,2)
(13,31,2)
(13,25,2)
(6,70,2)
(51,4,2)
(43,25,2)
(0,70,2)
(22,70,2)
(51,25,2)
(68,70,2)
(14,26,2)
(12,21,2)
(13,22,2)
(42,70,2)
(2,70,2)
(16,26,2)
(4,6,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,data[dataLen] = \\\'\\\\0\\\')
(2,dataLen)
(3,data[dataLen-1] = \\\'\\\\0\\\')
(4,dataLen-1)
(5,)
(6,dataLen = strlen(data)
(7,1)
(8,dataLen)
(9,data)
(10,data)
(11,fgets(data+dataLen, (int)
(12,100-dataLen)
(13,data[dataLen-1])
(14,dataLen)
(15,data[dataLen-1] == \\\'\\\\n\\\')
(16,\\\'\\\\n\\\')
(17,dataLen)
(18,COMMAND_ARG2)
(19,dataLen)
(20,100-dataLen)
(21,dataLen = strlen(data)
(22,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(23,dataLen)
(24,dataLen)
(25,data = dataBuffer)
(26,dataLen > 0)
(27,data)
(28,printLine("fgets()
(29,(int)
(30,)
(31,dataLen-1)
(32,)
(33,100)
(34,)
(35,data)
(36,data)
(37,100)
(38,RET)
(39,data)
(40,dataBuffer)
(41,data)
(42,dataLen)
(43,strlen(data)
(44,stdin)
(45,if (100-dataLen > 1)
(46,0)
(47,data)
(48,"fgets()
(49,)
(50,dataLen)
(51,data[dataLen-1])
(52,1)
(53,strlen(data)
(54,100-dataLen > 1)
(55,dataLen)
(56,int)
(57,1)
(58,dataBuffer[100] = COMMAND_ARG2)
(59,dataBuffer)
(60,dataBuffer)
(61,\\\'\\\\0\\\')
(62,)
(63,CWE78_OS_Command_Injection__char_console_execl_53b_badSink(data)
(64,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(65,data[dataLen])
(66,data+dataLen)
(67,if (fgets(data+dataLen, (int)
(68,data)
(69,NULL)
(70,fgets(data+dataLen, (int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
