-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        char * data = *dataPtr1;
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
78,79
81,82
82,83
82,84
82,85
83,84
83,85
84,85
84,86
84,87
84,88
85,86
87,88
87,89
88,89
90,91
92,93
92,94
93,94
93,95
96,97
97,98
97,99
99,100
101,102
103,104
105,106
105,107
106,107
107,108
107,109
108,109
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
125,126
125,127
126,127
130,131
131,132
132,133
132,134
133,134
133,135
134,135
136,137
136,138
137,138
141,142
141,143
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
149,151
150,151
152,153
155,156
156,157
156,158
157,158
158,159
160,161
162,163
162,164
163,164
164,165
164,166
166,167
166,168
166,169
169,170
170,171
171,172
173,174
173,175
174,175
174,176
175,176
175,177
176,177
178,179
181,182
181,183
182,183
183,184
183,185
184,185
187,188
188,189
188,190
189,190
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,77,79,80,86,89,91,94,95,98,100,102,104,109,112,114,119,120,124,127,128,129,135,138,139,140,145,146,151,153,154,159,161,165,167,168,172,177,179,180,185,186,190,191
-----computeFrom-----
45,46
45,47
75,76
75,77
76,77
76,78
83,84
83,85
87,88
87,89
97,98
97,99
107,108
107,109
116,117
116,118
117,118
117,119
121,122
121,123
125,126
125,127
132,133
132,134
136,137
136,138
148,149
148,150
156,157
156,158
174,175
174,176
-----guardedBy-----
79,153
89,135
100,138
124,135
127,138
-----guardedByNegation-----
89,151
100,153
-----lastLexicalUse-----
89,151
100,153
-----jump-----
89,151
100,153
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
void
CWE78_OS_Command_Injection__char_console_system_32_bad()
CWE78_OS_Command_Injection__char_console_system_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(8,60,0)
(13,32,0)
(53,104,0)
(60,8,0)
(66,5,0)
(41,98,0)
(76,31,0)
(88,43,0)
(10,54,0)
(52,65,0)
(84,15,0)
(64,47,0)
(11,96,0)
(72,1,0)
(101,61,0)
(94,41,0)
(17,63,0)
(34,38,0)
(71,61,0)
(98,41,0)
(15,23,0)
(81,103,0)
(24,92,0)
(33,49,0)
(12,59,0)
(89,96,0)
(16,18,0)
(57,63,0)
(9,97,0)
(93,46,0)
(5,48,0)
(37,44,0)
(54,32,0)
(31,47,0)
(91,22,0)
(102,98,0)
(83,92,0)
(97,9,0)
(2,3,0)
(104,25,0)
(8,25,0)
(65,84,0)
(38,18,0)
(14,104,0)
(18,63,0)
(44,97,0)
(45,95,0)
(96,11,0)
(97,44,0)
(68,75,0)
(85,32,0)
(80,25,0)
(95,43,0)
(99,57,0)
(20,4,0)
(94,58,0)
(82,92,0)
(28,77,0)
(75,41,0)
(90,84,0)
(49,3,0)
(100,25,0)
(51,58,0)
(18,59,0)
(67,25,0)
(75,95,0)
(11,69,0)
(1,82,0)
(54,25,0)
(58,48,0)
(3,49,0)
(44,41,0)
(63,59,0)
(104,53,0)
(62,87,0)
(96,15,0)
(1,8,0)
(50,84,0)
(55,15,0)
(103,29,0)
(17,61,0)
(84,65,0)
(27,20,0)
(95,97,0)
(17,69,0)
(77,63,0)
(41,46,0)
(59,25,0)
(97,95,0)
(46,59,0)
(19,17,0)
(31,82,0)
(65,20,0)
(94,63,0)
(61,17,0)
(92,25,0)
(70,25,0)
(82,1,0)
(6,63,0)
(7,8,0)
(65,63,0)
(98,63,0)
(35,69,0)
(69,17,0)
(86,94,0)
(95,75,0)
(69,11,0)
(30,44,0)
(36,23,0)
(77,104,0)
(49,41,0)
(26,60,0)
(40,54,0)
(79,53,0)
(87,29,0)
(21,49,0)
(0,96,0)
(61,15,0)
(32,25,0)
(75,63,0)
(57,15,0)
(56,41,0)
(38,104,0)
(63,77,0)
(43,95,0)
(39,82,0)
(47,31,0)
(74,75,0)
(78,46,0)
(15,57,0)
(73,94,0)
(47,64,1)
(77,104,1)
(53,79,1)
(44,30,1)
(1,72,1)
(61,15,1)
(54,32,1)
(5,66,1)
(88,95,1)
(95,45,1)
(66,43,1)
(38,104,1)
(6,54,1)
(95,97,1)
(45,97,1)
(34,3,1)
(13,85,1)
(76,82,1)
(79,14,1)
(69,17,1)
(18,63,1)
(2,49,1)
(34,11,1)
(20,27,1)
(94,73,1)
(74,3,1)
(11,69,1)
(75,68,1)
(65,84,1)
(43,95,1)
(101,71,1)
(19,96,1)
(73,86,1)
(21,33,1)
(82,1,1)
(31,82,1)
(8,60,1)
(85,8,1)
(57,99,1)
(75,41,1)
(97,9,1)
(98,63,1)
(51,94,1)
(94,63,1)
(49,21,1)
(18,16,1)
(44,41,1)
(40,32,1)
(35,17,1)
(61,101,1)
(104,53,1)
(102,56,1)
(72,39,1)
(17,63,1)
(28,6,1)
(16,38,1)
(43,88,1)
(77,28,1)
(30,37,1)
(81,47,1)
(98,102,1)
(96,0,1)
(68,74,1)
(7,104,1)
(15,57,1)
(32,13,1)
(49,41,1)
(65,63,1)
(37,75,1)
(103,81,1)
(26,7,1)
(54,10,1)
(55,43,1)
(1,8,1)
(95,75,1)
(17,61,1)
(94,41,1)
(84,15,1)
(89,15,1)
(0,89,1)
(57,63,1)
(96,15,1)
(90,52,1)
(42,47,1)
(34,20,1)
(42,87,1)
(3,2,1)
(56,63,1)
(11,96,1)
(34,58,1)
(52,11,1)
(41,98,1)
(64,31,1)
(97,44,1)
(33,41,1)
(84,50,1)
(47,31,1)
(99,55,1)
(87,62,1)
(31,76,1)
(39,18,1)
(69,35,1)
(86,5,1)
(10,40,1)
(3,49,1)
(58,51,1)
(38,34,1)
(50,90,1)
(60,26,1)
(75,63,1)
(62,103,1)
(71,19,1)
(27,65,1)
(63,77,1)
(66,43,2)
(82,1,2)
(101,96,2)
(31,82,2)
(97,44,2)
(43,95,2)
(11,43,2)
(74,3,2)
(47,31,2)
(75,63,2)
(38,104,2)
(90,11,2)
(8,60,2)
(58,43,2)
(57,43,2)
(20,11,2)
(19,96,2)
(52,11,2)
(96,43,2)
(63,77,2)
(69,96,2)
(65,84,2)
(17,96,2)
(45,3,2)
(73,43,2)
(57,63,2)
(17,63,2)
(75,3,2)
(75,41,2)
(62,47,2)
(94,63,2)
(94,41,2)
(84,11,2)
(30,3,2)
(1,8,2)
(61,96,2)
(104,53,2)
(65,11,2)
(86,43,2)
(15,43,2)
(17,61,2)
(65,63,2)
(15,57,2)
(89,43,2)
(97,9,2)
(69,17,2)
(95,97,2)
(0,43,2)
(98,63,2)
(49,41,2)
(95,3,2)
(96,15,2)
(95,75,2)
(81,47,2)
(11,69,2)
(99,43,2)
(18,63,2)
(44,41,2)
(54,32,2)
(35,96,2)
(5,43,2)
(94,43,2)
(97,3,2)
(50,11,2)
(55,43,2)
(3,49,2)
(37,3,2)
(88,3,2)
(103,47,2)
(84,15,2)
(43,3,2)
(51,43,2)
(71,96,2)
(44,3,2)
(11,96,2)
(77,104,2)
(27,11,2)
(87,47,2)
(61,15,2)
(41,98,2)
(68,3,2)
-----------------------------------
(0,0)
(1,*dataPtr2)
(2,1)
(3,100-dataLen > 1)
(4,)
(5,printLine("fgets()
(6,data)
(7,dataPtr2)
(8,* *dataPtr2 = &data)
(9,int)
(10,data_buf)
(11,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,data)
(13,FULL_COMMAND)
(14,dataPtr1)
(15,dataLen = strlen(data)
(16,data)
(17,data[dataLen-1])
(18,*dataPtr1 = data)
(19,data)
(20,data[dataLen-1] = \\\'\\\\0\\\')
(21,dataLen)
(22,)
(23,)
(24,data)
(25,)
(26,data)
(27,\\\'\\\\0\\\')
(28,dataPtr1)
(29,)
(30,dataLen)
(31,SYSTEM(data)
(32,data_buf[100] = FULL_COMMAND)
(33,100)
(34,dataPtr1)
(35,\\\'\\\\n\\\')
(36,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(37,100)
(38,*dataPtr1)
(39,data)
(40,data)
(41,dataLen = strlen(data)
(42,RET)
(43,fgets(data+dataLen, (int)
(44,100-dataLen)
(45,stdin)
(46,)
(47,SYSTEM(data)
(48,)
(49,100-dataLen)
(50,1)
(51,\\\'\\\\0\\\')
(52,data)
(53,&data)
(54,data = data_buf)
(55,dataLen)
(56,dataLen)
(57,strlen(data)
(58,data[dataLen] = \\\'\\\\0\\\')
(59,)
(60,&data)
(61,dataLen-1)
(62,1)
(63,* data = *dataPtr1)
(64,0)
(65,data[dataLen-1])
(66,"fgets()
(67,data_buf)
(68,dataLen)
(69,data[dataLen-1] == \\\'\\\\n\\\')
(70,dataPtr2)
(71,dataLen)
(72,dataPtr2)
(73,dataLen)
(74,data)
(75,data+dataLen)
(76,data)
(77,*dataPtr1)
(78,dataLen)
(79,data)
(80,data)
(81,"command execution failed!")
(82,* data = *dataPtr2)
(83,if (SYSTEM(data)
(84,dataLen-1)
(85,data_buf)
(86,data)
(87,exit(1)
(88,NULL)
(89,dataLen)
(90,dataLen)
(91,if (fgets(data+dataLen, (int)
(92,)
(93,if (100-dataLen > 1)
(94,data[dataLen])
(95,fgets(data+dataLen, (int)
(96,dataLen > 0)
(97,(int)
(98,strlen(data)
(99,data)
(100,dataPtr1)
(101,1)
(102,data)
(103,printLine("command execution failed!")
(104,* *dataPtr1 = &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
