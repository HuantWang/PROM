-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32spawnl_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32spawnl_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32spawnl_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32spawnl_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(14,47,0)
(7,18,0)
(8,31,0)
(19,52,0)
(2,63,0)
(47,4,0)
(43,5,0)
(16,7,0)
(43,18,0)
(46,12,0)
(54,51,0)
(47,58,0)
(0,48,0)
(20,49,0)
(52,19,0)
(48,63,0)
(24,60,0)
(34,22,0)
(52,18,0)
(41,54,0)
(18,31,0)
(7,36,0)
(56,52,0)
(31,50,0)
(51,54,0)
(57,32,0)
(58,42,0)
(12,36,0)
(15,20,0)
(48,5,0)
(53,42,0)
(4,36,0)
(6,28,0)
(54,13,0)
(62,49,0)
(63,48,0)
(40,4,0)
(45,43,0)
(38,49,0)
(26,24,0)
(11,18,0)
(5,27,0)
(63,36,0)
(59,13,0)
(51,49,0)
(30,63,0)
(60,39,0)
(28,48,0)
(3,43,0)
(4,20,0)
(49,38,0)
(9,52,0)
(49,32,0)
(12,50,0)
(1,12,0)
(38,36,0)
(33,51,0)
(25,37,0)
(54,36,0)
(22,39,0)
(5,48,0)
(10,38,0)
(42,58,0)
(21,24,0)
(61,19,0)
(23,60,0)
(5,43,0)
(13,44,0)
(58,47,0)
(35,31,0)
(29,42,0)
(18,7,0)
(24,36,0)
(17,20,0)
(48,28,0)
(4,47,0)
(27,5,0)
(55,51,0)
(20,4,0)
(63,18,0)
(24,18,0)
(42,49,0)
(47,4,1)
(60,23,1)
(46,58,1)
(12,46,1)
(4,20,1)
(7,36,1)
(63,2,1)
(46,60,1)
(24,36,1)
(54,36,1)
(43,18,1)
(49,38,1)
(23,24,1)
(62,28,1)
(14,4,1)
(24,21,1)
(15,40,1)
(58,42,1)
(3,45,1)
(28,48,1)
(16,11,1)
(22,34,1)
(48,5,1)
(34,28,1)
(54,51,1)
(52,18,1)
(46,13,1)
(52,9,1)
(61,52,1)
(19,52,1)
(24,18,1)
(5,43,1)
(42,49,1)
(46,19,1)
(47,14,1)
(55,41,1)
(13,59,1)
(48,0,1)
(48,63,1)
(26,22,1)
(5,27,1)
(42,53,1)
(21,26,1)
(63,36,1)
(0,5,1)
(43,3,1)
(20,49,1)
(17,15,1)
(30,19,1)
(19,61,1)
(29,49,1)
(38,10,1)
(4,36,1)
(51,49,1)
(56,18,1)
(41,58,1)
(63,18,1)
(51,33,1)
(28,6,1)
(18,7,1)
(7,16,1)
(20,17,1)
(33,55,1)
(2,30,1)
(1,12,1)
(45,63,1)
(53,29,1)
(9,56,1)
(59,54,1)
(10,62,1)
(38,36,1)
(58,47,1)
(40,42,1)
(6,48,1)
(12,36,1)
(63,18,2)
(52,18,2)
(5,19,2)
(58,47,2)
(43,18,2)
(38,36,2)
(4,36,2)
(55,58,2)
(0,19,2)
(24,36,2)
(42,49,2)
(30,19,2)
(49,28,2)
(47,42,2)
(34,28,2)
(24,18,2)
(54,51,2)
(20,42,2)
(43,19,2)
(15,42,2)
(20,49,2)
(24,28,2)
(48,63,2)
(41,58,2)
(19,52,2)
(53,28,2)
(60,28,2)
(45,19,2)
(18,7,2)
(14,42,2)
(28,19,2)
(58,42,2)
(58,28,2)
(1,12,2)
(2,19,2)
(59,58,2)
(3,19,2)
(7,36,2)
(5,43,2)
(47,4,2)
(63,36,2)
(33,58,2)
(21,28,2)
(42,28,2)
(40,42,2)
(12,36,2)
(54,36,2)
(51,49,2)
(13,58,2)
(63,19,2)
(54,58,2)
(62,28,2)
(48,19,2)
(38,28,2)
(6,19,2)
(4,42,2)
(28,48,2)
(49,38,2)
(48,5,2)
(29,28,2)
(22,28,2)
(10,28,2)
(4,20,2)
(5,27,2)
(51,58,2)
(17,42,2)
(26,28,2)
(23,28,2)
-----------------------------------
(0,stdin)
(1,RET)
(2,dataLen)
(3,dataLen)
(4,data[dataLen-1])
(5,(int)
(6,NULL)
(7,strlen(data)
(8,if (100-dataLen > 1)
(9,dataLen)
(10,data)
(11,dataLen)
(12,return data;)
(13,data[dataLen-1] = \\\'\\\\0\\\')
(14,\\\'\\\\n\\\')
(15,dataLen)
(16,data)
(17,1)
(18,dataLen = strlen(data)
(19,100-dataLen > 1)
(20,dataLen-1)
(21,dataLen)
(22,printLine("fgets()
(23,\\\'\\\\0\\\')
(24,data[dataLen])
(25,if (fgets(data+dataLen, (int)
(26,data)
(27,int)
(28,fgets(data+dataLen, (int)
(29,dataLen)
(30,data)
(31,)
(32,)
(33,1)
(34,"fgets()
(35,dataLen)
(36,char * data)
(37,)
(38,strlen(data)
(39,)
(40,data)
(41,data)
(42,dataLen > 0)
(43,100-dataLen)
(44,)
(45,100)
(46,data)
(47,data[dataLen-1] == \\\'\\\\n\\\')
(48,fgets(data+dataLen, (int)
(49,dataLen = strlen(data)
(50,)
(51,dataLen-1)
(52,100-dataLen)
(53,0)
(54,data[dataLen-1])
(55,dataLen)
(56,100)
(57,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(58,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,\\\'\\\\0\\\')
(60,data[dataLen] = \\\'\\\\0\\\')
(61,1)
(62,dataLen)
(63,data+dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
