-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_execvp_17_bad()
{
    int i;
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(i = 0; i < 1; i++)
    {
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECVP(COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
47,49
47,50
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
63,64
63,65
63,66
66,67
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
80,83
80,84
81,82
83,84
83,85
84,85
86,87
88,89
90,91
90,92
91,92
91,93
93,94
96,97
96,98
97,98
98,99
98,100
100,101
100,102
100,103
100,104
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
114,115
115,116
115,117
115,118
116,117
118,119
120,121
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,51,53,57,59,62,64,65,69,71,75,77,82,85,87,89,92,94,95,99,101,102,103,107,109,111,113,117,119,121
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
73,74
73,75
83,84
83,85
90,91
90,92
91,92
91,93
-----guardedBy-----
75,89
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_execvp_17_bad(){    int i;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
void
CWE78_OS_Command_Injection__char_environment_w32_execvp_17_bad()
CWE78_OS_Command_Injection__char_environment_w32_execvp_17_bad
{    int i;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
int i;
int i;
int
i
i
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(i = 0; i < 1; i++)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECVP(COMMAND_INT, args);
EXECVP(COMMAND_INT, args)
EXECVP
EXECVP
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(7,49,0)
(13,41,0)
(17,28,0)
(2,50,0)
(23,49,0)
(4,32,0)
(5,15,0)
(47,44,0)
(16,6,0)
(3,41,0)
(37,53,0)
(35,26,0)
(26,17,0)
(21,10,0)
(20,49,0)
(32,50,0)
(51,50,0)
(9,7,0)
(17,0,0)
(10,7,0)
(36,53,0)
(7,23,0)
(31,1,0)
(6,1,0)
(32,42,0)
(11,50,0)
(19,49,0)
(48,53,0)
(14,44,0)
(12,15,0)
(33,23,0)
(42,32,0)
(22,49,0)
(6,26,0)
(15,32,0)
(0,1,0)
(1,10,0)
(47,19,0)
(52,23,0)
(1,50,0)
(17,32,0)
(24,7,0)
(34,47,0)
(50,43,0)
(45,47,0)
(29,17,0)
(30,0,0)
(40,36,0)
(25,49,0)
(0,17,0)
(8,19,0)
(17,26,0)
(0,7,0)
(39,6,0)
(38,49,0)
(10,1,0)
(46,42,0)
(18,0,0)
(26,6,0)
(44,19,0)
(41,53,0)
(16,35,1)
(27,47,1)
(3,53,1)
(15,12,1)
(24,9,1)
(32,42,1)
(17,26,1)
(30,15,1)
(41,13,1)
(10,21,1)
(52,33,1)
(17,32,1)
(4,1,1)
(26,6,1)
(0,1,1)
(10,7,1)
(13,3,1)
(6,1,1)
(9,23,1)
(5,32,1)
(47,44,1)
(53,48,1)
(44,14,1)
(36,53,1)
(36,40,1)
(48,37,1)
(37,7,1)
(0,18,1)
(18,30,1)
(31,41,1)
(0,7,1)
(41,53,1)
(40,17,1)
(35,29,1)
(14,41,1)
(45,44,1)
(23,52,1)
(3,36,1)
(7,24,1)
(1,10,1)
(42,46,1)
(47,34,1)
(39,16,1)
(7,23,1)
(15,32,1)
(34,45,1)
(17,0,1)
(46,4,1)
(29,0,1)
(12,5,1)
(40,15,1)
(21,31,1)
(6,39,1)
(32,42,2)
(0,1,2)
(0,7,2)
(18,15,2)
(17,15,2)
(4,41,2)
(6,1,2)
(1,41,2)
(26,6,2)
(46,41,2)
(17,32,2)
(17,0,2)
(26,15,2)
(32,41,2)
(35,15,2)
(36,41,2)
(15,41,2)
(5,41,2)
(47,44,2)
(16,15,2)
(10,41,2)
(36,53,2)
(42,41,2)
(13,41,2)
(12,41,2)
(40,41,2)
(3,41,2)
(41,41,2)
(17,26,2)
(15,32,2)
(31,41,2)
(41,53,2)
(30,15,2)
(0,15,2)
(1,10,2)
(39,15,2)
(29,15,2)
(7,23,2)
(21,41,2)
(6,15,2)
(10,7,2)
-----------------------------------
(0,data+dataLen)
(1,dataLen = strlen(data)
(2,dataLen)
(3,i)
(4,environment)
(5,environment)
(6,dataLen-1)
(7,data = dataBuffer)
(8,args)
(9,data)
(10,strlen(data)
(11,if (environment != NULL)
(12,NULL)
(13,1)
(14,args)
(15,environment != NULL)
(16,dataLen)
(17,strncat(data+dataLen, environment, 100-dataLen-1)
(18,dataLen)
(19,)
(20,data)
(21,data)
(22,i)
(23,dataBuffer[100] = COMMAND_ARG2)
(24,dataBuffer)
(25,dataBuffer)
(26,100-dataLen-1)
(27,RET)
(28,)
(29,environment)
(30,data)
(31,dataLen)
(32,* environment = GETENV(ENV_VARIABLE)
(33,dataBuffer)
(34,args)
(35,100)
(36,i++)
(37,i)
(38,for(i = 0; i < 1; i++)
(39,1)
(40,i)
(41,i < 1)
(42,GETENV(ENV_VARIABLE)
(43,)
(44,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(45,COMMAND_INT)
(46,ENV_VARIABLE)
(47,EXECVP(COMMAND_INT, args)
(48,0)
(49,)
(50,)
(51,environment)
(52,COMMAND_ARG2)
(53,i = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
