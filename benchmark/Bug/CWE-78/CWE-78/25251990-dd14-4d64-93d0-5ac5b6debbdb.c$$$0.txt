-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_w32_execv_34_bad()
{
    char * data;
    CWE78_OS_Command_Injection__char_file_w32_execv_34_unionType myUnion;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        {
            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* execv - specify the path where the command is located */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            EXECV(COMMAND_INT_PATH, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
54,56
55,56
55,57
56,57
56,58
58,59
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
80,81
80,82
81,82
81,83
81,84
81,85
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
93,94
94,95
94,96
96,97
98,99
100,101
102,103
102,104
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
130,131
130,132
131,132
132,133
132,134
134,135
134,136
134,137
137,138
138,139
138,140
139,140
142,143
142,144
143,144
144,145
144,146
146,147
146,148
146,149
146,150
150,151
151,152
151,153
151,154
151,155
152,153
154,155
156,157
158,159
160,161
161,162
161,163
161,164
162,163
164,165
166,167
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,38,40,44,46,50,52,53,57,59,60,65,68,70,71,75,77,83,86,88,91,92,95,97,99,101,106,107,112,114,115,119,121,126,127,129,133,135,136,140,141,145,147,148,149,153,155,157,159,163,165,167
-----computeFrom-----
29,30
29,31
55,56
55,57
56,57
56,58
63,64
63,65
73,74
73,75
80,81
80,82
84,85
84,86
94,95
94,96
109,110
109,111
123,124
123,125
-----guardedBy-----
59,114
77,101
75,121
86,112
97,114
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_w32_execv_34_bad(){    char * data;    CWE78_OS_Command_Injection__char_file_w32_execv_34_unionType myUnion;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* execv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }}
void
CWE78_OS_Command_Injection__char_file_w32_execv_34_bad()
CWE78_OS_Command_Injection__char_file_w32_execv_34_bad
{    char * data;    CWE78_OS_Command_Injection__char_file_w32_execv_34_unionType myUnion;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* execv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }}
char * data;
char * data;
char
* data
*
data
CWE78_OS_Command_Injection__char_file_w32_execv_34_unionType myUnion;
CWE78_OS_Command_Injection__char_file_w32_execv_34_unionType myUnion;
CWE78_OS_Command_Injection__char_file_w32_execv_34_unionType
CWE78_OS_Command_Injection__char_file_w32_execv_34_unionType
myUnion
myUnion
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* execv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* execv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(28,5,0)
(45,61,0)
(69,67,0)
(31,33,0)
(30,36,0)
(57,18,0)
(67,45,0)
(8,31,0)
(17,39,0)
(71,56,0)
(67,62,0)
(15,50,0)
(25,3,0)
(55,36,0)
(62,76,0)
(56,36,0)
(19,13,0)
(54,36,0)
(47,49,0)
(67,24,0)
(50,31,0)
(50,45,0)
(73,58,0)
(35,74,0)
(18,34,0)
(23,31,0)
(41,66,0)
(29,63,0)
(39,23,0)
(34,58,0)
(68,76,0)
(72,23,0)
(31,56,0)
(59,55,0)
(26,64,0)
(5,37,0)
(43,50,0)
(62,13,0)
(66,67,0)
(58,36,0)
(63,3,0)
(16,37,0)
(42,16,0)
(45,67,0)
(64,1,0)
(60,20,0)
(61,45,0)
(63,31,0)
(67,66,0)
(49,36,0)
(66,3,0)
(40,55,0)
(44,24,0)
(7,64,0)
(6,63,0)
(2,74,0)
(52,34,0)
(11,62,0)
(33,3,0)
(32,40,0)
(20,70,0)
(13,62,0)
(14,13,0)
(45,50,0)
(46,49,0)
(38,66,0)
(10,56,0)
(1,64,0)
(74,62,0)
(63,16,0)
(3,36,0)
(0,1,0)
(33,31,0)
(4,34,0)
(55,3,0)
(27,70,0)
(23,39,0)
(53,40,0)
(1,58,0)
(52,18,0)
(51,23,0)
(48,56,0)
(65,33,0)
(12,52,0)
(22,3,0)
(20,62,0)
(66,31,0)
(21,36,0)
(24,67,0)
(3,49,0)
(75,52,0)
(67,62,1)
(49,47,1)
(50,15,1)
(8,3,1)
(25,22,1)
(28,24,1)
(45,50,1)
(72,51,1)
(20,60,1)
(47,46,1)
(38,74,1)
(59,40,1)
(14,11,1)
(31,33,1)
(17,23,1)
(53,39,1)
(9,52,1)
(23,72,1)
(33,3,1)
(66,3,1)
(12,18,1)
(63,31,1)
(20,62,1)
(24,44,1)
(35,62,1)
(52,18,1)
(6,29,1)
(75,12,1)
(23,31,1)
(51,31,1)
(63,6,1)
(67,69,1)
(18,57,1)
(16,42,1)
(63,3,1)
(40,32,1)
(57,1,1)
(22,49,1)
(5,28,1)
(29,5,1)
(55,3,1)
(0,55,1)
(3,25,1)
(60,16,1)
(13,19,1)
(60,24,1)
(32,53,1)
(67,45,1)
(1,64,1)
(43,66,1)
(3,49,1)
(39,23,1)
(53,20,1)
(67,66,1)
(53,74,1)
(2,35,1)
(74,62,1)
(52,75,1)
(26,0,1)
(66,31,1)
(15,43,1)
(55,59,1)
(33,65,1)
(64,7,1)
(50,31,1)
(11,39,1)
(24,67,1)
(45,61,1)
(19,14,1)
(7,26,1)
(44,67,1)
(69,45,1)
(66,41,1)
(65,8,1)
(74,2,1)
(41,38,1)
(62,13,1)
(42,63,1)
(39,17,1)
(13,39,2)
(50,31,2)
(3,49,2)
(44,74,2)
(63,3,2)
(74,62,2)
(67,66,2)
(31,33,2)
(28,24,2)
(67,74,2)
(66,31,2)
(2,39,2)
(60,74,2)
(33,3,2)
(5,24,2)
(62,39,2)
(63,31,2)
(24,67,2)
(16,24,2)
(45,61,2)
(23,31,2)
(67,45,2)
(1,64,2)
(24,74,2)
(35,39,2)
(29,24,2)
(20,62,2)
(67,62,2)
(6,24,2)
(55,3,2)
(20,74,2)
(62,13,2)
(15,74,2)
(41,74,2)
(52,18,2)
(38,74,2)
(45,74,2)
(66,3,2)
(63,24,2)
(69,74,2)
(43,74,2)
(66,74,2)
(45,50,2)
(14,39,2)
(39,23,2)
(42,24,2)
(11,39,2)
(50,74,2)
(19,39,2)
(74,39,2)
-----------------------------------
(0,data)
(1,* data = myUnion.unionSecond)
(2,NULL)
(3,data = dataBuffer)
(4,args)
(5,printLine("fgets()
(6,dataLen)
(7,unionSecond)
(8,dataLen)
(9,RET)
(10,if (100-dataLen > 1)
(11,pFile)
(12,COMMAND_INT_PATH)
(13,fopen(FILENAME, "r")
(14,FILENAME)
(15,dataLen)
(16,data[dataLen] = \\\'\\\\0\\\')
(17,1)
(18,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(19,"r")
(20,fclose(pFile)
(21,data)
(22,data)
(23,100-dataLen)
(24,fgets(data+dataLen, (int)
(25,dataBuffer)
(26,myUnion)
(27,if (fgets(data+dataLen, (int)
(28,"fgets()
(29,data)
(30,dataBuffer)
(31,dataLen = strlen(data)
(32,unionFirst)
(33,strlen(data)
(34,)
(35,pFile)
(36,)
(37,)
(38,data)
(39,100-dataLen > 1)
(40,myUnion.unionFirst)
(41,dataLen)
(42,\\\'\\\\0\\\')
(43,100)
(44,NULL)
(45,(int)
(46,dataBuffer)
(47,COMMAND_ARG2)
(48,dataLen)
(49,dataBuffer[100] = COMMAND_ARG2)
(50,100-dataLen)
(51,100)
(52,EXECV(COMMAND_INT_PATH, args)
(53,myUnion)
(54,myUnion)
(55,myUnion.unionFirst = data)
(56,)
(57,args)
(58,)
(59,data)
(60,pFile)
(61,int)
(62,pFile = fopen(FILENAME, "r")
(63,data[dataLen])
(64,myUnion.unionSecond)
(65,data)
(66,data+dataLen)
(67,fgets(data+dataLen, (int)
(68,if (pFile != NULL)
(69,pFile)
(70,)
(71,pFile)
(72,dataLen)
(73,data)
(74,pFile != NULL)
(75,args)
(76,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
