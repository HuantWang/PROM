-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_execv_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_w32_execv_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_execv_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_w32_execv_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_execv_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_execv_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_w32_execv_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_w32_execv_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_w32_execv_22_badGlobal
CWE78_OS_Command_Injection__char_console_w32_execv_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(29,9,0)
(0,27,0)
(5,64,0)
(2,9,0)
(34,5,0)
(34,27,0)
(41,25,0)
(7,29,0)
(56,26,0)
(40,11,0)
(46,50,0)
(29,31,0)
(28,14,0)
(15,2,0)
(29,27,0)
(34,50,0)
(36,22,0)
(51,9,0)
(53,25,0)
(23,55,0)
(61,3,0)
(14,64,0)
(31,29,0)
(65,57,0)
(11,2,0)
(5,34,0)
(47,51,0)
(48,5,0)
(22,17,0)
(2,11,0)
(41,65,0)
(11,40,0)
(31,21,0)
(51,27,0)
(52,5,0)
(43,29,0)
(11,31,0)
(12,27,0)
(35,14,0)
(66,34,0)
(64,55,0)
(9,0,0)
(31,11,0)
(30,0,0)
(58,25,0)
(60,65,0)
(59,56,0)
(10,64,0)
(41,27,0)
(45,12,0)
(50,34,0)
(64,3,0)
(0,9,0)
(22,9,0)
(51,56,0)
(20,51,0)
(24,22,0)
(38,21,0)
(33,9,0)
(25,41,0)
(50,35,0)
(62,41,0)
(17,22,0)
(55,64,0)
(8,2,0)
(18,12,0)
(54,42,0)
(12,1,0)
(19,49,0)
(4,14,0)
(49,44,0)
(37,49,0)
(14,35,0)
(39,31,0)
(55,27,0)
(35,50,0)
(6,32,0)
(13,1,0)
(9,49,0)
(42,26,0)
(21,31,0)
(63,17,0)
(25,64,0)
(60,41,1)
(52,48,1)
(31,39,1)
(30,33,1)
(29,9,1)
(65,60,1)
(14,4,1)
(15,29,1)
(2,9,1)
(50,34,1)
(28,64,1)
(21,38,1)
(34,27,1)
(63,22,1)
(51,9,1)
(18,17,1)
(59,51,1)
(23,10,1)
(41,25,1)
(33,16,1)
(18,16,1)
(62,35,1)
(66,14,1)
(35,50,1)
(17,63,1)
(18,65,1)
(24,9,1)
(43,17,1)
(46,34,1)
(5,64,1)
(31,29,1)
(21,31,1)
(53,62,1)
(25,64,1)
(11,2,1)
(51,27,1)
(39,11,1)
(41,27,1)
(55,23,1)
(51,47,1)
(47,20,1)
(45,12,1)
(14,64,1)
(8,15,1)
(22,36,1)
(9,0,1)
(12,18,1)
(11,40,1)
(36,24,1)
(29,27,1)
(22,9,1)
(18,56,1)
(0,27,1)
(12,27,1)
(31,11,1)
(48,66,1)
(64,55,1)
(55,27,1)
(42,54,1)
(17,22,1)
(0,30,1)
(18,35,1)
(34,5,1)
(58,53,1)
(50,46,1)
(38,31,1)
(5,52,1)
(54,21,1)
(10,21,1)
(4,28,1)
(56,59,1)
(2,8,1)
(29,7,1)
(25,58,1)
(7,43,1)
(20,42,1)
(35,14,1)
(11,2,2)
(33,16,2)
(56,21,2)
(41,27,2)
(53,35,2)
(29,27,2)
(31,17,2)
(35,50,2)
(47,21,2)
(48,14,2)
(21,17,2)
(23,21,2)
(64,55,2)
(4,21,2)
(2,17,2)
(25,35,2)
(8,17,2)
(29,9,2)
(45,12,2)
(66,14,2)
(59,21,2)
(36,16,2)
(62,35,2)
(64,21,2)
(22,9,2)
(28,21,2)
(55,27,2)
(41,25,2)
(9,16,2)
(0,16,2)
(30,16,2)
(29,17,2)
(52,14,2)
(17,22,2)
(51,9,2)
(24,16,2)
(50,14,2)
(43,17,2)
(20,21,2)
(9,0,2)
(10,21,2)
(11,17,2)
(35,14,2)
(51,27,2)
(11,40,2)
(58,35,2)
(50,34,2)
(14,64,2)
(17,16,2)
(55,21,2)
(31,11,2)
(2,9,2)
(5,64,2)
(34,5,2)
(14,21,2)
(60,35,2)
(63,16,2)
(15,17,2)
(46,14,2)
(31,29,2)
(34,27,2)
(54,21,2)
(5,14,2)
(42,21,2)
(21,31,2)
(12,27,2)
(0,27,2)
(39,17,2)
(25,64,2)
(34,14,2)
(38,17,2)
(22,16,2)
(7,17,2)
(65,35,2)
(35,21,2)
(41,35,2)
(51,21,2)
-----------------------------------
(0,strlen(data)
(1,)
(2,100-dataLen)
(3,)
(4,0)
(5,dataLen-1)
(6,if (fgets(data+dataLen, (int)
(7,dataLen)
(8,dataLen)
(9,dataLen = strlen(data)
(10,dataLen)
(11,(int)
(12,return data;)
(13,if(CWE78_OS_Command_Injection__char_console_w32_execv_22_badGlobal)
(14,dataLen > 0)
(15,100)
(16,CWE78_OS_Command_Injection__char_console_w32_execv_22_badGlobal)
(17,100-dataLen > 1)
(18,data)
(19,dataLen)
(20,data)
(21,fgets(data+dataLen, (int)
(22,100-dataLen)
(23,data)
(24,100)
(25,dataLen-1)
(26,)
(27,char * data)
(28,dataLen)
(29,data+dataLen)
(30,data)
(31,fgets(data+dataLen, (int)
(32,)
(33,dataLen)
(34,data[dataLen-1])
(35,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(36,dataLen)
(37,if (100-dataLen > 1)
(38,NULL)
(39,stdin)
(40,int)
(41,data[dataLen-1])
(42,printLine("fgets()
(43,data)
(44,)
(45,RET)
(46,\\\'\\\\n\\\')
(47,dataLen)
(48,dataLen)
(49,)
(50,data[dataLen-1] == \\\'\\\\n\\\')
(51,data[dataLen])
(52,1)
(53,dataLen)
(54,"fgets()
(55,strlen(data)
(56,data[dataLen] = \\\'\\\\0\\\')
(57,)
(58,1)
(59,\\\'\\\\0\\\')
(60,\\\'\\\\0\\\')
(61,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(62,data)
(63,1)
(64,dataLen = strlen(data)
(65,data[dataLen-1] = \\\'\\\\0\\\')
(66,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
