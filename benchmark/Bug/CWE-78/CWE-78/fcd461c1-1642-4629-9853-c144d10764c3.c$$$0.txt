-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_execl_15_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    switch(6)
    {
    case 6:
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* execl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
66,69
66,70
67,68
69,70
69,71
70,71
72,73
74,75
76,77
76,78
77,78
77,79
79,80
84,85
85,86
85,87
86,87
90,91
91,92
91,93
91,94
91,95
91,96
91,97
92,93
94,95
96,97
98,99
100,101
102,103
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,37,39,43,45,48,50,51,55,57,61,63,68,71,73,75,78,80,81,82,83,87,88,89,93,95,97,99,101,103
-----computeFrom-----
23,24
23,25
59,60
59,61
69,70
69,71
76,77
76,78
77,78
77,79
-----guardedBy-----
61,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_execl_15_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* execl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__char_environment_execl_15_bad()
CWE78_OS_Command_Injection__char_environment_execl_15_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* execl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(44,20,0)
(40,10,0)
(34,19,0)
(15,42,0)
(16,43,0)
(45,11,0)
(42,20,0)
(20,44,0)
(3,25,0)
(30,24,0)
(18,10,0)
(29,11,0)
(27,26,0)
(49,38,0)
(14,24,0)
(8,20,0)
(24,19,0)
(50,10,0)
(17,25,0)
(1,0,0)
(33,19,0)
(3,35,0)
(4,0,0)
(26,5,0)
(41,3,0)
(43,5,0)
(44,26,0)
(6,42,0)
(25,10,0)
(32,10,0)
(48,11,0)
(47,38,0)
(5,25,0)
(46,44,0)
(35,3,0)
(38,3,0)
(5,43,0)
(24,0,0)
(23,5,0)
(42,24,0)
(20,42,0)
(11,0,0)
(37,25,0)
(19,0,0)
(20,31,0)
(2,0,0)
(43,24,0)
(12,25,0)
(26,44,0)
(13,35,0)
(9,11,0)
(22,18,0)
(20,3,0)
(7,10,0)
(28,26,0)
(21,11,0)
(42,5,0)
(27,28,1)
(26,27,1)
(50,38,1)
(42,5,1)
(9,32,1)
(45,9,1)
(24,19,1)
(44,26,1)
(41,5,1)
(29,21,1)
(48,45,1)
(16,23,1)
(13,41,1)
(26,5,1)
(15,6,1)
(21,48,1)
(20,42,1)
(43,16,1)
(49,3,1)
(38,3,1)
(46,8,1)
(23,36,1)
(28,46,1)
(8,42,1)
(36,24,1)
(47,49,1)
(35,13,1)
(19,33,1)
(43,24,1)
(42,15,1)
(18,22,1)
(20,3,1)
(14,19,1)
(20,44,1)
(39,11,1)
(32,18,1)
(5,43,1)
(6,38,1)
(30,14,1)
(9,50,1)
(38,47,1)
(11,29,1)
(33,34,1)
(24,30,1)
(42,24,1)
(3,35,1)
(22,36,1)
(50,20,1)
(38,3,2)
(42,38,2)
(49,36,2)
(20,38,2)
(13,36,2)
(8,38,2)
(20,42,2)
(46,38,2)
(43,36,2)
(43,24,2)
(42,5,2)
(26,5,2)
(3,35,2)
(6,38,2)
(20,44,2)
(32,36,2)
(22,36,2)
(44,26,2)
(38,36,2)
(27,38,2)
(44,38,2)
(5,36,2)
(24,19,2)
(16,36,2)
(20,3,2)
(35,36,2)
(41,36,2)
(18,36,2)
(28,38,2)
(50,36,2)
(15,38,2)
(3,36,2)
(26,38,2)
(23,36,2)
(42,24,2)
(5,43,2)
(47,36,2)
-----------------------------------
(0,)
(1,data)
(2,dataBuffer)
(3,* environment = GETENV(ENV_VARIABLE)
(4,switch(6)
(5,dataLen = strlen(data)
(6,data)
(7,case 6:)
(8,environment)
(9,COMMAND_INT_PATH)
(10,)
(11,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(12,environment)
(13,ENV_VARIABLE)
(14,data)
(15,dataLen)
(16,data)
(17,if (environment != NULL)
(18,printLine("Benign, fixed string")
(19,dataBuffer[100] = COMMAND_ARG2)
(20,strncat(data+dataLen, environment, 100-dataLen-1)
(21,COMMAND_ARG3)
(22,"Benign, fixed string")
(23,dataLen)
(24,data = dataBuffer)
(25,)
(26,dataLen-1)
(27,1)
(28,dataLen)
(29,NULL)
(30,dataBuffer)
(31,)
(32,break;)
(33,COMMAND_ARG2)
(34,dataBuffer)
(35,GETENV(ENV_VARIABLE)
(36,6)
(37,dataLen)
(38,environment != NULL)
(39,RET)
(40,default:)
(41,environment)
(42,data+dataLen)
(43,strlen(data)
(44,100-dataLen-1)
(45,COMMAND_INT_PATH)
(46,100)
(47,NULL)
(48,COMMAND_ARG1)
(49,environment)
(50,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
