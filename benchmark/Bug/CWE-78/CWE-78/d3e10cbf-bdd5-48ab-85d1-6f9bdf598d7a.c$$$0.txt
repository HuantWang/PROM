-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,35,37,38,43,46,48,49,53,55,61,64,66,69,70,73,75,77,79,84,85,90,92,93,97,99,102
-----computeFrom-----
33,34
33,35
34,35
34,36
41,42
41,43
51,52
51,53
58,59
58,60
62,63
62,64
72,73
72,74
87,88
87,89
-----guardedBy-----
37,92
55,79
53,99
64,90
75,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(39,17,0)
(17,36,0)
(2,29,0)
(23,14,0)
(35,42,0)
(26,1,0)
(41,19,0)
(28,51,0)
(29,50,0)
(48,49,0)
(12,1,0)
(44,42,0)
(34,15,0)
(10,21,0)
(42,44,0)
(14,44,0)
(5,21,0)
(14,23,0)
(37,29,0)
(7,1,0)
(44,14,0)
(33,19,0)
(10,46,0)
(0,7,0)
(12,50,0)
(22,11,0)
(26,21,0)
(3,26,0)
(7,21,0)
(7,43,0)
(31,24,0)
(44,26,0)
(4,12,0)
(16,15,0)
(21,29,0)
(47,29,0)
(19,49,0)
(18,33,0)
(51,21,0)
(49,19,0)
(26,44,0)
(38,33,0)
(32,6,0)
(45,12,0)
(46,10,0)
(14,15,0)
(44,19,0)
(25,26,0)
(43,36,0)
(9,43,0)
(15,14,0)
(30,49,0)
(24,19,0)
(19,6,0)
(13,10,0)
(27,44,0)
(51,1,0)
(15,21,0)
(40,46,0)
(24,11,0)
(20,10,0)
(8,7,0)
(21,51,0)
(46,40,1)
(42,44,1)
(51,28,1)
(38,18,1)
(40,10,1)
(44,26,1)
(45,24,1)
(51,1,1)
(43,9,1)
(45,33,1)
(42,35,1)
(26,1,1)
(13,21,1)
(16,26,1)
(0,8,1)
(20,13,1)
(48,41,1)
(33,38,1)
(18,19,1)
(28,5,1)
(46,10,1)
(21,51,1)
(3,25,1)
(10,21,1)
(39,42,1)
(7,1,1)
(26,3,1)
(14,23,1)
(34,16,1)
(9,7,1)
(12,1,1)
(45,46,1)
(41,46,1)
(7,21,1)
(12,45,1)
(24,19,1)
(31,43,1)
(7,0,1)
(27,14,1)
(14,15,1)
(44,19,1)
(44,14,1)
(8,17,1)
(15,34,1)
(35,44,1)
(26,21,1)
(17,39,1)
(44,27,1)
(30,48,1)
(10,20,1)
(24,31,1)
(49,30,1)
(33,19,1)
(25,33,1)
(19,49,1)
(15,21,1)
(4,12,1)
(31,42,1)
(16,33,2)
(27,33,2)
(26,1,2)
(15,21,2)
(14,23,2)
(17,42,2)
(24,33,2)
(43,42,2)
(19,49,2)
(35,33,2)
(15,33,2)
(19,46,2)
(38,46,2)
(12,1,2)
(14,33,2)
(25,33,2)
(44,19,2)
(31,33,2)
(34,33,2)
(33,19,2)
(41,46,2)
(46,10,2)
(10,21,2)
(48,46,2)
(7,21,2)
(30,46,2)
(39,42,2)
(9,42,2)
(18,46,2)
(21,51,2)
(44,33,2)
(44,26,2)
(42,33,2)
(7,1,2)
(26,33,2)
(24,19,2)
(4,12,2)
(3,33,2)
(49,46,2)
(33,46,2)
(51,1,2)
(8,42,2)
(0,42,2)
(42,44,2)
(26,21,2)
(7,42,2)
(44,14,2)
(14,15,2)
-----------------------------------
(0,dataLen)
(1,char * data)
(2,pFile)
(3,dataLen)
(4,RET)
(5,dataLen)
(6,)
(7,data[dataLen])
(8,data)
(9,\\\'\\\\0\\\')
(10,100-dataLen)
(11,)
(12,return data;)
(13,100)
(14,(int)
(15,100-dataLen)
(16,100)
(17,printLine("fgets()
(18,pFile)
(19,pFile = fopen(FILENAME, "r")
(20,dataLen)
(21,dataLen = strlen(data)
(22,if (fgets(data+dataLen, (int)
(23,int)
(24,fclose(pFile)
(25,data)
(26,data+dataLen)
(27,pFile)
(28,data)
(29,)
(30,"r")
(31,pFile)
(32,if (pFile != NULL)
(33,pFile != NULL)
(34,dataLen)
(35,NULL)
(36,)
(37,dataLen)
(38,NULL)
(39,"fgets()
(40,1)
(41,pFile)
(42,fgets(data+dataLen, (int)
(43,data[dataLen] = \\\'\\\\0\\\')
(44,fgets(data+dataLen, (int)
(45,data)
(46,100-dataLen > 1)
(47,if (100-dataLen > 1)
(48,FILENAME)
(49,fopen(FILENAME, "r")
(50,)
(51,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
