-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_popen_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        char * data = *dataPtr1;
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            FILE *pipe;
            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
            pipe = POPEN(data, "w");
            if (pipe != NULL)
            {
                PCLOSE(pipe);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
81,82
81,83
82,83
82,84
83,84
83,85
85,86
88,89
88,90
89,90
90,91
90,92
91,92
93,94
93,95
93,96
94,95
96,97
99,100
99,101
100,101
100,102
101,102
103,104
105,106
105,107
106,107
106,108
107,108
107,109
108,109
108,110
108,111
108,112
109,110
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
120,121
121,122
121,123
123,124
125,126
127,128
129,130
129,131
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
137,139
138,139
140,141
143,144
144,145
144,146
145,146
147,148
149,150
150,151
150,152
151,152
152,153
154,155
156,157
156,158
157,158
158,159
158,160
160,161
160,162
160,163
163,164
164,165
165,166
167,168
167,169
167,170
168,169
169,170
169,171
170,171
172,173
172,174
175,176
176,177
176,178
177,178
179,180
179,181
179,182
180,181
182,183
185,186
185,187
186,187
186,188
187,188
189,190
191,192
192,193
193,194
193,195
194,195
196,197
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,77,79,80,84,86,87,92,95,97,98,102,104,110,113,115,118,119,122,124,126,128,133,134,139,141,142,146,148,153,155,159,161,162,166,171,173,174,178,181,183,184,188,190,195,197
-----computeFrom-----
45,46
45,47
82,83
82,84
83,84
83,85
90,91
90,92
100,101
100,102
107,108
107,109
111,112
111,113
121,122
121,123
136,137
136,138
150,151
150,152
176,177
176,178
186,187
186,188
-----guardedBy-----
86,141
104,128
102,148
113,139
124,141
188,197
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_popen_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
void
CWE78_OS_Command_Injection__char_file_popen_32_bad()
CWE78_OS_Command_Injection__char_file_popen_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        char * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)            {                PCLOSE(pipe);            }
pipe != NULL
pipe
pipe
NULL
NULL
{                PCLOSE(pipe);            }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(81,21,0)
(83,71,0)
(45,48,0)
(9,22,0)
(65,89,0)
(31,48,0)
(29,20,0)
(43,4,0)
(44,39,0)
(80,19,0)
(62,41,0)
(36,31,0)
(85,91,0)
(17,96,0)
(57,56,0)
(51,24,0)
(39,12,0)
(25,56,0)
(34,28,0)
(14,19,0)
(68,83,0)
(92,47,0)
(21,24,0)
(77,15,0)
(53,59,0)
(8,56,0)
(24,2,0)
(63,68,0)
(68,56,0)
(91,19,0)
(2,89,0)
(71,41,0)
(60,19,0)
(48,31,0)
(21,64,0)
(74,5,0)
(40,17,0)
(48,68,0)
(83,68,0)
(26,79,0)
(29,72,0)
(48,45,0)
(20,6,0)
(68,48,0)
(40,24,0)
(33,96,0)
(20,19,0)
(71,30,0)
(17,89,0)
(28,68,0)
(6,20,0)
(67,29,0)
(35,83,0)
(50,57,0)
(16,2,0)
(11,71,0)
(49,1,0)
(30,72,0)
(54,14,0)
(5,71,0)
(0,41,0)
(46,20,0)
(58,83,0)
(94,19,0)
(56,22,0)
(82,32,0)
(41,38,0)
(96,17,0)
(30,71,0)
(7,6,0)
(68,28,0)
(52,78,0)
(89,19,0)
(84,22,0)
(61,40,0)
(95,8,0)
(69,91,0)
(5,59,0)
(38,19,0)
(72,29,0)
(13,41,0)
(66,11,0)
(12,38,0)
(96,14,0)
(72,38,0)
(88,5,0)
(59,5,0)
(83,72,0)
(79,15,0)
(18,77,0)
(11,72,0)
(23,40,0)
(27,11,0)
(56,78,0)
(87,4,0)
(24,40,0)
(31,71,0)
(37,17,0)
(76,1,0)
(4,19,0)
(42,19,0)
(10,57,0)
(39,20,0)
(47,14,0)
(8,32,0)
(86,30,0)
(3,72,0)
(70,2,0)
(4,91,0)
(22,56,0)
(75,12,0)
(55,31,0)
(12,72,0)
(11,77,0)
(1,24,0)
(73,38,0)
(14,47,0)
(90,71,0)
(50,10,1)
(95,28,1)
(71,30,1)
(44,57,1)
(20,6,1)
(14,47,1)
(4,87,1)
(56,22,1)
(81,1,1)
(39,44,1)
(8,56,1)
(96,33,1)
(61,23,1)
(11,66,1)
(36,83,1)
(57,50,1)
(59,5,1)
(35,57,1)
(44,59,1)
(43,91,1)
(31,71,1)
(8,95,1)
(33,37,1)
(90,72,1)
(28,34,1)
(44,8,1)
(1,24,1)
(48,31,1)
(22,9,1)
(88,74,1)
(92,54,1)
(66,27,1)
(40,17,1)
(37,12,1)
(51,17,1)
(47,92,1)
(76,24,1)
(86,90,1)
(1,49,1)
(3,4,1)
(5,88,1)
(11,72,1)
(59,53,1)
(68,56,1)
(72,29,1)
(55,36,1)
(40,61,1)
(93,1,1)
(58,35,1)
(75,39,1)
(96,14,1)
(27,79,1)
(28,68,1)
(25,59,1)
(69,14,1)
(68,48,1)
(12,72,1)
(39,20,1)
(74,71,1)
(93,21,1)
(68,63,1)
(53,5,1)
(67,3,1)
(30,86,1)
(83,58,1)
(63,48,1)
(5,71,1)
(29,20,1)
(10,56,1)
(85,69,1)
(6,7,1)
(91,85,1)
(84,25,1)
(30,72,1)
(17,96,1)
(21,24,1)
(26,28,1)
(68,83,1)
(18,11,1)
(12,75,1)
(4,91,1)
(24,40,1)
(23,51,1)
(34,68,1)
(77,18,1)
(11,71,1)
(95,77,1)
(83,72,1)
(9,84,1)
(83,71,1)
(54,20,1)
(57,56,1)
(87,43,1)
(48,45,1)
(21,81,1)
(49,76,1)
(31,55,1)
(7,46,1)
(29,67,1)
(79,26,1)
(68,57,2)
(27,28,2)
(21,24,2)
(31,71,2)
(17,96,2)
(58,57,2)
(4,91,2)
(1,24,2)
(95,57,2)
(59,5,2)
(68,48,2)
(30,72,2)
(8,57,2)
(50,59,2)
(25,59,2)
(28,57,2)
(22,59,2)
(71,30,2)
(84,59,2)
(68,83,2)
(55,57,2)
(10,59,2)
(83,71,2)
(81,1,2)
(56,22,2)
(11,71,2)
(63,57,2)
(48,57,2)
(40,17,2)
(48,45,2)
(5,71,2)
(31,57,2)
(24,40,2)
(11,28,2)
(36,57,2)
(39,20,2)
(57,59,2)
(26,28,2)
(72,29,2)
(34,57,2)
(21,1,2)
(11,72,2)
(56,59,2)
(83,57,2)
(8,56,2)
(18,28,2)
(68,56,2)
(79,28,2)
(66,28,2)
(48,31,2)
(77,28,2)
(57,56,2)
(20,6,2)
(35,57,2)
(9,59,2)
(14,47,2)
(83,72,2)
(28,68,2)
(29,20,2)
(96,14,2)
(12,72,2)
-----------------------------------
(0,pFile)
(1,pipe != NULL)
(2,)
(3,data)
(4,data = data_buf)
(5,100-dataLen)
(6,&data)
(7,data)
(8,fclose(pFile)
(9,"r")
(10,pFile)
(11,data[dataLen])
(12,*dataPtr1 = data)
(13,if (100-dataLen > 1)
(14,* *dataPtr2 = &data)
(15,)
(16,pipe)
(17,* data = *dataPtr2)
(18,\\\'\\\\0\\\')
(19,)
(20,* *dataPtr1 = &data)
(21,PCLOSE(pipe)
(22,fopen(FILENAME, "r")
(23,data)
(24,pipe = POPEN(data, "w")
(25,pFile)
(26,"fgets()
(27,data)
(28,fgets(data+dataLen, (int)
(29,*dataPtr1)
(30,strlen(data)
(31,100-dataLen)
(32,)
(33,dataPtr2)
(34,NULL)
(35,data)
(36,100)
(37,data)
(38,)
(39,*dataPtr1)
(40,POPEN(data, "w")
(41,)
(42,dataPtr1)
(43,data)
(44,dataPtr1)
(45,int)
(46,dataPtr1)
(47,&data)
(48,(int)
(49,NULL)
(50,NULL)
(51,pipe)
(52,if (pFile != NULL)
(53,1)
(54,dataPtr2)
(55,dataLen)
(56,pFile = fopen(FILENAME, "r")
(57,pFile != NULL)
(58,dataLen)
(59,100-dataLen > 1)
(60,dataPtr2)
(61,"w")
(62,dataLen)
(63,pFile)
(64,)
(65,data)
(66,dataLen)
(67,dataPtr1)
(68,fgets(data+dataLen, (int)
(69,data_buf)
(70,if (pipe != NULL)
(71,dataLen = strlen(data)
(72,* data = *dataPtr1)
(73,data)
(74,100)
(75,data)
(76,pipe)
(77,data[dataLen] = \\\'\\\\0\\\')
(78,)
(79,printLine("fgets()
(80,data)
(81,pipe)
(82,if (fgets(data+dataLen, (int)
(83,data+dataLen)
(84,FILENAME)
(85,FULL_COMMAND)
(86,data)
(87,data_buf)
(88,dataLen)
(89,)
(90,dataLen)
(91,data_buf[100] = FULL_COMMAND)
(92,data)
(93,RET)
(94,data_buf)
(95,pFile)
(96,*dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
