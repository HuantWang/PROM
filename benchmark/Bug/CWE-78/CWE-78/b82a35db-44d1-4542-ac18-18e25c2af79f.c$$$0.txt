-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;
    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData
data
data
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink()
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink
-----joern-----
(69,37,0)
(55,67,0)
(31,21,0)
(24,51,0)
(64,55,0)
(44,71,0)
(33,22,0)
(16,17,0)
(72,28,0)
(71,13,0)
(37,18,0)
(56,13,0)
(34,0,0)
(51,55,0)
(22,33,0)
(20,18,0)
(52,22,0)
(44,60,0)
(16,0,0)
(63,28,0)
(11,37,0)
(26,67,0)
(6,48,0)
(51,48,0)
(71,54,0)
(2,54,0)
(46,71,0)
(34,44,0)
(13,54,0)
(44,34,0)
(65,34,0)
(31,55,0)
(30,31,0)
(68,60,0)
(19,47,0)
(47,63,0)
(33,63,0)
(39,35,0)
(4,33,0)
(60,44,0)
(41,54,0)
(63,33,0)
(42,17,0)
(43,21,0)
(32,71,0)
(31,71,0)
(58,22,0)
(55,5,0)
(5,71,0)
(38,39,0)
(2,71,0)
(21,14,0)
(5,55,0)
(63,47,0)
(8,67,0)
(25,16,0)
(67,54,0)
(28,71,0)
(17,62,0)
(40,2,0)
(1,66,0)
(17,61,0)
(3,14,0)
(0,34,0)
(53,60,0)
(37,17,0)
(28,55,0)
(18,71,0)
(48,51,0)
(23,61,0)
(59,31,0)
(57,51,0)
(33,4,0)
(70,63,0)
(29,44,0)
(61,17,0)
(15,2,0)
(12,13,0)
(28,63,0)
(18,39,0)
(10,54,0)
(7,16,0)
(61,71,0)
(49,28,0)
(60,17,0)
(50,3,0)
(0,16,0)
(27,5,0)
(22,55,0)
(18,37,0)
(45,54,0)
(9,62,0)
(25,7,1)
(51,55,1)
(22,55,1)
(22,52,1)
(55,5,1)
(61,23,1)
(17,61,1)
(51,57,1)
(16,17,1)
(19,63,1)
(52,58,1)
(30,3,1)
(28,49,1)
(13,56,1)
(36,45,1)
(0,16,1)
(15,21,1)
(16,25,1)
(44,71,1)
(15,48,1)
(61,71,1)
(72,48,1)
(0,34,1)
(32,13,1)
(15,39,1)
(37,69,1)
(20,0,1)
(47,63,1)
(23,42,1)
(50,47,1)
(29,16,1)
(18,37,1)
(47,19,1)
(42,47,1)
(38,18,1)
(6,51,1)
(44,60,1)
(65,44,1)
(11,20,1)
(33,4,1)
(46,32,1)
(28,55,1)
(60,17,1)
(18,71,1)
(21,43,1)
(27,64,1)
(2,71,1)
(40,15,1)
(63,33,1)
(5,71,1)
(33,22,1)
(71,13,1)
(31,59,1)
(59,30,1)
(71,46,1)
(15,0,1)
(69,11,1)
(63,28,1)
(48,51,1)
(49,72,1)
(34,65,1)
(48,6,1)
(70,33,1)
(39,38,1)
(2,40,1)
(5,27,1)
(45,2,1)
(57,24,1)
(56,12,1)
(31,71,1)
(43,31,1)
(37,17,1)
(7,17,1)
(68,29,1)
(3,50,1)
(31,55,1)
(24,55,1)
(64,71,1)
(53,68,1)
(28,71,1)
(34,44,1)
(63,70,1)
(60,53,1)
(58,28,1)
(21,47,2)
(34,16,2)
(28,55,2)
(50,47,2)
(5,71,2)
(60,16,2)
(22,55,2)
(52,48,2)
(44,60,2)
(42,47,2)
(43,47,2)
(39,0,2)
(63,28,2)
(65,16,2)
(16,17,2)
(25,47,2)
(2,71,2)
(68,16,2)
(61,71,2)
(61,47,2)
(11,0,2)
(63,33,2)
(37,0,2)
(29,16,2)
(16,47,2)
(55,5,2)
(18,71,2)
(58,48,2)
(44,71,2)
(19,48,2)
(33,4,2)
(70,48,2)
(38,0,2)
(37,17,2)
(31,71,2)
(17,47,2)
(47,63,2)
(7,47,2)
(31,55,2)
(33,22,2)
(20,0,2)
(0,16,2)
(0,34,2)
(3,47,2)
(31,47,2)
(28,48,2)
(28,71,2)
(47,48,2)
(69,0,2)
(33,48,2)
(30,47,2)
(48,51,2)
(23,47,2)
(0,47,2)
(18,0,2)
(44,16,2)
(34,44,2)
(18,37,2)
(59,47,2)
(17,61,2)
(49,48,2)
(71,13,2)
(63,48,2)
(53,16,2)
(60,17,2)
(72,48,2)
(51,55,2)
(22,48,2)
-----------------------------------
(0,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(1,if (fgets(data+dataLen, (int)
(2,CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data)
(3,printLine("fgets()
(4,int)
(5,strlen(data)
(6,1)
(7,dataLen)
(8,dataLen)
(9,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(10,data)
(11,dataLen)
(12,dataBuffer)
(13,dataBuffer[100] = COMMAND_ARG2)
(14,)
(15,CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData)
(16,dataLen > 0)
(17,dataLen = strlen(data)
(18,data[dataLen-1])
(19,NULL)
(20,data)
(21,data[dataLen] = \\\'\\\\0\\\')
(22,100-dataLen)
(23,data)
(24,100)
(25,0)
(26,if (100-dataLen > 1)
(27,data)
(28,data+dataLen)
(29,data)
(30,data)
(31,data[dataLen])
(32,data)
(33,(int)
(34,data[dataLen-1] == \\\'\\\\n\\\')
(35,)
(36,RET)
(37,dataLen-1)
(38,\\\'\\\\0\\\')
(39,data[dataLen-1] = \\\'\\\\0\\\')
(40,data)
(41,dataBuffer)
(42,dataLen)
(43,\\\'\\\\0\\\')
(44,data[dataLen-1])
(45,CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink()
(46,dataBuffer)
(47,fgets(data+dataLen, (int)
(48,100-dataLen > 1)
(49,dataLen)
(50,"fgets()
(51,100-dataLen)
(52,dataLen)
(53,1)
(54,)
(55,dataLen = strlen(data)
(56,COMMAND_ARG2)
(57,dataLen)
(58,100)
(59,dataLen)
(60,dataLen-1)
(61,strlen(data)
(62,)
(63,fgets(data+dataLen, (int)
(64,dataLen)
(65,\\\'\\\\n\\\')
(66,)
(67,)
(68,dataLen)
(69,1)
(70,stdin)
(71,data = dataBuffer)
(72,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
