-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_41_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_41_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_41_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_41_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_execl_41_bad()
CWE78_OS_Command_Injection__char_console_execl_41_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_41_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_41_badSink(data);
CWE78_OS_Command_Injection__char_console_execl_41_badSink(data)
CWE78_OS_Command_Injection__char_console_execl_41_badSink
CWE78_OS_Command_Injection__char_console_execl_41_badSink
data
data
-----joern-----
(54,53,0)
(63,19,0)
(64,25,0)
(68,11,0)
(27,25,0)
(36,21,0)
(28,45,0)
(38,5,0)
(37,5,0)
(67,11,0)
(6,4,0)
(3,2,0)
(57,25,0)
(50,14,0)
(27,5,0)
(58,48,0)
(13,61,0)
(45,21,0)
(19,48,0)
(11,67,0)
(48,52,0)
(20,44,0)
(64,1,0)
(32,30,0)
(34,5,0)
(3,54,0)
(8,44,0)
(1,64,0)
(9,52,0)
(5,7,0)
(29,64,0)
(21,45,0)
(33,8,0)
(5,44,0)
(26,9,0)
(23,11,0)
(38,25,0)
(19,4,0)
(34,44,0)
(18,5,0)
(10,1,0)
(46,7,0)
(59,34,0)
(56,61,0)
(49,8,0)
(4,21,0)
(30,62,0)
(42,62,0)
(9,21,0)
(48,19,0)
(35,7,0)
(69,42,0)
(51,9,0)
(45,5,0)
(61,5,0)
(25,8,0)
(16,12,0)
(19,5,0)
(2,3,0)
(47,67,0)
(14,50,0)
(25,27,0)
(67,47,0)
(0,38,0)
(11,25,0)
(61,42,0)
(22,14,0)
(21,12,0)
(2,21,0)
(40,27,0)
(65,54,0)
(52,48,0)
(43,4,0)
(67,50,0)
(52,9,0)
(50,38,0)
(41,2,0)
(3,5,0)
(66,3,0)
(38,50,0)
(50,67,0)
(60,39,0)
(17,38,0)
(61,25,0)
(55,64,0)
(4,19,0)
(15,50,0)
(70,44,0)
(7,44,0)
(31,2,0)
(14,22,1)
(17,0,1)
(13,56,1)
(4,6,1)
(67,11,1)
(59,1,1)
(5,7,1)
(29,55,1)
(27,5,1)
(3,5,1)
(61,25,1)
(64,29,1)
(28,36,1)
(34,59,1)
(41,31,1)
(1,10,1)
(40,57,1)
(55,25,1)
(7,35,1)
(26,21,1)
(52,48,1)
(54,65,1)
(50,67,1)
(21,45,1)
(38,25,1)
(2,41,1)
(0,1,1)
(11,68,1)
(27,40,1)
(63,9,1)
(34,5,1)
(59,54,1)
(18,37,1)
(67,47,1)
(65,3,1)
(4,21,1)
(56,30,1)
(15,67,1)
(1,64,1)
(61,13,1)
(64,25,1)
(19,5,1)
(19,4,1)
(61,5,1)
(57,5,1)
(51,26,1)
(45,28,1)
(69,61,1)
(2,21,1)
(9,51,1)
(59,42,1)
(30,32,1)
(25,27,1)
(48,58,1)
(5,18,1)
(42,69,1)
(45,5,1)
(32,14,1)
(14,50,1)
(36,14,1)
(37,7,1)
(22,50,1)
(50,15,1)
(35,46,1)
(58,19,1)
(59,52,1)
(3,2,1)
(68,23,1)
(31,66,1)
(50,38,1)
(6,43,1)
(38,5,1)
(66,52,1)
(52,9,1)
(11,25,1)
(10,64,1)
(38,17,1)
(24,34,1)
(48,19,1)
(43,63,1)
(23,38,1)
(9,21,1)
(61,5,2)
(52,14,2)
(38,5,2)
(38,1,2)
(4,21,2)
(65,52,2)
(19,5,2)
(1,64,2)
(52,48,2)
(2,52,2)
(43,9,2)
(19,4,2)
(11,25,2)
(56,14,2)
(50,38,2)
(31,52,2)
(22,1,2)
(2,21,2)
(52,9,2)
(11,1,2)
(5,7,2)
(68,1,2)
(25,27,2)
(51,14,2)
(14,50,2)
(30,14,2)
(41,52,2)
(6,9,2)
(23,1,2)
(67,47,2)
(32,14,2)
(4,9,2)
(27,5,2)
(69,14,2)
(63,9,2)
(15,1,2)
(67,11,2)
(9,14,2)
(36,14,2)
(54,52,2)
(58,9,2)
(50,1,2)
(50,67,2)
(61,14,2)
(3,52,2)
(28,14,2)
(9,21,2)
(42,14,2)
(13,14,2)
(66,52,2)
(17,1,2)
(45,14,2)
(64,25,2)
(21,14,2)
(14,1,2)
(61,25,2)
(21,45,2)
(48,19,2)
(67,1,2)
(38,25,2)
(3,5,2)
(48,9,2)
(26,14,2)
(0,1,2)
(19,9,2)
(34,5,2)
(45,5,2)
(3,2,2)
-----------------------------------
(0,data)
(1,100-dataLen > 1)
(2,dataLen-1)
(3,data[dataLen-1])
(4,dataLen-1)
(5,data = dataBuffer)
(6,1)
(7,dataBuffer[100] = COMMAND_ARG2)
(8,)
(9,dataLen > 0)
(10,1)
(11,100-dataLen)
(12,)
(13,dataLen)
(14,fgets(data+dataLen, (int)
(15,stdin)
(16,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(17,dataLen)
(18,dataBuffer)
(19,data[dataLen-1])
(20,data)
(21,dataLen = strlen(data)
(22,NULL)
(23,100)
(24,RET)
(25,dataLen = strlen(data)
(26,dataLen)
(27,strlen(data)
(28,data)
(29,dataLen)
(30,printLine("fgets()
(31,dataLen)
(32,"fgets()
(33,if (100-dataLen > 1)
(34,CWE78_OS_Command_Injection__char_console_execl_41_badSink(data)
(35,COMMAND_ARG2)
(36,dataLen)
(37,data)
(38,data+dataLen)
(39,)
(40,data)
(41,1)
(42,data[dataLen] = \\\'\\\\0\\\')
(43,dataLen)
(44,)
(45,strlen(data)
(46,dataBuffer)
(47,int)
(48,data[dataLen-1] == \\\'\\\\n\\\')
(49,dataLen)
(50,fgets(data+dataLen, (int)
(51,0)
(52,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,)
(54,data[dataLen-1] = \\\'\\\\0\\\')
(55,100)
(56,data)
(57,dataLen)
(58,\\\'\\\\n\\\')
(59,data)
(60,if (fgets(data+dataLen, (int)
(61,data[dataLen])
(62,)
(63,data)
(64,100-dataLen)
(65,\\\'\\\\0\\\')
(66,data)
(67,(int)
(68,dataLen)
(69,\\\'\\\\0\\\')
(70,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
