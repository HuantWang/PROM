-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_41_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_41_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_41_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_41_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_41_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_41_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_41_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_41_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_execvp_41_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_execvp_41_badSink
CWE78_OS_Command_Injection__char_console_w32_execvp_41_badSink
data
data
-----joern-----
(65,39,0)
(48,61,0)
(41,39,0)
(2,1,0)
(26,60,0)
(0,42,0)
(50,20,0)
(25,60,0)
(1,52,0)
(42,49,0)
(66,32,0)
(63,1,0)
(51,19,0)
(18,29,0)
(29,1,0)
(53,2,0)
(9,63,0)
(68,24,0)
(11,49,0)
(23,42,0)
(47,29,0)
(6,56,0)
(24,39,0)
(16,48,0)
(27,48,0)
(57,38,0)
(62,19,0)
(2,18,0)
(7,22,0)
(48,27,0)
(14,64,0)
(27,31,0)
(15,9,0)
(23,40,0)
(4,10,0)
(20,60,0)
(42,32,0)
(60,18,0)
(31,27,0)
(3,1,0)
(34,30,0)
(8,18,0)
(22,35,0)
(69,38,0)
(42,23,0)
(5,10,0)
(37,2,0)
(23,38,0)
(39,24,0)
(58,32,0)
(32,42,0)
(2,22,0)
(46,13,0)
(32,1,0)
(1,19,0)
(60,20,0)
(28,52,0)
(30,31,0)
(40,23,0)
(29,18,0)
(38,23,0)
(55,27,0)
(24,1,0)
(67,1,0)
(70,6,0)
(19,52,0)
(43,63,0)
(54,36,0)
(44,61,0)
(48,1,0)
(39,9,0)
(17,12,0)
(31,30,0)
(49,42,0)
(33,61,0)
(63,9,0)
(30,9,0)
(18,10,0)
(12,35,0)
(13,1,0)
(38,18,0)
(13,52,0)
(45,30,0)
(32,18,0)
(9,36,0)
(10,52,0)
(61,48,0)
(61,9,0)
(21,52,0)
(24,6,0)
(22,7,1)
(1,67,1)
(23,38,1)
(42,23,1)
(7,2,1)
(20,60,1)
(15,49,1)
(13,46,1)
(12,17,1)
(67,3,1)
(46,20,1)
(42,0,1)
(50,60,1)
(25,26,1)
(9,63,1)
(65,41,1)
(58,20,1)
(23,40,1)
(27,48,1)
(43,15,1)
(3,19,1)
(17,49,1)
(46,31,1)
(39,65,1)
(20,50,1)
(60,25,1)
(13,1,1)
(41,68,1)
(63,43,1)
(37,12,1)
(19,51,1)
(11,42,1)
(49,42,1)
(57,69,1)
(66,58,1)
(18,29,1)
(61,44,1)
(30,9,1)
(32,18,1)
(16,30,1)
(34,9,1)
(61,9,1)
(49,11,1)
(32,66,1)
(59,13,1)
(68,31,1)
(31,27,1)
(63,1,1)
(32,1,1)
(30,45,1)
(0,23,1)
(27,55,1)
(48,61,1)
(51,62,1)
(48,1,1)
(46,6,1)
(55,48,1)
(6,70,1)
(38,18,1)
(60,18,1)
(38,57,1)
(45,34,1)
(24,1,1)
(8,1,1)
(47,8,1)
(69,32,1)
(24,39,1)
(1,19,1)
(46,22,1)
(39,9,1)
(70,24,1)
(53,37,1)
(2,1,1)
(31,30,1)
(29,1,1)
(26,18,1)
(29,47,1)
(2,18,1)
(33,16,1)
(44,33,1)
(2,53,1)
(42,32,1)
(39,9,2)
(2,18,2)
(32,20,2)
(17,49,2)
(48,61,2)
(9,63,2)
(63,49,2)
(45,49,2)
(49,20,2)
(9,49,2)
(16,30,2)
(58,20,2)
(29,1,2)
(68,31,2)
(2,49,2)
(23,38,2)
(38,20,2)
(32,18,2)
(12,49,2)
(48,1,2)
(60,18,2)
(27,30,2)
(38,18,2)
(42,32,2)
(30,49,2)
(15,49,2)
(1,19,2)
(27,48,2)
(23,40,2)
(63,1,2)
(11,20,2)
(39,31,2)
(32,1,2)
(69,20,2)
(6,31,2)
(30,9,2)
(31,49,2)
(41,31,2)
(24,31,2)
(42,20,2)
(43,49,2)
(7,49,2)
(37,49,2)
(33,30,2)
(44,30,2)
(20,60,2)
(18,29,2)
(42,23,2)
(55,30,2)
(61,30,2)
(57,20,2)
(65,31,2)
(34,49,2)
(66,20,2)
(70,31,2)
(31,27,2)
(13,1,2)
(24,39,2)
(23,20,2)
(0,20,2)
(53,49,2)
(2,1,2)
(61,9,2)
(31,30,2)
(49,42,2)
(22,49,2)
(24,1,2)
(48,30,2)
-----------------------------------
(0,stdin)
(1,data = dataBuffer)
(2,data[dataLen])
(3,data)
(4,dataLen)
(5,if (100-dataLen > 1)
(6,data[dataLen-1] = \\\'\\\\0\\\')
(7,\\\'\\\\0\\\')
(8,dataLen)
(9,dataLen = strlen(data)
(10,)
(11,NULL)
(12,printLine("fgets()
(13,CWE78_OS_Command_Injection__char_console_w32_execvp_41_badSink(data)
(14,if (fgets(data+dataLen, (int)
(15,dataLen)
(16,data)
(17,"fgets()
(18,dataLen = strlen(data)
(19,dataBuffer[100] = COMMAND_ARG2)
(20,100-dataLen > 1)
(21,dataBuffer)
(22,data[dataLen] = \\\'\\\\0\\\')
(23,(int)
(24,data[dataLen-1])
(25,dataLen)
(26,100)
(27,data[dataLen-1] == \\\'\\\\n\\\')
(28,data)
(29,strlen(data)
(30,dataLen > 0)
(31,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(32,data+dataLen)
(33,dataLen)
(34,dataLen)
(35,)
(36,)
(37,data)
(38,100-dataLen)
(39,dataLen-1)
(40,int)
(41,dataLen)
(42,fgets(data+dataLen, (int)
(43,data)
(44,1)
(45,0)
(46,data)
(47,data)
(48,data[dataLen-1])
(49,fgets(data+dataLen, (int)
(50,1)
(51,COMMAND_ARG2)
(52,)
(53,dataLen)
(54,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(55,\\\'\\\\n\\\')
(56,)
(57,dataLen)
(58,data)
(59,RET)
(60,100-dataLen)
(61,dataLen-1)
(62,dataBuffer)
(63,strlen(data)
(64,)
(65,1)
(66,dataLen)
(67,dataBuffer)
(68,data)
(69,100)
(70,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
