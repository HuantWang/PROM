-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(22,31,0)
(31,22,0)
(4,3,0)
(43,19,0)
(66,50,0)
(51,0,0)
(26,64,0)
(40,64,0)
(7,19,0)
(12,50,0)
(19,9,0)
(57,4,0)
(44,9,0)
(2,1,0)
(50,62,0)
(17,9,0)
(18,48,0)
(29,4,0)
(56,6,0)
(63,62,0)
(58,51,0)
(26,4,0)
(11,13,0)
(59,10,0)
(7,35,0)
(1,59,0)
(47,59,0)
(15,22,0)
(23,65,0)
(16,31,0)
(27,66,0)
(39,65,0)
(42,3,0)
(64,55,0)
(26,0,0)
(65,5,0)
(46,10,0)
(10,59,0)
(65,4,0)
(10,0,0)
(24,28,0)
(35,7,0)
(30,47,0)
(36,14,0)
(41,5,0)
(50,66,0)
(25,2,0)
(28,55,0)
(50,0,0)
(22,0,0)
(9,31,0)
(62,8,0)
(19,7,0)
(35,14,0)
(61,66,0)
(3,34,0)
(19,0,0)
(60,7,0)
(51,48,0)
(1,53,0)
(59,1,0)
(2,4,0)
(49,14,0)
(4,57,0)
(14,31,0)
(54,57,0)
(20,26,0)
(57,0,0)
(10,4,0)
(66,31,0)
(38,10,0)
(45,2,0)
(32,3,0)
(14,35,0)
(59,47,0)
(21,26,0)
(53,1,0)
(37,51,0)
(9,19,0)
(1,2,0)
(52,59,0)
(5,65,0)
(31,6,0)
(10,0,1)
(59,1,1)
(14,49,1)
(51,0,1)
(5,41,1)
(59,52,1)
(15,16,1)
(19,9,1)
(28,24,1)
(61,27,1)
(41,65,1)
(10,38,1)
(64,40,1)
(37,51,1)
(9,31,1)
(26,4,1)
(63,50,1)
(9,44,1)
(35,14,1)
(52,1,1)
(43,14,1)
(58,64,1)
(24,47,1)
(2,4,1)
(58,33,1)
(59,10,1)
(14,31,1)
(46,5,1)
(50,0,1)
(23,39,1)
(44,17,1)
(54,29,1)
(7,60,1)
(5,65,1)
(66,61,1)
(65,4,1)
(26,0,1)
(4,57,1)
(39,4,1)
(10,4,1)
(7,19,1)
(57,54,1)
(22,15,1)
(29,33,1)
(66,31,1)
(47,30,1)
(51,58,1)
(27,12,1)
(60,19,1)
(50,66,1)
(22,0,1)
(20,28,1)
(58,62,1)
(47,59,1)
(17,43,1)
(62,63,1)
(57,0,1)
(31,22,1)
(26,21,1)
(58,35,1)
(45,10,1)
(1,53,1)
(12,35,1)
(30,59,1)
(16,47,1)
(40,26,1)
(49,36,1)
(19,0,1)
(1,2,1)
(2,25,1)
(36,31,1)
(38,46,1)
(25,45,1)
(35,7,1)
(65,23,1)
(58,5,1)
(21,20,1)
(30,5,2)
(45,5,2)
(44,14,2)
(43,14,2)
(24,47,2)
(12,35,2)
(2,4,2)
(46,5,2)
(63,35,2)
(19,0,2)
(59,5,2)
(49,47,2)
(47,5,2)
(37,51,2)
(22,47,2)
(22,0,2)
(19,9,2)
(7,14,2)
(4,33,2)
(65,4,2)
(41,33,2)
(1,5,2)
(5,65,2)
(35,7,2)
(39,33,2)
(10,4,2)
(21,47,2)
(57,33,2)
(51,0,2)
(62,35,2)
(64,47,2)
(16,47,2)
(14,31,2)
(17,14,2)
(10,5,2)
(4,57,2)
(66,31,2)
(10,0,2)
(65,33,2)
(14,47,2)
(20,47,2)
(29,33,2)
(35,47,2)
(35,14,2)
(36,47,2)
(1,53,2)
(52,5,2)
(54,33,2)
(9,14,2)
(50,35,2)
(26,0,2)
(9,31,2)
(5,33,2)
(7,19,2)
(19,14,2)
(26,4,2)
(1,2,2)
(38,5,2)
(50,66,2)
(57,0,2)
(31,47,2)
(28,47,2)
(15,47,2)
(40,47,2)
(50,0,2)
(2,5,2)
(59,10,2)
(31,22,2)
(66,35,2)
(26,47,2)
(25,5,2)
(27,35,2)
(60,14,2)
(59,1,2)
(47,59,2)
(23,33,2)
(61,35,2)
-----------------------------------
(0,char * data)
(1,(int)
(2,100-dataLen)
(3,)
(4,dataLen = strlen(data)
(5,100-dataLen > 1)
(6,)
(7,data[dataLen-1] == \\\'\\\\n\\\')
(8,)
(9,dataLen-1)
(10,data+dataLen)
(11,if (fgets(data+dataLen, (int)
(12,data)
(13,)
(14,dataLen > 0)
(15,data)
(16,dataLen)
(17,dataLen)
(18,if(badStatic)
(19,data[dataLen-1])
(20,data)
(21,dataLen)
(22,strlen(data)
(23,dataLen)
(24,"fgets()
(25,dataLen)
(26,data[dataLen])
(27,dataLen)
(28,printLine("fgets()
(29,dataLen)
(30,NULL)
(31,dataLen = strlen(data)
(32,if (100-dataLen > 1)
(33,badStatic)
(34,)
(35,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(36,dataLen)
(37,RET)
(38,dataLen)
(39,100)
(40,\\\'\\\\0\\\')
(41,1)
(42,dataLen)
(43,data)
(44,1)
(45,100)
(46,data)
(47,fgets(data+dataLen, (int)
(48,)
(49,0)
(50,data[dataLen-1])
(51,return data;)
(52,stdin)
(53,int)
(54,data)
(55,)
(56,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(57,strlen(data)
(58,data)
(59,fgets(data+dataLen, (int)
(60,\\\'\\\\n\\\')
(61,1)
(62,data[dataLen-1] = \\\'\\\\0\\\')
(63,\\\'\\\\0\\\')
(64,data[dataLen] = \\\'\\\\0\\\')
(65,100-dataLen)
(66,dataLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
