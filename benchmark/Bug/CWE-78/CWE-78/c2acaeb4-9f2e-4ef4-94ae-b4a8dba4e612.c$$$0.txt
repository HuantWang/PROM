-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnv_31_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* spawnv - specify the path where the command is located */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
61,64
61,65
62,63
64,65
64,66
65,66
67,68
69,70
71,72
71,73
72,73
72,74
74,75
77,78
77,79
77,80
78,79
79,80
79,81
81,82
81,83
81,84
84,85
85,86
87,88
88,89
88,90
90,91
90,92
90,93
93,94
94,95
96,97
96,98
97,98
98,99
98,100
100,101
100,102
100,103
100,104
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
114,115
115,116
115,117
115,118
115,119
116,117
118,119
120,121
122,123
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,43,45,46,50,52,56,58,63,66,68,70,73,75,76,80,82,83,86,89,91,92,95,99,101,102,103,107,109,111,113,117,119,121,123
-----computeFrom-----
23,24
23,25
54,55
54,56
64,65
64,66
71,72
71,73
72,73
72,74
-----guardedBy-----
56,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnv_31_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        char * dataCopy = data;        char * data = dataCopy;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
void
CWE78_OS_Command_Injection__char_environment_w32_spawnv_31_bad()
CWE78_OS_Command_Injection__char_environment_w32_spawnv_31_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        char * dataCopy = data;        char * data = dataCopy;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        char * dataCopy = data;        char * data = dataCopy;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(26,3,0)
(23,6,0)
(51,30,0)
(42,44,0)
(46,1,0)
(36,5,0)
(7,35,0)
(37,12,0)
(16,4,0)
(49,31,0)
(29,30,0)
(8,31,0)
(18,23,0)
(12,19,0)
(48,44,0)
(21,12,0)
(1,45,0)
(24,19,0)
(19,22,0)
(18,35,0)
(27,22,0)
(20,45,0)
(48,31,0)
(23,18,0)
(9,3,0)
(14,11,0)
(25,5,0)
(45,30,0)
(43,18,0)
(12,23,0)
(50,1,0)
(11,19,0)
(28,29,0)
(29,11,0)
(22,4,0)
(15,35,0)
(40,20,0)
(44,48,0)
(44,19,0)
(38,25,0)
(10,1,0)
(3,5,0)
(23,12,0)
(47,4,0)
(5,25,0)
(13,45,0)
(19,4,0)
(12,48,0)
(35,48,0)
(41,31,0)
(30,4,0)
(0,30,0)
(52,23,0)
(35,18,0)
(17,48,0)
(11,30,0)
(1,20,0)
(5,31,0)
(31,4,0)
(2,11,0)
(33,19,0)
(23,5,0)
(34,22,0)
(32,29,0)
(37,21,1)
(50,10,1)
(19,24,1)
(29,32,1)
(12,37,1)
(44,42,1)
(10,46,1)
(52,12,1)
(36,48,1)
(42,17,1)
(23,5,1)
(17,19,1)
(2,14,1)
(14,23,1)
(33,22,1)
(20,40,1)
(3,5,1)
(35,15,1)
(14,3,1)
(18,35,1)
(3,26,1)
(5,25,1)
(7,43,1)
(21,3,1)
(19,22,1)
(27,34,1)
(26,9,1)
(43,52,1)
(12,19,1)
(38,36,1)
(48,44,1)
(24,33,1)
(1,20,1)
(35,48,1)
(15,7,1)
(23,12,1)
(12,48,1)
(22,27,1)
(40,29,1)
(28,11,1)
(9,5,1)
(39,1,1)
(32,28,1)
(25,38,1)
(23,18,1)
(1,50,1)
(46,20,1)
(44,19,1)
(11,2,1)
(11,19,1)
(29,11,1)
(12,19,2)
(19,22,2)
(7,3,2)
(21,3,2)
(3,5,2)
(12,48,2)
(35,3,2)
(43,3,2)
(11,19,2)
(12,3,2)
(35,48,2)
(52,3,2)
(15,3,2)
(23,18,2)
(18,35,2)
(29,11,2)
(23,3,2)
(23,12,2)
(5,25,2)
(37,3,2)
(23,5,2)
(18,3,2)
(1,20,2)
(44,19,2)
(48,44,2)
-----------------------------------
(0,data)
(1,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(2,data)
(3,environment != NULL)
(4,)
(5,* environment = GETENV(ENV_VARIABLE)
(6,)
(7,dataLen)
(8,environment)
(9,environment)
(10,COMMAND_INT_PATH)
(11,* dataCopy = data)
(12,data+dataLen)
(13,args)
(14,dataCopy)
(15,1)
(16,data)
(17,dataLen)
(18,100-dataLen-1)
(19,data = dataBuffer)
(20,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(21,data)
(22,dataBuffer[100] = COMMAND_ARG2)
(23,strncat(data+dataLen, environment, 100-dataLen-1)
(24,dataBuffer)
(25,GETENV(ENV_VARIABLE)
(26,NULL)
(27,COMMAND_ARG2)
(28,data)
(29,* data = dataCopy)
(30,)
(31,)
(32,dataCopy)
(33,data)
(34,dataBuffer)
(35,dataLen-1)
(36,environment)
(37,dataLen)
(38,ENV_VARIABLE)
(39,RET)
(40,args)
(41,if (environment != NULL)
(42,data)
(43,100)
(44,strlen(data)
(45,)
(46,_P_WAIT)
(47,dataBuffer)
(48,dataLen = strlen(data)
(49,dataLen)
(50,args)
(51,dataCopy)
(52,environment)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
