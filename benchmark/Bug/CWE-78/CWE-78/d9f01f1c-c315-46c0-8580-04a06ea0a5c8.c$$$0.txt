-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(55,30,0)
(55,28,0)
(32,30,0)
(34,23,0)
(10,30,0)
(28,17,0)
(5,47,0)
(39,34,0)
(56,26,0)
(23,2,0)
(55,43,0)
(61,3,0)
(36,35,0)
(62,42,0)
(44,17,0)
(23,34,0)
(18,2,0)
(52,32,0)
(13,28,0)
(24,59,0)
(6,32,0)
(60,66,0)
(59,63,0)
(65,56,0)
(52,51,0)
(9,12,0)
(14,7,0)
(64,28,0)
(8,52,0)
(10,12,0)
(2,56,0)
(38,51,0)
(1,30,0)
(59,66,0)
(16,26,0)
(32,7,0)
(21,46,0)
(3,35,0)
(25,55,0)
(35,28,0)
(51,1,0)
(34,51,0)
(66,30,0)
(40,10,0)
(20,24,0)
(43,37,0)
(66,59,0)
(58,35,0)
(51,42,0)
(27,17,0)
(2,23,0)
(22,64,0)
(46,28,0)
(1,51,0)
(41,66,0)
(11,1,0)
(24,64,0)
(35,3,0)
(19,43,0)
(7,33,0)
(63,59,0)
(53,37,0)
(56,30,0)
(26,56,0)
(49,59,0)
(59,24,0)
(56,2,0)
(4,34,0)
(15,53,0)
(66,28,0)
(24,20,0)
(17,0,0)
(26,51,0)
(32,52,0)
(64,24,0)
(50,63,0)
(45,52,0)
(28,46,0)
(57,55,0)
(31,26,0)
(29,64,0)
(46,30,0)
(48,10,0)
(19,55,1)
(11,38,1)
(26,51,1)
(7,14,1)
(15,63,1)
(52,8,1)
(52,51,1)
(3,35,1)
(48,3,1)
(57,53,1)
(35,36,1)
(24,64,1)
(2,18,1)
(23,2,1)
(43,19,1)
(53,15,1)
(48,54,1)
(45,6,1)
(29,22,1)
(26,16,1)
(40,10,1)
(59,24,1)
(65,34,1)
(60,41,1)
(23,34,1)
(61,35,1)
(35,28,1)
(59,66,1)
(56,26,1)
(3,61,1)
(46,21,1)
(41,3,1)
(28,46,1)
(1,11,1)
(58,28,1)
(48,43,1)
(48,23,1)
(8,45,1)
(22,66,1)
(1,30,1)
(64,28,1)
(55,28,1)
(31,65,1)
(46,30,1)
(38,63,1)
(63,50,1)
(51,1,1)
(50,59,1)
(21,13,1)
(32,30,1)
(14,32,1)
(24,20,1)
(34,51,1)
(10,48,1)
(6,23,1)
(63,59,1)
(2,56,1)
(25,57,1)
(66,30,1)
(59,49,1)
(64,29,1)
(49,24,1)
(39,4,1)
(66,60,1)
(56,30,1)
(13,54,1)
(55,30,1)
(32,52,1)
(66,28,1)
(34,39,1)
(10,30,1)
(36,58,1)
(18,56,1)
(48,7,1)
(55,25,1)
(4,51,1)
(16,31,1)
(59,66,2)
(7,23,2)
(1,30,2)
(56,34,2)
(15,63,2)
(59,3,2)
(22,3,2)
(66,3,2)
(26,51,2)
(10,30,2)
(51,1,2)
(53,63,2)
(23,2,2)
(35,28,2)
(59,24,2)
(2,56,2)
(63,3,2)
(64,3,2)
(38,63,2)
(19,63,2)
(31,34,2)
(49,3,2)
(60,3,2)
(8,23,2)
(34,51,2)
(55,63,2)
(11,63,2)
(29,3,2)
(57,63,2)
(45,23,2)
(66,30,2)
(23,63,2)
(46,30,2)
(4,63,2)
(32,52,2)
(32,23,2)
(26,34,2)
(36,54,2)
(55,28,2)
(3,35,2)
(23,34,2)
(35,54,2)
(21,54,2)
(55,30,2)
(50,3,2)
(24,64,2)
(43,63,2)
(28,46,2)
(18,34,2)
(66,28,2)
(32,30,2)
(13,54,2)
(64,28,2)
(61,54,2)
(41,3,2)
(40,10,2)
(65,34,2)
(3,54,2)
(14,23,2)
(24,20,2)
(6,23,2)
(2,34,2)
(39,63,2)
(51,63,2)
(28,54,2)
(34,63,2)
(25,63,2)
(52,23,2)
(63,59,2)
(52,51,2)
(24,3,2)
(16,34,2)
(46,54,2)
(56,30,2)
(56,26,2)
(1,63,2)
(58,54,2)
-----------------------------------
(0,)
(1,strlen(data)
(2,data[dataLen-1] == \\\'\\\\n\\\')
(3,100-dataLen > 1)
(4,dataLen)
(5,if (fgets(data+dataLen, (int)
(6,data)
(7,data[dataLen-1] = \\\'\\\\0\\\')
(8,1)
(9,if(badStatic)
(10,return data;)
(11,data)
(12,)
(13,dataLen)
(14,\\\'\\\\0\\\')
(15,"fgets()
(16,1)
(17,)
(18,\\\'\\\\n\\\')
(19,\\\'\\\\0\\\')
(20,int)
(21,data)
(22,100)
(23,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(24,(int)
(25,dataLen)
(26,dataLen-1)
(27,if (100-dataLen > 1)
(28,dataLen = strlen(data)
(29,dataLen)
(30,char * data)
(31,dataLen)
(32,data[dataLen-1])
(33,)
(34,dataLen > 0)
(35,100-dataLen)
(36,dataLen)
(37,)
(38,dataLen)
(39,0)
(40,RET)
(41,data)
(42,)
(43,data[dataLen] = \\\'\\\\0\\\')
(44,dataLen)
(45,dataLen)
(46,strlen(data)
(47,)
(48,data)
(49,stdin)
(50,NULL)
(51,dataLen = strlen(data)
(52,dataLen-1)
(53,printLine("fgets()
(54,badStatic)
(55,data[dataLen])
(56,data[dataLen-1])
(57,data)
(58,100)
(59,fgets(data+dataLen, (int)
(60,dataLen)
(61,1)
(62,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(63,fgets(data+dataLen, (int)
(64,100-dataLen)
(65,data)
(66,data+dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
