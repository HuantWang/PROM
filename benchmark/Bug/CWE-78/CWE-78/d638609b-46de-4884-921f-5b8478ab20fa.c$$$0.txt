-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_63_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink
&data
data
data
-----joern-----
(50,12,0)
(47,6,0)
(18,20,0)
(46,53,0)
(52,38,0)
(51,22,0)
(22,27,0)
(44,6,0)
(51,1,0)
(26,27,0)
(53,1,0)
(37,53,0)
(70,3,0)
(5,1,0)
(19,6,0)
(44,27,0)
(11,8,0)
(7,14,0)
(21,3,0)
(3,21,0)
(32,20,0)
(45,56,0)
(68,55,0)
(12,50,0)
(48,62,0)
(34,22,0)
(25,29,0)
(60,17,0)
(29,33,0)
(40,71,0)
(13,17,0)
(16,18,0)
(29,2,0)
(0,24,0)
(62,18,0)
(54,49,0)
(10,51,0)
(8,50,0)
(29,53,0)
(20,18,0)
(50,16,0)
(31,65,0)
(66,2,0)
(2,17,0)
(42,33,0)
(27,22,0)
(69,2,0)
(43,16,0)
(62,8,0)
(4,71,0)
(28,24,0)
(49,1,0)
(49,2,0)
(30,24,0)
(65,2,0)
(62,2,0)
(21,24,0)
(2,24,0)
(22,51,0)
(35,68,0)
(9,30,0)
(23,16,0)
(17,24,0)
(8,62,0)
(4,18,0)
(18,30,0)
(1,49,0)
(27,44,0)
(65,18,0)
(53,29,0)
(6,44,0)
(50,8,0)
(16,50,0)
(65,68,0)
(64,4,0)
(3,2,0)
(14,55,0)
(36,51,0)
(63,67,0)
(15,62,0)
(59,65,0)
(39,30,0)
(33,57,0)
(1,56,0)
(58,4,0)
(6,1,0)
(67,8,0)
(41,18,0)
(20,2,0)
(71,4,0)
(22,2,0)
(8,67,0)
(70,44,1)
(22,2,1)
(50,16,1)
(6,1,1)
(14,7,1)
(65,59,1)
(8,62,1)
(65,2,1)
(8,11,1)
(63,8,1)
(51,10,1)
(50,12,1)
(29,53,1)
(42,29,1)
(43,23,1)
(31,14,1)
(44,6,1)
(67,63,1)
(44,27,1)
(37,25,1)
(35,65,1)
(64,58,1)
(54,5,1)
(5,67,1)
(70,68,1)
(41,2,1)
(20,32,1)
(15,48,1)
(62,18,1)
(20,2,1)
(69,66,1)
(71,4,1)
(11,50,1)
(17,60,1)
(4,18,1)
(61,21,1)
(18,20,1)
(21,3,1)
(22,51,1)
(25,44,1)
(47,1,1)
(16,18,1)
(70,71,1)
(70,33,1)
(29,2,1)
(8,50,1)
(71,40,1)
(19,47,1)
(34,6,1)
(7,67,1)
(51,1,1)
(49,54,1)
(48,71,1)
(2,17,1)
(40,4,1)
(49,2,1)
(1,49,1)
(53,1,1)
(59,31,1)
(2,69,1)
(62,15,1)
(3,70,1)
(26,22,1)
(27,26,1)
(23,62,1)
(62,2,1)
(66,17,1)
(27,22,1)
(3,2,1)
(65,18,1)
(46,37,1)
(6,19,1)
(67,8,1)
(10,36,1)
(58,18,1)
(53,46,1)
(33,42,1)
(36,34,1)
(4,64,1)
(60,13,1)
(32,41,1)
(16,43,1)
(68,35,1)
(5,67,2)
(35,67,2)
(62,71,2)
(7,67,2)
(1,49,2)
(21,3,2)
(65,2,2)
(51,6,2)
(37,44,2)
(65,67,2)
(25,44,2)
(34,6,2)
(8,62,2)
(2,17,2)
(68,67,2)
(16,18,2)
(1,67,2)
(15,71,2)
(27,22,2)
(47,67,2)
(62,2,2)
(16,71,2)
(65,18,2)
(51,1,2)
(44,6,2)
(50,71,2)
(62,18,2)
(26,6,2)
(53,1,2)
(49,67,2)
(22,2,2)
(46,44,2)
(67,8,2)
(27,6,2)
(11,71,2)
(22,6,2)
(53,44,2)
(50,12,2)
(67,71,2)
(31,67,2)
(8,71,2)
(33,44,2)
(22,51,2)
(63,71,2)
(18,20,2)
(20,2,2)
(71,4,2)
(4,18,2)
(29,2,2)
(36,6,2)
(29,53,2)
(44,27,2)
(29,44,2)
(48,71,2)
(50,16,2)
(54,67,2)
(44,67,2)
(23,71,2)
(8,50,2)
(43,71,2)
(10,6,2)
(19,67,2)
(6,67,2)
(59,67,2)
(49,2,2)
(6,1,2)
(42,44,2)
(14,67,2)
(3,2,2)
-----------------------------------
(0,dataBuffer)
(1,dataLen = strlen(data)
(2,data = dataBuffer)
(3,&data)
(4,100-dataLen)
(5,dataLen)
(6,dataLen > 0)
(7,"fgets()
(8,fgets(data+dataLen, (int)
(9,if (100-dataLen > 1)
(10,1)
(11,stdin)
(12,int)
(13,dataBuffer)
(14,printLine("fgets()
(15,dataLen)
(16,100-dataLen)
(17,dataBuffer[100] = COMMAND_ARG2)
(18,dataLen = strlen(data)
(19,0)
(20,strlen(data)
(21,CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data)
(22,data[dataLen-1])
(23,100)
(24,)
(25,data)
(26,\\\'\\\\n\\\')
(27,data[dataLen-1] == \\\'\\\\n\\\')
(28,data)
(29,data[dataLen-1])
(30,)
(31,data)
(32,data)
(33,data[dataLen-1] = \\\'\\\\0\\\')
(34,data)
(35,\\\'\\\\0\\\')
(36,dataLen)
(37,dataLen)
(38,)
(39,dataLen)
(40,1)
(41,dataLen)
(42,\\\'\\\\0\\\')
(43,dataLen)
(44,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(45,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(46,1)
(47,dataLen)
(48,data)
(49,strlen(data)
(50,(int)
(51,dataLen-1)
(52,if (fgets(data+dataLen, (int)
(53,dataLen-1)
(54,data)
(55,)
(56,)
(57,)
(58,100)
(59,dataLen)
(60,COMMAND_ARG2)
(61,RET)
(62,data+dataLen)
(63,NULL)
(64,dataLen)
(65,data[dataLen])
(66,data)
(67,fgets(data+dataLen, (int)
(68,data[dataLen] = \\\'\\\\0\\\')
(69,dataBuffer)
(70,data)
(71,100-dataLen > 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
