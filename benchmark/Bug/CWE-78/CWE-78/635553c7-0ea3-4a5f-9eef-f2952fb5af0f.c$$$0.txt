-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_execlp_63_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    CWE78_OS_Command_Injection__wchar_t_console_execlp_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_execlp_63_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    CWE78_OS_Command_Injection__wchar_t_console_execlp_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__wchar_t_console_execlp_63_bad()
CWE78_OS_Command_Injection__wchar_t_console_execlp_63_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    CWE78_OS_Command_Injection__wchar_t_console_execlp_63b_badSink(&data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
CWE78_OS_Command_Injection__wchar_t_console_execlp_63b_badSink(&data);
CWE78_OS_Command_Injection__wchar_t_console_execlp_63b_badSink(&data)
CWE78_OS_Command_Injection__wchar_t_console_execlp_63b_badSink
CWE78_OS_Command_Injection__wchar_t_console_execlp_63b_badSink
&data
data
data
-----joern-----
(42,27,0)
(44,27,0)
(31,29,0)
(0,42,0)
(29,7,0)
(26,49,0)
(7,29,0)
(30,25,0)
(3,28,0)
(43,31,0)
(49,9,0)
(11,31,0)
(29,31,0)
(33,38,0)
(1,34,0)
(19,17,0)
(38,40,0)
(28,38,0)
(14,9,0)
(6,40,0)
(49,26,0)
(28,36,0)
(29,23,0)
(7,49,0)
(1,10,0)
(31,11,0)
(13,32,0)
(37,7,0)
(2,40,0)
(23,29,0)
(8,34,0)
(40,32,0)
(41,9,0)
(18,47,0)
(20,10,0)
(31,25,0)
(25,31,0)
(34,40,0)
(45,49,0)
(11,40,0)
(34,1,0)
(17,49,0)
(17,48,0)
(9,10,0)
(15,17,0)
(40,10,0)
(22,32,0)
(24,10,0)
(26,40,0)
(4,26,0)
(21,7,0)
(16,11,0)
(32,10,0)
(35,36,0)
(11,49,0)
(46,11,0)
(5,35,0)
(38,28,0)
(48,17,0)
(39,48,0)
(5,28,1)
(43,29,1)
(17,19,1)
(3,25,1)
(15,49,1)
(48,17,1)
(38,40,1)
(7,49,1)
(25,30,1)
(0,25,1)
(25,31,1)
(48,39,1)
(4,45,1)
(38,33,1)
(31,29,1)
(40,2,1)
(33,3,1)
(11,46,1)
(29,23,1)
(13,22,1)
(17,49,1)
(32,13,1)
(21,37,1)
(26,40,1)
(28,38,1)
(8,5,1)
(19,15,1)
(34,8,1)
(44,42,1)
(1,34,1)
(2,6,1)
(31,11,1)
(39,17,1)
(37,11,1)
(11,40,1)
(31,43,1)
(49,26,1)
(6,32,1)
(7,21,1)
(34,40,1)
(16,48,1)
(40,32,1)
(11,49,1)
(12,1,1)
(45,40,1)
(46,16,1)
(42,0,1)
(30,31,1)
(8,44,1)
(26,4,1)
(8,48,1)
(29,7,1)
(34,40,2)
(31,29,2)
(38,40,2)
(40,32,2)
(1,34,2)
(46,48,2)
(11,40,2)
(37,48,2)
(17,49,2)
(31,11,2)
(28,25,2)
(21,48,2)
(44,25,2)
(7,48,2)
(29,48,2)
(3,25,2)
(16,48,2)
(26,40,2)
(5,25,2)
(48,17,2)
(7,49,2)
(25,48,2)
(28,38,2)
(29,7,2)
(11,48,2)
(38,25,2)
(25,31,2)
(11,49,2)
(42,25,2)
(29,23,2)
(43,48,2)
(33,25,2)
(0,25,2)
(31,48,2)
(49,26,2)
(30,48,2)
-----------------------------------
(0,"fgetws()
(1,CWE78_OS_Command_Injection__wchar_t_console_execlp_63b_badSink(&data)
(2,dataBuffer)
(3,dataLen)
(4,data)
(5,\\\'\\\\0\\\')
(6,data)
(7,100-dataLen)
(8,data)
(9,)
(10,)
(11,data+dataLen)
(12,RET)
(13,COMMAND_ARG2)
(14,if (100-dataLen > 1)
(15,100)
(16,data)
(17,100-dataLen)
(18,if (fgetws(data+dataLen, (int)
(19,dataLen)
(20,data)
(21,dataLen)
(22,dataBuffer)
(23,int)
(24,dataBuffer)
(25,fgetws(data+dataLen, (int)
(26,wcslen(data)
(27,)
(28,dataLen = wcslen(data)
(29,(int)
(30,NULL)
(31,fgetws(data+dataLen, (int)
(32,dataBuffer[100] = COMMAND_ARG2)
(33,data)
(34,&data)
(35,)
(36,)
(37,100)
(38,wcslen(data)
(39,1)
(40,data = dataBuffer)
(41,dataLen)
(42,printLine("fgetws()
(43,stdin)
(44,\\\'\\\\0\\\')
(45,dataLen)
(46,dataLen)
(47,)
(48,100-dataLen > 1)
(49,dataLen = wcslen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
