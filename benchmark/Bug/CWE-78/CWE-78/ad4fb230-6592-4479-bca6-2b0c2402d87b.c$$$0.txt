-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        char * data = *dataPtr1;
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            FILE *pipe;
            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
            pipe = POPEN(data, "w");
            if (pipe != NULL)
            {
                PCLOSE(pipe);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
78,79
81,82
82,83
82,84
82,85
83,84
83,85
84,85
84,86
84,87
84,88
85,86
87,88
87,89
88,89
90,91
92,93
92,94
93,94
93,95
96,97
97,98
97,99
99,100
101,102
103,104
105,106
105,107
106,107
107,108
107,109
108,109
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
125,126
125,127
126,127
130,131
131,132
132,133
132,134
133,134
133,135
134,135
136,137
136,138
137,138
141,142
141,143
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
149,151
150,151
152,153
155,156
156,157
156,158
157,158
158,159
160,161
162,163
162,164
163,164
164,165
164,166
166,167
166,168
166,169
169,170
170,171
171,172
173,174
173,175
173,176
174,175
175,176
175,177
176,177
178,179
178,180
181,182
182,183
182,184
183,184
185,186
185,187
185,188
186,187
188,189
191,192
191,193
192,193
192,194
193,194
195,196
197,198
198,199
199,200
199,201
200,201
202,203
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,77,79,80,86,89,91,94,95,98,100,102,104,109,112,114,119,120,124,127,128,129,135,138,139,140,145,146,151,153,154,159,161,165,167,168,172,177,179,180,184,187,189,190,194,196,201,203
-----computeFrom-----
45,46
45,47
75,76
75,77
76,77
76,78
83,84
83,85
87,88
87,89
97,98
97,99
107,108
107,109
116,117
116,118
117,118
117,119
121,122
121,123
125,126
125,127
132,133
132,134
136,137
136,138
148,149
148,150
156,157
156,158
182,183
182,184
192,193
192,194
-----guardedBy-----
79,153
89,135
100,138
124,135
127,138
194,203
-----guardedByNegation-----
89,151
100,153
-----lastLexicalUse-----
89,151
100,153
-----jump-----
89,151
100,153
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
void
CWE78_OS_Command_Injection__char_console_popen_32_bad()
CWE78_OS_Command_Injection__char_console_popen_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)            {                PCLOSE(pipe);            }
pipe != NULL
pipe
pipe
NULL
NULL
{                PCLOSE(pipe);            }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(53,34,0)
(97,13,0)
(5,4,0)
(65,97,0)
(72,52,0)
(72,36,0)
(68,3,0)
(58,45,0)
(9,69,0)
(33,36,0)
(57,67,0)
(54,2,0)
(67,91,0)
(50,100,0)
(46,54,0)
(27,7,0)
(69,36,0)
(51,25,0)
(80,52,0)
(23,36,0)
(97,103,0)
(11,90,0)
(95,35,0)
(37,90,0)
(3,52,0)
(62,78,0)
(103,19,0)
(18,89,0)
(69,89,0)
(96,58,0)
(75,90,0)
(100,52,0)
(78,90,0)
(58,54,0)
(70,2,0)
(88,45,0)
(98,23,0)
(48,25,0)
(103,97,0)
(34,54,0)
(89,90,0)
(30,13,0)
(3,76,0)
(55,78,0)
(0,33,0)
(41,100,0)
(33,52,0)
(25,7,0)
(16,72,0)
(56,32,0)
(63,71,0)
(79,54,0)
(104,49,0)
(25,36,0)
(77,32,0)
(91,24,0)
(36,69,0)
(38,7,0)
(46,27,0)
(45,63,0)
(29,14,0)
(66,48,0)
(83,90,0)
(35,32,0)
(76,21,0)
(39,84,0)
(45,58,0)
(32,77,0)
(93,52,0)
(48,54,0)
(19,40,0)
(61,64,0)
(82,83,0)
(35,13,0)
(27,46,0)
(84,60,0)
(52,72,0)
(43,63,0)
(49,103,0)
(64,67,0)
(20,103,0)
(7,27,0)
(54,34,0)
(34,36,0)
(47,93,0)
(60,90,0)
(13,35,0)
(106,18,0)
(49,12,0)
(91,67,0)
(100,107,0)
(1,19,0)
(108,46,0)
(6,83,0)
(87,93,0)
(107,100,0)
(42,40,0)
(99,23,0)
(83,78,0)
(67,64,0)
(33,67,0)
(59,36,0)
(36,60,0)
(28,98,0)
(17,90,0)
(22,97,0)
(26,3,0)
(14,103,0)
(93,91,0)
(102,46,0)
(89,18,0)
(24,91,0)
(101,21,0)
(94,107,0)
(13,40,0)
(3,36,0)
(7,25,0)
(105,101,0)
(8,60,0)
(45,36,0)
(81,48,0)
(31,14,0)
(44,33,0)
(52,84,0)
(23,60,0)
(92,58,0)
(73,19,0)
(91,93,0)
(25,48,0)
(74,89,0)
(67,33,0)
(15,84,0)
(86,77,0)
(85,76,0)
(40,90,0)
(98,89,0)
(32,90,0)
(54,34,1)
(30,23,1)
(25,48,1)
(81,66,1)
(96,92,1)
(41,52,1)
(38,25,1)
(86,56,1)
(27,7,1)
(31,29,1)
(10,49,1)
(92,88,1)
(101,105,1)
(59,83,1)
(34,53,1)
(48,81,1)
(79,64,1)
(3,52,1)
(55,32,1)
(50,41,1)
(32,77,1)
(3,68,1)
(67,57,1)
(33,52,1)
(72,16,1)
(33,44,1)
(66,51,1)
(68,26,1)
(69,89,1)
(97,13,1)
(28,107,1)
(105,64,1)
(14,31,1)
(91,24,1)
(64,61,1)
(13,35,1)
(107,94,1)
(45,36,1)
(80,36,1)
(104,14,1)
(28,76,1)
(67,33,1)
(7,38,1)
(100,52,1)
(9,59,1)
(99,98,1)
(102,108,1)
(28,63,1)
(7,25,1)
(29,103,1)
(33,36,1)
(35,32,1)
(47,33,1)
(61,67,1)
(58,96,1)
(28,27,1)
(26,101,1)
(34,36,1)
(94,100,1)
(83,78,1)
(20,13,1)
(49,103,1)
(46,54,1)
(14,103,1)
(89,18,1)
(103,97,1)
(63,43,1)
(45,58,1)
(108,54,1)
(67,91,1)
(36,69,1)
(69,9,1)
(91,93,1)
(53,79,1)
(22,65,1)
(23,36,1)
(83,6,1)
(43,45,1)
(51,46,1)
(95,30,1)
(25,36,1)
(27,46,1)
(93,87,1)
(76,85,1)
(87,47,1)
(85,3,1)
(23,99,1)
(100,50,1)
(98,89,1)
(52,72,1)
(48,54,1)
(77,86,1)
(88,27,1)
(49,104,1)
(10,14,1)
(64,67,1)
(35,95,1)
(3,36,1)
(46,102,1)
(82,78,1)
(16,80,1)
(106,74,1)
(18,106,1)
(62,55,1)
(107,100,1)
(44,0,1)
(97,22,1)
(98,28,1)
(93,52,1)
(56,89,1)
(58,54,1)
(0,107,1)
(65,20,1)
(6,82,1)
(57,91,1)
(72,36,1)
(78,62,1)
(91,93,2)
(58,54,2)
(97,13,2)
(0,107,2)
(7,25,2)
(36,69,2)
(72,36,2)
(3,64,2)
(34,36,2)
(61,107,2)
(102,64,2)
(100,52,2)
(45,36,2)
(47,107,2)
(26,64,2)
(44,107,2)
(57,107,2)
(68,64,2)
(53,64,2)
(33,107,2)
(32,77,2)
(104,14,2)
(88,27,2)
(98,89,2)
(52,72,2)
(46,64,2)
(27,7,2)
(34,64,2)
(51,46,2)
(49,103,2)
(33,52,2)
(25,36,2)
(66,46,2)
(83,78,2)
(45,58,2)
(79,64,2)
(25,48,2)
(85,64,2)
(27,46,2)
(3,36,2)
(96,27,2)
(13,35,2)
(7,46,2)
(89,18,2)
(27,64,2)
(105,64,2)
(64,67,2)
(33,36,2)
(43,27,2)
(91,107,2)
(107,100,2)
(58,27,2)
(76,64,2)
(81,46,2)
(63,27,2)
(69,89,2)
(92,27,2)
(48,54,2)
(101,64,2)
(54,64,2)
(46,54,2)
(103,97,2)
(38,46,2)
(64,107,2)
(49,14,2)
(25,46,2)
(93,52,2)
(87,107,2)
(91,24,2)
(48,46,2)
(108,64,2)
(67,33,2)
(67,107,2)
(35,32,2)
(93,107,2)
(3,52,2)
(45,27,2)
(14,103,2)
(23,36,2)
(54,34,2)
(67,91,2)
-----------------------------------
(0,data)
(1,pipe)
(2,)
(3,data[dataLen])
(4,)
(5,if (fgets(data+dataLen, (int)
(6,data_buf)
(7,data[dataLen-1] == \\\'\\\\n\\\')
(8,data)
(9,dataPtr1)
(10,RET)
(11,dataPtr2)
(12,)
(13,* data = *dataPtr2)
(14,pipe != NULL)
(15,if (100-dataLen > 1)
(16,data)
(17,data)
(18,&data)
(19,)
(20,pipe)
(21,)
(22,"w")
(23,*dataPtr1 = data)
(24,int)
(25,data[dataLen-1])
(26,data)
(27,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(28,dataPtr1)
(29,pipe)
(30,data)
(31,NULL)
(32,* *dataPtr2 = &data)
(33,data+dataLen)
(34,strlen(data)
(35,*dataPtr2)
(36,* data = *dataPtr1)
(37,data_buf)
(38,\\\'\\\\n\\\')
(39,dataLen)
(40,)
(41,100)
(42,data)
(43,\\\'\\\\0\\\')
(44,dataLen)
(45,data[dataLen-1])
(46,dataLen > 0)
(47,100)
(48,dataLen-1)
(49,PCLOSE(pipe)
(50,dataLen)
(51,data)
(52,dataLen = strlen(data)
(53,data)
(54,dataLen = strlen(data)
(55,data_buf)
(56,dataPtr2)
(57,stdin)
(58,dataLen-1)
(59,data)
(60,)
(61,NULL)
(62,FULL_COMMAND)
(63,data[dataLen-1] = \\\'\\\\0\\\')
(64,fgets(data+dataLen, (int)
(65,data)
(66,dataLen)
(67,fgets(data+dataLen, (int)
(68,dataLen)
(69,*dataPtr1)
(70,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(71,)
(72,strlen(data)
(73,if (pipe != NULL)
(74,dataPtr1)
(75,dataPtr1)
(76,data[dataLen] = \\\'\\\\0\\\')
(77,&data)
(78,data_buf[100] = FULL_COMMAND)
(79,dataLen)
(80,dataLen)
(81,1)
(82,data)
(83,data = data_buf)
(84,)
(85,\\\'\\\\0\\\')
(86,data)
(87,dataLen)
(88,data)
(89,* *dataPtr1 = &data)
(90,)
(91,(int)
(92,dataLen)
(93,100-dataLen)
(94,1)
(95,dataPtr2)
(96,1)
(97,POPEN(data, "w")
(98,*dataPtr1)
(99,data)
(100,100-dataLen)
(101,printLine("fgets()
(102,0)
(103,pipe = POPEN(data, "w")
(104,pipe)
(105,"fgets()
(106,data)
(107,100-dataLen > 1)
(108,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
