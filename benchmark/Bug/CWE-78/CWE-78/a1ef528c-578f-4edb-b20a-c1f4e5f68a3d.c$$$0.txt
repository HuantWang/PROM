-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    char * * dataPtr = (char * *)dataVoidPtr;
    /* dereference dataPtr into data */
    char * data = (*dataPtr);
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
14,18
18,19
19,20
19,21
20,21
20,22
22,23
22,24
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
35,36
36,37
38,39
38,40
38,41
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
51,52
53,54
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,6,8,9,13,15,16,17,21,23,24,26,29,31,32,37,42,44,45,49,52,54,55,59,61,66,68
-----computeFrom-----
47,48
47,49
57,58
57,59
-----guardedBy-----
59,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    char * * dataPtr = (char * *)dataVoidPtr;    /* dereference dataPtr into data */    char * data = (*dataPtr);    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__char_console_popen_64b_badSink(void * dataVoidPtr)
CWE78_OS_Command_Injection__char_console_popen_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    char * * dataPtr = (char * *)dataVoidPtr;    /* dereference dataPtr into data */    char * data = (*dataPtr);    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * * dataPtr = (char * *)dataVoidPtr;
char * * dataPtr = (char * *)dataVoidPtr;
char
* * dataPtr = (char * *)dataVoidPtr
*
*
dataPtr
= (char * *)dataVoidPtr
(char * *)dataVoidPtr
char * *
char
* *
*
*
dataVoidPtr
dataVoidPtr
char * data = (*dataPtr);
char * data = (*dataPtr);
char
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(6,7,0)
(8,11,0)
(0,11,0)
(9,11,0)
(20,26,0)
(12,19,0)
(21,26,0)
(27,22,0)
(16,0,0)
(26,20,0)
(19,7,0)
(15,12,0)
(7,6,0)
(4,0,0)
(24,15,0)
(1,15,0)
(21,11,0)
(25,26,0)
(14,27,0)
(27,12,0)
(6,21,0)
(17,19,0)
(13,6,0)
(26,2,0)
(26,21,0)
(7,11,0)
(18,7,0)
(12,0,0)
(3,12,0)
(5,21,0)
(10,19,0)
(19,12,0)
(10,3,1)
(3,7,1)
(21,26,1)
(26,2,1)
(7,6,1)
(26,25,1)
(23,15,1)
(26,20,1)
(27,12,1)
(14,15,1)
(25,5,1)
(24,1,1)
(1,12,1)
(13,18,1)
(18,21,1)
(12,19,1)
(15,12,1)
(15,24,1)
(6,21,1)
(17,10,1)
(6,13,1)
(23,27,1)
(27,14,1)
(19,7,1)
(19,17,1)
(27,12,2)
(12,19,2)
(6,21,2)
(15,12,2)
(14,15,2)
(26,20,2)
(26,2,2)
(21,26,2)
(27,15,2)
(19,7,2)
(7,6,2)
-----------------------------------
(0,)
(1,pipe)
(2,void * dataVoidPtr)
(3,pipe)
(4,if (pipe != NULL)
(5,dataPtr)
(6,*dataPtr)
(7,* data = (*dataPtr)
(8,data)
(9,dataPtr)
(10,data)
(11,)
(12,pipe = POPEN(data, "w")
(13,dataPtr)
(14,pipe)
(15,pipe != NULL)
(16,pipe)
(17,"w")
(18,data)
(19,POPEN(data, "w")
(20,char * *)
(21,* * dataPtr = (char * *)
(22,)
(23,RET)
(24,NULL)
(25,dataVoidPtr)
(26,(char * *)
(27,PCLOSE(pipe)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
