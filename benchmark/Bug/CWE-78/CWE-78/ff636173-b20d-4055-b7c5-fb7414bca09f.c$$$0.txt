-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_popen_02_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(1)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
31,32
31,33
31,34
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
53,55
55,56
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
90,91
91,92
91,93
93,94
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
110,111
113,114
114,115
114,116
115,116
117,118
119,120
119,121
119,122
120,121
121,122
121,123
122,123
124,125
124,126
127,128
128,129
128,130
129,130
131,132
131,133
131,134
132,133
134,135
137,138
137,139
138,139
138,140
139,140
141,142
143,144
144,145
145,146
145,147
146,147
148,149
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,35,37,41,43,47,49,50,54,56,57,62,65,67,68,72,74,80,83,85,88,89,92,94,96,98,103,104,109,111,112,116,118,123,125,126,130,133,135,136,140,142,147,149
-----computeFrom-----
23,24
23,25
52,53
52,54
53,54
53,55
60,61
60,62
70,71
70,72
77,78
77,79
81,82
81,83
91,92
91,93
106,107
106,108
128,129
128,130
138,139
138,140
-----guardedBy-----
56,111
74,98
72,118
83,109
94,111
140,149
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_popen_02_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__char_file_popen_02_bad()
CWE78_OS_Command_Injection__char_file_popen_02_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
1
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(54,2,0)
(29,4,0)
(50,13,0)
(25,21,0)
(34,41,0)
(73,49,0)
(68,37,0)
(71,45,0)
(22,29,0)
(9,10,0)
(26,47,0)
(9,34,0)
(41,34,0)
(23,22,0)
(62,54,0)
(34,33,0)
(55,26,0)
(49,29,0)
(4,29,0)
(47,21,0)
(15,26,0)
(14,6,0)
(10,9,0)
(44,31,0)
(19,2,0)
(67,25,0)
(21,2,0)
(4,21,0)
(63,43,0)
(15,3,0)
(49,21,0)
(13,27,0)
(0,47,0)
(30,29,0)
(58,28,0)
(26,54,0)
(9,49,0)
(29,31,0)
(34,9,0)
(53,31,0)
(33,29,0)
(25,29,0)
(39,13,0)
(38,49,0)
(12,28,0)
(24,33,0)
(56,27,0)
(40,55,0)
(42,2,0)
(32,54,0)
(22,46,0)
(1,55,0)
(47,26,0)
(69,21,0)
(33,34,0)
(31,60,0)
(9,13,0)
(39,6,0)
(5,9,0)
(65,4,0)
(45,13,0)
(66,25,0)
(51,15,0)
(35,46,0)
(49,9,0)
(11,22,0)
(72,26,0)
(16,2,0)
(36,47,0)
(57,37,0)
(64,21,0)
(18,45,0)
(59,10,0)
(43,2,0)
(13,45,0)
(61,33,0)
(48,31,0)
(46,22,0)
(28,13,0)
(21,43,0)
(17,68,0)
(52,39,0)
(20,57,0)
(7,43,0)
(25,57,0)
(33,29,1)
(70,15,1)
(34,41,1)
(0,72,1)
(66,67,1)
(26,47,1)
(49,21,1)
(10,59,1)
(21,64,1)
(68,17,1)
(45,18,1)
(20,25,1)
(34,33,1)
(57,20,1)
(15,51,1)
(70,55,1)
(52,57,1)
(12,13,1)
(63,7,1)
(29,4,1)
(39,13,1)
(18,71,1)
(72,8,1)
(49,29,1)
(1,40,1)
(72,28,1)
(35,22,1)
(65,30,1)
(61,24,1)
(50,46,1)
(72,46,1)
(9,5,1)
(49,73,1)
(25,21,1)
(22,29,1)
(5,34,1)
(64,69,1)
(39,52,1)
(52,10,1)
(71,50,1)
(10,9,1)
(15,26,1)
(43,63,1)
(24,49,1)
(47,21,1)
(17,10,1)
(25,29,1)
(4,65,1)
(21,43,1)
(69,43,1)
(28,58,1)
(9,49,1)
(25,66,1)
(9,34,1)
(38,28,1)
(51,55,1)
(4,21,1)
(58,12,1)
(40,26,1)
(8,21,1)
(72,39,1)
(55,26,1)
(67,68,1)
(13,45,1)
(33,61,1)
(22,11,1)
(11,23,1)
(28,13,1)
(47,36,1)
(59,9,1)
(73,38,1)
(46,22,1)
(30,8,1)
(55,1,1)
(46,35,1)
(9,13,1)
(36,0,1)
(23,29,1)
(15,55,2)
(26,47,2)
(39,28,2)
(5,28,2)
(57,10,2)
(9,28,2)
(17,10,2)
(9,13,2)
(49,21,2)
(50,46,2)
(34,28,2)
(39,13,2)
(21,43,2)
(29,4,2)
(9,49,2)
(9,34,2)
(45,46,2)
(67,10,2)
(46,22,2)
(28,13,2)
(65,8,2)
(34,33,2)
(52,28,2)
(71,46,2)
(25,10,2)
(73,28,2)
(33,28,2)
(34,41,2)
(20,10,2)
(13,45,2)
(30,8,2)
(49,28,2)
(28,46,2)
(25,21,2)
(55,26,2)
(10,28,2)
(4,8,2)
(38,28,2)
(51,55,2)
(15,26,2)
(10,9,2)
(49,29,2)
(12,46,2)
(22,29,2)
(25,29,2)
(13,46,2)
(35,8,2)
(24,28,2)
(58,46,2)
(68,10,2)
(23,8,2)
(18,46,2)
(29,8,2)
(33,29,2)
(11,8,2)
(47,21,2)
(61,28,2)
(59,28,2)
(4,21,2)
(22,8,2)
(46,8,2)
(66,10,2)
-----------------------------------
(0,data)
(1,NULL)
(2,)
(3,)
(4,strlen(data)
(5,pFile)
(6,)
(7,data_buf)
(8,1)
(9,fgets(data+dataLen, (int)
(10,fgets(data+dataLen, (int)
(11,dataLen)
(12,pFile)
(13,pFile = fopen(FILENAME, "r")
(14,if (fgets(data+dataLen, (int)
(15,PCLOSE(pipe)
(16,data_buf)
(17,"fgets()
(18,"r")
(19,if(1)
(20,\\\'\\\\0\\\')
(21,data = data_buf)
(22,100-dataLen)
(23,100)
(24,100)
(25,data[dataLen])
(26,pipe = POPEN(data, "w")
(27,)
(28,pFile != NULL)
(29,dataLen = strlen(data)
(30,dataLen)
(31,)
(32,pipe)
(33,100-dataLen)
(34,(int)
(35,1)
(36,"w")
(37,)
(38,data)
(39,fclose(pFile)
(40,pipe)
(41,int)
(42,data)
(43,data_buf[100] = FULL_COMMAND)
(44,pFile)
(45,fopen(FILENAME, "r")
(46,100-dataLen > 1)
(47,POPEN(data, "w")
(48,if (100-dataLen > 1)
(49,data+dataLen)
(50,pFile)
(51,pipe)
(52,pFile)
(53,dataLen)
(54,)
(55,pipe != NULL)
(56,if (pFile != NULL)
(57,data[dataLen] = \\\'\\\\0\\\')
(58,NULL)
(59,NULL)
(60,)
(61,dataLen)
(62,if (pipe != NULL)
(63,FULL_COMMAND)
(64,data_buf)
(65,data)
(66,dataLen)
(67,data)
(68,printLine("fgets()
(69,data)
(70,RET)
(71,FILENAME)
(72,pipe)
(73,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
