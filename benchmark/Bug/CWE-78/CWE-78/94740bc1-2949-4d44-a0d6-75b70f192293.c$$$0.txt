-----label-----
1
-----code-----
wchar_t * CWE78_OS_Command_Injection__wchar_t_console_system_22_badSource(wchar_t * data)
{
    if(CWE78_OS_Command_Injection__wchar_t_console_system_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
wchar_t * CWE78_OS_Command_Injection__wchar_t_console_system_22_badSource(wchar_t * data){    if(CWE78_OS_Command_Injection__wchar_t_console_system_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    return data;}
wchar_t
* CWE78_OS_Command_Injection__wchar_t_console_system_22_badSource(wchar_t * data)
*
CWE78_OS_Command_Injection__wchar_t_console_system_22_badSource
wchar_t * data
wchar_t
* data
*
data
{    if(CWE78_OS_Command_Injection__wchar_t_console_system_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__wchar_t_console_system_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
CWE78_OS_Command_Injection__wchar_t_console_system_22_badGlobal
CWE78_OS_Command_Injection__wchar_t_console_system_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
return data;
data
data
-----joern-----
(15,20,0)
(16,9,0)
(20,37,0)
(25,1,0)
(43,38,0)
(0,23,0)
(5,34,0)
(36,25,0)
(21,27,0)
(39,0,0)
(4,6,0)
(24,35,0)
(40,3,0)
(34,40,0)
(44,36,0)
(10,39,0)
(32,44,0)
(25,36,0)
(27,23,0)
(31,43,0)
(35,13,0)
(31,1,0)
(8,7,0)
(6,9,0)
(44,32,0)
(19,43,0)
(38,43,0)
(30,0,0)
(40,43,0)
(17,13,0)
(26,36,0)
(34,36,0)
(39,1,0)
(43,31,0)
(28,31,0)
(3,40,0)
(42,25,0)
(22,44,0)
(41,34,0)
(18,31,0)
(31,36,0)
(14,35,0)
(2,20,0)
(12,44,0)
(36,20,0)
(33,32,0)
(35,1,0)
(29,38,0)
(40,34,0)
(0,39,0)
(43,40,0)
(29,43,1)
(43,19,1)
(19,40,1)
(31,1,1)
(40,34,1)
(24,11,1)
(14,35,1)
(32,44,1)
(21,0,1)
(42,26,1)
(22,36,1)
(43,40,1)
(32,33,1)
(18,32,1)
(41,31,1)
(28,18,1)
(34,36,1)
(16,6,1)
(35,1,1)
(24,32,1)
(31,36,1)
(25,42,1)
(36,25,1)
(10,30,1)
(44,36,1)
(5,41,1)
(24,21,1)
(38,29,1)
(0,39,1)
(39,1,1)
(43,31,1)
(4,38,1)
(26,11,1)
(35,24,1)
(6,4,1)
(34,5,1)
(39,10,1)
(12,22,1)
(24,16,1)
(38,43,1)
(31,28,1)
(30,38,1)
(40,3,1)
(25,1,1)
(44,12,1)
(33,44,1)
(19,32,2)
(25,1,2)
(44,11,2)
(28,32,2)
(18,32,2)
(35,1,2)
(5,32,2)
(36,11,2)
(14,35,2)
(21,38,2)
(31,36,2)
(4,38,2)
(39,38,2)
(10,38,2)
(16,38,2)
(43,31,2)
(43,40,2)
(31,32,2)
(32,44,2)
(38,43,2)
(22,11,2)
(12,11,2)
(44,36,2)
(29,32,2)
(0,38,2)
(30,38,2)
(40,34,2)
(40,32,2)
(42,11,2)
(0,39,2)
(34,36,2)
(26,11,2)
(25,11,2)
(34,32,2)
(33,11,2)
(31,1,2)
(41,32,2)
(40,3,2)
(43,32,2)
(36,25,2)
(6,38,2)
(39,1,2)
(32,11,2)
(38,32,2)
-----------------------------------
(0,dataLen = wcslen(data)
(1,wchar_t * data)
(2,dataLen)
(3,int)
(4,"fgetws()
(5,dataLen)
(6,printLine("fgetws()
(7,)
(8,if (fgetws(data+dataLen, (int)
(9,)
(10,data)
(11,CWE78_OS_Command_Injection__wchar_t_console_system_22_badGlobal)
(12,dataLen)
(13,)
(14,RET)
(15,if (100-dataLen > 1)
(16,\\\'\\\\0\\\')
(17,if(CWE78_OS_Command_Injection__wchar_t_console_system_22_badGlobal)
(18,data)
(19,stdin)
(20,)
(21,\\\'\\\\0\\\')
(22,100)
(23,)
(24,data)
(25,wcslen(data)
(26,dataLen)
(27,)
(28,dataLen)
(29,NULL)
(30,dataLen)
(31,data+dataLen)
(32,100-dataLen > 1)
(33,1)
(34,100-dataLen)
(35,return data;)
(36,dataLen = wcslen(data)
(37,)
(38,fgetws(data+dataLen, (int)
(39,wcslen(data)
(40,(int)
(41,100)
(42,data)
(43,fgetws(data+dataLen, (int)
(44,100-dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
