-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_51_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_51_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_51_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_51_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink
CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink
data
data
-----joern-----
(67,41,0)
(59,58,0)
(29,57,0)
(36,46,0)
(70,11,0)
(61,65,0)
(30,46,0)
(65,36,0)
(43,10,0)
(34,57,0)
(23,52,0)
(46,9,0)
(57,29,0)
(21,47,0)
(66,47,0)
(0,40,0)
(69,10,0)
(32,37,0)
(60,43,0)
(58,59,0)
(38,47,0)
(43,63,0)
(31,64,0)
(59,40,0)
(13,30,0)
(58,34,0)
(69,11,0)
(57,8,0)
(64,52,0)
(63,43,0)
(20,21,0)
(33,37,0)
(26,10,0)
(25,30,0)
(2,4,0)
(40,11,0)
(46,36,0)
(11,47,0)
(22,34,0)
(36,26,0)
(51,63,0)
(62,39,0)
(41,47,0)
(34,58,0)
(64,57,0)
(26,11,0)
(52,64,0)
(19,4,0)
(68,53,0)
(52,62,0)
(50,53,0)
(10,53,0)
(36,65,0)
(4,11,0)
(30,10,0)
(56,3,0)
(21,11,0)
(14,59,0)
(46,30,0)
(4,33,0)
(40,59,0)
(44,29,0)
(0,57,0)
(15,57,0)
(29,11,0)
(49,26,0)
(45,10,0)
(10,69,0)
(7,32,0)
(1,40,0)
(42,11,0)
(16,8,0)
(6,69,0)
(35,64,0)
(54,0,0)
(52,11,0)
(18,36,0)
(24,62,0)
(11,41,0)
(48,0,0)
(27,26,0)
(40,0,0)
(26,36,0)
(4,10,0)
(28,34,0)
(53,47,0)
(9,46,0)
(5,33,0)
(17,41,0)
(55,43,0)
(41,17,1)
(26,49,1)
(36,18,1)
(4,11,1)
(63,51,1)
(40,0,1)
(30,25,1)
(20,62,1)
(27,63,1)
(46,9,1)
(23,58,1)
(51,43,1)
(4,19,1)
(59,40,1)
(21,20,1)
(48,1,1)
(18,46,1)
(59,14,1)
(40,11,1)
(69,11,1)
(0,57,1)
(57,29,1)
(31,23,1)
(13,26,1)
(26,11,1)
(58,34,1)
(36,26,1)
(7,65,1)
(45,11,1)
(20,33,1)
(26,10,1)
(32,7,1)
(33,5,1)
(15,65,1)
(34,57,1)
(28,57,1)
(49,27,1)
(5,4,1)
(34,22,1)
(20,63,1)
(11,41,1)
(21,11,1)
(62,24,1)
(44,15,1)
(0,54,1)
(52,11,1)
(19,2,1)
(58,59,1)
(69,6,1)
(2,32,1)
(64,35,1)
(42,41,1)
(17,67,1)
(12,21,1)
(65,36,1)
(54,48,1)
(64,57,1)
(1,34,1)
(55,60,1)
(35,31,1)
(24,52,1)
(70,42,1)
(36,46,1)
(11,70,1)
(20,58,1)
(25,13,1)
(52,64,1)
(22,28,1)
(43,55,1)
(6,45,1)
(10,69,1)
(4,10,1)
(65,61,1)
(63,43,1)
(46,30,1)
(43,10,1)
(61,36,1)
(30,10,1)
(29,44,1)
(29,11,1)
(14,40,1)
(60,10,1)
(0,34,2)
(21,11,2)
(14,34,2)
(63,43,2)
(40,34,2)
(48,34,2)
(49,63,2)
(40,0,2)
(24,58,2)
(32,65,2)
(43,10,2)
(57,65,2)
(35,58,2)
(59,40,2)
(29,65,2)
(22,65,2)
(40,11,2)
(1,34,2)
(44,65,2)
(26,63,2)
(13,63,2)
(64,57,2)
(4,11,2)
(27,63,2)
(54,34,2)
(2,65,2)
(33,65,2)
(15,65,2)
(26,11,2)
(57,29,2)
(4,10,2)
(19,65,2)
(46,9,2)
(34,65,2)
(64,58,2)
(52,11,2)
(10,69,2)
(46,30,2)
(11,41,2)
(36,63,2)
(58,59,2)
(34,57,2)
(69,11,2)
(29,11,2)
(46,63,2)
(58,65,2)
(61,63,2)
(25,63,2)
(36,46,2)
(0,57,2)
(65,63,2)
(52,64,2)
(62,58,2)
(23,58,2)
(30,10,2)
(52,58,2)
(7,65,2)
(31,58,2)
(30,63,2)
(65,36,2)
(28,65,2)
(18,63,2)
(5,65,2)
(4,65,2)
(58,34,2)
(36,26,2)
(59,34,2)
(26,10,2)
-----------------------------------
(0,dataLen-1)
(1,data)
(2,data)
(3,)
(4,data[dataLen])
(5,\\\'\\\\0\\\')
(6,data)
(7,"fgets()
(8,)
(9,int)
(10,dataLen = strlen(data)
(11,data = dataBuffer)
(12,RET)
(13,100)
(14,\\\'\\\\n\\\')
(15,dataLen)
(16,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(17,COMMAND_ARG2)
(18,stdin)
(19,dataLen)
(20,data)
(21,CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data)
(22,0)
(23,data)
(24,\\\'\\\\0\\\')
(25,dataLen)
(26,data+dataLen)
(27,data)
(28,dataLen)
(29,strlen(data)
(30,100-dataLen)
(31,dataLen)
(32,printLine("fgets()
(33,data[dataLen] = \\\'\\\\0\\\')
(34,dataLen > 0)
(35,1)
(36,fgets(data+dataLen, (int)
(37,)
(38,data)
(39,)
(40,data[dataLen-1])
(41,dataBuffer[100] = COMMAND_ARG2)
(42,data)
(43,100-dataLen)
(44,data)
(45,dataLen)
(46,(int)
(47,)
(48,dataLen)
(49,dataLen)
(50,dataLen)
(51,1)
(52,data[dataLen-1])
(53,)
(54,1)
(55,dataLen)
(56,if (fgets(data+dataLen, (int)
(57,dataLen = strlen(data)
(58,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,data[dataLen-1] == \\\'\\\\n\\\')
(60,100)
(61,NULL)
(62,data[dataLen-1] = \\\'\\\\0\\\')
(63,100-dataLen > 1)
(64,dataLen-1)
(65,fgets(data+dataLen, (int)
(66,dataBuffer)
(67,dataBuffer)
(68,if (100-dataLen > 1)
(69,strlen(data)
(70,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
