-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_51_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_51b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_51_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_51b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_execl_51_bad()
CWE78_OS_Command_Injection__char_console_execl_51_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_51b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_51b_badSink(data);
CWE78_OS_Command_Injection__char_console_execl_51b_badSink(data)
CWE78_OS_Command_Injection__char_console_execl_51b_badSink
CWE78_OS_Command_Injection__char_console_execl_51b_badSink
data
data
-----joern-----
(41,68,0)
(15,5,0)
(57,23,0)
(23,6,0)
(0,54,0)
(67,35,0)
(21,36,0)
(62,10,0)
(22,5,0)
(51,62,0)
(4,17,0)
(10,1,0)
(7,59,0)
(6,23,0)
(9,58,0)
(14,4,0)
(10,27,0)
(32,10,0)
(19,36,0)
(26,30,0)
(58,17,0)
(38,29,0)
(62,51,0)
(38,30,0)
(53,38,0)
(43,1,0)
(23,10,0)
(62,17,0)
(70,58,0)
(5,22,0)
(50,26,0)
(61,20,0)
(47,19,0)
(24,38,0)
(56,41,0)
(29,34,0)
(31,46,0)
(34,58,0)
(42,59,0)
(49,62,0)
(9,30,0)
(59,25,0)
(27,10,0)
(58,34,0)
(11,34,0)
(29,38,0)
(4,10,0)
(4,41,0)
(52,25,0)
(37,19,0)
(39,51,0)
(1,36,0)
(25,59,0)
(34,29,0)
(46,60,0)
(22,10,0)
(27,17,0)
(2,17,0)
(25,46,0)
(55,9,0)
(35,68,0)
(58,9,0)
(63,17,0)
(6,51,0)
(26,17,0)
(12,36,0)
(13,51,0)
(48,9,0)
(33,23,0)
(69,6,0)
(12,17,0)
(66,22,0)
(16,62,0)
(18,36,0)
(40,27,0)
(51,6,0)
(45,13,0)
(44,22,0)
(51,13,0)
(6,69,0)
(25,17,0)
(8,1,0)
(65,30,0)
(17,36,0)
(3,12,0)
(59,30,0)
(30,54,0)
(17,19,0)
(28,4,0)
(30,26,0)
(62,10,1)
(26,50,1)
(3,29,1)
(62,17,1)
(4,17,1)
(31,25,1)
(10,27,1)
(62,16,1)
(32,17,1)
(2,63,1)
(7,52,1)
(56,4,1)
(15,22,1)
(50,65,1)
(42,7,1)
(65,13,1)
(24,30,1)
(45,51,1)
(23,33,1)
(3,46,1)
(16,49,1)
(59,30,1)
(22,10,1)
(5,22,1)
(5,15,1)
(14,28,1)
(12,17,1)
(25,59,1)
(67,13,1)
(3,5,1)
(3,41,1)
(33,57,1)
(53,24,1)
(59,42,1)
(35,67,1)
(39,6,1)
(51,6,1)
(11,58,1)
(9,48,1)
(38,30,1)
(41,56,1)
(13,51,1)
(29,38,1)
(58,9,1)
(26,17,1)
(37,47,1)
(4,10,1)
(4,14,1)
(66,44,1)
(22,66,1)
(19,37,1)
(29,34,1)
(40,32,1)
(70,38,1)
(57,62,1)
(48,55,1)
(34,58,1)
(17,2,1)
(51,62,1)
(52,29,1)
(13,45,1)
(30,26,1)
(46,31,1)
(51,39,1)
(38,53,1)
(23,10,1)
(17,19,1)
(44,10,1)
(58,17,1)
(49,5,1)
(55,70,1)
(6,23,1)
(6,69,1)
(9,30,1)
(34,11,1)
(25,17,1)
(64,12,1)
(63,19,1)
(28,35,1)
(12,3,1)
(27,17,1)
(27,40,1)
(7,29,2)
(51,62,2)
(48,38,2)
(9,30,2)
(4,17,2)
(33,5,2)
(46,29,2)
(4,10,2)
(17,19,2)
(35,13,2)
(11,38,2)
(9,38,2)
(58,17,2)
(34,38,2)
(45,5,2)
(55,38,2)
(23,5,2)
(13,5,2)
(51,6,2)
(22,10,2)
(27,17,2)
(30,26,2)
(53,13,2)
(4,13,2)
(5,22,2)
(29,13,2)
(29,38,2)
(42,29,2)
(31,29,2)
(58,9,2)
(26,13,2)
(51,5,2)
(16,5,2)
(23,10,2)
(34,58,2)
(50,13,2)
(10,27,2)
(14,13,2)
(39,5,2)
(6,23,2)
(12,17,2)
(62,5,2)
(38,13,2)
(59,30,2)
(67,13,2)
(30,13,2)
(26,17,2)
(49,5,2)
(56,13,2)
(62,10,2)
(25,29,2)
(6,5,2)
(25,17,2)
(38,30,2)
(62,17,2)
(58,38,2)
(6,69,2)
(52,29,2)
(29,34,2)
(28,13,2)
(25,59,2)
(41,13,2)
(65,13,2)
(70,38,2)
(24,13,2)
(57,5,2)
(13,51,2)
(59,29,2)
-----------------------------------
(0,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(1,)
(2,dataBuffer)
(3,data)
(4,data[dataLen])
(5,100-dataLen > 1)
(6,(int)
(7,dataLen)
(8,dataLen)
(9,dataLen-1)
(10,dataLen = strlen(data)
(11,\\\'\\\\n\\\')
(12,CWE78_OS_Command_Injection__char_console_execl_51b_badSink(data)
(13,fgets(data+dataLen, (int)
(14,dataLen)
(15,1)
(16,dataLen)
(17,data = dataBuffer)
(18,data)
(19,dataBuffer[100] = COMMAND_ARG2)
(20,)
(21,dataBuffer)
(22,100-dataLen)
(23,100-dataLen)
(24,dataLen)
(25,data[dataLen-1])
(26,strlen(data)
(27,strlen(data)
(28,data)
(29,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(30,dataLen = strlen(data)
(31,\\\'\\\\0\\\')
(32,dataLen)
(33,dataLen)
(34,data[dataLen-1] == \\\'\\\\n\\\')
(35,printLine("fgets()
(36,)
(37,COMMAND_ARG2)
(38,dataLen > 0)
(39,stdin)
(40,data)
(41,data[dataLen] = \\\'\\\\0\\\')
(42,1)
(43,if (100-dataLen > 1)
(44,100)
(45,NULL)
(46,data[dataLen-1] = \\\'\\\\0\\\')
(47,dataBuffer)
(48,1)
(49,data)
(50,data)
(51,fgets(data+dataLen, (int)
(52,data)
(53,0)
(54,)
(55,dataLen)
(56,\\\'\\\\0\\\')
(57,100)
(58,data[dataLen-1])
(59,dataLen-1)
(60,)
(61,if (fgets(data+dataLen, (int)
(62,data+dataLen)
(63,data)
(64,RET)
(65,dataLen)
(66,dataLen)
(67,"fgets()
(68,)
(69,int)
(70,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
