-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,35,37,38,43,46,48,49,53,55,61,64,66,69,70,73,75,77,79,84,85,90,92,93,97,99,102
-----computeFrom-----
33,34
33,35
34,35
34,36
41,42
41,43
51,52
51,53
58,59
58,60
62,63
62,64
72,73
72,74
87,88
87,89
-----guardedBy-----
37,92
55,79
53,99
64,90
75,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(2,36,0)
(12,39,0)
(20,39,0)
(39,24,0)
(36,2,0)
(41,26,0)
(35,7,0)
(23,17,0)
(24,38,0)
(39,7,0)
(45,7,0)
(47,2,0)
(0,39,0)
(10,34,0)
(47,20,0)
(30,8,0)
(20,47,0)
(47,25,0)
(8,28,0)
(0,38,0)
(16,24,0)
(29,21,0)
(49,0,0)
(21,39,0)
(2,47,0)
(37,31,0)
(14,32,0)
(7,28,0)
(21,29,0)
(13,2,0)
(19,15,0)
(8,38,0)
(27,31,0)
(37,38,0)
(44,15,0)
(22,7,0)
(2,44,0)
(43,29,0)
(40,0,0)
(37,39,0)
(42,20,0)
(0,2,0)
(18,36,0)
(5,44,0)
(50,44,0)
(50,32,0)
(46,20,0)
(17,33,0)
(24,39,0)
(15,44,0)
(2,0,0)
(34,44,0)
(3,37,0)
(31,33,0)
(6,21,0)
(51,21,0)
(11,34,0)
(1,15,0)
(25,47,0)
(48,50,0)
(44,26,0)
(9,37,0)
(4,8,0)
(23,36,1)
(46,0,1)
(19,5,1)
(48,31,1)
(10,11,1)
(30,50,1)
(4,8,1)
(2,47,1)
(44,15,1)
(31,27,1)
(8,30,1)
(16,12,1)
(8,38,1)
(30,34,1)
(34,44,1)
(50,44,1)
(0,39,1)
(2,0,1)
(15,1,1)
(27,37,1)
(0,38,1)
(11,44,1)
(30,29,1)
(49,40,1)
(51,39,1)
(24,16,1)
(37,38,1)
(42,46,1)
(24,38,1)
(43,21,1)
(37,39,1)
(20,42,1)
(21,6,1)
(37,9,1)
(6,51,1)
(20,39,1)
(5,29,1)
(34,10,1)
(2,13,1)
(21,39,1)
(36,2,1)
(18,2,1)
(29,21,1)
(3,17,1)
(0,49,1)
(2,44,1)
(50,48,1)
(40,34,1)
(36,18,1)
(9,3,1)
(17,23,1)
(48,36,1)
(13,47,1)
(39,24,1)
(47,20,1)
(29,43,1)
(47,25,1)
(1,19,1)
(20,34,2)
(44,15,2)
(47,20,2)
(40,34,2)
(37,39,2)
(8,38,2)
(0,34,2)
(37,36,2)
(9,36,2)
(39,24,2)
(21,39,2)
(49,34,2)
(2,44,2)
(42,34,2)
(50,34,2)
(0,39,2)
(36,2,2)
(29,21,2)
(34,29,2)
(44,29,2)
(24,38,2)
(1,29,2)
(48,34,2)
(0,38,2)
(2,34,2)
(19,29,2)
(31,36,2)
(34,44,2)
(36,34,2)
(13,34,2)
(23,36,2)
(37,38,2)
(5,29,2)
(20,39,2)
(47,25,2)
(11,29,2)
(10,29,2)
(50,44,2)
(15,29,2)
(2,47,2)
(2,0,2)
(17,36,2)
(3,36,2)
(4,8,2)
(27,36,2)
(46,34,2)
(18,34,2)
(47,34,2)
-----------------------------------
(0,data+dataLen)
(1,"r")
(2,fgets(data+dataLen, (int)
(3,data)
(4,RET)
(5,pFile)
(6,dataLen)
(7,)
(8,return data;)
(9,dataLen)
(10,NULL)
(11,pFile)
(12,dataLen)
(13,pFile)
(14,if (fgets(data+dataLen, (int)
(15,fopen(FILENAME, "r")
(16,data)
(17,printLine("fgets()
(18,NULL)
(19,FILENAME)
(20,100-dataLen)
(21,100-dataLen)
(22,dataLen)
(23,"fgets()
(24,strlen(data)
(25,int)
(26,)
(27,\\\'\\\\0\\\')
(28,)
(29,100-dataLen > 1)
(30,data)
(31,data[dataLen] = \\\'\\\\0\\\')
(32,)
(33,)
(34,pFile != NULL)
(35,pFile)
(36,fgets(data+dataLen, (int)
(37,data[dataLen])
(38,char * data)
(39,dataLen = strlen(data)
(40,data)
(41,if (pFile != NULL)
(42,dataLen)
(43,1)
(44,pFile = fopen(FILENAME, "r")
(45,if (100-dataLen > 1)
(46,100)
(47,(int)
(48,pFile)
(49,dataLen)
(50,fclose(pFile)
(51,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
