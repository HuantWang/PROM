-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_system_16_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    while(1)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
        break;
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
31,32
31,33
31,34
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
53,55
55,56
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
90,91
91,92
91,93
93,94
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
110,111
113,114
114,115
114,116
115,116
117,118
120,121
120,122
121,122
121,123
122,123
122,124
123,124
125,126
128,129
128,130
129,130
130,131
130,132
131,132
134,135
135,136
135,137
136,137
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,35,37,41,43,47,49,50,54,56,57,62,65,67,68,72,74,80,83,85,88,89,92,94,96,98,103,104,109,111,112,116,118,119,124,126,127,132,133,137,138
-----computeFrom-----
23,24
23,25
52,53
52,54
53,54
53,55
60,61
60,62
70,71
70,72
77,78
77,79
81,82
81,83
91,92
91,93
106,107
106,108
121,122
121,123
-----guardedBy-----
56,111
74,98
72,118
83,109
94,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_system_16_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
void
CWE78_OS_Command_Injection__char_file_system_16_bad()
CWE78_OS_Command_Injection__char_file_system_16_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }
1
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(5,47,0)
(56,67,0)
(10,62,0)
(38,20,0)
(69,15,0)
(37,42,0)
(57,44,0)
(61,12,0)
(58,46,0)
(17,22,0)
(42,62,0)
(7,47,0)
(2,44,0)
(43,3,0)
(68,17,0)
(49,17,0)
(53,14,0)
(18,29,0)
(59,68,0)
(45,44,0)
(36,21,0)
(22,17,0)
(54,64,0)
(20,14,0)
(34,44,0)
(23,15,0)
(64,14,0)
(39,69,0)
(68,28,0)
(17,25,0)
(27,30,0)
(70,12,0)
(11,20,0)
(60,30,0)
(14,42,0)
(55,5,0)
(20,56,0)
(15,44,0)
(24,25,0)
(12,61,0)
(21,69,0)
(8,46,0)
(47,5,0)
(13,42,0)
(40,3,0)
(29,67,0)
(50,15,0)
(5,58,0)
(51,12,0)
(66,56,0)
(58,5,0)
(14,21,0)
(58,17,0)
(6,43,0)
(65,61,0)
(20,69,0)
(52,40,0)
(27,69,0)
(21,14,0)
(4,42,0)
(69,44,0)
(32,22,0)
(1,47,0)
(0,35,0)
(48,69,0)
(63,35,0)
(41,58,0)
(46,58,0)
(5,55,0)
(47,14,0)
(16,22,0)
(64,58,0)
(64,69,0)
(58,64,0)
(33,28,0)
(12,14,0)
(30,27,0)
(19,64,0)
(31,27,0)
(35,17,0)
(35,17,1)
(15,50,1)
(49,61,1)
(60,27,1)
(69,15,1)
(41,5,1)
(58,17,1)
(59,46,1)
(9,30,1)
(31,10,1)
(29,18,1)
(50,23,1)
(38,11,1)
(58,41,1)
(64,19,1)
(48,39,1)
(5,55,1)
(61,65,1)
(46,8,1)
(18,46,1)
(47,7,1)
(68,17,1)
(59,56,1)
(10,68,1)
(26,69,1)
(61,12,1)
(7,1,1)
(40,52,1)
(11,29,1)
(20,14,1)
(31,26,1)
(54,35,1)
(6,40,1)
(32,49,1)
(17,22,1)
(43,6,1)
(20,38,1)
(56,66,1)
(51,14,1)
(63,17,1)
(68,59,1)
(64,14,1)
(5,47,1)
(66,20,1)
(30,60,1)
(64,69,1)
(21,36,1)
(8,58,1)
(22,16,1)
(20,69,1)
(1,64,1)
(70,51,1)
(47,14,1)
(0,63,1)
(21,69,1)
(46,58,1)
(27,69,1)
(52,30,1)
(35,0,1)
(58,5,1)
(53,26,1)
(69,48,1)
(14,21,1)
(12,70,1)
(19,54,1)
(39,15,1)
(36,53,1)
(58,64,1)
(9,43,1)
(30,27,1)
(16,32,1)
(10,35,1)
(27,31,1)
(12,14,1)
(10,61,1)
(65,12,1)
(22,61,2)
(1,35,2)
(29,46,2)
(19,35,2)
(68,17,2)
(70,26,2)
(58,64,2)
(20,14,2)
(16,61,2)
(30,27,2)
(64,35,2)
(61,12,2)
(36,26,2)
(38,46,2)
(5,35,2)
(63,61,2)
(64,69,2)
(21,69,2)
(17,61,2)
(20,46,2)
(69,15,2)
(52,30,2)
(58,17,2)
(43,30,2)
(20,69,2)
(0,61,2)
(40,30,2)
(11,46,2)
(61,26,2)
(32,61,2)
(6,30,2)
(5,55,2)
(7,35,2)
(41,35,2)
(65,26,2)
(18,46,2)
(47,35,2)
(66,46,2)
(21,26,2)
(49,61,2)
(35,61,2)
(58,5,2)
(51,26,2)
(59,35,2)
(53,26,2)
(46,58,2)
(54,35,2)
(17,22,2)
(58,35,2)
(56,46,2)
(27,69,2)
(8,35,2)
(14,21,2)
(68,35,2)
(64,14,2)
(12,26,2)
(12,14,2)
(35,17,2)
(5,47,2)
(47,14,2)
(10,26,2)
(46,35,2)
(14,26,2)
-----------------------------------
(0,NULL)
(1,100)
(2,data_buf)
(3,)
(4,dataLen)
(5,(int)
(6,1)
(7,dataLen)
(8,NULL)
(9,RET)
(10,break;)
(11,data)
(12,100-dataLen)
(13,pFile)
(14,dataLen = strlen(data)
(15,data_buf[100] = FULL_COMMAND)
(16,"r")
(17,pFile = fopen(FILENAME, "r")
(18,"fgets()
(19,dataLen)
(20,data[dataLen])
(21,strlen(data)
(22,fopen(FILENAME, "r")
(23,data_buf)
(24,if (pFile != NULL)
(25,)
(26,1)
(27,SYSTEM(data)
(28,)
(29,printLine("fgets()
(30,SYSTEM(data)
(31,data)
(32,FILENAME)
(33,if (fgets(data+dataLen, (int)
(34,while(1)
(35,pFile != NULL)
(36,data)
(37,if (100-dataLen > 1)
(38,dataLen)
(39,data)
(40,printLine("command execution failed!")
(41,pFile)
(42,)
(43,exit(1)
(44,)
(45,data)
(46,fgets(data+dataLen, (int)
(47,100-dataLen)
(48,data_buf)
(49,pFile)
(50,FULL_COMMAND)
(51,100)
(52,"command execution failed!")
(53,dataLen)
(54,data)
(55,int)
(56,data[dataLen] = \\\'\\\\0\\\')
(57,if (SYSTEM(data)
(58,fgets(data+dataLen, (int)
(59,pFile)
(60,0)
(61,100-dataLen > 1)
(62,)
(63,pFile)
(64,data+dataLen)
(65,1)
(66,\\\'\\\\0\\\')
(67,)
(68,fclose(pFile)
(69,data = data_buf)
(70,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
