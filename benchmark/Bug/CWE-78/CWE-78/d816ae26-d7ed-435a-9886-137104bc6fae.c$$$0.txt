-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_system_09_bad()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(GLOBAL_CONST_TRUE)
    {
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
52,54
53,54
53,55
54,55
54,56
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
64,66
64,67
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
79,82
79,83
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
91,92
92,93
92,94
94,95
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
111,112
114,115
115,116
115,117
116,117
118,119
120,121
120,122
121,122
121,123
122,123
122,124
123,124
125,126
128,129
128,130
129,130
130,131
130,132
131,132
134,135
135,136
135,137
136,137
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,36,38,42,44,48,50,51,55,57,58,63,66,68,69,73,75,81,84,86,89,90,93,95,97,99,104,105,110,112,113,117,119,124,126,127,132,133,137,138
-----computeFrom-----
23,24
23,25
53,54
53,55
54,55
54,56
61,62
61,63
71,72
71,73
78,79
78,80
82,83
82,84
92,93
92,94
107,108
107,109
121,122
121,123
-----guardedBy-----
57,112
75,99
73,119
84,110
95,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_system_09_bad(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(GLOBAL_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
void
CWE78_OS_Command_Injection__wchar_t_file_system_09_bad()
CWE78_OS_Command_Injection__wchar_t_file_system_09_bad
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(GLOBAL_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(GLOBAL_CONST_TRUE)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(12,16,0)
(52,60,0)
(27,32,0)
(10,22,0)
(16,32,0)
(56,35,0)
(30,53,0)
(43,59,0)
(35,29,0)
(14,52,0)
(18,43,0)
(5,29,0)
(21,44,0)
(55,32,0)
(37,2,0)
(3,56,0)
(48,55,0)
(53,35,0)
(42,62,0)
(45,60,0)
(2,61,0)
(64,7,0)
(17,60,0)
(16,44,0)
(51,63,0)
(0,26,0)
(32,27,0)
(4,62,0)
(54,32,0)
(15,14,0)
(57,63,0)
(10,14,0)
(39,60,0)
(52,56,0)
(50,63,0)
(60,11,0)
(16,7,0)
(10,16,0)
(62,52,0)
(35,63,0)
(19,7,0)
(32,47,0)
(16,10,0)
(9,49,0)
(31,26,0)
(7,35,0)
(65,35,0)
(28,41,0)
(26,32,0)
(55,49,0)
(22,10,0)
(25,47,0)
(8,53,0)
(29,63,0)
(34,27,0)
(13,30,0)
(41,59,0)
(33,14,0)
(56,52,0)
(58,35,0)
(7,52,0)
(20,27,0)
(53,30,0)
(7,16,0)
(62,36,0)
(6,29,0)
(44,16,0)
(38,36,0)
(36,62,0)
(40,52,0)
(24,63,0)
(14,10,0)
(1,61,0)
(6,5,1)
(44,21,1)
(4,42,1)
(13,53,1)
(36,62,1)
(58,65,1)
(29,6,1)
(16,32,1)
(48,44,1)
(56,35,1)
(30,53,1)
(7,52,1)
(18,30,1)
(31,32,1)
(8,36,1)
(8,23,1)
(64,26,1)
(40,23,1)
(26,32,1)
(10,22,1)
(30,13,1)
(10,14,1)
(35,29,1)
(32,27,1)
(15,33,1)
(16,7,1)
(1,2,1)
(26,0,1)
(54,36,1)
(62,4,1)
(2,37,1)
(56,3,1)
(42,52,1)
(52,56,1)
(53,8,1)
(41,28,1)
(38,62,1)
(7,35,1)
(35,58,1)
(44,16,1)
(23,35,1)
(3,40,1)
(28,43,1)
(65,29,1)
(7,19,1)
(14,52,1)
(12,10,1)
(16,10,1)
(55,32,1)
(46,30,1)
(43,18,1)
(20,34,1)
(8,55,1)
(34,54,1)
(19,64,1)
(36,38,1)
(48,1,1)
(55,48,1)
(46,41,1)
(16,12,1)
(0,31,1)
(33,7,1)
(53,35,1)
(21,16,1)
(14,15,1)
(8,26,1)
(37,44,1)
(62,52,1)
(27,20,1)
(14,52,2)
(35,29,2)
(0,36,2)
(37,44,2)
(10,22,2)
(3,23,2)
(26,32,2)
(21,26,2)
(53,35,2)
(42,23,2)
(44,16,2)
(52,56,2)
(44,26,2)
(33,26,2)
(30,53,2)
(7,52,2)
(10,26,2)
(7,35,2)
(10,14,2)
(15,26,2)
(31,36,2)
(64,26,2)
(16,26,2)
(26,36,2)
(62,23,2)
(36,23,2)
(19,26,2)
(28,30,2)
(56,35,2)
(52,23,2)
(27,36,2)
(1,44,2)
(55,26,2)
(56,23,2)
(54,36,2)
(14,26,2)
(41,30,2)
(16,10,2)
(4,23,2)
(12,26,2)
(34,36,2)
(55,32,2)
(38,23,2)
(40,23,2)
(48,26,2)
(16,32,2)
(32,36,2)
(16,7,2)
(2,44,2)
(36,62,2)
(43,30,2)
(18,30,2)
(20,36,2)
(32,27,2)
(7,26,2)
(62,52,2)
-----------------------------------
(0,NULL)
(1,\\\'\\\\0\\\')
(2,printLine("fgetws()
(3,data)
(4,dataLen)
(5,data_buf)
(6,FULL_COMMAND)
(7,data+dataLen)
(8,data)
(9,if (fgetws(data+dataLen, (int)
(10,(int)
(11,)
(12,pFile)
(13,0)
(14,100-dataLen)
(15,dataLen)
(16,fgetws(data+dataLen, (int)
(17,dataLen)
(18,"command execution failed!")
(19,dataLen)
(20,"r")
(21,NULL)
(22,int)
(23,GLOBAL_CONST_TRUE)
(24,data_buf)
(25,if (pFile != NULL)
(26,pFile != NULL)
(27,fopen(FILENAME, "r")
(28,1)
(29,data_buf[100] = FULL_COMMAND)
(30,SYSTEM(data)
(31,pFile)
(32,pFile = fopen(FILENAME, "r")
(33,100)
(34,FILENAME)
(35,data = data_buf)
(36,100-dataLen > 1)
(37,"fgetws()
(38,1)
(39,pFile)
(40,dataLen)
(41,exit(1)
(42,100)
(43,printLine("command execution failed!")
(44,fgetws(data+dataLen, (int)
(45,if (100-dataLen > 1)
(46,RET)
(47,)
(48,pFile)
(49,)
(50,if(GLOBAL_CONST_TRUE)
(51,if (SYSTEM(data)
(52,dataLen = wcslen(data)
(53,SYSTEM(data)
(54,pFile)
(55,fclose(pFile)
(56,wcslen(data)
(57,data)
(58,data_buf)
(59,)
(60,)
(61,)
(62,100-dataLen)
(63,)
(64,data)
(65,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
