-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(33,60,0)
(30,62,0)
(8,65,0)
(15,65,0)
(62,5,0)
(11,33,0)
(27,59,0)
(6,16,0)
(34,66,0)
(7,45,0)
(17,27,0)
(45,12,0)
(53,10,0)
(55,42,0)
(54,16,0)
(58,4,0)
(17,21,0)
(12,45,0)
(19,54,0)
(49,12,0)
(51,63,0)
(20,42,0)
(6,59,0)
(37,0,0)
(63,19,0)
(66,34,0)
(28,16,0)
(57,12,0)
(22,36,0)
(35,31,0)
(43,64,0)
(48,27,0)
(42,55,0)
(25,28,0)
(26,27,0)
(50,55,0)
(28,59,0)
(8,64,0)
(66,60,0)
(34,16,0)
(27,17,0)
(12,59,0)
(3,59,0)
(23,31,0)
(18,6,0)
(54,19,0)
(55,17,0)
(60,66,0)
(10,0,0)
(64,8,0)
(31,16,0)
(47,21,0)
(55,50,0)
(1,37,0)
(64,19,0)
(40,6,0)
(52,33,0)
(59,62,0)
(59,28,0)
(65,2,0)
(31,44,0)
(46,62,0)
(56,63,0)
(41,64,0)
(14,19,0)
(60,33,0)
(13,66,0)
(29,34,0)
(24,17,0)
(33,19,0)
(27,16,0)
(17,55,0)
(63,34,0)
(34,63,0)
(8,16,0)
(61,44,0)
(39,42,0)
(6,37,0)
(19,4,0)
(42,59,0)
(38,54,0)
(21,17,0)
(32,8,0)
(31,16,1)
(43,32,1)
(54,38,1)
(1,6,1)
(47,17,1)
(12,49,1)
(42,20,1)
(60,66,1)
(14,21,1)
(15,8,1)
(35,31,1)
(60,33,1)
(51,29,1)
(33,11,1)
(24,55,1)
(13,34,1)
(53,21,1)
(49,57,1)
(23,60,1)
(33,19,1)
(28,16,1)
(64,41,1)
(6,16,1)
(45,7,1)
(26,45,1)
(54,16,1)
(37,1,1)
(29,33,1)
(63,19,1)
(23,45,1)
(59,28,1)
(39,27,1)
(21,47,1)
(57,59,1)
(55,50,1)
(52,19,1)
(17,27,1)
(23,37,1)
(21,17,1)
(56,51,1)
(48,26,1)
(23,65,1)
(27,59,1)
(11,52,1)
(12,59,1)
(27,16,1)
(64,19,1)
(7,12,1)
(66,34,1)
(6,18,1)
(6,59,1)
(8,64,1)
(34,63,1)
(38,14,1)
(41,43,1)
(40,10,1)
(65,15,1)
(23,9,1)
(8,16,1)
(63,56,1)
(27,48,1)
(42,59,1)
(10,53,1)
(31,23,1)
(66,13,1)
(28,25,1)
(18,40,1)
(17,55,1)
(3,9,1)
(45,12,1)
(17,24,1)
(19,54,1)
(25,3,1)
(20,39,1)
(34,16,1)
(55,42,1)
(32,60,1)
(41,60,2)
(34,16,2)
(34,63,2)
(31,16,2)
(54,16,2)
(47,45,2)
(55,50,2)
(21,17,2)
(21,45,2)
(17,55,2)
(28,9,2)
(18,21,2)
(64,60,2)
(25,9,2)
(24,45,2)
(52,21,2)
(27,59,2)
(17,27,2)
(6,21,2)
(49,9,2)
(42,59,2)
(48,45,2)
(28,16,2)
(57,9,2)
(29,33,2)
(64,19,2)
(53,21,2)
(51,33,2)
(60,66,2)
(39,45,2)
(8,60,2)
(63,33,2)
(54,21,2)
(33,19,2)
(42,45,2)
(66,34,2)
(6,16,2)
(8,64,2)
(45,12,2)
(14,21,2)
(60,21,2)
(3,9,2)
(56,33,2)
(34,33,2)
(35,31,2)
(10,21,2)
(45,9,2)
(60,33,2)
(1,21,2)
(11,21,2)
(27,45,2)
(33,21,2)
(55,42,2)
(59,28,2)
(40,21,2)
(19,21,2)
(7,9,2)
(59,9,2)
(32,60,2)
(20,45,2)
(17,45,2)
(43,60,2)
(6,59,2)
(27,16,2)
(55,45,2)
(26,45,2)
(37,21,2)
(65,60,2)
(66,33,2)
(13,33,2)
(8,16,2)
(12,59,2)
(38,21,2)
(63,19,2)
(12,9,2)
(19,54,2)
(15,60,2)
-----------------------------------
(0,)
(1,\\\'\\\\0\\\')
(2,)
(3,dataLen)
(4,)
(5,)
(6,data[dataLen])
(7,1)
(8,data[dataLen-1])
(9,badStatic)
(10,printLine("fgets()
(11,0)
(12,100-dataLen)
(13,\\\'\\\\n\\\')
(14,dataLen)
(15,\\\'\\\\0\\\')
(16,char * data)
(17,fgets(data+dataLen, (int)
(18,dataLen)
(19,dataLen = strlen(data)
(20,dataLen)
(21,fgets(data+dataLen, (int)
(22,if (fgets(data+dataLen, (int)
(23,data)
(24,stdin)
(25,data)
(26,data)
(27,data+dataLen)
(28,strlen(data)
(29,data)
(30,if (100-dataLen > 1)
(31,return data;)
(32,data)
(33,dataLen > 0)
(34,data[dataLen-1])
(35,RET)
(36,)
(37,data[dataLen] = \\\'\\\\0\\\')
(38,data)
(39,100)
(40,data)
(41,1)
(42,100-dataLen)
(43,dataLen)
(44,)
(45,100-dataLen > 1)
(46,dataLen)
(47,NULL)
(48,dataLen)
(49,dataLen)
(50,int)
(51,dataLen)
(52,dataLen)
(53,"fgets()
(54,strlen(data)
(55,(int)
(56,1)
(57,100)
(58,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,dataLen = strlen(data)
(60,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,if(badStatic)
(62,)
(63,dataLen-1)
(64,dataLen-1)
(65,data[dataLen-1] = \\\'\\\\0\\\')
(66,data[dataLen-1] == \\\'\\\\n\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
