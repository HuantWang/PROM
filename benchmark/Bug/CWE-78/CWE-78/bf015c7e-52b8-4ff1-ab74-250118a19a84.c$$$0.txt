-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(49,18,0)
(37,43,0)
(27,37,0)
(30,21,0)
(3,7,0)
(26,59,0)
(15,25,0)
(36,49,0)
(51,2,0)
(57,29,0)
(54,20,0)
(22,65,0)
(62,28,0)
(8,30,0)
(42,24,0)
(43,37,0)
(50,18,0)
(19,64,0)
(7,16,0)
(55,16,0)
(32,61,0)
(45,7,0)
(37,50,0)
(17,6,0)
(23,13,0)
(2,49,0)
(53,41,0)
(2,28,0)
(65,16,0)
(0,30,0)
(6,16,0)
(43,11,0)
(66,40,0)
(25,63,0)
(34,66,0)
(31,21,0)
(48,6,0)
(6,21,0)
(44,65,0)
(11,43,0)
(10,49,0)
(24,42,0)
(61,11,0)
(11,61,0)
(58,66,0)
(56,50,0)
(35,55,0)
(14,65,0)
(20,16,0)
(52,59,0)
(55,21,0)
(39,50,0)
(59,42,0)
(33,63,0)
(28,38,0)
(61,18,0)
(30,13,0)
(44,29,0)
(65,21,0)
(29,44,0)
(65,44,0)
(7,64,0)
(18,60,0)
(46,33,0)
(49,2,0)
(2,16,0)
(44,42,0)
(59,21,0)
(1,18,0)
(37,16,0)
(42,59,0)
(50,37,0)
(12,60,0)
(5,44,0)
(42,44,0)
(47,43,0)
(13,30,0)
(20,18,0)
(18,20,0)
(21,55,0)
(6,25,0)
(21,66,0)
(4,61,0)
(50,18,1)
(27,61,1)
(5,42,1)
(44,5,1)
(59,52,1)
(29,44,1)
(23,30,1)
(7,3,1)
(4,18,1)
(28,62,1)
(33,46,1)
(43,37,1)
(48,33,1)
(55,16,1)
(11,61,1)
(13,30,1)
(29,57,1)
(43,47,1)
(47,37,1)
(3,9,1)
(30,8,1)
(49,18,1)
(20,54,1)
(25,15,1)
(65,14,1)
(0,21,1)
(62,2,1)
(3,13,1)
(2,16,1)
(11,43,1)
(55,35,1)
(52,26,1)
(30,21,1)
(3,11,1)
(61,32,1)
(50,39,1)
(61,18,1)
(46,29,1)
(44,65,1)
(6,21,1)
(51,11,1)
(8,0,1)
(65,21,1)
(2,49,1)
(6,17,1)
(13,23,1)
(36,10,1)
(22,13,1)
(44,42,1)
(35,31,1)
(57,44,1)
(10,51,1)
(1,29,1)
(37,16,1)
(3,25,1)
(20,16,1)
(6,16,1)
(45,7,1)
(54,1,1)
(32,4,1)
(39,56,1)
(26,65,1)
(31,9,1)
(37,50,1)
(49,36,1)
(3,28,1)
(65,16,1)
(17,48,1)
(56,27,1)
(18,20,1)
(15,6,1)
(7,16,1)
(59,21,1)
(42,59,1)
(42,24,1)
(14,22,1)
(21,55,1)
(46,29,2)
(48,29,2)
(33,29,2)
(20,29,2)
(29,44,2)
(26,13,2)
(23,9,2)
(65,13,2)
(52,13,2)
(54,29,2)
(55,16,2)
(44,13,2)
(39,61,2)
(18,20,2)
(21,9,2)
(35,9,2)
(51,11,2)
(6,16,2)
(65,21,2)
(55,9,2)
(49,11,2)
(4,29,2)
(56,61,2)
(0,9,2)
(61,29,2)
(37,61,2)
(1,29,2)
(21,55,2)
(11,61,2)
(13,30,2)
(29,13,2)
(50,18,2)
(11,29,2)
(6,21,2)
(42,13,2)
(28,11,2)
(42,59,2)
(20,16,2)
(6,29,2)
(47,61,2)
(11,43,2)
(57,13,2)
(8,9,2)
(44,65,2)
(59,21,2)
(50,61,2)
(25,29,2)
(45,7,2)
(42,24,2)
(22,13,2)
(27,61,2)
(43,61,2)
(30,9,2)
(31,9,2)
(15,29,2)
(43,37,2)
(2,11,2)
(30,21,2)
(49,18,2)
(44,42,2)
(7,16,2)
(2,49,2)
(17,29,2)
(32,29,2)
(37,50,2)
(62,11,2)
(18,29,2)
(5,13,2)
(14,13,2)
(2,16,2)
(37,16,2)
(61,18,2)
(59,13,2)
(10,11,2)
(13,9,2)
(36,11,2)
(65,16,2)
-----------------------------------
(0,100)
(1,dataLen)
(2,data[dataLen-1])
(3,data)
(4,dataLen)
(5,stdin)
(6,data[dataLen])
(7,return data;)
(8,dataLen)
(9,badStatic)
(10,dataLen)
(11,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(13,100-dataLen > 1)
(14,dataLen)
(15,\\\'\\\\0\\\')
(16,char * data)
(17,dataLen)
(18,dataLen = strlen(data)
(19,if(badStatic)
(20,strlen(data)
(21,dataLen = strlen(data)
(22,data)
(23,1)
(24,int)
(25,data[dataLen] = \\\'\\\\0\\\')
(26,100)
(27,data)
(28,data[dataLen-1] = \\\'\\\\0\\\')
(29,fgets(data+dataLen, (int)
(30,100-dataLen)
(31,dataLen)
(32,0)
(33,printLine("fgets()
(34,if (100-dataLen > 1)
(35,data)
(36,1)
(37,data[dataLen-1])
(38,)
(39,1)
(40,)
(41,)
(42,(int)
(43,data[dataLen-1] == \\\'\\\\n\\\')
(44,fgets(data+dataLen, (int)
(45,RET)
(46,"fgets()
(47,\\\'\\\\n\\\')
(48,data)
(49,dataLen-1)
(50,dataLen-1)
(51,data)
(52,dataLen)
(53,if (fgets(data+dataLen, (int)
(54,data)
(55,strlen(data)
(56,dataLen)
(57,NULL)
(58,dataLen)
(59,100-dataLen)
(60,)
(61,dataLen > 0)
(62,\\\'\\\\0\\\')
(63,)
(64,)
(65,data+dataLen)
(66,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
