-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_64_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_64_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_execl_64_bad()
CWE78_OS_Command_Injection__char_console_execl_64_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_execl_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_execl_64b_badSink
CWE78_OS_Command_Injection__char_console_execl_64b_badSink
&data
data
data
-----joern-----
(46,36,0)
(41,62,0)
(31,18,0)
(56,8,0)
(31,36,0)
(23,24,0)
(30,15,0)
(7,48,0)
(58,40,0)
(0,30,0)
(41,67,0)
(49,23,0)
(1,31,0)
(67,48,0)
(52,31,0)
(14,51,0)
(50,68,0)
(53,8,0)
(18,23,0)
(5,37,0)
(60,38,0)
(21,43,0)
(1,55,0)
(9,25,0)
(48,47,0)
(39,47,0)
(8,55,0)
(8,53,0)
(70,27,0)
(48,23,0)
(18,31,0)
(44,13,0)
(51,14,0)
(10,47,0)
(66,10,0)
(4,51,0)
(3,40,0)
(23,38,0)
(19,23,0)
(14,25,0)
(11,14,0)
(61,41,0)
(40,53,0)
(67,57,0)
(34,24,0)
(35,13,0)
(28,55,0)
(65,62,0)
(63,5,0)
(54,18,0)
(37,24,0)
(2,68,0)
(30,47,0)
(62,41,0)
(40,31,0)
(68,24,0)
(20,1,0)
(12,24,0)
(64,57,0)
(22,62,0)
(17,48,0)
(13,35,0)
(48,67,0)
(62,47,0)
(38,24,0)
(16,1,0)
(55,8,0)
(57,67,0)
(67,41,0)
(6,13,0)
(30,23,0)
(37,5,0)
(41,61,0)
(59,30,0)
(33,21,0)
(42,35,0)
(15,43,0)
(47,68,0)
(25,71,0)
(5,23,0)
(10,23,0)
(45,15,0)
(55,1,0)
(26,51,0)
(29,38,0)
(47,10,0)
(55,23,0)
(69,67,0)
(51,31,0)
(53,40,0)
(14,23,0)
(13,47,0)
(18,54,1)
(0,59,1)
(57,64,1)
(14,23,1)
(30,0,1)
(48,7,1)
(30,23,1)
(56,55,1)
(5,63,1)
(13,6,1)
(19,38,1)
(37,5,1)
(21,33,1)
(67,41,1)
(10,66,1)
(26,11,1)
(48,47,1)
(15,45,1)
(22,48,1)
(44,47,1)
(23,49,1)
(62,47,1)
(67,48,1)
(54,52,1)
(16,28,1)
(62,65,1)
(57,67,1)
(8,56,1)
(55,1,1)
(42,13,1)
(1,31,1)
(33,57,1)
(39,23,1)
(59,21,1)
(28,40,1)
(32,37,1)
(41,62,1)
(30,47,1)
(51,4,1)
(3,58,1)
(13,47,1)
(63,25,1)
(10,23,1)
(35,13,1)
(67,69,1)
(38,60,1)
(47,10,1)
(49,19,1)
(53,8,1)
(40,31,1)
(8,55,1)
(20,16,1)
(18,23,1)
(4,26,1)
(40,3,1)
(45,30,1)
(14,51,1)
(7,17,1)
(65,22,1)
(23,38,1)
(58,31,1)
(17,35,1)
(48,23,1)
(41,61,1)
(64,67,1)
(63,15,1)
(31,18,1)
(35,42,1)
(6,44,1)
(11,53,1)
(63,35,1)
(53,40,1)
(1,20,1)
(55,23,1)
(66,39,1)
(51,31,1)
(69,41,1)
(63,53,1)
(9,14,1)
(5,23,1)
(52,57,1)
(25,9,1)
(60,29,1)
(33,57,2)
(3,57,2)
(30,47,2)
(64,35,2)
(11,53,2)
(48,35,2)
(8,40,2)
(62,35,2)
(48,23,2)
(35,13,2)
(52,57,2)
(30,57,2)
(67,41,2)
(48,47,2)
(21,57,2)
(14,51,2)
(51,53,2)
(16,40,2)
(14,53,2)
(51,31,2)
(54,57,2)
(67,48,2)
(1,31,2)
(5,23,2)
(57,35,2)
(47,10,2)
(13,47,2)
(26,53,2)
(37,5,2)
(31,57,2)
(18,57,2)
(45,57,2)
(40,57,2)
(65,35,2)
(25,53,2)
(31,18,2)
(4,53,2)
(8,55,2)
(10,23,2)
(53,8,2)
(55,1,2)
(20,40,2)
(58,57,2)
(40,31,2)
(41,62,2)
(9,53,2)
(1,40,2)
(23,38,2)
(59,57,2)
(15,57,2)
(57,67,2)
(41,35,2)
(22,35,2)
(69,35,2)
(53,40,2)
(62,47,2)
(0,57,2)
(55,40,2)
(28,40,2)
(53,57,2)
(55,23,2)
(41,61,2)
(17,35,2)
(56,40,2)
(30,23,2)
(7,35,2)
(18,23,2)
(67,35,2)
(14,23,2)
-----------------------------------
(0,dataLen)
(1,dataLen-1)
(2,if (100-dataLen > 1)
(3,0)
(4,1)
(5,&data)
(6,dataLen)
(7,dataLen)
(8,data[dataLen-1] == \\\'\\\\n\\\')
(9,\\\'\\\\0\\\')
(10,strlen(data)
(11,data)
(12,data)
(13,100-dataLen)
(14,data[dataLen-1])
(15,data[dataLen] = \\\'\\\\0\\\')
(16,dataLen)
(17,data)
(18,strlen(data)
(19,data)
(20,1)
(21,printLine("fgets()
(22,100)
(23,data = dataBuffer)
(24,)
(25,data[dataLen-1] = \\\'\\\\0\\\')
(26,dataLen)
(27,)
(28,data)
(29,dataBuffer)
(30,data[dataLen])
(31,dataLen = strlen(data)
(32,RET)
(33,"fgets()
(34,dataBuffer)
(35,100-dataLen > 1)
(36,)
(37,CWE78_OS_Command_Injection__char_console_execl_64b_badSink(&data)
(38,dataBuffer[100] = COMMAND_ARG2)
(39,dataLen)
(40,dataLen > 0)
(41,(int)
(42,1)
(43,)
(44,100)
(45,\\\'\\\\0\\\')
(46,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(47,dataLen = strlen(data)
(48,data+dataLen)
(49,dataBuffer)
(50,dataLen)
(51,dataLen-1)
(52,dataLen)
(53,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(54,data)
(55,data[dataLen-1])
(56,\\\'\\\\n\\\')
(57,fgets(data+dataLen, (int)
(58,dataLen)
(59,data)
(60,COMMAND_ARG2)
(61,int)
(62,100-dataLen)
(63,data)
(64,NULL)
(65,dataLen)
(66,data)
(67,fgets(data+dataLen, (int)
(68,)
(69,stdin)
(70,if (fgets(data+dataLen, (int)
(71,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
