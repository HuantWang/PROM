-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_01_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnvp(_P_WAIT, COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
122,124
123,124
124,125
124,126
126,127
126,128
126,129
126,130
130,131
131,132
131,133
131,134
131,135
132,133
134,135
136,137
138,139
140,141
141,142
141,143
141,144
141,145
142,143
144,145
146,147
148,149
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,128,129,133,135,137,139,143,145,147,149
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_01_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
void
CWE78_OS_Command_Injection__char_console_w32_spawnvp_01_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnvp_01_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnvp(_P_WAIT, COMMAND_INT, args);
_spawnvp(_P_WAIT, COMMAND_INT, args)
_spawnvp
_spawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(14,44,0)
(72,8,0)
(56,73,0)
(45,5,0)
(76,65,0)
(37,13,0)
(12,56,0)
(64,56,0)
(19,71,0)
(28,62,0)
(42,43,0)
(56,12,0)
(65,43,0)
(63,73,0)
(35,45,0)
(59,12,0)
(9,19,0)
(75,37,0)
(50,57,0)
(6,7,0)
(54,70,0)
(19,31,0)
(24,69,0)
(5,7,0)
(25,60,0)
(68,38,0)
(27,32,0)
(57,16,0)
(34,5,0)
(65,71,0)
(44,43,0)
(44,60,0)
(52,43,0)
(7,43,0)
(61,33,0)
(43,57,0)
(31,19,0)
(3,45,0)
(52,36,0)
(33,13,0)
(29,74,0)
(52,72,0)
(22,1,0)
(2,31,0)
(68,74,0)
(13,16,0)
(73,3,0)
(49,13,0)
(5,1,0)
(71,62,0)
(4,71,0)
(21,45,0)
(67,57,0)
(48,58,0)
(11,43,0)
(26,37,0)
(17,37,0)
(66,74,0)
(62,16,0)
(18,70,0)
(71,32,0)
(20,12,0)
(10,29,0)
(55,52,0)
(74,68,0)
(36,52,0)
(45,3,0)
(53,62,0)
(7,5,0)
(38,68,0)
(74,29,0)
(60,47,0)
(30,19,0)
(70,68,0)
(37,33,0)
(32,43,0)
(40,44,0)
(56,43,0)
(74,65,0)
(12,5,0)
(68,70,0)
(32,71,0)
(15,36,0)
(41,65,0)
(65,74,0)
(23,16,0)
(0,36,0)
(36,5,0)
(73,56,0)
(43,16,0)
(58,47,0)
(70,71,0)
(3,73,0)
(46,72,0)
(51,16,0)
(44,71,0)
(66,68,1)
(65,71,1)
(52,36,1)
(61,72,1)
(65,43,1)
(26,33,1)
(3,45,1)
(73,63,1)
(6,34,1)
(55,3,1)
(31,2,1)
(36,0,1)
(20,59,1)
(17,75,1)
(11,42,1)
(7,6,1)
(67,50,1)
(37,17,1)
(70,18,1)
(10,74,1)
(76,31,1)
(35,5,1)
(48,29,1)
(52,43,1)
(2,19,1)
(18,54,1)
(74,68,1)
(19,9,1)
(65,41,1)
(34,29,1)
(70,71,1)
(40,58,1)
(29,74,1)
(43,11,1)
(29,10,1)
(45,21,1)
(68,70,1)
(36,5,1)
(41,76,1)
(45,5,1)
(61,60,1)
(3,73,1)
(63,56,1)
(73,56,1)
(39,37,1)
(72,46,1)
(46,52,1)
(27,4,1)
(71,32,1)
(0,15,1)
(12,20,1)
(33,61,1)
(59,64,1)
(56,12,1)
(58,48,1)
(74,66,1)
(54,65,1)
(37,33,1)
(4,43,1)
(74,65,1)
(60,25,1)
(32,43,1)
(31,19,1)
(21,35,1)
(12,5,1)
(25,44,1)
(75,26,1)
(7,43,1)
(68,38,1)
(30,71,1)
(61,31,1)
(64,45,1)
(44,71,1)
(57,67,1)
(44,14,1)
(42,57,1)
(43,57,1)
(32,27,1)
(9,30,1)
(14,40,1)
(19,71,1)
(5,7,1)
(44,43,1)
(15,55,1)
(61,3,1)
(56,43,1)
(76,31,2)
(5,7,2)
(20,45,2)
(58,29,2)
(73,45,2)
(70,31,2)
(25,29,2)
(52,3,2)
(68,31,2)
(48,29,2)
(19,71,2)
(21,29,2)
(56,43,2)
(7,29,2)
(44,71,2)
(70,71,2)
(43,57,2)
(65,71,2)
(29,31,2)
(31,19,2)
(15,3,2)
(71,32,2)
(44,43,2)
(68,70,2)
(32,43,2)
(46,3,2)
(10,31,2)
(41,31,2)
(59,45,2)
(56,45,2)
(18,31,2)
(74,65,2)
(74,31,2)
(3,29,2)
(73,56,2)
(3,73,2)
(74,68,2)
(72,3,2)
(68,38,2)
(65,31,2)
(55,3,2)
(44,29,2)
(65,43,2)
(60,29,2)
(63,45,2)
(12,5,2)
(45,29,2)
(37,33,2)
(66,31,2)
(29,74,2)
(45,5,2)
(5,29,2)
(64,45,2)
(7,43,2)
(36,3,2)
(52,43,2)
(40,29,2)
(34,29,2)
(54,31,2)
(35,29,2)
(3,45,2)
(6,29,2)
(12,45,2)
(52,36,2)
(56,12,2)
(36,5,2)
(0,3,2)
(14,29,2)
-----------------------------------
(0,1)
(1,)
(2,1)
(3,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(4,dataLen)
(5,dataLen = strlen(data)
(6,data)
(7,strlen(data)
(8,)
(9,dataLen)
(10,NULL)
(11,dataBuffer)
(12,dataLen-1)
(13,)
(14,dataLen)
(15,dataLen)
(16,)
(17,args)
(18,dataLen)
(19,100-dataLen)
(20,1)
(21,0)
(22,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(23,data)
(24,if (fgets(data+dataLen, (int)
(25,\\\'\\\\0\\\')
(26,_P_WAIT)
(27,data)
(28,dataLen)
(29,fgets(data+dataLen, (int)
(30,100)
(31,100-dataLen > 1)
(32,strlen(data)
(33,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(34,dataLen)
(35,dataLen)
(36,dataLen-1)
(37,_spawnvp(_P_WAIT, COMMAND_INT, args)
(38,int)
(39,RET)
(40,data)
(41,dataLen)
(42,data)
(43,data = dataBuffer)
(44,data[dataLen])
(45,dataLen > 0)
(46,\\\'\\\\0\\\')
(47,)
(48,"fgets()
(49,args)
(50,dataBuffer)
(51,dataBuffer)
(52,data[dataLen-1])
(53,if (100-dataLen > 1)
(54,100)
(55,data)
(56,data[dataLen-1])
(57,dataBuffer[100] = COMMAND_ARG2)
(58,printLine("fgets()
(59,dataLen)
(60,data[dataLen] = \\\'\\\\0\\\')
(61,args)
(62,)
(63,\\\'\\\\n\\\')
(64,data)
(65,data+dataLen)
(66,stdin)
(67,COMMAND_ARG2)
(68,(int)
(69,)
(70,100-dataLen)
(71,dataLen = strlen(data)
(72,data[dataLen-1] = \\\'\\\\0\\\')
(73,data[dataLen-1] == \\\'\\\\n\\\')
(74,fgets(data+dataLen, (int)
(75,COMMAND_INT)
(76,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
