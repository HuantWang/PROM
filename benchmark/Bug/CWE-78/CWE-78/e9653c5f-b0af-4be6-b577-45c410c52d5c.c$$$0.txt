-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_54_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_54_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_54_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_54_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink
data
data
-----joern-----
(60,23,0)
(32,49,0)
(5,45,0)
(28,69,0)
(28,30,0)
(25,51,0)
(50,48,0)
(64,34,0)
(3,28,0)
(27,48,0)
(45,14,0)
(26,30,0)
(69,63,0)
(52,6,0)
(69,33,0)
(30,28,0)
(30,48,0)
(59,7,0)
(24,68,0)
(46,42,0)
(6,48,0)
(17,63,0)
(13,69,0)
(53,10,0)
(1,28,0)
(5,40,0)
(48,23,0)
(9,45,0)
(14,45,0)
(8,65,0)
(34,42,0)
(44,7,0)
(54,51,0)
(22,14,0)
(30,2,0)
(45,9,0)
(49,5,0)
(39,67,0)
(57,5,0)
(51,69,0)
(37,33,0)
(66,14,0)
(58,23,0)
(12,67,0)
(34,48,0)
(48,42,0)
(45,5,0)
(47,20,0)
(49,68,0)
(14,68,0)
(55,10,0)
(65,42,0)
(59,68,0)
(6,35,0)
(23,42,0)
(15,62,0)
(67,12,0)
(4,48,0)
(38,40,0)
(6,68,0)
(33,69,0)
(67,69,0)
(27,68,0)
(53,51,0)
(49,48,0)
(40,5,0)
(11,42,0)
(43,47,0)
(53,48,0)
(68,65,0)
(10,53,0)
(33,48,0)
(12,10,0)
(21,59,0)
(29,35,0)
(2,61,0)
(19,67,0)
(0,27,0)
(56,59,0)
(31,2,0)
(68,27,0)
(5,49,0)
(41,65,0)
(70,49,0)
(35,20,0)
(7,59,0)
(10,12,0)
(18,53,0)
(51,53,0)
(16,6,0)
(49,32,1)
(67,39,1)
(64,2,1)
(47,43,1)
(54,25,1)
(2,31,1)
(5,49,1)
(10,55,1)
(29,6,1)
(5,57,1)
(64,7,1)
(37,13,1)
(48,50,1)
(12,10,1)
(6,48,1)
(66,22,1)
(35,29,1)
(32,70,1)
(33,48,1)
(57,45,1)
(51,54,1)
(27,0,1)
(51,69,1)
(40,38,1)
(67,69,1)
(52,47,1)
(28,69,1)
(39,19,1)
(12,67,1)
(68,27,1)
(30,28,1)
(48,23,1)
(3,26,1)
(6,16,1)
(22,49,1)
(49,48,1)
(28,1,1)
(16,52,1)
(23,58,1)
(40,5,1)
(34,48,1)
(10,53,1)
(64,35,1)
(31,30,1)
(6,68,1)
(24,48,1)
(45,14,1)
(43,40,1)
(4,23,1)
(27,48,1)
(49,68,1)
(59,21,1)
(14,66,1)
(21,56,1)
(5,45,1)
(13,40,1)
(0,24,1)
(59,68,1)
(7,44,1)
(1,3,1)
(26,12,1)
(45,9,1)
(56,68,1)
(69,33,1)
(34,64,1)
(64,12,1)
(38,5,1)
(70,7,1)
(53,51,1)
(50,4,1)
(55,53,1)
(53,48,1)
(19,69,1)
(25,18,1)
(36,34,1)
(7,59,1)
(33,37,1)
(30,48,1)
(58,60,1)
(18,67,1)
(14,68,1)
(44,59,1)
(30,28,2)
(51,67,2)
(10,67,2)
(40,7,2)
(55,67,2)
(53,51,2)
(6,68,2)
(45,9,2)
(30,12,2)
(59,68,2)
(54,67,2)
(22,7,2)
(52,40,2)
(37,40,2)
(49,48,2)
(19,40,2)
(16,40,2)
(26,12,2)
(18,67,2)
(28,69,2)
(30,48,2)
(68,27,2)
(33,40,2)
(51,69,2)
(29,40,2)
(28,12,2)
(43,40,2)
(6,40,2)
(27,48,2)
(48,23,2)
(66,7,2)
(53,67,2)
(53,48,2)
(12,67,2)
(12,10,2)
(10,53,2)
(49,7,2)
(69,40,2)
(14,68,2)
(67,69,2)
(5,7,2)
(3,12,2)
(12,40,2)
(7,59,2)
(45,7,2)
(47,40,2)
(5,49,2)
(35,40,2)
(32,7,2)
(70,7,2)
(33,48,2)
(45,14,2)
(69,33,2)
(49,68,2)
(31,12,2)
(1,12,2)
(14,7,2)
(2,12,2)
(40,5,2)
(39,40,2)
(38,7,2)
(67,40,2)
(25,67,2)
(34,48,2)
(6,48,2)
(5,45,2)
(57,7,2)
(13,40,2)
-----------------------------------
(0,data)
(1,1)
(2,data[dataLen-1] = \\\'\\\\0\\\')
(3,dataLen)
(4,data)
(5,fgets(data+dataLen, (int)
(6,data[dataLen])
(7,100-dataLen > 1)
(8,dataLen)
(9,int)
(10,data[dataLen-1] == \\\'\\\\n\\\')
(11,data)
(12,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(13,dataLen)
(14,100-dataLen)
(15,if (fgets(data+dataLen, (int)
(16,dataLen)
(17,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(18,data)
(19,dataLen)
(20,)
(21,dataLen)
(22,100)
(23,dataBuffer[100] = COMMAND_ARG2)
(24,dataLen)
(25,dataLen)
(26,data)
(27,strlen(data)
(28,dataLen-1)
(29,\\\'\\\\0\\\')
(30,data[dataLen-1])
(31,\\\'\\\\0\\\')
(32,dataLen)
(33,strlen(data)
(34,CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data)
(35,data[dataLen] = \\\'\\\\0\\\')
(36,RET)
(37,data)
(38,NULL)
(39,0)
(40,fgets(data+dataLen, (int)
(41,if (100-dataLen > 1)
(42,)
(43,"fgets()
(44,1)
(45,(int)
(46,dataBuffer)
(47,printLine("fgets()
(48,data = dataBuffer)
(49,data+dataLen)
(50,dataBuffer)
(51,dataLen-1)
(52,data)
(53,data[dataLen-1])
(54,1)
(55,\\\'\\\\n\\\')
(56,100)
(57,stdin)
(58,COMMAND_ARG2)
(59,100-dataLen)
(60,dataBuffer)
(61,)
(62,)
(63,)
(64,data)
(65,)
(66,dataLen)
(67,dataLen > 0)
(68,dataLen = strlen(data)
(69,dataLen = strlen(data)
(70,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
