-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execlp_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execlp_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execlp_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_execlp_45_bad()
CWE78_OS_Command_Injection__char_console_execlp_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execlp_45_badData = data;
CWE78_OS_Command_Injection__char_console_execlp_45_badData = data
CWE78_OS_Command_Injection__char_console_execlp_45_badData
CWE78_OS_Command_Injection__char_console_execlp_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(34,13,0)
(44,6,0)
(63,35,0)
(9,10,0)
(5,48,0)
(36,28,0)
(11,52,0)
(4,13,0)
(18,56,0)
(11,50,0)
(56,38,0)
(44,21,0)
(36,31,0)
(52,50,0)
(69,22,0)
(68,1,0)
(33,1,0)
(14,25,0)
(30,28,0)
(40,52,0)
(2,44,0)
(17,26,0)
(8,68,0)
(16,13,0)
(29,55,0)
(30,44,0)
(53,21,0)
(59,48,0)
(48,50,0)
(6,44,0)
(28,30,0)
(24,34,0)
(67,50,0)
(28,36,0)
(46,52,0)
(6,11,0)
(1,11,0)
(70,30,0)
(14,44,0)
(41,10,0)
(19,37,0)
(49,7,0)
(10,34,0)
(42,50,0)
(36,35,0)
(25,14,0)
(10,38,0)
(4,56,0)
(32,21,0)
(61,11,0)
(37,28,0)
(21,50,0)
(1,7,0)
(7,58,0)
(0,14,0)
(64,25,0)
(26,20,0)
(22,11,0)
(65,56,0)
(72,43,0)
(71,20,0)
(35,44,0)
(31,36,0)
(35,36,0)
(30,11,0)
(68,38,0)
(51,43,0)
(45,38,0)
(27,35,0)
(13,4,0)
(23,11,0)
(39,28,0)
(38,66,0)
(15,6,0)
(1,68,0)
(47,71,0)
(13,34,0)
(34,10,0)
(22,38,0)
(54,14,0)
(3,68,0)
(62,66,0)
(43,26,0)
(48,11,0)
(43,11,0)
(28,37,0)
(43,44,0)
(38,22,0)
(60,30,0)
(56,4,0)
(57,50,0)
(34,11,0)
(33,4,1)
(41,9,1)
(4,56,1)
(48,11,1)
(19,28,1)
(23,52,1)
(4,13,1)
(56,65,1)
(69,45,1)
(18,38,1)
(11,52,1)
(17,43,1)
(68,38,1)
(25,14,1)
(60,70,1)
(45,37,1)
(10,41,1)
(47,37,1)
(30,44,1)
(59,25,1)
(24,56,1)
(27,63,1)
(15,2,1)
(36,35,1)
(28,30,1)
(25,64,1)
(37,19,1)
(65,18,1)
(26,17,1)
(61,23,1)
(14,0,1)
(36,31,1)
(44,6,1)
(28,39,1)
(59,26,1)
(7,49,1)
(39,36,1)
(8,3,1)
(2,11,1)
(43,72,1)
(42,48,1)
(70,25,1)
(34,10,1)
(72,51,1)
(71,47,1)
(43,44,1)
(56,38,1)
(11,61,1)
(54,44,1)
(3,33,1)
(35,27,1)
(6,15,1)
(13,16,1)
(59,7,1)
(28,36,1)
(16,34,1)
(52,46,1)
(64,14,1)
(1,11,1)
(68,8,1)
(10,38,1)
(43,11,1)
(9,24,1)
(22,11,1)
(34,11,1)
(14,44,1)
(6,11,1)
(35,44,1)
(48,5,1)
(22,69,1)
(49,1,1)
(38,22,1)
(46,40,1)
(0,54,1)
(12,42,1)
(30,60,1)
(51,71,1)
(30,11,1)
(63,30,1)
(5,59,1)
(13,34,1)
(59,4,1)
(37,28,1)
(1,68,1)
(71,37,2)
(1,4,2)
(22,37,2)
(56,37,2)
(34,56,2)
(48,11,2)
(68,4,2)
(1,68,2)
(13,34,2)
(22,11,2)
(60,25,2)
(49,4,2)
(44,6,2)
(37,28,2)
(10,56,2)
(43,11,2)
(35,44,2)
(56,38,2)
(36,35,2)
(43,37,2)
(6,11,2)
(17,37,2)
(51,37,2)
(38,37,2)
(24,56,2)
(16,56,2)
(39,25,2)
(18,37,2)
(7,4,2)
(28,30,2)
(28,25,2)
(1,11,2)
(9,56,2)
(33,4,2)
(34,11,2)
(10,38,2)
(36,31,2)
(47,37,2)
(43,44,2)
(63,25,2)
(68,38,2)
(4,13,2)
(36,25,2)
(70,25,2)
(4,56,2)
(69,37,2)
(13,56,2)
(35,25,2)
(37,25,2)
(14,44,2)
(30,44,2)
(27,25,2)
(45,37,2)
(30,25,2)
(8,4,2)
(30,11,2)
(34,10,2)
(65,37,2)
(25,14,2)
(19,25,2)
(3,4,2)
(72,37,2)
(4,37,2)
(11,52,2)
(28,36,2)
(38,22,2)
(41,56,2)
(26,37,2)
-----------------------------------
(0,dataLen)
(1,data[dataLen-1])
(2,dataLen)
(3,dataLen)
(4,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(5,data)
(6,strlen(data)
(7,data[dataLen-1] = \\\'\\\\0\\\')
(8,1)
(9,dataLen)
(10,dataLen-1)
(11,data = dataBuffer)
(12,RET)
(13,data[dataLen-1] == \\\'\\\\n\\\')
(14,100-dataLen)
(15,data)
(16,\\\'\\\\n\\\')
(17,\\\'\\\\0\\\')
(18,dataLen)
(19,NULL)
(20,)
(21,)
(22,strlen(data)
(23,data)
(24,data)
(25,100-dataLen > 1)
(26,data[dataLen] = \\\'\\\\0\\\')
(27,dataLen)
(28,fgets(data+dataLen, (int)
(29,if (fgets(data+dataLen, (int)
(30,data+dataLen)
(31,int)
(32,if (100-dataLen > 1)
(33,data)
(34,data[dataLen-1])
(35,100-dataLen)
(36,(int)
(37,fgets(data+dataLen, (int)
(38,dataLen = strlen(data)
(39,stdin)
(40,dataBuffer)
(41,1)
(42,badSink()
(43,data[dataLen])
(44,dataLen = strlen(data)
(45,dataLen)
(46,COMMAND_ARG2)
(47,"fgets()
(48,CWE78_OS_Command_Injection__char_console_execlp_45_badData = data)
(49,\\\'\\\\0\\\')
(50,)
(51,data)
(52,dataBuffer[100] = COMMAND_ARG2)
(53,dataLen)
(54,100)
(55,)
(56,dataLen > 0)
(57,dataBuffer)
(58,)
(59,CWE78_OS_Command_Injection__char_console_execlp_45_badData)
(60,dataLen)
(61,dataBuffer)
(62,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(63,100)
(64,1)
(65,0)
(66,)
(67,data)
(68,dataLen-1)
(69,data)
(70,data)
(71,printLine("fgets()
(72,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
