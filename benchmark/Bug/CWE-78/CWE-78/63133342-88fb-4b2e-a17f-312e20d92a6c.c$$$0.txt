-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_w32_spawnv_01_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
116,118
117,118
118,119
118,120
120,121
120,122
120,123
120,124
124,125
125,126
125,127
125,128
125,129
126,127
128,129
130,131
132,133
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,51,53,54,59,62,64,65,69,71,77,80,82,85,86,89,91,93,95,100,101,106,108,109,113,115,119,121,122,123,127,129,131,133,137,139,141,143
-----computeFrom-----
23,24
23,25
49,50
49,51
50,51
50,52
57,58
57,59
67,68
67,69
74,75
74,76
78,79
78,80
88,89
88,90
103,104
103,105
-----guardedBy-----
53,108
71,95
69,115
80,106
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_w32_spawnv_01_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_file_w32_spawnv_01_bad()
CWE78_OS_Command_Injection__char_file_w32_spawnv_01_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(35,39,0)
(29,44,0)
(33,8,0)
(48,15,0)
(6,57,0)
(56,48,0)
(25,18,0)
(39,34,0)
(7,52,0)
(52,7,0)
(7,10,0)
(21,39,0)
(58,28,0)
(40,6,0)
(57,13,0)
(30,29,0)
(23,26,0)
(0,10,0)
(46,48,0)
(47,57,0)
(38,7,0)
(60,52,0)
(19,15,0)
(39,29,0)
(17,20,0)
(10,7,0)
(5,34,0)
(4,13,0)
(9,55,0)
(61,32,0)
(7,46,0)
(51,47,0)
(53,19,0)
(42,57,0)
(45,44,0)
(14,55,0)
(48,46,0)
(8,63,0)
(19,62,0)
(24,26,0)
(64,15,0)
(33,15,0)
(50,48,0)
(46,7,0)
(52,62,0)
(12,28,0)
(11,33,0)
(33,62,0)
(27,44,0)
(49,62,0)
(3,55,0)
(36,18,0)
(57,47,0)
(2,39,0)
(15,28,0)
(18,57,0)
(46,1,0)
(37,3,0)
(62,44,0)
(43,62,0)
(54,52,0)
(15,19,0)
(28,44,0)
(16,33,0)
(20,63,0)
(52,15,0)
(7,57,0)
(6,32,0)
(26,44,0)
(41,8,0)
(55,15,0)
(59,28,0)
(1,46,0)
(34,29,0)
(62,26,0)
(55,3,0)
(31,47,0)
(60,18,1)
(15,19,1)
(39,34,1)
(52,54,1)
(38,46,1)
(18,25,1)
(46,48,1)
(55,14,1)
(37,55,1)
(53,64,1)
(54,60,1)
(5,18,1)
(7,52,1)
(47,31,1)
(6,57,1)
(24,23,1)
(7,46,1)
(62,26,1)
(49,26,1)
(64,62,1)
(39,35,1)
(48,50,1)
(50,56,1)
(55,15,1)
(41,33,1)
(20,17,1)
(56,52,1)
(52,62,1)
(40,10,1)
(57,47,1)
(33,16,1)
(7,38,1)
(43,49,1)
(8,41,1)
(14,9,1)
(33,62,1)
(0,7,1)
(42,3,1)
(62,43,1)
(16,11,1)
(48,15,1)
(40,8,1)
(5,3,1)
(9,15,1)
(11,20,1)
(3,37,1)
(46,1,1)
(26,24,1)
(18,57,1)
(21,34,1)
(52,15,1)
(3,55,1)
(22,39,1)
(2,21,1)
(31,51,1)
(10,0,1)
(35,2,1)
(17,10,1)
(5,6,1)
(25,36,1)
(10,7,1)
(7,57,1)
(36,57,1)
(19,53,1)
(19,62,1)
(33,15,1)
(6,40,1)
(51,42,1)
(34,5,1)
(56,18,2)
(55,15,2)
(62,26,2)
(33,62,2)
(18,57,2)
(38,18,2)
(48,15,2)
(57,47,2)
(33,15,2)
(42,3,2)
(41,10,2)
(31,3,2)
(39,34,2)
(33,10,2)
(7,57,2)
(15,19,2)
(50,18,2)
(52,62,2)
(6,18,2)
(19,62,2)
(52,18,2)
(57,3,2)
(40,18,2)
(8,10,2)
(7,52,2)
(7,46,2)
(46,48,2)
(17,10,2)
(51,3,2)
(10,7,2)
(60,18,2)
(3,55,2)
(46,1,2)
(6,57,2)
(47,3,2)
(18,3,2)
(7,18,2)
(0,18,2)
(52,15,2)
(10,18,2)
(25,3,2)
(11,10,2)
(36,3,2)
(54,18,2)
(16,10,2)
(46,18,2)
(48,18,2)
(20,10,2)
-----------------------------------
(0,NULL)
(1,int)
(2,COMMAND_INT_PATH)
(3,100-dataLen > 1)
(4,if (pFile != NULL)
(5,args)
(6,fclose(pFile)
(7,fgets(data+dataLen, (int)
(8,data[dataLen] = \\\'\\\\0\\\')
(9,100)
(10,fgets(data+dataLen, (int)
(11,data)
(12,pFile)
(13,)
(14,dataLen)
(15,dataLen = strlen(data)
(16,dataLen)
(17,"fgets()
(18,pFile != NULL)
(19,strlen(data)
(20,printLine("fgets()
(21,_P_WAIT)
(22,RET)
(23,dataBuffer)
(24,COMMAND_ARG2)
(25,NULL)
(26,dataBuffer[100] = COMMAND_ARG2)
(27,data)
(28,)
(29,)
(30,args)
(31,"r")
(32,)
(33,data[dataLen])
(34,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(35,args)
(36,pFile)
(37,1)
(38,pFile)
(39,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(40,pFile)
(41,\\\'\\\\0\\\')
(42,pFile)
(43,dataBuffer)
(44,)
(45,dataBuffer)
(46,(int)
(47,fopen(FILENAME, "r")
(48,100-dataLen)
(49,data)
(50,dataLen)
(51,FILENAME)
(52,data+dataLen)
(53,data)
(54,dataLen)
(55,100-dataLen)
(56,100)
(57,pFile = fopen(FILENAME, "r")
(58,dataLen)
(59,if (100-dataLen > 1)
(60,data)
(61,if (fgets(data+dataLen, (int)
(62,data = dataBuffer)
(63,)
(64,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
