-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execlp_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execlp_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_execlp_63_bad()
CWE78_OS_Command_Injection__char_console_execlp_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_execlp_63b_badSink
CWE78_OS_Command_Injection__char_console_execlp_63b_badSink
&data
data
data
-----joern-----
(16,1,0)
(37,63,0)
(28,58,0)
(22,57,0)
(31,26,0)
(54,3,0)
(47,42,0)
(38,37,0)
(61,45,0)
(45,53,0)
(42,58,0)
(37,38,0)
(26,31,0)
(53,51,0)
(62,26,0)
(64,42,0)
(16,38,0)
(63,37,0)
(50,53,0)
(34,28,0)
(39,71,0)
(57,1,0)
(31,58,0)
(67,42,0)
(5,51,0)
(27,42,0)
(56,57,0)
(55,45,0)
(17,3,0)
(65,13,0)
(60,43,0)
(35,53,0)
(50,64,0)
(26,42,0)
(40,16,0)
(68,15,0)
(3,42,0)
(49,29,0)
(42,28,0)
(47,70,0)
(4,45,0)
(70,53,0)
(30,58,0)
(6,64,0)
(1,67,0)
(69,58,0)
(10,1,0)
(64,50,0)
(46,23,0)
(57,46,0)
(8,38,0)
(2,59,0)
(3,37,0)
(4,71,0)
(9,50,0)
(18,63,0)
(7,67,0)
(44,0,0)
(71,4,0)
(59,23,0)
(15,68,0)
(47,71,0)
(66,50,0)
(70,47,0)
(38,16,0)
(68,1,0)
(41,13,0)
(19,37,0)
(38,8,0)
(32,16,0)
(52,42,0)
(51,42,0)
(64,29,0)
(71,47,0)
(36,15,0)
(45,4,0)
(37,3,0)
(29,11,0)
(13,58,0)
(33,70,0)
(20,70,0)
(57,42,0)
(48,47,0)
(53,0,0)
(67,1,0)
(1,13,0)
(21,68,0)
(51,53,0)
(24,28,0)
(12,68,0)
(3,1,0)
(14,46,0)
(48,45,1)
(62,46,1)
(17,54,1)
(34,24,1)
(53,51,1)
(40,32,1)
(16,1,1)
(50,9,1)
(31,26,1)
(37,38,1)
(3,42,1)
(67,42,1)
(35,63,1)
(25,31,1)
(49,64,1)
(70,33,1)
(33,20,1)
(15,36,1)
(64,42,1)
(21,12,1)
(52,28,1)
(2,63,1)
(12,1,1)
(7,10,1)
(15,68,1)
(39,47,1)
(29,49,1)
(4,45,1)
(70,53,1)
(68,21,1)
(57,56,1)
(1,67,1)
(19,38,1)
(27,52,1)
(26,62,1)
(38,8,1)
(4,71,1)
(38,16,1)
(42,27,1)
(22,59,1)
(51,42,1)
(50,53,1)
(51,5,1)
(63,18,1)
(47,70,1)
(62,4,1)
(45,61,1)
(62,29,1)
(20,48,1)
(42,28,1)
(16,40,1)
(32,3,1)
(28,34,1)
(18,37,1)
(66,6,1)
(26,42,1)
(37,19,1)
(6,4,1)
(62,15,1)
(68,1,1)
(54,15,1)
(36,68,1)
(55,53,1)
(61,55,1)
(71,39,1)
(56,22,1)
(63,37,1)
(3,1,1)
(47,42,1)
(64,50,1)
(71,47,1)
(3,17,1)
(5,35,1)
(59,2,1)
(46,14,1)
(9,66,1)
(14,57,1)
(57,1,1)
(45,53,1)
(37,3,1)
(57,42,1)
(10,42,1)
(67,7,1)
(71,45,2)
(57,1,2)
(54,15,2)
(26,42,2)
(19,15,2)
(53,51,2)
(9,4,2)
(47,42,2)
(16,1,2)
(31,26,2)
(61,63,2)
(20,45,2)
(40,15,2)
(35,63,2)
(39,45,2)
(57,63,2)
(38,8,2)
(48,45,2)
(32,15,2)
(50,4,2)
(42,28,2)
(3,15,2)
(16,15,2)
(67,42,2)
(17,15,2)
(47,45,2)
(63,37,2)
(22,63,2)
(5,63,2)
(56,63,2)
(64,42,2)
(53,63,2)
(37,15,2)
(71,47,2)
(6,4,2)
(3,42,2)
(66,4,2)
(38,15,2)
(37,38,2)
(18,15,2)
(57,42,2)
(55,63,2)
(38,16,2)
(49,4,2)
(37,3,2)
(3,1,2)
(47,70,2)
(59,63,2)
(64,4,2)
(2,63,2)
(45,63,2)
(63,15,2)
(64,50,2)
(29,4,2)
(33,45,2)
(45,53,2)
(4,71,2)
(4,45,2)
(70,45,2)
(70,53,2)
(50,53,2)
(46,63,2)
(14,63,2)
(51,63,2)
(51,42,2)
(15,68,2)
(68,1,2)
(1,67,2)
(4,63,2)
-----------------------------------
(0,)
(1,dataLen = strlen(data)
(2,"fgets()
(3,data+dataLen)
(4,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(5,data)
(6,data)
(7,data)
(8,int)
(9,1)
(10,dataLen)
(11,)
(12,100)
(13,)
(14,\\\'\\\\0\\\')
(15,100-dataLen > 1)
(16,100-dataLen)
(17,dataLen)
(18,NULL)
(19,stdin)
(20,dataLen)
(21,dataLen)
(22,data)
(23,)
(24,dataBuffer)
(25,RET)
(26,&data)
(27,dataBuffer)
(28,dataBuffer[100] = COMMAND_ARG2)
(29,data[dataLen-1] = \\\'\\\\0\\\')
(30,dataBuffer)
(31,CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data)
(32,100)
(33,1)
(34,COMMAND_ARG2)
(35,dataLen)
(36,1)
(37,fgets(data+dataLen, (int)
(38,(int)
(39,\\\'\\\\n\\\')
(40,dataLen)
(41,dataLen)
(42,data = dataBuffer)
(43,)
(44,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(45,dataLen > 0)
(46,data[dataLen] = \\\'\\\\0\\\')
(47,data[dataLen-1])
(48,data)
(49,\\\'\\\\0\\\')
(50,dataLen-1)
(51,strlen(data)
(52,data)
(53,dataLen = strlen(data)
(54,data)
(55,dataLen)
(56,dataLen)
(57,data[dataLen])
(58,)
(59,printLine("fgets()
(60,if (fgets(data+dataLen, (int)
(61,0)
(62,data)
(63,fgets(data+dataLen, (int)
(64,data[dataLen-1])
(65,if (100-dataLen > 1)
(66,dataLen)
(67,strlen(data)
(68,100-dataLen)
(69,data)
(70,dataLen-1)
(71,data[dataLen-1] == \\\'\\\\n\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
