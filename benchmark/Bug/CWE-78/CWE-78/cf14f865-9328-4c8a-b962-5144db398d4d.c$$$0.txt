-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_execlp_54_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    CWE78_OS_Command_Injection__wchar_t_console_execlp_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_execlp_54_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    CWE78_OS_Command_Injection__wchar_t_console_execlp_54b_badSink(data);}
void
CWE78_OS_Command_Injection__wchar_t_console_execlp_54_bad()
CWE78_OS_Command_Injection__wchar_t_console_execlp_54_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    CWE78_OS_Command_Injection__wchar_t_console_execlp_54b_badSink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
CWE78_OS_Command_Injection__wchar_t_console_execlp_54b_badSink(data);
CWE78_OS_Command_Injection__wchar_t_console_execlp_54b_badSink(data)
CWE78_OS_Command_Injection__wchar_t_console_execlp_54b_badSink
CWE78_OS_Command_Injection__wchar_t_console_execlp_54b_badSink
data
data
-----joern-----
(4,8,0)
(16,2,0)
(26,3,0)
(7,16,0)
(5,2,0)
(9,16,0)
(36,4,0)
(7,27,0)
(26,10,0)
(4,9,0)
(12,38,0)
(39,10,0)
(23,29,0)
(10,26,0)
(27,33,0)
(25,32,0)
(30,43,0)
(46,28,0)
(1,38,0)
(40,38,0)
(35,27,0)
(16,5,0)
(7,1,0)
(33,27,0)
(37,5,0)
(10,1,0)
(44,2,0)
(21,2,0)
(14,32,0)
(22,45,0)
(19,7,0)
(27,7,0)
(6,10,0)
(43,2,0)
(26,27,0)
(29,45,0)
(32,14,0)
(34,9,0)
(38,2,0)
(20,32,0)
(13,1,0)
(28,16,0)
(0,7,0)
(41,5,0)
(24,42,0)
(32,1,0)
(27,26,0)
(28,1,0)
(43,16,0)
(42,8,0)
(31,16,0)
(9,4,0)
(17,16,0)
(47,14,0)
(1,28,0)
(18,11,0)
(3,26,0)
(48,33,0)
(9,16,1)
(28,16,1)
(33,27,1)
(14,47,1)
(47,32,1)
(26,10,1)
(16,5,1)
(34,36,1)
(29,23,1)
(46,13,1)
(43,30,1)
(30,22,1)
(23,33,1)
(19,0,1)
(20,1,1)
(27,7,1)
(15,43,1)
(32,1,1)
(36,33,1)
(1,28,1)
(25,20,1)
(30,14,1)
(35,26,1)
(7,1,1)
(43,16,1)
(13,16,1)
(10,6,1)
(41,37,1)
(33,48,1)
(5,41,1)
(6,39,1)
(26,3,1)
(4,9,1)
(17,5,1)
(27,35,1)
(28,46,1)
(14,32,1)
(24,4,1)
(31,17,1)
(10,1,1)
(39,7,1)
(16,31,1)
(0,14,1)
(7,16,1)
(27,26,1)
(32,25,1)
(22,29,1)
(7,19,1)
(48,27,1)
(9,34,1)
(30,24,1)
(39,14,2)
(22,33,2)
(9,33,2)
(29,33,2)
(33,27,2)
(27,26,2)
(19,14,2)
(4,33,2)
(27,14,2)
(36,33,2)
(26,14,2)
(10,1,2)
(43,16,2)
(7,14,2)
(26,10,2)
(23,33,2)
(33,14,2)
(26,3,2)
(14,32,2)
(7,1,2)
(1,28,2)
(4,9,2)
(35,14,2)
(28,16,2)
(16,5,2)
(34,33,2)
(0,14,2)
(9,16,2)
(27,7,2)
(48,14,2)
(32,1,2)
(24,33,2)
(7,16,2)
(10,14,2)
(6,14,2)
-----------------------------------
(0,data)
(1,dataLen = wcslen(data)
(2,)
(3,int)
(4,dataLen = wcslen(data)
(5,dataBuffer[100] = COMMAND_ARG2)
(6,dataLen)
(7,data+dataLen)
(8,)
(9,wcslen(data)
(10,100-dataLen)
(11,)
(12,if (100-dataLen > 1)
(13,dataLen)
(14,100-dataLen > 1)
(15,RET)
(16,data = dataBuffer)
(17,data)
(18,if (fgetws(data+dataLen, (int)
(19,dataLen)
(20,100)
(21,dataBuffer)
(22,\\\'\\\\0\\\')
(23,"fgetws()
(24,\\\'\\\\0\\\')
(25,dataLen)
(26,(int)
(27,fgetws(data+dataLen, (int)
(28,wcslen(data)
(29,printLine("fgetws()
(30,data)
(31,dataBuffer)
(32,100-dataLen)
(33,fgetws(data+dataLen, (int)
(34,data)
(35,stdin)
(36,dataLen)
(37,dataBuffer)
(38,)
(39,100)
(40,dataLen)
(41,COMMAND_ARG2)
(42,)
(43,CWE78_OS_Command_Injection__wchar_t_console_execlp_54b_badSink(data)
(44,data)
(45,)
(46,data)
(47,1)
(48,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
