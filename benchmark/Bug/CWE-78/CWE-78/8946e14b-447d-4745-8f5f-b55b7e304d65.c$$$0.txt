-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_53_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnlp_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_53_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_53b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnlp_53_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnlp_53_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnlp_53b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_spawnlp_53b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_spawnlp_53b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnlp_53b_badSink
data
data
-----joern-----
(17,16,0)
(21,12,0)
(4,7,0)
(62,35,0)
(11,28,0)
(46,16,0)
(28,64,0)
(29,10,0)
(5,0,0)
(20,16,0)
(4,28,0)
(26,42,0)
(41,42,0)
(28,4,0)
(55,37,0)
(23,33,0)
(9,57,0)
(16,57,0)
(4,44,0)
(6,49,0)
(30,27,0)
(56,57,0)
(28,17,0)
(54,46,0)
(57,47,0)
(36,17,0)
(13,16,0)
(67,62,0)
(2,55,0)
(15,64,0)
(51,45,0)
(44,4,0)
(8,50,0)
(37,6,0)
(10,19,0)
(62,46,0)
(69,0,0)
(7,3,0)
(17,3,0)
(7,4,0)
(22,66,0)
(31,49,0)
(25,35,0)
(70,3,0)
(50,19,0)
(14,47,0)
(32,37,0)
(48,18,0)
(43,47,0)
(1,7,0)
(52,45,0)
(53,66,0)
(16,47,0)
(17,28,0)
(12,42,0)
(24,49,0)
(66,10,0)
(46,62,0)
(61,30,0)
(3,0,0)
(58,67,0)
(6,37,0)
(18,16,0)
(67,18,0)
(34,62,0)
(70,16,0)
(68,67,0)
(42,3,0)
(64,28,0)
(49,6,0)
(45,62,0)
(60,3,0)
(65,20,0)
(37,55,0)
(66,16,0)
(66,3,0)
(49,62,0)
(20,47,0)
(55,45,0)
(63,70,0)
(40,16,0)
(45,55,0)
(3,70,0)
(0,47,0)
(59,17,0)
(42,12,0)
(38,7,0)
(18,67,0)
(55,16,0)
(18,30,0)
(65,12,1)
(45,62,1)
(7,1,1)
(37,55,1)
(9,56,1)
(49,24,1)
(1,38,1)
(53,50,1)
(70,16,1)
(31,62,1)
(3,70,1)
(15,28,1)
(49,62,1)
(61,18,1)
(8,64,1)
(6,37,1)
(12,21,1)
(17,36,1)
(52,51,1)
(64,28,1)
(66,22,1)
(60,16,1)
(58,68,1)
(20,16,1)
(7,3,1)
(17,3,1)
(46,16,1)
(66,16,1)
(41,26,1)
(37,32,1)
(68,48,1)
(55,16,1)
(28,17,1)
(32,55,1)
(29,66,1)
(64,15,1)
(62,46,1)
(28,4,1)
(59,12,1)
(17,16,1)
(42,41,1)
(34,64,1)
(21,42,1)
(13,57,1)
(38,17,1)
(4,44,1)
(16,57,1)
(46,54,1)
(51,2,1)
(18,67,1)
(67,62,1)
(24,31,1)
(36,59,1)
(65,6,1)
(55,45,1)
(45,52,1)
(2,49,1)
(30,61,1)
(65,30,1)
(39,20,1)
(12,42,1)
(48,6,1)
(10,29,1)
(42,3,1)
(65,10,1)
(20,65,1)
(57,9,1)
(66,3,1)
(26,3,1)
(11,4,1)
(28,11,1)
(67,58,1)
(22,53,1)
(63,60,1)
(4,7,1)
(70,63,1)
(50,8,1)
(6,49,1)
(16,40,1)
(54,34,1)
(18,16,1)
(40,13,1)
(32,49,2)
(55,45,2)
(67,6,2)
(48,6,2)
(31,64,2)
(55,16,2)
(18,6,2)
(37,55,2)
(28,4,2)
(42,3,2)
(6,37,2)
(28,17,2)
(1,12,2)
(62,64,2)
(6,49,2)
(66,3,2)
(37,49,2)
(2,49,2)
(29,64,2)
(49,64,2)
(17,3,2)
(62,46,2)
(51,49,2)
(66,64,2)
(6,64,2)
(58,6,2)
(28,12,2)
(46,64,2)
(59,12,2)
(52,49,2)
(18,16,2)
(70,16,2)
(24,64,2)
(8,64,2)
(67,62,2)
(34,64,2)
(4,12,2)
(17,16,2)
(3,70,2)
(54,64,2)
(38,12,2)
(4,7,2)
(36,12,2)
(66,16,2)
(30,6,2)
(50,64,2)
(16,57,2)
(64,28,2)
(45,49,2)
(10,64,2)
(7,12,2)
(53,64,2)
(61,6,2)
(11,12,2)
(7,3,2)
(55,49,2)
(4,44,2)
(49,62,2)
(46,16,2)
(18,67,2)
(15,12,2)
(68,6,2)
(22,64,2)
(20,16,2)
(17,12,2)
(12,42,2)
(45,62,2)
(64,12,2)
-----------------------------------
(0,)
(1,dataLen)
(2,data)
(3,dataLen = strlen(data)
(4,(int)
(5,if (100-dataLen > 1)
(6,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(7,100-dataLen)
(8,"fgets()
(9,COMMAND_ARG2)
(10,data[dataLen] = \\\'\\\\0\\\')
(11,stdin)
(12,100-dataLen > 1)
(13,data)
(14,data)
(15,NULL)
(16,data = dataBuffer)
(17,data+dataLen)
(18,data[dataLen-1])
(19,)
(20,CWE78_OS_Command_Injection__char_console_w32_spawnlp_53b_badSink(data)
(21,1)
(22,dataLen)
(23,if (fgets(data+dataLen, (int)
(24,0)
(25,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(26,100)
(27,)
(28,fgets(data+dataLen, (int)
(29,\\\'\\\\0\\\')
(30,data[dataLen-1] = \\\'\\\\0\\\')
(31,dataLen)
(32,\\\'\\\\n\\\')
(33,)
(34,dataLen)
(35,)
(36,dataLen)
(37,data[dataLen-1] == \\\'\\\\n\\\')
(38,100)
(39,RET)
(40,dataBuffer)
(41,dataLen)
(42,100-dataLen)
(43,dataBuffer)
(44,int)
(45,dataLen-1)
(46,strlen(data)
(47,)
(48,data)
(49,dataLen > 0)
(50,printLine("fgets()
(51,dataLen)
(52,1)
(53,data)
(54,data)
(55,data[dataLen-1])
(56,dataBuffer)
(57,dataBuffer[100] = COMMAND_ARG2)
(58,1)
(59,data)
(60,dataLen)
(61,\\\'\\\\0\\\')
(62,dataLen = strlen(data)
(63,data)
(64,fgets(data+dataLen, (int)
(65,data)
(66,data[dataLen])
(67,dataLen-1)
(68,dataLen)
(69,dataLen)
(70,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
