-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_execv_08_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(staticReturnsTrue())
    {
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
66,69
66,70
67,68
69,70
69,71
70,71
72,73
74,75
76,77
76,78
77,78
77,79
79,80
82,83
82,84
83,84
84,85
84,86
86,87
86,88
86,89
86,90
90,91
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
100,101
101,102
101,103
101,104
102,103
104,105
106,107
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,37,39,43,45,48,50,51,55,57,61,63,68,71,73,75,78,80,81,85,87,88,89,93,95,97,99,103,105,107
-----computeFrom-----
23,24
23,25
59,60
59,61
69,70
69,71
76,77
76,78
77,78
77,79
-----guardedBy-----
61,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_execv_08_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(staticReturnsTrue())    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_environment_w32_execv_08_bad()
CWE78_OS_Command_Injection__char_environment_w32_execv_08_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(staticReturnsTrue())    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticReturnsTrue())    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(22,14,0)
(7,42,0)
(5,4,0)
(36,40,0)
(43,14,0)
(34,43,0)
(25,42,0)
(35,41,0)
(34,41,0)
(8,26,0)
(0,13,0)
(13,2,0)
(10,13,0)
(15,13,0)
(16,12,0)
(44,36,0)
(19,11,0)
(18,13,0)
(23,26,0)
(38,44,0)
(12,11,0)
(14,41,0)
(44,38,0)
(6,34,0)
(16,4,0)
(17,38,0)
(37,16,0)
(36,15,0)
(30,11,0)
(32,44,0)
(15,39,0)
(31,15,0)
(33,12,0)
(42,11,0)
(28,38,0)
(27,39,0)
(1,41,0)
(24,43,0)
(45,34,0)
(41,42,0)
(38,43,0)
(26,15,0)
(21,11,0)
(36,44,0)
(39,15,0)
(14,43,0)
(34,36,0)
(36,34,0)
(9,16,0)
(29,36,0)
(43,13,0)
(41,11,0)
(4,12,0)
(34,45,1)
(45,6,1)
(44,38,1)
(35,1,1)
(34,43,1)
(29,34,1)
(20,41,1)
(41,35,1)
(41,42,1)
(16,37,1)
(9,4,1)
(28,32,1)
(23,15,1)
(1,42,1)
(14,41,1)
(38,17,1)
(5,26,1)
(37,9,1)
(36,44,1)
(15,39,1)
(24,20,1)
(32,29,1)
(8,23,1)
(42,7,1)
(6,26,1)
(7,25,1)
(3,16,1)
(22,24,1)
(43,14,1)
(27,31,1)
(16,4,1)
(36,34,1)
(31,43,1)
(34,41,1)
(17,28,1)
(14,22,1)
(5,36,1)
(38,43,1)
(39,27,1)
(4,5,1)
(5,20,1)
(36,15,1)
(26,15,1)
(26,8,1)
(43,20,2)
(39,20,2)
(14,41,2)
(34,26,2)
(31,20,2)
(6,26,2)
(41,42,2)
(38,26,2)
(38,43,2)
(15,39,2)
(8,20,2)
(36,34,2)
(29,26,2)
(44,26,2)
(16,4,2)
(36,26,2)
(22,20,2)
(44,38,2)
(34,43,2)
(17,26,2)
(28,26,2)
(34,41,2)
(26,20,2)
(36,44,2)
(36,15,2)
(26,15,2)
(27,20,2)
(23,20,2)
(43,14,2)
(32,26,2)
(45,26,2)
(15,20,2)
(14,20,2)
(24,20,2)
-----------------------------------
(0,dataLen)
(1,data)
(2,)
(3,RET)
(4,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(5,args)
(6,data)
(7,COMMAND_ARG2)
(8,NULL)
(9,COMMAND_INT_PATH)
(10,environment)
(11,)
(12,)
(13,)
(14,strlen(data)
(15,* environment = GETENV(ENV_VARIABLE)
(16,EXECV(COMMAND_INT_PATH, args)
(17,1)
(18,if (environment != NULL)
(19,if(staticReturnsTrue()
(20,staticReturnsTrue()
(21,dataBuffer)
(22,data)
(23,environment)
(24,dataLen)
(25,dataBuffer)
(26,environment != NULL)
(27,ENV_VARIABLE)
(28,dataLen)
(29,environment)
(30,data)
(31,environment)
(32,100)
(33,args)
(34,data+dataLen)
(35,dataBuffer)
(36,strncat(data+dataLen, environment, 100-dataLen-1)
(37,args)
(38,dataLen-1)
(39,GETENV(ENV_VARIABLE)
(40,)
(41,data = dataBuffer)
(42,dataBuffer[100] = COMMAND_ARG2)
(43,dataLen = strlen(data)
(44,100-dataLen-1)
(45,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
