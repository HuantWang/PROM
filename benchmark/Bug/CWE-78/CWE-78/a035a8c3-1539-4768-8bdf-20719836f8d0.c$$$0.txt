-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_system_17_bad()
{
    int i;
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    for(i = 0; i < 1; i++)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
62,63
62,64
64,65
67,68
68,69
68,70
68,71
69,70
69,71
70,71
70,72
70,73
70,74
71,72
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
82,83
83,84
83,85
85,86
87,88
89,90
91,92
91,93
92,93
93,94
93,95
94,95
96,97
96,98
97,98
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
108,110
109,110
111,112
111,113
112,113
116,117
117,118
118,119
118,120
119,120
119,121
120,121
122,123
122,124
123,124
127,128
127,129
128,129
129,130
129,131
130,131
133,134
134,135
134,136
135,136
135,137
136,137
138,139
141,142
141,143
142,143
142,144
143,144
143,145
144,145
146,147
149,150
149,151
150,151
151,152
151,153
152,153
155,156
156,157
156,158
157,158
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,51,53,57,59,63,65,66,72,75,77,80,81,84,86,88,90,95,98,100,105,106,110,113,114,115,121,124,125,126,131,132,137,139,140,145,147,148,153,154,158,159
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
61,62
61,63
62,63
62,64
69,70
69,71
73,74
73,75
83,84
83,85
93,94
93,95
102,103
102,104
103,104
103,105
107,108
107,109
111,112
111,113
118,119
118,120
122,123
122,124
134,135
134,136
142,143
142,144
-----guardedBy-----
65,139
75,121
86,124
110,121
113,124
-----guardedByNegation-----
75,137
86,139
-----lastLexicalUse-----
75,137
86,139
-----jump-----
75,137
86,139
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_system_17_bad(){    int i;    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
void
CWE78_OS_Command_Injection__wchar_t_console_system_17_bad()
CWE78_OS_Command_Injection__wchar_t_console_system_17_bad
{    int i;    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
int i;
int i;
int
i
i
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(32,56,0)
(9,54,0)
(22,0,0)
(41,30,0)
(17,67,0)
(28,43,0)
(60,65,0)
(20,22,0)
(61,30,0)
(1,44,0)
(56,44,0)
(31,0,0)
(29,67,0)
(0,67,0)
(39,25,0)
(16,5,0)
(54,47,0)
(39,21,0)
(39,51,0)
(35,0,0)
(54,11,0)
(43,44,0)
(5,22,0)
(64,22,0)
(3,6,0)
(57,26,0)
(25,39,0)
(5,44,0)
(66,67,0)
(36,52,0)
(43,52,0)
(27,47,0)
(44,59,0)
(55,25,0)
(44,5,0)
(2,57,0)
(24,38,0)
(21,44,0)
(58,30,0)
(10,59,0)
(12,51,0)
(51,56,0)
(51,12,0)
(21,39,0)
(48,58,0)
(40,19,0)
(50,49,0)
(22,67,0)
(21,22,0)
(4,11,0)
(6,26,0)
(62,64,0)
(65,15,0)
(56,51,0)
(59,46,0)
(52,43,0)
(23,56,0)
(49,30,0)
(63,21,0)
(51,39,0)
(8,59,0)
(47,54,0)
(19,64,0)
(13,4,0)
(42,67,0)
(37,22,0)
(14,43,0)
(7,39,0)
(18,67,0)
(47,22,0)
(53,21,0)
(45,15,0)
(34,58,0)
(64,19,0)
(19,64,1)
(47,27,1)
(61,41,1)
(47,22,1)
(62,58,1)
(63,53,1)
(21,44,1)
(58,30,1)
(39,51,1)
(39,21,1)
(7,51,1)
(50,45,1)
(35,31,1)
(56,32,1)
(23,21,1)
(16,1,1)
(32,23,1)
(6,3,1)
(43,44,1)
(51,12,1)
(21,63,1)
(58,48,1)
(19,40,1)
(52,43,1)
(9,25,1)
(65,60,1)
(54,47,1)
(34,30,1)
(60,25,1)
(45,65,1)
(25,55,1)
(22,0,1)
(33,19,1)
(27,9,1)
(28,44,1)
(41,22,1)
(52,36,1)
(64,22,1)
(36,43,1)
(37,20,1)
(57,2,1)
(1,58,1)
(30,61,1)
(50,13,1)
(2,19,1)
(43,14,1)
(49,50,1)
(22,37,1)
(34,49,1)
(40,64,1)
(33,6,1)
(51,56,1)
(53,52,1)
(5,22,1)
(50,52,1)
(56,44,1)
(55,39,1)
(49,30,1)
(48,34,1)
(64,62,1)
(14,28,1)
(20,0,1)
(21,22,1)
(25,39,1)
(44,5,1)
(39,7,1)
(3,57,1)
(5,16,1)
(13,54,1)
(0,35,1)
(13,25,2)
(23,52,2)
(34,58,2)
(56,52,2)
(36,58,2)
(63,52,2)
(48,58,2)
(5,58,2)
(49,58,2)
(54,25,2)
(2,19,2)
(39,51,2)
(52,43,2)
(5,22,2)
(58,30,2)
(44,58,2)
(51,56,2)
(21,52,2)
(16,58,2)
(53,52,2)
(9,25,2)
(39,52,2)
(51,12,2)
(49,30,2)
(64,22,2)
(28,58,2)
(21,22,2)
(39,21,2)
(47,22,2)
(21,44,2)
(51,52,2)
(54,47,2)
(57,19,2)
(7,52,2)
(25,39,2)
(65,25,2)
(55,52,2)
(25,52,2)
(45,25,2)
(60,25,2)
(56,44,2)
(50,58,2)
(52,58,2)
(58,58,2)
(32,52,2)
(1,58,2)
(6,19,2)
(27,25,2)
(47,25,2)
(43,44,2)
(14,58,2)
(44,5,2)
(19,64,2)
(43,58,2)
(3,19,2)
(22,0,2)
-----------------------------------
(0,data_buf[100] = FULL_COMMAND)
(1,dataLen)
(2,"command execution failed!")
(3,1)
(4,)
(5,wcslen(data)
(6,exit(1)
(7,stdin)
(8,dataLen)
(9,dataLen)
(10,if (100-dataLen > 1)
(11,)
(12,int)
(13,\\\'\\\\0\\\')
(14,dataLen)
(15,)
(16,data)
(17,if (SYSTEM(data)
(18,data)
(19,SYSTEM(data)
(20,data)
(21,data+dataLen)
(22,data = data_buf)
(23,100)
(24,if (fgetws(data+dataLen, (int)
(25,fgetws(data+dataLen, (int)
(26,)
(27,data)
(28,100)
(29,data_buf)
(30,i = 0)
(31,data_buf)
(32,dataLen)
(33,RET)
(34,i)
(35,FULL_COMMAND)
(36,1)
(37,data_buf)
(38,)
(39,fgetws(data+dataLen, (int)
(40,0)
(41,i)
(42,i)
(43,100-dataLen)
(44,dataLen = wcslen(data)
(45,\\\'\\\\0\\\')
(46,)
(47,wcslen(data)
(48,1)
(49,i++)
(50,i)
(51,(int)
(52,100-dataLen > 1)
(53,data)
(54,dataLen = wcslen(data)
(55,NULL)
(56,100-dataLen)
(57,printLine("command execution failed!")
(58,i < 1)
(59,)
(60,"fgetws()
(61,0)
(62,data)
(63,dataLen)
(64,SYSTEM(data)
(65,printLine("fgetws()
(66,for(i = 0; i < 1; i++)
(67,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
