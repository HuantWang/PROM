-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_41_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_41_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_41_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_41_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_41_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_41_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_41_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_41_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_spawnv_41_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_spawnv_41_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_41_badSink
data
data
-----joern-----
(57,3,0)
(51,2,0)
(39,10,0)
(14,69,0)
(6,38,0)
(23,37,0)
(28,30,0)
(63,10,0)
(5,12,0)
(22,6,0)
(43,23,0)
(69,29,0)
(67,3,0)
(0,31,0)
(19,55,0)
(12,69,0)
(38,1,0)
(70,11,0)
(33,38,0)
(42,46,0)
(25,13,0)
(4,37,0)
(11,58,0)
(38,33,0)
(3,46,0)
(69,12,0)
(15,0,0)
(3,31,0)
(23,22,0)
(10,69,0)
(41,34,0)
(49,19,0)
(32,0,0)
(12,5,0)
(9,33,0)
(2,12,0)
(47,22,0)
(6,22,0)
(69,10,0)
(46,31,0)
(55,66,0)
(2,32,0)
(19,3,0)
(57,32,0)
(37,23,0)
(53,50,0)
(58,38,0)
(12,2,0)
(27,46,0)
(18,3,0)
(64,2,0)
(32,57,0)
(59,58,0)
(30,21,0)
(26,32,0)
(36,4,0)
(48,31,0)
(50,31,0)
(34,41,0)
(22,3,0)
(65,19,0)
(10,3,0)
(13,66,0)
(44,29,0)
(52,38,0)
(7,41,0)
(11,3,0)
(24,6,0)
(62,4,0)
(61,34,0)
(58,11,0)
(68,34,0)
(10,32,0)
(37,4,0)
(50,3,0)
(33,3,0)
(60,1,0)
(34,32,0)
(22,23,0)
(11,30,0)
(4,38,0)
(19,32,0)
(16,0,0)
(40,58,0)
(29,69,0)
(35,6,0)
(56,31,0)
(17,45,0)
(54,55,0)
(8,57,0)
(4,38,1)
(12,2,1)
(7,34,1)
(59,40,1)
(69,10,1)
(47,4,1)
(44,69,1)
(33,3,1)
(34,68,1)
(39,63,1)
(26,3,1)
(69,14,1)
(58,59,1)
(10,39,1)
(37,4,1)
(38,33,1)
(30,28,1)
(2,32,1)
(10,3,1)
(57,8,1)
(40,70,1)
(18,67,1)
(64,10,1)
(65,49,1)
(20,50,1)
(70,37,1)
(28,11,1)
(53,30,1)
(41,34,1)
(53,41,1)
(33,9,1)
(62,38,1)
(50,53,1)
(12,5,1)
(55,54,1)
(52,29,1)
(3,18,1)
(29,44,1)
(19,32,1)
(54,19,1)
(9,52,1)
(57,3,1)
(35,47,1)
(2,51,1)
(46,27,1)
(22,3,1)
(23,43,1)
(51,64,1)
(32,57,1)
(63,41,1)
(14,12,1)
(68,61,1)
(67,46,1)
(10,32,1)
(53,37,1)
(3,46,1)
(25,29,1)
(6,38,1)
(8,26,1)
(41,7,1)
(53,55,1)
(61,32,1)
(6,24,1)
(37,23,1)
(27,42,1)
(29,69,1)
(34,32,1)
(43,22,1)
(19,3,1)
(22,6,1)
(50,3,1)
(24,35,1)
(11,3,1)
(19,65,1)
(58,38,1)
(49,13,1)
(4,36,1)
(23,22,1)
(11,58,1)
(36,62,1)
(13,25,1)
(69,12,1)
(19,29,2)
(43,4,2)
(2,41,2)
(6,38,2)
(10,32,2)
(33,3,2)
(38,33,2)
(64,41,2)
(19,3,2)
(37,23,2)
(32,57,2)
(57,3,2)
(62,29,2)
(29,69,2)
(10,41,2)
(65,29,2)
(49,29,2)
(12,5,2)
(29,41,2)
(36,29,2)
(59,37,2)
(24,4,2)
(69,12,2)
(4,38,2)
(22,4,2)
(70,37,2)
(37,29,2)
(3,46,2)
(54,29,2)
(4,29,2)
(37,4,2)
(69,10,2)
(14,41,2)
(39,41,2)
(9,29,2)
(12,41,2)
(25,29,2)
(51,41,2)
(30,37,2)
(44,41,2)
(23,22,2)
(11,3,2)
(63,41,2)
(12,2,2)
(69,41,2)
(52,29,2)
(38,29,2)
(6,4,2)
(55,29,2)
(34,32,2)
(2,32,2)
(40,37,2)
(11,37,2)
(10,3,2)
(50,3,2)
(33,29,2)
(58,37,2)
(58,38,2)
(22,3,2)
(13,29,2)
(28,37,2)
(47,4,2)
(35,4,2)
(11,58,2)
(23,4,2)
(19,32,2)
(41,34,2)
(22,6,2)
-----------------------------------
(0,)
(1,)
(2,100-dataLen)
(3,data = dataBuffer)
(4,dataLen > 0)
(5,int)
(6,dataLen-1)
(7,1)
(8,data)
(9,data)
(10,data+dataLen)
(11,data[dataLen-1])
(12,(int)
(13,printLine("fgets()
(14,stdin)
(15,if (100-dataLen > 1)
(16,dataLen)
(17,if (fgets(data+dataLen, (int)
(18,dataBuffer)
(19,data[dataLen])
(20,RET)
(21,)
(22,data[dataLen-1])
(23,data[dataLen-1] == \\\'\\\\n\\\')
(24,1)
(25,"fgets()
(26,dataLen)
(27,COMMAND_ARG2)
(28,\\\'\\\\0\\\')
(29,fgets(data+dataLen, (int)
(30,data[dataLen-1] = \\\'\\\\0\\\')
(31,)
(32,dataLen = strlen(data)
(33,strlen(data)
(34,100-dataLen)
(35,dataLen)
(36,0)
(37,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(38,dataLen = strlen(data)
(39,dataLen)
(40,dataLen)
(41,100-dataLen > 1)
(42,dataBuffer)
(43,\\\'\\\\n\\\')
(44,NULL)
(45,)
(46,dataBuffer[100] = COMMAND_ARG2)
(47,data)
(48,dataBuffer)
(49,data)
(50,CWE78_OS_Command_Injection__char_console_w32_spawnv_41_badSink(data)
(51,dataLen)
(52,dataLen)
(53,data)
(54,\\\'\\\\0\\\')
(55,data[dataLen] = \\\'\\\\0\\\')
(56,data)
(57,strlen(data)
(58,dataLen-1)
(59,1)
(60,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,100)
(62,dataLen)
(63,data)
(64,100)
(65,dataLen)
(66,)
(67,data)
(68,dataLen)
(69,fgets(data+dataLen, (int)
(70,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
