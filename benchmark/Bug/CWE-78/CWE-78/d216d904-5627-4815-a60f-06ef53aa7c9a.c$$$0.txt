-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_31_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
122,124
122,125
123,124
124,125
124,126
126,127
126,128
126,129
129,130
130,131
132,133
133,134
133,135
135,136
135,137
135,138
138,139
139,140
141,142
141,143
142,143
142,144
143,144
143,145
144,145
146,147
149,150
149,151
150,151
151,152
151,153
152,153
155,156
156,157
156,158
157,158
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,128,131,134,136,137,140,145,147,148,153,154,158,159
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
142,143
142,144
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_31_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
void
CWE78_OS_Command_Injection__char_console_system_31_bad()
CWE78_OS_Command_Injection__char_console_system_31_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    {        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
{        char * dataCopy = data;        char * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(26,78,0)
(73,72,0)
(21,85,0)
(65,13,0)
(50,64,0)
(69,31,0)
(84,76,0)
(13,59,0)
(9,76,0)
(27,85,0)
(86,13,0)
(62,7,0)
(82,71,0)
(23,67,0)
(24,32,0)
(49,31,0)
(11,9,0)
(47,20,0)
(64,32,0)
(30,80,0)
(21,19,0)
(44,32,0)
(63,6,0)
(71,32,0)
(37,9,0)
(67,13,0)
(80,51,0)
(31,37,0)
(64,15,0)
(44,78,0)
(0,9,0)
(56,87,0)
(19,21,0)
(6,7,0)
(16,51,0)
(29,9,0)
(87,13,0)
(77,84,0)
(57,51,0)
(8,14,0)
(60,38,0)
(52,76,0)
(36,62,0)
(15,64,0)
(75,35,0)
(51,13,0)
(82,78,0)
(25,65,0)
(19,82,0)
(67,62,0)
(20,28,0)
(74,70,0)
(61,37,0)
(78,84,0)
(28,20,0)
(59,78,0)
(68,48,0)
(67,78,0)
(65,38,0)
(81,15,0)
(85,21,0)
(32,44,0)
(5,65,0)
(55,67,0)
(40,64,0)
(54,87,0)
(80,38,0)
(79,59,0)
(80,33,0)
(22,43,0)
(15,78,0)
(85,32,0)
(37,78,0)
(70,76,0)
(83,85,0)
(41,82,0)
(17,37,0)
(38,80,0)
(18,73,0)
(43,42,0)
(15,43,0)
(1,19,0)
(38,65,0)
(31,9,0)
(51,80,0)
(66,76,0)
(14,72,0)
(78,76,0)
(71,82,0)
(38,60,0)
(39,44,0)
(59,13,0)
(87,56,0)
(53,70,0)
(4,84,0)
(45,56,0)
(12,87,0)
(82,19,0)
(3,71,0)
(2,28,0)
(33,80,0)
(34,78,0)
(10,33,0)
(58,71,0)
(51,78,0)
(32,35,0)
(13,70,0)
(28,31,0)
(87,13,1)
(38,60,1)
(83,27,1)
(27,32,1)
(31,37,1)
(56,45,1)
(81,21,1)
(59,78,1)
(2,31,1)
(26,84,1)
(73,18,1)
(54,13,1)
(44,78,1)
(80,30,1)
(33,80,1)
(61,43,1)
(49,69,1)
(65,25,1)
(50,81,1)
(32,44,1)
(78,34,1)
(41,85,1)
(23,55,1)
(85,32,1)
(18,20,1)
(78,84,1)
(31,49,1)
(51,78,1)
(10,80,1)
(61,62,1)
(21,19,1)
(67,78,1)
(64,40,1)
(82,78,1)
(3,58,1)
(22,15,1)
(86,78,1)
(20,47,1)
(37,78,1)
(45,87,1)
(17,61,1)
(63,33,1)
(19,82,1)
(56,87,1)
(40,50,1)
(5,51,1)
(85,83,1)
(15,64,1)
(37,17,1)
(24,33,1)
(4,77,1)
(80,51,1)
(28,31,1)
(20,28,1)
(38,65,1)
(69,37,1)
(8,73,1)
(64,32,1)
(61,21,1)
(84,4,1)
(67,23,1)
(21,85,1)
(44,39,1)
(46,20,1)
(16,57,1)
(12,54,1)
(14,8,1)
(58,41,1)
(71,32,1)
(55,6,1)
(28,2,1)
(15,78,1)
(19,1,1)
(6,63,1)
(61,56,1)
(51,16,1)
(51,13,1)
(71,3,1)
(80,38,1)
(46,14,1)
(1,82,1)
(87,12,1)
(65,13,1)
(67,13,1)
(82,71,1)
(39,24,1)
(59,79,1)
(25,5,1)
(57,56,1)
(43,22,1)
(30,38,1)
(62,36,1)
(13,59,1)
(79,86,1)
(33,10,1)
(36,67,1)
(34,26,1)
(47,28,1)
(37,78,2)
(3,85,2)
(27,33,2)
(50,21,2)
(81,21,2)
(63,33,2)
(32,44,2)
(5,56,2)
(15,64,2)
(82,85,2)
(1,85,2)
(16,56,2)
(85,32,2)
(19,85,2)
(8,20,2)
(23,33,2)
(67,13,2)
(33,56,2)
(51,78,2)
(71,85,2)
(44,78,2)
(44,33,2)
(31,37,2)
(28,31,2)
(38,60,2)
(21,19,2)
(55,33,2)
(58,85,2)
(18,20,2)
(15,78,2)
(22,21,2)
(41,85,2)
(21,85,2)
(25,56,2)
(32,33,2)
(64,32,2)
(43,21,2)
(87,13,2)
(14,20,2)
(6,33,2)
(65,13,2)
(64,21,2)
(82,71,2)
(40,21,2)
(59,78,2)
(38,65,2)
(57,56,2)
(83,33,2)
(73,20,2)
(82,78,2)
(78,84,2)
(24,33,2)
(36,33,2)
(30,56,2)
(51,56,2)
(67,33,2)
(39,33,2)
(62,33,2)
(20,28,2)
(56,87,2)
(67,78,2)
(13,59,2)
(80,38,2)
(21,33,2)
(71,32,2)
(80,56,2)
(38,56,2)
(33,80,2)
(85,33,2)
(80,51,2)
(51,13,2)
(10,56,2)
(65,56,2)
(19,82,2)
(15,21,2)
-----------------------------------
(0,dataCopy)
(1,\\\'\\\\n\\\')
(2,data)
(3,1)
(4,FULL_COMMAND)
(5,100)
(6,printLine("fgets()
(7,)
(8,1)
(9,)
(10,NULL)
(11,if (SYSTEM(data)
(12,dataLen)
(13,dataLen = strlen(data)
(14,exit(1)
(15,data[dataLen-1])
(16,dataLen)
(17,data)
(18,"command execution failed!")
(19,data[dataLen-1] == \\\'\\\\n\\\')
(20,SYSTEM(data)
(21,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(22,\\\'\\\\0\\\')
(23,dataLen)
(24,dataLen)
(25,dataLen)
(26,data)
(27,dataLen)
(28,SYSTEM(data)
(29,data)
(30,stdin)
(31,* data = dataCopy)
(32,dataLen = strlen(data)
(33,fgets(data+dataLen, (int)
(34,data_buf)
(35,)
(36,\\\'\\\\0\\\')
(37,* dataCopy = data)
(38,(int)
(39,data)
(40,1)
(41,data)
(42,)
(43,data[dataLen-1] = \\\'\\\\0\\\')
(44,strlen(data)
(45,1)
(46,RET)
(47,0)
(48,)
(49,dataCopy)
(50,dataLen)
(51,data+dataLen)
(52,data)
(53,if (100-dataLen > 1)
(54,100)
(55,data)
(56,100-dataLen > 1)
(57,data)
(58,dataLen)
(59,strlen(data)
(60,int)
(61,dataCopy)
(62,data[dataLen] = \\\'\\\\0\\\')
(63,"fgets()
(64,dataLen-1)
(65,100-dataLen)
(66,data_buf)
(67,data[dataLen])
(68,if (fgets(data+dataLen, (int)
(69,data)
(70,)
(71,dataLen-1)
(72,)
(73,printLine("command execution failed!")
(74,dataLen)
(75,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(76,)
(77,data_buf)
(78,data = data_buf)
(79,data)
(80,fgets(data+dataLen, (int)
(81,data)
(82,data[dataLen-1])
(83,0)
(84,data_buf[100] = FULL_COMMAND)
(85,dataLen > 0)
(86,dataLen)
(87,100-dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
