-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(27,62,0)
(40,55,0)
(7,16,0)
(14,16,0)
(3,56,0)
(40,27,0)
(5,30,0)
(16,22,0)
(36,51,0)
(30,51,0)
(51,8,0)
(15,28,0)
(41,48,0)
(19,34,0)
(35,13,0)
(11,48,0)
(42,48,0)
(16,14,0)
(4,62,0)
(23,14,0)
(6,27,0)
(21,6,0)
(11,27,0)
(56,3,0)
(22,10,0)
(45,55,0)
(52,13,0)
(54,40,0)
(44,56,0)
(50,27,0)
(26,3,0)
(39,51,0)
(14,56,0)
(42,6,0)
(53,11,0)
(1,8,0)
(28,56,0)
(13,27,0)
(11,8,0)
(0,39,0)
(13,47,0)
(63,1,0)
(43,17,0)
(62,33,0)
(25,46,0)
(27,46,0)
(12,39,0)
(51,30,0)
(56,34,0)
(46,27,0)
(32,42,0)
(51,39,0)
(20,29,0)
(0,28,0)
(1,33,0)
(17,48,0)
(28,0,0)
(48,42,0)
(24,30,0)
(31,22,0)
(29,37,0)
(49,47,0)
(6,42,0)
(38,28,0)
(48,11,0)
(30,56,0)
(60,40,0)
(58,18,0)
(16,8,0)
(57,14,0)
(9,62,0)
(39,0,0)
(42,32,0)
(13,8,0)
(55,40,0)
(47,37,0)
(48,17,0)
(2,1,0)
(59,11,0)
(3,8,0)
(61,6,0)
(46,8,0)
(14,56,1)
(30,24,1)
(23,7,1)
(11,8,1)
(27,46,1)
(48,41,1)
(48,11,1)
(2,55,1)
(61,11,1)
(53,59,1)
(14,57,1)
(12,51,1)
(54,27,1)
(2,47,1)
(28,56,1)
(0,28,1)
(20,17,1)
(52,35,1)
(0,39,1)
(11,53,1)
(31,16,1)
(35,29,1)
(42,32,1)
(40,60,1)
(49,13,1)
(17,43,1)
(30,56,1)
(1,2,1)
(15,38,1)
(59,55,1)
(21,61,1)
(63,1,1)
(45,40,1)
(2,22,1)
(48,42,1)
(2,0,1)
(22,31,1)
(39,51,1)
(55,45,1)
(51,8,1)
(16,8,1)
(57,23,1)
(11,27,1)
(29,20,1)
(44,17,1)
(42,6,1)
(13,52,1)
(38,56,1)
(26,44,1)
(25,50,1)
(17,48,1)
(24,5,1)
(5,36,1)
(55,40,1)
(51,30,1)
(6,21,1)
(46,8,1)
(6,27,1)
(60,54,1)
(39,12,1)
(40,27,1)
(13,27,1)
(47,49,1)
(1,8,1)
(7,0,1)
(43,48,1)
(56,3,1)
(3,26,1)
(3,8,1)
(16,14,1)
(36,28,1)
(28,15,1)
(13,8,1)
(41,42,1)
(46,25,1)
(51,8,2)
(40,27,2)
(21,55,2)
(6,55,2)
(16,14,2)
(28,17,2)
(7,0,2)
(24,28,2)
(16,8,2)
(20,17,2)
(16,0,2)
(44,17,2)
(11,27,2)
(6,27,2)
(3,17,2)
(11,55,2)
(13,17,2)
(49,17,2)
(1,8,2)
(36,28,2)
(3,8,2)
(13,8,2)
(30,28,2)
(31,0,2)
(56,17,2)
(35,17,2)
(0,28,2)
(26,17,2)
(42,6,2)
(17,48,2)
(23,0,2)
(56,3,2)
(51,28,2)
(53,55,2)
(46,8,2)
(39,28,2)
(48,11,2)
(12,28,2)
(59,55,2)
(39,51,2)
(51,30,2)
(0,17,2)
(17,55,2)
(43,55,2)
(14,0,2)
(5,28,2)
(41,55,2)
(48,42,2)
(52,17,2)
(48,55,2)
(42,32,2)
(63,1,2)
(13,27,2)
(30,56,2)
(42,55,2)
(55,40,2)
(29,17,2)
(22,0,2)
(38,17,2)
(14,56,2)
(0,39,2)
(11,8,2)
(61,55,2)
(57,0,2)
(47,17,2)
(27,46,2)
(15,17,2)
(28,56,2)
-----------------------------------
(0,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(1,return data;)
(2,data)
(3,strlen(data)
(4,if (100-dataLen > 1)
(5,dataLen)
(6,100-dataLen)
(7,data)
(8,char * data)
(9,dataLen)
(10,)
(11,data+dataLen)
(12,\\\'\\\\n\\\')
(13,data[dataLen])
(14,dataLen-1)
(15,0)
(16,data[dataLen-1])
(17,fgets(data+dataLen, (int)
(18,)
(19,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(20,"fgets()
(21,dataLen)
(22,data[dataLen-1] = \\\'\\\\0\\\')
(23,dataLen)
(24,1)
(25,data)
(26,data)
(27,dataLen = strlen(data)
(28,dataLen > 0)
(29,printLine("fgets()
(30,dataLen-1)
(31,\\\'\\\\0\\\')
(32,int)
(33,)
(34,)
(35,data)
(36,data)
(37,)
(38,dataLen)
(39,data[dataLen-1] == \\\'\\\\n\\\')
(40,100-dataLen)
(41,stdin)
(42,(int)
(43,NULL)
(44,dataLen)
(45,1)
(46,strlen(data)
(47,data[dataLen] = \\\'\\\\0\\\')
(48,fgets(data+dataLen, (int)
(49,\\\'\\\\0\\\')
(50,dataLen)
(51,data[dataLen-1])
(52,dataLen)
(53,dataLen)
(54,100)
(55,100-dataLen > 1)
(56,dataLen = strlen(data)
(57,1)
(58,if (fgets(data+dataLen, (int)
(59,data)
(60,dataLen)
(61,100)
(62,)
(63,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
