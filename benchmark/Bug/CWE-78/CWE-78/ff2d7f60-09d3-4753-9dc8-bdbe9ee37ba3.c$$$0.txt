-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_execl_45_bad()
CWE78_OS_Command_Injection__char_console_execl_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_45_badData = data;
CWE78_OS_Command_Injection__char_console_execl_45_badData = data
CWE78_OS_Command_Injection__char_console_execl_45_badData
CWE78_OS_Command_Injection__char_console_execl_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(18,28,0)
(57,37,0)
(19,1,0)
(67,52,0)
(11,57,0)
(32,3,0)
(45,67,0)
(47,52,0)
(40,56,0)
(62,27,0)
(29,10,0)
(0,10,0)
(10,29,0)
(9,36,0)
(6,36,0)
(16,14,0)
(24,33,0)
(33,52,0)
(10,34,0)
(33,3,0)
(71,9,0)
(52,27,0)
(30,27,0)
(13,23,0)
(3,33,0)
(39,20,0)
(34,10,0)
(14,16,0)
(5,16,0)
(38,0,0)
(15,51,0)
(29,23,0)
(66,3,0)
(25,29,0)
(70,37,0)
(62,52,0)
(65,45,0)
(3,28,0)
(60,21,0)
(1,27,0)
(35,1,0)
(37,52,0)
(48,32,0)
(52,1,0)
(4,9,0)
(23,3,0)
(68,32,0)
(14,57,0)
(36,9,0)
(12,49,0)
(56,52,0)
(54,29,0)
(20,45,0)
(23,29,0)
(56,21,0)
(55,27,0)
(45,8,0)
(36,49,0)
(23,52,0)
(7,2,0)
(21,51,0)
(64,27,0)
(56,3,0)
(69,20,0)
(58,56,0)
(0,3,0)
(67,45,0)
(37,20,0)
(43,16,0)
(49,59,0)
(44,41,0)
(46,62,0)
(16,45,0)
(32,41,0)
(26,67,0)
(50,25,0)
(31,23,0)
(41,32,0)
(53,28,0)
(72,0,0)
(17,62,0)
(42,15,0)
(9,45,0)
(36,52,0)
(20,37,0)
(10,0,0)
(28,27,0)
(61,52,0)
(63,8,0)
(37,57,0)
(29,25,0)
(57,14,0)
(70,16,1)
(37,52,1)
(60,56,1)
(58,40,1)
(9,45,1)
(46,49,1)
(20,39,1)
(5,45,1)
(56,3,1)
(23,3,1)
(33,24,1)
(44,32,1)
(71,6,1)
(37,20,1)
(19,35,1)
(25,50,1)
(65,25,1)
(16,45,1)
(32,3,1)
(41,32,1)
(17,46,1)
(62,17,1)
(49,12,1)
(14,16,1)
(36,52,1)
(23,13,1)
(54,10,1)
(26,65,1)
(69,70,1)
(12,36,1)
(6,14,1)
(10,0,1)
(10,34,1)
(47,61,1)
(67,26,1)
(67,52,1)
(46,41,1)
(46,21,1)
(48,3,1)
(55,62,1)
(32,68,1)
(56,58,1)
(46,14,1)
(24,66,1)
(39,69,1)
(11,37,1)
(38,23,1)
(0,72,1)
(57,37,1)
(61,1,1)
(29,54,1)
(33,52,1)
(14,57,1)
(13,31,1)
(52,1,1)
(1,19,1)
(50,29,1)
(16,43,1)
(25,29,1)
(72,38,1)
(40,15,1)
(43,5,1)
(45,67,1)
(23,52,1)
(66,52,1)
(52,47,1)
(29,10,1)
(62,52,1)
(22,55,1)
(9,4,1)
(15,42,1)
(29,23,1)
(56,52,1)
(3,33,1)
(42,25,1)
(36,9,1)
(21,60,1)
(20,45,1)
(68,48,1)
(0,3,1)
(57,11,1)
(41,44,1)
(4,71,1)
(31,41,1)
(25,41,2)
(12,14,2)
(36,14,2)
(37,20,2)
(45,67,2)
(14,25,2)
(23,3,2)
(52,1,2)
(57,16,2)
(56,52,2)
(9,14,2)
(16,25,2)
(33,52,2)
(71,14,2)
(16,45,2)
(45,25,2)
(15,25,2)
(23,41,2)
(9,45,2)
(13,41,2)
(56,3,2)
(29,23,2)
(29,41,2)
(37,52,2)
(14,57,2)
(72,41,2)
(69,16,2)
(26,25,2)
(14,16,2)
(10,34,2)
(39,16,2)
(37,16,2)
(10,0,2)
(60,25,2)
(38,41,2)
(40,25,2)
(32,3,2)
(70,16,2)
(0,41,2)
(10,41,2)
(25,29,2)
(50,41,2)
(43,25,2)
(0,3,2)
(21,25,2)
(3,33,2)
(65,25,2)
(67,52,2)
(36,52,2)
(62,52,2)
(42,25,2)
(23,52,2)
(20,16,2)
(11,16,2)
(4,14,2)
(36,9,2)
(29,10,2)
(57,37,2)
(20,45,2)
(31,41,2)
(67,25,2)
(49,14,2)
(56,25,2)
(58,25,2)
(41,32,2)
(6,14,2)
(5,25,2)
(54,41,2)
-----------------------------------
(0,100-dataLen)
(1,dataBuffer[100] = COMMAND_ARG2)
(2,)
(3,dataLen = strlen(data)
(4,1)
(5,dataLen)
(6,data)
(7,if (fgets(data+dataLen, (int)
(8,)
(9,dataLen-1)
(10,(int)
(11,\\\'\\\\n\\\')
(12,\\\'\\\\0\\\')
(13,dataLen)
(14,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(15,printLine("fgets()
(16,dataLen > 0)
(17,data)
(18,dataLen)
(19,COMMAND_ARG2)
(20,dataLen-1)
(21,data[dataLen] = \\\'\\\\0\\\')
(22,RET)
(23,data+dataLen)
(24,data)
(25,fgets(data+dataLen, (int)
(26,data)
(27,)
(28,)
(29,fgets(data+dataLen, (int)
(30,data)
(31,data)
(32,100-dataLen)
(33,strlen(data)
(34,int)
(35,dataBuffer)
(36,data[dataLen-1])
(37,data[dataLen-1])
(38,100)
(39,1)
(40,data)
(41,100-dataLen > 1)
(42,"fgets()
(43,0)
(44,1)
(45,dataLen = strlen(data)
(46,CWE78_OS_Command_Injection__char_console_execl_45_badData)
(47,dataBuffer)
(48,100)
(49,data[dataLen-1] = \\\'\\\\0\\\')
(50,NULL)
(51,)
(52,data = dataBuffer)
(53,if (100-dataLen > 1)
(54,stdin)
(55,badSink()
(56,data[dataLen])
(57,data[dataLen-1] == \\\'\\\\n\\\')
(58,dataLen)
(59,)
(60,\\\'\\\\0\\\')
(61,data)
(62,CWE78_OS_Command_Injection__char_console_execl_45_badData = data)
(63,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(64,dataBuffer)
(65,dataLen)
(66,dataLen)
(67,strlen(data)
(68,dataLen)
(69,dataLen)
(70,data)
(71,dataLen)
(72,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
