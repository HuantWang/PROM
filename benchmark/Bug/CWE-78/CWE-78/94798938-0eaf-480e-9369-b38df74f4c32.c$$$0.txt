-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_63_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_63_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_popen_63_bad()
CWE78_OS_Command_Injection__char_console_popen_63_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_popen_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_popen_63b_badSink
CWE78_OS_Command_Injection__char_console_popen_63b_badSink
&data
data
data
-----joern-----
(39,67,0)
(22,53,0)
(25,21,0)
(24,59,0)
(69,4,0)
(13,33,0)
(54,62,0)
(57,21,0)
(12,27,0)
(26,36,0)
(52,62,0)
(45,34,0)
(36,10,0)
(56,65,0)
(55,67,0)
(15,21,0)
(53,22,0)
(2,63,0)
(18,59,0)
(57,34,0)
(0,36,0)
(32,47,0)
(63,5,0)
(46,53,0)
(34,10,0)
(59,10,0)
(62,40,0)
(21,57,0)
(44,30,0)
(8,48,0)
(70,63,0)
(19,10,0)
(66,16,0)
(64,23,0)
(4,29,0)
(36,15,0)
(23,5,0)
(27,31,0)
(43,19,0)
(30,5,0)
(28,23,0)
(42,5,0)
(35,18,0)
(31,48,0)
(38,28,0)
(15,36,0)
(33,27,0)
(23,63,0)
(21,15,0)
(68,34,0)
(48,23,0)
(48,31,0)
(53,28,0)
(55,5,0)
(71,59,0)
(37,32,0)
(14,15,0)
(54,31,0)
(4,31,0)
(17,11,0)
(29,4,0)
(53,33,0)
(27,33,0)
(33,13,0)
(41,27,0)
(1,28,0)
(28,31,0)
(28,53,0)
(6,5,0)
(18,23,0)
(50,23,0)
(34,57,0)
(20,4,0)
(61,29,0)
(10,16,0)
(3,54,0)
(51,54,0)
(67,23,0)
(59,18,0)
(54,23,0)
(33,53,0)
(9,22,0)
(60,31,0)
(15,23,0)
(19,23,0)
(10,19,0)
(31,30,0)
(58,30,0)
(11,40,0)
(18,32,0)
(67,55,0)
(49,10,0)
(39,57,1)
(24,71,1)
(36,10,1)
(34,10,1)
(43,49,1)
(19,23,1)
(31,48,1)
(59,24,1)
(32,37,1)
(15,36,1)
(28,31,1)
(33,27,1)
(53,46,1)
(63,70,1)
(57,34,1)
(48,8,1)
(59,10,1)
(61,4,1)
(39,29,1)
(52,54,1)
(53,33,1)
(41,12,1)
(21,25,1)
(11,17,1)
(7,55,1)
(51,11,1)
(35,57,1)
(67,23,1)
(49,22,1)
(4,31,1)
(71,35,1)
(68,45,1)
(10,19,1)
(29,61,1)
(60,23,1)
(25,15,1)
(34,68,1)
(3,51,1)
(38,29,1)
(23,63,1)
(21,15,1)
(62,52,1)
(17,22,1)
(4,69,1)
(57,21,1)
(28,1,1)
(20,31,1)
(54,3,1)
(54,31,1)
(50,63,1)
(37,18,1)
(1,38,1)
(33,13,1)
(15,23,1)
(70,2,1)
(67,39,1)
(14,34,1)
(39,32,1)
(69,20,1)
(46,33,1)
(28,23,1)
(53,28,1)
(19,43,1)
(9,53,1)
(26,0,1)
(54,23,1)
(36,26,1)
(12,28,1)
(64,50,1)
(27,31,1)
(29,4,1)
(55,67,1)
(22,53,1)
(18,59,1)
(0,14,1)
(27,41,1)
(22,9,1)
(18,23,1)
(8,60,1)
(39,62,1)
(45,10,1)
(48,23,1)
(23,64,1)
(32,57,2)
(48,23,2)
(26,34,2)
(53,28,2)
(62,22,2)
(10,19,2)
(57,21,2)
(43,22,2)
(37,57,2)
(36,34,2)
(19,22,2)
(51,22,2)
(17,22,2)
(31,48,2)
(15,34,2)
(9,29,2)
(18,59,2)
(54,23,2)
(59,57,2)
(24,57,2)
(10,22,2)
(25,34,2)
(38,29,2)
(33,29,2)
(0,34,2)
(22,29,2)
(67,23,2)
(27,31,2)
(68,22,2)
(34,22,2)
(41,29,2)
(33,27,2)
(18,57,2)
(54,22,2)
(27,29,2)
(14,34,2)
(21,15,2)
(53,33,2)
(34,10,2)
(28,31,2)
(45,22,2)
(15,36,2)
(28,23,2)
(21,34,2)
(54,31,2)
(23,63,2)
(71,57,2)
(53,29,2)
(35,57,2)
(12,29,2)
(11,22,2)
(29,4,2)
(1,29,2)
(52,22,2)
(28,29,2)
(36,10,2)
(59,10,2)
(4,31,2)
(3,22,2)
(22,53,2)
(55,67,2)
(15,23,2)
(49,22,2)
(46,29,2)
(19,23,2)
(18,23,2)
(57,34,2)
(33,13,2)
(57,22,2)
-----------------------------------
(0,dataLen)
(1,dataLen)
(2,data_buf)
(3,dataLen)
(4,100-dataLen)
(5,)
(6,data_buf)
(7,RET)
(8,data)
(9,NULL)
(10,dataLen = strlen(data)
(11,printLine("fgets()
(12,100)
(13,int)
(14,data)
(15,data[dataLen-1])
(16,)
(17,"fgets()
(18,data[dataLen-1])
(19,strlen(data)
(20,100)
(21,data[dataLen-1] == \\\'\\\\n\\\')
(22,fgets(data+dataLen, (int)
(23,data = data_buf)
(24,1)
(25,\\\'\\\\n\\\')
(26,1)
(27,100-dataLen)
(28,data+dataLen)
(29,100-dataLen > 1)
(30,)
(31,dataLen = strlen(data)
(32,data[dataLen-1] = \\\'\\\\0\\\')
(33,(int)
(34,dataLen > 0)
(35,data)
(36,dataLen-1)
(37,\\\'\\\\0\\\')
(38,data)
(39,data)
(40,)
(41,dataLen)
(42,data)
(43,data)
(44,if (100-dataLen > 1)
(45,dataLen)
(46,stdin)
(47,)
(48,strlen(data)
(49,dataLen)
(50,data)
(51,data)
(52,\\\'\\\\0\\\')
(53,fgets(data+dataLen, (int)
(54,data[dataLen])
(55,CWE78_OS_Command_Injection__char_console_popen_63b_badSink(&data)
(56,if (fgets(data+dataLen, (int)
(57,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(58,dataLen)
(59,dataLen-1)
(60,dataLen)
(61,1)
(62,data[dataLen] = \\\'\\\\0\\\')
(63,data_buf[100] = FULL_COMMAND)
(64,data_buf)
(65,)
(66,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(67,&data)
(68,0)
(69,dataLen)
(70,FULL_COMMAND)
(71,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
