-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_environment_w32_spawnv_18_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    goto source;
source:
    {
        /* Append input from an environment variable to data */
        size_t dataLen = wcslen(data);
        wchar_t * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            wcsncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    {
        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* wspawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
30,31
30,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
52,54
53,54
55,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
65,68
65,69
66,67
68,69
68,70
69,70
71,72
73,74
75,76
75,77
76,77
76,78
78,79
81,82
81,83
82,83
83,84
83,85
85,86
85,87
85,88
85,89
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
105,106
107,108
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,31,36,38,42,44,47,49,50,54,56,60,62,67,70,72,74,77,79,80,84,86,87,88,92,94,96,98,102,104,106,108
-----computeFrom-----
23,24
23,25
58,59
58,60
68,69
68,70
75,76
75,77
76,77
76,78
-----guardedBy-----
60,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_environment_w32_spawnv_18_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__wchar_t_environment_w32_spawnv_18_bad()
CWE78_OS_Command_Injection__wchar_t_environment_w32_spawnv_18_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }
source
{        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
wchar_t * environment = GETENV(ENV_VARIABLE);
wchar_t * environment = GETENV(ENV_VARIABLE);
wchar_t
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }
wcsncat(data+dataLen, environment, 100-dataLen-1);
wcsncat(data+dataLen, environment, 100-dataLen-1)
wcsncat
wcsncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
_wspawnv
_wspawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(36,4,0)
(9,6,0)
(44,18,0)
(10,7,0)
(21,9,0)
(31,6,0)
(40,17,0)
(7,45,0)
(16,7,0)
(11,16,0)
(30,4,0)
(1,38,0)
(45,4,0)
(6,4,0)
(38,7,0)
(13,20,0)
(8,20,0)
(29,17,0)
(34,0,0)
(16,17,0)
(0,9,0)
(20,36,0)
(14,36,0)
(18,29,0)
(3,20,0)
(15,7,0)
(24,3,0)
(13,16,0)
(12,13,0)
(28,3,0)
(13,18,0)
(23,16,0)
(5,20,0)
(16,13,0)
(18,13,0)
(2,45,0)
(7,4,0)
(33,0,0)
(42,29,0)
(43,36,0)
(38,17,0)
(27,0,0)
(39,4,0)
(17,38,0)
(22,36,0)
(29,18,0)
(25,45,0)
(13,19,0)
(35,29,0)
(20,5,0)
(26,4,0)
(32,5,0)
(37,4,0)
(17,36,0)
(0,6,0)
(5,32,1)
(29,35,1)
(32,8,1)
(44,12,1)
(41,0,1)
(24,28,1)
(0,33,1)
(33,27,1)
(13,18,1)
(40,37,1)
(35,42,1)
(10,15,1)
(23,3,1)
(29,17,1)
(16,17,1)
(21,13,1)
(7,45,1)
(28,20,1)
(1,40,1)
(2,25,1)
(16,7,1)
(12,16,1)
(38,1,1)
(17,38,1)
(34,9,1)
(42,44,1)
(18,29,1)
(45,2,1)
(37,7,1)
(13,20,1)
(11,23,1)
(3,20,1)
(7,10,1)
(15,45,1)
(3,24,1)
(21,3,1)
(38,7,1)
(8,17,1)
(16,11,1)
(9,21,1)
(27,34,1)
(0,9,1)
(13,16,1)
(20,5,1)
(13,16,2)
(35,3,2)
(42,3,2)
(16,17,2)
(0,9,2)
(13,20,2)
(3,20,2)
(23,3,2)
(18,3,2)
(29,3,2)
(44,3,2)
(16,7,2)
(18,29,2)
(11,3,2)
(13,18,2)
(17,38,2)
(20,5,2)
(13,3,2)
(29,17,2)
(7,45,2)
(38,7,2)
(12,3,2)
(16,3,2)
-----------------------------------
(0,_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
(1,data)
(2,COMMAND_ARG2)
(3,environment != NULL)
(4,)
(5,GETENV(ENV_VARIABLE)
(6,)
(7,data = dataBuffer)
(8,environment)
(9,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(10,dataBuffer)
(11,dataLen)
(12,environment)
(13,wcsncat(data+dataLen, environment, 100-dataLen-1)
(14,environment)
(15,data)
(16,data+dataLen)
(17,dataLen = wcslen(data)
(18,100-dataLen-1)
(19,)
(20,* environment = GETENV(ENV_VARIABLE)
(21,args)
(22,dataLen)
(23,data)
(24,NULL)
(25,dataBuffer)
(26,data)
(27,COMMAND_INT_PATH)
(28,environment)
(29,dataLen-1)
(30,source:)
(31,args)
(32,ENV_VARIABLE)
(33,args)
(34,_P_WAIT)
(35,1)
(36,)
(37,goto source;)
(38,wcslen(data)
(39,dataBuffer)
(40,dataLen)
(41,RET)
(42,dataLen)
(43,if (environment != NULL)
(44,100)
(45,dataBuffer[100] = COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
