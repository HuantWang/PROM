-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(18,7,0)
(21,30,0)
(48,46,0)
(65,31,0)
(7,40,0)
(23,17,0)
(13,56,0)
(17,64,0)
(30,46,0)
(54,57,0)
(64,59,0)
(46,48,0)
(50,64,0)
(46,30,0)
(13,44,0)
(1,37,0)
(29,59,0)
(35,37,0)
(5,48,0)
(15,57,0)
(45,55,0)
(10,62,0)
(66,15,0)
(11,56,0)
(24,57,0)
(2,51,0)
(63,8,0)
(17,44,0)
(3,17,0)
(59,44,0)
(1,62,0)
(15,45,0)
(28,31,0)
(8,63,0)
(37,17,0)
(12,0,0)
(9,63,0)
(51,0,0)
(15,44,0)
(13,64,0)
(51,64,0)
(1,33,0)
(14,13,0)
(37,35,0)
(4,45,0)
(61,47,0)
(62,1,0)
(47,38,0)
(60,65,0)
(42,48,0)
(52,36,0)
(31,65,0)
(58,8,0)
(27,37,0)
(57,8,0)
(32,62,0)
(56,36,0)
(6,47,0)
(8,20,0)
(31,30,0)
(63,44,0)
(65,8,0)
(33,1,0)
(16,13,0)
(0,51,0)
(47,44,0)
(64,7,0)
(17,37,0)
(26,65,0)
(22,38,0)
(30,31,0)
(37,1,0)
(57,15,0)
(49,51,0)
(48,8,0)
(43,7,0)
(25,34,0)
(59,64,0)
(41,20,0)
(19,35,0)
(31,44,0)
(53,52,0)
(62,64,0)
(48,8,1)
(32,10,1)
(9,58,1)
(23,3,1)
(52,53,1)
(16,14,1)
(57,8,1)
(0,51,1)
(24,66,1)
(48,42,1)
(17,64,1)
(54,24,1)
(27,1,1)
(13,16,1)
(62,32,1)
(35,19,1)
(46,48,1)
(19,37,1)
(37,27,1)
(42,5,1)
(21,31,1)
(63,44,1)
(37,1,1)
(10,17,1)
(62,64,1)
(28,48,1)
(26,28,1)
(30,21,1)
(58,35,1)
(50,39,1)
(15,57,1)
(17,44,1)
(30,31,1)
(51,49,1)
(1,33,1)
(29,50,1)
(65,8,1)
(53,35,1)
(49,2,1)
(3,0,1)
(14,52,1)
(57,54,1)
(61,56,1)
(59,44,1)
(66,46,1)
(65,60,1)
(31,65,1)
(46,30,1)
(15,44,1)
(13,64,1)
(8,63,1)
(12,51,1)
(5,8,1)
(17,23,1)
(61,45,1)
(60,26,1)
(56,11,1)
(11,13,1)
(13,44,1)
(61,0,1)
(64,59,1)
(0,12,1)
(1,62,1)
(51,64,1)
(61,46,1)
(6,47,1)
(59,29,1)
(4,15,1)
(45,4,1)
(35,37,1)
(47,44,1)
(37,17,1)
(2,64,1)
(47,61,1)
(63,9,1)
(61,39,1)
(31,44,1)
(21,48,2)
(52,35,2)
(13,64,2)
(63,44,2)
(57,8,2)
(32,0,2)
(10,0,2)
(31,44,2)
(15,44,2)
(17,64,2)
(30,48,2)
(59,44,2)
(47,44,2)
(2,39,2)
(27,0,2)
(37,0,2)
(46,35,2)
(58,35,2)
(28,48,2)
(63,35,2)
(17,0,2)
(0,39,2)
(31,48,2)
(65,48,2)
(29,39,2)
(24,46,2)
(1,0,2)
(13,44,2)
(5,35,2)
(11,35,2)
(66,46,2)
(59,39,2)
(54,46,2)
(4,46,2)
(1,62,2)
(60,48,2)
(48,8,2)
(49,39,2)
(19,0,2)
(56,35,2)
(53,35,2)
(65,8,2)
(14,35,2)
(30,31,2)
(45,46,2)
(46,48,2)
(51,64,2)
(12,39,2)
(8,63,2)
(46,30,2)
(15,57,2)
(3,0,2)
(35,0,2)
(1,33,2)
(16,35,2)
(8,35,2)
(64,59,2)
(17,44,2)
(62,0,2)
(9,35,2)
(64,39,2)
(13,35,2)
(26,48,2)
(23,0,2)
(62,64,2)
(50,39,2)
(31,65,2)
(37,1,2)
(48,35,2)
(37,17,2)
(35,37,2)
(15,46,2)
(51,39,2)
(57,46,2)
(0,51,2)
(6,47,2)
(42,35,2)
-----------------------------------
(0,100-dataLen > 1)
(1,(int)
(2,100)
(3,data)
(4,\\\'\\\\0\\\')
(5,dataLen)
(6,RET)
(7,)
(8,dataLen = strlen(data)
(9,data)
(10,100)
(11,\\\'\\\\0\\\')
(12,1)
(13,data[dataLen])
(14,data)
(15,data[dataLen-1])
(16,dataLen)
(17,data+dataLen)
(18,if (100-dataLen > 1)
(19,NULL)
(20,)
(21,\\\'\\\\n\\\')
(22,if(badStatic)
(23,dataLen)
(24,dataLen)
(25,if (fgets(data+dataLen, (int)
(26,dataLen)
(27,stdin)
(28,data)
(29,data)
(30,data[dataLen-1] == \\\'\\\\n\\\')
(31,data[dataLen-1])
(32,dataLen)
(33,int)
(34,)
(35,fgets(data+dataLen, (int)
(36,)
(37,fgets(data+dataLen, (int)
(38,)
(39,badStatic)
(40,)
(41,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(42,0)
(43,dataLen)
(44,char * data)
(45,data[dataLen-1] = \\\'\\\\0\\\')
(46,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(47,return data;)
(48,dataLen > 0)
(49,dataLen)
(50,dataLen)
(51,100-dataLen)
(52,printLine("fgets()
(53,"fgets()
(54,1)
(55,)
(56,data[dataLen] = \\\'\\\\0\\\')
(57,dataLen-1)
(58,dataLen)
(59,strlen(data)
(60,1)
(61,data)
(62,100-dataLen)
(63,strlen(data)
(64,dataLen = strlen(data)
(65,dataLen-1)
(66,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
