-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_52_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnvp_52b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_52_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_52b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnvp_52_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnvp_52_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_52b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnvp_52b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_spawnvp_52b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_spawnvp_52b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnvp_52b_badSink
data
data
-----joern-----
(14,64,0)
(22,21,0)
(32,15,0)
(1,35,0)
(42,28,0)
(28,63,0)
(38,10,0)
(47,13,0)
(41,50,0)
(37,40,0)
(49,24,0)
(55,22,0)
(25,59,0)
(10,64,0)
(11,24,0)
(17,45,0)
(51,67,0)
(61,30,0)
(63,28,0)
(26,63,0)
(59,54,0)
(0,54,0)
(63,54,0)
(53,4,0)
(15,30,0)
(44,58,0)
(56,23,0)
(47,36,0)
(16,15,0)
(4,41,0)
(8,37,0)
(20,12,0)
(12,67,0)
(28,22,0)
(34,69,0)
(36,47,0)
(4,54,0)
(68,54,0)
(31,6,0)
(17,7,0)
(10,22,0)
(3,5,0)
(23,54,0)
(33,41,0)
(19,28,0)
(15,41,0)
(1,69,0)
(7,17,0)
(46,45,0)
(69,1,0)
(6,40,0)
(65,10,0)
(4,6,0)
(13,47,0)
(59,22,0)
(30,15,0)
(39,69,0)
(22,59,0)
(1,17,0)
(29,67,0)
(45,54,0)
(54,67,0)
(13,64,0)
(2,17,0)
(60,7,0)
(45,17,0)
(45,41,0)
(18,12,0)
(70,13,0)
(9,21,0)
(50,41,0)
(5,57,0)
(35,1,0)
(50,54,0)
(64,10,0)
(41,12,0)
(63,5,0)
(52,36,0)
(66,45,0)
(23,67,0)
(24,67,0)
(64,13,0)
(69,41,0)
(48,4,0)
(64,54,0)
(27,36,0)
(43,50,0)
(54,24,0)
(36,22,0)
(17,1,0)
(63,28,1)
(7,60,1)
(6,31,1)
(69,41,1)
(42,26,1)
(30,61,1)
(26,47,1)
(56,5,1)
(15,16,1)
(36,52,1)
(45,46,1)
(17,2,1)
(23,54,1)
(50,43,1)
(45,41,1)
(23,56,1)
(65,38,1)
(38,14,1)
(59,54,1)
(52,27,1)
(62,23,1)
(15,41,1)
(47,13,1)
(59,25,1)
(56,47,1)
(16,32,1)
(4,54,1)
(63,54,1)
(10,22,1)
(41,50,1)
(69,39,1)
(49,11,1)
(1,69,1)
(56,6,1)
(48,53,1)
(24,49,1)
(36,22,1)
(37,8,1)
(25,55,1)
(60,17,1)
(68,24,1)
(0,68,1)
(31,4,1)
(13,64,1)
(17,1,1)
(5,3,1)
(43,33,1)
(64,10,1)
(27,22,1)
(50,54,1)
(28,19,1)
(10,65,1)
(66,30,1)
(2,1,1)
(53,37,1)
(8,7,1)
(54,24,1)
(4,48,1)
(47,36,1)
(19,42,1)
(30,15,1)
(13,70,1)
(70,64,1)
(32,41,1)
(3,63,1)
(22,59,1)
(17,45,1)
(56,30,1)
(61,15,1)
(14,36,1)
(7,17,1)
(1,35,1)
(45,54,1)
(46,66,1)
(39,34,1)
(55,7,1)
(54,0,1)
(34,45,1)
(33,54,1)
(64,54,1)
(28,22,1)
(4,41,1)
(1,69,2)
(45,54,2)
(3,47,2)
(60,30,2)
(17,45,2)
(34,30,2)
(4,41,2)
(63,28,2)
(64,10,2)
(13,36,2)
(52,7,2)
(17,30,2)
(47,13,2)
(63,54,2)
(55,7,2)
(17,1,2)
(19,47,2)
(63,47,2)
(28,22,2)
(30,15,2)
(48,7,2)
(1,30,2)
(31,7,2)
(64,54,2)
(7,30,2)
(53,7,2)
(69,30,2)
(65,36,2)
(36,7,2)
(47,36,2)
(5,47,2)
(22,7,2)
(37,7,2)
(28,47,2)
(27,7,2)
(7,17,2)
(54,24,2)
(50,54,2)
(38,36,2)
(46,30,2)
(14,36,2)
(36,22,2)
(1,35,2)
(45,41,2)
(66,30,2)
(59,54,2)
(15,41,2)
(4,7,2)
(13,64,2)
(22,59,2)
(64,36,2)
(6,7,2)
(10,36,2)
(39,30,2)
(2,30,2)
(10,22,2)
(26,47,2)
(8,7,2)
(45,30,2)
(70,36,2)
(47,7,2)
(41,50,2)
(59,7,2)
(25,7,2)
(42,47,2)
(4,54,2)
(69,41,2)
(23,54,2)
-----------------------------------
(0,dataBuffer)
(1,(int)
(2,stdin)
(3,\\\'\\\\0\\\')
(4,data[dataLen])
(5,data[dataLen-1] = \\\'\\\\0\\\')
(6,data[dataLen] = \\\'\\\\0\\\')
(7,fgets(data+dataLen, (int)
(8,"fgets()
(9,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(10,dataLen-1)
(11,dataBuffer)
(12,)
(13,data[dataLen-1] == \\\'\\\\n\\\')
(14,data)
(15,100-dataLen)
(16,dataLen)
(17,fgets(data+dataLen, (int)
(18,if (100-dataLen > 1)
(19,1)
(20,dataLen)
(21,)
(22,dataLen = strlen(data)
(23,CWE78_OS_Command_Injection__char_console_w32_spawnvp_52b_badSink(data)
(24,dataBuffer[100] = COMMAND_ARG2)
(25,data)
(26,data)
(27,dataLen)
(28,dataLen-1)
(29,dataBuffer)
(30,100-dataLen > 1)
(31,\\\'\\\\0\\\')
(32,100)
(33,dataLen)
(34,100)
(35,int)
(36,dataLen > 0)
(37,printLine("fgets()
(38,dataLen)
(39,dataLen)
(40,)
(41,dataLen = strlen(data)
(42,dataLen)
(43,data)
(44,if (fgets(data+dataLen, (int)
(45,data+dataLen)
(46,dataLen)
(47,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(48,dataLen)
(49,COMMAND_ARG2)
(50,strlen(data)
(51,data)
(52,0)
(53,data)
(54,data = dataBuffer)
(55,dataLen)
(56,data)
(57,)
(58,)
(59,strlen(data)
(60,NULL)
(61,1)
(62,RET)
(63,data[dataLen-1])
(64,data[dataLen-1])
(65,1)
(66,data)
(67,)
(68,data)
(69,100-dataLen)
(70,\\\'\\\\n\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
