-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_w32_spawnv_11_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
53,55
54,55
54,56
55,56
55,57
57,58
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
65,68
66,67
68,69
71,72
71,73
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
79,80
79,81
80,81
80,82
80,83
80,84
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
92,93
93,94
93,95
95,96
97,98
99,100
101,102
101,103
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
112,113
115,116
116,117
116,118
117,118
119,120
121,122
121,123
122,123
123,124
123,125
125,126
125,127
125,128
125,129
129,130
130,131
130,132
130,133
130,134
131,132
133,134
135,136
137,138
139,140
140,141
140,142
140,143
140,144
141,142
143,144
145,146
147,148
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,37,39,43,45,49,51,52,56,58,59,64,67,69,70,74,76,82,85,87,90,91,94,96,98,100,105,106,111,113,114,118,120,124,126,127,128,132,134,136,138,142,144,146,148
-----computeFrom-----
23,24
23,25
54,55
54,56
55,56
55,57
62,63
62,64
72,73
72,74
79,80
79,81
83,84
83,85
93,94
93,95
108,109
108,110
-----guardedBy-----
58,113
76,100
74,120
85,111
96,113
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_w32_spawnv_11_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_file_w32_spawnv_11_bad()
CWE78_OS_Command_Injection__char_file_w32_spawnv_11_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(63,48,0)
(41,61,0)
(10,54,0)
(3,17,0)
(43,45,0)
(5,51,0)
(59,64,0)
(56,15,0)
(23,19,0)
(14,4,0)
(64,28,0)
(17,48,0)
(2,12,0)
(61,41,0)
(20,41,0)
(24,5,0)
(5,4,0)
(45,49,0)
(13,31,0)
(22,0,0)
(7,37,0)
(1,18,0)
(29,21,0)
(61,5,0)
(4,30,0)
(6,67,0)
(37,46,0)
(8,18,0)
(65,53,0)
(50,17,0)
(58,16,0)
(15,18,0)
(53,12,0)
(57,48,0)
(41,20,0)
(64,59,0)
(60,4,0)
(55,28,0)
(67,49,0)
(59,5,0)
(0,62,0)
(66,48,0)
(36,46,0)
(41,64,0)
(53,67,0)
(51,5,0)
(19,0,0)
(64,41,0)
(0,16,0)
(53,5,0)
(54,0,0)
(18,5,0)
(11,59,0)
(38,37,0)
(59,12,0)
(62,0,0)
(51,12,0)
(34,12,0)
(25,59,0)
(40,53,0)
(12,48,0)
(31,48,0)
(42,62,0)
(19,21,0)
(39,51,0)
(9,4,0)
(12,17,0)
(28,64,0)
(27,54,0)
(37,31,0)
(46,31,0)
(52,61,0)
(26,61,0)
(64,0,0)
(32,37,0)
(47,62,0)
(35,64,0)
(18,15,0)
(40,65,1)
(41,20,1)
(56,18,1)
(28,64,1)
(36,19,1)
(8,5,1)
(46,36,1)
(36,54,1)
(19,23,1)
(34,17,1)
(54,27,1)
(12,2,1)
(11,25,1)
(62,47,1)
(6,53,1)
(2,34,1)
(35,41,1)
(0,62,1)
(51,12,1)
(54,0,1)
(33,37,1)
(44,12,1)
(15,56,1)
(61,5,1)
(51,39,1)
(47,42,1)
(65,45,1)
(43,28,1)
(25,54,1)
(12,17,1)
(67,6,1)
(53,12,1)
(27,10,1)
(28,55,1)
(3,50,1)
(17,3,1)
(64,41,1)
(5,51,1)
(59,5,1)
(23,67,1)
(45,43,1)
(37,32,1)
(55,64,1)
(26,52,1)
(37,46,1)
(39,24,1)
(15,18,1)
(61,26,1)
(18,1,1)
(64,59,1)
(64,35,1)
(23,28,1)
(10,0,1)
(42,22,1)
(18,5,1)
(38,7,1)
(24,44,1)
(32,38,1)
(41,61,1)
(36,15,1)
(36,44,1)
(52,59,1)
(59,12,1)
(19,0,1)
(7,46,1)
(1,8,1)
(53,5,1)
(53,40,1)
(64,0,1)
(22,15,1)
(59,11,1)
(23,54,2)
(35,54,2)
(51,44,2)
(11,54,2)
(28,64,2)
(6,28,2)
(28,54,2)
(42,15,2)
(41,54,2)
(61,54,2)
(65,28,2)
(19,0,2)
(27,15,2)
(62,15,2)
(54,0,2)
(41,61,2)
(43,28,2)
(64,59,2)
(64,54,2)
(59,54,2)
(18,5,2)
(52,54,2)
(54,15,2)
(41,20,2)
(45,28,2)
(53,5,2)
(53,12,2)
(25,54,2)
(0,62,2)
(26,54,2)
(59,5,2)
(64,0,2)
(24,44,2)
(64,41,2)
(10,15,2)
(19,54,2)
(18,44,2)
(22,15,2)
(0,15,2)
(12,17,2)
(51,12,2)
(40,28,2)
(15,44,2)
(55,54,2)
(37,46,2)
(1,44,2)
(8,44,2)
(15,18,2)
(39,44,2)
(53,28,2)
(67,28,2)
(59,12,2)
(56,44,2)
(5,44,2)
(5,51,2)
(61,5,2)
(47,15,2)
-----------------------------------
(0,pFile = fopen(FILENAME, "r")
(1,dataLen)
(2,dataBuffer)
(3,COMMAND_ARG2)
(4,)
(5,dataLen = strlen(data)
(6,\\\'\\\\0\\\')
(7,_P_WAIT)
(8,100)
(9,dataLen)
(10,pFile)
(11,dataLen)
(12,data = dataBuffer)
(13,args)
(14,pFile)
(15,100-dataLen > 1)
(16,)
(17,dataBuffer[100] = COMMAND_ARG2)
(18,100-dataLen)
(19,fclose(pFile)
(20,int)
(21,)
(22,pFile)
(23,pFile)
(24,dataLen)
(25,data)
(26,dataLen)
(27,NULL)
(28,fgets(data+dataLen, (int)
(29,if (fgets(data+dataLen, (int)
(30,)
(31,)
(32,args)
(33,RET)
(34,data)
(35,pFile)
(36,args)
(37,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(38,COMMAND_INT_PATH)
(39,data)
(40,dataLen)
(41,(int)
(42,FILENAME)
(43,"fgets()
(44,globalReturnsTrue()
(45,printLine("fgets()
(46,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(47,"r")
(48,)
(49,)
(50,dataBuffer)
(51,strlen(data)
(52,100)
(53,data[dataLen])
(54,pFile != NULL)
(55,NULL)
(56,1)
(57,if(globalReturnsTrue()
(58,if (pFile != NULL)
(59,data+dataLen)
(60,if (100-dataLen > 1)
(61,100-dataLen)
(62,fopen(FILENAME, "r")
(63,data)
(64,fgets(data+dataLen, (int)
(65,data)
(66,dataBuffer)
(67,data[dataLen] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
