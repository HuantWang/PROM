-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        char * data = *dataPtr1;
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* execl - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
74,76
75,76
75,77
76,77
76,78
78,79
81,82
82,83
82,84
82,85
83,84
83,85
84,85
84,86
84,87
84,88
85,86
87,88
87,89
88,89
90,91
92,93
92,94
93,94
93,95
96,97
97,98
97,99
99,100
101,102
103,104
105,106
105,107
106,107
107,108
107,109
108,109
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
125,126
125,127
126,127
130,131
131,132
132,133
132,134
133,134
133,135
134,135
136,137
136,138
137,138
141,142
141,143
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
149,151
150,151
152,153
155,156
156,157
156,158
157,158
158,159
160,161
162,163
162,164
163,164
164,165
164,166
166,167
166,168
166,169
169,170
170,171
171,172
173,174
174,175
174,176
174,177
174,178
174,179
174,180
175,176
177,178
179,180
181,182
183,184
185,186
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,77,79,80,86,89,91,94,95,98,100,102,104,109,112,114,119,120,124,127,128,129,135,138,139,140,145,146,151,153,154,159,161,165,167,168,172,176,178,180,182,184,186
-----computeFrom-----
45,46
45,47
75,76
75,77
76,77
76,78
83,84
83,85
87,88
87,89
97,98
97,99
107,108
107,109
116,117
116,118
117,118
117,119
121,122
121,123
125,126
125,127
132,133
132,134
136,137
136,138
148,149
148,150
156,157
156,158
-----guardedBy-----
79,153
89,135
100,138
124,135
127,138
-----guardedByNegation-----
89,151
100,153
-----lastLexicalUse-----
89,151
100,153
-----jump-----
89,151
100,153
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* execl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
void
CWE78_OS_Command_Injection__char_console_execl_32_bad()
CWE78_OS_Command_Injection__char_console_execl_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* execl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char * data = *dataPtr1;        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* execl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(25,64,0)
(44,52,0)
(1,7,0)
(83,15,0)
(15,83,0)
(28,51,0)
(46,31,0)
(60,7,0)
(88,61,0)
(9,90,0)
(11,14,0)
(56,82,0)
(75,34,0)
(83,64,0)
(54,14,0)
(76,85,0)
(13,100,0)
(9,64,0)
(12,83,0)
(19,64,0)
(7,60,0)
(62,76,0)
(47,61,0)
(30,53,0)
(82,52,0)
(79,97,0)
(69,66,0)
(31,94,0)
(81,78,0)
(16,97,0)
(85,76,0)
(93,49,0)
(95,86,0)
(23,61,0)
(97,78,0)
(95,61,0)
(68,54,0)
(90,75,0)
(73,75,0)
(50,4,0)
(38,52,0)
(28,36,0)
(67,19,0)
(0,20,0)
(43,21,0)
(40,62,0)
(24,95,0)
(16,90,0)
(20,95,0)
(8,94,0)
(99,62,0)
(10,7,0)
(64,20,0)
(100,53,0)
(86,95,0)
(31,49,0)
(20,64,0)
(90,9,0)
(3,4,0)
(33,64,0)
(16,64,0)
(36,28,0)
(82,61,0)
(55,61,0)
(91,25,0)
(32,91,0)
(97,16,0)
(45,70,0)
(2,16,0)
(60,64,0)
(14,90,0)
(65,85,0)
(92,16,0)
(21,3,0)
(39,25,0)
(19,34,0)
(21,90,0)
(42,86,0)
(97,28,0)
(71,100,0)
(89,36,0)
(41,90,0)
(58,21,0)
(76,62,0)
(80,75,0)
(53,61,0)
(51,28,0)
(64,34,0)
(15,66,0)
(52,61,0)
(94,53,0)
(87,100,0)
(5,100,0)
(24,19,0)
(57,50,0)
(6,95,0)
(14,54,0)
(29,34,0)
(25,91,0)
(98,49,0)
(17,98,0)
(60,85,0)
(21,64,0)
(72,36,0)
(78,97,0)
(28,97,0)
(63,82,0)
(18,9,0)
(96,100,0)
(62,15,0)
(85,60,0)
(37,60,0)
(94,31,0)
(34,61,0)
(36,90,0)
(48,26,0)
(27,15,0)
(74,14,0)
(77,24,0)
(70,59,0)
(84,91,0)
(35,3,0)
(7,15,0)
(49,61,0)
(49,98,0)
(25,70,0)
(91,15,0)
(100,87,1)
(54,14,1)
(84,39,1)
(14,11,1)
(40,15,1)
(87,5,1)
(78,97,1)
(3,35,1)
(71,13,1)
(28,36,1)
(85,60,1)
(19,67,1)
(14,90,1)
(82,52,1)
(97,79,1)
(81,97,1)
(77,54,1)
(85,65,1)
(41,64,1)
(83,64,1)
(56,52,1)
(77,3,1)
(82,63,1)
(21,64,1)
(60,64,1)
(13,96,1)
(70,45,1)
(22,100,1)
(43,50,1)
(98,17,1)
(27,78,1)
(38,49,1)
(50,57,1)
(92,54,1)
(33,82,1)
(25,91,1)
(8,19,1)
(35,21,1)
(67,24,1)
(9,18,1)
(32,84,1)
(74,90,1)
(79,28,1)
(76,62,1)
(86,42,1)
(65,60,1)
(99,40,1)
(2,92,1)
(60,7,1)
(97,28,1)
(72,89,1)
(54,68,1)
(77,76,1)
(18,41,1)
(12,27,1)
(0,33,1)
(83,12,1)
(62,99,1)
(78,81,1)
(45,25,1)
(24,95,1)
(7,15,1)
(19,64,1)
(46,8,1)
(21,58,1)
(1,10,1)
(5,71,1)
(68,14,1)
(31,46,1)
(52,44,1)
(58,43,1)
(11,74,1)
(93,95,1)
(94,31,1)
(57,78,1)
(17,93,1)
(24,77,1)
(31,49,1)
(36,72,1)
(96,94,1)
(42,6,1)
(76,85,1)
(77,70,1)
(7,1,1)
(64,20,1)
(25,64,1)
(15,83,1)
(44,38,1)
(49,98,1)
(16,2,1)
(62,15,1)
(21,90,1)
(97,16,1)
(9,64,1)
(95,86,1)
(37,62,1)
(20,95,1)
(10,37,1)
(16,90,1)
(91,15,1)
(36,90,1)
(63,56,1)
(28,51,1)
(39,76,1)
(89,16,1)
(16,64,1)
(91,32,1)
(90,9,1)
(20,0,1)
(50,78,2)
(54,14,2)
(97,28,2)
(25,91,2)
(28,36,2)
(10,62,2)
(27,78,2)
(76,85,2)
(78,54,2)
(76,78,2)
(78,97,2)
(65,62,2)
(91,15,2)
(92,54,2)
(31,49,2)
(32,76,2)
(72,54,2)
(24,95,2)
(1,62,2)
(89,54,2)
(57,78,2)
(14,90,2)
(99,78,2)
(94,31,2)
(81,54,2)
(83,64,2)
(2,54,2)
(21,78,2)
(16,90,2)
(62,78,2)
(20,95,2)
(40,78,2)
(15,78,2)
(91,76,2)
(82,52,2)
(79,54,2)
(64,20,2)
(58,78,2)
(85,62,2)
(84,76,2)
(39,76,2)
(62,15,2)
(19,64,2)
(49,98,2)
(85,60,2)
(36,54,2)
(7,15,2)
(28,51,2)
(35,78,2)
(90,9,2)
(28,54,2)
(97,54,2)
(16,54,2)
(60,7,2)
(12,78,2)
(21,90,2)
(83,78,2)
(25,76,2)
(16,64,2)
(25,64,2)
(95,86,2)
(43,78,2)
(76,62,2)
(3,78,2)
(37,62,2)
(45,76,2)
(60,62,2)
(9,64,2)
(7,62,2)
(97,16,2)
(15,83,2)
(60,64,2)
(36,90,2)
(70,76,2)
(21,64,2)
-----------------------------------
(0,dataPtr1)
(1,1)
(2,dataLen)
(3,data[dataLen] = \\\'\\\\0\\\')
(4,)
(5,COMMAND_ARG3)
(6,dataPtr1)
(7,dataLen-1)
(8,data)
(9,strlen(data)
(10,dataLen)
(11,dataLen)
(12,data)
(13,COMMAND_INT_PATH)
(14,100-dataLen)
(15,dataLen = strlen(data)
(16,data+dataLen)
(17,data)
(18,data)
(19,*dataPtr1 = data)
(20,*dataPtr1)
(21,data[dataLen])
(22,RET)
(23,data)
(24,*dataPtr1)
(25,data[dataLen-1])
(26,)
(27,dataLen)
(28,(int)
(29,data)
(30,data)
(31,*dataPtr2)
(32,1)
(33,data)
(34,)
(35,\\\'\\\\0\\\')
(36,100-dataLen)
(37,data)
(38,dataBuffer)
(39,data)
(40,dataLen)
(41,dataLen)
(42,data)
(43,data)
(44,COMMAND_ARG2)
(45,\\\'\\\\0\\\')
(46,dataPtr2)
(47,dataPtr2)
(48,if (fgets(data+dataLen, (int)
(49,* *dataPtr2 = &data)
(50,printLine("fgets()
(51,int)
(52,dataBuffer[100] = COMMAND_ARG2)
(53,)
(54,100-dataLen > 1)
(55,dataPtr1)
(56,data)
(57,"fgets()
(58,dataLen)
(59,)
(60,data[dataLen-1])
(61,)
(62,dataLen > 0)
(63,dataBuffer)
(64,* data = *dataPtr1)
(65,\\\'\\\\n\\\')
(66,)
(67,data)
(68,1)
(69,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(70,data[dataLen-1] = \\\'\\\\0\\\')
(71,COMMAND_ARG1)
(72,dataLen)
(73,dataLen)
(74,100)
(75,)
(76,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(77,dataPtr1)
(78,fgets(data+dataLen, (int)
(79,stdin)
(80,if (100-dataLen > 1)
(81,NULL)
(82,data = dataBuffer)
(83,strlen(data)
(84,dataLen)
(85,data[dataLen-1] == \\\'\\\\n\\\')
(86,&data)
(87,NULL)
(88,dataBuffer)
(89,100)
(90,dataLen = strlen(data)
(91,dataLen-1)
(92,data)
(93,dataPtr2)
(94,* data = *dataPtr2)
(95,* *dataPtr1 = &data)
(96,COMMAND_INT_PATH)
(97,fgets(data+dataLen, (int)
(98,&data)
(99,0)
(100,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
