-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_system_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        char * data = *dataPtr1;
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
94,97
94,98
95,96
97,98
97,99
98,99
100,101
102,103
104,105
104,106
105,106
105,107
107,108
110,111
111,112
111,113
112,113
113,114
115,116
117,118
117,119
118,119
119,120
119,121
121,122
121,123
121,124
124,125
125,126
126,127
128,129
128,130
129,130
129,131
130,131
130,132
131,132
133,134
136,137
136,138
137,138
138,139
138,140
139,140
142,143
143,144
143,145
144,145
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,76,78,79,83,85,89,91,96,99,101,103,106,108,109,114,116,120,122,123,127,132,134,135,140,141,145,146
-----computeFrom-----
45,46
45,47
87,88
87,89
97,98
97,99
104,105
104,106
105,106
105,107
111,112
111,113
129,130
129,131
-----guardedBy-----
89,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_system_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
void
CWE78_OS_Command_Injection__char_environment_system_32_bad()
CWE78_OS_Command_Injection__char_environment_system_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(57,49,0)
(68,67,0)
(36,69,0)
(39,51,0)
(5,63,0)
(7,61,0)
(41,63,0)
(37,42,0)
(38,1,0)
(4,70,0)
(24,51,0)
(46,7,0)
(63,61,0)
(6,12,0)
(69,35,0)
(0,49,0)
(47,65,0)
(71,60,0)
(38,10,0)
(42,37,0)
(2,23,0)
(2,49,0)
(48,5,0)
(53,39,0)
(62,42,0)
(23,2,0)
(11,38,0)
(22,19,0)
(2,37,0)
(28,10,0)
(50,15,0)
(66,37,0)
(7,69,0)
(35,38,0)
(29,1,0)
(51,10,0)
(21,70,0)
(60,18,0)
(60,15,0)
(30,2,0)
(34,67,0)
(19,65,0)
(56,10,0)
(37,63,0)
(18,60,0)
(14,17,0)
(46,38,0)
(23,70,0)
(33,51,0)
(65,19,0)
(15,10,0)
(13,63,0)
(32,17,0)
(39,10,0)
(2,9,0)
(8,36,0)
(64,39,0)
(36,5,0)
(35,69,0)
(55,7,0)
(70,23,0)
(12,37,0)
(43,34,0)
(20,63,0)
(26,12,0)
(27,69,0)
(15,25,0)
(49,69,0)
(70,5,0)
(25,15,0)
(5,36,0)
(49,5,0)
(61,10,0)
(3,61,0)
(19,18,0)
(52,10,0)
(59,68,0)
(18,17,0)
(49,2,0)
(54,35,0)
(45,25,0)
(16,46,0)
(1,38,0)
(69,61,0)
(17,10,0)
(31,10,0)
(58,23,0)
(40,18,0)
(39,51,1)
(35,38,1)
(38,1,1)
(47,19,1)
(42,62,1)
(19,22,1)
(30,49,1)
(18,60,1)
(70,4,1)
(25,45,1)
(36,8,1)
(7,69,1)
(43,68,1)
(53,51,1)
(29,11,1)
(2,49,1)
(7,55,1)
(5,36,1)
(62,66,1)
(44,34,1)
(49,69,1)
(70,5,1)
(39,64,1)
(4,21,1)
(21,58,1)
(60,71,1)
(71,40,1)
(54,27,1)
(66,5,1)
(69,35,1)
(16,2,1)
(0,12,1)
(19,18,1)
(35,54,1)
(46,38,1)
(65,19,1)
(36,69,1)
(55,46,1)
(6,26,1)
(49,57,1)
(60,15,1)
(15,25,1)
(33,24,1)
(51,33,1)
(26,37,1)
(23,70,1)
(58,30,1)
(49,5,1)
(16,12,1)
(48,69,1)
(40,7,1)
(45,50,1)
(2,23,1)
(24,15,1)
(57,0,1)
(1,29,1)
(27,39,1)
(2,37,1)
(64,53,1)
(65,47,1)
(12,37,1)
(34,43,1)
(37,42,1)
(68,59,1)
(46,16,1)
(44,65,1)
(12,6,1)
(22,18,1)
(59,65,1)
(50,38,1)
(8,48,1)
(59,65,2)
(58,12,2)
(65,19,2)
(23,12,2)
(2,37,2)
(68,65,2)
(18,60,2)
(0,12,2)
(69,35,2)
(37,42,2)
(34,65,2)
(5,36,2)
(12,37,2)
(19,18,2)
(70,5,2)
(30,12,2)
(39,51,2)
(4,12,2)
(49,12,2)
(2,12,2)
(70,12,2)
(60,15,2)
(15,25,2)
(46,38,2)
(38,1,2)
(49,5,2)
(2,23,2)
(49,69,2)
(23,70,2)
(43,65,2)
(7,69,2)
(2,49,2)
(36,69,2)
(57,12,2)
(21,12,2)
(35,38,2)
-----------------------------------
(0,data)
(1,&data)
(2,strncat(data+dataLen, environment, 100-dataLen-1)
(3,data)
(4,1)
(5,dataLen = strlen(data)
(6,NULL)
(7,*dataPtr1 = data)
(8,data)
(9,)
(10,)
(11,dataPtr1)
(12,environment != NULL)
(13,dataLen)
(14,if (SYSTEM(data)
(15,* *dataPtr2 = &data)
(16,dataPtr1)
(17,)
(18,* data = *dataPtr2)
(19,SYSTEM(data)
(20,environment)
(21,dataLen)
(22,data)
(23,100-dataLen-1)
(24,data_buf)
(25,&data)
(26,environment)
(27,data)
(28,data)
(29,data)
(30,environment)
(31,dataPtr2)
(32,data)
(33,FULL_COMMAND)
(34,exit(1)
(35,*dataPtr1)
(36,strlen(data)
(37,* environment = GETENV(ENV_VARIABLE)
(38,* *dataPtr1 = &data)
(39,data = data_buf)
(40,data)
(41,if (environment != NULL)
(42,GETENV(ENV_VARIABLE)
(43,1)
(44,RET)
(45,data)
(46,*dataPtr1)
(47,0)
(48,dataLen)
(49,data+dataLen)
(50,dataPtr2)
(51,data_buf[100] = FULL_COMMAND)
(52,dataPtr1)
(53,data)
(54,dataPtr1)
(55,data)
(56,data_buf)
(57,dataLen)
(58,100)
(59,"command execution failed!")
(60,*dataPtr2)
(61,)
(62,ENV_VARIABLE)
(63,)
(64,data_buf)
(65,SYSTEM(data)
(66,environment)
(67,)
(68,printLine("command execution failed!")
(69,* data = *dataPtr1)
(70,dataLen-1)
(71,dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
