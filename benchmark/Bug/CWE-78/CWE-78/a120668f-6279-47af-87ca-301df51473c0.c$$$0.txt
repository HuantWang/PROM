-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execv_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execv_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execv_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_execv_63_bad()
CWE78_OS_Command_Injection__char_console_w32_execv_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execv_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_execv_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_execv_63b_badSink
CWE78_OS_Command_Injection__char_console_w32_execv_63b_badSink
&data
data
data
-----joern-----
(36,38,0)
(28,45,0)
(64,10,0)
(22,25,0)
(58,42,0)
(7,1,0)
(53,11,0)
(10,7,0)
(39,35,0)
(53,23,0)
(47,4,0)
(27,23,0)
(57,1,0)
(51,41,0)
(11,53,0)
(60,69,0)
(68,24,0)
(16,1,0)
(62,53,0)
(63,26,0)
(40,23,0)
(54,57,0)
(3,71,0)
(34,60,0)
(64,41,0)
(59,64,0)
(48,10,0)
(11,61,0)
(29,1,0)
(24,49,0)
(23,1,0)
(71,23,0)
(6,28,0)
(66,28,0)
(35,23,0)
(17,61,0)
(50,49,0)
(46,38,0)
(52,36,0)
(43,10,0)
(35,30,0)
(56,57,0)
(16,27,0)
(5,23,0)
(53,10,0)
(30,35,0)
(19,43,0)
(9,42,0)
(40,32,0)
(67,30,0)
(33,40,0)
(61,11,0)
(0,30,0)
(45,9,0)
(42,9,0)
(42,26,0)
(30,36,0)
(13,11,0)
(71,36,0)
(14,23,0)
(31,27,0)
(49,10,0)
(32,69,0)
(26,42,0)
(44,64,0)
(65,9,0)
(20,26,0)
(23,57,0)
(27,16,0)
(21,22,0)
(10,43,0)
(28,36,0)
(43,23,0)
(41,11,0)
(26,36,0)
(36,71,0)
(49,24,0)
(8,53,0)
(11,41,0)
(37,7,0)
(18,49,0)
(35,22,0)
(70,1,0)
(2,7,0)
(12,40,0)
(41,51,0)
(45,28,0)
(9,45,0)
(41,64,0)
(42,23,0)
(15,32,0)
(40,10,0)
(34,61,1)
(27,31,1)
(40,10,1)
(21,35,1)
(36,71,1)
(28,66,1)
(64,44,1)
(39,45,1)
(27,23,1)
(71,3,1)
(5,14,1)
(48,23,1)
(64,10,1)
(40,33,1)
(20,63,1)
(31,45,1)
(24,49,1)
(53,23,1)
(11,41,1)
(30,36,1)
(9,42,1)
(57,56,1)
(26,36,1)
(55,16,1)
(50,10,1)
(43,23,1)
(43,19,1)
(24,68,1)
(26,20,1)
(61,11,1)
(42,26,1)
(53,8,1)
(32,15,1)
(10,43,1)
(42,23,1)
(52,61,1)
(28,36,1)
(18,50,1)
(12,60,1)
(59,53,1)
(19,48,1)
(3,52,1)
(22,21,1)
(14,57,1)
(31,24,1)
(61,17,1)
(60,34,1)
(31,22,1)
(9,65,1)
(17,11,1)
(45,28,1)
(66,6,1)
(49,10,1)
(63,58,1)
(35,23,1)
(44,59,1)
(8,62,1)
(23,5,1)
(35,30,1)
(33,12,1)
(41,64,1)
(11,13,1)
(0,39,1)
(16,27,1)
(71,23,1)
(65,42,1)
(49,18,1)
(31,32,1)
(23,57,1)
(68,49,1)
(58,28,1)
(56,54,1)
(41,51,1)
(13,41,1)
(62,24,1)
(30,67,1)
(53,10,1)
(45,9,1)
(6,36,1)
(11,53,1)
(67,0,1)
(40,23,1)
(15,40,1)
(39,45,2)
(26,28,2)
(53,10,2)
(35,30,2)
(9,42,2)
(24,49,2)
(40,23,2)
(42,28,2)
(45,61,2)
(10,43,2)
(21,45,2)
(28,61,2)
(42,23,2)
(52,61,2)
(11,41,2)
(41,24,2)
(33,61,2)
(6,61,2)
(64,10,2)
(62,24,2)
(16,27,2)
(15,61,2)
(11,24,2)
(11,53,2)
(23,57,2)
(44,24,2)
(8,24,2)
(61,24,2)
(36,61,2)
(36,71,2)
(3,61,2)
(71,61,2)
(17,24,2)
(58,28,2)
(27,23,2)
(20,28,2)
(45,9,2)
(28,36,2)
(64,24,2)
(53,23,2)
(26,36,2)
(30,36,2)
(61,11,2)
(49,10,2)
(22,45,2)
(71,23,2)
(45,28,2)
(42,26,2)
(41,64,2)
(12,61,2)
(43,23,2)
(9,28,2)
(32,61,2)
(66,61,2)
(63,28,2)
(41,51,2)
(0,45,2)
(35,23,2)
(34,61,2)
(67,45,2)
(60,61,2)
(65,28,2)
(53,24,2)
(40,61,2)
(13,24,2)
(30,45,2)
(59,24,2)
(35,45,2)
(40,10,2)
-----------------------------------
(0,dataLen)
(1,)
(2,if (100-dataLen > 1)
(3,data)
(4,)
(5,dataBuffer)
(6,dataLen)
(7,)
(8,dataLen)
(9,data[dataLen-1] == \\\'\\\\n\\\')
(10,dataLen = strlen(data)
(11,fgets(data+dataLen, (int)
(12,data)
(13,stdin)
(14,data)
(15,\\\'\\\\0\\\')
(16,CWE78_OS_Command_Injection__char_console_w32_execv_63b_badSink(&data)
(17,NULL)
(18,dataLen)
(19,data)
(20,1)
(21,\\\'\\\\0\\\')
(22,data[dataLen-1] = \\\'\\\\0\\\')
(23,data = dataBuffer)
(24,100-dataLen > 1)
(25,)
(26,dataLen-1)
(27,&data)
(28,dataLen > 0)
(29,dataBuffer)
(30,dataLen-1)
(31,data)
(32,data[dataLen] = \\\'\\\\0\\\')
(33,dataLen)
(34,"fgets()
(35,data[dataLen-1])
(36,dataLen = strlen(data)
(37,dataLen)
(38,)
(39,data)
(40,data[dataLen])
(41,(int)
(42,data[dataLen-1])
(43,strlen(data)
(44,dataLen)
(45,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(46,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(47,if (fgets(data+dataLen, (int)
(48,dataLen)
(49,100-dataLen)
(50,100)
(51,int)
(52,dataLen)
(53,data+dataLen)
(54,dataBuffer)
(55,RET)
(56,COMMAND_ARG2)
(57,dataBuffer[100] = COMMAND_ARG2)
(58,data)
(59,100)
(60,printLine("fgets()
(61,fgets(data+dataLen, (int)
(62,data)
(63,dataLen)
(64,100-dataLen)
(65,\\\'\\\\n\\\')
(66,0)
(67,1)
(68,1)
(69,)
(70,data)
(71,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
