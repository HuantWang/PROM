-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_45_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_system_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_45_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_system_45_bad()
CWE78_OS_Command_Injection__char_console_system_45_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_system_45_badData = data;
CWE78_OS_Command_Injection__char_console_system_45_badData = data
CWE78_OS_Command_Injection__char_console_system_45_badData
CWE78_OS_Command_Injection__char_console_system_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(37,54,0)
(34,63,0)
(59,23,0)
(10,9,0)
(45,38,0)
(6,55,0)
(36,64,0)
(38,44,0)
(25,11,0)
(46,34,0)
(15,22,0)
(68,54,0)
(31,44,0)
(44,24,0)
(61,14,0)
(29,39,0)
(27,33,0)
(57,44,0)
(21,53,0)
(38,22,0)
(31,59,0)
(58,63,0)
(32,11,0)
(72,59,0)
(62,53,0)
(29,33,0)
(52,23,0)
(70,53,0)
(22,63,0)
(53,37,0)
(42,21,0)
(71,7,0)
(66,23,0)
(4,23,0)
(26,40,0)
(28,34,0)
(7,59,0)
(33,37,0)
(21,59,0)
(38,45,0)
(41,36,0)
(19,37,0)
(50,63,0)
(58,59,0)
(63,65,0)
(44,38,0)
(2,33,0)
(59,66,0)
(39,29,0)
(43,65,0)
(56,64,0)
(34,14,0)
(40,69,0)
(1,56,0)
(51,66,0)
(24,44,0)
(9,40,0)
(9,37,0)
(54,37,0)
(8,22,0)
(53,21,0)
(31,63,0)
(49,69,0)
(44,31,0)
(40,9,0)
(0,31,0)
(65,23,0)
(16,24,0)
(11,59,0)
(21,39,0)
(11,63,0)
(13,39,0)
(3,23,0)
(40,59,0)
(48,59,0)
(18,7,0)
(60,66,0)
(12,31,0)
(37,55,0)
(20,9,0)
(7,23,0)
(33,29,0)
(22,38,0)
(39,21,0)
(63,58,0)
(54,59,0)
(69,30,0)
(5,67,0)
(35,65,0)
(14,34,0)
(47,58,0)
(11,56,0)
(47,50,1)
(52,7,1)
(46,63,1)
(61,34,1)
(70,42,1)
(0,14,1)
(31,63,1)
(58,47,1)
(56,1,1)
(68,19,1)
(2,27,1)
(59,66,1)
(22,63,1)
(38,45,1)
(36,41,1)
(58,59,1)
(49,40,1)
(33,37,1)
(71,56,1)
(66,51,1)
(15,31,1)
(42,33,1)
(29,39,1)
(44,57,1)
(18,71,1)
(32,36,1)
(24,44,1)
(37,54,1)
(16,44,1)
(40,9,1)
(17,52,1)
(54,68,1)
(53,62,1)
(57,38,1)
(26,29,1)
(69,49,1)
(20,10,1)
(71,29,1)
(13,21,1)
(21,59,1)
(44,31,1)
(34,28,1)
(33,2,1)
(24,16,1)
(63,58,1)
(12,0,1)
(8,15,1)
(1,11,1)
(11,25,1)
(25,32,1)
(19,24,1)
(38,22,1)
(28,46,1)
(71,69,1)
(39,21,1)
(31,12,1)
(41,24,1)
(51,60,1)
(22,8,1)
(50,59,1)
(44,38,1)
(53,37,1)
(27,37,1)
(21,53,1)
(9,20,1)
(59,72,1)
(11,63,1)
(72,48,1)
(29,33,1)
(62,70,1)
(40,59,1)
(48,66,1)
(11,59,1)
(54,59,1)
(14,61,1)
(7,18,1)
(31,59,1)
(34,63,1)
(39,13,1)
(71,14,1)
(7,59,1)
(10,26,1)
(14,34,1)
(9,37,1)
(21,59,2)
(31,14,2)
(54,59,2)
(11,59,2)
(38,14,2)
(21,53,2)
(7,59,2)
(36,24,2)
(11,24,2)
(44,31,2)
(41,24,2)
(15,14,2)
(26,29,2)
(58,59,2)
(24,44,2)
(16,14,2)
(31,63,2)
(49,29,2)
(54,24,2)
(25,24,2)
(53,37,2)
(39,21,2)
(10,29,2)
(59,66,2)
(1,24,2)
(9,29,2)
(29,39,2)
(29,24,2)
(22,14,2)
(33,37,2)
(37,24,2)
(38,22,2)
(53,33,2)
(40,29,2)
(2,24,2)
(37,54,2)
(63,58,2)
(11,63,2)
(44,14,2)
(68,24,2)
(34,63,2)
(29,33,2)
(56,24,2)
(9,37,2)
(12,14,2)
(38,45,2)
(39,33,2)
(40,59,2)
(24,14,2)
(40,9,2)
(20,29,2)
(0,14,2)
(32,24,2)
(42,33,2)
(14,34,2)
(31,59,2)
(13,33,2)
(69,29,2)
(22,63,2)
(33,24,2)
(27,24,2)
(70,33,2)
(19,24,2)
(21,33,2)
(44,38,2)
(57,14,2)
(8,14,2)
(62,33,2)
-----------------------------------
(0,data)
(1,\\\'\\\\0\\\')
(2,0)
(3,data_buf)
(4,data)
(5,if (fgets(data+dataLen, (int)
(6,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(7,CWE78_OS_Command_Injection__char_console_system_45_badData = data)
(8,dataLen)
(9,dataLen-1)
(10,dataLen)
(11,data[dataLen])
(12,dataLen)
(13,\\\'\\\\n\\\')
(14,100-dataLen > 1)
(15,100)
(16,NULL)
(17,RET)
(18,data)
(19,dataLen)
(20,1)
(21,data[dataLen-1])
(22,100-dataLen)
(23,)
(24,fgets(data+dataLen, (int)
(25,dataLen)
(26,data)
(27,dataLen)
(28,dataLen)
(29,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(30,)
(31,data+dataLen)
(32,data)
(33,dataLen > 0)
(34,100-dataLen)
(35,if (100-dataLen > 1)
(36,printLine("fgets()
(37,dataLen = strlen(data)
(38,(int)
(39,data[dataLen-1] == \\\'\\\\n\\\')
(40,data[dataLen-1])
(41,"fgets()
(42,data)
(43,dataLen)
(44,fgets(data+dataLen, (int)
(45,int)
(46,100)
(47,data)
(48,data)
(49,\\\'\\\\0\\\')
(50,dataLen)
(51,FULL_COMMAND)
(52,badSink()
(53,dataLen-1)
(54,strlen(data)
(55,)
(56,data[dataLen] = \\\'\\\\0\\\')
(57,stdin)
(58,strlen(data)
(59,data = data_buf)
(60,data_buf)
(61,1)
(62,1)
(63,dataLen = strlen(data)
(64,)
(65,)
(66,data_buf[100] = FULL_COMMAND)
(67,)
(68,data)
(69,data[dataLen-1] = \\\'\\\\0\\\')
(70,dataLen)
(71,CWE78_OS_Command_Injection__char_console_system_45_badData)
(72,data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
