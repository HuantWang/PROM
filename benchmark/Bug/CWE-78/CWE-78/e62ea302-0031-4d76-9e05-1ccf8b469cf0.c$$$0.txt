-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_14_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalFive==5)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
49,50
49,51
51,52
54,55
55,56
55,57
55,58
56,57
56,58
57,58
57,59
57,60
57,61
58,59
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
70,71
70,72
72,73
74,75
76,77
78,79
78,80
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
114,116
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
122,124
123,124
125,126
128,129
128,130
129,130
129,131
130,131
130,132
131,132
133,134
136,137
136,138
137,138
138,139
138,140
139,140
142,143
143,144
143,145
144,145
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,38,40,44,46,50,52,53,59,62,64,67,68,71,73,75,77,82,85,87,92,93,97,100,101,102,108,111,112,113,118,119,124,126,127,132,134,135,140,141,145,146
-----computeFrom-----
23,24
23,25
29,30
29,31
48,49
48,50
49,50
49,51
56,57
56,58
60,61
60,62
70,71
70,72
80,81
80,82
89,90
89,91
90,91
90,92
94,95
94,96
98,99
98,100
105,106
105,107
109,110
109,111
121,122
121,123
129,130
129,131
-----guardedBy-----
52,126
62,108
73,111
97,108
100,111
-----guardedByNegation-----
62,124
73,126
-----lastLexicalUse-----
62,124
73,126
-----jump-----
62,124
73,126
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_14_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
void
CWE78_OS_Command_Injection__char_console_system_14_bad()
CWE78_OS_Command_Injection__char_console_system_14_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalFive==5)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(28,22,0)
(70,69,0)
(17,64,0)
(3,35,0)
(48,69,0)
(68,64,0)
(78,10,0)
(64,30,0)
(33,4,0)
(1,52,0)
(68,78,0)
(52,24,0)
(14,43,0)
(11,52,0)
(6,35,0)
(57,40,0)
(18,43,0)
(54,71,0)
(2,28,0)
(81,68,0)
(29,9,0)
(50,10,0)
(45,11,0)
(49,63,0)
(17,48,0)
(43,14,0)
(36,63,0)
(41,20,0)
(4,69,0)
(40,7,0)
(21,14,0)
(26,40,0)
(22,69,0)
(78,68,0)
(66,17,0)
(23,54,0)
(40,69,0)
(48,10,0)
(37,67,0)
(69,54,0)
(13,71,0)
(39,68,0)
(72,55,0)
(55,76,0)
(48,17,0)
(46,17,0)
(38,64,0)
(31,71,0)
(28,64,0)
(67,64,0)
(7,8,0)
(60,24,0)
(24,35,0)
(69,71,0)
(56,29,0)
(58,75,0)
(43,55,0)
(52,1,0)
(53,48,0)
(12,8,0)
(51,71,0)
(59,71,0)
(22,28,0)
(67,69,0)
(52,11,0)
(35,69,0)
(16,20,0)
(10,78,0)
(40,55,0)
(47,76,0)
(75,80,0)
(24,52,0)
(25,54,0)
(11,55,0)
(0,4,0)
(77,28,0)
(32,12,0)
(64,67,0)
(5,24,0)
(19,0,0)
(10,48,0)
(35,24,0)
(15,42,0)
(4,0,0)
(35,55,0)
(22,29,0)
(61,22,0)
(55,63,0)
(76,69,0)
(42,80,0)
(76,55,0)
(24,60,0)
(34,43,0)
(73,30,0)
(27,7,0)
(82,11,0)
(79,60,0)
(83,69,0)
(44,74,0)
(63,65,0)
(14,43,1)
(67,69,1)
(38,60,1)
(81,64,1)
(33,20,1)
(35,55,1)
(29,56,1)
(60,79,1)
(48,17,1)
(46,66,1)
(22,28,1)
(22,69,1)
(69,83,1)
(14,21,1)
(24,5,1)
(18,55,1)
(60,24,1)
(47,72,1)
(5,52,1)
(37,38,1)
(50,48,1)
(4,69,1)
(43,34,1)
(53,68,1)
(0,4,1)
(35,3,1)
(68,64,1)
(0,19,1)
(16,41,1)
(15,0,1)
(45,82,1)
(64,67,1)
(35,69,1)
(76,69,1)
(62,75,1)
(40,55,1)
(32,60,1)
(19,4,1)
(3,6,1)
(78,10,1)
(40,69,1)
(10,48,1)
(10,50,1)
(20,16,1)
(33,29,1)
(39,81,1)
(21,43,1)
(77,2,1)
(27,40,1)
(28,64,1)
(66,53,1)
(79,24,1)
(26,57,1)
(55,76,1)
(58,42,1)
(6,14,1)
(78,68,1)
(61,78,1)
(54,23,1)
(76,47,1)
(23,25,1)
(69,54,1)
(72,20,1)
(17,64,1)
(11,45,1)
(68,39,1)
(67,37,1)
(33,14,1)
(11,55,1)
(7,27,1)
(40,26,1)
(70,54,1)
(52,11,1)
(2,61,1)
(43,55,1)
(62,0,1)
(12,32,1)
(56,22,1)
(4,33,1)
(28,77,1)
(57,12,1)
(33,7,1)
(17,46,1)
(83,70,1)
(33,78,1)
(82,35,1)
(42,15,1)
(75,58,1)
(24,52,1)
(34,18,1)
(41,69,1)
(52,1,1)
(48,69,1)
(24,35,1)
(45,14,2)
(40,60,2)
(64,67,2)
(40,55,2)
(78,10,2)
(34,20,2)
(46,68,2)
(79,14,2)
(53,68,2)
(48,17,2)
(76,69,2)
(77,78,2)
(24,14,2)
(78,68,2)
(14,20,2)
(5,14,2)
(43,55,2)
(43,20,2)
(55,76,2)
(2,78,2)
(68,64,2)
(67,60,2)
(27,60,2)
(28,64,2)
(17,64,2)
(56,78,2)
(35,69,2)
(37,60,2)
(69,54,2)
(47,20,2)
(29,78,2)
(28,78,2)
(4,69,2)
(6,14,2)
(76,20,2)
(60,14,2)
(64,60,2)
(75,0,2)
(60,24,2)
(22,69,2)
(68,60,2)
(66,68,2)
(58,0,2)
(12,60,2)
(3,14,2)
(14,43,2)
(78,60,2)
(22,78,2)
(0,4,2)
(35,55,2)
(61,78,2)
(18,20,2)
(26,60,2)
(72,20,2)
(55,20,2)
(48,69,2)
(52,1,2)
(38,60,2)
(15,0,2)
(67,69,2)
(22,28,2)
(21,20,2)
(10,68,2)
(57,60,2)
(11,14,2)
(24,52,2)
(24,35,2)
(40,69,2)
(48,68,2)
(82,14,2)
(39,60,2)
(7,60,2)
(50,68,2)
(32,60,2)
(42,0,2)
(52,11,2)
(81,60,2)
(11,55,2)
(17,68,2)
(35,14,2)
(10,48,2)
(52,14,2)
-----------------------------------
(0,SYSTEM(data)
(1,int)
(2,dataLen)
(3,dataLen)
(4,SYSTEM(data)
(5,stdin)
(6,data)
(7,data[dataLen] = \\\'\\\\0\\\')
(8,)
(9,)
(10,data[dataLen-1] == \\\'\\\\n\\\')
(11,100-dataLen)
(12,printLine("fgets()
(13,if (SYSTEM(data)
(14,100-dataLen > 1)
(15,"command execution failed!")
(16,5)
(17,dataLen-1)
(18,100)
(19,0)
(20,globalFive==5)
(21,1)
(22,data[dataLen-1])
(23,FULL_COMMAND)
(24,fgets(data+dataLen, (int)
(25,data_buf)
(26,dataLen)
(27,\\\'\\\\0\\\')
(28,dataLen-1)
(29,data[dataLen-1] = \\\'\\\\0\\\')
(30,)
(31,data)
(32,"fgets()
(33,data)
(34,dataLen)
(35,data+dataLen)
(36,if (100-dataLen > 1)
(37,data)
(38,dataLen)
(39,0)
(40,data[dataLen])
(41,globalFive)
(42,printLine("command execution failed!")
(43,100-dataLen)
(44,if (fgets(data+dataLen, (int)
(45,dataLen)
(46,1)
(47,data)
(48,data[dataLen-1])
(49,dataLen)
(50,\\\'\\\\n\\\')
(51,if(globalFive==5)
(52,(int)
(53,data)
(54,data_buf[100] = FULL_COMMAND)
(55,dataLen = strlen(data)
(56,\\\'\\\\0\\\')
(57,data)
(58,1)
(59,data_buf)
(60,fgets(data+dataLen, (int)
(61,data)
(62,RET)
(63,)
(64,dataLen = strlen(data)
(65,)
(66,dataLen)
(67,strlen(data)
(68,dataLen > 0)
(69,data = data_buf)
(70,data)
(71,)
(72,dataLen)
(73,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(74,)
(75,exit(1)
(76,strlen(data)
(77,1)
(78,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(79,NULL)
(80,)
(81,dataLen)
(82,100)
(83,data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
