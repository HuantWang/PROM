-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_w32spawnl_45_bad()
CWE78_OS_Command_Injection__char_console_w32spawnl_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data;
CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data
CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData
CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(25,30,0)
(7,27,0)
(24,21,0)
(46,23,0)
(35,71,0)
(11,12,0)
(2,21,0)
(71,29,0)
(22,67,0)
(66,10,0)
(19,31,0)
(59,0,0)
(32,61,0)
(16,1,0)
(40,65,0)
(61,51,0)
(27,26,0)
(39,35,0)
(30,19,0)
(10,23,0)
(14,26,0)
(33,26,0)
(12,61,0)
(31,28,0)
(20,24,0)
(32,14,0)
(67,31,0)
(34,27,0)
(54,35,0)
(39,44,0)
(54,46,0)
(3,20,0)
(12,35,0)
(18,21,0)
(14,32,0)
(31,65,0)
(28,31,0)
(14,35,0)
(35,53,0)
(8,24,0)
(13,71,0)
(21,24,0)
(61,32,0)
(9,12,0)
(63,55,0)
(61,12,0)
(72,14,0)
(36,44,0)
(64,39,0)
(51,61,0)
(54,26,0)
(24,26,0)
(57,32,0)
(26,55,0)
(44,39,0)
(53,26,0)
(6,46,0)
(26,29,0)
(45,29,0)
(49,16,0)
(5,53,0)
(27,29,0)
(47,19,0)
(55,29,0)
(17,20,0)
(21,18,0)
(52,19,0)
(37,29,0)
(18,67,0)
(70,54,0)
(4,55,0)
(62,26,0)
(53,35,0)
(56,29,0)
(38,54,0)
(0,32,0)
(28,26,0)
(20,31,0)
(30,16,0)
(68,39,0)
(42,15,0)
(48,71,0)
(69,67,0)
(58,31,0)
(24,20,0)
(67,18,0)
(41,14,0)
(50,35,0)
(30,26,0)
(19,30,0)
(32,0,0)
(43,28,0)
(0,32,1)
(44,39,1)
(0,59,1)
(5,50,1)
(41,72,1)
(7,44,1)
(46,6,1)
(54,35,1)
(67,31,1)
(22,69,1)
(19,31,1)
(50,26,1)
(24,20,1)
(32,14,1)
(49,30,1)
(28,26,1)
(35,53,1)
(27,34,1)
(20,31,1)
(57,61,1)
(14,26,1)
(6,54,1)
(66,0,1)
(32,61,1)
(12,11,1)
(63,4,1)
(7,46,1)
(58,0,1)
(69,31,1)
(28,43,1)
(47,25,1)
(30,19,1)
(54,38,1)
(39,68,1)
(21,24,1)
(2,24,1)
(39,35,1)
(9,14,1)
(14,35,1)
(18,21,1)
(11,9,1)
(27,26,1)
(54,26,1)
(17,8,1)
(67,22,1)
(60,56,1)
(24,26,1)
(53,5,1)
(20,3,1)
(72,44,1)
(30,26,1)
(10,66,1)
(7,16,1)
(19,52,1)
(16,49,1)
(14,41,1)
(55,63,1)
(21,2,1)
(8,67,1)
(36,39,1)
(62,55,1)
(56,27,1)
(26,33,1)
(61,51,1)
(59,32,1)
(43,58,1)
(25,18,1)
(38,70,1)
(53,26,1)
(68,64,1)
(3,17,1)
(33,62,1)
(34,7,1)
(32,57,1)
(7,18,1)
(31,28,1)
(61,12,1)
(18,67,1)
(12,35,1)
(26,55,1)
(70,10,1)
(64,35,1)
(52,47,1)
(44,36,1)
(54,0,2)
(46,0,2)
(22,0,2)
(59,44,2)
(0,44,2)
(32,44,2)
(19,31,2)
(67,0,2)
(30,26,2)
(21,24,2)
(20,31,2)
(61,12,2)
(39,35,2)
(30,18,2)
(54,26,2)
(70,0,2)
(32,14,2)
(41,44,2)
(38,0,2)
(16,18,2)
(69,0,2)
(14,44,2)
(21,67,2)
(47,18,2)
(35,53,2)
(12,35,2)
(3,67,2)
(10,0,2)
(27,26,2)
(57,44,2)
(18,21,2)
(28,0,2)
(28,26,2)
(24,67,2)
(49,18,2)
(26,55,2)
(14,35,2)
(24,26,2)
(18,67,2)
(72,44,2)
(12,44,2)
(31,0,2)
(25,18,2)
(44,39,2)
(0,32,2)
(18,0,2)
(43,0,2)
(61,51,2)
(61,44,2)
(66,0,2)
(54,35,2)
(24,20,2)
(30,19,2)
(14,26,2)
(17,67,2)
(19,18,2)
(9,44,2)
(53,26,2)
(11,44,2)
(6,0,2)
(32,61,2)
(31,28,2)
(20,67,2)
(2,67,2)
(52,18,2)
(8,67,2)
(58,0,2)
(67,31,2)
-----------------------------------
(0,fgets(data+dataLen, (int)
(1,)
(2,\\\'\\\\n\\\')
(3,1)
(4,dataBuffer)
(5,data)
(6,\\\'\\\\0\\\')
(7,CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData)
(8,data)
(9,100)
(10,printLine("fgets()
(11,dataLen)
(12,100-dataLen)
(13,dataLen)
(14,data+dataLen)
(15,)
(16,data[dataLen-1] = \\\'\\\\0\\\')
(17,dataLen)
(18,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(19,dataLen-1)
(20,dataLen-1)
(21,data[dataLen-1] == \\\'\\\\n\\\')
(22,0)
(23,)
(24,data[dataLen-1])
(25,data)
(26,data = dataBuffer)
(27,CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data)
(28,strlen(data)
(29,)
(30,data[dataLen-1])
(31,dataLen = strlen(data)
(32,fgets(data+dataLen, (int)
(33,dataBuffer)
(34,data)
(35,dataLen = strlen(data)
(36,1)
(37,dataBuffer)
(38,dataLen)
(39,100-dataLen)
(40,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(41,dataLen)
(42,if (fgets(data+dataLen, (int)
(43,data)
(44,100-dataLen > 1)
(45,data)
(46,data[dataLen] = \\\'\\\\0\\\')
(47,dataLen)
(48,if (100-dataLen > 1)
(49,\\\'\\\\0\\\')
(50,dataLen)
(51,int)
(52,1)
(53,strlen(data)
(54,data[dataLen])
(55,dataBuffer[100] = COMMAND_ARG2)
(56,badSink()
(57,stdin)
(58,dataLen)
(59,NULL)
(60,RET)
(61,(int)
(62,data)
(63,COMMAND_ARG2)
(64,100)
(65,)
(66,"fgets()
(67,dataLen > 0)
(68,dataLen)
(69,dataLen)
(70,data)
(71,)
(72,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
