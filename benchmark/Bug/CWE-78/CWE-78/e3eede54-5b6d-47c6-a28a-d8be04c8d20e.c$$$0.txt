-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnlp_07_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(staticFive==5)
    {
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
    }
    /* spawnlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
34,37
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
50,53
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
67,70
67,71
68,69
70,71
70,72
71,72
73,74
75,76
77,78
77,79
78,79
78,80
80,81
83,84
84,85
84,86
84,87
84,88
84,89
84,90
84,91
85,86
87,88
89,90
91,92
93,94
95,96
97,98
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,38,40,44,46,49,51,52,56,58,62,64,69,72,74,76,79,81,82,86,88,90,92,94,96,98
-----computeFrom-----
23,24
23,25
29,30
29,31
60,61
60,62
70,71
70,72
77,78
77,79
78,79
78,80
-----guardedBy-----
62,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnlp_07_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(staticFive==5)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    /* spawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__char_environment_w32_spawnlp_07_bad()
CWE78_OS_Command_Injection__char_environment_w32_spawnlp_07_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(staticFive==5)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    /* spawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(staticFive==5)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnlp
_spawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(31,35,0)
(25,9,0)
(34,15,0)
(14,36,0)
(13,2,0)
(34,3,0)
(3,34,0)
(45,35,0)
(20,41,0)
(30,15,0)
(38,2,0)
(15,43,0)
(10,3,0)
(27,29,0)
(11,13,0)
(3,13,0)
(0,21,0)
(1,33,0)
(43,21,0)
(3,19,0)
(7,10,0)
(28,32,0)
(16,32,0)
(5,33,0)
(12,3,0)
(9,29,0)
(17,32,0)
(8,9,0)
(39,32,0)
(40,32,0)
(2,13,0)
(43,15,0)
(32,29,0)
(46,32,0)
(3,10,0)
(10,35,0)
(42,41,0)
(18,34,0)
(26,36,0)
(22,34,0)
(34,21,0)
(41,4,0)
(35,10,0)
(44,29,0)
(47,29,0)
(21,9,0)
(13,41,0)
(21,29,0)
(6,21,0)
(24,43,0)
(36,13,0)
(35,15,0)
(37,41,0)
(15,41,0)
(35,15,1)
(36,26,1)
(1,21,1)
(24,30,1)
(38,11,1)
(39,46,1)
(12,34,1)
(43,21,1)
(21,0,1)
(34,21,1)
(33,5,1)
(18,36,1)
(34,15,1)
(11,15,1)
(28,16,1)
(3,34,1)
(7,12,1)
(35,31,1)
(21,9,1)
(16,40,1)
(46,17,1)
(2,38,1)
(23,32,1)
(5,1,1)
(6,9,1)
(15,43,1)
(40,39,1)
(14,13,1)
(9,8,1)
(0,6,1)
(17,36,1)
(17,33,1)
(10,35,1)
(34,22,1)
(32,28,1)
(3,10,1)
(17,3,1)
(43,24,1)
(36,13,1)
(22,18,1)
(30,33,1)
(31,45,1)
(26,14,1)
(3,13,1)
(13,2,1)
(45,7,1)
(8,25,1)
(13,2,2)
(34,36,2)
(10,36,2)
(7,36,2)
(35,36,2)
(43,21,2)
(11,33,2)
(34,21,2)
(30,33,2)
(24,33,2)
(43,33,2)
(10,35,2)
(21,9,2)
(22,36,2)
(3,34,2)
(31,36,2)
(38,33,2)
(36,13,2)
(3,10,2)
(26,33,2)
(3,36,2)
(12,36,2)
(2,33,2)
(13,33,2)
(36,33,2)
(15,33,2)
(45,36,2)
(35,15,2)
(34,15,2)
(14,33,2)
(15,43,2)
(3,13,2)
(18,36,2)
-----------------------------------
(0,dataBuffer)
(1,staticFive)
(2,GETENV(ENV_VARIABLE)
(3,strncat(data+dataLen, environment, 100-dataLen-1)
(4,)
(5,5)
(6,data)
(7,100)
(8,COMMAND_ARG2)
(9,dataBuffer[100] = COMMAND_ARG2)
(10,100-dataLen-1)
(11,environment)
(12,environment)
(13,* environment = GETENV(ENV_VARIABLE)
(14,environment)
(15,dataLen = strlen(data)
(16,COMMAND_ARG3)
(17,_P_WAIT)
(18,data)
(19,)
(20,if (environment != NULL)
(21,data = dataBuffer)
(22,dataLen)
(23,RET)
(24,data)
(25,dataBuffer)
(26,NULL)
(27,dataBuffer)
(28,NULL)
(29,)
(30,dataLen)
(31,1)
(32,_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(33,staticFive==5)
(34,data+dataLen)
(35,dataLen-1)
(36,environment != NULL)
(37,environment)
(38,ENV_VARIABLE)
(39,COMMAND_INT)
(40,COMMAND_ARG1)
(41,)
(42,dataLen)
(43,strlen(data)
(44,data)
(45,dataLen)
(46,COMMAND_INT)
(47,if(staticFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
