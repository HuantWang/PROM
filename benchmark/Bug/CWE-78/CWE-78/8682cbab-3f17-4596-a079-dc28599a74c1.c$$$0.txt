-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_w32_spawnlp_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        char * data = *dataPtr1;
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* spawnlp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
81,82
81,83
82,83
82,84
83,84
83,85
85,86
88,89
88,90
89,90
90,91
90,92
91,92
93,94
93,95
93,96
94,95
96,97
99,100
99,101
100,101
100,102
101,102
103,104
105,106
105,107
106,107
106,108
107,108
107,109
108,109
108,110
108,111
108,112
109,110
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
120,121
121,122
121,123
123,124
125,126
127,128
129,130
129,131
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
137,139
138,139
140,141
143,144
144,145
144,146
145,146
147,148
149,150
150,151
150,152
151,152
152,153
154,155
156,157
156,158
157,158
158,159
158,160
160,161
160,162
160,163
163,164
164,165
165,166
167,168
168,169
168,170
168,171
168,172
168,173
168,174
168,175
169,170
171,172
173,174
175,176
177,178
179,180
181,182
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,77,79,80,84,86,87,92,95,97,98,102,104,110,113,115,118,119,122,124,126,128,133,134,139,141,142,146,148,153,155,159,161,162,166,170,172,174,176,178,180,182
-----computeFrom-----
45,46
45,47
82,83
82,84
83,84
83,85
90,91
90,92
100,101
100,102
107,108
107,109
111,112
111,113
121,122
121,123
136,137
136,138
150,151
150,152
-----guardedBy-----
86,141
104,128
102,148
113,139
124,141
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_w32_spawnlp_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* spawnlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
void
CWE78_OS_Command_Injection__char_file_w32_spawnlp_32_bad()
CWE78_OS_Command_Injection__char_file_w32_spawnlp_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* spawnlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* spawnlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnlp
_spawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(20,75,0)
(73,57,0)
(17,40,0)
(28,18,0)
(80,14,0)
(87,6,0)
(88,61,0)
(59,27,0)
(67,75,0)
(22,65,0)
(40,5,0)
(50,74,0)
(35,39,0)
(24,78,0)
(28,54,0)
(55,60,0)
(86,64,0)
(17,18,0)
(65,7,0)
(89,86,0)
(57,43,0)
(60,54,0)
(74,67,0)
(7,78,0)
(18,39,0)
(39,24,0)
(69,78,0)
(18,7,0)
(31,60,0)
(0,22,0)
(14,6,0)
(23,57,0)
(15,67,0)
(4,19,0)
(8,18,0)
(25,27,0)
(46,28,0)
(19,54,0)
(66,64,0)
(14,78,0)
(72,79,0)
(70,78,0)
(54,44,0)
(54,41,0)
(16,84,0)
(27,59,0)
(79,40,0)
(83,68,0)
(48,24,0)
(27,43,0)
(30,14,0)
(36,16,0)
(65,18,0)
(1,28,0)
(26,78,0)
(5,40,0)
(71,84,0)
(13,19,0)
(63,57,0)
(5,2,0)
(3,41,0)
(42,66,0)
(17,54,0)
(62,17,0)
(6,78,0)
(81,40,0)
(58,44,0)
(10,19,0)
(11,78,0)
(85,54,0)
(41,7,0)
(77,10,0)
(68,67,0)
(34,65,0)
(22,24,0)
(40,79,0)
(2,5,0)
(40,17,0)
(32,12,0)
(28,66,0)
(39,18,0)
(52,12,0)
(67,74,0)
(45,74,0)
(19,10,0)
(59,84,0)
(82,41,0)
(44,54,0)
(44,18,0)
(53,17,0)
(51,24,0)
(43,78,0)
(29,57,0)
(84,78,0)
(12,67,0)
(84,16,0)
(38,7,0)
(40,67,0)
(9,43,0)
(68,61,0)
(21,41,0)
(56,6,0)
(37,59,0)
(49,57,0)
(76,48,0)
(24,48,0)
(5,60,0)
(47,57,0)
(60,5,0)
(65,18,1)
(10,19,1)
(0,12,1)
(0,68,1)
(16,36,1)
(79,40,1)
(79,72,1)
(25,65,1)
(31,17,1)
(15,10,1)
(24,48,1)
(62,53,1)
(22,0,1)
(59,37,1)
(10,77,1)
(48,76,1)
(35,8,1)
(81,5,1)
(33,57,1)
(85,18,1)
(14,6,1)
(57,47,1)
(28,18,1)
(54,44,1)
(49,63,1)
(18,39,1)
(40,67,1)
(67,74,1)
(45,50,1)
(50,15,1)
(44,58,1)
(39,24,1)
(34,22,1)
(19,54,1)
(72,40,1)
(28,1,1)
(83,79,1)
(27,59,1)
(80,6,1)
(32,52,1)
(19,13,1)
(40,17,1)
(74,45,1)
(87,56,1)
(58,85,1)
(4,54,1)
(63,23,1)
(47,29,1)
(59,84,1)
(42,28,1)
(40,81,1)
(37,25,1)
(17,62,1)
(8,14,1)
(89,79,1)
(83,66,1)
(46,86,1)
(76,51,1)
(12,32,1)
(1,46,1)
(77,19,1)
(5,60,1)
(53,12,1)
(22,24,1)
(17,54,1)
(5,2,1)
(12,67,1)
(13,4,1)
(39,35,1)
(66,42,1)
(28,54,1)
(44,18,1)
(55,31,1)
(6,87,1)
(84,16,1)
(0,10,1)
(86,89,1)
(36,71,1)
(29,49,1)
(23,73,1)
(60,55,1)
(52,67,1)
(68,67,1)
(30,80,1)
(68,83,1)
(73,27,1)
(17,18,1)
(14,30,1)
(60,54,1)
(65,34,1)
(40,5,1)
(56,84,1)
(71,24,1)
(28,54,2)
(74,10,2)
(79,40,2)
(40,12,2)
(59,84,2)
(18,39,2)
(65,18,2)
(46,79,2)
(44,18,2)
(45,10,2)
(79,12,2)
(60,54,2)
(81,12,2)
(17,12,2)
(31,12,2)
(40,17,2)
(22,24,2)
(67,74,2)
(89,79,2)
(66,79,2)
(67,10,2)
(84,16,2)
(5,2,2)
(39,24,2)
(83,12,2)
(54,44,2)
(5,60,2)
(60,12,2)
(5,12,2)
(19,54,2)
(52,10,2)
(14,6,2)
(10,19,2)
(28,79,2)
(62,12,2)
(27,59,2)
(12,67,2)
(1,79,2)
(42,79,2)
(15,10,2)
(72,12,2)
(50,10,2)
(24,48,2)
(40,5,2)
(55,12,2)
(17,54,2)
(40,67,2)
(68,67,2)
(68,12,2)
(32,10,2)
(12,10,2)
(86,79,2)
(17,18,2)
(28,18,2)
(53,12,2)
-----------------------------------
(0,dataPtr1)
(1,dataLen)
(2,int)
(3,dataLen)
(4,100)
(5,(int)
(6,dataBuffer[100] = COMMAND_ARG2)
(7,)
(8,data)
(9,data)
(10,100-dataLen > 1)
(11,data)
(12,pFile != NULL)
(13,dataLen)
(14,data = dataBuffer)
(15,pFile)
(16,&data)
(17,data+dataLen)
(18,* data = *dataPtr1)
(19,100-dataLen)
(20,if (pFile != NULL)
(21,pFile)
(22,*dataPtr1)
(23,COMMAND_INT)
(24,* *dataPtr1 = &data)
(25,data)
(26,dataBuffer)
(27,* data = *dataPtr2)
(28,data[dataLen])
(29,COMMAND_ARG3)
(30,dataBuffer)
(31,100)
(32,NULL)
(33,RET)
(34,data)
(35,dataPtr1)
(36,data)
(37,dataPtr2)
(38,data)
(39,*dataPtr1)
(40,fgets(data+dataLen, (int)
(41,)
(42,\\\'\\\\0\\\')
(43,)
(44,strlen(data)
(45,"r")
(46,data)
(47,NULL)
(48,&data)
(49,COMMAND_ARG1)
(50,FILENAME)
(51,dataPtr1)
(52,pFile)
(53,data)
(54,dataLen = strlen(data)
(55,dataLen)
(56,dataBuffer)
(57,_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(58,data)
(59,*dataPtr2)
(60,100-dataLen)
(61,)
(62,dataLen)
(63,COMMAND_INT)
(64,)
(65,*dataPtr1 = data)
(66,data[dataLen] = \\\'\\\\0\\\')
(67,pFile = fopen(FILENAME, "r")
(68,fclose(pFile)
(69,dataPtr2)
(70,dataPtr1)
(71,dataPtr2)
(72,NULL)
(73,_P_WAIT)
(74,fopen(FILENAME, "r")
(75,)
(76,data)
(77,1)
(78,)
(79,fgets(data+dataLen, (int)
(80,data)
(81,pFile)
(82,if (100-dataLen > 1)
(83,pFile)
(84,* *dataPtr2 = &data)
(85,dataLen)
(86,printLine("fgets()
(87,COMMAND_ARG2)
(88,if (fgets(data+dataLen, (int)
(89,"fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
