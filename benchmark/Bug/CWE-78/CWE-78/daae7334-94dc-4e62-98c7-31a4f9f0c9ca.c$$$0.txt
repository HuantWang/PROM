-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_64_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnvp_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_64_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnvp_64_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnvp_64_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnvp_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_spawnvp_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_spawnvp_64b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnvp_64b_badSink
&data
data
data
-----joern-----
(46,12,0)
(23,10,0)
(9,46,0)
(12,7,0)
(44,5,0)
(35,3,0)
(42,49,0)
(32,28,0)
(26,19,0)
(43,70,0)
(67,70,0)
(40,70,0)
(70,2,0)
(12,46,0)
(7,36,0)
(44,23,0)
(21,28,0)
(61,2,0)
(14,3,0)
(48,64,0)
(66,10,0)
(40,68,0)
(51,68,0)
(0,61,0)
(17,41,0)
(68,28,0)
(23,70,0)
(64,67,0)
(58,41,0)
(38,6,0)
(56,70,0)
(28,2,0)
(34,29,0)
(6,5,0)
(19,70,0)
(36,7,0)
(15,58,0)
(6,38,0)
(59,70,0)
(7,12,0)
(70,3,0)
(18,22,0)
(1,2,0)
(68,50,0)
(51,7,0)
(49,22,0)
(27,19,0)
(40,17,0)
(19,12,0)
(71,34,0)
(12,19,0)
(53,59,0)
(37,44,0)
(8,12,0)
(39,40,0)
(47,17,0)
(16,45,0)
(50,70,0)
(62,40,0)
(10,23,0)
(64,5,0)
(50,68,0)
(11,67,0)
(23,44,0)
(10,38,0)
(0,70,0)
(5,59,0)
(67,64,0)
(19,68,0)
(67,34,0)
(63,6,0)
(25,68,0)
(3,2,0)
(5,52,0)
(4,5,0)
(7,51,0)
(55,23,0)
(13,51,0)
(22,68,0)
(60,52,0)
(65,0,0)
(57,2,0)
(61,0,0)
(20,6,0)
(54,51,0)
(69,50,0)
(33,64,0)
(31,22,0)
(59,5,0)
(22,49,0)
(24,44,0)
(38,10,0)
(50,70,1)
(26,49,1)
(12,8,1)
(0,70,1)
(7,36,1)
(17,47,1)
(61,0,1)
(34,71,1)
(23,44,1)
(65,38,1)
(67,64,1)
(42,22,1)
(9,12,1)
(40,62,1)
(71,67,1)
(12,19,1)
(40,68,1)
(65,17,1)
(43,3,1)
(24,37,1)
(6,20,1)
(3,35,1)
(59,70,1)
(49,42,1)
(51,54,1)
(70,3,1)
(33,48,1)
(58,15,1)
(51,68,1)
(70,56,1)
(22,68,1)
(0,65,1)
(10,23,1)
(22,31,1)
(30,61,1)
(31,18,1)
(7,51,1)
(64,5,1)
(27,26,1)
(56,43,1)
(19,70,1)
(54,13,1)
(11,38,1)
(19,68,1)
(46,9,1)
(39,58,1)
(6,5,1)
(55,6,1)
(67,70,1)
(12,7,1)
(63,5,1)
(4,46,1)
(35,14,1)
(15,46,1)
(13,19,1)
(8,7,1)
(44,5,1)
(49,22,1)
(37,55,1)
(59,53,1)
(50,69,1)
(5,59,1)
(65,49,1)
(18,68,1)
(20,63,1)
(25,70,1)
(47,40,1)
(46,12,1)
(40,70,1)
(48,11,1)
(10,66,1)
(64,33,1)
(65,34,1)
(53,4,1)
(68,50,1)
(69,25,1)
(62,39,1)
(38,10,1)
(66,23,1)
(19,27,1)
(38,6,1)
(23,70,1)
(44,24,1)
(70,3,2)
(38,46,2)
(0,70,2)
(64,5,2)
(5,59,2)
(53,46,2)
(7,51,2)
(59,70,2)
(67,64,2)
(17,46,2)
(40,46,2)
(66,6,2)
(12,19,2)
(26,49,2)
(13,49,2)
(44,6,2)
(19,49,2)
(5,46,2)
(46,49,2)
(15,46,2)
(23,70,2)
(38,6,2)
(27,49,2)
(22,68,2)
(19,70,2)
(12,7,2)
(62,46,2)
(8,49,2)
(46,12,2)
(38,10,2)
(10,23,2)
(59,46,2)
(37,6,2)
(44,5,2)
(48,38,2)
(40,70,2)
(24,6,2)
(49,22,2)
(51,68,2)
(9,49,2)
(68,50,2)
(19,68,2)
(23,6,2)
(4,46,2)
(61,0,2)
(51,49,2)
(40,68,2)
(67,38,2)
(11,38,2)
(54,49,2)
(6,46,2)
(55,6,2)
(7,49,2)
(67,70,2)
(33,38,2)
(12,49,2)
(71,38,2)
(63,46,2)
(39,46,2)
(6,5,2)
(64,38,2)
(10,6,2)
(50,70,2)
(34,38,2)
(7,36,2)
(58,46,2)
(23,44,2)
(47,46,2)
(20,46,2)
-----------------------------------
(0,&data)
(1,dataBuffer)
(2,)
(3,dataBuffer[100] = COMMAND_ARG2)
(4,dataLen)
(5,dataLen = strlen(data)
(6,dataLen > 0)
(7,(int)
(8,stdin)
(9,NULL)
(10,data[dataLen-1] == \\\'\\\\n\\\')
(11,data)
(12,fgets(data+dataLen, (int)
(13,100)
(14,dataBuffer)
(15,"fgets()
(16,if (fgets(data+dataLen, (int)
(17,data[dataLen] = \\\'\\\\0\\\')
(18,100)
(19,data+dataLen)
(20,0)
(21,dataLen)
(22,100-dataLen)
(23,data[dataLen-1])
(24,1)
(25,dataLen)
(26,data)
(27,dataLen)
(28,)
(29,)
(30,RET)
(31,dataLen)
(32,if (100-dataLen > 1)
(33,1)
(34,data[dataLen-1] = \\\'\\\\0\\\')
(35,COMMAND_ARG2)
(36,int)
(37,dataLen)
(38,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(39,data)
(40,data[dataLen])
(41,)
(42,1)
(43,data)
(44,dataLen-1)
(45,)
(46,fgets(data+dataLen, (int)
(47,\\\'\\\\0\\\')
(48,dataLen)
(49,100-dataLen > 1)
(50,strlen(data)
(51,100-dataLen)
(52,)
(53,data)
(54,dataLen)
(55,data)
(56,dataBuffer)
(57,data)
(58,printLine("fgets()
(59,strlen(data)
(60,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,CWE78_OS_Command_Injection__char_console_w32_spawnvp_64b_badSink(&data)
(62,dataLen)
(63,dataLen)
(64,dataLen-1)
(65,data)
(66,\\\'\\\\n\\\')
(67,data[dataLen-1])
(68,dataLen = strlen(data)
(69,data)
(70,data = dataBuffer)
(71,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
