-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(35,22,0)
(56,44,0)
(47,17,0)
(5,38,0)
(30,36,0)
(18,0,0)
(18,33,0)
(50,36,0)
(55,19,0)
(36,50,0)
(29,24,0)
(47,39,0)
(22,53,0)
(60,31,0)
(34,40,0)
(7,25,0)
(15,38,0)
(21,24,0)
(12,47,0)
(44,54,0)
(31,36,0)
(41,0,0)
(40,63,0)
(13,56,0)
(50,26,0)
(6,33,0)
(14,58,0)
(47,3,0)
(37,0,0)
(57,28,0)
(19,39,0)
(61,30,0)
(49,58,0)
(54,44,0)
(52,8,0)
(10,55,0)
(43,41,0)
(44,20,0)
(3,47,0)
(36,30,0)
(48,17,0)
(24,40,0)
(24,0,0)
(59,25,0)
(36,31,0)
(19,56,0)
(0,22,0)
(16,44,0)
(31,39,0)
(38,53,0)
(3,44,0)
(25,59,0)
(56,19,0)
(42,3,0)
(46,22,0)
(55,59,0)
(58,0,0)
(38,39,0)
(62,19,0)
(59,55,0)
(11,36,0)
(17,32,0)
(9,20,0)
(4,18,0)
(41,39,0)
(1,3,0)
(19,55,0)
(0,41,0)
(25,44,0)
(26,50,0)
(31,0,0)
(28,63,0)
(23,18,0)
(45,25,0)
(54,39,0)
(33,18,0)
(27,54,0)
(2,31,0)
(51,56,0)
(50,58,0)
(58,50,0)
(24,39,0)
(1,42,1)
(44,54,1)
(18,4,1)
(45,44,1)
(6,18,1)
(21,29,1)
(19,39,1)
(2,33,1)
(24,0,1)
(56,44,1)
(61,36,1)
(58,0,1)
(18,0,1)
(5,17,1)
(54,27,1)
(31,60,1)
(47,39,1)
(33,18,1)
(41,39,1)
(25,44,1)
(15,38,1)
(24,39,1)
(27,16,1)
(43,37,1)
(31,0,1)
(29,28,1)
(51,13,1)
(23,0,1)
(14,49,1)
(28,57,1)
(36,31,1)
(38,39,1)
(38,5,1)
(13,62,1)
(16,30,1)
(10,19,1)
(50,58,1)
(33,6,1)
(42,12,1)
(36,50,1)
(3,44,1)
(59,55,1)
(11,50,1)
(57,30,1)
(30,61,1)
(17,48,1)
(48,47,1)
(41,43,1)
(54,39,1)
(62,25,1)
(59,25,1)
(3,1,1)
(24,21,1)
(30,36,1)
(0,41,1)
(50,26,1)
(34,24,1)
(19,56,1)
(36,11,1)
(5,33,1)
(12,59,1)
(31,39,1)
(5,59,1)
(55,19,1)
(5,40,1)
(60,2,1)
(7,45,1)
(55,10,1)
(49,31,1)
(47,3,1)
(56,51,1)
(58,14,1)
(40,34,1)
(4,23,1)
(25,7,1)
(25,44,2)
(27,30,2)
(31,0,2)
(57,30,2)
(36,31,2)
(15,38,2)
(59,30,2)
(36,50,2)
(3,44,2)
(11,33,2)
(14,33,2)
(50,26,2)
(50,33,2)
(3,59,2)
(59,55,2)
(49,33,2)
(47,39,2)
(30,36,2)
(29,30,2)
(31,33,2)
(50,58,2)
(51,25,2)
(58,33,2)
(47,59,2)
(41,39,2)
(24,39,2)
(12,59,2)
(1,59,2)
(30,33,2)
(16,30,2)
(31,39,2)
(2,33,2)
(44,54,2)
(13,25,2)
(24,30,2)
(19,39,2)
(44,30,2)
(47,3,2)
(24,0,2)
(38,39,2)
(19,25,2)
(42,59,2)
(58,0,2)
(0,41,2)
(10,25,2)
(62,25,2)
(55,25,2)
(36,33,2)
(55,19,2)
(40,30,2)
(7,30,2)
(21,30,2)
(56,25,2)
(25,30,2)
(48,59,2)
(60,33,2)
(18,0,2)
(17,59,2)
(54,30,2)
(19,56,2)
(34,30,2)
(33,18,2)
(59,25,2)
(45,30,2)
(56,44,2)
(61,33,2)
(28,30,2)
(54,39,2)
-----------------------------------
(0,dataLen = strlen(data)
(1,1)
(2,data)
(3,dataLen-1)
(4,dataLen)
(5,data)
(6,1)
(7,0)
(8,)
(9,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(10,\\\'\\\\n\\\')
(11,stdin)
(12,data)
(13,dataLen)
(14,dataLen)
(15,RET)
(16,dataLen)
(17,data[dataLen-1] = \\\'\\\\0\\\')
(18,100-dataLen)
(19,data[dataLen-1])
(20,)
(21,dataLen)
(22,)
(23,100)
(24,data[dataLen])
(25,dataLen > 0)
(26,int)
(27,data)
(28,printLine("fgets()
(29,data)
(30,fgets(data+dataLen, (int)
(31,data+dataLen)
(32,)
(33,100-dataLen > 1)
(34,\\\'\\\\0\\\')
(35,if (100-dataLen > 1)
(36,fgets(data+dataLen, (int)
(37,dataLen)
(38,return data;)
(39,char * data)
(40,data[dataLen] = \\\'\\\\0\\\')
(41,strlen(data)
(42,dataLen)
(43,data)
(44,dataLen = strlen(data)
(45,dataLen)
(46,dataLen)
(47,data[dataLen-1])
(48,\\\'\\\\0\\\')
(49,100)
(50,(int)
(51,1)
(52,if (fgets(data+dataLen, (int)
(53,)
(54,strlen(data)
(55,data[dataLen-1] == \\\'\\\\n\\\')
(56,dataLen-1)
(57,"fgets()
(58,100-dataLen)
(59,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(60,dataLen)
(61,NULL)
(62,data)
(63,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
