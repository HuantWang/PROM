-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_bad()
{
    wchar_t * data;
    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_structType myStruct;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    myStruct.structFirst = data;
    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67b_badSink(myStruct);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
49,50
49,51
51,52
54,55
55,56
55,57
55,58
56,57
56,58
57,58
57,59
57,60
57,61
58,59
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
70,71
70,72
72,73
74,75
76,77
78,79
78,80
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
114,116
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
122,124
123,124
125,126
128,129
129,130
129,131
130,131
130,132
131,132
134,135
136,137
137,138
137,139
138,139
140,141
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,38,40,44,46,50,52,53,59,62,64,67,68,71,73,75,77,82,85,87,92,93,97,100,101,102,108,111,112,113,118,119,124,126,127,132,133,135,139,141
-----computeFrom-----
29,30
29,31
48,49
48,50
49,50
49,51
56,57
56,58
60,61
60,62
70,71
70,72
80,81
80,82
89,90
89,91
90,91
90,92
94,95
94,96
98,99
98,100
105,106
105,107
109,110
109,111
121,122
121,123
129,130
129,131
-----guardedBy-----
52,126
62,108
73,111
97,108
100,111
-----guardedByNegation-----
62,124
73,126
-----lastLexicalUse-----
62,124
73,126
-----jump-----
62,124
73,126
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_bad(){    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_structType myStruct;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    myStruct.structFirst = data;    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67b_badSink(myStruct);}
void
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_bad()
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_bad
{    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_structType myStruct;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    myStruct.structFirst = data;    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67b_badSink(myStruct);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_structType myStruct;
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_structType myStruct;
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_structType
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67_structType
myStruct
myStruct
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
myStruct.structFirst = data;
myStruct.structFirst = data
myStruct.structFirst
myStruct
myStruct
structFirst
data
data
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67b_badSink(myStruct);
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67b_badSink(myStruct)
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67b_badSink
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67b_badSink
myStruct
myStruct
-----joern-----
(32,38,0)
(23,12,0)
(48,9,0)
(11,42,0)
(54,37,0)
(6,11,0)
(19,50,0)
(42,26,0)
(16,26,0)
(45,34,0)
(35,21,0)
(38,12,0)
(26,12,0)
(36,22,0)
(31,17,0)
(46,8,0)
(28,3,0)
(13,0,0)
(8,44,0)
(6,26,0)
(37,33,0)
(44,8,0)
(18,26,0)
(3,2,0)
(25,22,0)
(22,12,0)
(1,10,0)
(37,54,0)
(54,6,0)
(17,11,0)
(0,54,0)
(7,40,0)
(33,37,0)
(11,34,0)
(39,11,0)
(8,2,0)
(41,17,0)
(29,44,0)
(51,6,0)
(24,26,0)
(40,18,0)
(30,40,0)
(14,6,0)
(6,54,0)
(5,21,0)
(20,54,0)
(34,12,0)
(26,22,0)
(43,12,0)
(47,12,0)
(44,26,0)
(18,12,0)
(21,10,0)
(17,37,0)
(53,42,0)
(4,34,0)
(50,9,0)
(27,18,0)
(49,15,0)
(37,17,0)
(21,11,0)
(42,11,0)
(10,21,0)
(54,0,0)
(51,14,1)
(26,22,1)
(37,17,1)
(32,18,1)
(54,37,1)
(42,53,1)
(13,54,1)
(6,11,1)
(31,41,1)
(1,21,1)
(30,48,1)
(35,5,1)
(24,16,1)
(46,0,1)
(10,1,1)
(29,46,1)
(17,31,1)
(44,29,1)
(11,42,1)
(38,32,1)
(44,26,1)
(50,19,1)
(30,28,1)
(18,27,1)
(20,37,1)
(28,8,1)
(41,6,1)
(30,10,1)
(53,39,1)
(18,26,1)
(54,20,1)
(22,25,1)
(26,24,1)
(39,26,1)
(16,22,1)
(14,10,1)
(52,38,1)
(10,21,1)
(19,0,1)
(25,36,1)
(0,13,1)
(54,6,1)
(17,11,1)
(5,11,1)
(21,35,1)
(42,26,1)
(37,33,1)
(6,51,1)
(0,54,1)
(21,11,1)
(27,40,1)
(7,30,1)
(8,44,1)
(40,7,1)
(48,50,1)
(6,26,1)
(51,10,2)
(31,10,2)
(44,0,2)
(54,6,2)
(6,11,2)
(18,26,2)
(19,0,2)
(46,0,2)
(37,10,2)
(11,42,2)
(37,33,2)
(44,26,2)
(0,10,2)
(50,0,2)
(20,10,2)
(26,22,2)
(6,10,2)
(8,0,2)
(41,10,2)
(21,11,2)
(48,0,2)
(6,26,2)
(17,10,2)
(54,37,2)
(42,26,2)
(28,0,2)
(10,21,2)
(0,54,2)
(8,44,2)
(17,11,2)
(29,0,2)
(14,10,2)
(13,10,2)
(54,10,2)
(37,17,2)
-----------------------------------
(0,fgetws(data+dataLen, (int)
(1,1)
(2,)
(3,)
(4,dataLen)
(5,100)
(6,data+dataLen)
(7,structFirst)
(8,dataLen = wcslen(data)
(9,)
(10,100-dataLen > 1)
(11,dataLen = wcslen(data)
(12,)
(13,NULL)
(14,data)
(15,)
(16,data)
(17,100-dataLen)
(18,myStruct.structFirst = data)
(19,"fgetws()
(20,stdin)
(21,100-dataLen)
(22,dataBuffer[100] = COMMAND_ARG2)
(23,data)
(24,dataBuffer)
(25,COMMAND_ARG2)
(26,data = dataBuffer)
(27,data)
(28,\\\'\\\\0\\\')
(29,data)
(30,myStruct)
(31,dataLen)
(32,myStruct)
(33,int)
(34,)
(35,dataLen)
(36,dataBuffer)
(37,(int)
(38,CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_67b_badSink(myStruct)
(39,dataLen)
(40,myStruct.structFirst)
(41,100)
(42,wcslen(data)
(43,dataBuffer)
(44,wcslen(data)
(45,if (100-dataLen > 1)
(46,dataLen)
(47,myStruct)
(48,\\\'\\\\0\\\')
(49,if (fgetws(data+dataLen, (int)
(50,printLine("fgetws()
(51,dataLen)
(52,RET)
(53,data)
(54,fgetws(data+dataLen, (int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
