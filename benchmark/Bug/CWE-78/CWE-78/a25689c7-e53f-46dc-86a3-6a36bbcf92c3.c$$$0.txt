-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
36,38
37,38
37,39
38,39
38,40
40,41
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
48,51
49,50
51,52
54,55
54,56
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
62,63
62,64
63,64
63,65
63,66
63,67
64,65
66,67
66,68
67,68
69,70
71,72
71,73
72,73
72,74
75,76
76,77
76,78
78,79
80,81
82,83
84,85
84,86
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
95,96
98,99
99,100
99,101
100,101
102,103
104,105
105,106
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,39,41,42,47,50,52,53,57,59,65,68,70,73,74,77,79,81,83,88,89,94,96,97,101,103,106
-----computeFrom-----
37,38
37,39
38,39
38,40
45,46
45,47
55,56
55,57
62,63
62,64
66,67
66,68
76,77
76,78
91,92
91,93
-----guardedBy-----
41,96
59,83
57,103
68,94
79,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
badStatic
badStatic
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(6,31,0)
(54,1,0)
(22,30,0)
(21,7,0)
(36,22,0)
(14,17,0)
(6,16,0)
(0,22,0)
(46,47,0)
(40,48,0)
(7,41,0)
(43,16,0)
(16,6,0)
(33,48,0)
(47,22,0)
(54,12,0)
(1,17,0)
(17,10,0)
(52,0,0)
(10,41,0)
(53,14,0)
(8,39,0)
(31,6,0)
(12,54,0)
(1,54,0)
(5,22,0)
(35,47,0)
(28,42,0)
(24,14,0)
(39,3,0)
(54,6,0)
(37,53,0)
(25,33,0)
(4,40,0)
(16,41,0)
(18,16,0)
(10,17,0)
(9,6,0)
(51,0,0)
(44,1,0)
(11,30,0)
(19,17,0)
(32,41,0)
(23,39,0)
(50,10,0)
(6,54,0)
(26,14,0)
(2,32,0)
(27,31,0)
(13,32,0)
(5,42,0)
(17,39,0)
(49,7,0)
(20,39,0)
(7,29,0)
(6,22,0)
(32,17,0)
(34,1,0)
(45,29,0)
(22,47,0)
(32,40,0)
(15,5,0)
(14,53,0)
(16,17,0)
(16,18,1)
(2,33,1)
(34,16,1)
(51,22,1)
(46,36,1)
(9,54,1)
(6,9,1)
(7,49,1)
(10,41,1)
(50,19,1)
(31,6,1)
(15,31,1)
(5,22,1)
(6,54,1)
(21,7,1)
(37,14,1)
(1,44,1)
(25,31,1)
(49,5,1)
(54,12,1)
(4,32,1)
(6,22,1)
(14,24,1)
(49,0,1)
(47,35,1)
(22,47,1)
(32,17,1)
(36,53,1)
(53,37,1)
(18,43,1)
(54,1,1)
(6,16,1)
(32,13,1)
(16,41,1)
(16,17,1)
(53,14,1)
(7,41,1)
(14,17,1)
(27,6,1)
(13,2,1)
(52,51,1)
(26,17,1)
(44,34,1)
(32,41,1)
(49,53,1)
(0,52,1)
(5,15,1)
(19,38,1)
(31,27,1)
(10,50,1)
(33,25,1)
(15,40,1)
(0,22,1)
(24,26,1)
(49,38,1)
(1,17,1)
(35,46,1)
(43,0,1)
(17,10,1)
(40,4,1)
(2,31,2)
(6,0,2)
(37,38,2)
(6,22,2)
(35,53,2)
(0,22,2)
(32,41,2)
(17,38,2)
(31,0,2)
(16,0,2)
(54,12,2)
(15,0,2)
(18,0,2)
(25,31,2)
(44,0,2)
(7,41,2)
(32,17,2)
(14,38,2)
(51,53,2)
(6,16,2)
(33,31,2)
(24,38,2)
(22,53,2)
(21,7,2)
(53,14,2)
(43,0,2)
(19,38,2)
(1,17,2)
(53,38,2)
(31,6,2)
(16,41,2)
(10,38,2)
(16,17,2)
(26,38,2)
(22,47,2)
(36,53,2)
(10,41,2)
(47,53,2)
(17,10,2)
(50,38,2)
(5,0,2)
(14,17,2)
(54,0,2)
(13,31,2)
(9,0,2)
(5,22,2)
(52,53,2)
(34,0,2)
(32,31,2)
(4,31,2)
(40,31,2)
(27,0,2)
(46,53,2)
(0,53,2)
(54,1,2)
(6,54,2)
(1,0,2)
-----------------------------------
(0,pFile != NULL)
(1,100-dataLen)
(2,data)
(3,)
(4,\\\'\\\\0\\\')
(5,fclose(pFile)
(6,fgets(data+dataLen, (int)
(7,return data;)
(8,dataLen)
(9,pFile)
(10,strlen(data)
(11,if (pFile != NULL)
(12,int)
(13,dataLen)
(14,100-dataLen)
(15,pFile)
(16,data+dataLen)
(17,dataLen = strlen(data)
(18,dataLen)
(19,dataLen)
(20,pFile)
(21,RET)
(22,pFile = fopen(FILENAME, "r")
(23,if (100-dataLen > 1)
(24,dataLen)
(25,"fgets()
(26,100)
(27,NULL)
(28,if (fgets(data+dataLen, (int)
(29,)
(30,)
(31,fgets(data+dataLen, (int)
(32,data[dataLen])
(33,printLine("fgets()
(34,100)
(35,"r")
(36,pFile)
(37,1)
(38,badStatic)
(39,)
(40,data[dataLen] = \\\'\\\\0\\\')
(41,char * data)
(42,)
(43,data)
(44,dataLen)
(45,if(badStatic)
(46,FILENAME)
(47,fopen(FILENAME, "r")
(48,)
(49,data)
(50,data)
(51,pFile)
(52,NULL)
(53,100-dataLen > 1)
(54,(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
