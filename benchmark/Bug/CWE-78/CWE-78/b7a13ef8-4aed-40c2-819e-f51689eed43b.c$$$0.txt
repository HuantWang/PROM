-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_system_12_bad()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalReturnsTrueOrFalse())
    {
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
53,55
54,55
54,56
55,56
55,57
57,58
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
65,68
66,67
68,69
71,72
71,73
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
79,80
79,81
80,81
80,82
80,83
80,84
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
92,93
93,94
93,95
95,96
97,98
99,100
101,102
101,103
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
112,113
115,116
116,117
116,118
117,118
119,120
121,122
122,123
123,124
123,125
123,126
124,125
126,127
129,130
129,131
130,131
130,132
131,132
131,133
132,133
134,135
137,138
137,139
138,139
139,140
139,141
140,141
143,144
144,145
144,146
145,146
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,37,39,43,45,49,51,52,56,58,59,64,67,69,70,74,76,82,85,87,90,91,94,96,98,100,105,106,111,113,114,118,120,125,127,128,133,135,136,141,142,146,147
-----computeFrom-----
23,24
23,25
54,55
54,56
55,56
55,57
62,63
62,64
72,73
72,74
79,80
79,81
83,84
83,85
93,94
93,95
108,109
108,110
130,131
130,132
-----guardedBy-----
58,113
76,100
74,120
85,111
96,113
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_system_12_bad(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsTrueOrFalse())    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
void
CWE78_OS_Command_Injection__wchar_t_file_system_12_bad()
CWE78_OS_Command_Injection__wchar_t_file_system_12_bad
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsTrueOrFalse())    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalReturnsTrueOrFalse())    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(24,62,0)
(7,51,0)
(47,5,0)
(10,51,0)
(43,55,0)
(15,24,0)
(16,59,0)
(55,25,0)
(56,65,0)
(27,6,0)
(0,27,0)
(21,26,0)
(11,24,0)
(50,29,0)
(22,29,0)
(18,29,0)
(25,30,0)
(17,62,0)
(65,30,0)
(52,29,0)
(31,26,0)
(6,39,0)
(6,27,0)
(42,50,0)
(13,54,0)
(41,12,0)
(46,7,0)
(27,51,0)
(59,16,0)
(49,47,0)
(50,54,0)
(40,59,0)
(62,24,0)
(9,50,0)
(35,1,0)
(54,29,0)
(36,27,0)
(4,10,0)
(25,6,0)
(64,14,0)
(7,50,0)
(61,14,0)
(63,10,0)
(10,50,0)
(60,37,0)
(10,25,0)
(25,55,0)
(34,37,0)
(38,44,0)
(3,29,0)
(57,25,0)
(28,16,0)
(39,6,0)
(30,26,0)
(30,44,0)
(25,10,0)
(1,58,0)
(32,30,0)
(16,50,0)
(24,51,0)
(51,7,0)
(6,25,0)
(23,47,0)
(53,58,0)
(2,60,0)
(48,51,0)
(20,53,0)
(26,30,0)
(45,54,0)
(51,47,0)
(65,12,0)
(19,47,0)
(14,30,0)
(7,50,1)
(55,43,1)
(25,57,1)
(64,30,1)
(50,9,1)
(56,55,1)
(4,14,1)
(16,28,1)
(40,16,1)
(33,1,1)
(34,60,1)
(25,30,1)
(28,8,1)
(56,34,1)
(62,17,1)
(27,51,1)
(45,13,1)
(65,56,1)
(20,59,1)
(46,48,1)
(32,62,1)
(53,20,1)
(14,61,1)
(28,65,1)
(27,36,1)
(54,45,1)
(1,35,1)
(42,54,1)
(57,6,1)
(24,51,1)
(65,30,1)
(62,24,1)
(10,63,1)
(10,50,1)
(60,2,1)
(48,8,1)
(50,54,1)
(28,14,1)
(24,11,1)
(30,26,1)
(25,6,1)
(35,53,1)
(63,4,1)
(43,25,1)
(51,7,1)
(25,10,1)
(28,62,1)
(6,27,1)
(0,10,1)
(59,40,1)
(33,59,1)
(17,24,1)
(6,39,1)
(11,15,1)
(21,31,1)
(61,64,1)
(31,32,1)
(14,30,1)
(16,50,1)
(59,16,1)
(7,46,1)
(9,42,1)
(55,25,1)
(2,55,1)
(26,21,1)
(10,51,1)
(15,51,1)
(36,0,1)
(8,50,1)
(57,14,2)
(32,62,2)
(14,62,2)
(21,62,2)
(25,6,2)
(25,14,2)
(51,7,2)
(10,50,2)
(1,59,2)
(63,14,2)
(60,55,2)
(7,8,2)
(65,30,2)
(30,26,2)
(26,62,2)
(27,51,2)
(31,62,2)
(20,59,2)
(6,14,2)
(34,55,2)
(7,50,2)
(24,8,2)
(55,25,2)
(59,16,2)
(62,8,2)
(50,54,2)
(43,14,2)
(10,51,2)
(0,14,2)
(14,30,2)
(25,30,2)
(11,8,2)
(2,55,2)
(25,10,2)
(55,14,2)
(27,14,2)
(30,62,2)
(48,8,2)
(15,8,2)
(36,14,2)
(46,8,2)
(17,8,2)
(62,24,2)
(24,51,2)
(56,14,2)
(64,62,2)
(51,8,2)
(10,14,2)
(53,59,2)
(16,50,2)
(6,39,2)
(6,27,2)
(61,62,2)
(4,14,2)
(35,59,2)
(65,14,2)
-----------------------------------
(0,100)
(1,exit(1)
(2,"fgetws()
(3,if (SYSTEM(data)
(4,data)
(5,)
(6,(int)
(7,wcslen(data)
(8,globalReturnsTrueOrFalse()
(9,data_buf)
(10,data+dataLen)
(11,dataLen)
(12,)
(13,data_buf)
(14,pFile != NULL)
(15,100)
(16,SYSTEM(data)
(17,1)
(18,data)
(19,if (100-dataLen > 1)
(20,"command execution failed!")
(21,"r")
(22,if(globalReturnsTrueOrFalse()
(23,dataLen)
(24,100-dataLen)
(25,fgetws(data+dataLen, (int)
(26,fopen(FILENAME, "r")
(27,100-dataLen)
(28,data)
(29,)
(30,pFile = fopen(FILENAME, "r")
(31,FILENAME)
(32,pFile)
(33,RET)
(34,\\\'\\\\0\\\')
(35,1)
(36,dataLen)
(37,)
(38,if (pFile != NULL)
(39,int)
(40,0)
(41,if (fgetws(data+dataLen, (int)
(42,data)
(43,NULL)
(44,)
(45,FULL_COMMAND)
(46,data)
(47,)
(48,dataLen)
(49,pFile)
(50,data = data_buf)
(51,dataLen = wcslen(data)
(52,data_buf)
(53,printLine("command execution failed!")
(54,data_buf[100] = FULL_COMMAND)
(55,fgetws(data+dataLen, (int)
(56,pFile)
(57,pFile)
(58,)
(59,SYSTEM(data)
(60,printLine("fgetws()
(61,NULL)
(62,100-dataLen > 1)
(63,dataLen)
(64,pFile)
(65,fclose(pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
