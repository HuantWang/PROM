-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_w32_execv_32_bad()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        wchar_t * data = *dataPtr1;
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* wexecv - specify the path where the command is located */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            EXECV(COMMAND_INT_PATH, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
81,82
81,83
82,83
82,84
83,84
83,85
85,86
88,89
88,90
89,90
90,91
90,92
91,92
93,94
93,95
93,96
94,95
96,97
99,100
99,101
100,101
100,102
101,102
103,104
105,106
105,107
106,107
106,108
107,108
107,109
108,109
108,110
108,111
108,112
109,110
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
120,121
121,122
121,123
123,124
125,126
127,128
129,130
129,131
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
137,139
138,139
140,141
143,144
144,145
144,146
145,146
147,148
149,150
150,151
150,152
151,152
152,153
154,155
156,157
156,158
157,158
158,159
158,160
160,161
160,162
160,163
163,164
164,165
165,166
167,168
167,169
168,169
169,170
169,171
171,172
171,173
171,174
171,175
175,176
176,177
176,178
176,179
176,180
177,178
179,180
181,182
183,184
185,186
186,187
186,188
186,189
187,188
189,190
191,192
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,77,79,80,84,86,87,92,95,97,98,102,104,110,113,115,118,119,122,124,126,128,133,134,139,141,142,146,148,153,155,159,161,162,166,170,172,173,174,178,180,182,184,188,190,192
-----computeFrom-----
45,46
45,47
82,83
82,84
83,84
83,85
90,91
90,92
100,101
100,102
107,108
107,109
111,112
111,113
121,122
121,123
136,137
136,138
150,151
150,152
-----guardedBy-----
86,141
104,128
102,148
113,139
124,141
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_w32_execv_32_bad(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }}
void
CWE78_OS_Command_Injection__wchar_t_file_w32_execv_32_bad()
CWE78_OS_Command_Injection__wchar_t_file_w32_execv_32_bad
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        wchar_t * data = *dataPtr1;        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wexecv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            EXECV(COMMAND_INT_PATH, args);        }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(70,10,0)
(68,79,0)
(44,62,0)
(28,39,0)
(35,30,0)
(40,17,0)
(32,28,0)
(27,80,0)
(81,9,0)
(55,13,0)
(18,9,0)
(1,7,0)
(61,80,0)
(1,41,0)
(10,7,0)
(79,10,0)
(66,67,0)
(4,47,0)
(65,64,0)
(39,79,0)
(46,50,0)
(80,47,0)
(6,55,0)
(10,47,0)
(85,38,0)
(81,1,0)
(62,45,0)
(10,79,0)
(7,41,0)
(55,12,0)
(79,55,0)
(52,64,0)
(47,67,0)
(53,1,0)
(26,37,0)
(85,55,0)
(42,3,0)
(34,41,0)
(54,7,0)
(16,18,0)
(64,83,0)
(71,80,0)
(36,37,0)
(25,52,0)
(57,12,0)
(9,37,0)
(45,37,0)
(64,52,0)
(2,12,0)
(75,83,0)
(8,37,0)
(83,3,0)
(0,50,0)
(79,43,0)
(48,47,0)
(48,7,0)
(79,39,0)
(58,29,0)
(15,67,0)
(82,48,0)
(19,85,0)
(84,81,0)
(5,76,0)
(60,9,0)
(12,55,0)
(23,45,0)
(7,29,0)
(80,71,0)
(36,17,0)
(3,83,0)
(72,10,0)
(33,13,0)
(22,37,0)
(59,30,0)
(29,7,0)
(17,37,0)
(28,47,0)
(76,62,0)
(83,37,0)
(39,28,0)
(52,45,0)
(11,35,0)
(20,37,0)
(49,6,0)
(43,79,0)
(56,36,0)
(74,38,0)
(63,55,0)
(69,28,0)
(21,36,0)
(31,39,0)
(41,37,0)
(77,43,0)
(51,6,0)
(73,17,0)
(50,62,0)
(9,18,0)
(47,48,0)
(78,71,0)
(29,9,0)
(50,76,0)
(67,41,0)
(14,67,0)
(39,31,0)
(48,82,1)
(71,80,1)
(76,5,1)
(39,31,1)
(35,11,1)
(18,16,1)
(11,43,1)
(55,12,1)
(10,72,1)
(36,56,1)
(80,61,1)
(50,0,1)
(57,63,1)
(1,53,1)
(52,64,1)
(84,71,1)
(29,9,1)
(84,85,1)
(77,79,1)
(28,47,1)
(63,71,1)
(40,73,1)
(78,80,1)
(49,51,1)
(85,19,1)
(29,58,1)
(84,6,1)
(65,25,1)
(81,84,1)
(47,48,1)
(32,10,1)
(79,10,1)
(59,35,1)
(21,17,1)
(80,47,1)
(12,2,1)
(24,50,1)
(1,7,1)
(7,29,1)
(56,21,1)
(3,42,1)
(68,39,1)
(82,4,1)
(36,17,1)
(10,7,1)
(61,27,1)
(81,9,1)
(48,7,1)
(5,52,1)
(73,83,1)
(79,68,1)
(64,65,1)
(16,60,1)
(27,47,1)
(9,18,1)
(79,55,1)
(50,76,1)
(64,83,1)
(43,79,1)
(25,1,1)
(69,32,1)
(71,78,1)
(75,9,1)
(4,7,1)
(58,54,1)
(19,59,1)
(72,70,1)
(79,39,1)
(42,75,1)
(51,55,1)
(39,28,1)
(54,36,1)
(28,69,1)
(10,47,1)
(6,49,1)
(83,3,1)
(17,40,1)
(70,6,1)
(85,55,1)
(43,77,1)
(0,46,1)
(19,43,1)
(46,76,1)
(2,57,1)
(6,55,1)
(53,81,1)
(79,39,2)
(43,6,2)
(79,10,2)
(39,6,2)
(43,79,2)
(6,55,2)
(35,43,2)
(85,55,2)
(39,31,2)
(1,7,2)
(29,9,2)
(11,43,2)
(83,3,2)
(69,6,2)
(32,6,2)
(59,43,2)
(19,6,2)
(28,6,2)
(7,29,2)
(80,47,2)
(12,71,2)
(57,71,2)
(71,80,2)
(51,71,2)
(50,76,2)
(49,71,2)
(10,47,2)
(55,71,2)
(63,71,2)
(79,55,2)
(10,6,2)
(36,17,2)
(72,6,2)
(64,83,2)
(52,64,2)
(55,12,2)
(28,47,2)
(47,48,2)
(81,9,2)
(39,28,2)
(79,6,2)
(6,71,2)
(77,6,2)
(85,6,2)
(68,6,2)
(2,71,2)
(9,18,2)
(48,7,2)
(10,7,2)
(70,6,2)
-----------------------------------
(0,args)
(1,*dataPtr1 = data)
(2,"r")
(3,&data)
(4,dataLen)
(5,args)
(6,pFile != NULL)
(7,* data = *dataPtr1)
(8,data)
(9,* *dataPtr1 = &data)
(10,data+dataLen)
(11,"fgetws()
(12,fopen(FILENAME, "r")
(13,)
(14,if (100-dataLen > 1)
(15,dataLen)
(16,data)
(17,dataBuffer[100] = COMMAND_ARG2)
(18,&data)
(19,pFile)
(20,dataBuffer)
(21,data)
(22,dataPtr1)
(23,data)
(24,RET)
(25,data)
(26,dataPtr2)
(27,100)
(28,100-dataLen)
(29,*dataPtr1)
(30,)
(31,int)
(32,100)
(33,if (pFile != NULL)
(34,data)
(35,printLine("fgetws()
(36,data = dataBuffer)
(37,)
(38,)
(39,(int)
(40,COMMAND_ARG2)
(41,)
(42,data)
(43,fgetws(data+dataLen, (int)
(44,args)
(45,)
(46,COMMAND_INT_PATH)
(47,dataLen = wcslen(data)
(48,wcslen(data)
(49,NULL)
(50,EXECV(COMMAND_INT_PATH, args)
(51,pFile)
(52,* data = *dataPtr2)
(53,data)
(54,data)
(55,pFile = fopen(FILENAME, "r")
(56,dataBuffer)
(57,FILENAME)
(58,dataPtr1)
(59,\\\'\\\\0\\\')
(60,dataPtr1)
(61,dataLen)
(62,)
(63,pFile)
(64,*dataPtr2)
(65,dataPtr2)
(66,pFile)
(67,)
(68,pFile)
(69,dataLen)
(70,data)
(71,100-dataLen > 1)
(72,dataLen)
(73,dataBuffer)
(74,if (fgetws(data+dataLen, (int)
(75,dataPtr2)
(76,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(77,NULL)
(78,1)
(79,fgetws(data+dataLen, (int)
(80,100-dataLen)
(81,*dataPtr1)
(82,data)
(83,* *dataPtr2 = &data)
(84,dataPtr1)
(85,fclose(pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
