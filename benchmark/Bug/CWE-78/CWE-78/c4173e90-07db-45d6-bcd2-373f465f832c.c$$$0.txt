-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_45_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_45_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_popen_45_bad()
CWE78_OS_Command_Injection__char_console_popen_45_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_45_badData = data;
CWE78_OS_Command_Injection__char_console_popen_45_badData = data
CWE78_OS_Command_Injection__char_console_popen_45_badData
CWE78_OS_Command_Injection__char_console_popen_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(12,51,0)
(6,18,0)
(22,19,0)
(49,8,0)
(62,35,0)
(42,28,0)
(3,17,0)
(16,35,0)
(25,0,0)
(40,33,0)
(67,49,0)
(52,54,0)
(40,65,0)
(27,65,0)
(29,33,0)
(2,43,0)
(44,43,0)
(33,0,0)
(64,33,0)
(35,30,0)
(65,64,0)
(8,22,0)
(12,65,0)
(71,28,0)
(24,4,0)
(53,43,0)
(57,6,0)
(38,47,0)
(19,22,0)
(33,25,0)
(65,47,0)
(7,25,0)
(52,9,0)
(41,13,0)
(31,51,0)
(10,30,0)
(28,54,0)
(16,33,0)
(1,18,0)
(37,18,0)
(69,40,0)
(45,12,0)
(61,33,0)
(13,22,0)
(43,2,0)
(32,14,0)
(66,2,0)
(26,0,0)
(15,13,0)
(40,8,0)
(54,28,0)
(20,16,0)
(23,17,0)
(5,48,0)
(8,49,0)
(8,40,0)
(55,0,0)
(46,40,0)
(22,13,0)
(64,65,0)
(59,47,0)
(11,33,0)
(51,48,0)
(56,12,0)
(50,8,0)
(54,52,0)
(36,29,0)
(17,9,0)
(12,33,0)
(70,5,0)
(2,33,0)
(9,33,0)
(68,29,0)
(39,0,0)
(60,52,0)
(18,65,0)
(9,52,0)
(21,9,0)
(29,0,0)
(43,35,0)
(9,17,0)
(22,8,0)
(18,6,0)
(35,16,0)
(2,24,0)
(58,25,0)
(47,0,0)
(72,24,0)
(13,65,0)
(28,35,0)
(34,64,0)
(17,35,0)
(42,35,1)
(26,29,1)
(28,71,1)
(29,33,1)
(36,54,1)
(52,9,1)
(3,21,1)
(61,11,1)
(36,51,1)
(52,60,1)
(36,6,1)
(6,57,1)
(60,9,1)
(57,18,1)
(17,23,1)
(40,33,1)
(17,35,1)
(70,49,1)
(72,2,1)
(13,65,1)
(27,33,1)
(68,36,1)
(29,68,1)
(67,8,1)
(21,28,1)
(40,65,1)
(12,65,1)
(64,34,1)
(22,19,1)
(41,40,1)
(43,35,1)
(65,64,1)
(2,33,1)
(46,69,1)
(28,35,1)
(8,40,1)
(50,22,1)
(33,25,1)
(37,1,1)
(43,53,1)
(36,24,1)
(69,6,1)
(49,8,1)
(8,50,1)
(35,16,1)
(2,43,1)
(13,15,1)
(34,27,1)
(25,7,1)
(31,12,1)
(53,44,1)
(54,52,1)
(44,66,1)
(18,65,1)
(24,72,1)
(5,70,1)
(1,65,1)
(16,33,1)
(40,46,1)
(56,5,1)
(15,41,1)
(12,33,1)
(71,42,1)
(33,61,1)
(9,33,1)
(9,17,1)
(7,58,1)
(64,33,1)
(8,22,1)
(23,3,1)
(66,54,1)
(49,67,1)
(12,45,1)
(63,26,1)
(22,13,1)
(18,37,1)
(6,18,1)
(16,20,1)
(62,49,1)
(20,62,1)
(11,25,1)
(54,28,1)
(45,56,1)
(51,31,1)
(28,35,2)
(22,13,2)
(9,33,2)
(62,49,2)
(17,35,2)
(22,6,2)
(69,6,2)
(49,8,2)
(52,9,2)
(45,49,2)
(31,49,2)
(65,64,2)
(35,49,2)
(21,28,2)
(49,6,2)
(22,19,2)
(54,49,2)
(29,33,2)
(23,28,2)
(44,54,2)
(2,33,2)
(8,6,2)
(5,49,2)
(12,49,2)
(13,65,2)
(42,49,2)
(2,43,2)
(67,6,2)
(16,33,2)
(50,6,2)
(8,22,2)
(12,65,2)
(43,54,2)
(3,28,2)
(2,54,2)
(46,6,2)
(16,49,2)
(66,54,2)
(41,6,2)
(40,33,2)
(43,35,2)
(53,54,2)
(6,18,2)
(15,6,2)
(24,54,2)
(56,49,2)
(71,49,2)
(70,49,2)
(9,17,2)
(28,49,2)
(64,33,2)
(40,6,2)
(17,28,2)
(9,28,2)
(40,65,2)
(18,65,2)
(12,33,2)
(8,40,2)
(33,25,2)
(60,28,2)
(54,28,2)
(13,6,2)
(20,49,2)
(35,16,2)
(54,52,2)
(52,28,2)
(72,54,2)
(51,49,2)
-----------------------------------
(0,)
(1,100)
(2,data[dataLen-1])
(3,dataLen)
(4,)
(5,printLine("fgets()
(6,100-dataLen > 1)
(7,FULL_COMMAND)
(8,fgets(data+dataLen, (int)
(9,data[dataLen-1])
(10,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(11,data)
(12,data[dataLen])
(13,100-dataLen)
(14,)
(15,dataLen)
(16,strlen(data)
(17,dataLen-1)
(18,100-dataLen)
(19,int)
(20,data)
(21,data)
(22,(int)
(23,1)
(24,data[dataLen-1] = \\\'\\\\0\\\')
(25,data_buf[100] = FULL_COMMAND)
(26,badSink()
(27,dataLen)
(28,dataLen > 0)
(29,CWE78_OS_Command_Injection__char_console_popen_45_badData = data)
(30,)
(31,\\\'\\\\0\\\')
(32,if (fgets(data+dataLen, (int)
(33,data = data_buf)
(34,data)
(35,dataLen = strlen(data)
(36,CWE78_OS_Command_Injection__char_console_popen_45_badData)
(37,dataLen)
(38,dataLen)
(39,data)
(40,data+dataLen)
(41,100)
(42,dataLen)
(43,dataLen-1)
(44,dataLen)
(45,dataLen)
(46,dataLen)
(47,)
(48,)
(49,fgets(data+dataLen, (int)
(50,stdin)
(51,data[dataLen] = \\\'\\\\0\\\')
(52,data[dataLen-1] == \\\'\\\\n\\\')
(53,1)
(54,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(55,data_buf)
(56,data)
(57,1)
(58,data_buf)
(59,if (100-dataLen > 1)
(60,\\\'\\\\n\\\')
(61,data_buf)
(62,dataLen)
(63,RET)
(64,strlen(data)
(65,dataLen = strlen(data)
(66,data)
(67,NULL)
(68,data)
(69,data)
(70,"fgets()
(71,0)
(72,\\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
