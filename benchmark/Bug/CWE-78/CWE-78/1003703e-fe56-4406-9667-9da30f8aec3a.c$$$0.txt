-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(9,59,0)
(24,44,0)
(17,66,0)
(30,51,0)
(32,49,0)
(42,37,0)
(51,29,0)
(29,51,0)
(2,0,0)
(64,47,0)
(52,25,0)
(31,50,0)
(40,12,0)
(51,61,0)
(22,33,0)
(40,45,0)
(33,37,0)
(53,51,0)
(18,61,0)
(12,66,0)
(6,61,0)
(58,18,0)
(48,35,0)
(25,35,0)
(57,41,0)
(38,35,0)
(25,45,0)
(3,33,0)
(34,41,0)
(42,61,0)
(55,47,0)
(44,10,0)
(65,42,0)
(18,50,0)
(23,54,0)
(44,50,0)
(35,25,0)
(1,37,0)
(12,40,0)
(20,44,0)
(27,32,0)
(45,36,0)
(11,3,0)
(35,50,0)
(56,41,0)
(10,39,0)
(38,57,0)
(36,50,0)
(32,50,0)
(26,40,0)
(4,45,0)
(46,29,0)
(61,47,0)
(7,40,0)
(12,50,0)
(37,1,0)
(41,45,0)
(19,31,0)
(54,39,0)
(62,10,0)
(37,33,0)
(36,45,0)
(5,18,0)
(66,15,0)
(35,38,0)
(43,32,0)
(41,57,0)
(33,3,0)
(28,38,0)
(44,61,0)
(37,42,0)
(33,18,0)
(47,8,0)
(31,61,0)
(60,36,0)
(57,38,0)
(14,42,0)
(45,59,0)
(18,33,0)
(16,12,0)
(61,31,0)
(13,25,0)
(63,49,0)
(33,37,1)
(40,7,1)
(41,34,1)
(32,43,1)
(25,52,1)
(29,46,1)
(43,66,1)
(33,22,1)
(42,65,1)
(43,10,1)
(43,21,1)
(35,50,1)
(31,19,1)
(13,48,1)
(3,33,1)
(18,58,1)
(40,45,1)
(36,50,1)
(12,40,1)
(44,50,1)
(10,62,1)
(57,41,1)
(37,42,1)
(58,5,1)
(66,17,1)
(24,20,1)
(27,32,1)
(19,6,1)
(44,61,1)
(18,50,1)
(11,33,1)
(44,24,1)
(12,50,1)
(61,31,1)
(43,29,1)
(17,12,1)
(36,60,1)
(42,61,1)
(18,61,1)
(32,50,1)
(7,26,1)
(16,57,1)
(38,35,1)
(30,61,1)
(38,28,1)
(57,38,1)
(51,53,1)
(31,50,1)
(23,3,1)
(35,25,1)
(60,4,1)
(62,44,1)
(28,35,1)
(65,14,1)
(56,45,1)
(46,51,1)
(22,37,1)
(14,18,1)
(37,1,1)
(41,45,1)
(48,41,1)
(52,13,1)
(45,36,1)
(54,23,1)
(29,51,1)
(6,21,1)
(34,56,1)
(4,3,1)
(5,29,1)
(43,57,1)
(3,11,1)
(33,18,1)
(26,16,1)
(25,45,1)
(53,30,1)
(20,54,1)
(51,61,1)
(45,3,2)
(51,61,2)
(34,3,2)
(60,3,2)
(35,25,2)
(58,29,2)
(5,29,2)
(24,3,2)
(25,41,2)
(66,57,2)
(40,45,2)
(30,21,2)
(36,3,2)
(62,3,2)
(51,21,2)
(12,57,2)
(32,50,2)
(12,50,2)
(25,45,2)
(20,3,2)
(16,57,2)
(29,21,2)
(57,41,2)
(11,29,2)
(41,45,2)
(65,29,2)
(35,41,2)
(37,1,2)
(35,50,2)
(18,29,2)
(31,50,2)
(19,21,2)
(48,41,2)
(46,21,2)
(37,42,2)
(44,61,2)
(54,3,2)
(56,3,2)
(52,41,2)
(45,36,2)
(61,21,2)
(3,29,2)
(33,37,2)
(42,29,2)
(27,32,2)
(41,3,2)
(18,50,2)
(7,57,2)
(13,41,2)
(3,33,2)
(12,40,2)
(42,61,2)
(23,3,2)
(26,57,2)
(10,3,2)
(18,61,2)
(6,21,2)
(38,41,2)
(33,18,2)
(22,29,2)
(38,35,2)
(17,57,2)
(28,41,2)
(61,31,2)
(57,3,2)
(31,21,2)
(29,51,2)
(33,29,2)
(40,57,2)
(57,38,2)
(37,29,2)
(4,3,2)
(44,50,2)
(44,3,2)
(36,50,2)
(53,21,2)
(14,29,2)
-----------------------------------
(0,)
(1,int)
(2,if (fgets(data+dataLen, (int)
(3,fgets(data+dataLen, (int)
(4,dataLen)
(5,data)
(6,dataLen)
(7,1)
(8,)
(9,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(10,data[dataLen] = \\\'\\\\0\\\')
(11,NULL)
(12,data[dataLen-1])
(13,dataLen)
(14,100)
(15,)
(16,data)
(17,\\\'\\\\0\\\')
(18,data+dataLen)
(19,data)
(20,data)
(21,badStatic)
(22,stdin)
(23,"fgets()
(24,dataLen)
(25,dataLen-1)
(26,dataLen)
(27,RET)
(28,\\\'\\\\n\\\')
(29,100-dataLen > 1)
(30,100)
(31,strlen(data)
(32,return data;)
(33,fgets(data+dataLen, (int)
(34,0)
(35,data[dataLen-1])
(36,strlen(data)
(37,(int)
(38,data[dataLen-1] == \\\'\\\\n\\\')
(39,)
(40,dataLen-1)
(41,dataLen > 0)
(42,100-dataLen)
(43,data)
(44,data[dataLen])
(45,dataLen = strlen(data)
(46,1)
(47,)
(48,data)
(49,)
(50,char * data)
(51,100-dataLen)
(52,1)
(53,dataLen)
(54,printLine("fgets()
(55,dataLen)
(56,dataLen)
(57,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(58,dataLen)
(59,)
(60,data)
(61,dataLen = strlen(data)
(62,\\\'\\\\0\\\')
(63,if(badStatic)
(64,if (100-dataLen > 1)
(65,dataLen)
(66,data[dataLen-1] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
