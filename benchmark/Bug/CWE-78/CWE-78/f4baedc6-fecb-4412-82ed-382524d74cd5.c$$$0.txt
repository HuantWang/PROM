-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(60,21,0)
(53,42,0)
(21,12,0)
(14,39,0)
(22,21,0)
(55,54,0)
(43,52,0)
(21,5,0)
(63,22,0)
(25,17,0)
(2,14,0)
(62,41,0)
(49,45,0)
(9,28,0)
(22,55,0)
(60,41,0)
(37,5,0)
(6,17,0)
(46,40,0)
(57,54,0)
(16,57,0)
(33,51,0)
(8,42,0)
(36,22,0)
(45,52,0)
(33,19,0)
(57,41,0)
(45,41,0)
(54,10,0)
(0,60,0)
(19,33,0)
(28,40,0)
(60,8,0)
(18,13,0)
(28,21,0)
(12,48,0)
(45,15,0)
(54,55,0)
(4,21,0)
(38,15,0)
(39,23,0)
(15,39,0)
(59,10,0)
(5,21,0)
(44,28,0)
(47,13,0)
(1,15,0)
(55,56,0)
(51,33,0)
(55,22,0)
(26,60,0)
(13,48,0)
(20,39,0)
(7,8,0)
(56,55,0)
(51,41,0)
(24,54,0)
(27,3,0)
(19,17,0)
(40,28,0)
(58,33,0)
(10,54,0)
(32,12,0)
(39,62,0)
(14,51,0)
(62,39,0)
(34,62,0)
(15,45,0)
(52,30,0)
(29,12,0)
(31,57,0)
(50,14,0)
(11,23,0)
(5,41,0)
(61,51,0)
(51,14,0)
(57,21,0)
(17,39,0)
(17,19,0)
(54,57,0)
(13,41,0)
(35,53,0)
(31,16,1)
(49,19,1)
(34,20,1)
(19,33,1)
(33,51,1)
(60,21,1)
(15,38,1)
(61,17,1)
(25,6,1)
(35,10,1)
(43,45,1)
(17,25,1)
(0,26,1)
(46,28,1)
(8,7,1)
(14,2,1)
(28,21,1)
(54,57,1)
(20,10,1)
(10,54,1)
(24,55,1)
(18,19,1)
(58,51,1)
(55,56,1)
(33,58,1)
(55,22,1)
(10,59,1)
(15,39,1)
(60,41,1)
(28,44,1)
(5,37,1)
(26,53,1)
(45,15,1)
(16,40,1)
(36,57,1)
(18,52,1)
(13,41,1)
(17,39,1)
(5,41,1)
(62,34,1)
(57,41,1)
(18,40,1)
(60,0,1)
(37,4,1)
(9,21,1)
(22,21,1)
(18,8,1)
(14,39,1)
(22,63,1)
(51,41,1)
(54,55,1)
(21,5,1)
(53,35,1)
(19,17,1)
(39,62,1)
(6,39,1)
(44,9,1)
(52,43,1)
(54,24,1)
(40,46,1)
(57,31,1)
(62,41,1)
(47,13,1)
(45,41,1)
(2,50,1)
(7,60,1)
(59,54,1)
(57,21,1)
(40,28,1)
(13,18,1)
(63,36,1)
(1,49,1)
(51,14,1)
(50,61,1)
(38,1,1)
(15,39,2)
(17,39,2)
(22,21,2)
(10,54,2)
(17,10,2)
(34,10,2)
(20,10,2)
(50,17,2)
(53,10,2)
(39,62,2)
(19,33,2)
(7,10,2)
(19,10,2)
(24,40,2)
(57,40,2)
(6,10,2)
(57,21,2)
(13,41,2)
(16,40,2)
(33,17,2)
(5,41,2)
(62,41,2)
(0,10,2)
(55,22,2)
(61,17,2)
(62,10,2)
(45,19,2)
(35,10,2)
(25,10,2)
(60,41,2)
(36,40,2)
(54,40,2)
(60,10,2)
(8,10,2)
(10,40,2)
(63,40,2)
(54,57,2)
(15,19,2)
(2,17,2)
(54,55,2)
(40,28,2)
(60,21,2)
(14,39,2)
(45,15,2)
(33,51,2)
(14,17,2)
(21,5,2)
(57,41,2)
(31,40,2)
(26,10,2)
(51,17,2)
(55,56,2)
(59,40,2)
(51,14,2)
(38,19,2)
(55,40,2)
(19,17,2)
(49,19,2)
(1,19,2)
(47,13,2)
(58,17,2)
(51,41,2)
(52,19,2)
(39,10,2)
(22,40,2)
(43,19,2)
(28,21,2)
(45,41,2)
-----------------------------------
(0,dataLen)
(1,dataLen)
(2,1)
(3,)
(4,dataLen)
(5,strlen(data)
(6,dataLen)
(7,\\\'\\\\0\\\')
(8,data[dataLen] = \\\'\\\\0\\\')
(9,100)
(10,fgets(data+dataLen, (int)
(11,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,)
(13,return data;)
(14,dataLen-1)
(15,dataLen-1)
(16,data)
(17,dataLen > 0)
(18,data)
(19,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(20,dataLen)
(21,dataLen = strlen(data)
(22,100-dataLen)
(23,)
(24,stdin)
(25,0)
(26,data)
(27,if (fgets(data+dataLen, (int)
(28,100-dataLen)
(29,dataLen)
(30,)
(31,dataLen)
(32,if (100-dataLen > 1)
(33,data[dataLen-1] == \\\'\\\\n\\\')
(34,data)
(35,"fgets()
(36,100)
(37,data)
(38,1)
(39,dataLen = strlen(data)
(40,100-dataLen > 1)
(41,char * data)
(42,)
(43,\\\'\\\\0\\\')
(44,dataLen)
(45,data[dataLen-1])
(46,1)
(47,RET)
(48,)
(49,data)
(50,dataLen)
(51,data[dataLen-1])
(52,data[dataLen-1] = \\\'\\\\0\\\')
(53,printLine("fgets()
(54,fgets(data+dataLen, (int)
(55,(int)
(56,int)
(57,data+dataLen)
(58,\\\'\\\\n\\\')
(59,NULL)
(60,data[dataLen])
(61,data)
(62,strlen(data)
(63,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
