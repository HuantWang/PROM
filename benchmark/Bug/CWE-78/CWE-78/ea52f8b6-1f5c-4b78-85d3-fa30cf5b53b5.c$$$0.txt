-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(29,20,0)
(58,1,0)
(19,39,0)
(6,39,0)
(8,60,0)
(21,38,0)
(45,1,0)
(4,34,0)
(16,20,0)
(34,3,0)
(52,46,0)
(8,7,0)
(27,13,0)
(17,63,0)
(43,49,0)
(45,23,0)
(31,1,0)
(35,8,0)
(28,50,0)
(20,32,0)
(36,63,0)
(55,19,0)
(8,3,0)
(5,28,0)
(1,60,0)
(32,3,0)
(40,63,0)
(18,50,0)
(56,28,0)
(42,59,0)
(10,18,0)
(65,21,0)
(59,12,0)
(14,49,0)
(33,44,0)
(43,46,0)
(36,53,0)
(49,43,0)
(20,66,0)
(24,36,0)
(60,59,0)
(30,60,0)
(18,32,0)
(50,28,0)
(0,66,0)
(1,45,0)
(13,60,0)
(19,60,0)
(13,3,0)
(28,66,0)
(50,18,0)
(9,19,0)
(15,22,0)
(49,3,0)
(46,43,0)
(41,47,0)
(7,38,0)
(11,48,0)
(51,8,0)
(53,54,0)
(66,22,0)
(61,43,0)
(45,43,0)
(66,34,0)
(47,48,0)
(63,66,0)
(47,3,0)
(57,7,0)
(32,18,0)
(63,36,0)
(39,19,0)
(34,66,0)
(64,59,0)
(60,13,0)
(49,60,0)
(23,45,0)
(32,20,0)
(36,3,0)
(43,45,0)
(25,32,0)
(37,53,0)
(2,47,0)
(26,49,0)
(32,3,1)
(65,46,1)
(20,29,1)
(49,14,1)
(66,34,1)
(21,65,1)
(46,52,1)
(45,1,1)
(19,9,1)
(16,25,1)
(18,10,1)
(1,58,1)
(41,62,1)
(13,3,1)
(8,60,1)
(43,61,1)
(53,37,1)
(47,41,1)
(58,31,1)
(61,45,1)
(40,24,1)
(36,63,1)
(18,32,1)
(45,23,1)
(13,27,1)
(34,4,1)
(8,35,1)
(2,47,1)
(28,66,1)
(36,3,1)
(41,50,1)
(50,28,1)
(0,46,1)
(27,30,1)
(41,39,1)
(9,55,1)
(30,62,1)
(39,19,1)
(5,56,1)
(34,3,1)
(6,19,1)
(31,49,1)
(25,28,1)
(28,5,1)
(46,43,1)
(57,8,1)
(39,6,1)
(63,17,1)
(4,0,1)
(29,16,1)
(63,66,1)
(8,3,1)
(50,18,1)
(55,60,1)
(35,51,1)
(17,40,1)
(10,32,1)
(1,60,1)
(51,21,1)
(19,60,1)
(32,20,1)
(43,45,1)
(26,39,1)
(43,49,1)
(49,3,1)
(56,66,1)
(24,50,1)
(52,43,1)
(14,26,1)
(60,13,1)
(49,60,1)
(7,57,1)
(47,3,1)
(41,7,1)
(41,53,1)
(37,36,1)
(20,66,1)
(58,39,2)
(17,50,2)
(52,39,2)
(65,46,2)
(43,45,2)
(39,19,2)
(63,66,2)
(51,46,2)
(30,62,2)
(36,63,2)
(45,1,2)
(66,34,2)
(60,62,2)
(20,28,2)
(46,43,2)
(6,62,2)
(19,60,2)
(55,62,2)
(14,39,2)
(1,60,2)
(32,3,2)
(46,39,2)
(36,3,2)
(18,28,2)
(47,3,2)
(39,62,2)
(25,28,2)
(7,46,2)
(1,39,2)
(21,46,2)
(45,23,2)
(49,3,2)
(50,46,2)
(24,50,2)
(61,39,2)
(16,28,2)
(49,39,2)
(32,28,2)
(28,46,2)
(9,62,2)
(5,46,2)
(45,39,2)
(53,50,2)
(10,28,2)
(40,50,2)
(4,46,2)
(8,46,2)
(19,62,2)
(66,46,2)
(13,62,2)
(57,46,2)
(20,66,2)
(43,49,2)
(37,50,2)
(43,39,2)
(60,13,2)
(34,3,2)
(8,60,2)
(49,60,2)
(31,39,2)
(18,32,2)
(28,66,2)
(36,50,2)
(50,18,2)
(2,47,2)
(63,50,2)
(26,39,2)
(0,46,2)
(8,3,2)
(32,20,2)
(35,46,2)
(50,28,2)
(56,46,2)
(34,46,2)
(13,3,2)
(29,28,2)
(27,62,2)
-----------------------------------
(0,dataLen)
(1,100-dataLen)
(2,RET)
(3,char * data)
(4,data)
(5,0)
(6,1)
(7,data[dataLen] = \\\'\\\\0\\\')
(8,data[dataLen])
(9,dataLen)
(10,\\\'\\\\n\\\')
(11,if(badStatic)
(12,)
(13,strlen(data)
(14,dataLen)
(15,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(16,dataLen)
(17,1)
(18,data[dataLen-1] == \\\'\\\\n\\\')
(19,100-dataLen)
(20,dataLen-1)
(21,printLine("fgets()
(22,)
(23,int)
(24,data)
(25,data)
(26,data)
(27,data)
(28,dataLen > 0)
(29,1)
(30,dataLen)
(31,100)
(32,data[dataLen-1])
(33,if (fgets(data+dataLen, (int)
(34,strlen(data)
(35,dataLen)
(36,data[dataLen-1])
(37,\\\'\\\\0\\\')
(38,)
(39,100-dataLen > 1)
(40,dataLen)
(41,data)
(42,dataLen)
(43,fgets(data+dataLen, (int)
(44,)
(45,(int)
(46,fgets(data+dataLen, (int)
(47,return data;)
(48,)
(49,data+dataLen)
(50,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(51,data)
(52,NULL)
(53,data[dataLen-1] = \\\'\\\\0\\\')
(54,)
(55,100)
(56,dataLen)
(57,\\\'\\\\0\\\')
(58,dataLen)
(59,)
(60,dataLen = strlen(data)
(61,stdin)
(62,badStatic)
(63,dataLen-1)
(64,if (100-dataLen > 1)
(65,"fgets()
(66,dataLen = strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
