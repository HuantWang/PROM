-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badGlobal
CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(64,12,0)
(45,46,0)
(9,24,0)
(54,34,0)
(39,66,0)
(27,44,0)
(4,39,0)
(39,1,0)
(58,61,0)
(19,10,0)
(63,25,0)
(31,6,0)
(6,31,0)
(62,66,0)
(3,38,0)
(44,15,0)
(32,33,0)
(17,26,0)
(63,33,0)
(11,63,0)
(44,33,0)
(12,31,0)
(56,44,0)
(29,48,0)
(8,12,0)
(28,29,0)
(59,6,0)
(30,39,0)
(31,12,0)
(51,13,0)
(33,29,0)
(60,21,0)
(5,54,0)
(33,63,0)
(21,13,0)
(2,51,0)
(57,15,0)
(45,1,0)
(15,44,0)
(41,35,0)
(43,65,0)
(66,25,0)
(36,25,0)
(18,45,0)
(14,64,0)
(47,36,0)
(65,25,0)
(38,25,0)
(32,25,0)
(20,31,0)
(10,1,0)
(12,64,0)
(55,45,0)
(37,6,0)
(66,61,0)
(53,33,0)
(10,36,0)
(46,61,0)
(52,64,0)
(64,33,0)
(1,38,0)
(65,49,0)
(66,39,0)
(61,66,0)
(6,25,0)
(40,65,0)
(50,29,0)
(61,46,0)
(36,10,0)
(6,33,0)
(32,51,0)
(7,1,0)
(31,26,0)
(0,32,0)
(36,54,0)
(38,1,0)
(46,45,0)
(12,8,0)
(1,35,0)
(26,31,0)
(42,49,0)
(16,32,0)
(22,10,0)
(6,25,1)
(5,36,1)
(1,38,1)
(66,25,1)
(54,5,1)
(62,45,1)
(64,33,1)
(43,51,1)
(12,64,1)
(15,44,1)
(44,27,1)
(52,14,1)
(64,52,1)
(26,31,1)
(43,15,1)
(53,23,1)
(47,46,1)
(36,25,1)
(46,45,1)
(6,33,1)
(3,7,1)
(33,63,1)
(12,8,1)
(66,39,1)
(16,21,1)
(7,26,1)
(31,6,1)
(63,11,1)
(11,53,1)
(65,43,1)
(17,31,1)
(2,32,1)
(32,0,1)
(38,3,1)
(40,65,1)
(55,1,1)
(26,17,1)
(4,62,1)
(0,16,1)
(14,6,1)
(65,25,1)
(46,61,1)
(10,19,1)
(20,12,1)
(61,66,1)
(6,37,1)
(63,25,1)
(56,33,1)
(58,66,1)
(37,59,1)
(39,30,1)
(32,25,1)
(43,54,1)
(36,10,1)
(60,26,1)
(59,15,1)
(19,22,1)
(31,12,1)
(22,47,1)
(45,18,1)
(38,25,1)
(61,58,1)
(10,1,1)
(43,23,1)
(15,57,1)
(57,44,1)
(31,20,1)
(39,1,1)
(44,33,1)
(51,2,1)
(45,1,1)
(32,33,1)
(43,46,1)
(21,60,1)
(30,4,1)
(18,55,1)
(27,56,1)
(66,45,2)
(5,46,2)
(46,45,2)
(47,46,2)
(18,26,2)
(15,44,2)
(40,65,2)
(12,15,2)
(6,25,2)
(46,61,2)
(32,26,2)
(10,1,2)
(1,38,2)
(64,15,2)
(58,45,2)
(36,46,2)
(64,33,2)
(63,23,2)
(39,45,2)
(6,15,2)
(21,26,2)
(33,63,2)
(60,26,2)
(54,46,2)
(15,23,2)
(17,15,2)
(44,33,2)
(3,26,2)
(62,45,2)
(20,15,2)
(32,33,2)
(7,26,2)
(31,12,2)
(33,23,2)
(36,25,2)
(59,15,2)
(19,46,2)
(53,23,2)
(22,46,2)
(2,26,2)
(12,64,2)
(0,26,2)
(63,25,2)
(52,15,2)
(31,6,2)
(66,39,2)
(57,23,2)
(51,26,2)
(6,33,2)
(27,23,2)
(39,1,2)
(10,46,2)
(38,25,2)
(46,26,2)
(65,25,2)
(36,10,2)
(44,23,2)
(31,15,2)
(26,15,2)
(38,26,2)
(45,1,2)
(32,25,2)
(26,31,2)
(45,26,2)
(12,8,2)
(55,26,2)
(4,45,2)
(16,26,2)
(11,23,2)
(30,45,2)
(1,26,2)
(56,23,2)
(37,15,2)
(61,66,2)
(61,45,2)
(14,15,2)
(66,25,2)
-----------------------------------
(0,dataLen)
(1,dataLen = strlen(data)
(2,\\\'\\\\0\\\')
(3,data)
(4,dataLen)
(5,\\\'\\\\0\\\')
(6,data+dataLen)
(7,dataLen)
(8,int)
(9,if (fgets(data+dataLen, (int)
(10,dataLen-1)
(11,data)
(12,(int)
(13,)
(14,100)
(15,100-dataLen > 1)
(16,data)
(17,NULL)
(18,0)
(19,1)
(20,stdin)
(21,printLine("fgets()
(22,dataLen)
(23,CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badGlobal)
(24,)
(25,char * data)
(26,fgets(data+dataLen, (int)
(27,dataLen)
(28,dataLen)
(29,)
(30,1)
(31,fgets(data+dataLen, (int)
(32,data[dataLen])
(33,dataLen = strlen(data)
(34,)
(35,)
(36,data[dataLen-1])
(37,dataLen)
(38,strlen(data)
(39,dataLen-1)
(40,RET)
(41,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(42,if(CWE78_OS_Command_Injection__char_console_w32_spawnv_22_badGlobal)
(43,data)
(44,100-dataLen)
(45,dataLen > 0)
(46,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(47,data)
(48,)
(49,)
(50,if (100-dataLen > 1)
(51,data[dataLen] = \\\'\\\\0\\\')
(52,dataLen)
(53,dataLen)
(54,data[dataLen-1] = \\\'\\\\0\\\')
(55,dataLen)
(56,100)
(57,1)
(58,\\\'\\\\n\\\')
(59,data)
(60,"fgets()
(61,data[dataLen-1] == \\\'\\\\n\\\')
(62,data)
(63,strlen(data)
(64,100-dataLen)
(65,return data;)
(66,data[dataLen-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
