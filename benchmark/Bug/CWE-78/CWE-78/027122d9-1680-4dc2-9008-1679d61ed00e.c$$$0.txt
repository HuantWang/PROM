-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_execvp_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_w32_execvp_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_execvp_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_w32_execvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_execvp_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_execvp_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_w32_execvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_w32_execvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_w32_execvp_22_badGlobal
CWE78_OS_Command_Injection__char_console_w32_execvp_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(56,59,0)
(22,6,0)
(36,22,0)
(45,11,0)
(1,26,0)
(28,42,0)
(27,56,0)
(65,11,0)
(62,28,0)
(9,57,0)
(6,4,0)
(29,31,0)
(14,25,0)
(35,28,0)
(34,59,0)
(15,25,0)
(0,38,0)
(31,28,0)
(43,12,0)
(22,57,0)
(37,54,0)
(32,22,0)
(7,15,0)
(28,12,0)
(17,28,0)
(52,6,0)
(1,25,0)
(62,15,0)
(61,14,0)
(33,65,0)
(65,25,0)
(60,53,0)
(19,26,0)
(23,31,0)
(15,60,0)
(59,46,0)
(6,52,0)
(44,56,0)
(65,56,0)
(10,14,0)
(5,60,0)
(66,62,0)
(58,1,0)
(18,38,0)
(21,62,0)
(19,31,0)
(1,35,0)
(41,42,0)
(15,62,0)
(11,54,0)
(63,59,0)
(49,37,0)
(14,3,0)
(16,52,0)
(4,6,0)
(2,52,0)
(24,57,0)
(39,18,0)
(52,56,0)
(57,25,0)
(30,65,0)
(55,36,0)
(26,19,0)
(27,25,0)
(50,27,0)
(57,56,0)
(31,19,0)
(47,26,0)
(22,36,0)
(18,56,0)
(13,35,0)
(42,25,0)
(40,3,0)
(26,1,0)
(8,35,0)
(42,28,0)
(64,18,0)
(57,22,0)
(38,18,0)
(35,1,0)
(48,51,0)
(56,27,0)
(6,22,0)
(22,32,1)
(55,22,1)
(28,42,1)
(35,28,1)
(19,31,1)
(7,19,1)
(57,9,1)
(65,25,1)
(61,20,1)
(61,19,1)
(16,57,1)
(23,29,1)
(26,1,1)
(36,55,1)
(47,1,1)
(22,6,1)
(17,36,1)
(31,28,1)
(9,24,1)
(10,14,1)
(65,56,1)
(64,39,1)
(58,31,1)
(0,18,1)
(15,62,1)
(19,26,1)
(35,13,1)
(27,50,1)
(1,25,1)
(13,8,1)
(26,47,1)
(21,66,1)
(52,2,1)
(57,25,1)
(5,15,1)
(31,23,1)
(50,44,1)
(38,0,1)
(27,25,1)
(61,38,1)
(66,7,1)
(2,16,1)
(29,28,1)
(62,28,1)
(24,38,1)
(41,17,1)
(1,35,1)
(44,20,1)
(52,56,1)
(62,21,1)
(32,6,1)
(61,11,1)
(65,30,1)
(56,27,1)
(11,45,1)
(42,25,1)
(18,64,1)
(45,65,1)
(6,52,1)
(33,37,1)
(49,36,1)
(8,58,1)
(61,60,1)
(6,4,1)
(60,5,1)
(38,18,1)
(30,33,1)
(14,61,1)
(22,57,1)
(39,56,1)
(57,56,1)
(36,22,1)
(37,49,1)
(14,25,1)
(15,25,1)
(42,41,1)
(18,56,1)
(21,19,2)
(23,36,2)
(29,36,2)
(10,14,2)
(8,31,2)
(7,19,2)
(57,38,2)
(35,28,2)
(58,31,2)
(18,56,2)
(56,27,2)
(26,1,2)
(42,36,2)
(27,20,2)
(31,36,2)
(64,20,2)
(27,25,2)
(37,36,2)
(62,28,2)
(45,36,2)
(39,20,2)
(65,56,2)
(17,36,2)
(19,31,2)
(66,19,2)
(28,36,2)
(13,31,2)
(65,36,2)
(52,38,2)
(36,22,2)
(42,25,2)
(56,20,2)
(44,20,2)
(5,19,2)
(6,52,2)
(35,31,2)
(2,38,2)
(36,38,2)
(65,25,2)
(19,36,2)
(11,36,2)
(15,25,2)
(30,36,2)
(57,25,2)
(57,56,2)
(6,4,2)
(47,31,2)
(41,36,2)
(24,38,2)
(32,38,2)
(22,6,2)
(60,19,2)
(6,38,2)
(1,35,2)
(22,38,2)
(1,31,2)
(28,42,2)
(55,38,2)
(38,18,2)
(52,56,2)
(38,20,2)
(62,19,2)
(33,36,2)
(16,38,2)
(49,36,2)
(26,31,2)
(15,62,2)
(15,19,2)
(18,20,2)
(9,38,2)
(14,25,2)
(22,57,2)
(19,26,2)
(0,20,2)
(50,20,2)
(31,28,2)
(1,25,2)
-----------------------------------
(0,1)
(1,data[dataLen-1])
(2,dataLen)
(3,)
(4,int)
(5,\\\'\\\\0\\\')
(6,(int)
(7,data)
(8,dataLen)
(9,dataLen)
(10,RET)
(11,data[dataLen] = \\\'\\\\0\\\')
(12,)
(13,1)
(14,return data;)
(15,data[dataLen-1])
(16,100)
(17,dataLen)
(18,100-dataLen)
(19,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(20,CWE78_OS_Command_Injection__char_console_w32_execvp_22_badGlobal)
(21,1)
(22,fgets(data+dataLen, (int)
(23,0)
(24,data)
(25,char * data)
(26,data[dataLen-1] == \\\'\\\\n\\\')
(27,strlen(data)
(28,dataLen = strlen(data)
(29,dataLen)
(30,dataLen)
(31,dataLen > 0)
(32,stdin)
(33,data)
(34,if (100-dataLen > 1)
(35,dataLen-1)
(36,fgets(data+dataLen, (int)
(37,printLine("fgets()
(38,100-dataLen > 1)
(39,100)
(40,if(CWE78_OS_Command_Injection__char_console_w32_execvp_22_badGlobal)
(41,data)
(42,strlen(data)
(43,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(44,dataLen)
(45,\\\'\\\\0\\\')
(46,)
(47,\\\'\\\\n\\\')
(48,if (fgets(data+dataLen, (int)
(49,"fgets()
(50,data)
(51,)
(52,100-dataLen)
(53,)
(54,)
(55,NULL)
(56,dataLen = strlen(data)
(57,data+dataLen)
(58,data)
(59,)
(60,data[dataLen-1] = \\\'\\\\0\\\')
(61,data)
(62,dataLen-1)
(63,dataLen)
(64,dataLen)
(65,data[dataLen])
(66,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
