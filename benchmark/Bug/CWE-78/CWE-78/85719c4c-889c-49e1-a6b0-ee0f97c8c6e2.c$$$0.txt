-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_68_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_system_68_badData = data;
    CWE78_OS_Command_Injection__char_console_system_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_68_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_68_badData = data;    CWE78_OS_Command_Injection__char_console_system_68b_badSink();}
void
CWE78_OS_Command_Injection__char_console_system_68_bad()
CWE78_OS_Command_Injection__char_console_system_68_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_68_badData = data;    CWE78_OS_Command_Injection__char_console_system_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_system_68_badData = data;
CWE78_OS_Command_Injection__char_console_system_68_badData = data
CWE78_OS_Command_Injection__char_console_system_68_badData
CWE78_OS_Command_Injection__char_console_system_68_badData
data
data
CWE78_OS_Command_Injection__char_console_system_68b_badSink();
CWE78_OS_Command_Injection__char_console_system_68b_badSink()
CWE78_OS_Command_Injection__char_console_system_68b_badSink
CWE78_OS_Command_Injection__char_console_system_68b_badSink
-----joern-----
(26,42,0)
(31,19,0)
(3,6,0)
(21,17,0)
(24,19,0)
(57,17,0)
(23,57,0)
(7,47,0)
(68,17,0)
(56,61,0)
(64,31,0)
(70,7,0)
(46,68,0)
(32,9,0)
(1,34,0)
(28,61,0)
(30,45,0)
(57,32,0)
(40,32,0)
(25,34,0)
(48,22,0)
(70,22,0)
(59,27,0)
(45,57,0)
(32,34,0)
(61,17,0)
(44,45,0)
(31,32,0)
(6,32,0)
(57,45,0)
(14,59,0)
(0,7,0)
(50,63,0)
(15,35,0)
(69,5,0)
(35,17,0)
(58,54,0)
(45,42,0)
(37,35,0)
(39,2,0)
(53,34,0)
(16,62,0)
(65,60,0)
(67,70,0)
(22,70,0)
(36,32,0)
(4,9,0)
(10,9,0)
(18,17,0)
(66,34,0)
(21,32,0)
(42,45,0)
(51,22,0)
(19,31,0)
(12,66,0)
(58,60,0)
(41,54,0)
(13,2,0)
(9,34,0)
(71,66,0)
(29,60,0)
(61,56,0)
(29,32,0)
(22,19,0)
(17,66,0)
(54,19,0)
(44,68,0)
(35,32,0)
(55,57,0)
(38,54,0)
(35,59,0)
(2,29,0)
(11,61,0)
(5,27,0)
(60,29,0)
(54,58,0)
(52,44,0)
(29,2,0)
(49,29,0)
(19,62,0)
(6,34,0)
(60,58,0)
(17,21,0)
(44,52,0)
(8,6,0)
(45,44,0)
(72,56,0)
(68,44,0)
(2,19,0)
(43,21,0)
(70,32,0)
(20,68,0)
(41,38,1)
(2,13,1)
(13,39,1)
(46,57,1)
(40,9,1)
(20,46,1)
(32,36,1)
(70,22,1)
(56,61,1)
(61,17,1)
(59,14,1)
(28,11,1)
(68,20,1)
(8,59,1)
(8,58,1)
(15,37,1)
(42,45,1)
(43,18,1)
(21,43,1)
(65,29,1)
(54,41,1)
(22,19,1)
(22,51,1)
(17,21,1)
(29,2,1)
(35,32,1)
(8,7,1)
(55,23,1)
(70,32,1)
(68,17,1)
(53,6,1)
(44,68,1)
(35,17,1)
(23,56,1)
(64,24,1)
(56,72,1)
(49,54,1)
(10,4,1)
(8,56,1)
(58,54,1)
(60,29,1)
(0,70,1)
(57,17,1)
(58,60,1)
(6,3,1)
(37,5,1)
(7,0,1)
(31,64,1)
(54,19,1)
(48,67,1)
(72,61,1)
(21,32,1)
(11,17,1)
(26,45,1)
(57,55,1)
(51,48,1)
(14,35,1)
(44,52,1)
(5,69,1)
(24,42,1)
(67,58,1)
(69,42,1)
(42,26,1)
(38,19,1)
(45,30,1)
(18,32,1)
(45,44,1)
(45,57,1)
(2,19,1)
(32,9,1)
(3,8,1)
(57,32,1)
(29,32,1)
(30,44,1)
(35,15,1)
(19,31,1)
(9,10,1)
(31,32,1)
(39,49,1)
(61,28,1)
(60,65,1)
(6,32,1)
(36,40,1)
(33,53,1)
(37,42,2)
(5,42,2)
(58,42,2)
(6,32,2)
(35,17,2)
(70,22,2)
(29,32,2)
(44,52,2)
(32,9,2)
(65,54,2)
(70,58,2)
(69,42,2)
(46,56,2)
(0,58,2)
(51,58,2)
(39,54,2)
(54,19,2)
(58,54,2)
(45,56,2)
(15,42,2)
(14,42,2)
(31,42,2)
(26,56,2)
(57,32,2)
(45,57,2)
(56,61,2)
(44,56,2)
(70,32,2)
(55,56,2)
(58,60,2)
(29,54,2)
(57,56,2)
(29,2,2)
(35,32,2)
(60,54,2)
(22,19,2)
(35,42,2)
(64,42,2)
(2,54,2)
(59,42,2)
(48,58,2)
(60,29,2)
(61,17,2)
(54,42,2)
(19,42,2)
(67,58,2)
(68,17,2)
(42,45,2)
(24,42,2)
(68,56,2)
(23,56,2)
(20,56,2)
(17,21,2)
(7,58,2)
(57,17,2)
(42,56,2)
(49,54,2)
(19,31,2)
(31,32,2)
(22,58,2)
(45,44,2)
(13,54,2)
(38,42,2)
(44,68,2)
(21,32,2)
(2,19,2)
(41,42,2)
(30,56,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,data_buf)
(2,dataLen-1)
(3,data)
(4,data_buf)
(5,printLine("fgets()
(6,CWE78_OS_Command_Injection__char_console_system_68_badData = data)
(7,data[dataLen-1] = \\\'\\\\0\\\')
(8,CWE78_OS_Command_Injection__char_console_system_68_badData)
(9,data_buf[100] = FULL_COMMAND)
(10,FULL_COMMAND)
(11,100)
(12,if (100-dataLen > 1)
(13,1)
(14,\\\'\\\\0\\\')
(15,dataLen)
(16,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(17,dataLen = strlen(data)
(18,dataLen)
(19,dataLen = strlen(data)
(20,dataLen)
(21,strlen(data)
(22,dataLen-1)
(23,data)
(24,dataLen)
(25,data)
(26,NULL)
(27,)
(28,dataLen)
(29,data[dataLen-1])
(30,stdin)
(31,strlen(data)
(32,data = data_buf)
(33,RET)
(34,)
(35,data[dataLen])
(36,data_buf)
(37,data)
(38,dataLen)
(39,dataLen)
(40,data)
(41,0)
(42,fgets(data+dataLen, (int)
(43,data)
(44,(int)
(45,fgets(data+dataLen, (int)
(46,100)
(47,)
(48,dataLen)
(49,data)
(50,if (fgets(data+dataLen, (int)
(51,1)
(52,int)
(53,CWE78_OS_Command_Injection__char_console_system_68b_badSink()
(54,dataLen > 0)
(55,dataLen)
(56,100-dataLen > 1)
(57,data+dataLen)
(58,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,data[dataLen] = \\\'\\\\0\\\')
(60,data[dataLen-1] == \\\'\\\\n\\\')
(61,100-dataLen)
(62,)
(63,)
(64,data)
(65,\\\'\\\\n\\\')
(66,)
(67,data)
(68,100-dataLen)
(69,"fgets()
(70,data[dataLen-1])
(71,dataLen)
(72,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
