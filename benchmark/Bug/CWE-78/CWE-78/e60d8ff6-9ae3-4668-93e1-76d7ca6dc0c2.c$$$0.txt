-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_11_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalReturnsTrue())
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
127,128
127,129
127,130
128,129
129,130
129,131
130,131
132,133
132,134
135,136
136,137
136,138
137,138
139,140
139,141
139,142
140,141
142,143
145,146
145,147
146,147
146,148
147,148
149,150
151,152
152,153
153,154
153,155
154,155
156,157
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,131,133,134,138,141,143,144,148,150,155,157
-----computeFrom-----
23,24
23,25
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
136,137
136,138
146,147
146,148
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
148,157
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_11_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__char_console_popen_11_bad()
CWE78_OS_Command_Injection__char_console_popen_11_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalReturnsTrue())    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(33,48,0)
(20,84,0)
(35,48,0)
(38,78,0)
(45,20,0)
(16,30,0)
(69,52,0)
(52,47,0)
(29,84,0)
(25,12,0)
(75,54,0)
(50,48,0)
(54,74,0)
(20,48,0)
(60,16,0)
(37,54,0)
(36,22,0)
(77,32,0)
(28,51,0)
(74,63,0)
(18,15,0)
(72,46,0)
(78,0,0)
(51,15,0)
(71,51,0)
(41,30,0)
(52,54,0)
(59,27,0)
(73,27,0)
(22,0,0)
(52,48,0)
(76,85,0)
(0,48,0)
(50,54,0)
(22,16,0)
(9,23,0)
(19,85,0)
(77,33,0)
(24,12,0)
(67,37,0)
(66,16,0)
(43,74,0)
(27,51,0)
(79,84,0)
(59,54,0)
(42,59,0)
(49,33,0)
(10,77,0)
(56,67,0)
(51,27,0)
(40,74,0)
(23,77,0)
(27,73,0)
(0,78,0)
(85,16,0)
(15,48,0)
(6,23,0)
(26,32,0)
(32,12,0)
(16,66,0)
(21,77,0)
(65,50,0)
(8,33,0)
(62,47,0)
(3,48,0)
(61,2,0)
(48,12,0)
(48,68,0)
(15,54,0)
(53,66,0)
(70,32,0)
(64,81,0)
(5,68,0)
(31,37,0)
(20,64,0)
(39,0,0)
(54,50,0)
(33,77,0)
(1,12,0)
(84,16,0)
(14,78,0)
(47,46,0)
(15,51,0)
(17,64,0)
(84,20,0)
(11,15,0)
(57,68,0)
(34,22,0)
(68,12,0)
(7,59,0)
(0,22,0)
(83,71,0)
(10,58,0)
(44,10,0)
(78,14,0)
(82,37,0)
(66,48,0)
(85,14,0)
(27,59,0)
(4,72,0)
(51,71,0)
(80,52,0)
(14,85,0)
(37,67,0)
(67,37,1)
(59,54,1)
(16,66,1)
(53,60,1)
(82,31,1)
(0,22,1)
(15,11,1)
(45,14,1)
(11,18,1)
(67,56,1)
(69,72,1)
(78,38,1)
(3,68,1)
(66,53,1)
(13,48,1)
(72,4,1)
(18,67,1)
(21,47,1)
(42,15,1)
(34,39,1)
(62,52,1)
(31,54,1)
(10,77,1)
(10,44,1)
(65,75,1)
(35,3,1)
(55,23,1)
(66,48,1)
(52,48,1)
(71,83,1)
(47,62,1)
(27,59,1)
(20,84,1)
(28,27,1)
(78,0,1)
(15,54,1)
(39,85,1)
(5,57,1)
(22,36,1)
(51,28,1)
(29,79,1)
(64,17,1)
(19,76,1)
(8,49,1)
(48,35,1)
(49,21,1)
(22,16,1)
(54,50,1)
(59,7,1)
(68,5,1)
(85,19,1)
(83,51,1)
(79,45,1)
(75,13,1)
(50,48,1)
(55,10,1)
(36,34,1)
(51,15,1)
(21,14,1)
(15,48,1)
(9,6,1)
(48,68,1)
(21,64,1)
(33,8,1)
(17,20,1)
(21,13,1)
(84,16,1)
(51,27,1)
(33,48,1)
(20,48,1)
(27,73,1)
(85,16,1)
(44,23,1)
(37,82,1)
(50,65,1)
(14,78,1)
(23,9,1)
(7,42,1)
(21,67,1)
(23,77,1)
(56,37,1)
(80,69,1)
(14,85,1)
(84,29,1)
(6,77,1)
(38,0,1)
(52,80,1)
(52,54,1)
(60,71,1)
(77,33,1)
(4,71,1)
(0,48,1)
(76,16,1)
(71,51,1)
(37,54,1)
(28,67,2)
(0,48,2)
(62,71,2)
(10,23,2)
(83,67,2)
(72,71,2)
(31,13,2)
(14,85,2)
(85,71,2)
(59,67,2)
(33,48,2)
(65,13,2)
(47,71,2)
(69,71,2)
(22,16,2)
(48,68,2)
(50,48,2)
(15,48,2)
(37,13,2)
(16,71,2)
(4,71,2)
(52,48,2)
(78,0,2)
(60,71,2)
(20,48,2)
(79,14,2)
(67,37,2)
(53,71,2)
(15,54,2)
(27,59,2)
(64,14,2)
(22,85,2)
(66,71,2)
(23,77,2)
(76,71,2)
(54,13,2)
(56,13,2)
(71,67,2)
(29,14,2)
(84,16,2)
(54,50,2)
(52,71,2)
(82,13,2)
(0,22,2)
(20,84,2)
(14,78,2)
(10,77,2)
(45,14,2)
(39,85,2)
(75,13,2)
(27,67,2)
(59,54,2)
(19,71,2)
(14,71,2)
(0,85,2)
(51,15,2)
(84,14,2)
(66,48,2)
(36,85,2)
(20,14,2)
(52,54,2)
(11,67,2)
(7,67,2)
(42,67,2)
(80,71,2)
(34,85,2)
(37,54,2)
(67,13,2)
(38,85,2)
(85,16,2)
(18,67,2)
(44,23,2)
(78,85,2)
(15,67,2)
(16,66,2)
(27,73,2)
(51,27,2)
(71,51,2)
(77,33,2)
(17,14,2)
(50,13,2)
(51,67,2)
-----------------------------------
(0,data[dataLen-1])
(1,data_buf)
(2,)
(3,data)
(4,"fgets()
(5,FULL_COMMAND)
(6,pipe)
(7,dataLen)
(8,"w")
(9,NULL)
(10,PCLOSE(pipe)
(11,dataLen)
(12,)
(13,globalReturnsTrue()
(14,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(15,data+dataLen)
(16,dataLen = strlen(data)
(17,\\\'\\\\0\\\')
(18,data)
(19,0)
(20,data[dataLen-1])
(21,pipe)
(22,dataLen-1)
(23,pipe != NULL)
(24,if(globalReturnsTrue()
(25,data)
(26,if (pipe != NULL)
(27,(int)
(28,stdin)
(29,1)
(30,)
(31,100)
(32,)
(33,POPEN(data, "w")
(34,dataLen)
(35,data_buf)
(36,1)
(37,100-dataLen)
(38,\\\'\\\\n\\\')
(39,data)
(40,dataLen)
(41,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(42,100)
(43,if (100-dataLen > 1)
(44,pipe)
(45,data)
(46,)
(47,data[dataLen] = \\\'\\\\0\\\')
(48,data = data_buf)
(49,data)
(50,strlen(data)
(51,fgets(data+dataLen, (int)
(52,data[dataLen])
(53,data)
(54,dataLen = strlen(data)
(55,RET)
(56,1)
(57,data_buf)
(58,)
(59,100-dataLen)
(60,dataLen)
(61,if (fgets(data+dataLen, (int)
(62,\\\'\\\\0\\\')
(63,)
(64,data[dataLen-1] = \\\'\\\\0\\\')
(65,data)
(66,strlen(data)
(67,100-dataLen > 1)
(68,data_buf[100] = FULL_COMMAND)
(69,data)
(70,pipe)
(71,fgets(data+dataLen, (int)
(72,printLine("fgets()
(73,int)
(74,)
(75,dataLen)
(76,dataLen)
(77,pipe = POPEN(data, "w")
(78,data[dataLen-1] == \\\'\\\\n\\\')
(79,dataLen)
(80,dataLen)
(81,)
(82,dataLen)
(83,NULL)
(84,dataLen-1)
(85,dataLen > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
