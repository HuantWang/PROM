-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_53_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_53_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32spawnl_53_bad()
CWE78_OS_Command_Injection__char_console_w32spawnl_53_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink
CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink
data
data
-----joern-----
(20,65,0)
(50,41,0)
(51,16,0)
(13,46,0)
(45,22,0)
(18,21,0)
(17,32,0)
(46,49,0)
(58,21,0)
(31,32,0)
(60,17,0)
(48,49,0)
(2,65,0)
(36,49,0)
(55,51,0)
(16,63,0)
(11,38,0)
(24,62,0)
(8,35,0)
(62,58,0)
(12,44,0)
(41,23,0)
(1,51,0)
(38,11,0)
(60,30,0)
(29,58,0)
(49,54,0)
(49,65,0)
(30,38,0)
(26,33,0)
(3,54,0)
(21,16,0)
(58,62,0)
(48,31,0)
(25,9,0)
(32,34,0)
(11,32,0)
(48,45,0)
(6,65,0)
(31,48,0)
(46,65,0)
(56,11,0)
(61,11,0)
(30,60,0)
(57,31,0)
(35,67,0)
(36,32,0)
(7,30,0)
(16,6,0)
(68,6,0)
(21,58,0)
(69,34,0)
(66,32,0)
(27,21,0)
(4,35,0)
(63,49,0)
(44,23,0)
(17,60,0)
(9,49,0)
(70,48,0)
(67,35,0)
(42,49,0)
(67,58,0)
(54,65,0)
(5,67,0)
(43,0,0)
(40,49,0)
(21,49,0)
(51,0,0)
(9,16,0)
(58,67,0)
(38,30,0)
(10,31,0)
(14,45,0)
(39,38,0)
(28,17,0)
(63,16,0)
(38,49,0)
(59,63,0)
(15,17,0)
(9,41,0)
(67,5,0)
(37,9,0)
(35,16,0)
(64,6,0)
(53,36,0)
(19,54,0)
(0,51,0)
(47,16,0)
(32,36,0)
(0,43,1)
(0,51,1)
(60,30,1)
(49,42,1)
(31,32,1)
(42,40,1)
(58,67,1)
(35,16,1)
(47,49,1)
(39,17,1)
(25,37,1)
(18,27,1)
(13,60,1)
(9,25,1)
(45,14,1)
(70,60,1)
(53,66,1)
(48,31,1)
(30,7,1)
(27,0,1)
(41,50,1)
(13,0,1)
(1,55,1)
(3,19,1)
(28,32,1)
(9,16,1)
(46,13,1)
(24,58,1)
(63,59,1)
(67,35,1)
(38,11,1)
(4,8,1)
(15,28,1)
(51,16,1)
(36,49,1)
(13,45,1)
(8,21,1)
(46,49,1)
(58,21,1)
(21,49,1)
(32,36,1)
(52,46,1)
(54,3,1)
(50,9,1)
(40,54,1)
(9,49,1)
(62,58,1)
(16,63,1)
(51,1,1)
(63,49,1)
(35,4,1)
(10,57,1)
(58,29,1)
(59,47,1)
(38,49,1)
(48,49,1)
(62,24,1)
(57,70,1)
(61,39,1)
(30,38,1)
(13,41,1)
(17,32,1)
(49,54,1)
(56,61,1)
(36,53,1)
(66,62,1)
(44,12,1)
(29,67,1)
(43,51,1)
(31,10,1)
(12,62,1)
(11,56,1)
(37,44,1)
(17,15,1)
(60,17,1)
(21,16,1)
(21,18,1)
(67,5,1)
(55,16,1)
(11,32,1)
(7,38,1)
(14,48,1)
(48,60,2)
(58,0,2)
(60,62,2)
(60,30,2)
(31,60,2)
(7,17,2)
(45,60,2)
(38,17,2)
(70,60,2)
(16,63,2)
(58,67,2)
(51,16,2)
(48,49,2)
(37,62,2)
(49,54,2)
(56,17,2)
(58,21,2)
(67,5,2)
(30,17,2)
(25,62,2)
(29,0,2)
(21,16,2)
(8,0,2)
(0,51,2)
(15,62,2)
(36,62,2)
(12,62,2)
(21,49,2)
(38,49,2)
(50,62,2)
(32,62,2)
(31,32,2)
(21,0,2)
(38,11,2)
(28,62,2)
(9,62,2)
(44,62,2)
(41,62,2)
(62,58,2)
(35,0,2)
(4,0,2)
(9,49,2)
(14,60,2)
(17,62,2)
(67,35,2)
(46,49,2)
(61,17,2)
(57,60,2)
(18,0,2)
(27,0,2)
(11,32,2)
(60,17,2)
(62,0,2)
(30,38,2)
(24,0,2)
(66,62,2)
(11,17,2)
(32,36,2)
(35,16,2)
(48,31,2)
(36,49,2)
(17,32,2)
(53,62,2)
(67,0,2)
(63,49,2)
(9,16,2)
(39,17,2)
(10,60,2)
-----------------------------------
(0,100-dataLen > 1)
(1,dataLen)
(2,data)
(3,COMMAND_ARG2)
(4,dataLen)
(5,int)
(6,)
(7,\\\'\\\\n\\\')
(8,100)
(9,data[dataLen])
(10,1)
(11,dataLen-1)
(12,"fgets()
(13,data)
(14,\\\'\\\\0\\\')
(15,0)
(16,dataLen = strlen(data)
(17,dataLen > 0)
(18,dataLen)
(19,dataBuffer)
(20,dataBuffer)
(21,data+dataLen)
(22,)
(23,)
(24,NULL)
(25,dataLen)
(26,if (fgets(data+dataLen, (int)
(27,data)
(28,dataLen)
(29,stdin)
(30,data[dataLen-1] == \\\'\\\\n\\\')
(31,dataLen-1)
(32,dataLen = strlen(data)
(33,)
(34,)
(35,100-dataLen)
(36,strlen(data)
(37,data)
(38,data[dataLen-1])
(39,data)
(40,data)
(41,data[dataLen] = \\\'\\\\0\\\')
(42,dataBuffer)
(43,1)
(44,printLine("fgets()
(45,data[dataLen-1] = \\\'\\\\0\\\')
(46,CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data)
(47,dataLen)
(48,data[dataLen-1])
(49,data = dataBuffer)
(50,\\\'\\\\0\\\')
(51,100-dataLen)
(52,RET)
(53,data)
(54,dataBuffer[100] = COMMAND_ARG2)
(55,100)
(56,1)
(57,dataLen)
(58,fgets(data+dataLen, (int)
(59,data)
(60,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,dataLen)
(62,fgets(data+dataLen, (int)
(63,strlen(data)
(64,dataLen)
(65,)
(66,dataLen)
(67,(int)
(68,if (100-dataLen > 1)
(69,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(70,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
