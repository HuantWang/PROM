-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_execlp_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_execlp_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_execlp_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_execlp_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal
CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(12,35,0)
(31,40,0)
(1,7,0)
(15,50,0)
(11,65,0)
(63,35,0)
(45,41,0)
(36,18,0)
(60,55,0)
(59,53,0)
(66,53,0)
(25,30,0)
(35,15,0)
(55,60,0)
(30,11,0)
(52,50,0)
(40,11,0)
(3,38,0)
(51,38,0)
(22,36,0)
(0,53,0)
(8,15,0)
(56,59,0)
(30,23,0)
(53,11,0)
(38,3,0)
(5,15,0)
(19,2,0)
(3,26,0)
(14,26,0)
(42,34,0)
(27,11,0)
(61,60,0)
(24,65,0)
(65,18,0)
(26,3,0)
(59,18,0)
(59,33,0)
(4,36,0)
(60,15,0)
(26,49,0)
(23,30,0)
(5,18,0)
(29,60,0)
(15,5,0)
(33,59,0)
(53,59,0)
(49,15,0)
(62,55,0)
(36,3,0)
(50,46,0)
(65,11,0)
(54,49,0)
(10,1,0)
(26,14,0)
(43,5,0)
(1,18,0)
(11,21,0)
(32,30,0)
(28,7,0)
(9,40,0)
(58,21,0)
(64,3,0)
(49,26,0)
(36,15,0)
(9,34,0)
(35,2,0)
(40,9,0)
(13,33,0)
(9,18,0)
(2,41,0)
(6,47,0)
(44,45,0)
(17,1,0)
(48,9,0)
(23,33,0)
(37,49,0)
(35,18,0)
(16,50,0)
(57,40,0)
(3,36,0)
(33,23,0)
(34,39,0)
(24,27,1)
(12,63,1)
(40,31,1)
(53,66,1)
(23,33,1)
(37,54,1)
(54,36,1)
(56,30,1)
(33,59,1)
(60,61,1)
(59,18,1)
(35,18,1)
(26,49,1)
(35,12,1)
(48,23,1)
(35,15,1)
(17,1,1)
(23,30,1)
(64,26,1)
(2,19,1)
(38,3,1)
(5,43,1)
(33,13,1)
(43,8,1)
(9,18,1)
(25,32,1)
(61,29,1)
(19,35,1)
(42,9,1)
(10,20,1)
(8,20,1)
(27,38,1)
(3,26,1)
(31,57,1)
(62,60,1)
(30,11,1)
(51,3,1)
(49,15,1)
(10,2,1)
(36,15,1)
(10,34,1)
(40,11,1)
(3,36,1)
(29,15,1)
(10,23,1)
(63,45,1)
(5,18,1)
(10,55,1)
(26,14,1)
(32,11,1)
(36,18,1)
(44,38,1)
(15,5,1)
(36,22,1)
(53,11,1)
(3,64,1)
(1,18,1)
(66,0,1)
(22,4,1)
(65,18,1)
(45,44,1)
(30,25,1)
(60,15,1)
(11,65,1)
(34,42,1)
(65,24,1)
(49,37,1)
(38,51,1)
(59,53,1)
(55,60,1)
(13,59,1)
(4,55,1)
(1,10,1)
(55,62,1)
(9,40,1)
(57,48,1)
(0,56,1)
(55,60,2)
(60,20,2)
(17,1,2)
(13,30,2)
(22,55,2)
(60,15,2)
(43,20,2)
(24,38,2)
(65,38,2)
(34,23,2)
(40,23,2)
(27,38,2)
(32,38,2)
(26,49,2)
(49,15,2)
(64,55,2)
(36,15,2)
(23,38,2)
(38,55,2)
(35,38,2)
(35,15,2)
(8,20,2)
(4,55,2)
(65,18,2)
(3,36,2)
(45,38,2)
(1,18,2)
(26,14,2)
(5,18,2)
(35,18,2)
(9,18,2)
(30,38,2)
(38,3,2)
(19,38,2)
(5,20,2)
(36,18,2)
(56,30,2)
(40,11,2)
(12,38,2)
(33,59,2)
(15,20,2)
(3,55,2)
(9,40,2)
(15,5,2)
(30,11,2)
(11,65,2)
(9,23,2)
(23,33,2)
(62,20,2)
(36,55,2)
(42,23,2)
(53,30,2)
(44,38,2)
(63,38,2)
(59,18,2)
(11,38,2)
(57,23,2)
(48,23,2)
(2,38,2)
(59,53,2)
(54,55,2)
(0,30,2)
(33,30,2)
(26,55,2)
(51,55,2)
(59,30,2)
(25,38,2)
(49,55,2)
(3,26,2)
(37,55,2)
(66,30,2)
(61,20,2)
(55,20,2)
(53,11,2)
(31,23,2)
(29,20,2)
(23,30,2)
-----------------------------------
(0,dataLen)
(1,return data;)
(2,data[dataLen] = \\\'\\\\0\\\')
(3,fgets(data+dataLen, (int)
(4,data)
(5,strlen(data)
(6,if (fgets(data+dataLen, (int)
(7,)
(8,dataLen)
(9,data[dataLen-1])
(10,data)
(11,dataLen = strlen(data)
(12,dataLen)
(13,\\\'\\\\n\\\')
(14,int)
(15,dataLen = strlen(data)
(16,if (100-dataLen > 1)
(17,RET)
(18,char * data)
(19,\\\'\\\\0\\\')
(20,CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)
(21,)
(22,dataLen)
(23,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(24,data)
(25,0)
(26,(int)
(27,dataLen)
(28,if(CWE78_OS_Command_Injection__char_console_execlp_22_badGlobal)
(29,100)
(30,dataLen > 0)
(31,1)
(32,dataLen)
(33,data[dataLen-1] == \\\'\\\\n\\\')
(34,data[dataLen-1] = \\\'\\\\0\\\')
(35,data[dataLen])
(36,data+dataLen)
(37,dataLen)
(38,fgets(data+dataLen, (int)
(39,)
(40,dataLen-1)
(41,)
(42,\\\'\\\\0\\\')
(43,data)
(44,"fgets()
(45,printLine("fgets()
(46,)
(47,)
(48,data)
(49,100-dataLen)
(50,)
(51,NULL)
(52,dataLen)
(53,dataLen-1)
(54,100)
(55,100-dataLen > 1)
(56,data)
(57,dataLen)
(58,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,data[dataLen-1])
(60,100-dataLen)
(61,dataLen)
(62,1)
(63,data)
(64,stdin)
(65,strlen(data)
(66,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
