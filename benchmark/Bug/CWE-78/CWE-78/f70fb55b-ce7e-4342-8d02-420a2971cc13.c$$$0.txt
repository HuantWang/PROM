-----label-----
1
-----code-----
wchar_t * CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badSource(wchar_t * data)
{
    if(CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = wcslen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgetws() */
                    dataLen = wcslen(data);
                    if (dataLen > 0 && data[dataLen-1] == L'\n')
                    {
                        data[dataLen-1] = L'\0';
                    }
                }
                else
                {
                    printLine("fgetws() failed");
                    /* Restore NUL terminator if fgetws fails */
                    data[dataLen] = L'\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
wchar_t * CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badSource(wchar_t * data){    if(CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    return data;}
wchar_t
* CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badSource(wchar_t * data)
*
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badSource
wchar_t * data
wchar_t
* data
*
data
{    if(CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badGlobal
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = wcslen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }            }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }                else                {                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgetws() */                    dataLen = wcslen(data);                    if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }                }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                    {                        data[dataLen-1] = L'\0';                    }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                        data[dataLen-1] = L'\0';                    }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                    printLine("fgetws() failed");                    /* Restore NUL terminator if fgetws fails */                    data[dataLen] = L'\0';                }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
return data;
data
data
-----joern-----
(5,33,0)
(29,8,0)
(4,18,0)
(32,12,0)
(22,38,0)
(28,8,0)
(5,42,0)
(38,43,0)
(29,36,0)
(2,11,0)
(7,26,0)
(15,6,0)
(20,42,0)
(40,0,0)
(19,36,0)
(26,11,0)
(26,10,0)
(1,12,0)
(36,26,0)
(43,38,0)
(12,15,0)
(8,29,0)
(37,16,0)
(0,23,0)
(38,26,0)
(10,21,0)
(9,11,0)
(25,21,0)
(17,25,0)
(15,12,0)
(27,29,0)
(10,26,0)
(29,15,0)
(24,30,0)
(36,29,0)
(44,38,0)
(30,33,0)
(12,26,0)
(42,21,0)
(36,21,0)
(11,3,0)
(42,5,0)
(25,16,0)
(34,36,0)
(39,10,0)
(35,25,0)
(31,23,0)
(6,15,0)
(14,5,0)
(41,43,0)
(15,29,0)
(40,8,1)
(35,43,1)
(1,32,1)
(43,38,1)
(32,36,1)
(20,14,1)
(5,42,1)
(25,21,1)
(10,21,1)
(24,5,1)
(34,19,1)
(7,13,1)
(19,43,1)
(36,26,1)
(12,26,1)
(42,20,1)
(29,36,1)
(42,21,1)
(15,6,1)
(0,40,1)
(8,28,1)
(31,0,1)
(12,1,1)
(29,15,1)
(8,29,1)
(22,44,1)
(38,22,1)
(17,25,1)
(35,31,1)
(43,41,1)
(44,26,1)
(14,8,1)
(15,12,1)
(41,38,1)
(27,15,1)
(38,26,1)
(10,39,1)
(36,34,1)
(28,29,1)
(29,27,1)
(35,24,1)
(39,7,1)
(26,10,1)
(25,35,1)
(36,21,1)
(35,13,1)
(24,8,2)
(5,8,2)
(15,12,2)
(12,43,2)
(8,43,2)
(44,13,2)
(32,43,2)
(15,6,2)
(39,13,2)
(15,43,2)
(26,13,2)
(8,29,2)
(36,43,2)
(1,43,2)
(14,8,2)
(43,13,2)
(12,26,2)
(36,21,2)
(42,8,2)
(36,26,2)
(5,42,2)
(22,13,2)
(19,43,2)
(20,8,2)
(7,13,2)
(42,21,2)
(41,13,2)
(29,43,2)
(27,43,2)
(10,13,2)
(31,8,2)
(0,8,2)
(29,36,2)
(28,43,2)
(10,21,2)
(43,38,2)
(17,25,2)
(40,8,2)
(29,15,2)
(34,43,2)
(25,21,2)
(26,10,2)
(38,13,2)
(38,26,2)
-----------------------------------
(0,printLine("fgetws()
(1,dataLen)
(2,dataLen)
(3,)
(4,if (fgetws(data+dataLen, (int)
(5,dataLen = wcslen(data)
(6,int)
(7,dataLen)
(8,fgetws(data+dataLen, (int)
(9,if (100-dataLen > 1)
(10,wcslen(data)
(11,)
(12,100-dataLen)
(13,CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badGlobal)
(14,dataLen)
(15,(int)
(16,)
(17,RET)
(18,)
(19,data)
(20,data)
(21,wchar_t * data)
(22,dataLen)
(23,)
(24,\\\'\\\\0\\\')
(25,return data;)
(26,dataLen = wcslen(data)
(27,stdin)
(28,NULL)
(29,fgetws(data+dataLen, (int)
(30,)
(31,\\\'\\\\0\\\')
(32,100)
(33,)
(34,dataLen)
(35,data)
(36,data+dataLen)
(37,if(CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_22_badGlobal)
(38,100-dataLen)
(39,data)
(40,"fgetws()
(41,1)
(42,wcslen(data)
(43,100-dataLen > 1)
(44,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
