-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_execl_17_bad()
{
    int i;
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(i = 0; i < 1; i++)
    {
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    /* wexecl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
47,49
47,50
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
67,68
67,69
68,69
68,70
69,70
69,71
71,72
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
79,82
80,81
82,83
85,86
85,87
86,87
86,88
87,88
89,90
91,92
91,93
92,93
92,94
93,94
93,95
94,95
94,96
94,97
94,98
95,96
97,98
97,99
98,99
100,101
102,103
102,104
103,104
103,105
106,107
107,108
107,109
109,110
111,112
113,114
115,116
115,117
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
123,125
124,125
126,127
129,130
130,131
130,132
131,132
133,134
135,136
136,137
136,138
136,139
136,140
136,141
136,142
137,138
139,140
141,142
143,144
145,146
147,148
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,51,53,57,59,63,65,66,70,72,73,78,81,83,84,88,90,96,99,101,104,105,108,110,112,114,119,120,125,127,128,132,134,138,140,142,144,146,148
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
68,69
68,70
69,70
69,71
76,77
76,78
86,87
86,88
93,94
93,95
97,98
97,99
107,108
107,109
122,123
122,124
-----guardedBy-----
72,127
90,114
88,134
99,125
110,127
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_execl_17_bad(){    int i;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    /* wexecl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__wchar_t_file_execl_17_bad()
CWE78_OS_Command_Injection__wchar_t_file_execl_17_bad
{    int i;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    /* wexecl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
int i;
int i;
int
i
i
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(i = 0; i < 1; i++)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(61,2,0)
(24,31,0)
(52,30,0)
(37,26,0)
(57,26,0)
(68,17,0)
(20,52,0)
(6,57,0)
(50,6,0)
(11,41,0)
(14,46,0)
(56,2,0)
(65,29,0)
(39,57,0)
(17,21,0)
(6,68,0)
(62,52,0)
(66,9,0)
(27,52,0)
(32,65,0)
(64,45,0)
(65,57,0)
(26,15,0)
(21,17,0)
(3,57,0)
(57,3,0)
(45,9,0)
(10,28,0)
(68,60,0)
(33,19,0)
(31,25,0)
(22,17,0)
(1,30,0)
(34,21,0)
(21,41,0)
(19,30,0)
(38,24,0)
(51,26,0)
(47,9,0)
(8,6,0)
(41,19,0)
(17,31,0)
(60,68,0)
(3,41,0)
(17,68,0)
(2,9,0)
(63,46,0)
(13,26,0)
(5,19,0)
(49,44,0)
(28,44,0)
(68,6,0)
(40,29,0)
(67,41,0)
(21,57,0)
(29,65,0)
(16,24,0)
(59,21,0)
(17,0,0)
(23,65,0)
(53,0,0)
(31,46,0)
(7,52,0)
(54,52,0)
(46,31,0)
(48,30,0)
(4,58,0)
(36,25,0)
(18,30,0)
(12,3,0)
(28,31,0)
(0,17,0)
(69,4,0)
(42,30,0)
(55,58,0)
(43,31,0)
(41,30,0)
(66,41,1)
(2,61,1)
(32,23,1)
(62,7,1)
(17,31,1)
(12,39,1)
(64,29,1)
(21,41,1)
(63,43,1)
(27,54,1)
(21,57,1)
(22,68,1)
(7,2,1)
(57,3,1)
(61,56,1)
(56,9,1)
(56,45,1)
(0,17,1)
(31,46,1)
(24,38,1)
(68,60,1)
(52,27,1)
(20,62,1)
(29,40,1)
(40,65,1)
(45,9,1)
(68,6,1)
(4,69,1)
(17,22,1)
(10,55,1)
(64,28,1)
(46,14,1)
(65,32,1)
(53,17,1)
(38,16,1)
(64,24,1)
(6,57,1)
(3,12,1)
(5,33,1)
(55,4,1)
(29,65,1)
(11,19,1)
(28,10,1)
(17,21,1)
(47,66,1)
(2,9,1)
(39,2,1)
(24,31,1)
(34,59,1)
(3,41,1)
(41,67,1)
(54,20,1)
(43,29,1)
(21,34,1)
(67,11,1)
(19,5,1)
(35,52,1)
(69,0,1)
(23,57,1)
(65,57,1)
(28,31,1)
(8,21,1)
(50,8,1)
(6,50,1)
(10,0,1)
(59,24,1)
(16,31,1)
(41,19,1)
(14,63,1)
(0,53,1)
(17,68,1)
(45,64,1)
(9,47,1)
(63,29,2)
(6,57,2)
(21,24,2)
(28,31,2)
(45,2,2)
(28,24,2)
(39,2,2)
(21,57,2)
(16,29,2)
(12,2,2)
(55,0,2)
(68,24,2)
(68,60,2)
(50,24,2)
(53,24,2)
(0,24,2)
(59,24,2)
(21,41,2)
(32,2,2)
(68,6,2)
(64,2,2)
(24,29,2)
(3,2,2)
(65,2,2)
(69,0,2)
(45,9,2)
(0,17,2)
(31,46,2)
(4,0,2)
(40,2,2)
(17,31,2)
(57,3,2)
(17,68,2)
(8,24,2)
(2,9,2)
(61,2,2)
(17,24,2)
(29,65,2)
(31,29,2)
(22,24,2)
(17,21,2)
(46,29,2)
(38,29,2)
(14,29,2)
(56,2,2)
(43,29,2)
(23,2,2)
(57,2,2)
(29,2,2)
(6,24,2)
(3,41,2)
(24,31,2)
(34,24,2)
(65,57,2)
(10,24,2)
(2,2,2)
(41,19,2)
-----------------------------------
(0,fgetws(data+dataLen, (int)
(1,i)
(2,i < 1)
(3,wcslen(data)
(4,printLine("fgetws()
(5,COMMAND_ARG2)
(6,100-dataLen)
(7,COMMAND_INT_PATH)
(8,100)
(9,i = 0)
(10,pFile)
(11,data)
(12,data)
(13,pFile)
(14,"r")
(15,)
(16,pFile)
(17,fgetws(data+dataLen, (int)
(18,dataBuffer)
(19,dataBuffer[100] = COMMAND_ARG2)
(20,COMMAND_ARG1)
(21,data+dataLen)
(22,pFile)
(23,100)
(24,pFile != NULL)
(25,)
(26,)
(27,NULL)
(28,fclose(pFile)
(29,100-dataLen > 1)
(30,)
(31,pFile = fopen(FILENAME, "r")
(32,dataLen)
(33,dataBuffer)
(34,dataLen)
(35,RET)
(36,if (pFile != NULL)
(37,dataLen)
(38,NULL)
(39,dataLen)
(40,1)
(41,data = dataBuffer)
(42,data)
(43,pFile)
(44,)
(45,i++)
(46,fopen(FILENAME, "r")
(47,0)
(48,for(i = 0; i < 1; i++)
(49,if (fgetws(data+dataLen, (int)
(50,dataLen)
(51,if (100-dataLen > 1)
(52,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(53,NULL)
(54,COMMAND_ARG3)
(55,\\\'\\\\0\\\')
(56,i)
(57,dataLen = wcslen(data)
(58,)
(59,data)
(60,int)
(61,1)
(62,COMMAND_INT_PATH)
(63,FILENAME)
(64,i)
(65,100-dataLen)
(66,i)
(67,dataBuffer)
(68,(int)
(69,"fgetws()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
