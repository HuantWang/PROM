-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(badStatic)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
badStatic
badStatic
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(62,52,0)
(63,25,0)
(13,3,0)
(3,5,0)
(4,52,0)
(65,28,0)
(30,24,0)
(42,62,0)
(34,5,0)
(50,25,0)
(49,56,0)
(32,36,0)
(61,28,0)
(40,29,0)
(36,22,0)
(63,21,0)
(41,65,0)
(3,13,0)
(15,29,0)
(20,48,0)
(44,6,0)
(60,47,0)
(62,20,0)
(33,36,0)
(51,15,0)
(21,52,0)
(14,65,0)
(27,22,0)
(56,29,0)
(52,4,0)
(29,56,0)
(19,55,0)
(26,47,0)
(48,63,0)
(0,62,0)
(29,3,0)
(50,36,0)
(33,55,0)
(11,6,0)
(8,5,0)
(59,17,0)
(36,17,0)
(17,25,0)
(6,11,0)
(52,57,0)
(29,15,0)
(50,60,0)
(58,21,0)
(15,36,0)
(2,22,0)
(64,21,0)
(5,3,0)
(6,25,0)
(6,24,0)
(18,33,0)
(3,29,0)
(21,63,0)
(48,20,0)
(22,66,0)
(16,11,0)
(20,62,0)
(53,63,0)
(5,36,0)
(65,25,0)
(24,1,0)
(15,25,0)
(39,60,0)
(9,26,0)
(46,52,0)
(17,36,0)
(35,33,0)
(11,52,0)
(23,50,0)
(12,11,0)
(54,57,0)
(4,25,0)
(55,33,0)
(45,4,0)
(31,37,0)
(7,15,0)
(63,48,0)
(10,48,0)
(43,50,0)
(41,65,1)
(65,14,1)
(46,56,1)
(33,35,1)
(11,52,1)
(8,34,1)
(16,12,1)
(34,15,1)
(48,10,1)
(33,36,1)
(6,11,1)
(14,60,1)
(64,53,1)
(53,62,1)
(15,25,1)
(50,36,1)
(21,58,1)
(9,56,1)
(3,13,1)
(4,25,1)
(23,26,1)
(17,59,1)
(24,30,1)
(5,36,1)
(3,5,1)
(42,0,1)
(58,64,1)
(18,36,1)
(15,36,1)
(5,8,1)
(55,19,1)
(21,52,1)
(63,25,1)
(52,4,1)
(6,25,1)
(44,20,1)
(7,55,1)
(4,45,1)
(35,18,1)
(32,38,1)
(17,25,1)
(30,6,1)
(45,46,1)
(36,17,1)
(62,52,1)
(15,51,1)
(39,50,1)
(29,15,1)
(51,7,1)
(20,62,1)
(60,39,1)
(40,3,1)
(65,25,1)
(14,38,1)
(63,21,1)
(50,43,1)
(59,32,1)
(56,49,1)
(50,25,1)
(29,3,1)
(20,48,1)
(55,33,1)
(29,40,1)
(12,44,1)
(10,63,1)
(0,52,1)
(14,20,1)
(19,33,1)
(26,9,1)
(14,55,1)
(48,63,1)
(11,16,1)
(62,42,1)
(56,29,1)
(14,24,1)
(49,29,1)
(43,23,1)
(63,21,2)
(18,38,2)
(35,38,2)
(62,52,2)
(5,55,2)
(19,38,2)
(20,56,2)
(29,55,2)
(3,55,2)
(40,55,2)
(4,56,2)
(15,55,2)
(21,62,2)
(45,56,2)
(32,38,2)
(48,63,2)
(17,38,2)
(46,56,2)
(52,56,2)
(63,62,2)
(20,62,2)
(30,20,2)
(64,62,2)
(15,25,2)
(16,20,2)
(44,20,2)
(56,29,2)
(50,36,2)
(3,5,2)
(7,55,2)
(12,20,2)
(56,55,2)
(53,62,2)
(24,20,2)
(33,38,2)
(65,25,2)
(29,3,2)
(58,62,2)
(11,20,2)
(6,25,2)
(3,13,2)
(43,56,2)
(60,56,2)
(15,36,2)
(29,15,2)
(4,25,2)
(42,56,2)
(0,56,2)
(48,62,2)
(6,20,2)
(33,36,2)
(41,65,2)
(59,38,2)
(50,56,2)
(39,56,2)
(52,4,2)
(10,62,2)
(23,56,2)
(11,52,2)
(21,52,2)
(9,56,2)
(51,55,2)
(36,38,2)
(34,55,2)
(55,38,2)
(50,25,2)
(8,55,2)
(6,11,2)
(5,36,2)
(36,17,2)
(17,25,2)
(63,25,2)
(55,33,2)
(49,55,2)
(62,56,2)
(26,56,2)
(20,48,2)
-----------------------------------
(0,dataLen)
(1,)
(2,if (100-dataLen > 1)
(3,(int)
(4,strlen(data)
(5,100-dataLen)
(6,data[dataLen-1])
(7,data)
(8,dataLen)
(9,"fgets()
(10,\\\'\\\\n\\\')
(11,dataLen-1)
(12,dataLen)
(13,int)
(14,data)
(15,data+dataLen)
(16,1)
(17,strlen(data)
(18,100)
(19,1)
(20,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(21,dataLen-1)
(22,)
(23,data)
(24,data[dataLen-1] = \\\'\\\\0\\\')
(25,char * data)
(26,printLine("fgets()
(27,dataLen)
(28,)
(29,fgets(data+dataLen, (int)
(30,\\\'\\\\0\\\')
(31,if (fgets(data+dataLen, (int)
(32,dataLen)
(33,100-dataLen)
(34,100)
(35,dataLen)
(36,dataLen = strlen(data)
(37,)
(38,badStatic)
(39,\\\'\\\\0\\\')
(40,stdin)
(41,RET)
(42,0)
(43,dataLen)
(44,data)
(45,data)
(46,dataLen)
(47,)
(48,data[dataLen-1] == \\\'\\\\n\\\')
(49,NULL)
(50,data[dataLen])
(51,dataLen)
(52,dataLen = strlen(data)
(53,data)
(54,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(55,100-dataLen > 1)
(56,fgets(data+dataLen, (int)
(57,)
(58,1)
(59,data)
(60,data[dataLen] = \\\'\\\\0\\\')
(61,if(badStatic)
(62,dataLen > 0)
(63,data[dataLen-1])
(64,dataLen)
(65,return data;)
(66,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
