-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData = data;
CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData = data
CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData
CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(71,57,0)
(0,35,0)
(52,30,0)
(1,46,0)
(14,58,0)
(72,24,0)
(68,72,0)
(9,31,0)
(23,68,0)
(54,17,0)
(17,5,0)
(41,27,0)
(72,68,0)
(24,5,0)
(37,40,0)
(22,35,0)
(53,52,0)
(68,23,0)
(19,37,0)
(10,64,0)
(42,16,0)
(13,30,0)
(16,40,0)
(44,67,0)
(31,9,0)
(23,40,0)
(59,4,0)
(37,44,0)
(34,15,0)
(3,9,0)
(45,58,0)
(9,3,0)
(50,3,0)
(8,56,0)
(25,66,0)
(65,59,0)
(23,17,0)
(61,24,0)
(17,23,0)
(28,40,0)
(3,50,0)
(51,3,0)
(62,37,0)
(58,5,0)
(3,35,0)
(32,57,0)
(49,68,0)
(66,5,0)
(9,46,0)
(5,39,0)
(40,56,0)
(45,59,0)
(33,40,0)
(35,40,0)
(11,64,0)
(21,17,0)
(46,9,0)
(64,40,0)
(16,30,0)
(40,57,0)
(36,5,0)
(30,2,0)
(55,20,0)
(30,16,0)
(63,56,0)
(37,30,0)
(2,57,0)
(60,58,0)
(20,67,0)
(35,3,0)
(45,40,0)
(56,57,0)
(6,50,0)
(7,46,0)
(35,30,0)
(69,45,0)
(48,44,0)
(52,15,0)
(70,57,0)
(18,24,0)
(5,66,0)
(43,2,0)
(58,45,0)
(24,72,0)
(64,57,0)
(26,23,0)
(15,52,0)
(38,39,0)
(47,2,0)
(12,52,0)
(46,30,0)
(66,40,0)
(56,63,1)
(16,42,1)
(66,25,1)
(20,55,1)
(9,31,1)
(13,40,1)
(10,59,1)
(45,58,1)
(3,51,1)
(26,24,1)
(37,19,1)
(46,30,1)
(59,65,1)
(23,40,1)
(36,50,1)
(63,8,1)
(54,26,1)
(53,12,1)
(35,30,1)
(50,6,1)
(40,56,1)
(35,22,1)
(30,16,1)
(10,72,1)
(11,10,1)
(58,5,1)
(37,30,1)
(64,40,1)
(64,11,1)
(51,9,1)
(17,21,1)
(9,46,1)
(49,23,1)
(18,61,1)
(55,50,1)
(19,62,1)
(60,14,1)
(25,36,1)
(65,45,1)
(66,40,1)
(24,18,1)
(7,35,1)
(12,30,1)
(17,5,1)
(21,54,1)
(0,15,1)
(52,30,1)
(32,64,1)
(5,66,1)
(34,52,1)
(29,32,1)
(50,3,1)
(68,23,1)
(62,20,1)
(1,7,1)
(33,56,1)
(23,17,1)
(35,40,1)
(44,48,1)
(15,34,1)
(22,0,1)
(6,3,1)
(24,5,1)
(16,40,1)
(15,52,1)
(3,9,1)
(52,53,1)
(3,35,1)
(46,1,1)
(68,49,1)
(58,60,1)
(72,24,1)
(10,15,1)
(42,13,1)
(10,44,1)
(40,28,1)
(45,40,1)
(37,40,1)
(69,72,1)
(61,5,1)
(28,33,1)
(48,37,1)
(14,69,1)
(72,68,1)
(68,23,2)
(49,24,2)
(23,24,2)
(46,15,2)
(72,50,2)
(68,24,2)
(48,50,2)
(66,40,2)
(37,50,2)
(66,50,2)
(51,15,2)
(35,15,2)
(50,3,2)
(58,72,2)
(14,72,2)
(45,58,2)
(9,31,2)
(72,24,2)
(9,46,2)
(5,50,2)
(3,15,2)
(3,9,2)
(64,40,2)
(44,50,2)
(9,15,2)
(23,17,2)
(45,72,2)
(60,72,2)
(52,30,2)
(30,16,2)
(21,24,2)
(45,40,2)
(35,40,2)
(65,72,2)
(17,24,2)
(35,30,2)
(55,50,2)
(69,72,2)
(37,30,2)
(5,66,2)
(6,15,2)
(37,40,2)
(36,50,2)
(54,24,2)
(3,35,2)
(72,68,2)
(62,50,2)
(50,15,2)
(24,50,2)
(26,24,2)
(25,50,2)
(24,5,2)
(22,15,2)
(16,40,2)
(19,50,2)
(18,50,2)
(0,15,2)
(20,50,2)
(58,5,2)
(17,5,2)
(1,15,2)
(23,40,2)
(59,72,2)
(7,15,2)
(46,30,2)
(40,56,2)
(61,50,2)
(15,52,2)
-----------------------------------
(0,data)
(1,dataLen)
(2,)
(3,fgets(data+dataLen, (int)
(4,)
(5,dataLen = strlen(data)
(6,NULL)
(7,100)
(8,dataBuffer)
(9,(int)
(10,CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData)
(11,data)
(12,100)
(13,dataLen)
(14,dataLen)
(15,100-dataLen > 1)
(16,strlen(data)
(17,dataLen-1)
(18,0)
(19,dataLen)
(20,printLine("fgets()
(21,1)
(22,dataLen)
(23,data[dataLen-1])
(24,dataLen > 0)
(25,data)
(26,data)
(27,)
(28,dataBuffer)
(29,RET)
(30,dataLen = strlen(data)
(31,int)
(32,badSink()
(33,data)
(34,1)
(35,data+dataLen)
(36,dataLen)
(37,data[dataLen])
(38,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(39,)
(40,data = dataBuffer)
(41,if (fgets(data+dataLen, (int)
(42,data)
(43,dataLen)
(44,data[dataLen] = \\\'\\\\0\\\')
(45,data[dataLen-1])
(46,100-dataLen)
(47,if (100-dataLen > 1)
(48,\\\'\\\\0\\\')
(49,\\\'\\\\n\\\')
(50,fgets(data+dataLen, (int)
(51,stdin)
(52,100-dataLen)
(53,dataLen)
(54,dataLen)
(55,"fgets()
(56,dataBuffer[100] = COMMAND_ARG2)
(57,)
(58,dataLen-1)
(59,data[dataLen-1] = \\\'\\\\0\\\')
(60,1)
(61,dataLen)
(62,data)
(63,COMMAND_ARG2)
(64,CWE78_OS_Command_Injection__char_console_w32_spawnvp_45_badData = data)
(65,\\\'\\\\0\\\')
(66,strlen(data)
(67,)
(68,data[dataLen-1] == \\\'\\\\n\\\')
(69,data)
(70,data)
(71,dataBuffer)
(72,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
