-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_54_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_54_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_54b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_popen_54_bad()
CWE78_OS_Command_Injection__char_console_popen_54_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_54b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_54b_badSink(data);
CWE78_OS_Command_Injection__char_console_popen_54b_badSink(data)
CWE78_OS_Command_Injection__char_console_popen_54b_badSink
CWE78_OS_Command_Injection__char_console_popen_54b_badSink
data
data
-----joern-----
(16,55,0)
(26,51,0)
(35,51,0)
(42,19,0)
(52,14,0)
(56,29,0)
(15,64,0)
(18,6,0)
(70,4,0)
(29,3,0)
(0,50,0)
(37,54,0)
(46,65,0)
(24,38,0)
(41,65,0)
(14,65,0)
(60,43,0)
(66,55,0)
(3,55,0)
(13,52,0)
(12,54,0)
(34,65,0)
(42,65,0)
(64,65,0)
(24,36,0)
(50,69,0)
(2,24,0)
(10,25,0)
(52,43,0)
(22,38,0)
(29,11,0)
(65,12,0)
(48,19,0)
(25,38,0)
(1,52,0)
(46,50,0)
(55,52,0)
(38,24,0)
(55,3,0)
(21,65,0)
(5,21,0)
(68,42,0)
(30,54,0)
(41,19,0)
(47,1,0)
(19,4,0)
(19,64,0)
(6,19,0)
(7,13,0)
(17,6,0)
(63,36,0)
(62,46,0)
(9,18,0)
(67,13,0)
(4,54,0)
(23,52,0)
(32,12,0)
(11,29,0)
(59,26,0)
(41,26,0)
(14,52,0)
(24,42,0)
(6,18,0)
(36,24,0)
(31,3,0)
(38,25,0)
(1,11,0)
(44,41,0)
(38,22,0)
(46,13,0)
(39,40,0)
(28,1,0)
(11,1,0)
(13,46,0)
(45,14,0)
(8,41,0)
(42,24,0)
(27,42,0)
(3,65,0)
(33,25,0)
(57,4,0)
(3,29,0)
(65,54,0)
(61,65,0)
(20,6,0)
(25,19,0)
(64,19,0)
(53,35,0)
(49,12,0)
(21,54,0)
(33,10,1)
(42,65,1)
(29,56,1)
(27,68,1)
(23,36,1)
(45,23,1)
(13,67,1)
(5,11,1)
(24,42,1)
(16,66,1)
(25,33,1)
(49,32,1)
(55,52,1)
(3,55,1)
(48,65,1)
(47,52,1)
(24,38,1)
(18,9,1)
(35,53,1)
(26,59,1)
(10,42,1)
(65,61,1)
(29,3,1)
(64,15,1)
(55,16,1)
(38,22,1)
(11,29,1)
(1,52,1)
(0,46,1)
(25,19,1)
(59,41,1)
(9,6,1)
(67,7,1)
(5,26,1)
(15,48,1)
(31,1,1)
(42,27,1)
(44,8,1)
(13,52,1)
(7,62,1)
(52,14,1)
(36,24,1)
(2,38,1)
(24,2,1)
(3,65,1)
(18,6,1)
(34,12,1)
(1,28,1)
(5,50,1)
(66,31,1)
(46,65,1)
(28,47,1)
(68,18,1)
(12,49,1)
(6,20,1)
(14,45,1)
(63,24,1)
(21,5,1)
(36,63,1)
(61,34,1)
(11,1,1)
(6,19,1)
(53,36,1)
(58,21,1)
(5,18,1)
(20,17,1)
(41,44,1)
(62,11,1)
(56,3,1)
(41,19,1)
(46,13,1)
(17,19,1)
(8,35,1)
(41,65,1)
(50,0,1)
(21,65,1)
(42,19,1)
(64,65,1)
(14,65,1)
(19,64,1)
(38,25,1)
(65,12,1)
(23,36,2)
(21,65,2)
(41,65,2)
(65,12,2)
(31,1,2)
(13,52,2)
(38,25,2)
(35,36,2)
(63,18,2)
(1,36,2)
(46,65,2)
(42,18,2)
(41,19,2)
(36,18,2)
(46,13,2)
(0,11,2)
(42,65,2)
(24,38,2)
(59,36,2)
(26,36,2)
(3,65,2)
(46,11,2)
(3,55,2)
(36,24,2)
(64,65,2)
(11,36,2)
(24,42,2)
(14,36,2)
(33,18,2)
(52,36,2)
(25,19,2)
(18,6,2)
(47,36,2)
(11,29,2)
(62,11,2)
(52,14,2)
(66,1,2)
(67,11,2)
(10,18,2)
(38,18,2)
(29,1,2)
(27,18,2)
(53,36,2)
(7,11,2)
(13,11,2)
(41,36,2)
(68,18,2)
(42,19,2)
(3,1,2)
(38,22,2)
(16,1,2)
(29,3,2)
(50,11,2)
(8,36,2)
(44,36,2)
(55,52,2)
(11,1,2)
(2,18,2)
(24,18,2)
(25,18,2)
(6,19,2)
(1,52,2)
(56,1,2)
(55,1,2)
(14,65,2)
(45,36,2)
(28,36,2)
(19,64,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,dataLen > 0)
(2,stdin)
(3,data[dataLen-1])
(4,)
(5,data)
(6,100-dataLen)
(7,dataLen)
(8,data)
(9,1)
(10,100)
(11,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,data_buf[100] = FULL_COMMAND)
(13,dataLen-1)
(14,strlen(data)
(15,data)
(16,1)
(17,100)
(18,100-dataLen > 1)
(19,dataLen = strlen(data)
(20,dataLen)
(21,CWE78_OS_Command_Injection__char_console_popen_54b_badSink(data)
(22,int)
(23,dataLen)
(24,fgets(data+dataLen, (int)
(25,100-dataLen)
(26,data[dataLen] = \\\'\\\\0\\\')
(27,dataLen)
(28,0)
(29,data[dataLen-1] == \\\'\\\\n\\\')
(30,data_buf)
(31,data)
(32,data_buf)
(33,dataLen)
(34,data)
(35,printLine("fgets()
(36,fgets(data+dataLen, (int)
(37,data)
(38,(int)
(39,if (fgets(data+dataLen, (int)
(40,)
(41,data[dataLen])
(42,data+dataLen)
(43,)
(44,dataLen)
(45,data)
(46,data[dataLen-1])
(47,dataLen)
(48,dataLen)
(49,FULL_COMMAND)
(50,data[dataLen-1] = \\\'\\\\0\\\')
(51,)
(52,dataLen = strlen(data)
(53,"fgets()
(54,)
(55,dataLen-1)
(56,\\\'\\\\n\\\')
(57,if (100-dataLen > 1)
(58,RET)
(59,\\\'\\\\0\\\')
(60,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,data_buf)
(62,data)
(63,NULL)
(64,strlen(data)
(65,data = data_buf)
(66,dataLen)
(67,1)
(68,data)
(69,)
(70,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
