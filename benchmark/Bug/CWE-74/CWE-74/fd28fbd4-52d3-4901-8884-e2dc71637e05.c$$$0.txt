-----label-----
1
-----code-----
static void badVaSink(char * data, ...)
{
    if(badStatic)
    {
        {
            va_list args;
            va_start(args, data);
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            vprintf(data, args);
            va_end(args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
15,19
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
23,26
24,25
26,27
28,29
30,31
31,32
31,33
31,34
32,33
34,35
36,37
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,6,8,9,13,19,21,25,27,29,33,35,37,41,43
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSink(char * data, ...){    if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vprintf(data, args);            va_end(args);        }    }}
static void
badVaSink(char * data, ...)
badVaSink
char * data
char
* data
*
data
{    if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vprintf(data, args);            va_end(args);        }    }}
if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vprintf(data, args);            va_end(args);        }    }
badStatic
badStatic
{        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vprintf(data, args);            va_end(args);        }    }
{            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vprintf(data, args);            va_end(args);        }
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
vprintf(data, args);
vprintf(data, args)
vprintf
vprintf
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
-----joern-----
(8,9,0)
(7,1,0)
(10,9,0)
(11,14,0)
(1,9,0)
(0,10,0)
(15,9,0)
(9,5,0)
(10,2,0)
(1,2,0)
(6,15,0)
(13,1,0)
(3,10,0)
(7,12,1)
(1,13,1)
(10,2,1)
(15,6,1)
(0,1,1)
(3,0,1)
(13,7,1)
(1,2,1)
(4,12,1)
(10,3,1)
(6,10,1)
(4,15,1)
(10,12,2)
(6,12,2)
(13,12,2)
(10,2,2)
(7,12,2)
(3,12,2)
(1,2,2)
(1,12,2)
(15,12,2)
(0,12,2)
-----------------------------------
(0,data)
(1,va_start(args, data)
(2,char * data)
(3,args)
(4,RET)
(5,)
(6,args)
(7,args)
(8,args)
(9,)
(10,vprintf(data, args)
(11,if(badStatic)
(12,badStatic)
(13,data)
(14,)
(15,va_end(args)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
