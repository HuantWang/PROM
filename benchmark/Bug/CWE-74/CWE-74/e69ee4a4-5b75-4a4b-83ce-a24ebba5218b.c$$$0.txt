-----label-----
1
-----code-----
static void badSink(char * data)
{
    if(badStatic)
    {
        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
        fprintf(stdout, data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
16,17
16,18
16,19
17,18
19,20
21,22
-----nextToken-----
2,4,6,8,9,13,18,20,22
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    if(badStatic)    {        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        fprintf(stdout, data);    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    if(badStatic)    {        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        fprintf(stdout, data);    }}
if(badStatic)    {        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        fprintf(stdout, data);    }
badStatic
badStatic
{        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        fprintf(stdout, data);    }
fprintf(stdout, data);
fprintf(stdout, data)
fprintf
fprintf
stdout
stdout
data
data
-----joern-----
(0,5,0)
(2,7,0)
(3,0,0)
(8,0,0)
(0,1,0)
(4,0,1)
(0,8,1)
(8,3,1)
(4,6,1)
(3,6,1)
(0,5,1)
(0,5,2)
(0,6,2)
(8,6,2)
(3,6,2)
-----------------------------------
(0,fprintf(stdout, data)
(1,)
(2,if(badStatic)
(3,stdout)
(4,RET)
(5,char * data)
(6,badStatic)
(7,)
(8,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
