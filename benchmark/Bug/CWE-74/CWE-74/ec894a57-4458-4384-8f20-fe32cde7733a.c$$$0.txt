-----label-----
1
-----code-----
static void badVaSink(char * data, ...)
{
    {
        va_list args;
        va_start(args, data);
        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
        vfprintf(stdout, data, args);
        va_end(args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
19,22
20,21
22,23
24,25
26,27
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,6,8,9,15,17,21,23,25,29,31,33,35,39,41
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSink(char * data, ...){    {        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vfprintf(stdout, data, args);        va_end(args);    }}
static void
badVaSink(char * data, ...)
badVaSink
char * data
char
* data
*
data
{    {        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vfprintf(stdout, data, args);        va_end(args);    }}
{        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vfprintf(stdout, data, args);        va_end(args);    }
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
vfprintf(stdout, data, args);
vfprintf(stdout, data, args)
vfprintf
vfprintf
stdout
stdout
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
-----joern-----
(11,10,0)
(12,1,0)
(6,5,0)
(7,12,0)
(10,13,0)
(3,5,0)
(4,10,0)
(5,10,0)
(8,11,0)
(0,12,0)
(12,10,0)
(9,5,0)
(5,1,0)
(0,7,1)
(5,3,1)
(2,11,1)
(12,0,1)
(12,1,1)
(3,6,1)
(6,9,1)
(5,1,1)
(8,5,1)
(11,8,1)
(9,12,1)
(5,1,2)
(12,1,2)
-----------------------------------
(0,data)
(1,char * data)
(2,RET)
(3,args)
(4,args)
(5,vfprintf(stdout, data, args)
(6,data)
(7,args)
(8,args)
(9,stdout)
(10,)
(11,va_end(args)
(12,va_start(args, data)
(13,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
