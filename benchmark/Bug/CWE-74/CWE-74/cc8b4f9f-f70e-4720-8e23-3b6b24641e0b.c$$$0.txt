-----label-----
1
-----code-----
static void badSink(wchar_t * data)
{
    if(badStatic)
    {
        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
        fwprintf(stdout, data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
16,17
16,18
16,19
17,18
19,20
21,22
-----nextToken-----
2,4,6,8,9,13,18,20,22
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(wchar_t * data){    if(badStatic)    {        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        fwprintf(stdout, data);    }}
static void
badSink(wchar_t * data)
badSink
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        fwprintf(stdout, data);    }}
if(badStatic)    {        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        fwprintf(stdout, data);    }
badStatic
badStatic
{        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        fwprintf(stdout, data);    }
fwprintf(stdout, data);
fwprintf(stdout, data)
fwprintf
fwprintf
stdout
stdout
data
data
-----joern-----
(5,0,0)
(0,7,0)
(4,2,0)
(0,6,0)
(8,0,0)
(1,3,1)
(0,7,1)
(0,5,1)
(1,0,1)
(8,3,1)
(5,8,1)
(8,3,2)
(5,3,2)
(0,7,2)
(0,3,2)
-----------------------------------
(0,fwprintf(stdout, data)
(1,RET)
(2,)
(3,badStatic)
(4,if(badStatic)
(5,data)
(6,)
(7,wchar_t * data)
(8,stdout)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
