-----label-----
1
-----code-----
static void badVaSink(char * data, ...)
{
    if(badStatic)
    {
        {
            char dest[100] = "";
            va_list args;
            va_start(args, data);
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            vsnprintf(dest, 100-1, data, args);
            va_end(args);
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
32,35
33,34
35,36
37,38
39,40
40,41
40,42
40,43
40,44
40,45
41,42
43,44
45,46
45,47
48,49
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,6,8,9,13,18,20,22,24,28,30,34,36,38,42,44,46,47,49,51,55,57,61,63
-----computeFrom-----
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSink(char * data, ...){    if(badStatic)    {        {            char dest[100] = "";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vsnprintf(dest, 100-1, data, args);            va_end(args);            printLine(dest);        }    }}
static void
badVaSink(char * data, ...)
badVaSink
char * data
char
* data
*
data
{    if(badStatic)    {        {            char dest[100] = "";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vsnprintf(dest, 100-1, data, args);            va_end(args);            printLine(dest);        }    }}
if(badStatic)    {        {            char dest[100] = "";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vsnprintf(dest, 100-1, data, args);            va_end(args);            printLine(dest);        }    }
badStatic
badStatic
{        {            char dest[100] = "";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vsnprintf(dest, 100-1, data, args);            va_end(args);            printLine(dest);        }    }
{            char dest[100] = "";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vsnprintf(dest, 100-1, data, args);            va_end(args);            printLine(dest);        }
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
vsnprintf(dest, 100-1, data, args);
vsnprintf(dest, 100-1, data, args)
vsnprintf
vsnprintf
dest
dest
100-1
100
1
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(4,11,0)
(18,12,0)
(22,19,0)
(23,9,0)
(13,11,0)
(17,21,0)
(11,9,0)
(16,18,0)
(18,19,0)
(7,22,0)
(8,21,0)
(23,21,0)
(19,15,0)
(24,23,0)
(20,23,0)
(25,19,0)
(11,19,0)
(5,19,0)
(21,23,0)
(14,6,0)
(23,19,0)
(23,12,0)
(12,19,0)
(1,12,0)
(0,12,0)
(3,23,0)
(11,9,1)
(23,12,1)
(23,21,1)
(18,16,1)
(17,8,1)
(8,20,1)
(23,9,1)
(18,12,1)
(4,13,1)
(12,1,1)
(23,3,1)
(7,23,1)
(10,2,1)
(0,2,1)
(20,11,1)
(16,22,1)
(13,12,1)
(22,7,1)
(21,17,1)
(1,0,1)
(24,21,1)
(3,24,1)
(11,4,1)
(10,18,1)
(23,9,2)
(18,2,2)
(4,2,2)
(22,2,2)
(7,2,2)
(1,2,2)
(24,2,2)
(17,2,2)
(12,2,2)
(8,2,2)
(23,12,2)
(23,2,2)
(21,2,2)
(0,2,2)
(20,2,2)
(3,2,2)
(13,2,2)
(23,21,2)
(11,9,2)
(16,2,2)
(18,12,2)
(11,2,2)
-----------------------------------
(0,dest)
(1,"")
(2,badStatic)
(3,args)
(4,data)
(5,dest)
(6,)
(7,args)
(8,100)
(9,char * data)
(10,RET)
(11,va_start(args, data)
(12,dest[100] = "")
(13,args)
(14,if(badStatic)
(15,)
(16,dest)
(17,1)
(18,printLine(dest)
(19,)
(20,dest)
(21,100-1)
(22,va_end(args)
(23,vsnprintf(dest, 100-1, data, args)
(24,data)
(25,args)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
