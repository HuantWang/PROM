-----label-----
1
-----code-----
static void badVaSinkG(wchar_t * data, ...)
{
    {
        wchar_t dest[100] = L"";
        va_list args;
        va_start(args, data);
        /* FIX: Specify the format disallowing a format string vulnerability */
        _vsnwprintf(dest, 100-1, L"%s", args);
        va_end(args);
        printWLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
28,31
29,30
31,32
33,34
35,36
36,37
36,38
36,39
36,40
36,41
37,38
39,40
41,42
41,43
45,46
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,6,8,9,14,16,18,20,24,26,30,32,34,38,40,42,43,44,46,50,52,56,58
-----computeFrom-----
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSinkG(wchar_t * data, ...){    {        wchar_t dest[100] = L"";        va_list args;        va_start(args, data);        /* FIX: Specify the format disallowing a format string vulnerability */        _vsnwprintf(dest, 100-1, L"%s", args);        va_end(args);        printWLine(dest);    }}
static void
badVaSinkG(wchar_t * data, ...)
badVaSinkG
wchar_t * data
wchar_t
* data
*
data
{    {        wchar_t dest[100] = L"";        va_list args;        va_start(args, data);        /* FIX: Specify the format disallowing a format string vulnerability */        _vsnwprintf(dest, 100-1, L"%s", args);        va_end(args);        printWLine(dest);    }}
{        wchar_t dest[100] = L"";        va_list args;        va_start(args, data);        /* FIX: Specify the format disallowing a format string vulnerability */        _vsnwprintf(dest, 100-1, L"%s", args);        va_end(args);        printWLine(dest);    }
wchar_t dest[100] = L"";
wchar_t dest[100] = L"";
wchar_t
dest[100] = L""
dest
[100]
100
= L""
L""
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
_vsnwprintf(dest, 100-1, L"%s", args);
_vsnwprintf(dest, 100-1, L"%s", args)
_vsnwprintf
_vsnwprintf
dest
dest
100-1
100
1
L"%s"
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(2,1,0)
(6,1,0)
(12,1,0)
(5,2,0)
(8,1,0)
(7,8,0)
(3,1,0)
(11,8,0)
(8,9,0)
(0,3,0)
(1,10,0)
(8,7,1)
(4,2,1)
(7,11,1)
(2,5,1)
(0,8,1)
(8,9,1)
(5,3,1)
(11,6,1)
(3,0,1)
(8,9,2)
-----------------------------------
(0,args)
(1,)
(2,printWLine(dest)
(3,va_end(args)
(4,RET)
(5,dest)
(6,"")
(7,data)
(8,va_start(args, data)
(9,wchar_t * data)
(10,)
(11,args)
(12,args)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
