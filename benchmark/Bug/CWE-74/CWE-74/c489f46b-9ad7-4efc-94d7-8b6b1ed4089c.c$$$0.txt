-----label-----
1
-----code-----
static void badVaSink(char * data, ...)
{
    {
        va_list args;
        va_start(args, data);
        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
        vfprintf(stdout, data, args);
        va_end(args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
19,22
20,21
22,23
24,25
26,27
27,28
27,29
27,30
27,31
28,29
30,31
32,33
34,35
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,6,8,9,15,17,21,23,25,29,31,33,35,39,41
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSink(char * data, ...){    {        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vfprintf(stdout, data, args);        va_end(args);    }}
static void
badVaSink(char * data, ...)
badVaSink
char * data
char
* data
*
data
{    {        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vfprintf(stdout, data, args);        va_end(args);    }}
{        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vfprintf(stdout, data, args);        va_end(args);    }
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
vfprintf(stdout, data, args);
vfprintf(stdout, data, args)
vfprintf
vfprintf
stdout
stdout
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
-----joern-----
(10,12,0)
(1,12,0)
(13,9,0)
(7,13,0)
(3,7,0)
(2,13,0)
(11,0,0)
(6,12,0)
(5,0,0)
(0,8,0)
(12,8,0)
(12,13,0)
(0,13,0)
(12,8,1)
(0,5,1)
(12,6,1)
(7,3,1)
(3,12,1)
(4,7,1)
(0,8,1)
(5,11,1)
(1,10,1)
(10,0,1)
(6,1,1)
(12,8,2)
(0,8,2)
-----------------------------------
(0,va_start(args, data)
(1,data)
(2,args)
(3,args)
(4,RET)
(5,data)
(6,args)
(7,va_end(args)
(8,char * data)
(9,)
(10,stdout)
(11,args)
(12,vfprintf(stdout, data, args)
(13,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
