-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_execv_18_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    goto source;
source:
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
30,31
30,32
32,33
32,34
32,35
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
52,54
53,54
55,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
65,68
65,69
66,67
68,69
68,70
69,70
71,72
73,74
75,76
75,77
76,77
76,78
78,79
81,82
81,83
82,83
83,84
83,85
85,86
85,87
85,88
85,89
89,90
90,91
90,92
90,93
90,94
91,92
93,94
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
105,106
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,31,36,38,42,44,47,49,50,54,56,60,62,67,70,72,74,77,79,80,84,86,87,88,92,94,96,98,102,104,106
-----computeFrom-----
23,24
23,25
58,59
58,60
68,69
68,70
75,76
75,77
76,77
76,78
-----guardedBy-----
60,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_execv_18_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_environment_w32_execv_18_bad()
CWE78_OS_Command_Injection__char_environment_w32_execv_18_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
source
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(3,41,0)
(11,12,0)
(32,10,0)
(41,17,0)
(7,17,0)
(25,14,0)
(35,10,0)
(31,5,0)
(21,29,0)
(12,17,0)
(36,17,0)
(29,21,0)
(42,7,0)
(35,29,0)
(15,5,0)
(10,25,0)
(2,5,0)
(38,24,0)
(0,41,0)
(18,17,0)
(23,24,0)
(37,0,0)
(0,3,0)
(33,14,0)
(13,28,0)
(35,2,0)
(43,28,0)
(35,27,0)
(4,29,0)
(28,17,0)
(2,35,0)
(29,12,0)
(22,2,0)
(44,17,0)
(9,35,0)
(14,7,0)
(19,17,0)
(34,25,0)
(5,25,0)
(26,3,0)
(25,12,0)
(6,10,0)
(1,0,0)
(39,12,0)
(7,28,0)
(24,29,0)
(14,25,0)
(5,2,0)
(10,35,0)
(40,41,0)
(8,12,0)
(16,7,0)
(20,21,0)
(10,7,0)
(0,1,1)
(5,15,1)
(10,25,1)
(5,25,1)
(31,22,1)
(25,14,1)
(37,3,1)
(42,16,1)
(14,7,1)
(26,24,1)
(32,24,1)
(20,4,1)
(9,10,1)
(1,37,1)
(2,5,1)
(3,26,1)
(10,7,1)
(35,29,1)
(26,35,1)
(35,2,1)
(28,43,1)
(30,0,1)
(7,28,1)
(6,32,1)
(24,29,1)
(36,7,1)
(4,25,1)
(34,36,1)
(10,6,1)
(29,21,1)
(15,31,1)
(35,10,1)
(7,42,1)
(43,13,1)
(24,38,1)
(14,33,1)
(16,28,1)
(21,20,1)
(23,29,1)
(38,23,1)
(0,3,1)
(33,34,1)
(22,9,1)
(35,29,2)
(24,29,2)
(2,5,2)
(14,7,2)
(31,24,2)
(25,14,2)
(10,24,2)
(10,25,2)
(35,2,2)
(6,24,2)
(29,21,2)
(7,28,2)
(9,24,2)
(35,10,2)
(5,24,2)
(5,25,2)
(15,24,2)
(22,24,2)
(10,7,2)
(35,24,2)
(32,24,2)
(0,3,2)
(2,24,2)
-----------------------------------
(0,EXECV(COMMAND_INT_PATH, args)
(1,args)
(2,100-dataLen-1)
(3,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(4,environment)
(5,dataLen-1)
(6,dataLen)
(7,data = dataBuffer)
(8,environment)
(9,environment)
(10,data+dataLen)
(11,if (environment != NULL)
(12,)
(13,dataBuffer)
(14,strlen(data)
(15,1)
(16,data)
(17,)
(18,dataBuffer)
(19,source:)
(20,ENV_VARIABLE)
(21,GETENV(ENV_VARIABLE)
(22,100)
(23,environment)
(24,environment != NULL)
(25,dataLen = strlen(data)
(26,args)
(27,)
(28,dataBuffer[100] = COMMAND_ARG2)
(29,* environment = GETENV(ENV_VARIABLE)
(30,RET)
(31,dataLen)
(32,data)
(33,data)
(34,dataLen)
(35,strncat(data+dataLen, environment, 100-dataLen-1)
(36,goto source;)
(37,COMMAND_INT_PATH)
(38,NULL)
(39,dataLen)
(40,args)
(41,)
(42,dataBuffer)
(43,COMMAND_ARG2)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
