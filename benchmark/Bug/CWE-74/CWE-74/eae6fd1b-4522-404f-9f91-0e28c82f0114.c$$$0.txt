-----label-----
1
-----code-----
void CWE464_Addition_of_Data_Structure_Sentinel__basic_09_bad()
{
    char data;
    data = ' ';
    if(GLOBAL_CONST_TRUE)
    {
        {
            char charArraySource[2];
            charArraySource[0] = (char)getc(stdin);
            charArraySource[1] = '\0';
            /* FLAW: If the character entered on the command line is not an int,
             * a null value will be returned */
            data = (char)atoi(charArraySource);
        }
    }
    {
        char charArraySink[4];
        charArraySink[0] = 'x';
        /* POTENTIAL FLAW: If data is null, the rest of the array will not be printed */
        charArraySink[1] = data;
        charArraySink[2] = 'z';
        charArraySink[3] = '\0';
        printLine(charArraySink);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
16,17
16,18
17,18
19,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
30,32
31,32
34,35
34,36
35,36
35,37
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
45,47
46,47
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
58,59
58,60
59,60
61,62
63,64
63,65
63,66
63,67
63,68
63,69
64,65
65,66
65,67
67,68
67,69
69,70
71,72
72,73
72,74
73,74
73,75
74,75
78,79
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
87,89
88,89
88,90
89,90
93,94
94,95
94,96
95,96
95,97
96,97
100,101
101,102
101,103
102,103
104,105
-----nextToken-----
2,4,8,10,14,15,18,23,25,27,32,33,36,37,40,42,47,48,49,53,56,57,60,62,66,68,70,75,76,77,82,83,85,90,91,92,97,98,99,103,105
-----computeFrom-----
12,13
12,14
29,30
29,31
44,45
44,46
51,52
51,53
72,73
72,74
79,80
79,81
87,88
87,89
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE464_Addition_of_Data_Structure_Sentinel__basic_09_bad(){    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        {            char charArraySource[2];            charArraySource[0] = (char)getc(stdin);            charArraySource[1] = '\0';            /* FLAW: If the character entered on the command line is not an int,             * a null value will be returned */            data = (char)atoi(charArraySource);        }    }    {        char charArraySink[4];        charArraySink[0] = 'x';        /* POTENTIAL FLAW: If data is null, the rest of the array will not be printed */        charArraySink[1] = data;        charArraySink[2] = 'z';        charArraySink[3] = '\0';        printLine(charArraySink);    }}
void
CWE464_Addition_of_Data_Structure_Sentinel__basic_09_bad()
CWE464_Addition_of_Data_Structure_Sentinel__basic_09_bad
{    char data;    data = ' ';    if(GLOBAL_CONST_TRUE)    {        {            char charArraySource[2];            charArraySource[0] = (char)getc(stdin);            charArraySource[1] = '\0';            /* FLAW: If the character entered on the command line is not an int,             * a null value will be returned */            data = (char)atoi(charArraySource);        }    }    {        char charArraySink[4];        charArraySink[0] = 'x';        /* POTENTIAL FLAW: If data is null, the rest of the array will not be printed */        charArraySink[1] = data;        charArraySink[2] = 'z';        charArraySink[3] = '\0';        printLine(charArraySink);    }}
char data;
char data;
char
data
data
data = ' ';
data = ' '
data
data
' '
if(GLOBAL_CONST_TRUE)    {        {            char charArraySource[2];            charArraySource[0] = (char)getc(stdin);            charArraySource[1] = '\0';            /* FLAW: If the character entered on the command line is not an int,             * a null value will be returned */            data = (char)atoi(charArraySource);        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char charArraySource[2];            charArraySource[0] = (char)getc(stdin);            charArraySource[1] = '\0';            /* FLAW: If the character entered on the command line is not an int,             * a null value will be returned */            data = (char)atoi(charArraySource);        }    }
{            char charArraySource[2];            charArraySource[0] = (char)getc(stdin);            charArraySource[1] = '\0';            /* FLAW: If the character entered on the command line is not an int,             * a null value will be returned */            data = (char)atoi(charArraySource);        }
char charArraySource[2];
char charArraySource[2];
char
charArraySource[2]
charArraySource
[2]
2
charArraySource[0] = (char)getc(stdin);
charArraySource[0] = (char)getc(stdin)
charArraySource[0]
charArraySource
charArraySource
0
(char)getc(stdin)
char
char

getc(stdin)
getc
getc
stdin
stdin
charArraySource[1] = '\0';
charArraySource[1] = '\0'
charArraySource[1]
charArraySource
charArraySource
1
'\0'
data = (char)atoi(charArraySource);
data = (char)atoi(charArraySource)
data
data
(char)atoi(charArraySource)
char
char

atoi(charArraySource)
atoi
atoi
charArraySource
charArraySource
{        char charArraySink[4];        charArraySink[0] = 'x';        /* POTENTIAL FLAW: If data is null, the rest of the array will not be printed */        charArraySink[1] = data;        charArraySink[2] = 'z';        charArraySink[3] = '\0';        printLine(charArraySink);    }
char charArraySink[4];
char charArraySink[4];
char
charArraySink[4]
charArraySink
[4]
4
charArraySink[0] = 'x';
charArraySink[0] = 'x'
charArraySink[0]
charArraySink
charArraySink
0
'x'
charArraySink[1] = data;
charArraySink[1] = data
charArraySink[1]
charArraySink
charArraySink
1
data
data
charArraySink[2] = 'z';
charArraySink[2] = 'z'
charArraySink[2]
charArraySink
charArraySink
2
'z'
charArraySink[3] = '\0';
charArraySink[3] = '\0'
charArraySink[3]
charArraySink
charArraySink
3
'\0'
printLine(charArraySink);
printLine(charArraySink)
printLine
printLine
charArraySink
charArraySink
-----joern-----
(53,2,0)
(49,40,0)
(44,13,0)
(42,48,0)
(14,12,0)
(35,47,0)
(28,12,0)
(26,11,0)
(18,48,0)
(34,48,0)
(7,26,0)
(10,2,0)
(3,7,0)
(27,43,0)
(0,15,0)
(39,20,0)
(45,49,0)
(47,33,0)
(16,40,0)
(32,28,0)
(17,23,0)
(48,18,0)
(23,1,0)
(8,29,0)
(4,28,0)
(2,40,0)
(36,16,0)
(30,49,0)
(43,16,0)
(48,34,0)
(51,33,0)
(19,30,0)
(38,53,0)
(41,17,0)
(1,23,0)
(37,47,0)
(23,29,0)
(23,17,0)
(21,20,0)
(9,30,0)
(12,40,0)
(40,33,0)
(24,40,0)
(49,17,0)
(46,26,0)
(55,42,0)
(13,40,0)
(15,18,0)
(5,53,0)
(29,23,0)
(48,42,0)
(25,43,0)
(18,26,0)
(49,47,0)
(20,7,0)
(31,15,0)
(50,33,0)
(17,26,0)
(9,12,1)
(17,23,1)
(28,32,1)
(42,55,1)
(44,2,1)
(4,54,1)
(0,31,1)
(36,43,1)
(12,14,1)
(16,36,1)
(32,4,1)
(23,29,1)
(49,17,1)
(45,30,1)
(39,18,1)
(7,3,1)
(19,9,1)
(6,13,1)
(38,16,1)
(47,37,1)
(29,8,1)
(3,20,1)
(27,49,1)
(14,28,1)
(41,7,1)
(53,5,1)
(43,25,1)
(48,34,1)
(13,44,1)
(15,0,1)
(55,15,1)
(54,47,1)
(49,47,1)
(31,54,1)
(21,39,1)
(23,1,1)
(37,35,1)
(18,48,1)
(10,53,1)
(8,41,1)
(5,38,1)
(49,45,1)
(4,17,1)
(25,27,1)
(20,21,1)
(48,42,1)
(30,19,1)
(2,10,1)
(29,54,2)
(21,54,2)
(23,29,2)
(48,54,2)
(42,54,2)
(0,54,2)
(15,54,2)
(39,54,2)
(48,42,2)
(3,54,2)
(17,54,2)
(48,34,2)
(7,54,2)
(23,54,2)
(49,47,2)
(31,54,2)
(17,23,2)
(18,54,2)
(8,54,2)
(20,54,2)
(55,54,2)
(23,1,2)
(41,54,2)
(49,17,2)
(18,48,2)
-----------------------------------
(0,0)
(1,char)
(2,charArraySink[3] = '\\\\0')
(3,'\\\\0')
(4,charArraySink)
(5,3)
(6,RET)
(7,charArraySource[1] = '\\\\0')
(8,charArraySource)
(9,charArraySink)
(10,'\\\\0')
(11,)
(12,charArraySink[0] = 'x')
(13,printLine(charArraySink)
(14,'x')
(15,charArraySource[0])
(16,charArraySink[2] = 'z')
(17,data = (char)
(18,charArraySource[0] = (char)
(19,1)
(20,charArraySource[1])
(21,1)
(22,\'\\\\0\')
(23,(char)
(24,charArraySink)
(25,2)
(26,)
(27,charArraySink)
(28,charArraySink[0])
(29,atoi(charArraySource)
(30,charArraySink[1])
(31,charArraySource)
(32,0)
(33,)
(34,char)
(35,data)
(36,'z')
(37,' ')
(38,charArraySink)
(39,charArraySource)
(40,)
(41,data)
(42,getc(stdin)
(43,charArraySink[2])
(44,charArraySink)
(45,data)
(46,charArraySource)
(47,data = \' \')
(48,(char)
(49,charArraySink[1] = data)
(50,if(GLOBAL_CONST_TRUE)
(51,data)
(52,data = ' ')
(53,charArraySink[3])
(54,GLOBAL_CONST_TRUE)
(55,stdin)
(56,charArraySource[1] = \'\\\\0\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
