-----label-----
1
-----code-----
static void badVaSink(wchar_t * data, ...)
{
    if(badStatic)
    {
        {
            va_list args;
            va_start(args, data);
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            vwprintf(data, args);
            va_end(args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
15,19
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
23,26
24,25
26,27
28,29
30,31
31,32
31,33
31,34
32,33
34,35
36,37
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,6,8,9,13,19,21,25,27,29,33,35,37,41,43
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSink(wchar_t * data, ...){    if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vwprintf(data, args);            va_end(args);        }    }}
static void
badVaSink(wchar_t * data, ...)
badVaSink
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vwprintf(data, args);            va_end(args);        }    }}
if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vwprintf(data, args);            va_end(args);        }    }
badStatic
badStatic
{        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vwprintf(data, args);            va_end(args);        }    }
{            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vwprintf(data, args);            va_end(args);        }
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
vwprintf(data, args);
vwprintf(data, args)
vwprintf
vwprintf
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
-----joern-----
(11,4,0)
(8,15,0)
(7,9,0)
(3,10,0)
(4,10,0)
(0,4,0)
(4,9,0)
(1,10,0)
(7,10,0)
(14,7,0)
(2,1,0)
(10,13,0)
(6,7,0)
(6,14,1)
(5,1,1)
(11,7,1)
(2,4,1)
(7,9,1)
(1,2,1)
(4,0,1)
(0,11,1)
(4,9,1)
(7,6,1)
(5,12,1)
(14,12,1)
(14,12,2)
(7,12,2)
(0,12,2)
(7,9,2)
(4,9,2)
(4,12,2)
(2,12,2)
(6,12,2)
(1,12,2)
(11,12,2)
-----------------------------------
(0,args)
(1,va_end(args)
(2,args)
(3,args)
(4,vwprintf(data, args)
(5,RET)
(6,data)
(7,va_start(args, data)
(8,if(badStatic)
(9,wchar_t * data)
(10,)
(11,data)
(12,badStatic)
(13,)
(14,args)
(15,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
