-----label-----
1
-----code-----
static void badVaSink(wchar_t * data, ...)
{
    {
        wchar_t dest[100] = L"";
        va_list args;
        va_start(args, data);
        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
        _vsnwprintf(dest, 100-1, data, args);
        va_end(args);
        printWLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
28,31
29,30
31,32
33,34
35,36
36,37
36,38
36,39
36,40
36,41
37,38
39,40
41,42
41,43
44,45
46,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,6,8,9,14,16,18,20,24,26,30,32,34,38,40,42,43,45,47,51,53,57,59
-----computeFrom-----
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSink(wchar_t * data, ...){    {        wchar_t dest[100] = L"";        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        _vsnwprintf(dest, 100-1, data, args);        va_end(args);        printWLine(dest);    }}
static void
badVaSink(wchar_t * data, ...)
badVaSink
wchar_t * data
wchar_t
* data
*
data
{    {        wchar_t dest[100] = L"";        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        _vsnwprintf(dest, 100-1, data, args);        va_end(args);        printWLine(dest);    }}
{        wchar_t dest[100] = L"";        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        _vsnwprintf(dest, 100-1, data, args);        va_end(args);        printWLine(dest);    }
wchar_t dest[100] = L"";
wchar_t dest[100] = L"";
wchar_t
dest[100] = L""
dest
[100]
100
= L""
L""
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
_vsnwprintf(dest, 100-1, data, args);
_vsnwprintf(dest, 100-1, data, args)
_vsnwprintf
_vsnwprintf
dest
dest
100-1
100
1
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(6,9,0)
(8,4,0)
(19,17,0)
(9,4,0)
(5,17,0)
(15,18,0)
(17,0,0)
(16,9,0)
(9,10,0)
(3,9,0)
(9,17,0)
(14,1,0)
(7,10,0)
(8,17,0)
(10,9,0)
(1,17,0)
(2,8,0)
(11,10,0)
(18,17,0)
(13,8,0)
(14,9,1)
(10,7,1)
(9,3,1)
(16,10,1)
(9,10,1)
(12,18,1)
(8,4,1)
(3,16,1)
(6,8,1)
(8,13,1)
(15,1,1)
(18,15,1)
(11,6,1)
(13,2,1)
(9,4,1)
(1,14,1)
(2,5,1)
(7,11,1)
(9,10,2)
(9,4,2)
(8,4,2)
-----------------------------------
(0,)
(1,va_end(args)
(2,args)
(3,args)
(4,wchar_t * data)
(5,"")
(6,dest)
(7,1)
(8,va_start(args, data)
(9,_vsnwprintf(dest, 100-1, data, args)
(10,100-1)
(11,100)
(12,RET)
(13,data)
(14,args)
(15,dest)
(16,data)
(17,)
(18,printWLine(dest)
(19,args)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
