-----label-----
1
-----code-----
static void badVaSinkB(char * data, ...)
{
    {
        char dest[100] = "";
        va_list args;
        va_start(args, data);
        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
        vsnprintf(dest, 100-1, data, args);
        va_end(args);
        printLine(dest);
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
28,31
29,30
31,32
33,34
35,36
36,37
36,38
36,39
36,40
36,41
37,38
39,40
41,42
41,43
44,45
46,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
-----nextToken-----
2,4,6,8,9,14,16,18,20,24,26,30,32,34,38,40,42,43,45,47,51,53,57,59
-----computeFrom-----
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSinkB(char * data, ...){    {        char dest[100] = "";        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vsnprintf(dest, 100-1, data, args);        va_end(args);        printLine(dest);    }}
static void
badVaSinkB(char * data, ...)
badVaSinkB
char * data
char
* data
*
data
{    {        char dest[100] = "";        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vsnprintf(dest, 100-1, data, args);        va_end(args);        printLine(dest);    }}
{        char dest[100] = "";        va_list args;        va_start(args, data);        /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */        vsnprintf(dest, 100-1, data, args);        va_end(args);        printLine(dest);    }
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
vsnprintf(dest, 100-1, data, args);
vsnprintf(dest, 100-1, data, args)
vsnprintf
vsnprintf
dest
dest
100-1
100
1
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(2,6,0)
(0,12,0)
(15,22,0)
(3,6,0)
(6,2,0)
(10,7,0)
(12,22,0)
(7,22,0)
(8,6,0)
(9,22,0)
(1,15,0)
(13,22,0)
(20,13,0)
(13,16,0)
(22,21,0)
(19,2,0)
(14,22,0)
(6,16,0)
(5,2,0)
(11,12,0)
(4,13,0)
(7,12,0)
(6,12,0)
(18,6,0)
(6,22,0)
(2,19,1)
(15,1,1)
(19,5,1)
(8,13,1)
(7,10,1)
(6,12,1)
(7,12,1)
(6,16,1)
(12,0,1)
(20,12,1)
(17,7,1)
(10,15,1)
(6,3,1)
(1,6,1)
(13,16,1)
(4,20,1)
(0,11,1)
(6,2,1)
(5,8,1)
(18,2,1)
(3,18,1)
(13,4,1)
(7,12,2)
(6,2,2)
(6,12,2)
(13,16,2)
(6,16,2)
-----------------------------------
(0,"")
(1,args)
(2,100-1)
(3,args)
(4,data)
(5,100)
(6,vsnprintf(dest, 100-1, data, args)
(7,printLine(dest)
(8,dest)
(9,args)
(10,dest)
(11,dest)
(12,dest[100] = "")
(13,va_start(args, data)
(14,dest)
(15,va_end(args)
(16,char * data)
(17,RET)
(18,data)
(19,1)
(20,args)
(21,)
(22,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
