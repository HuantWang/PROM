-----label-----
1
-----code-----
static void badVaSink(wchar_t * data, ...)
{
    if(badStatic)
    {
        {
            wchar_t dest[100] = L"";
            va_list args;
            va_start(args, data);
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            _vsnwprintf(dest, 100-1, data, args);
            va_end(args);
            printWLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
15,19
15,20
15,21
16,17
17,18
17,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
32,35
33,34
35,36
37,38
39,40
40,41
40,42
40,43
40,44
40,45
41,42
43,44
45,46
45,47
48,49
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,6,8,9,13,18,20,22,24,28,30,34,36,38,42,44,46,47,49,51,55,57,61,63
-----computeFrom-----
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSink(wchar_t * data, ...){    if(badStatic)    {        {            wchar_t dest[100] = L"";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            _vsnwprintf(dest, 100-1, data, args);            va_end(args);            printWLine(dest);        }    }}
static void
badVaSink(wchar_t * data, ...)
badVaSink
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        {            wchar_t dest[100] = L"";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            _vsnwprintf(dest, 100-1, data, args);            va_end(args);            printWLine(dest);        }    }}
if(badStatic)    {        {            wchar_t dest[100] = L"";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            _vsnwprintf(dest, 100-1, data, args);            va_end(args);            printWLine(dest);        }    }
badStatic
badStatic
{        {            wchar_t dest[100] = L"";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            _vsnwprintf(dest, 100-1, data, args);            va_end(args);            printWLine(dest);        }    }
{            wchar_t dest[100] = L"";            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            _vsnwprintf(dest, 100-1, data, args);            va_end(args);            printWLine(dest);        }
wchar_t dest[100] = L"";
wchar_t dest[100] = L"";
wchar_t
dest[100] = L""
dest
[100]
100
= L""
L""
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
_vsnwprintf(dest, 100-1, data, args);
_vsnwprintf(dest, 100-1, data, args)
_vsnwprintf
_vsnwprintf
dest
dest
100-1
100
1
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
printWLine(dest);
printWLine(dest)
printWLine
printWLine
dest
dest
-----joern-----
(10,22,0)
(15,10,0)
(19,1,0)
(2,15,0)
(20,5,0)
(4,10,0)
(8,21,0)
(5,10,0)
(14,8,0)
(17,3,0)
(3,13,0)
(8,10,0)
(18,10,0)
(13,3,0)
(6,13,0)
(11,13,0)
(0,13,0)
(13,10,0)
(13,21,0)
(9,3,0)
(7,8,0)
(15,2,1)
(7,14,1)
(13,0,1)
(20,15,1)
(11,3,1)
(14,4,1)
(17,6,1)
(3,9,1)
(8,7,1)
(13,21,1)
(6,8,1)
(13,3,1)
(4,16,1)
(2,13,1)
(9,17,1)
(12,16,1)
(5,20,1)
(8,21,1)
(0,11,1)
(12,5,1)
(8,21,2)
(7,16,2)
(5,16,2)
(20,16,2)
(8,16,2)
(14,16,2)
(9,16,2)
(13,3,2)
(15,16,2)
(13,21,2)
(13,16,2)
(0,16,2)
(6,16,2)
(3,16,2)
(2,16,2)
(11,16,2)
(4,16,2)
(17,16,2)
-----------------------------------
(0,args)
(1,)
(2,args)
(3,100-1)
(4,"")
(5,printWLine(dest)
(6,dest)
(7,data)
(8,va_start(args, data)
(9,1)
(10,)
(11,data)
(12,RET)
(13,_vsnwprintf(dest, 100-1, data, args)
(14,args)
(15,va_end(args)
(16,badStatic)
(17,100)
(18,args)
(19,if(badStatic)
(20,dest)
(21,wchar_t * data)
(22,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
