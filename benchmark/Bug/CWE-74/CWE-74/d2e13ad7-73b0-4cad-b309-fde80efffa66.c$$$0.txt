-----label-----
1
-----code-----
static void badVaSink(wchar_t * data, ...)
{
    if(badStatic)
    {
        {
            va_list args;
            va_start(args, data);
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            vfwprintf(stdout, data, args);
            va_end(args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
15,19
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
23,26
24,25
26,27
28,29
30,31
31,32
31,33
31,34
31,35
32,33
34,35
36,37
38,39
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,6,8,9,13,19,21,25,27,29,33,35,37,39,43,45
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badVaSink(wchar_t * data, ...){    if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vfwprintf(stdout, data, args);            va_end(args);        }    }}
static void
badVaSink(wchar_t * data, ...)
badVaSink
wchar_t * data
wchar_t
* data
*
data
{    if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vfwprintf(stdout, data, args);            va_end(args);        }    }}
if(badStatic)    {        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vfwprintf(stdout, data, args);            va_end(args);        }    }
badStatic
badStatic
{        {            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vfwprintf(stdout, data, args);            va_end(args);        }    }
{            va_list args;            va_start(args, data);            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            vfwprintf(stdout, data, args);            va_end(args);        }
va_list args;
va_list args;
va_list
va_list
args
args
va_start(args, data);
va_start(args, data)
va_start
va_start
args
args
data
data
vfwprintf(stdout, data, args);
vfwprintf(stdout, data, args)
vfwprintf
vfwprintf
stdout
stdout
data
data
args
args
va_end(args);
va_end(args)
va_end
va_end
args
args
-----joern-----
(8,14,0)
(15,3,0)
(2,8,0)
(5,3,0)
(6,8,0)
(8,3,0)
(4,10,0)
(10,3,0)
(10,14,0)
(3,16,0)
(1,5,0)
(9,10,0)
(7,11,0)
(13,8,0)
(9,12,1)
(13,6,1)
(1,8,1)
(2,13,1)
(0,12,1)
(10,14,1)
(10,4,1)
(0,5,1)
(5,1,1)
(4,9,1)
(6,10,1)
(8,2,1)
(8,14,1)
(1,12,2)
(8,12,2)
(2,12,2)
(8,14,2)
(4,12,2)
(5,12,2)
(10,12,2)
(6,12,2)
(10,14,2)
(9,12,2)
(13,12,2)
-----------------------------------
(0,RET)
(1,args)
(2,args)
(3,)
(4,data)
(5,va_end(args)
(6,stdout)
(7,if(badStatic)
(8,vfwprintf(stdout, data, args)
(9,args)
(10,va_start(args, data)
(11,)
(12,badStatic)
(13,data)
(14,wchar_t * data)
(15,args)
(16,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
