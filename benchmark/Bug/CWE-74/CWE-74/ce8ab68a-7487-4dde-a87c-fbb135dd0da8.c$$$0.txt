-----label-----
1
-----code-----
static void badSink(char * data)
{
    if(badStatic)
    {
        {
            char dest[100] = "";
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            SNPRINTF(dest, 100-1, data);
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
16,17
17,18
17,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
26,29
26,30
27,28
29,30
31,32
31,33
34,35
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,6,8,9,13,18,20,22,24,28,30,32,33,35,39,41
-----computeFrom-----
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    if(badStatic)    {        {            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    if(badStatic)    {        {            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }    }}
if(badStatic)    {        {            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }    }
badStatic
badStatic
{        {            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }    }
{            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
SNPRINTF(dest, 100-1, data);
SNPRINTF(dest, 100-1, data)
SNPRINTF
SNPRINTF
dest
dest
100-1
100
1
data
data
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(15,11,0)
(14,0,0)
(1,0,0)
(11,3,0)
(3,7,0)
(0,3,0)
(11,2,0)
(8,0,0)
(4,2,0)
(12,14,0)
(16,2,0)
(13,10,0)
(2,3,0)
(0,17,0)
(0,2,0)
(0,14,0)
(18,14,0)
(9,3,0)
(8,2,1)
(15,0,1)
(6,5,1)
(12,8,1)
(0,14,1)
(0,2,1)
(11,15,1)
(6,11,1)
(0,1,1)
(1,14,1)
(16,4,1)
(11,2,1)
(14,18,1)
(2,16,1)
(4,5,1)
(0,17,1)
(18,12,1)
(0,5,2)
(8,5,2)
(0,2,2)
(1,5,2)
(14,5,2)
(0,17,2)
(11,2,2)
(12,5,2)
(2,5,2)
(11,5,2)
(0,14,2)
(16,5,2)
(4,5,2)
(18,5,2)
(15,5,2)
-----------------------------------
(0,SNPRINTF(dest, 100-1, data)
(1,data)
(2,dest[100] = "")
(3,)
(4,dest)
(5,badStatic)
(6,RET)
(7,)
(8,dest)
(9,dest)
(10,)
(11,printLine(dest)
(12,100)
(13,if(badStatic)
(14,100-1)
(15,dest)
(16,"")
(17,char * data)
(18,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
