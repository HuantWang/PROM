-----label-----
1
-----code-----
static void badSink(char * data)
{
    if(badStatic)
    {
        {
            char dest[100] = "";
            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */
            SNPRINTF(dest, 100-1, data);
            printLine(dest);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
11,13
12,13
14,15
15,16
15,17
15,18
16,17
17,18
17,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
26,29
26,30
27,28
29,30
31,32
31,33
34,35
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,6,8,9,13,18,20,22,24,28,30,32,33,35,39,41
-----computeFrom-----
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    if(badStatic)    {        {            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }    }}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    if(badStatic)    {        {            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }    }}
if(badStatic)    {        {            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }    }
badStatic
badStatic
{        {            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }    }
{            char dest[100] = "";            /* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */            SNPRINTF(dest, 100-1, data);            printLine(dest);        }
char dest[100] = "";
char dest[100] = "";
char
dest[100] = ""
dest
[100]
100
= ""
""
SNPRINTF(dest, 100-1, data);
SNPRINTF(dest, 100-1, data)
SNPRINTF
SNPRINTF
dest
dest
100-1
100
1
data
data
printLine(dest);
printLine(dest)
printLine
printLine
dest
dest
-----joern-----
(18,11,0)
(10,15,0)
(15,4,0)
(8,18,0)
(4,15,0)
(11,2,0)
(14,0,0)
(16,7,0)
(12,11,0)
(0,11,0)
(3,18,0)
(1,4,0)
(17,15,0)
(0,18,0)
(4,6,0)
(4,18,0)
(4,11,0)
(5,4,0)
(17,10,1)
(4,18,1)
(5,15,1)
(1,18,1)
(0,18,1)
(15,17,1)
(18,8,1)
(8,3,1)
(13,0,1)
(13,9,1)
(4,15,1)
(10,1,1)
(14,4,1)
(3,9,1)
(4,6,1)
(4,5,1)
(0,14,1)
(17,9,2)
(8,9,2)
(15,9,2)
(4,15,2)
(3,9,2)
(5,9,2)
(0,9,2)
(10,9,2)
(14,9,2)
(4,18,2)
(4,9,2)
(0,18,2)
(18,9,2)
(1,9,2)
(4,6,2)
-----------------------------------
(0,printLine(dest)
(1,dest)
(2,)
(3,dest)
(4,SNPRINTF(dest, 100-1, data)
(5,data)
(6,char * data)
(7,)
(8,"")
(9,badStatic)
(10,100)
(11,)
(12,dest)
(13,RET)
(14,dest)
(15,100-1)
(16,if(badStatic)
(17,1)
(18,dest[100] = "")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
